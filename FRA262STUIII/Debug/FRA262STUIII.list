
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eaa0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b104  0801ec40  0801ec40  0002ec40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029d44  08029d44  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  08029d44  08029d44  00039d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029d4c  08029d4c  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08029d4c  08029d4c  00039d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029d54  08029d54  00039d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08029d58  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  20000200  08029f54  00040200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  08029f54  000407a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00105182  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da4  00000000  00000000  001453ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004a30  00000000  00000000  00148158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004980  00000000  00000000  0014cb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb84  00000000  00000000  00151508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000221e3  00000000  00000000  0016e08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00478543  00000000  00000000  0019026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  006087b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00016468  00000000  00000000  00608804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801ec28 	.word	0x0801ec28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0801ec28 	.word	0x0801ec28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f0a:	eef0 7ae7 	vabs.f32	s15, s15
 8000f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f26:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f2a:	f01b ff7f 	bl	801ce2c <sqrtf>
 8000f2e:	eef0 7a40 	vmov.f32	s15, s0
 8000f32:	eeb0 0a67 	vmov.f32	s0, s15
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_ZN5Eigen8internal5all_tC1Ev>:

//--------------------------------------------------------------------------------
// Handling of all
//--------------------------------------------------------------------------------

struct all_t { all_t() {} };
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <HAL_UARTEx_RxEventCallback>:
/* USER CODE BEGIN 0 */

///////////////////// [UART UI Base System] /////////////////////

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a4a      	ldr	r2, [pc, #296]	; (80010a8 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	f040 808d 	bne.w	800109e <HAL_UARTEx_RxEventCallback+0x132>
	{
		oldPos_uart = newPos_uart;  // Update the last position before copying new data
 8000f84:	4b49      	ldr	r3, [pc, #292]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000f86:	881a      	ldrh	r2, [r3, #0]
 8000f88:	4b49      	ldr	r3, [pc, #292]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f8a:	801a      	strh	r2, [r3, #0]
		datasize_uart = Size;
 8000f8c:	4a49      	ldr	r2, [pc, #292]	; (80010b4 <HAL_UARTEx_RxEventCallback+0x148>)
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	8013      	strh	r3, [r2, #0]
		// If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		// This is to maintain the circular buffer
		// The old data in the main buffer will be overlapped

		if (oldPos_uart+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8000f92:	4b47      	ldr	r3, [pc, #284]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	2b20      	cmp	r3, #32
 8000f9e:	dd14      	ble.n	8000fca <HAL_UARTEx_RxEventCallback+0x5e>
		{
			oldPos_uart = 0;  // point to the start of the buffer
 8000fa0:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8000fa6:	4b42      	ldr	r3, [pc, #264]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000fae:	4413      	add	r3, r2
 8000fb0:	887a      	ldrh	r2, [r7, #2]
 8000fb2:	4942      	ldr	r1, [pc, #264]	; (80010bc <HAL_UARTEx_RxEventCallback+0x150>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f01c fe5f 	bl	801dc78 <memcpy>
			newPos_uart = Size + oldPos_uart;
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fbc:	881a      	ldrh	r2, [r3, #0]
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b39      	ldr	r3, [pc, #228]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000fc6:	801a      	strh	r2, [r3, #0]
 8000fc8:	e010      	b.n	8000fec <HAL_UARTEx_RxEventCallback+0x80>
		}
		else
		{
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8000fca:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000fd2:	4413      	add	r3, r2
 8000fd4:	887a      	ldrh	r2, [r7, #2]
 8000fd6:	4939      	ldr	r1, [pc, #228]	; (80010bc <HAL_UARTEx_RxEventCallback+0x150>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f01c fe4d 	bl	801dc78 <memcpy>
			newPos_uart = Size + oldPos_uart;
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fe0:	881a      	ldrh	r2, [r3, #0]
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000fea:	801a      	strh	r2, [r3, #0]
		}
		StartM = MainBuf[newPos_uart - datasize_uart]; // 0b1001xxxx for check start & mode
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <HAL_UARTEx_RxEventCallback+0x148>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000ffa:	5cd2      	ldrb	r2, [r2, r3]
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 8000ffe:	701a      	strb	r2, [r3, #0]
		chkStart = StartM >> 4; // for check "start" or nor
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	091b      	lsrs	r3, r3, #4
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 800100a:	701a      	strb	r2, [r3, #0]
		NameM = (StartM & 15); // Check mode
 800100c:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	f003 030f 	and.w	r3, r3, #15
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001018:	701a      	strb	r2, [r3, #0]
		if (chkStart == 9){ // 0b1001
 800101a:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b09      	cmp	r3, #9
 8001020:	d10a      	bne.n	8001038 <HAL_UARTEx_RxEventCallback+0xcc>
			if (NameM >= 1 && NameM <= 14){ // 15 work state or not
 8001022:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d02c      	beq.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b0e      	cmp	r3, #14
 8001030:	d828      	bhi.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
				All_mode_UARTUI();
 8001032:	f000 f851 	bl	80010d8 <_Z15All_mode_UARTUIv>
 8001036:	e025      	b.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
			}
		}
		else if (StartM == 88) {
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b58      	cmp	r3, #88	; 0x58
 800103e:	d121      	bne.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
			StartM = MainBuf[newPos_uart-2];
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	3b02      	subs	r3, #2
 8001046:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001048:	5cd2      	ldrb	r2, [r2, r3]
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800104c:	701a      	strb	r2, [r3, #0]
		    chkStart = StartM >> 4;
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	091b      	lsrs	r3, r3, #4
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 8001058:	701a      	strb	r2, [r3, #0]
		    NameM = (StartM & 15);
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001066:	701a      	strb	r2, [r3, #0]
		    if (chkStart == 9){
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b09      	cmp	r3, #9
 800106e:	d109      	bne.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
		    	if (NameM >= 1 && NameM <= 14){
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b0e      	cmp	r3, #14
 800107e:	d801      	bhi.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
		    		All_mode_UARTUI();
 8001080:	f000 f82a 	bl	80010d8 <_Z15All_mode_UARTUIv>
		        }
		    }
		}

		// start the DMA again
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001084:	2220      	movs	r2, #32
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <HAL_UARTEx_RxEventCallback+0x150>)
 8001088:	4810      	ldr	r0, [pc, #64]	; (80010cc <HAL_UARTEx_RxEventCallback+0x160>)
 800108a:	f01a fd0a 	bl	801baa2 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_UARTEx_RxEventCallback+0x164>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_UARTEx_RxEventCallback+0x164>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0208 	bic.w	r2, r2, #8
 800109c:	601a      	str	r2, [r3, #0]

	} //huart USART2
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40004400 	.word	0x40004400
 80010ac:	2000073a 	.word	0x2000073a
 80010b0:	20000738 	.word	0x20000738
 80010b4:	20000778 	.word	0x20000778
 80010b8:	20000718 	.word	0x20000718
 80010bc:	200006f8 	.word	0x200006f8
 80010c0:	2000077c 	.word	0x2000077c
 80010c4:	2000077a 	.word	0x2000077a
 80010c8:	2000077b 	.word	0x2000077b
 80010cc:	200003a4 	.word	0x200003a4
 80010d0:	200003e8 	.word	0x200003e8
 80010d4:	00000000 	.word	0x00000000

080010d8 <_Z15All_mode_UARTUIv>:

void All_mode_UARTUI()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
	int yur;
	int zur;
	int kur; // counter

	// NameM => 15 mode
		switch (NameM){
 80010de:	4b9c      	ldr	r3, [pc, #624]	; (8001350 <_Z15All_mode_UARTUIv+0x278>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	2b0d      	cmp	r3, #13
 80010e6:	f200 83ed 	bhi.w	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
 80010ea:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <_Z15All_mode_UARTUIv+0x18>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	08001129 	.word	0x08001129
 80010f4:	08001189 	.word	0x08001189
 80010f8:	080011bd 	.word	0x080011bd
 80010fc:	08001201 	.word	0x08001201
 8001100:	0800129f 	.word	0x0800129f
 8001104:	0800139d 	.word	0x0800139d
 8001108:	08001427 	.word	0x08001427
 800110c:	0800158b 	.word	0x0800158b
 8001110:	080015c5 	.word	0x080015c5
 8001114:	08001661 	.word	0x08001661
 8001118:	080016fd 	.word	0x080016fd
 800111c:	080017bf 	.word	0x080017bf
 8001120:	080017f7 	.word	0x080017f7
 8001124:	0800183b 	.word	0x0800183b
		////==============[Test Command]===========
			case 1: // 10010001 01000000 00000000 00101110
				chksum = MainBuf[newPos_uart-1];
 8001128:	4b8a      	ldr	r3, [pc, #552]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	3b01      	subs	r3, #1
 800112e:	4a8a      	ldr	r2, [pc, #552]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 8001130:	5cd2      	ldrb	r2, [r2, r3]
 8001132:	4b8a      	ldr	r3, [pc, #552]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 8001134:	701a      	strb	r2, [r3, #0]
				dataF2 = MainBuf[newPos_uart-2];
 8001136:	4b87      	ldr	r3, [pc, #540]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	3b02      	subs	r3, #2
 800113c:	4a86      	ldr	r2, [pc, #536]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 800113e:	5cd2      	ldrb	r2, [r2, r3]
 8001140:	4b87      	ldr	r3, [pc, #540]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 8001142:	701a      	strb	r2, [r3, #0]
				dataF1 = MainBuf[newPos_uart-3];
 8001144:	4b83      	ldr	r3, [pc, #524]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	3b03      	subs	r3, #3
 800114a:	4a83      	ldr	r2, [pc, #524]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 800114c:	5cd2      	ldrb	r2, [r2, r3]
 800114e:	4b85      	ldr	r3, [pc, #532]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 8001150:	701a      	strb	r2, [r3, #0]
				chksum2 = ~(StartM + dataF1 + dataF2);
 8001152:	4b85      	ldr	r3, [pc, #532]	; (8001368 <_Z15All_mode_UARTUIv+0x290>)
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	4b83      	ldr	r3, [pc, #524]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4b80      	ldr	r3, [pc, #512]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	b2db      	uxtb	r3, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b80      	ldr	r3, [pc, #512]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 800116c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800116e:	4b7b      	ldr	r3, [pc, #492]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	4b7e      	ldr	r3, [pc, #504]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	f040 8389 	bne.w	800188e <_Z15All_mode_UARTUIv+0x7b6>
					M_state = 1;
 800117c:	4b7c      	ldr	r3, [pc, #496]	; (8001370 <_Z15All_mode_UARTUIv+0x298>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001182:	f000 fbd9 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 8001186:	e382      	b.n	800188e <_Z15All_mode_UARTUIv+0x7b6>
		////==============[Connect MCU]===========
			case 2: //10010010 01101101
				chksum = MainBuf[newPos_uart-1];
 8001188:	4b72      	ldr	r3, [pc, #456]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	3b01      	subs	r3, #1
 800118e:	4a72      	ldr	r2, [pc, #456]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 8001190:	5cd2      	ldrb	r2, [r2, r3]
 8001192:	4b72      	ldr	r3, [pc, #456]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 8001194:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001196:	4b74      	ldr	r3, [pc, #464]	; (8001368 <_Z15All_mode_UARTUIv+0x290>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	43db      	mvns	r3, r3
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b75      	ldr	r3, [pc, #468]	; (8001374 <_Z15All_mode_UARTUIv+0x29c>)
 80011a0:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80011a2:	4b6e      	ldr	r3, [pc, #440]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	4b73      	ldr	r3, [pc, #460]	; (8001374 <_Z15All_mode_UARTUIv+0x29c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	f040 8371 	bne.w	8001892 <_Z15All_mode_UARTUIv+0x7ba>
					M_state = 2;
 80011b0:	4b6f      	ldr	r3, [pc, #444]	; (8001370 <_Z15All_mode_UARTUIv+0x298>)
 80011b2:	2202      	movs	r2, #2
 80011b4:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80011b6:	f000 fbbf 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 80011ba:	e36a      	b.n	8001892 <_Z15All_mode_UARTUIv+0x7ba>
		////==============[Disconnect MCU]===========
			case 3: //10010011 01101100
					chksum = MainBuf[newPos_uart-1];
 80011bc:	4b65      	ldr	r3, [pc, #404]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	4a65      	ldr	r2, [pc, #404]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 80011c4:	5cd2      	ldrb	r2, [r2, r3]
 80011c6:	4b65      	ldr	r3, [pc, #404]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 80011c8:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80011ca:	4b67      	ldr	r3, [pc, #412]	; (8001368 <_Z15All_mode_UARTUIv+0x290>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b68      	ldr	r3, [pc, #416]	; (8001374 <_Z15All_mode_UARTUIv+0x29c>)
 80011d4:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80011d6:	4b61      	ldr	r3, [pc, #388]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	4b66      	ldr	r3, [pc, #408]	; (8001374 <_Z15All_mode_UARTUIv+0x29c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	f040 8359 	bne.w	8001896 <_Z15All_mode_UARTUIv+0x7be>
					M_state = 3;
 80011e4:	4b62      	ldr	r3, [pc, #392]	; (8001370 <_Z15All_mode_UARTUIv+0x298>)
 80011e6:	2203      	movs	r2, #3
 80011e8:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					ResetParam();
 80011ea:	f001 fd51 	bl	8002c90 <_Z10ResetParamv>
					grandState = Ready;
 80011ee:	4b62      	ldr	r3, [pc, #392]	; (8001378 <_Z15All_mode_UARTUIv+0x2a0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
					PWMOut = 0;
 80011f4:	4b61      	ldr	r3, [pc, #388]	; (800137c <_Z15All_mode_UARTUIv+0x2a4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	801a      	strh	r2, [r3, #0]

					xu_Uart();
 80011fa:	f000 fb9d 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 80011fe:	e34a      	b.n	8001896 <_Z15All_mode_UARTUIv+0x7be>
		////==============[Angular Velo Set]===========
			case 4:
					chksum = MainBuf[newPos_uart-1];
 8001200:	4b54      	ldr	r3, [pc, #336]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	3b01      	subs	r3, #1
 8001206:	4a54      	ldr	r2, [pc, #336]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 8001208:	5cd2      	ldrb	r2, [r2, r3]
 800120a:	4b54      	ldr	r3, [pc, #336]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 800120c:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 800120e:	4b51      	ldr	r3, [pc, #324]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	3b02      	subs	r3, #2
 8001214:	4a50      	ldr	r2, [pc, #320]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 8001216:	5cd2      	ldrb	r2, [r2, r3]
 8001218:	4b51      	ldr	r3, [pc, #324]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 800121a:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 800121c:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	3b03      	subs	r3, #3
 8001222:	4a4d      	ldr	r2, [pc, #308]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 8001224:	5cd2      	ldrb	r2, [r2, r3]
 8001226:	4b4f      	ldr	r3, [pc, #316]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 8001228:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[0] = dataF1;
 800122a:	4b4e      	ldr	r3, [pc, #312]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	4b54      	ldr	r3, [pc, #336]	; (8001380 <_Z15All_mode_UARTUIv+0x2a8>)
 8001230:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[1] = dataF2;
 8001232:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	4b52      	ldr	r3, [pc, #328]	; (8001380 <_Z15All_mode_UARTUIv+0x2a8>)
 8001238:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 800123a:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <_Z15All_mode_UARTUIv+0x290>)
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	4b49      	ldr	r3, [pc, #292]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b46      	ldr	r3, [pc, #280]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	b2db      	uxtb	r3, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b46      	ldr	r3, [pc, #280]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 8001254:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 8001256:	4b41      	ldr	r3, [pc, #260]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	f040 831b 	bne.w	800189a <_Z15All_mode_UARTUIv+0x7c2>
					M_state = 4;
 8001264:	4b42      	ldr	r3, [pc, #264]	; (8001370 <_Z15All_mode_UARTUIv+0x298>)
 8001266:	2204      	movs	r2, #4
 8001268:	701a      	strb	r2, [r3, #0]
					DataProtocol_SetVelo = Set_AngVelo[1];
 800126a:	4b45      	ldr	r3, [pc, #276]	; (8001380 <_Z15All_mode_UARTUIv+0x2a8>)
 800126c:	785b      	ldrb	r3, [r3, #1]
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001276:	4b43      	ldr	r3, [pc, #268]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 8001278:	edc3 7a00 	vstr	s15, [r3]
					Velocity = (DataProtocol_SetVelo * 10)/255;
 800127c:	4b41      	ldr	r3, [pc, #260]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 800127e:	edd3 7a00 	vldr	s15, [r3]
 8001282:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001286:	ee27 7a87 	vmul.f32	s14, s15, s14
 800128a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001388 <_Z15All_mode_UARTUIv+0x2b0>
 800128e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001292:	4b3e      	ldr	r3, [pc, #248]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 8001294:	edc3 7a00 	vstr	s15, [r3]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001298:	f000 fb4e 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 800129c:	e2fd      	b.n	800189a <_Z15All_mode_UARTUIv+0x7c2>
		////==============[Angular Position Set]===========
			case 5:
					chksum = MainBuf[newPos_uart-1];
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	4a2c      	ldr	r2, [pc, #176]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 80012a6:	5cd2      	ldrb	r2, [r2, r3]
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 80012aa:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	3b02      	subs	r3, #2
 80012b2:	4a29      	ldr	r2, [pc, #164]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 80012b4:	5cd2      	ldrb	r2, [r2, r3]
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 80012b8:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <_Z15All_mode_UARTUIv+0x27c>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	3b03      	subs	r3, #3
 80012c0:	4a25      	ldr	r2, [pc, #148]	; (8001358 <_Z15All_mode_UARTUIv+0x280>)
 80012c2:	5cd2      	ldrb	r2, [r2, r3]
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 80012c6:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[0] = dataF1;
 80012c8:	4b26      	ldr	r3, [pc, #152]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 80012ca:	781a      	ldrb	r2, [r3, #0]
 80012cc:	4b30      	ldr	r3, [pc, #192]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 80012ce:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[1] = dataF2;
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 80012d2:	781a      	ldrb	r2, [r3, #0]
 80012d4:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 80012d6:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <_Z15All_mode_UARTUIv+0x290>)
 80012da:	781a      	ldrb	r2, [r3, #0]
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <_Z15All_mode_UARTUIv+0x28c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <_Z15All_mode_UARTUIv+0x288>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4413      	add	r3, r2
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b1e      	ldr	r3, [pc, #120]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 80012f2:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <_Z15All_mode_UARTUIv+0x284>)
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	4b1c      	ldr	r3, [pc, #112]	; (800136c <_Z15All_mode_UARTUIv+0x294>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f040 82ce 	bne.w	800189e <_Z15All_mode_UARTUIv+0x7c6>
					M_state = 5;
 8001302:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <_Z15All_mode_UARTUIv+0x298>)
 8001304:	2205      	movs	r2, #5
 8001306:	701a      	strb	r2, [r3, #0]

					DataProtocol_SetAngPosi = (Set_AngPosi[0]*256) + Set_AngPosi[1];
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	4a20      	ldr	r2, [pc, #128]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 8001310:	7852      	ldrb	r2, [r2, #1]
 8001312:	4413      	add	r3, r2
 8001314:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 8001316:	6013      	str	r3, [r2, #0]
					//positionlog[0] = (DataProtocol_SetAngPosi / (3.14 * 10000) * 180);
					positionlog[0] = (float)(DataProtocol_SetAngPosi / 10000.0);
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f901 	bl	8000524 <__aeabi_i2d>
 8001322:	a309      	add	r3, pc, #36	; (adr r3, 8001348 <_Z15All_mode_UARTUIv+0x270>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff fa90 	bl	800084c <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc10 	bl	8000b58 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <_Z15All_mode_UARTUIv+0x2c0>)
 800133c:	6013      	str	r3, [r2, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800133e:	f000 fafb 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 8001342:	e2ac      	b.n	800189e <_Z15All_mode_UARTUIv+0x7c6>
 8001344:	f3af 8000 	nop.w
 8001348:	00000000 	.word	0x00000000
 800134c:	40c38800 	.word	0x40c38800
 8001350:	2000077b 	.word	0x2000077b
 8001354:	2000073a 	.word	0x2000073a
 8001358:	20000718 	.word	0x20000718
 800135c:	2000077d 	.word	0x2000077d
 8001360:	20000782 	.word	0x20000782
 8001364:	20000781 	.word	0x20000781
 8001368:	2000077c 	.word	0x2000077c
 800136c:	2000077f 	.word	0x2000077f
 8001370:	20000783 	.word	0x20000783
 8001374:	2000077e 	.word	0x2000077e
 8001378:	200004aa 	.word	0x200004aa
 800137c:	20000524 	.word	0x20000524
 8001380:	20000744 	.word	0x20000744
 8001384:	20000748 	.word	0x20000748
 8001388:	437f0000 	.word	0x437f0000
 800138c:	20000538 	.word	0x20000538
 8001390:	2000074c 	.word	0x2000074c
 8001394:	20000750 	.word	0x20000750
 8001398:	200000f4 	.word	0x200000f4
		////==============[Goal 1 station]===========
			case 6:
					chksum = MainBuf[newPos_uart-1];
 800139c:	4b99      	ldr	r3, [pc, #612]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	4a99      	ldr	r2, [pc, #612]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 80013a4:	5cd2      	ldrb	r2, [r2, r3]
 80013a6:	4b99      	ldr	r3, [pc, #612]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 80013a8:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80013aa:	4b96      	ldr	r3, [pc, #600]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	3b02      	subs	r3, #2
 80013b0:	4a95      	ldr	r2, [pc, #596]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 80013b2:	5cd2      	ldrb	r2, [r2, r3]
 80013b4:	4b96      	ldr	r3, [pc, #600]	; (8001610 <_Z15All_mode_UARTUIv+0x538>)
 80013b6:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80013b8:	4b92      	ldr	r3, [pc, #584]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	3b03      	subs	r3, #3
 80013be:	4a92      	ldr	r2, [pc, #584]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 80013c0:	5cd2      	ldrb	r2, [r2, r3]
 80013c2:	4b94      	ldr	r3, [pc, #592]	; (8001614 <_Z15All_mode_UARTUIv+0x53c>)
 80013c4:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[0] = dataF1;
 80013c6:	4b93      	ldr	r3, [pc, #588]	; (8001614 <_Z15All_mode_UARTUIv+0x53c>)
 80013c8:	781a      	ldrb	r2, [r3, #0]
 80013ca:	4b93      	ldr	r3, [pc, #588]	; (8001618 <_Z15All_mode_UARTUIv+0x540>)
 80013cc:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[1] = dataF2;
 80013ce:	4b90      	ldr	r3, [pc, #576]	; (8001610 <_Z15All_mode_UARTUIv+0x538>)
 80013d0:	781a      	ldrb	r2, [r3, #0]
 80013d2:	4b91      	ldr	r3, [pc, #580]	; (8001618 <_Z15All_mode_UARTUIv+0x540>)
 80013d4:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80013d6:	4b91      	ldr	r3, [pc, #580]	; (800161c <_Z15All_mode_UARTUIv+0x544>)
 80013d8:	781a      	ldrb	r2, [r3, #0]
 80013da:	4b8e      	ldr	r3, [pc, #568]	; (8001614 <_Z15All_mode_UARTUIv+0x53c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b8b      	ldr	r3, [pc, #556]	; (8001610 <_Z15All_mode_UARTUIv+0x538>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b8c      	ldr	r3, [pc, #560]	; (8001620 <_Z15All_mode_UARTUIv+0x548>)
 80013f0:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80013f2:	4b86      	ldr	r3, [pc, #536]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	4b8a      	ldr	r3, [pc, #552]	; (8001620 <_Z15All_mode_UARTUIv+0x548>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	f040 8251 	bne.w	80018a2 <_Z15All_mode_UARTUIv+0x7ca>
					M_state = 6;
 8001400:	4b88      	ldr	r3, [pc, #544]	; (8001624 <_Z15All_mode_UARTUIv+0x54c>)
 8001402:	2206      	movs	r2, #6
 8001404:	701a      	strb	r2, [r3, #0]

					///////// Load 1 station Data /////////////
					positionlog[0] = PosDataSet[Set_Goal_1Sta[1]];
 8001406:	4b84      	ldr	r3, [pc, #528]	; (8001618 <_Z15All_mode_UARTUIv+0x540>)
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	4a87      	ldr	r2, [pc, #540]	; (8001628 <_Z15All_mode_UARTUIv+0x550>)
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a86      	ldr	r2, [pc, #536]	; (800162c <_Z15All_mode_UARTUIv+0x554>)
 8001414:	6013      	str	r3, [r2, #0]
					Set1_Sta = Set_Goal_1Sta[1];
 8001416:	4b80      	ldr	r3, [pc, #512]	; (8001618 <_Z15All_mode_UARTUIv+0x540>)
 8001418:	785b      	ldrb	r3, [r3, #1]
 800141a:	461a      	mov	r2, r3
 800141c:	4b84      	ldr	r3, [pc, #528]	; (8001630 <_Z15All_mode_UARTUIv+0x558>)
 800141e:	601a      	str	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					xu_Uart();
 8001420:	f000 fa8a 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 8001424:	e23d      	b.n	80018a2 <_Z15All_mode_UARTUIv+0x7ca>
		////==============[Goal n station]===========
			case 7:
				Nstation = MainBuf[(newPos_uart - datasize_uart)+1];
 8001426:	4b77      	ldr	r3, [pc, #476]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	4b81      	ldr	r3, [pc, #516]	; (8001634 <_Z15All_mode_UARTUIv+0x55c>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	3301      	adds	r3, #1
 8001434:	4a74      	ldr	r2, [pc, #464]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 8001436:	5cd2      	ldrb	r2, [r2, r3]
 8001438:	4b7f      	ldr	r3, [pc, #508]	; (8001638 <_Z15All_mode_UARTUIv+0x560>)
 800143a:	701a      	strb	r2, [r3, #0]
				yur = Nstation;
 800143c:	4b7e      	ldr	r3, [pc, #504]	; (8001638 <_Z15All_mode_UARTUIv+0x560>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
				zur = ( yur / 2 ) + yur % 2;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	0fda      	lsrs	r2, r3, #31
 8001446:	4413      	add	r3, r2
 8001448:	105b      	asrs	r3, r3, #1
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	bfb8      	it	lt
 8001456:	425b      	neglt	r3, r3
 8001458:	4413      	add	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
				kur = 0; // counter
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]

				for(int i = 0; i < zur; i++ ){
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	429a      	cmp	r2, r3
 800146a:	da1e      	bge.n	80014aa <_Z15All_mode_UARTUIv+0x3d2>
					dataFSum += MainBuf[oldPos_uart + (i+2)];
 800146c:	4b73      	ldr	r3, [pc, #460]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	3302      	adds	r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	4a63      	ldr	r2, [pc, #396]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 800147a:	5cd2      	ldrb	r2, [r2, r3]
 800147c:	4b70      	ldr	r3, [pc, #448]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4413      	add	r3, r2
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b6e      	ldr	r3, [pc, #440]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 8001486:	701a      	strb	r2, [r3, #0]
					Goal_nSta[i] = MainBuf[oldPos_uart + (i+2)];
 8001488:	4b6c      	ldr	r3, [pc, #432]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	3302      	adds	r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	4a5c      	ldr	r2, [pc, #368]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 8001496:	5cd1      	ldrb	r1, [r2, r3]
 8001498:	4a6a      	ldr	r2, [pc, #424]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4413      	add	r3, r2
 800149e:	460a      	mov	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < zur; i++ ){
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	3301      	adds	r3, #1
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	e7dc      	b.n	8001464 <_Z15All_mode_UARTUIv+0x38c>
				}
				for(int x = 1; x < Nstation+1; x++){
 80014aa:	2301      	movs	r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	4b62      	ldr	r3, [pc, #392]	; (8001638 <_Z15All_mode_UARTUIv+0x560>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	4293      	cmp	r3, r2
 80014b8:	dc29      	bgt.n	800150e <_Z15All_mode_UARTUIv+0x436>
                    if(x % 2 == 1){
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	bfb8      	it	lt
 80014c4:	425b      	neglt	r3, r3
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d10b      	bne.n	80014e2 <_Z15All_mode_UARTUIv+0x40a>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] % 16);
 80014ca:	4a5e      	ldr	r2, [pc, #376]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	4413      	add	r3, r2
 80014d0:	781a      	ldrb	r2, [r3, #0]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	f002 020f 	and.w	r2, r2, #15
 80014da:	b2d1      	uxtb	r1, r2
 80014dc:	4a5a      	ldr	r2, [pc, #360]	; (8001648 <_Z15All_mode_UARTUIv+0x570>)
 80014de:	54d1      	strb	r1, [r2, r3]
 80014e0:	e011      	b.n	8001506 <_Z15All_mode_UARTUIv+0x42e>
                    }else if(x % 2 == 0){
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10c      	bne.n	8001506 <_Z15All_mode_UARTUIv+0x42e>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] / 16);
 80014ec:	4a55      	ldr	r2, [pc, #340]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	4413      	add	r3, r2
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	0912      	lsrs	r2, r2, #4
 80014fa:	b2d1      	uxtb	r1, r2
 80014fc:	4a52      	ldr	r2, [pc, #328]	; (8001648 <_Z15All_mode_UARTUIv+0x570>)
 80014fe:	54d1      	strb	r1, [r2, r3]
                        kur++;
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	3301      	adds	r3, #1
 8001504:	61fb      	str	r3, [r7, #28]
				for(int x = 1; x < Nstation+1; x++){
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	e7cf      	b.n	80014ae <_Z15All_mode_UARTUIv+0x3d6>
                    }
                }

				chksum = MainBuf[newPos_uart-1];
 800150e:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	3b01      	subs	r3, #1
 8001514:	4a3c      	ldr	r2, [pc, #240]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 8001516:	5cd2      	ldrb	r2, [r2, r3]
 8001518:	4b3c      	ldr	r3, [pc, #240]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 800151a:	701a      	strb	r2, [r3, #0]
				chksum3 = ~(StartM + Nstation + dataFSum);
 800151c:	4b3f      	ldr	r3, [pc, #252]	; (800161c <_Z15All_mode_UARTUIv+0x544>)
 800151e:	781a      	ldrb	r2, [r3, #0]
 8001520:	4b45      	ldr	r3, [pc, #276]	; (8001638 <_Z15All_mode_UARTUIv+0x560>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4413      	add	r3, r2
 8001526:	b2da      	uxtb	r2, r3
 8001528:	4b45      	ldr	r3, [pc, #276]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4413      	add	r3, r2
 800152e:	b2db      	uxtb	r3, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b45      	ldr	r3, [pc, #276]	; (800164c <_Z15All_mode_UARTUIv+0x574>)
 8001536:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum3){
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 800153a:	781a      	ldrb	r2, [r3, #0]
 800153c:	4b43      	ldr	r3, [pc, #268]	; (800164c <_Z15All_mode_UARTUIv+0x574>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	f040 81b0 	bne.w	80018a6 <_Z15All_mode_UARTUIv+0x7ce>
					M_state = 7;
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <_Z15All_mode_UARTUIv+0x54c>)
 8001548:	2207      	movs	r2, #7
 800154a:	701a      	strb	r2, [r3, #0]

					/////////// Load n station-> positionlog  //////////
					//for(int j = 0; j <= len(PosDataSet); j++){
					for(int j = 0; j <= Nstation; j++){
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	4b39      	ldr	r3, [pc, #228]	; (8001638 <_Z15All_mode_UARTUIv+0x560>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4293      	cmp	r3, r2
 800155a:	dc10      	bgt.n	800157e <_Z15All_mode_UARTUIv+0x4a6>
						positionlog[j] = PosDataSet[Set_Goal_nSta[j]];
 800155c:	4a3a      	ldr	r2, [pc, #232]	; (8001648 <_Z15All_mode_UARTUIv+0x570>)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4413      	add	r3, r2
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4a30      	ldr	r2, [pc, #192]	; (8001628 <_Z15All_mode_UARTUIv+0x550>)
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	492f      	ldr	r1, [pc, #188]	; (800162c <_Z15All_mode_UARTUIv+0x554>)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	601a      	str	r2, [r3, #0]
					for(int j = 0; j <= Nstation; j++){
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	3301      	adds	r3, #1
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	e7e8      	b.n	8001550 <_Z15All_mode_UARTUIv+0x478>
						//Set_Goal_nSta -> raw index from UART
					}

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					dataFSum = 0;
 800157e:	4b30      	ldr	r3, [pc, #192]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
					xu_Uart();
 8001584:	f000 f9d8 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 8001588:	e18d      	b.n	80018a6 <_Z15All_mode_UARTUIv+0x7ce>
		////==============[RUN Go to Goal station Order to Work]===========
			case 8: //10011000 01100111
				chksum = MainBuf[newPos_uart-1];
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	3b01      	subs	r3, #1
 8001590:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 8001592:	5cd2      	ldrb	r2, [r2, r3]
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 8001596:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <_Z15All_mode_UARTUIv+0x544>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	43db      	mvns	r3, r3
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 80015a2:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	f040 817c 	bne.w	80018aa <_Z15All_mode_UARTUIv+0x7d2>
					M_state = 8;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <_Z15All_mode_UARTUIv+0x54c>)
 80015b4:	2208      	movs	r2, #8
 80015b6:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80015b8:	f000 f9be 	bl	8001938 <_Z7xu_Uartv>

		///////// Order to Work !!! ///
					grandState = work;
 80015bc:	4b25      	ldr	r3, [pc, #148]	; (8001654 <_Z15All_mode_UARTUIv+0x57c>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
					//if(grandState == Ready){grandState = work;}
					//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2 ,1000);
				}
				break;
 80015c2:	e172      	b.n	80018aa <_Z15All_mode_UARTUIv+0x7d2>
		////==============[Request Current station]===========
			case 9: //10011001 01100110
				chksum = MainBuf[newPos_uart-1];
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <_Z15All_mode_UARTUIv+0x52c>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <_Z15All_mode_UARTUIv+0x530>)
 80015cc:	5cd2      	ldrb	r2, [r2, r3]
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 80015d0:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <_Z15All_mode_UARTUIv+0x544>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 80015dc:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <_Z15All_mode_UARTUIv+0x534>)
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	f040 8161 	bne.w	80018ae <_Z15All_mode_UARTUIv+0x7d6>
					M_state = 9;
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <_Z15All_mode_UARTUIv+0x54c>)
 80015ee:	2209      	movs	r2, #9
 80015f0:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80015f2:	f000 f9a1 	bl	8001938 <_Z7xu_Uartv>
					//Req_sta[1] = 0;
					//Req_sta[2] = x;
					//Req_sta[3] = ~(Req_sta[0] + Req_sta[1] + Req_sta[2]);
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_sta, 4 ,100);
 80015f6:	2364      	movs	r3, #100	; 0x64
 80015f8:	2204      	movs	r2, #4
 80015fa:	4917      	ldr	r1, [pc, #92]	; (8001658 <_Z15All_mode_UARTUIv+0x580>)
 80015fc:	4817      	ldr	r0, [pc, #92]	; (800165c <_Z15All_mode_UARTUIv+0x584>)
 80015fe:	f01a f9be 	bl	801b97e <HAL_UART_Transmit>
				}
				break;
 8001602:	e154      	b.n	80018ae <_Z15All_mode_UARTUIv+0x7d6>
 8001604:	2000073a 	.word	0x2000073a
 8001608:	20000718 	.word	0x20000718
 800160c:	2000077d 	.word	0x2000077d
 8001610:	20000782 	.word	0x20000782
 8001614:	20000781 	.word	0x20000781
 8001618:	20000754 	.word	0x20000754
 800161c:	2000077c 	.word	0x2000077c
 8001620:	2000077f 	.word	0x2000077f
 8001624:	20000783 	.word	0x20000783
 8001628:	200004c8 	.word	0x200004c8
 800162c:	200000f4 	.word	0x200000f4
 8001630:	20000774 	.word	0x20000774
 8001634:	20000778 	.word	0x20000778
 8001638:	20000784 	.word	0x20000784
 800163c:	20000738 	.word	0x20000738
 8001640:	20000785 	.word	0x20000785
 8001644:	20000758 	.word	0x20000758
 8001648:	20000760 	.word	0x20000760
 800164c:	20000780 	.word	0x20000780
 8001650:	2000077e 	.word	0x2000077e
 8001654:	200004aa 	.word	0x200004aa
 8001658:	20000168 	.word	0x20000168
 800165c:	200003a4 	.word	0x200003a4
		////==============[Request Angular Position]===========
			case 10: //10011010 01100101
				chksum = MainBuf[newPos_uart-1];
 8001660:	4b9d      	ldr	r3, [pc, #628]	; (80018d8 <_Z15All_mode_UARTUIv+0x800>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	3b01      	subs	r3, #1
 8001666:	4a9d      	ldr	r2, [pc, #628]	; (80018dc <_Z15All_mode_UARTUIv+0x804>)
 8001668:	5cd2      	ldrb	r2, [r2, r3]
 800166a:	4b9d      	ldr	r3, [pc, #628]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 800166c:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800166e:	4b9d      	ldr	r3, [pc, #628]	; (80018e4 <_Z15All_mode_UARTUIv+0x80c>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	43db      	mvns	r3, r3
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b9c      	ldr	r3, [pc, #624]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 8001678:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800167a:	4b99      	ldr	r3, [pc, #612]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	4b9a      	ldr	r3, [pc, #616]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	f040 8115 	bne.w	80018b2 <_Z15All_mode_UARTUIv+0x7da>
					M_state = 10;
 8001688:	4b98      	ldr	r3, [pc, #608]	; (80018ec <_Z15All_mode_UARTUIv+0x814>)
 800168a:	220a      	movs	r2, #10
 800168c:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800168e:	f000 f953 	bl	8001938 <_Z7xu_Uartv>
					DataProtocol_AngPosi = (CurrentEn * 10000); //KalP
 8001692:	4b97      	ldr	r3, [pc, #604]	; (80018f0 <_Z15All_mode_UARTUIv+0x818>)
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80018f4 <_Z15All_mode_UARTUIv+0x81c>
 800169c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a4:	ee17 2a90 	vmov	r2, s15
 80016a8:	4b93      	ldr	r3, [pc, #588]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 80016aa:	601a      	str	r2, [r3, #0]
					Req_AngPosi[1] = (DataProtocol_AngPosi / 256);
 80016ac:	4b92      	ldr	r3, [pc, #584]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	da00      	bge.n	80016b6 <_Z15All_mode_UARTUIv+0x5de>
 80016b4:	33ff      	adds	r3, #255	; 0xff
 80016b6:	121b      	asrs	r3, r3, #8
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b90      	ldr	r3, [pc, #576]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80016bc:	705a      	strb	r2, [r3, #1]
					Req_AngPosi[2] = (DataProtocol_AngPosi % 256);
 80016be:	4b8e      	ldr	r3, [pc, #568]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	425a      	negs	r2, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	bf58      	it	pl
 80016ca:	4253      	negpl	r3, r2
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b8b      	ldr	r3, [pc, #556]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80016d0:	709a      	strb	r2, [r3, #2]
					Req_AngPosi[3] = ~(Req_AngPosi[0] + Req_AngPosi[1] + Req_AngPosi[2]);
 80016d2:	4b8a      	ldr	r3, [pc, #552]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	4b89      	ldr	r3, [pc, #548]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80016d8:	785b      	ldrb	r3, [r3, #1]
 80016da:	4413      	add	r3, r2
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4b87      	ldr	r3, [pc, #540]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80016e0:	789b      	ldrb	r3, [r3, #2]
 80016e2:	4413      	add	r3, r2
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b84      	ldr	r3, [pc, #528]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80016ec:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_AngPosi, 4 ,100);
 80016ee:	2364      	movs	r3, #100	; 0x64
 80016f0:	2204      	movs	r2, #4
 80016f2:	4982      	ldr	r1, [pc, #520]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80016f4:	4882      	ldr	r0, [pc, #520]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 80016f6:	f01a f942 	bl	801b97e <HAL_UART_Transmit>
				}
				break;
 80016fa:	e0da      	b.n	80018b2 <_Z15All_mode_UARTUIv+0x7da>
		////==============[Request MAX Angular velo]===========
			case 11: //10011011 01100100
				chksum = MainBuf[newPos_uart-1];
 80016fc:	4b76      	ldr	r3, [pc, #472]	; (80018d8 <_Z15All_mode_UARTUIv+0x800>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	3b01      	subs	r3, #1
 8001702:	4a76      	ldr	r2, [pc, #472]	; (80018dc <_Z15All_mode_UARTUIv+0x804>)
 8001704:	5cd2      	ldrb	r2, [r2, r3]
 8001706:	4b76      	ldr	r3, [pc, #472]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 8001708:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800170a:	4b76      	ldr	r3, [pc, #472]	; (80018e4 <_Z15All_mode_UARTUIv+0x80c>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	43db      	mvns	r3, r3
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b75      	ldr	r3, [pc, #468]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 8001714:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001716:	4b72      	ldr	r3, [pc, #456]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 8001718:	781a      	ldrb	r2, [r3, #0]
 800171a:	4b73      	ldr	r3, [pc, #460]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	f040 80c9 	bne.w	80018b6 <_Z15All_mode_UARTUIv+0x7de>
					M_state = 11;
 8001724:	4b71      	ldr	r3, [pc, #452]	; (80018ec <_Z15All_mode_UARTUIv+0x814>)
 8001726:	220b      	movs	r2, #11
 8001728:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800172a:	f000 f905 	bl	8001938 <_Z7xu_Uartv>
					DataProtocol_Velo = (KalV/(2 * 3.14)) * 60;
 800172e:	4b75      	ldr	r3, [pc, #468]	; (8001904 <_Z15All_mode_UARTUIv+0x82c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ff08 	bl	8000548 <__aeabi_f2d>
 8001738:	a365      	add	r3, pc, #404	; (adr r3, 80018d0 <_Z15All_mode_UARTUIv+0x7f8>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7ff f885 	bl	800084c <__aeabi_ddiv>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	4b6e      	ldr	r3, [pc, #440]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 8001750:	f7fe ff52 	bl	80005f8 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff f9fc 	bl	8000b58 <__aeabi_d2f>
 8001760:	4603      	mov	r3, r0
 8001762:	4a6a      	ldr	r2, [pc, #424]	; (800190c <_Z15All_mode_UARTUIv+0x834>)
 8001764:	6013      	str	r3, [r2, #0]
					Req_MaxVelo[1] = 0;
 8001766:	4b6a      	ldr	r3, [pc, #424]	; (8001910 <_Z15All_mode_UARTUIv+0x838>)
 8001768:	2200      	movs	r2, #0
 800176a:	705a      	strb	r2, [r3, #1]
					Req_MaxVelo[2] = (DataProtocol_Velo * 255) / 10;
 800176c:	4b67      	ldr	r3, [pc, #412]	; (800190c <_Z15All_mode_UARTUIv+0x834>)
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001914 <_Z15All_mode_UARTUIv+0x83c>
 8001776:	ee27 7a87 	vmul.f32	s14, s15, s14
 800177a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800177e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001786:	edc7 7a01 	vstr	s15, [r7, #4]
 800178a:	793b      	ldrb	r3, [r7, #4]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4b60      	ldr	r3, [pc, #384]	; (8001910 <_Z15All_mode_UARTUIv+0x838>)
 8001790:	709a      	strb	r2, [r3, #2]
					Req_MaxVelo[3] = ~(Req_MaxVelo[0] + Req_MaxVelo[1] + Req_MaxVelo[2]);
 8001792:	4b5f      	ldr	r3, [pc, #380]	; (8001910 <_Z15All_mode_UARTUIv+0x838>)
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	4b5e      	ldr	r3, [pc, #376]	; (8001910 <_Z15All_mode_UARTUIv+0x838>)
 8001798:	785b      	ldrb	r3, [r3, #1]
 800179a:	4413      	add	r3, r2
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b5c      	ldr	r3, [pc, #368]	; (8001910 <_Z15All_mode_UARTUIv+0x838>)
 80017a0:	789b      	ldrb	r3, [r3, #2]
 80017a2:	4413      	add	r3, r2
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b59      	ldr	r3, [pc, #356]	; (8001910 <_Z15All_mode_UARTUIv+0x838>)
 80017ac:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_MaxVelo, 4 ,1000);
 80017ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b2:	2204      	movs	r2, #4
 80017b4:	4956      	ldr	r1, [pc, #344]	; (8001910 <_Z15All_mode_UARTUIv+0x838>)
 80017b6:	4852      	ldr	r0, [pc, #328]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 80017b8:	f01a f8e1 	bl	801b97e <HAL_UART_Transmit>
				}
				break;
 80017bc:	e07b      	b.n	80018b6 <_Z15All_mode_UARTUIv+0x7de>
		////==============[Enable end effector]================
			case 12: //// 12  10011100 01100011
				chksum = MainBuf[newPos_uart-1];
 80017be:	4b46      	ldr	r3, [pc, #280]	; (80018d8 <_Z15All_mode_UARTUIv+0x800>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	4a45      	ldr	r2, [pc, #276]	; (80018dc <_Z15All_mode_UARTUIv+0x804>)
 80017c6:	5cd2      	ldrb	r2, [r2, r3]
 80017c8:	4b45      	ldr	r3, [pc, #276]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 80017ca:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80017cc:	4b45      	ldr	r3, [pc, #276]	; (80018e4 <_Z15All_mode_UARTUIv+0x80c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b44      	ldr	r3, [pc, #272]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 80017d6:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80017d8:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	4b42      	ldr	r3, [pc, #264]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d16a      	bne.n	80018ba <_Z15All_mode_UARTUIv+0x7e2>
					M_state = 12;
 80017e4:	4b41      	ldr	r3, [pc, #260]	; (80018ec <_Z15All_mode_UARTUIv+0x814>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	701a      	strb	r2, [r3, #0]
					flag_efftActi = 1;
 80017ea:	4b4b      	ldr	r3, [pc, #300]	; (8001918 <_Z15All_mode_UARTUIv+0x840>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80017f0:	f000 f8a2 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 80017f4:	e061      	b.n	80018ba <_Z15All_mode_UARTUIv+0x7e2>
		////==============[Disable end effector]================
			case 13: // 13 10011101 01100010
				chksum = MainBuf[newPos_uart-1];
 80017f6:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <_Z15All_mode_UARTUIv+0x800>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	4a37      	ldr	r2, [pc, #220]	; (80018dc <_Z15All_mode_UARTUIv+0x804>)
 80017fe:	5cd2      	ldrb	r2, [r2, r3]
 8001800:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 8001802:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001804:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <_Z15All_mode_UARTUIv+0x80c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	43db      	mvns	r3, r3
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b36      	ldr	r3, [pc, #216]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 800180e:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001810:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	4b34      	ldr	r3, [pc, #208]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d150      	bne.n	80018be <_Z15All_mode_UARTUIv+0x7e6>
					M_state = 13;
 800181c:	4b33      	ldr	r3, [pc, #204]	; (80018ec <_Z15All_mode_UARTUIv+0x814>)
 800181e:	220d      	movs	r2, #13
 8001820:	701a      	strb	r2, [r3, #0]
					//// End Effector Kill
					trig_efftRead = 0;
 8001822:	4b3e      	ldr	r3, [pc, #248]	; (800191c <_Z15All_mode_UARTUIv+0x844>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
					flag_efftRead = 0;
 8001828:	4b3d      	ldr	r3, [pc, #244]	; (8001920 <_Z15All_mode_UARTUIv+0x848>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
					flag_efftActi = 0;
 800182e:	4b3a      	ldr	r3, [pc, #232]	; (8001918 <_Z15All_mode_UARTUIv+0x840>)
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 8001834:	f000 f880 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 8001838:	e041      	b.n	80018be <_Z15All_mode_UARTUIv+0x7e6>
		////==============[Set Home Zero]================
			case 14: //10011110 01100001
				chksum = MainBuf[newPos_uart-1];
 800183a:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <_Z15All_mode_UARTUIv+0x800>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	3b01      	subs	r3, #1
 8001840:	4a26      	ldr	r2, [pc, #152]	; (80018dc <_Z15All_mode_UARTUIv+0x804>)
 8001842:	5cd2      	ldrb	r2, [r2, r3]
 8001844:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 8001846:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001848:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <_Z15All_mode_UARTUIv+0x80c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	43db      	mvns	r3, r3
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 8001852:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001854:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <_Z15All_mode_UARTUIv+0x808>)
 8001856:	781a      	ldrb	r2, [r3, #0]
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <_Z15All_mode_UARTUIv+0x810>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d130      	bne.n	80018c2 <_Z15All_mode_UARTUIv+0x7ea>
					M_state = 14;
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <_Z15All_mode_UARTUIv+0x814>)
 8001862:	220e      	movs	r2, #14
 8001864:	701a      	strb	r2, [r3, #0]
					//act as set zero interrupt
					position_order = 0;
 8001866:	4b2f      	ldr	r3, [pc, #188]	; (8001924 <_Z15All_mode_UARTUIv+0x84c>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
					positionlog[position_order] = 0.0;
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <_Z15All_mode_UARTUIv+0x84c>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4a2d      	ldr	r2, [pc, #180]	; (8001928 <_Z15All_mode_UARTUIv+0x850>)
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
					Velocity = 9.0;
 800187c:	4b2b      	ldr	r3, [pc, #172]	; (800192c <_Z15All_mode_UARTUIv+0x854>)
 800187e:	4a2c      	ldr	r2, [pc, #176]	; (8001930 <_Z15All_mode_UARTUIv+0x858>)
 8001880:	601a      	str	r2, [r3, #0]
					grandState = SetZeroGr;
 8001882:	4b2c      	ldr	r3, [pc, #176]	; (8001934 <_Z15All_mode_UARTUIv+0x85c>)
 8001884:	2205      	movs	r2, #5
 8001886:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 8001888:	f000 f856 	bl	8001938 <_Z7xu_Uartv>
				}
				break;
 800188c:	e019      	b.n	80018c2 <_Z15All_mode_UARTUIv+0x7ea>
				break;
 800188e:	bf00      	nop
 8001890:	e018      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 8001892:	bf00      	nop
 8001894:	e016      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 8001896:	bf00      	nop
 8001898:	e014      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 800189a:	bf00      	nop
 800189c:	e012      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 800189e:	bf00      	nop
 80018a0:	e010      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018a2:	bf00      	nop
 80018a4:	e00e      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018a6:	bf00      	nop
 80018a8:	e00c      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018aa:	bf00      	nop
 80018ac:	e00a      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018ae:	bf00      	nop
 80018b0:	e008      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018b2:	bf00      	nop
 80018b4:	e006      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018b6:	bf00      	nop
 80018b8:	e004      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018ba:	bf00      	nop
 80018bc:	e002      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018be:	bf00      	nop
 80018c0:	e000      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
				break;
 80018c2:	bf00      	nop
			}
}
 80018c4:	bf00      	nop
 80018c6:	3720      	adds	r7, #32
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	f3af 8000 	nop.w
 80018d0:	51eb851f 	.word	0x51eb851f
 80018d4:	40191eb8 	.word	0x40191eb8
 80018d8:	2000073a 	.word	0x2000073a
 80018dc:	20000718 	.word	0x20000718
 80018e0:	2000077d 	.word	0x2000077d
 80018e4:	2000077c 	.word	0x2000077c
 80018e8:	2000077e 	.word	0x2000077e
 80018ec:	20000783 	.word	0x20000783
 80018f0:	20000694 	.word	0x20000694
 80018f4:	461c4000 	.word	0x461c4000
 80018f8:	2000073c 	.word	0x2000073c
 80018fc:	2000016c 	.word	0x2000016c
 8001900:	200003a4 	.word	0x200003a4
 8001904:	20000678 	.word	0x20000678
 8001908:	404e0000 	.word	0x404e0000
 800190c:	20000740 	.word	0x20000740
 8001910:	20000170 	.word	0x20000170
 8001914:	437f0000 	.word	0x437f0000
 8001918:	200006e3 	.word	0x200006e3
 800191c:	200006e5 	.word	0x200006e5
 8001920:	200006e4 	.word	0x200006e4
 8001924:	200004c5 	.word	0x200004c5
 8001928:	200000f4 	.word	0x200000f4
 800192c:	20000538 	.word	0x20000538
 8001930:	41100000 	.word	0x41100000
 8001934:	200004aa 	.word	0x200004aa

08001938 <_Z7xu_Uartv>:

void xu_Uart(){
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 , 200); //Xu
 800193c:	23c8      	movs	r3, #200	; 0xc8
 800193e:	2202      	movs	r2, #2
 8001940:	4902      	ldr	r1, [pc, #8]	; (800194c <_Z7xu_Uartv+0x14>)
 8001942:	4803      	ldr	r0, [pc, #12]	; (8001950 <_Z7xu_Uartv+0x18>)
 8001944:	f01a f81b 	bl	801b97e <HAL_UART_Transmit>
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000160 	.word	0x20000160
 8001950:	200003a4 	.word	0x200003a4

08001954 <_Z7fn_Uartv>:

void fn_Uart(){
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
 8001958:	2364      	movs	r3, #100	; 0x64
 800195a:	2202      	movs	r2, #2
 800195c:	4902      	ldr	r1, [pc, #8]	; (8001968 <_Z7fn_Uartv+0x14>)
 800195e:	4803      	ldr	r0, [pc, #12]	; (800196c <_Z7fn_Uartv+0x18>)
 8001960:	f01a f80d 	bl	801b97e <HAL_UART_Transmit>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000164 	.word	0x20000164
 800196c:	200003a4 	.word	0x200003a4

08001970 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001970:	b5b0      	push	{r4, r5, r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
      return pow(__type(__x), __type(__y));
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7fe fdd2 	bl	8000524 <__aeabi_i2d>
 8001980:	4604      	mov	r4, r0
 8001982:	460d      	mov	r5, r1
 8001984:	6838      	ldr	r0, [r7, #0]
 8001986:	f7fe fdcd 	bl	8000524 <__aeabi_i2d>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	ec43 2b11 	vmov	d1, r2, r3
 8001992:	ec45 4b10 	vmov	d0, r4, r5
 8001996:	f01b f9d9 	bl	801cd4c <pow>
 800199a:	eeb0 7a40 	vmov.f32	s14, s0
 800199e:	eef0 7a60 	vmov.f32	s15, s1
    }
 80019a2:	eeb0 0a47 	vmov.f32	s0, s14
 80019a6:	eef0 0a67 	vmov.f32	s1, s15
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bdb0      	pop	{r4, r5, r7, pc}

080019b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b4:	b0f0      	sub	sp, #448	; 0x1c0
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/////assign  Matrix  element value  //////////
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 80019b8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80019bc:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 80019c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80019ca:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 80019ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019d2:	461a      	mov	r2, r3
 80019d4:	49ee      	ldr	r1, [pc, #952]	; (8001d90 <main+0x3e0>)
 80019d6:	f002 fb4e 	bl	8004076 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 80019da:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80019de:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 80019e2:	4bec      	ldr	r3, [pc, #944]	; (8001d94 <main+0x3e4>)
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80019ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f002 fb5b 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80019f6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80019fa:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 80019fe:	4be6      	ldr	r3, [pc, #920]	; (8001d98 <main+0x3e8>)
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a06:	4619      	mov	r1, r3
 8001a08:	f002 fb50 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 ,    1    ,      Dt    ,
 8001a0c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001a10:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f002 fb44 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a24:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001a28:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8001a2c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a36:	4619      	mov	r1, r3
 8001a38:	f002 fb38 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a3c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001a40:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8001a44:	4bd3      	ldr	r3, [pc, #844]	; (8001d94 <main+0x3e4>)
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f002 fb2d 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
			 0 ,    0    ,      1     ;
 8001a52:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001a56:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a64:	4619      	mov	r1, r3
 8001a66:	f002 fb21 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a6a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001a6e:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f002 fb15 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a82:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001a86:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8001a8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a94:	4619      	mov	r1, r3
 8001a96:	f002 fb09 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 8001a9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f002 faf8 	bl	8004094 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		X << 0 ,    0    ,      0     ;
 8001aa4:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001aa8:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001ab6:	f5a3 70ae 	sub.w	r0, r3, #348	; 0x15c
 8001aba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001abe:	461a      	mov	r2, r3
 8001ac0:	49b6      	ldr	r1, [pc, #728]	; (8001d9c <main+0x3ec>)
 8001ac2:	f002 fb63 	bl	800418c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001ac6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001aca:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001ad8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fb70 	bl	80041c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001ae4:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001ae8:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001af6:	4619      	mov	r1, r3
 8001af8:	f002 fb64 	bl	80041c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001afc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b00:	4618      	mov	r0, r3
 8001b02:	f002 fb52 	bl	80041aa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		X1 << 0 ,    0    ,      0     ;
 8001b06:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001b0a:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001b18:	f5a3 70a0 	sub.w	r0, r3, #320	; 0x140
 8001b1c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b20:	461a      	mov	r2, r3
 8001b22:	499f      	ldr	r1, [pc, #636]	; (8001da0 <main+0x3f0>)
 8001b24:	f002 fb32 	bl	800418c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001b28:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001b2c:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001b3a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f002 fb3f 	bl	80041c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001b46:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001b4a:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f002 fb33 	bl	80041c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001b5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b62:	4618      	mov	r0, r3
 8001b64:	f002 fb21 	bl	80041aa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>


		P << 0.000001 , 			0 	 , 			0     ,
 8001b68:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001b6c:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8001b70:	4b8c      	ldr	r3, [pc, #560]	; (8001da4 <main+0x3f4>)
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001b78:	f5a3 7092 	sub.w	r0, r3, #292	; 0x124
 8001b7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b80:	461a      	mov	r2, r3
 8001b82:	4989      	ldr	r1, [pc, #548]	; (8001da8 <main+0x3f8>)
 8001b84:	f002 fa77 	bl	8004076 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001b88:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001b8c:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001b9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 fa83 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001ba6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001baa:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f002 fa77 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 		 ,    0.000001    ,  		0     ,
 8001bbe:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001bc2:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f002 fa6b 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bd6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001bda:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001bde:	4b71      	ldr	r3, [pc, #452]	; (8001da4 <main+0x3f4>)
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001be6:	4619      	mov	r1, r3
 8001be8:	f002 fa60 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bec:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001bf0:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f002 fa54 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c04:	4602      	mov	r2, r0
			 0 		 ,    		0    ,      0.000001     ;
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c0e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c12:	4619      	mov	r1, r3
 8001c14:	4610      	mov	r0, r2
 8001c16:	f002 fa49 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001c24:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f002 fa3e 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c30:	4602      	mov	r2, r0
 8001c32:	4b5c      	ldr	r3, [pc, #368]	; (8001da4 <main+0x3f4>)
 8001c34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4610      	mov	r0, r2
 8001c40:	f002 fa34 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		P << 0.000001 , 			0 	 , 			0     ,
 8001c44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f002 fa23 	bl	8004094 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		O << 0 , 	0 	 , 		0     ,
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c56:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8001c5a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4952      	ldr	r1, [pc, #328]	; (8001dac <main+0x3fc>)
 8001c62:	f002 fa08 	bl	8004076 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c6e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001c72:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f002 fa17 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c88:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4610      	mov	r0, r2
 8001c90:	f002 fa0c 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c94:	4602      	mov	r2, r0
		     0 ,    0    ,  	0     ,
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001c9e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	f002 fa01 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001caa:	4602      	mov	r2, r0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001cb4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f002 f9f6 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001cca:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	f002 f9eb 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cd6:	4602      	mov	r2, r0
			 0 ,    0    ,      0     ;
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001ce0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f002 f9e0 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001cf6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f002 f9d5 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001d0c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f002 f9ca 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		O << 0 , 	0 	 , 		0     ,
 8001d18:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f002 f9b9 	bl	8004094 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		I << 1 , 0 , 0 ,
 8001d22:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d26:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001d2a:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8001d2e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001d32:	461a      	mov	r2, r3
 8001d34:	491e      	ldr	r1, [pc, #120]	; (8001db0 <main+0x400>)
 8001d36:	f002 f99e 	bl	8004076 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001d42:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001d46:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f002 f9ad 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d52:	4602      	mov	r2, r0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d5c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001d60:	4619      	mov	r1, r3
 8001d62:	4610      	mov	r0, r2
 8001d64:	f002 f9a2 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d68:	4602      	mov	r2, r0
			 0 , 1 , 0 ,
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d72:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001d76:	4619      	mov	r1, r3
 8001d78:	4610      	mov	r0, r2
 8001d7a:	f002 f997 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d84:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d88:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001d8c:	e012      	b.n	8001db4 <main+0x404>
 8001d8e:	bf00      	nop
 8001d90:	20000568 	.word	0x20000568
 8001d94:	3c23d70a 	.word	0x3c23d70a
 8001d98:	3851b717 	.word	0x3851b717
 8001d9c:	20000650 	.word	0x20000650
 8001da0:	2000065c 	.word	0x2000065c
 8001da4:	358637bd 	.word	0x358637bd
 8001da8:	2000058c 	.word	0x2000058c
 8001dac:	200005b0 	.word	0x200005b0
 8001db0:	200005d4 	.word	0x200005d4
 8001db4:	4619      	mov	r1, r3
 8001db6:	4610      	mov	r0, r2
 8001db8:	f002 f978 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001dc6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4610      	mov	r0, r2
 8001dce:	f002 f96d 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dd2:	4602      	mov	r2, r0
			 0 , 0 , 1 ;
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001ddc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f002 f962 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001df6:	4619      	mov	r1, r3
 8001df8:	4610      	mov	r0, r2
 8001dfa:	f002 f957 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e04:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001e08:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4610      	mov	r0, r2
 8001e10:	f002 f94c 	bl	80040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		I << 1 , 0 , 0 ,
 8001e14:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f002 f93b 	bl	8004094 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		R << pow(10, 0);
 8001e1e:	2100      	movs	r1, #0
 8001e20:	200a      	movs	r0, #10
 8001e22:	f7ff fda5 	bl	8001970 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001e26:	ec53 2b10 	vmov	r2, r3, d0
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f7fe fe93 	bl	8000b58 <__aeabi_d2f>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001e38:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8001e3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001e40:	461a      	mov	r2, r3
 8001e42:	498b      	ldr	r1, [pc, #556]	; (8002070 <main+0x6c0>)
 8001e44:	f002 fa2e 	bl	80042a4 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001e48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f002 fa38 	bl	80042c2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		D << 0 ;
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001e5a:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8001e5e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001e62:	461a      	mov	r2, r3
 8001e64:	4983      	ldr	r1, [pc, #524]	; (8002074 <main+0x6c4>)
 8001e66:	f002 fa1d 	bl	80042a4 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001e6a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f002 fa27 	bl	80042c2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		B << 0 , 0 , 0 ;
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001e7c:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8001e80:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001e84:	461a      	mov	r2, r3
 8001e86:	497c      	ldr	r1, [pc, #496]	; (8002078 <main+0x6c8>)
 8001e88:	f002 f980 	bl	800418c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001e94:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8001e98:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f002 f990 	bl	80041c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001eae:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	f002 f985 	bl	80041c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001eba:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f002 f973 	bl	80041aa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		C << 1 , 0 , 0 ;
 8001ec4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ec8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001ecc:	f507 70be 	add.w	r0, r7, #380	; 0x17c
 8001ed0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4969      	ldr	r1, [pc, #420]	; (800207c <main+0x6cc>)
 8001ed8:	f002 f9ff 	bl	80042da <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001ee4:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8001ee8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f002 fa0e 	bl	8004310 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001efe:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001f02:	4619      	mov	r1, r3
 8001f04:	4610      	mov	r0, r2
 8001f06:	f002 fa03 	bl	8004310 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001f0a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f002 f9f2 	bl	80042f8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>

		G << (Dt*Dt)/2 , Dt , 1 ;
 8001f14:	4b5a      	ldr	r3, [pc, #360]	; (8002080 <main+0x6d0>)
 8001f16:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001f1a:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001f1e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001f22:	461a      	mov	r2, r3
 8001f24:	4957      	ldr	r1, [pc, #348]	; (8002084 <main+0x6d4>)
 8001f26:	f002 f931 	bl	800418c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001f2a:	4b57      	ldr	r3, [pc, #348]	; (8002088 <main+0x6d8>)
 8001f2c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001f30:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8001f34:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 f942 	bl	80041c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001f40:	4602      	mov	r2, r0
 8001f42:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f46:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001f4a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4610      	mov	r0, r2
 8001f52:	f002 f937 	bl	80041c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001f56:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f002 f925 	bl	80041aa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f60:	f014 fa26 	bl	80163b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f64:	f000 f97e 	bl	8002264 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f68:	f000 fb8e 	bl	8002688 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001f6c:	f000 fb64 	bl	8002638 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001f70:	f000 f9ea 	bl	8002348 <_ZL12MX_I2C1_Initv>
  MX_TIM11_Init();
 8001f74:	f000 fb08 	bl	8002588 <_ZL13MX_TIM11_Initv>
  MX_TIM4_Init();
 8001f78:	f000 fa4e 	bl	8002418 <_ZL12MX_TIM4_Initv>
  MX_I2C3_Init();
 8001f7c:	f000 fa18 	bl	80023b0 <_ZL12MX_I2C3_Initv>
  MX_USART2_UART_Init();
 8001f80:	f000 fb2a 	bl	80025d8 <_ZL19MX_USART2_UART_Initv>
  MX_TIM10_Init();
 8001f84:	f000 fad8 	bl	8002538 <_ZL13MX_TIM10_Initv>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim10); // milli timer
 8001f88:	4840      	ldr	r0, [pc, #256]	; (800208c <main+0x6dc>)
 8001f8a:	f018 fd37 	bl	801a9fc <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8001f8e:	4840      	ldr	r0, [pc, #256]	; (8002090 <main+0x6e0>)
 8001f90:	f018 fd34 	bl	801a9fc <HAL_TIM_Base_Start_IT>
    //HAL_TIM_Base_Start(&htim2); // Speed
    //HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &capturedata,CAPTURENUM);

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 8001f94:	483f      	ldr	r0, [pc, #252]	; (8002094 <main+0x6e4>)
 8001f96:	f018 fcd7 	bl	801a948 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	483d      	ldr	r0, [pc, #244]	; (8002094 <main+0x6e4>)
 8001f9e:	f018 fde9 	bl	801ab74 <HAL_TIM_PWM_Start>

    //UART UI
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	493c      	ldr	r1, [pc, #240]	; (8002098 <main+0x6e8>)
 8001fa6:	483d      	ldr	r0, [pc, #244]	; (800209c <main+0x6ec>)
 8001fa8:	f019 fd7b 	bl	801baa2 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001fac:	4b3c      	ldr	r3, [pc, #240]	; (80020a0 <main+0x6f0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6819      	ldr	r1, [r3, #0]
 8001fb2:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <main+0x6f0>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	f021 0308 	bic.w	r3, r1, #8
 8001fba:	6013      	str	r3, [r2, #0]

    ////// ===== Select DataPosition Dataset =================
    switch(NumPosDataSetx){
 8001fbc:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <main+0x6f4>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d038      	beq.n	8002036 <main+0x686>
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	dc78      	bgt.n	80020ba <main+0x70a>
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d002      	beq.n	8001fd2 <main+0x622>
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d019      	beq.n	8002004 <main+0x654>
 8001fd0:	e073      	b.n	80020ba <main+0x70a>

    case 1:
    	for(int t = 0;t <= PosBufSize ;t++){
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001fd8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001fdc:	2b14      	cmp	r3, #20
 8001fde:	dc43      	bgt.n	8002068 <main+0x6b8>
		PosDataSet[t] = rawPossw_1[t];
 8001fe0:	4a31      	ldr	r2, [pc, #196]	; (80020a8 <main+0x6f8>)
 8001fe2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	6819      	ldr	r1, [r3, #0]
 8001fec:	4a2f      	ldr	r2, [pc, #188]	; (80020ac <main+0x6fc>)
 8001fee:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 8001ff8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002002:	e7e9      	b.n	8001fd8 <main+0x628>
		} break;

    case 2:
    	for(int t = 0;t <= PosBufSize ;t++){
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800200a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800200e:	2b14      	cmp	r3, #20
 8002010:	dc2c      	bgt.n	800206c <main+0x6bc>
		PosDataSet[t] = rawPossw_2[t];
 8002012:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <main+0x700>)
 8002014:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	4a23      	ldr	r2, [pc, #140]	; (80020ac <main+0x6fc>)
 8002020:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 800202a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800202e:	3301      	adds	r3, #1
 8002030:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8002034:	e7e9      	b.n	800200a <main+0x65a>
		} break;

    case 3:
    	for(int t = 0;t <= PosBufSize ;t++){
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800203c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002040:	2b14      	cmp	r3, #20
 8002042:	dc39      	bgt.n	80020b8 <main+0x708>
    	PosDataSet[t] = rawPossw_3[t];
 8002044:	4a1b      	ldr	r2, [pc, #108]	; (80020b4 <main+0x704>)
 8002046:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	6819      	ldr	r1, [r3, #0]
 8002050:	4a16      	ldr	r2, [pc, #88]	; (80020ac <main+0x6fc>)
 8002052:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 800205c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002060:	3301      	adds	r3, #1
 8002062:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8002066:	e7e9      	b.n	800203c <main+0x68c>
		} break;
 8002068:	bf00      	nop
 800206a:	e026      	b.n	80020ba <main+0x70a>
		} break;
 800206c:	bf00      	nop
 800206e:	e024      	b.n	80020ba <main+0x70a>
 8002070:	200005fc 	.word	0x200005fc
 8002074:	20000600 	.word	0x20000600
 8002078:	20000668 	.word	0x20000668
 800207c:	20000614 	.word	0x20000614
 8002080:	3851b717 	.word	0x3851b717
 8002084:	20000620 	.word	0x20000620
 8002088:	3c23d70a 	.word	0x3c23d70a
 800208c:	20000314 	.word	0x20000314
 8002090:	2000035c 	.word	0x2000035c
 8002094:	200002cc 	.word	0x200002cc
 8002098:	200006f8 	.word	0x200006f8
 800209c:	200003a4 	.word	0x200003a4
 80020a0:	200003e8 	.word	0x200003e8
 80020a4:	20000000 	.word	0x20000000
 80020a8:	20000004 	.word	0x20000004
 80020ac:	200004c8 	.word	0x200004c8
 80020b0:	20000054 	.word	0x20000054
 80020b4:	200000a4 	.word	0x200000a4
    	}break;
 80020b8:	bf00      	nop
    }

    PosoffsetMon = 0 + POSOFFSET; // for send to cubeMon
 80020ba:	4a5c      	ldr	r2, [pc, #368]	; (800222c <main+0x87c>)
 80020bc:	2334      	movs	r3, #52	; 0x34
 80020be:	8013      	strh	r3, [r2, #0]
    ////============position buffer Set Default===================
    //for(int f = 0; f <= PosBufSize; f++){
    //		positionlog[f] = -1.0;
    //	}
    //MCP23017 setting init
    HAL_Delay(50);
 80020c0:	2032      	movs	r0, #50	; 0x32
 80020c2:	f014 f9e7 	bl	8016494 <HAL_Delay>
    IOExpenderInit();
 80020c6:	f001 fd7f 	bl	8003bc8 <_Z14IOExpenderInitv>
	      ///// IT test
	 //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	  	  ///// GrandState ///////////////////

	  	  if(micros() - TimeStampGrand >= 1000){
 80020ca:	f001 fefd 	bl	8003ec8 <_Z6microsv>
 80020ce:	4b58      	ldr	r3, [pc, #352]	; (8002230 <main+0x880>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2200      	movs	r2, #0
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80020d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	ebb0 0803 	subs.w	r8, r0, r3
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e0:	eb61 0903 	sbc.w	r9, r1, r3
 80020e4:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 80020e8:	f179 0300 	sbcs.w	r3, r9, #0
 80020ec:	bf2c      	ite	cs
 80020ee:	2301      	movcs	r3, #1
 80020f0:	2300      	movcc	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <main+0x758>
	  		TimeStampGrand = micros();
 80020f8:	f001 fee6 	bl	8003ec8 <_Z6microsv>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4b4b      	ldr	r3, [pc, #300]	; (8002230 <main+0x880>)
 8002102:	601a      	str	r2, [r3, #0]
	  		GrandStatumix();
 8002104:	f000 fbaa 	bl	800285c <_Z13GrandStatumixv>
	  		//CurrentEn = BinPosXI * 0.006136;
	  	  }

	  	  // Encoder I2CRead

	  	  if (micros()-timeStampSR >= 10000)      // don't use 1
 8002108:	f001 fede 	bl	8003ec8 <_Z6microsv>
 800210c:	4b49      	ldr	r3, [pc, #292]	; (8002234 <main+0x884>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2200      	movs	r2, #0
 8002112:	623b      	str	r3, [r7, #32]
 8002114:	627a      	str	r2, [r7, #36]	; 0x24
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	1ac3      	subs	r3, r0, r3
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	eb61 0303 	sbc.w	r3, r1, r3
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	f242 7310 	movw	r3, #10000	; 0x2710
 8002128:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800212c:	4602      	mov	r2, r0
 800212e:	429a      	cmp	r2, r3
 8002130:	460b      	mov	r3, r1
 8002132:	f173 0300 	sbcs.w	r3, r3, #0
 8002136:	bf2c      	ite	cs
 8002138:	2301      	movcs	r3, #1
 800213a:	2300      	movcc	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d008      	beq.n	8002154 <main+0x7a4>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 8002142:	f001 fec1 	bl	8003ec8 <_Z6microsv>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4b3a      	ldr	r3, [pc, #232]	; (8002234 <main+0x884>)
 800214c:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 800214e:	4a3a      	ldr	r2, [pc, #232]	; (8002238 <main+0x888>)
 8002150:	2301      	movs	r3, #1
 8002152:	7013      	strb	r3, [r2, #0]
	  	          }
	  	  AbsEncI2CReadx(RawEnBitAB);
 8002154:	4839      	ldr	r0, [pc, #228]	; (800223c <main+0x88c>)
 8002156:	f001 fd4d 	bl	8003bf4 <_Z14AbsEncI2CReadxPh>
	  	  //Unwrapping();
	  	  //Kalmanfilter();

	  	  ///////////////////// 2KHz change PWM PB6////////////////////

	  	  if(micros() - timestampPWM >= 500){
 800215a:	f001 feb5 	bl	8003ec8 <_Z6microsv>
 800215e:	4b38      	ldr	r3, [pc, #224]	; (8002240 <main+0x890>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2200      	movs	r2, #0
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	61fa      	str	r2, [r7, #28]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	ebb0 0a03 	subs.w	sl, r0, r3
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	eb61 0b03 	sbc.w	fp, r1, r3
 8002174:	f5ba 7ffa 	cmp.w	sl, #500	; 0x1f4
 8002178:	f17b 0300 	sbcs.w	r3, fp, #0
 800217c:	bf2c      	ite	cs
 800217e:	2301      	movcs	r3, #1
 8002180:	2300      	movcc	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01a      	beq.n	80021be <main+0x80e>
	  		  	  timestampPWM = micros(); // stamp
 8002188:	f001 fe9e 	bl	8003ec8 <_Z6microsv>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <main+0x890>)
 8002192:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut); // dutycycle
 8002194:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <main+0x894>)
 8002196:	8819      	ldrh	r1, [r3, #0]
 8002198:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <main+0x898>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	460b      	mov	r3, r1
 800219e:	6353      	str	r3, [r2, #52]	; 0x34
	  	  		  //__HAL_TIM_SET_PRESCALER(&htim4, pscalr); // Set freq of pwm
	  	  		  //ADC_Target = ADCFeedx[1].datt;

	  	  		///// Mot Driver ///////////////////
	  	  		if (mot_dirctn == 0){
 80021a0:	4b2a      	ldr	r3, [pc, #168]	; (800224c <main+0x89c>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d105      	bne.n	80021b4 <main+0x804>
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 80021a8:	2201      	movs	r2, #1
 80021aa:	2104      	movs	r1, #4
 80021ac:	4828      	ldr	r0, [pc, #160]	; (8002250 <main+0x8a0>)
 80021ae:	f015 f853 	bl	8017258 <HAL_GPIO_WritePin>
 80021b2:	e004      	b.n	80021be <main+0x80e>
	  	  		}else{
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 80021b4:	2200      	movs	r2, #0
 80021b6:	2104      	movs	r1, #4
 80021b8:	4825      	ldr	r0, [pc, #148]	; (8002250 <main+0x8a0>)
 80021ba:	f015 f84d 	bl	8017258 <HAL_GPIO_WritePin>
				controlloop();
			 }
	  	    */

	  	 //////////// End Effector /////////////////////
	  	 Efft_activate(); // Activate by flag_efftActi = 1;
 80021be:	f001 fd6f 	bl	8003ca0 <_Z13Efft_activatev>
	  	 Efft_read(&efft_status);
 80021c2:	4824      	ldr	r0, [pc, #144]	; (8002254 <main+0x8a4>)
 80021c4:	f001 fdbc 	bl	8003d40 <_Z9Efft_readPh>
	  	 //// trig_efftRead up for 10 times afrer shoot / trig at shoot state

	  	 if(trig_efftRead != 0 && millis() - timestamp_efft >= 500){
 80021c8:	4b23      	ldr	r3, [pc, #140]	; (8002258 <main+0x8a8>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d014      	beq.n	80021fa <main+0x84a>
 80021d0:	f001 fe94 	bl	8003efc <_Z6millisv>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2200      	movs	r2, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	617a      	str	r2, [r7, #20]
 80021dc:	4b1f      	ldr	r3, [pc, #124]	; (800225c <main+0x8ac>)
 80021de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e2:	6939      	ldr	r1, [r7, #16]
 80021e4:	1a8c      	subs	r4, r1, r2
 80021e6:	6979      	ldr	r1, [r7, #20]
 80021e8:	eb61 0503 	sbc.w	r5, r1, r3
 80021ec:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 80021f0:	f175 0300 	sbcs.w	r3, r5, #0
 80021f4:	d301      	bcc.n	80021fa <main+0x84a>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <main+0x84c>
 80021fa:	2300      	movs	r3, #0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f43f af64 	beq.w	80020ca <main+0x71a>
	  		 timestamp_efft = millis();
 8002202:	f001 fe7b 	bl	8003efc <_Z6millisv>
 8002206:	4603      	mov	r3, r0
 8002208:	2200      	movs	r2, #0
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	4b13      	ldr	r3, [pc, #76]	; (800225c <main+0x8ac>)
 8002210:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002214:	e9c3 1200 	strd	r1, r2, [r3]
	  		 flag_efftRead = 1;
 8002218:	4a11      	ldr	r2, [pc, #68]	; (8002260 <main+0x8b0>)
 800221a:	2301      	movs	r3, #1
 800221c:	7013      	strb	r3, [r2, #0]
	  		 trig_efftRead++;
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <main+0x8a8>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	3301      	adds	r3, #1
 8002224:	b2db      	uxtb	r3, r3
 8002226:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <main+0x8a8>)
 8002228:	7013      	strb	r3, [r2, #0]
	  	  if(micros() - TimeStampGrand >= 1000){
 800222a:	e74e      	b.n	80020ca <main+0x71a>
 800222c:	200004a8 	.word	0x200004a8
 8002230:	200004b0 	.word	0x200004b0
 8002234:	20000518 	.word	0x20000518
 8002238:	20000522 	.word	0x20000522
 800223c:	2000051c 	.word	0x2000051c
 8002240:	20000528 	.word	0x20000528
 8002244:	20000524 	.word	0x20000524
 8002248:	200002cc 	.word	0x200002cc
 800224c:	2000052c 	.word	0x2000052c
 8002250:	40020400 	.word	0x40020400
 8002254:	200006e2 	.word	0x200006e2
 8002258:	200006e5 	.word	0x200006e5
 800225c:	200006e8 	.word	0x200006e8
 8002260:	200006e4 	.word	0x200006e4

08002264 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b094      	sub	sp, #80	; 0x50
 8002268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226a:	f107 0320 	add.w	r3, r7, #32
 800226e:	2230      	movs	r2, #48	; 0x30
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f01b fd0e 	bl	801dc94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <_Z18SystemClock_Configv+0xdc>)
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	4a2b      	ldr	r2, [pc, #172]	; (8002340 <_Z18SystemClock_Configv+0xdc>)
 8002292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002296:	6413      	str	r3, [r2, #64]	; 0x40
 8002298:	4b29      	ldr	r3, [pc, #164]	; (8002340 <_Z18SystemClock_Configv+0xdc>)
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022a4:	2300      	movs	r3, #0
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	4b26      	ldr	r3, [pc, #152]	; (8002344 <_Z18SystemClock_Configv+0xe0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a25      	ldr	r2, [pc, #148]	; (8002344 <_Z18SystemClock_Configv+0xe0>)
 80022ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b23      	ldr	r3, [pc, #140]	; (8002344 <_Z18SystemClock_Configv+0xe0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022c0:	2302      	movs	r3, #2
 80022c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022c4:	2301      	movs	r3, #1
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022c8:	2310      	movs	r3, #16
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022cc:	2302      	movs	r3, #2
 80022ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022d0:	2300      	movs	r3, #0
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022d4:	2308      	movs	r3, #8
 80022d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80022d8:	2364      	movs	r3, #100	; 0x64
 80022da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022dc:	2302      	movs	r3, #2
 80022de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022e0:	2304      	movs	r3, #4
 80022e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e4:	f107 0320 	add.w	r3, r7, #32
 80022e8:	4618      	mov	r0, r3
 80022ea:	f017 fe45 	bl	8019f78 <HAL_RCC_OscConfig>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf14      	ite	ne
 80022f4:	2301      	movne	r3, #1
 80022f6:	2300      	moveq	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80022fe:	f001 fe33 	bl	8003f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002302:	230f      	movs	r3, #15
 8002304:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002306:	2302      	movs	r3, #2
 8002308:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800230e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002312:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002318:	f107 030c 	add.w	r3, r7, #12
 800231c:	2103      	movs	r1, #3
 800231e:	4618      	mov	r0, r3
 8002320:	f018 f8a2 	bl	801a468 <HAL_RCC_ClockConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf14      	ite	ne
 800232a:	2301      	movne	r3, #1
 800232c:	2300      	moveq	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002334:	f001 fe18 	bl	8003f68 <Error_Handler>
  }
}
 8002338:	bf00      	nop
 800233a:	3750      	adds	r7, #80	; 0x50
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40023800 	.word	0x40023800
 8002344:	40007000 	.word	0x40007000

08002348 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800234c:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800234e:	4a16      	ldr	r2, [pc, #88]	; (80023a8 <_ZL12MX_I2C1_Initv+0x60>)
 8002350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002352:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002354:	4a15      	ldr	r2, [pc, #84]	; (80023ac <_ZL12MX_I2C1_Initv+0x64>)
 8002356:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002360:	2200      	movs	r2, #0
 8002362:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002366:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800236a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800236c:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800236e:	2200      	movs	r2, #0
 8002370:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <_ZL12MX_I2C1_Initv+0x5c>)
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002380:	2200      	movs	r2, #0
 8002382:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002384:	4807      	ldr	r0, [pc, #28]	; (80023a4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002386:	f014 ff99 	bl	80172bc <HAL_I2C_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	bf14      	ite	ne
 8002390:	2301      	movne	r3, #1
 8002392:	2300      	moveq	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800239a:	f001 fde5 	bl	8003f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000224 	.word	0x20000224
 80023a8:	40005400 	.word	0x40005400
 80023ac:	00061a80 	.word	0x00061a80

080023b0 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <_ZL12MX_I2C3_Initv+0x5c>)
 80023b6:	4a16      	ldr	r2, [pc, #88]	; (8002410 <_ZL12MX_I2C3_Initv+0x60>)
 80023b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <_ZL12MX_I2C3_Initv+0x5c>)
 80023bc:	4a15      	ldr	r2, [pc, #84]	; (8002414 <_ZL12MX_I2C3_Initv+0x64>)
 80023be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <_ZL12MX_I2C3_Initv+0x5c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <_ZL12MX_I2C3_Initv+0x5c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <_ZL12MX_I2C3_Initv+0x5c>)
 80023ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023d2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023d4:	4b0d      	ldr	r3, [pc, #52]	; (800240c <_ZL12MX_I2C3_Initv+0x5c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <_ZL12MX_I2C3_Initv+0x5c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <_ZL12MX_I2C3_Initv+0x5c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <_ZL12MX_I2C3_Initv+0x5c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80023ec:	4807      	ldr	r0, [pc, #28]	; (800240c <_ZL12MX_I2C3_Initv+0x5c>)
 80023ee:	f014 ff65 	bl	80172bc <HAL_I2C_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf14      	ite	ne
 80023f8:	2301      	movne	r3, #1
 80023fa:	2300      	moveq	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 8002402:	f001 fdb1 	bl	8003f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000278 	.word	0x20000278
 8002410:	40005c00 	.word	0x40005c00
 8002414:	00061a80 	.word	0x00061a80

08002418 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08e      	sub	sp, #56	; 0x38
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800241e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800242c:	f107 0320 	add.w	r3, r7, #32
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
 8002444:	615a      	str	r2, [r3, #20]
 8002446:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002448:	4b39      	ldr	r3, [pc, #228]	; (8002530 <_ZL12MX_TIM4_Initv+0x118>)
 800244a:	4a3a      	ldr	r2, [pc, #232]	; (8002534 <_ZL12MX_TIM4_Initv+0x11c>)
 800244c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800244e:	4b38      	ldr	r3, [pc, #224]	; (8002530 <_ZL12MX_TIM4_Initv+0x118>)
 8002450:	2200      	movs	r2, #0
 8002452:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002454:	4b36      	ldr	r3, [pc, #216]	; (8002530 <_ZL12MX_TIM4_Initv+0x118>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800245a:	4b35      	ldr	r3, [pc, #212]	; (8002530 <_ZL12MX_TIM4_Initv+0x118>)
 800245c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002460:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002462:	4b33      	ldr	r3, [pc, #204]	; (8002530 <_ZL12MX_TIM4_Initv+0x118>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002468:	4b31      	ldr	r3, [pc, #196]	; (8002530 <_ZL12MX_TIM4_Initv+0x118>)
 800246a:	2200      	movs	r2, #0
 800246c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800246e:	4830      	ldr	r0, [pc, #192]	; (8002530 <_ZL12MX_TIM4_Initv+0x118>)
 8002470:	f018 fa1a 	bl	801a8a8 <HAL_TIM_Base_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf14      	ite	ne
 800247a:	2301      	movne	r3, #1
 800247c:	2300      	moveq	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 8002484:	f001 fd70 	bl	8003f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800248e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002492:	4619      	mov	r1, r3
 8002494:	4826      	ldr	r0, [pc, #152]	; (8002530 <_ZL12MX_TIM4_Initv+0x118>)
 8002496:	f018 fde7 	bl	801b068 <HAL_TIM_ConfigClockSource>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	bf14      	ite	ne
 80024a0:	2301      	movne	r3, #1
 80024a2:	2300      	moveq	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 80024aa:	f001 fd5d 	bl	8003f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024ae:	4820      	ldr	r0, [pc, #128]	; (8002530 <_ZL12MX_TIM4_Initv+0x118>)
 80024b0:	f018 fb06 	bl	801aac0 <HAL_TIM_PWM_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	bf14      	ite	ne
 80024ba:	2301      	movne	r3, #1
 80024bc:	2300      	moveq	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 80024c4:	f001 fd50 	bl	8003f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024d0:	f107 0320 	add.w	r3, r7, #32
 80024d4:	4619      	mov	r1, r3
 80024d6:	4816      	ldr	r0, [pc, #88]	; (8002530 <_ZL12MX_TIM4_Initv+0x118>)
 80024d8:	f019 f982 	bl	801b7e0 <HAL_TIMEx_MasterConfigSynchronization>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bf14      	ite	ne
 80024e2:	2301      	movne	r3, #1
 80024e4:	2300      	moveq	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 80024ec:	f001 fd3c 	bl	8003f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024f0:	2360      	movs	r3, #96	; 0x60
 80024f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	2200      	movs	r2, #0
 8002504:	4619      	mov	r1, r3
 8002506:	480a      	ldr	r0, [pc, #40]	; (8002530 <_ZL12MX_TIM4_Initv+0x118>)
 8002508:	f018 fcec 	bl	801aee4 <HAL_TIM_PWM_ConfigChannel>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	bf14      	ite	ne
 8002512:	2301      	movne	r3, #1
 8002514:	2300      	moveq	r3, #0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <_ZL12MX_TIM4_Initv+0x108>
  {
    Error_Handler();
 800251c:	f001 fd24 	bl	8003f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002520:	4803      	ldr	r0, [pc, #12]	; (8002530 <_ZL12MX_TIM4_Initv+0x118>)
 8002522:	f013 fcb9 	bl	8015e98 <HAL_TIM_MspPostInit>

}
 8002526:	bf00      	nop
 8002528:	3738      	adds	r7, #56	; 0x38
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200002cc 	.word	0x200002cc
 8002534:	40000800 	.word	0x40000800

08002538 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800253c:	4b10      	ldr	r3, [pc, #64]	; (8002580 <_ZL13MX_TIM10_Initv+0x48>)
 800253e:	4a11      	ldr	r2, [pc, #68]	; (8002584 <_ZL13MX_TIM10_Initv+0x4c>)
 8002540:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 8002542:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <_ZL13MX_TIM10_Initv+0x48>)
 8002544:	2263      	movs	r2, #99	; 0x63
 8002546:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002548:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <_ZL13MX_TIM10_Initv+0x48>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <_ZL13MX_TIM10_Initv+0x48>)
 8002550:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002554:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <_ZL13MX_TIM10_Initv+0x48>)
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <_ZL13MX_TIM10_Initv+0x48>)
 800255e:	2200      	movs	r2, #0
 8002560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002562:	4807      	ldr	r0, [pc, #28]	; (8002580 <_ZL13MX_TIM10_Initv+0x48>)
 8002564:	f018 f9a0 	bl	801a8a8 <HAL_TIM_Base_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	bf14      	ite	ne
 800256e:	2301      	movne	r3, #1
 8002570:	2300      	moveq	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <_ZL13MX_TIM10_Initv+0x44>
  {
    Error_Handler();
 8002578:	f001 fcf6 	bl	8003f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000314 	.word	0x20000314
 8002584:	40014400 	.word	0x40014400

08002588 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <_ZL13MX_TIM11_Initv+0x48>)
 800258e:	4a11      	ldr	r2, [pc, #68]	; (80025d4 <_ZL13MX_TIM11_Initv+0x4c>)
 8002590:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <_ZL13MX_TIM11_Initv+0x48>)
 8002594:	2263      	movs	r2, #99	; 0x63
 8002596:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002598:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <_ZL13MX_TIM11_Initv+0x48>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <_ZL13MX_TIM11_Initv+0x48>)
 80025a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025a4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <_ZL13MX_TIM11_Initv+0x48>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <_ZL13MX_TIM11_Initv+0x48>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80025b2:	4807      	ldr	r0, [pc, #28]	; (80025d0 <_ZL13MX_TIM11_Initv+0x48>)
 80025b4:	f018 f978 	bl	801a8a8 <HAL_TIM_Base_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bf14      	ite	ne
 80025be:	2301      	movne	r3, #1
 80025c0:	2300      	moveq	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 80025c8:	f001 fcce 	bl	8003f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80025cc:	bf00      	nop
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	2000035c 	.word	0x2000035c
 80025d4:	40014800 	.word	0x40014800

080025d8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <_ZL19MX_USART2_UART_Initv+0x58>)
 80025de:	4a15      	ldr	r2, [pc, #84]	; (8002634 <_ZL19MX_USART2_UART_Initv+0x5c>)
 80025e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80025e2:	4b13      	ldr	r3, [pc, #76]	; (8002630 <_ZL19MX_USART2_UART_Initv+0x58>)
 80025e4:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80025e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <_ZL19MX_USART2_UART_Initv+0x58>)
 80025ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025f0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025f2:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <_ZL19MX_USART2_UART_Initv+0x58>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <_ZL19MX_USART2_UART_Initv+0x58>)
 80025fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002602:	220c      	movs	r2, #12
 8002604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <_ZL19MX_USART2_UART_Initv+0x58>)
 800260e:	2200      	movs	r2, #0
 8002610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002612:	4807      	ldr	r0, [pc, #28]	; (8002630 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002614:	f019 f966 	bl	801b8e4 <HAL_UART_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	bf14      	ite	ne
 800261e:	2301      	movne	r3, #1
 8002620:	2300      	moveq	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <_ZL19MX_USART2_UART_Initv+0x54>
  {
    Error_Handler();
 8002628:	f001 fc9e 	bl	8003f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}
 8002630:	200003a4 	.word	0x200003a4
 8002634:	40004400 	.word	0x40004400

08002638 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <_ZL11MX_DMA_Initv+0x4c>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a0f      	ldr	r2, [pc, #60]	; (8002684 <_ZL11MX_DMA_Initv+0x4c>)
 8002648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <_ZL11MX_DMA_Initv+0x4c>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002656:	607b      	str	r3, [r7, #4]
 8002658:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	2011      	movs	r0, #17
 8002660:	f014 f817 	bl	8016692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002664:	2011      	movs	r0, #17
 8002666:	f014 f830 	bl	80166ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	202f      	movs	r0, #47	; 0x2f
 8002670:	f014 f80f 	bl	8016692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002674:	202f      	movs	r0, #47	; 0x2f
 8002676:	f014 f828 	bl	80166ca <HAL_NVIC_EnableIRQ>

}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800

08002688 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	; 0x28
 800268c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]
 800269c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	4b69      	ldr	r3, [pc, #420]	; (8002848 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a68      	ldr	r2, [pc, #416]	; (8002848 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026a8:	f043 0304 	orr.w	r3, r3, #4
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b66      	ldr	r3, [pc, #408]	; (8002848 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	4b62      	ldr	r3, [pc, #392]	; (8002848 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a61      	ldr	r2, [pc, #388]	; (8002848 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b5f      	ldr	r3, [pc, #380]	; (8002848 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	4b5b      	ldr	r3, [pc, #364]	; (8002848 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a5a      	ldr	r2, [pc, #360]	; (8002848 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b58      	ldr	r3, [pc, #352]	; (8002848 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	4b54      	ldr	r3, [pc, #336]	; (8002848 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a53      	ldr	r2, [pc, #332]	; (8002848 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026fc:	f043 0302 	orr.w	r3, r3, #2
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b51      	ldr	r3, [pc, #324]	; (8002848 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	4b4d      	ldr	r3, [pc, #308]	; (8002848 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	4a4c      	ldr	r2, [pc, #304]	; (8002848 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002718:	f043 0308 	orr.w	r3, r3, #8
 800271c:	6313      	str	r3, [r2, #48]	; 0x30
 800271e:	4b4a      	ldr	r3, [pc, #296]	; (8002848 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800272a:	2200      	movs	r2, #0
 800272c:	2120      	movs	r1, #32
 800272e:	4847      	ldr	r0, [pc, #284]	; (800284c <_ZL12MX_GPIO_Initv+0x1c4>)
 8002730:	f014 fd92 	bl	8017258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8002734:	2200      	movs	r2, #0
 8002736:	f24e 0104 	movw	r1, #57348	; 0xe004
 800273a:	4845      	ldr	r0, [pc, #276]	; (8002850 <_ZL12MX_GPIO_Initv+0x1c8>)
 800273c:	f014 fd8c 	bl	8017258 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin EXTI11_EMER_Pin */
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_EMER_Pin;
 8002740:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002746:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800274a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4619      	mov	r1, r3
 8002756:	483f      	ldr	r0, [pc, #252]	; (8002854 <_ZL12MX_GPIO_Initv+0x1cc>)
 8002758:	f014 fbe2 	bl	8016f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM2_CH1_VINCp_Pin */
  GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 800275c:	2301      	movs	r3, #1
 800275e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800276c:	2301      	movs	r3, #1
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	4619      	mov	r1, r3
 8002776:	4835      	ldr	r0, [pc, #212]	; (800284c <_ZL12MX_GPIO_Initv+0x1c4>)
 8002778:	f014 fbd2 	bl	8016f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800277c:	2320      	movs	r3, #32
 800277e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002780:	2301      	movs	r3, #1
 8002782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002788:	2300      	movs	r3, #0
 800278a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	4619      	mov	r1, r3
 8002792:	482e      	ldr	r0, [pc, #184]	; (800284c <_ZL12MX_GPIO_Initv+0x1c4>)
 8002794:	f014 fbc4 	bl	8016f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 8002798:	2302      	movs	r3, #2
 800279a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800279c:	2300      	movs	r3, #0
 800279e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4619      	mov	r1, r3
 80027aa:	4829      	ldr	r0, [pc, #164]	; (8002850 <_ZL12MX_GPIO_Initv+0x1c8>)
 80027ac:	f014 fbb8 	bl	8016f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin PLamp_Green_Pin PLamp_Blue_Pin PLamp_Yellow_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 80027b0:	f24e 0304 	movw	r3, #57348	; 0xe004
 80027b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b6:	2301      	movs	r3, #1
 80027b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	2300      	movs	r3, #0
 80027c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	4821      	ldr	r0, [pc, #132]	; (8002850 <_ZL12MX_GPIO_Initv+0x1c8>)
 80027ca:	f014 fba9 	bl	8016f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Stop_Pin */
  GPIO_InitStruct.Pin = EXTI10_Stop_Pin;
 80027ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Stop_GPIO_Port, &GPIO_InitStruct);
 80027de:	f107 0314 	add.w	r3, r7, #20
 80027e2:	4619      	mov	r1, r3
 80027e4:	481b      	ldr	r0, [pc, #108]	; (8002854 <_ZL12MX_GPIO_Initv+0x1cc>)
 80027e6:	f014 fb9b 	bl	8016f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Sense_Pin */
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 80027ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	4619      	mov	r1, r3
 80027fe:	4815      	ldr	r0, [pc, #84]	; (8002854 <_ZL12MX_GPIO_Initv+0x1cc>)
 8002800:	f014 fb8e 	bl	8016f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI2_SetZero_Pin */
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 8002804:	2304      	movs	r3, #4
 8002806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002808:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800280c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	4619      	mov	r1, r3
 8002818:	480f      	ldr	r0, [pc, #60]	; (8002858 <_ZL12MX_GPIO_Initv+0x1d0>)
 800281a:	f014 fb81 	bl	8016f20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2100      	movs	r1, #0
 8002822:	2008      	movs	r0, #8
 8002824:	f013 ff35 	bl	8016692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002828:	2008      	movs	r0, #8
 800282a:	f013 ff4e 	bl	80166ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2100      	movs	r1, #0
 8002832:	2028      	movs	r0, #40	; 0x28
 8002834:	f013 ff2d 	bl	8016692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002838:	2028      	movs	r0, #40	; 0x28
 800283a:	f013 ff46 	bl	80166ca <HAL_NVIC_EnableIRQ>

}
 800283e:	bf00      	nop
 8002840:	3728      	adds	r7, #40	; 0x28
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
 800284c:	40020000 	.word	0x40020000
 8002850:	40020400 	.word	0x40020400
 8002854:	40020800 	.word	0x40020800
 8002858:	40020c00 	.word	0x40020c00

0800285c <_Z13GrandStatumixv>:

/* USER CODE BEGIN 4 */
////////// [Grand State] //////////////////////// [Grand State] ////////////////////////
//======== [Grand State] ======================== [Grand State] ========================

void GrandStatumix(){
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
	if (grandState != Ready){
 8002860:	4b98      	ldr	r3, [pc, #608]	; (8002ac4 <_Z13GrandStatumixv+0x268>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <_Z13GrandStatumixv+0x18>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 8002868:	2200      	movs	r2, #0
 800286a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800286e:	4896      	ldr	r0, [pc, #600]	; (8002ac8 <_Z13GrandStatumixv+0x26c>)
 8002870:	f014 fcf2 	bl	8017258 <HAL_GPIO_WritePin>
	}
	if (grandState != work){
 8002874:	4b93      	ldr	r3, [pc, #588]	; (8002ac4 <_Z13GrandStatumixv+0x268>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d005      	beq.n	8002888 <_Z13GrandStatumixv+0x2c>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 800287c:	2200      	movs	r2, #0
 800287e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002882:	4891      	ldr	r0, [pc, #580]	; (8002ac8 <_Z13GrandStatumixv+0x26c>)
 8002884:	f014 fce8 	bl	8017258 <HAL_GPIO_WritePin>
		}
	if (grandState != stop || grandState != stopnd){
 8002888:	4b8e      	ldr	r3, [pc, #568]	; (8002ac4 <_Z13GrandStatumixv+0x268>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d103      	bne.n	8002898 <_Z13GrandStatumixv+0x3c>
 8002890:	4b8c      	ldr	r3, [pc, #560]	; (8002ac4 <_Z13GrandStatumixv+0x268>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d005      	beq.n	80028a4 <_Z13GrandStatumixv+0x48>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8002898:	2200      	movs	r2, #0
 800289a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800289e:	488a      	ldr	r0, [pc, #552]	; (8002ac8 <_Z13GrandStatumixv+0x26c>)
 80028a0:	f014 fcda 	bl	8017258 <HAL_GPIO_WritePin>
			}

	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 80028a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028a8:	4888      	ldr	r0, [pc, #544]	; (8002acc <_Z13GrandStatumixv+0x270>)
 80028aa:	f014 fcbd 	bl	8017228 <HAL_GPIO_ReadPin>
 80028ae:	4603      	mov	r3, r0
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b87      	ldr	r3, [pc, #540]	; (8002ad0 <_Z13GrandStatumixv+0x274>)
 80028b4:	701a      	strb	r2, [r3, #0]
	pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 80028b6:	2102      	movs	r1, #2
 80028b8:	4883      	ldr	r0, [pc, #524]	; (8002ac8 <_Z13GrandStatumixv+0x26c>)
 80028ba:	f014 fcb5 	bl	8017228 <HAL_GPIO_ReadPin>
 80028be:	4603      	mov	r3, r0
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b84      	ldr	r3, [pc, #528]	; (8002ad4 <_Z13GrandStatumixv+0x278>)
 80028c4:	701a      	strb	r2, [r3, #0]

	switch(grandState){
 80028c6:	4b7f      	ldr	r3, [pc, #508]	; (8002ac4 <_Z13GrandStatumixv+0x268>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d80d      	bhi.n	80028ec <_Z13GrandStatumixv+0x90>
 80028d0:	a201      	add	r2, pc, #4	; (adr r2, 80028d8 <_Z13GrandStatumixv+0x7c>)
 80028d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d6:	bf00      	nop
 80028d8:	08002921 	.word	0x08002921
 80028dc:	080029f7 	.word	0x080029f7
 80028e0:	08002a8d 	.word	0x08002a8d
 80028e4:	08002a47 	.word	0x08002a47
 80028e8:	08002967 	.word	0x08002967
	default:
	case Ready:
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 80028ec:	2201      	movs	r2, #1
 80028ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028f2:	4875      	ldr	r0, [pc, #468]	; (8002ac8 <_Z13GrandStatumixv+0x26c>)
 80028f4:	f014 fcb0 	bl	8017258 <HAL_GPIO_WritePin>
		//PWMOut = 1200;
		Unwrapping();
 80028f8:	f000 fd3a 	bl	8003370 <_Z10Unwrappingv>
		Kalmanfilter();
 80028fc:	f000 fdec 	bl	80034d8 <_Z12Kalmanfilterv>
		//diffvelo();

		if (pwr_sense == 1){grandState = emer;}
 8002900:	4b74      	ldr	r3, [pc, #464]	; (8002ad4 <_Z13GrandStatumixv+0x278>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d102      	bne.n	800290e <_Z13GrandStatumixv+0xb2>
 8002908:	4b6e      	ldr	r3, [pc, #440]	; (8002ac4 <_Z13GrandStatumixv+0x268>)
 800290a:	2203      	movs	r2, #3
 800290c:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){grandState = stop;}
 800290e:	4b70      	ldr	r3, [pc, #448]	; (8002ad0 <_Z13GrandStatumixv+0x274>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	f040 80c9 	bne.w	8002aaa <_Z13GrandStatumixv+0x24e>
 8002918:	4b6a      	ldr	r3, [pc, #424]	; (8002ac4 <_Z13GrandStatumixv+0x268>)
 800291a:	2202      	movs	r2, #2
 800291c:	701a      	strb	r2, [r3, #0]
		/// [From UART] run when get {HOME} , {RUN}
		//if (bluecounter != 0){grandState = work;} // can go work from ready only
	break;
 800291e:	e0c4      	b.n	8002aaa <_Z13GrandStatumixv+0x24e>

	case work:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002920:	2201      	movs	r2, #1
 8002922:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002926:	4868      	ldr	r0, [pc, #416]	; (8002ac8 <_Z13GrandStatumixv+0x26c>)
 8002928:	f014 fc96 	bl	8017258 <HAL_GPIO_WritePin>
		LaserTrajex_workflow();
 800292c:	f000 f8e8 	bl	8002b00 <_Z20LaserTrajex_workflowv>

		if (pwr_sense == 1){
 8002930:	4b68      	ldr	r3, [pc, #416]	; (8002ad4 <_Z13GrandStatumixv+0x278>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d106      	bne.n	8002946 <_Z13GrandStatumixv+0xea>
			grandState = emer;
 8002938:	4b62      	ldr	r3, [pc, #392]	; (8002ac4 <_Z13GrandStatumixv+0x268>)
 800293a:	2203      	movs	r2, #3
 800293c:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 800293e:	4b66      	ldr	r3, [pc, #408]	; (8002ad8 <_Z13GrandStatumixv+0x27c>)
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
		}
		if (stop_sense == 0){
 8002946:	4b62      	ldr	r3, [pc, #392]	; (8002ad0 <_Z13GrandStatumixv+0x274>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 80af 	bne.w	8002aae <_Z13GrandStatumixv+0x252>
			PWMOut = 0;
 8002950:	4b62      	ldr	r3, [pc, #392]	; (8002adc <_Z13GrandStatumixv+0x280>)
 8002952:	2200      	movs	r2, #0
 8002954:	801a      	strh	r2, [r3, #0]
			grandState = stopnd;
 8002956:	4b5b      	ldr	r3, [pc, #364]	; (8002ac4 <_Z13GrandStatumixv+0x268>)
 8002958:	2204      	movs	r2, #4
 800295a:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 800295c:	4b5e      	ldr	r3, [pc, #376]	; (8002ad8 <_Z13GrandStatumixv+0x27c>)
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
		}
	break;
 8002964:	e0a3      	b.n	8002aae <_Z13GrandStatumixv+0x252>

	case SetZeroGr:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002966:	2201      	movs	r2, #1
 8002968:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800296c:	4856      	ldr	r0, [pc, #344]	; (8002ac8 <_Z13GrandStatumixv+0x26c>)
 800296e:	f014 fc73 	bl	8017258 <HAL_GPIO_WritePin>

		Unwrapping();
 8002972:	f000 fcfd 	bl	8003370 <_Z10Unwrappingv>

		 if(flagNewpos==0){
 8002976:	4b5a      	ldr	r3, [pc, #360]	; (8002ae0 <_Z13GrandStatumixv+0x284>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d111      	bne.n	80029a2 <_Z13GrandStatumixv+0x146>
			Currentpos = CurrentEn;
 800297e:	4b59      	ldr	r3, [pc, #356]	; (8002ae4 <_Z13GrandStatumixv+0x288>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a59      	ldr	r2, [pc, #356]	; (8002ae8 <_Z13GrandStatumixv+0x28c>)
 8002984:	6013      	str	r3, [r2, #0]
			//Finalposition = 0; // Put goal position here in rad
			Distance = Finalposition - Currentpos;
 8002986:	4b59      	ldr	r3, [pc, #356]	; (8002aec <_Z13GrandStatumixv+0x290>)
 8002988:	ed93 7a00 	vldr	s14, [r3]
 800298c:	4b56      	ldr	r3, [pc, #344]	; (8002ae8 <_Z13GrandStatumixv+0x28c>)
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002996:	4b56      	ldr	r3, [pc, #344]	; (8002af0 <_Z13GrandStatumixv+0x294>)
 8002998:	edc3 7a00 	vstr	s15, [r3]
			flagNewpos = 1;
 800299c:	4b50      	ldr	r3, [pc, #320]	; (8002ae0 <_Z13GrandStatumixv+0x284>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
		 }
		Trajectory();
 80029a2:	f000 f9c1 	bl	8002d28 <_Z10Trajectoryv>
		Kalmanfilter();
 80029a6:	f000 fd97 	bl	80034d8 <_Z12Kalmanfilterv>
		controlloop();
 80029aa:	f000 fff1 	bl	8003990 <_Z11controlloopv>
//		HAL_Delay(4000); // Simulate workload
//		flag_finishTra = 1;


		if (flag_finishTra == 1){
 80029ae:	4b51      	ldr	r3, [pc, #324]	; (8002af4 <_Z13GrandStatumixv+0x298>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d109      	bne.n	80029ca <_Z13GrandStatumixv+0x16e>
			flag_finishTra = 0;
 80029b6:	4b4f      	ldr	r3, [pc, #316]	; (8002af4 <_Z13GrandStatumixv+0x298>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
			fn_Uart();
 80029bc:	f7fe ffca 	bl	8001954 <_Z7fn_Uartv>
			grandState = Ready;
 80029c0:	4b40      	ldr	r3, [pc, #256]	; (8002ac4 <_Z13GrandStatumixv+0x268>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
			ResetParam();
 80029c6:	f000 f963 	bl	8002c90 <_Z10ResetParamv>
		}
		if (pwr_sense == 1){grandState = emer;}
 80029ca:	4b42      	ldr	r3, [pc, #264]	; (8002ad4 <_Z13GrandStatumixv+0x278>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d102      	bne.n	80029d8 <_Z13GrandStatumixv+0x17c>
 80029d2:	4b3c      	ldr	r3, [pc, #240]	; (8002ac4 <_Z13GrandStatumixv+0x268>)
 80029d4:	2203      	movs	r2, #3
 80029d6:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){
 80029d8:	4b3d      	ldr	r3, [pc, #244]	; (8002ad0 <_Z13GrandStatumixv+0x274>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d168      	bne.n	8002ab2 <_Z13GrandStatumixv+0x256>
					PWMOut = 0;
 80029e0:	4b3e      	ldr	r3, [pc, #248]	; (8002adc <_Z13GrandStatumixv+0x280>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	801a      	strh	r2, [r3, #0]
					grandState = stopnd;
 80029e6:	4b37      	ldr	r3, [pc, #220]	; (8002ac4 <_Z13GrandStatumixv+0x268>)
 80029e8:	2204      	movs	r2, #4
 80029ea:	701a      	strb	r2, [r3, #0]
					u_contr = 0;
 80029ec:	4b3a      	ldr	r3, [pc, #232]	; (8002ad8 <_Z13GrandStatumixv+0x27c>)
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
				}
	break;
 80029f4:	e05d      	b.n	8002ab2 <_Z13GrandStatumixv+0x256>

	case stop:
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 80029f6:	2201      	movs	r2, #1
 80029f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029fc:	4832      	ldr	r0, [pc, #200]	; (8002ac8 <_Z13GrandStatumixv+0x26c>)
 80029fe:	f014 fc2b 	bl	8017258 <HAL_GPIO_WritePin>
		PWMOut = 0;
 8002a02:	4b36      	ldr	r3, [pc, #216]	; (8002adc <_Z13GrandStatumixv+0x280>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	801a      	strh	r2, [r3, #0]

		X(1,0)=0;
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	483a      	ldr	r0, [pc, #232]	; (8002af8 <_Z13GrandStatumixv+0x29c>)
 8002a0e:	f001 fcef 	bl	80043f0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
		KalV = X(1,0);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	4836      	ldr	r0, [pc, #216]	; (8002af8 <_Z13GrandStatumixv+0x29c>)
 8002a20:	f001 fce6 	bl	80043f0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002a24:	4603      	mov	r3, r0
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a34      	ldr	r2, [pc, #208]	; (8002afc <_Z13GrandStatumixv+0x2a0>)
 8002a2a:	6013      	str	r3, [r2, #0]

		if (stop_sense == 1){
 8002a2c:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <_Z13GrandStatumixv+0x274>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d140      	bne.n	8002ab6 <_Z13GrandStatumixv+0x25a>
			grandState = Ready;
 8002a34:	4b23      	ldr	r3, [pc, #140]	; (8002ac4 <_Z13GrandStatumixv+0x268>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
			IOExpenderInit();
 8002a3a:	f001 f8c5 	bl	8003bc8 <_Z14IOExpenderInitv>
			HAL_Delay(100);
 8002a3e:	2064      	movs	r0, #100	; 0x64
 8002a40:	f013 fd28 	bl	8016494 <HAL_Delay>
			//== rotation change for dummy test
			//mot_dirctn++; mot_dirctn%=2;
		}
	break;
 8002a44:	e037      	b.n	8002ab6 <_Z13GrandStatumixv+0x25a>

	case stopnd:
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8002a46:	2201      	movs	r2, #1
 8002a48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a4c:	481e      	ldr	r0, [pc, #120]	; (8002ac8 <_Z13GrandStatumixv+0x26c>)
 8002a4e:	f014 fc03 	bl	8017258 <HAL_GPIO_WritePin>
			PWMOut = 0;
 8002a52:	4b22      	ldr	r3, [pc, #136]	; (8002adc <_Z13GrandStatumixv+0x280>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	801a      	strh	r2, [r3, #0]
			//Integral = 0;
			X(1,0)=0;
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4826      	ldr	r0, [pc, #152]	; (8002af8 <_Z13GrandStatumixv+0x29c>)
 8002a5e:	f001 fcc7 	bl	80043f0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
			KalV = X(1,0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4822      	ldr	r0, [pc, #136]	; (8002af8 <_Z13GrandStatumixv+0x29c>)
 8002a70:	f001 fcbe 	bl	80043f0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002a74:	4603      	mov	r3, r0
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a20      	ldr	r2, [pc, #128]	; (8002afc <_Z13GrandStatumixv+0x2a0>)
 8002a7a:	6013      	str	r3, [r2, #0]


			if (stop_sense == 1){
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <_Z13GrandStatumixv+0x274>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d11a      	bne.n	8002aba <_Z13GrandStatumixv+0x25e>
				grandState = work;
 8002a84:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <_Z13GrandStatumixv+0x268>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002a8a:	e016      	b.n	8002aba <_Z13GrandStatumixv+0x25e>

	case emer:
		ResetParam();
 8002a8c:	f000 f900 	bl	8002c90 <_Z10ResetParamv>
		// Reset every variables at control
		if (pwr_sense == 0){
 8002a90:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <_Z13GrandStatumixv+0x278>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d112      	bne.n	8002abe <_Z13GrandStatumixv+0x262>
			grandState = Ready;
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <_Z13GrandStatumixv+0x268>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
			HAL_Delay(250); // wait for emer release shock power
 8002a9e:	20fa      	movs	r0, #250	; 0xfa
 8002aa0:	f013 fcf8 	bl	8016494 <HAL_Delay>
			IOExpenderInit();
 8002aa4:	f001 f890 	bl	8003bc8 <_Z14IOExpenderInitv>

		}
	break;
 8002aa8:	e009      	b.n	8002abe <_Z13GrandStatumixv+0x262>
	break;
 8002aaa:	bf00      	nop
 8002aac:	e008      	b.n	8002ac0 <_Z13GrandStatumixv+0x264>
	break;
 8002aae:	bf00      	nop
 8002ab0:	e006      	b.n	8002ac0 <_Z13GrandStatumixv+0x264>
	break;
 8002ab2:	bf00      	nop
 8002ab4:	e004      	b.n	8002ac0 <_Z13GrandStatumixv+0x264>
	break;
 8002ab6:	bf00      	nop
 8002ab8:	e002      	b.n	8002ac0 <_Z13GrandStatumixv+0x264>
		break;
 8002aba:	bf00      	nop
 8002abc:	e000      	b.n	8002ac0 <_Z13GrandStatumixv+0x264>
	break;
 8002abe:	bf00      	nop
	}
}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	200004aa 	.word	0x200004aa
 8002ac8:	40020400 	.word	0x40020400
 8002acc:	40020800 	.word	0x40020800
 8002ad0:	200004ac 	.word	0x200004ac
 8002ad4:	200004ab 	.word	0x200004ab
 8002ad8:	200006d8 	.word	0x200006d8
 8002adc:	20000524 	.word	0x20000524
 8002ae0:	2000055c 	.word	0x2000055c
 8002ae4:	20000694 	.word	0x20000694
 8002ae8:	20000558 	.word	0x20000558
 8002aec:	20000530 	.word	0x20000530
 8002af0:	20000534 	.word	0x20000534
 8002af4:	200004b4 	.word	0x200004b4
 8002af8:	20000650 	.word	0x20000650
 8002afc:	20000678 	.word	0x20000678

08002b00 <_Z20LaserTrajex_workflowv>:

void LaserTrajex_workflow(){ // 1, n loop go to shoot laser run
 8002b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b04:	af00      	add	r7, sp, #0
	// -1 means no position value
	//if (Finalposition == -1){flag_LasxTraj = 0;}

	switch(flag_LasxTraj){
 8002b06:	4b53      	ldr	r3, [pc, #332]	; (8002c54 <_Z20LaserTrajex_workflowv+0x154>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d012      	beq.n	8002b34 <_Z20LaserTrajex_workflowv+0x34>
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d048      	beq.n	8002ba4 <_Z20LaserTrajex_workflowv+0xa4>
	default:
	case 0: // wait go flag
		////////// raise flag to 1 if need to drive the state

		if (grandState == work){ //flag_LasxTraj != 0 ||
 8002b12:	4b51      	ldr	r3, [pc, #324]	; (8002c58 <_Z20LaserTrajex_workflowv+0x158>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	f040 8094 	bne.w	8002c44 <_Z20LaserTrajex_workflowv+0x144>
			flag_LasxTraj = 1;
 8002b1c:	4b4d      	ldr	r3, [pc, #308]	; (8002c54 <_Z20LaserTrajex_workflowv+0x154>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]
			Finalposition = positionlog[position_order]; // receive in rad
 8002b22:	4b4e      	ldr	r3, [pc, #312]	; (8002c5c <_Z20LaserTrajex_workflowv+0x15c>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	4a4e      	ldr	r2, [pc, #312]	; (8002c60 <_Z20LaserTrajex_workflowv+0x160>)
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a4d      	ldr	r2, [pc, #308]	; (8002c64 <_Z20LaserTrajex_workflowv+0x164>)
 8002b30:	6013      	str	r3, [r2, #0]
		}
		break;
 8002b32:	e087      	b.n	8002c44 <_Z20LaserTrajex_workflowv+0x144>
	case 1: //-------------traject-----
		//====flag_LasxTraj will trig trajex in while;
		//////// raise flag to 2 and flag_efftActi = 1; if reach the target the position

		Unwrapping();
 8002b34:	f000 fc1c 	bl	8003370 <_Z10Unwrappingv>
		 if(flagNewpos == 0){
 8002b38:	4b4b      	ldr	r3, [pc, #300]	; (8002c68 <_Z20LaserTrajex_workflowv+0x168>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d114      	bne.n	8002b6a <_Z20LaserTrajex_workflowv+0x6a>
			Currentpos = CurrentEn;
 8002b40:	4b4a      	ldr	r3, [pc, #296]	; (8002c6c <_Z20LaserTrajex_workflowv+0x16c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a4a      	ldr	r2, [pc, #296]	; (8002c70 <_Z20LaserTrajex_workflowv+0x170>)
 8002b46:	6013      	str	r3, [r2, #0]
			//Finalposition = 300*0.006136; // Put goal position here in rad
			Distance = Finalposition - Currentpos;
 8002b48:	4b46      	ldr	r3, [pc, #280]	; (8002c64 <_Z20LaserTrajex_workflowv+0x164>)
 8002b4a:	ed93 7a00 	vldr	s14, [r3]
 8002b4e:	4b48      	ldr	r3, [pc, #288]	; (8002c70 <_Z20LaserTrajex_workflowv+0x170>)
 8002b50:	edd3 7a00 	vldr	s15, [r3]
 8002b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b58:	4b46      	ldr	r3, [pc, #280]	; (8002c74 <_Z20LaserTrajex_workflowv+0x174>)
 8002b5a:	edc3 7a00 	vstr	s15, [r3]
			flagNewpos = 1;
 8002b5e:	4b42      	ldr	r3, [pc, #264]	; (8002c68 <_Z20LaserTrajex_workflowv+0x168>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
			check = 0;
 8002b64:	4b44      	ldr	r3, [pc, #272]	; (8002c78 <_Z20LaserTrajex_workflowv+0x178>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
		 }
		Trajectory();
 8002b6a:	f000 f8dd 	bl	8002d28 <_Z10Trajectoryv>
		Kalmanfilter();
 8002b6e:	f000 fcb3 	bl	80034d8 <_Z12Kalmanfilterv>
		controlloop();
 8002b72:	f000 ff0d 	bl	8003990 <_Z11controlloopv>

		//HAL_Delay(2500); // Simulate workload
		//flag_finishTra = 1;

		if(flag_finishTra == 1){
 8002b76:	4b41      	ldr	r3, [pc, #260]	; (8002c7c <_Z20LaserTrajex_workflowv+0x17c>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d164      	bne.n	8002c48 <_Z20LaserTrajex_workflowv+0x148>
			flag_finishTra = 0;
 8002b7e:	4b3f      	ldr	r3, [pc, #252]	; (8002c7c <_Z20LaserTrajex_workflowv+0x17c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
			flag_LasxTraj = 2;
 8002b84:	4b33      	ldr	r3, [pc, #204]	; (8002c54 <_Z20LaserTrajex_workflowv+0x154>)
 8002b86:	2202      	movs	r2, #2
 8002b88:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 1;
 8002b8a:	4b3d      	ldr	r3, [pc, #244]	; (8002c80 <_Z20LaserTrajex_workflowv+0x180>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]

			timeout_efft = millis();
 8002b90:	f001 f9b4 	bl	8003efc <_Z6millisv>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2200      	movs	r2, #0
 8002b98:	469a      	mov	sl, r3
 8002b9a:	4693      	mov	fp, r2
 8002b9c:	4b39      	ldr	r3, [pc, #228]	; (8002c84 <_Z20LaserTrajex_workflowv+0x184>)
 8002b9e:	e9c3 ab00 	strd	sl, fp, [r3]
		}
		break;
 8002ba2:	e051      	b.n	8002c48 <_Z20LaserTrajex_workflowv+0x148>
	case 2: //---------------Laserwork--------------
		trig_efftRead = 1;
 8002ba4:	4b38      	ldr	r3, [pc, #224]	; (8002c88 <_Z20LaserTrajex_workflowv+0x188>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	701a      	strb	r2, [r3, #0]

		// if laser finished work or tomeout and not too fast shift state
		//if((efft_status == 0x78 || millis() - timeout_efft >= 6000) && millis() - timeout_efft >= 1500){
		// force encoder to work
		if(efft_status == 0x78 && millis() - timeout_efft >= 5050){
 8002baa:	4b38      	ldr	r3, [pc, #224]	; (8002c8c <_Z20LaserTrajex_workflowv+0x18c>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b78      	cmp	r3, #120	; 0x78
 8002bb0:	d114      	bne.n	8002bdc <_Z20LaserTrajex_workflowv+0xdc>
 8002bb2:	f001 f9a3 	bl	8003efc <_Z6millisv>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2200      	movs	r2, #0
 8002bba:	4698      	mov	r8, r3
 8002bbc:	4691      	mov	r9, r2
 8002bbe:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <_Z20LaserTrajex_workflowv+0x184>)
 8002bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc4:	ebb8 0402 	subs.w	r4, r8, r2
 8002bc8:	eb69 0503 	sbc.w	r5, r9, r3
 8002bcc:	f241 33ba 	movw	r3, #5050	; 0x13ba
 8002bd0:	429c      	cmp	r4, r3
 8002bd2:	f175 0300 	sbcs.w	r3, r5, #0
 8002bd6:	d301      	bcc.n	8002bdc <_Z20LaserTrajex_workflowv+0xdc>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <_Z20LaserTrajex_workflowv+0xde>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d034      	beq.n	8002c4c <_Z20LaserTrajex_workflowv+0x14c>
			efft_status = 0x00;
 8002be2:	4b2a      	ldr	r3, [pc, #168]	; (8002c8c <_Z20LaserTrajex_workflowv+0x18c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 0;
 8002be8:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <_Z20LaserTrajex_workflowv+0x188>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
			position_order++; // go to next obtained position
 8002bee:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <_Z20LaserTrajex_workflowv+0x15c>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <_Z20LaserTrajex_workflowv+0x15c>)
 8002bf8:	701a      	strb	r2, [r3, #0]

			if (positionlog[position_order] == -1){
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <_Z20LaserTrajex_workflowv+0x15c>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	4a18      	ldr	r2, [pc, #96]	; (8002c60 <_Z20LaserTrajex_workflowv+0x160>)
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	edd3 7a00 	vldr	s15, [r3]
 8002c08:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002c0c:	eef4 7a47 	vcmp.f32	s15, s14
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	d10a      	bne.n	8002c2c <_Z20LaserTrajex_workflowv+0x12c>
				//Real end, reset all position parameter
				// back to ready
				//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
				fn_Uart();
 8002c16:	f7fe fe9d 	bl	8001954 <_Z7fn_Uartv>
				flag_LasxTraj = 0;
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <_Z20LaserTrajex_workflowv+0x154>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
				ResetParam();
 8002c20:	f000 f836 	bl	8002c90 <_Z10ResetParamv>
				grandState = Ready;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <_Z20LaserTrajex_workflowv+0x158>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	701a      	strb	r2, [r3, #0]
			else {
				Finalposition = positionlog[position_order];
				flag_LasxTraj = 1;
			} // continue next pos if have
		}
		break;
 8002c2a:	e00f      	b.n	8002c4c <_Z20LaserTrajex_workflowv+0x14c>
				Finalposition = positionlog[position_order];
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <_Z20LaserTrajex_workflowv+0x15c>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	4a0b      	ldr	r2, [pc, #44]	; (8002c60 <_Z20LaserTrajex_workflowv+0x160>)
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <_Z20LaserTrajex_workflowv+0x164>)
 8002c3a:	6013      	str	r3, [r2, #0]
				flag_LasxTraj = 1;
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <_Z20LaserTrajex_workflowv+0x154>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
		break;
 8002c42:	e003      	b.n	8002c4c <_Z20LaserTrajex_workflowv+0x14c>
		break;
 8002c44:	bf00      	nop
 8002c46:	e002      	b.n	8002c4e <_Z20LaserTrajex_workflowv+0x14e>
		break;
 8002c48:	bf00      	nop
 8002c4a:	e000      	b.n	8002c4e <_Z20LaserTrajex_workflowv+0x14e>
		break;
 8002c4c:	bf00      	nop
	}
}
 8002c4e:	bf00      	nop
 8002c50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c54:	200004c4 	.word	0x200004c4
 8002c58:	200004aa 	.word	0x200004aa
 8002c5c:	200004c5 	.word	0x200004c5
 8002c60:	200000f4 	.word	0x200000f4
 8002c64:	20000530 	.word	0x20000530
 8002c68:	2000055c 	.word	0x2000055c
 8002c6c:	20000694 	.word	0x20000694
 8002c70:	20000558 	.word	0x20000558
 8002c74:	20000534 	.word	0x20000534
 8002c78:	200006e1 	.word	0x200006e1
 8002c7c:	200004b4 	.word	0x200004b4
 8002c80:	200006e3 	.word	0x200006e3
 8002c84:	200006f0 	.word	0x200006f0
 8002c88:	200006e5 	.word	0x200006e5
 8002c8c:	200006e2 	.word	0x200006e2

08002c90 <_Z10ResetParamv>:

void ResetParam(){
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
	// Reset every variables at control
	// reset position buffer
	PWMOut = 0;
 8002c96:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <_Z10ResetParamv+0x6c>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <_Z10ResetParamv+0x70>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	dc09      	bgt.n	8002cc0 <_Z10ResetParamv+0x30>
			positionlog[i] = -1.0;
 8002cac:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <_Z10ResetParamv+0x74>)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <_Z10ResetParamv+0x78>)
 8002cb6:	601a      	str	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	e7ef      	b.n	8002ca0 <_Z10ResetParamv+0x10>
		}
	position_order = 0;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <_Z10ResetParamv+0x70>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
	flag_LasxTraj = 0;
 8002cc6:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <_Z10ResetParamv+0x7c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
	trig_efftRead = 0;
 8002ccc:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <_Z10ResetParamv+0x80>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
	bluecounter = 0;
 8002cd2:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <_Z10ResetParamv+0x84>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
	Distance = 0;
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <_Z10ResetParamv+0x88>)
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
	Currentpos = 0;
 8002ce0:	4b0e      	ldr	r3, [pc, #56]	; (8002d1c <_Z10ResetParamv+0x8c>)
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
	efft_status = 0x00;
 8002ce8:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <_Z10ResetParamv+0x90>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
	IOExpenderInit();
 8002cee:	f000 ff6b 	bl	8003bc8 <_Z14IOExpenderInitv>
	//Integral = 0;
	//u_contr = 0;
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000524 	.word	0x20000524
 8002d00:	200004c5 	.word	0x200004c5
 8002d04:	200000f4 	.word	0x200000f4
 8002d08:	bf800000 	.word	0xbf800000
 8002d0c:	200004c4 	.word	0x200004c4
 8002d10:	200006e5 	.word	0x200006e5
 8002d14:	200006a0 	.word	0x200006a0
 8002d18:	20000534 	.word	0x20000534
 8002d1c:	20000558 	.word	0x20000558
 8002d20:	200006e2 	.word	0x200006e2
 8002d24:	00000000 	.word	0x00000000

08002d28 <_Z10Trajectoryv>:

//////////////////// [Trajectory Path] //////////////////////
void Trajectory(){
 8002d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d2c:	ed2d 8b04 	vpush	{d8-d9}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0

	if(micros() - TimeStampTraject >= 10000){
 8002d34:	f001 f8c8 	bl	8003ec8 <_Z6microsv>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	49ba      	ldr	r1, [pc, #744]	; (8003028 <_Z10Trajectoryv+0x300>)
 8002d3e:	6809      	ldr	r1, [r1, #0]
 8002d40:	2000      	movs	r0, #0
 8002d42:	4688      	mov	r8, r1
 8002d44:	4681      	mov	r9, r0
 8002d46:	ebb2 0408 	subs.w	r4, r2, r8
 8002d4a:	eb63 0509 	sbc.w	r5, r3, r9
 8002d4e:	f242 7310 	movw	r3, #10000	; 0x2710
 8002d52:	429c      	cmp	r4, r3
 8002d54:	f175 0300 	sbcs.w	r3, r5, #0
 8002d58:	bf2c      	ite	cs
 8002d5a:	2301      	movcs	r3, #1
 8002d5c:	2300      	movcc	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 82db 	beq.w	800331c <_Z10Trajectoryv+0x5f4>
		TimeStampTraject = micros();
 8002d66:	f001 f8af 	bl	8003ec8 <_Z6microsv>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4bae      	ldr	r3, [pc, #696]	; (8003028 <_Z10Trajectoryv+0x300>)
 8002d70:	601a      	str	r2, [r3, #0]

		Acceleration = 0.5;
 8002d72:	4bae      	ldr	r3, [pc, #696]	; (800302c <_Z10Trajectoryv+0x304>)
 8002d74:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002d78:	601a      	str	r2, [r3, #0]


		if (Distance/Velocity > Velocity/Acceleration){
 8002d7a:	4bad      	ldr	r3, [pc, #692]	; (8003030 <_Z10Trajectoryv+0x308>)
 8002d7c:	edd3 6a00 	vldr	s13, [r3]
 8002d80:	4bac      	ldr	r3, [pc, #688]	; (8003034 <_Z10Trajectoryv+0x30c>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d8a:	4baa      	ldr	r3, [pc, #680]	; (8003034 <_Z10Trajectoryv+0x30c>)
 8002d8c:	ed93 6a00 	vldr	s12, [r3]
 8002d90:	4ba6      	ldr	r3, [pc, #664]	; (800302c <_Z10Trajectoryv+0x304>)
 8002d92:	edd3 6a00 	vldr	s13, [r3]
 8002d96:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002d9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da2:	dd0b      	ble.n	8002dbc <_Z10Trajectoryv+0x94>
			Tb = Velocity/Acceleration;
 8002da4:	4ba3      	ldr	r3, [pc, #652]	; (8003034 <_Z10Trajectoryv+0x30c>)
 8002da6:	edd3 6a00 	vldr	s13, [r3]
 8002daa:	4ba0      	ldr	r3, [pc, #640]	; (800302c <_Z10Trajectoryv+0x304>)
 8002dac:	ed93 7a00 	vldr	s14, [r3]
 8002db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002db4:	4ba0      	ldr	r3, [pc, #640]	; (8003038 <_Z10Trajectoryv+0x310>)
 8002db6:	edc3 7a00 	vstr	s15, [r3]
 8002dba:	e029      	b.n	8002e10 <_Z10Trajectoryv+0xe8>
		}
		else {
			Tb = sqrt(2*abs(Distance));
 8002dbc:	4b9c      	ldr	r3, [pc, #624]	; (8003030 <_Z10Trajectoryv+0x308>)
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc6:	f7fe f899 	bl	8000efc <_ZSt3absf>
 8002dca:	eef0 7a40 	vmov.f32	s15, s0
 8002dce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd6:	f7fe f8a1 	bl	8000f1c <_ZSt4sqrtf>
 8002dda:	eef0 7a40 	vmov.f32	s15, s0
 8002dde:	4b96      	ldr	r3, [pc, #600]	; (8003038 <_Z10Trajectoryv+0x310>)
 8002de0:	edc3 7a00 	vstr	s15, [r3]
			Velocity = sqrt(abs(Distance)/2);
 8002de4:	4b92      	ldr	r3, [pc, #584]	; (8003030 <_Z10Trajectoryv+0x308>)
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	eeb0 0a67 	vmov.f32	s0, s15
 8002dee:	f7fe f885 	bl	8000efc <_ZSt3absf>
 8002df2:	eeb0 7a40 	vmov.f32	s14, s0
 8002df6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002dfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8002e02:	f7fe f88b 	bl	8000f1c <_ZSt4sqrtf>
 8002e06:	eef0 7a40 	vmov.f32	s15, s0
 8002e0a:	4b8a      	ldr	r3, [pc, #552]	; (8003034 <_Z10Trajectoryv+0x30c>)
 8002e0c:	edc3 7a00 	vstr	s15, [r3]
		}
		//TimeinS = _micros/10^6;
		timeFinal = (4*abs(Velocity)) + ((abs(Distance)-(2*abs(Velocity)*abs(Velocity)))/abs(Velocity));
 8002e10:	4b88      	ldr	r3, [pc, #544]	; (8003034 <_Z10Trajectoryv+0x30c>)
 8002e12:	edd3 7a00 	vldr	s15, [r3]
 8002e16:	eeb0 0a67 	vmov.f32	s0, s15
 8002e1a:	f7fe f86f 	bl	8000efc <_ZSt3absf>
 8002e1e:	eef0 7a40 	vmov.f32	s15, s0
 8002e22:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002e26:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002e2a:	4b81      	ldr	r3, [pc, #516]	; (8003030 <_Z10Trajectoryv+0x308>)
 8002e2c:	edd3 7a00 	vldr	s15, [r3]
 8002e30:	eeb0 0a67 	vmov.f32	s0, s15
 8002e34:	f7fe f862 	bl	8000efc <_ZSt3absf>
 8002e38:	eeb0 9a40 	vmov.f32	s18, s0
 8002e3c:	4b7d      	ldr	r3, [pc, #500]	; (8003034 <_Z10Trajectoryv+0x30c>)
 8002e3e:	edd3 7a00 	vldr	s15, [r3]
 8002e42:	eeb0 0a67 	vmov.f32	s0, s15
 8002e46:	f7fe f859 	bl	8000efc <_ZSt3absf>
 8002e4a:	eef0 7a40 	vmov.f32	s15, s0
 8002e4e:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8002e52:	4b78      	ldr	r3, [pc, #480]	; (8003034 <_Z10Trajectoryv+0x30c>)
 8002e54:	edd3 7a00 	vldr	s15, [r3]
 8002e58:	eeb0 0a67 	vmov.f32	s0, s15
 8002e5c:	f7fe f84e 	bl	8000efc <_ZSt3absf>
 8002e60:	eef0 7a40 	vmov.f32	s15, s0
 8002e64:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002e68:	ee79 8a67 	vsub.f32	s17, s18, s15
 8002e6c:	4b71      	ldr	r3, [pc, #452]	; (8003034 <_Z10Trajectoryv+0x30c>)
 8002e6e:	edd3 7a00 	vldr	s15, [r3]
 8002e72:	eeb0 0a67 	vmov.f32	s0, s15
 8002e76:	f7fe f841 	bl	8000efc <_ZSt3absf>
 8002e7a:	eeb0 7a40 	vmov.f32	s14, s0
 8002e7e:	eec8 7a87 	vdiv.f32	s15, s17, s14
 8002e82:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002e86:	4b6d      	ldr	r3, [pc, #436]	; (800303c <_Z10Trajectoryv+0x314>)
 8002e88:	edc3 7a00 	vstr	s15, [r3]

		if (TimeinS < Tb){
 8002e8c:	4b6c      	ldr	r3, [pc, #432]	; (8003040 <_Z10Trajectoryv+0x318>)
 8002e8e:	ed93 7a00 	vldr	s14, [r3]
 8002e92:	4b69      	ldr	r3, [pc, #420]	; (8003038 <_Z10Trajectoryv+0x310>)
 8002e94:	edd3 7a00 	vldr	s15, [r3]
 8002e98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea0:	d552      	bpl.n	8002f48 <_Z10Trajectoryv+0x220>
			OutPosition = (0.5*Acceleration*TimeinS*TimeinS)+Currentpos;
 8002ea2:	4b62      	ldr	r3, [pc, #392]	; (800302c <_Z10Trajectoryv+0x304>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd fb4e 	bl	8000548 <__aeabi_f2d>
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	4b64      	ldr	r3, [pc, #400]	; (8003044 <_Z10Trajectoryv+0x31c>)
 8002eb2:	f7fd fba1 	bl	80005f8 <__aeabi_dmul>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4614      	mov	r4, r2
 8002ebc:	461d      	mov	r5, r3
 8002ebe:	4b60      	ldr	r3, [pc, #384]	; (8003040 <_Z10Trajectoryv+0x318>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd fb40 	bl	8000548 <__aeabi_f2d>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4620      	mov	r0, r4
 8002ece:	4629      	mov	r1, r5
 8002ed0:	f7fd fb92 	bl	80005f8 <__aeabi_dmul>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4614      	mov	r4, r2
 8002eda:	461d      	mov	r5, r3
 8002edc:	4b58      	ldr	r3, [pc, #352]	; (8003040 <_Z10Trajectoryv+0x318>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fd fb31 	bl	8000548 <__aeabi_f2d>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4620      	mov	r0, r4
 8002eec:	4629      	mov	r1, r5
 8002eee:	f7fd fb83 	bl	80005f8 <__aeabi_dmul>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4614      	mov	r4, r2
 8002ef8:	461d      	mov	r5, r3
 8002efa:	4b53      	ldr	r3, [pc, #332]	; (8003048 <_Z10Trajectoryv+0x320>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fb22 	bl	8000548 <__aeabi_f2d>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4620      	mov	r0, r4
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	f7fd f9be 	bl	800028c <__adddf3>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4610      	mov	r0, r2
 8002f16:	4619      	mov	r1, r3
 8002f18:	f7fd fe1e 	bl	8000b58 <__aeabi_d2f>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4a4b      	ldr	r2, [pc, #300]	; (800304c <_Z10Trajectoryv+0x324>)
 8002f20:	6013      	str	r3, [r2, #0]
			OutVelocity = Acceleration*TimeinS;
 8002f22:	4b42      	ldr	r3, [pc, #264]	; (800302c <_Z10Trajectoryv+0x304>)
 8002f24:	ed93 7a00 	vldr	s14, [r3]
 8002f28:	4b45      	ldr	r3, [pc, #276]	; (8003040 <_Z10Trajectoryv+0x318>)
 8002f2a:	edd3 7a00 	vldr	s15, [r3]
 8002f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f32:	4b47      	ldr	r3, [pc, #284]	; (8003050 <_Z10Trajectoryv+0x328>)
 8002f34:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = Acceleration;
 8002f38:	4b3c      	ldr	r3, [pc, #240]	; (800302c <_Z10Trajectoryv+0x304>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a45      	ldr	r2, [pc, #276]	; (8003054 <_Z10Trajectoryv+0x32c>)
 8002f3e:	6013      	str	r3, [r2, #0]
			ch = 1;
 8002f40:	4b45      	ldr	r3, [pc, #276]	; (8003058 <_Z10Trajectoryv+0x330>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	701a      	strb	r2, [r3, #0]
 8002f46:	e19c      	b.n	8003282 <_Z10Trajectoryv+0x55a>
			}
		else if(TimeinS < (timeFinal-Tb)){
 8002f48:	4b3c      	ldr	r3, [pc, #240]	; (800303c <_Z10Trajectoryv+0x314>)
 8002f4a:	ed93 7a00 	vldr	s14, [r3]
 8002f4e:	4b3a      	ldr	r3, [pc, #232]	; (8003038 <_Z10Trajectoryv+0x310>)
 8002f50:	edd3 7a00 	vldr	s15, [r3]
 8002f54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f58:	4b39      	ldr	r3, [pc, #228]	; (8003040 <_Z10Trajectoryv+0x318>)
 8002f5a:	edd3 7a00 	vldr	s15, [r3]
 8002f5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f66:	dd79      	ble.n	800305c <_Z10Trajectoryv+0x334>
			OutPosition = (0.5*Acceleration*(Tb*Tb)) + (Velocity*(TimeinS-Tb))+Currentpos;
 8002f68:	4b30      	ldr	r3, [pc, #192]	; (800302c <_Z10Trajectoryv+0x304>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd faeb 	bl	8000548 <__aeabi_f2d>
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	4b33      	ldr	r3, [pc, #204]	; (8003044 <_Z10Trajectoryv+0x31c>)
 8002f78:	f7fd fb3e 	bl	80005f8 <__aeabi_dmul>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4614      	mov	r4, r2
 8002f82:	461d      	mov	r5, r3
 8002f84:	4b2c      	ldr	r3, [pc, #176]	; (8003038 <_Z10Trajectoryv+0x310>)
 8002f86:	ed93 7a00 	vldr	s14, [r3]
 8002f8a:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <_Z10Trajectoryv+0x310>)
 8002f8c:	edd3 7a00 	vldr	s15, [r3]
 8002f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f94:	ee17 0a90 	vmov	r0, s15
 8002f98:	f7fd fad6 	bl	8000548 <__aeabi_f2d>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	f7fd fb28 	bl	80005f8 <__aeabi_dmul>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4614      	mov	r4, r2
 8002fae:	461d      	mov	r5, r3
 8002fb0:	4b23      	ldr	r3, [pc, #140]	; (8003040 <_Z10Trajectoryv+0x318>)
 8002fb2:	ed93 7a00 	vldr	s14, [r3]
 8002fb6:	4b20      	ldr	r3, [pc, #128]	; (8003038 <_Z10Trajectoryv+0x310>)
 8002fb8:	edd3 7a00 	vldr	s15, [r3]
 8002fbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fc0:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <_Z10Trajectoryv+0x30c>)
 8002fc2:	edd3 7a00 	vldr	s15, [r3]
 8002fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fca:	ee17 0a90 	vmov	r0, s15
 8002fce:	f7fd fabb 	bl	8000548 <__aeabi_f2d>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	4629      	mov	r1, r5
 8002fda:	f7fd f957 	bl	800028c <__adddf3>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4614      	mov	r4, r2
 8002fe4:	461d      	mov	r5, r3
 8002fe6:	4b18      	ldr	r3, [pc, #96]	; (8003048 <_Z10Trajectoryv+0x320>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd faac 	bl	8000548 <__aeabi_f2d>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	f7fd f948 	bl	800028c <__adddf3>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4610      	mov	r0, r2
 8003002:	4619      	mov	r1, r3
 8003004:	f7fd fda8 	bl	8000b58 <__aeabi_d2f>
 8003008:	4603      	mov	r3, r0
 800300a:	4a10      	ldr	r2, [pc, #64]	; (800304c <_Z10Trajectoryv+0x324>)
 800300c:	6013      	str	r3, [r2, #0]
			OutVelocity = Velocity;
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <_Z10Trajectoryv+0x30c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a0f      	ldr	r2, [pc, #60]	; (8003050 <_Z10Trajectoryv+0x328>)
 8003014:	6013      	str	r3, [r2, #0]
			OutAcceleration = 0;
 8003016:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <_Z10Trajectoryv+0x32c>)
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
			ch = 2;
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <_Z10Trajectoryv+0x330>)
 8003020:	2202      	movs	r2, #2
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	e12d      	b.n	8003282 <_Z10Trajectoryv+0x55a>
 8003026:	bf00      	nop
 8003028:	20000560 	.word	0x20000560
 800302c:	2000053c 	.word	0x2000053c
 8003030:	20000534 	.word	0x20000534
 8003034:	20000538 	.word	0x20000538
 8003038:	2000054c 	.word	0x2000054c
 800303c:	20000550 	.word	0x20000550
 8003040:	20000554 	.word	0x20000554
 8003044:	3fe00000 	.word	0x3fe00000
 8003048:	20000558 	.word	0x20000558
 800304c:	20000540 	.word	0x20000540
 8003050:	20000544 	.word	0x20000544
 8003054:	20000548 	.word	0x20000548
 8003058:	200006e0 	.word	0x200006e0
			}
		else if(((timeFinal-Tb) <= TimeinS) && (TimeinS <= timeFinal)){
 800305c:	4bb6      	ldr	r3, [pc, #728]	; (8003338 <_Z10Trajectoryv+0x610>)
 800305e:	ed93 7a00 	vldr	s14, [r3]
 8003062:	4bb6      	ldr	r3, [pc, #728]	; (800333c <_Z10Trajectoryv+0x614>)
 8003064:	edd3 7a00 	vldr	s15, [r3]
 8003068:	ee37 7a67 	vsub.f32	s14, s14, s15
 800306c:	4bb4      	ldr	r3, [pc, #720]	; (8003340 <_Z10Trajectoryv+0x618>)
 800306e:	edd3 7a00 	vldr	s15, [r3]
 8003072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307a:	f200 80e5 	bhi.w	8003248 <_Z10Trajectoryv+0x520>
 800307e:	4bb0      	ldr	r3, [pc, #704]	; (8003340 <_Z10Trajectoryv+0x618>)
 8003080:	ed93 7a00 	vldr	s14, [r3]
 8003084:	4bac      	ldr	r3, [pc, #688]	; (8003338 <_Z10Trajectoryv+0x610>)
 8003086:	edd3 7a00 	vldr	s15, [r3]
 800308a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800308e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003092:	f200 80d9 	bhi.w	8003248 <_Z10Trajectoryv+0x520>
			OutPosition = (0.5*Acceleration*(Tb*Tb))+ (Velocity*(timeFinal-(2*Tb)))  + (Velocity*(TimeinS-(timeFinal-Tb))) - (0.5*Acceleration*((TimeinS-(timeFinal-Tb))*(TimeinS-(timeFinal-Tb))))+Currentpos;
 8003096:	4bab      	ldr	r3, [pc, #684]	; (8003344 <_Z10Trajectoryv+0x61c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd fa54 	bl	8000548 <__aeabi_f2d>
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	4ba8      	ldr	r3, [pc, #672]	; (8003348 <_Z10Trajectoryv+0x620>)
 80030a6:	f7fd faa7 	bl	80005f8 <__aeabi_dmul>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4614      	mov	r4, r2
 80030b0:	461d      	mov	r5, r3
 80030b2:	4ba2      	ldr	r3, [pc, #648]	; (800333c <_Z10Trajectoryv+0x614>)
 80030b4:	ed93 7a00 	vldr	s14, [r3]
 80030b8:	4ba0      	ldr	r3, [pc, #640]	; (800333c <_Z10Trajectoryv+0x614>)
 80030ba:	edd3 7a00 	vldr	s15, [r3]
 80030be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c2:	ee17 0a90 	vmov	r0, s15
 80030c6:	f7fd fa3f 	bl	8000548 <__aeabi_f2d>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4620      	mov	r0, r4
 80030d0:	4629      	mov	r1, r5
 80030d2:	f7fd fa91 	bl	80005f8 <__aeabi_dmul>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4614      	mov	r4, r2
 80030dc:	461d      	mov	r5, r3
 80030de:	4b96      	ldr	r3, [pc, #600]	; (8003338 <_Z10Trajectoryv+0x610>)
 80030e0:	ed93 7a00 	vldr	s14, [r3]
 80030e4:	4b95      	ldr	r3, [pc, #596]	; (800333c <_Z10Trajectoryv+0x614>)
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80030ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030f2:	4b96      	ldr	r3, [pc, #600]	; (800334c <_Z10Trajectoryv+0x624>)
 80030f4:	edd3 7a00 	vldr	s15, [r3]
 80030f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fc:	ee17 0a90 	vmov	r0, s15
 8003100:	f7fd fa22 	bl	8000548 <__aeabi_f2d>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4620      	mov	r0, r4
 800310a:	4629      	mov	r1, r5
 800310c:	f7fd f8be 	bl	800028c <__adddf3>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4614      	mov	r4, r2
 8003116:	461d      	mov	r5, r3
 8003118:	4b89      	ldr	r3, [pc, #548]	; (8003340 <_Z10Trajectoryv+0x618>)
 800311a:	ed93 7a00 	vldr	s14, [r3]
 800311e:	4b86      	ldr	r3, [pc, #536]	; (8003338 <_Z10Trajectoryv+0x610>)
 8003120:	edd3 6a00 	vldr	s13, [r3]
 8003124:	4b85      	ldr	r3, [pc, #532]	; (800333c <_Z10Trajectoryv+0x614>)
 8003126:	edd3 7a00 	vldr	s15, [r3]
 800312a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800312e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003132:	4b86      	ldr	r3, [pc, #536]	; (800334c <_Z10Trajectoryv+0x624>)
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313c:	ee17 0a90 	vmov	r0, s15
 8003140:	f7fd fa02 	bl	8000548 <__aeabi_f2d>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd f89e 	bl	800028c <__adddf3>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4614      	mov	r4, r2
 8003156:	461d      	mov	r5, r3
 8003158:	4b7a      	ldr	r3, [pc, #488]	; (8003344 <_Z10Trajectoryv+0x61c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd f9f3 	bl	8000548 <__aeabi_f2d>
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	4b78      	ldr	r3, [pc, #480]	; (8003348 <_Z10Trajectoryv+0x620>)
 8003168:	f7fd fa46 	bl	80005f8 <__aeabi_dmul>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4690      	mov	r8, r2
 8003172:	4699      	mov	r9, r3
 8003174:	4b72      	ldr	r3, [pc, #456]	; (8003340 <_Z10Trajectoryv+0x618>)
 8003176:	ed93 7a00 	vldr	s14, [r3]
 800317a:	4b6f      	ldr	r3, [pc, #444]	; (8003338 <_Z10Trajectoryv+0x610>)
 800317c:	edd3 6a00 	vldr	s13, [r3]
 8003180:	4b6e      	ldr	r3, [pc, #440]	; (800333c <_Z10Trajectoryv+0x614>)
 8003182:	edd3 7a00 	vldr	s15, [r3]
 8003186:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800318a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800318e:	4b6c      	ldr	r3, [pc, #432]	; (8003340 <_Z10Trajectoryv+0x618>)
 8003190:	edd3 6a00 	vldr	s13, [r3]
 8003194:	4b68      	ldr	r3, [pc, #416]	; (8003338 <_Z10Trajectoryv+0x610>)
 8003196:	ed93 6a00 	vldr	s12, [r3]
 800319a:	4b68      	ldr	r3, [pc, #416]	; (800333c <_Z10Trajectoryv+0x614>)
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80031a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80031a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ac:	ee17 0a90 	vmov	r0, s15
 80031b0:	f7fd f9ca 	bl	8000548 <__aeabi_f2d>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4640      	mov	r0, r8
 80031ba:	4649      	mov	r1, r9
 80031bc:	f7fd fa1c 	bl	80005f8 <__aeabi_dmul>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4620      	mov	r0, r4
 80031c6:	4629      	mov	r1, r5
 80031c8:	f7fd f85e 	bl	8000288 <__aeabi_dsub>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4614      	mov	r4, r2
 80031d2:	461d      	mov	r5, r3
 80031d4:	4b5e      	ldr	r3, [pc, #376]	; (8003350 <_Z10Trajectoryv+0x628>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd f9b5 	bl	8000548 <__aeabi_f2d>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4620      	mov	r0, r4
 80031e4:	4629      	mov	r1, r5
 80031e6:	f7fd f851 	bl	800028c <__adddf3>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	f7fd fcb1 	bl	8000b58 <__aeabi_d2f>
 80031f6:	4603      	mov	r3, r0
 80031f8:	4a56      	ldr	r2, [pc, #344]	; (8003354 <_Z10Trajectoryv+0x62c>)
 80031fa:	6013      	str	r3, [r2, #0]
			OutVelocity = Velocity-(Acceleration*(TimeinS-(timeFinal-Tb)));
 80031fc:	4b53      	ldr	r3, [pc, #332]	; (800334c <_Z10Trajectoryv+0x624>)
 80031fe:	ed93 7a00 	vldr	s14, [r3]
 8003202:	4b4f      	ldr	r3, [pc, #316]	; (8003340 <_Z10Trajectoryv+0x618>)
 8003204:	edd3 6a00 	vldr	s13, [r3]
 8003208:	4b4b      	ldr	r3, [pc, #300]	; (8003338 <_Z10Trajectoryv+0x610>)
 800320a:	ed93 6a00 	vldr	s12, [r3]
 800320e:	4b4b      	ldr	r3, [pc, #300]	; (800333c <_Z10Trajectoryv+0x614>)
 8003210:	edd3 7a00 	vldr	s15, [r3]
 8003214:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003218:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800321c:	4b49      	ldr	r3, [pc, #292]	; (8003344 <_Z10Trajectoryv+0x61c>)
 800321e:	edd3 7a00 	vldr	s15, [r3]
 8003222:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800322a:	4b4b      	ldr	r3, [pc, #300]	; (8003358 <_Z10Trajectoryv+0x630>)
 800322c:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = -Acceleration;
 8003230:	4b44      	ldr	r3, [pc, #272]	; (8003344 <_Z10Trajectoryv+0x61c>)
 8003232:	edd3 7a00 	vldr	s15, [r3]
 8003236:	eef1 7a67 	vneg.f32	s15, s15
 800323a:	4b48      	ldr	r3, [pc, #288]	; (800335c <_Z10Trajectoryv+0x634>)
 800323c:	edc3 7a00 	vstr	s15, [r3]
			ch = 3;
 8003240:	4b47      	ldr	r3, [pc, #284]	; (8003360 <_Z10Trajectoryv+0x638>)
 8003242:	2203      	movs	r2, #3
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e01c      	b.n	8003282 <_Z10Trajectoryv+0x55a>
			}
		else if(TimeinS > timeFinal){
 8003248:	4b3d      	ldr	r3, [pc, #244]	; (8003340 <_Z10Trajectoryv+0x618>)
 800324a:	ed93 7a00 	vldr	s14, [r3]
 800324e:	4b3a      	ldr	r3, [pc, #232]	; (8003338 <_Z10Trajectoryv+0x610>)
 8003250:	edd3 7a00 	vldr	s15, [r3]
 8003254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	dd11      	ble.n	8003282 <_Z10Trajectoryv+0x55a>
			OutPosition = Distance+Currentpos;
 800325e:	4b41      	ldr	r3, [pc, #260]	; (8003364 <_Z10Trajectoryv+0x63c>)
 8003260:	ed93 7a00 	vldr	s14, [r3]
 8003264:	4b3a      	ldr	r3, [pc, #232]	; (8003350 <_Z10Trajectoryv+0x628>)
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800326e:	4b39      	ldr	r3, [pc, #228]	; (8003354 <_Z10Trajectoryv+0x62c>)
 8003270:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = 0;
 8003274:	4b39      	ldr	r3, [pc, #228]	; (800335c <_Z10Trajectoryv+0x634>)
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
			ch = 4;
 800327c:	4b38      	ldr	r3, [pc, #224]	; (8003360 <_Z10Trajectoryv+0x638>)
 800327e:	2204      	movs	r2, #4
 8003280:	701a      	strb	r2, [r3, #0]
			}

		if (Distance > 0){
 8003282:	4b38      	ldr	r3, [pc, #224]	; (8003364 <_Z10Trajectoryv+0x63c>)
 8003284:	edd3 7a00 	vldr	s15, [r3]
 8003288:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800328c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003290:	dd03      	ble.n	800329a <_Z10Trajectoryv+0x572>
			//Velocity = 1.04719755; // [From UART] Put Max Velo here
			//Acceleration= 0.5;   // recieve frol UART
			check = 50;
 8003292:	4b35      	ldr	r3, [pc, #212]	; (8003368 <_Z10Trajectoryv+0x640>)
 8003294:	2232      	movs	r2, #50	; 0x32
 8003296:	701a      	strb	r2, [r3, #0]
 8003298:	e02d      	b.n	80032f6 <_Z10Trajectoryv+0x5ce>
		}
		else if(Distance < 0){
 800329a:	4b32      	ldr	r3, [pc, #200]	; (8003364 <_Z10Trajectoryv+0x63c>)
 800329c:	edd3 7a00 	vldr	s15, [r3]
 80032a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a8:	d525      	bpl.n	80032f6 <_Z10Trajectoryv+0x5ce>
			//Velocity=-1.04719755; // [From UART] Put Max Velo here  (negative)
			//Velocity= -1 * Velocity;
			OutVelocity = OutVelocity * -1.0;
 80032aa:	4b2b      	ldr	r3, [pc, #172]	; (8003358 <_Z10Trajectoryv+0x630>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd f94a 	bl	8000548 <__aeabi_f2d>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	603a      	str	r2, [r7, #0]
 80032ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80032be:	607b      	str	r3, [r7, #4]
 80032c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032c4:	f7fd fc48 	bl	8000b58 <__aeabi_d2f>
 80032c8:	4603      	mov	r3, r0
 80032ca:	4a23      	ldr	r2, [pc, #140]	; (8003358 <_Z10Trajectoryv+0x630>)
 80032cc:	6013      	str	r3, [r2, #0]
			OutPosition = OutPosition * -1.0;
 80032ce:	4b21      	ldr	r3, [pc, #132]	; (8003354 <_Z10Trajectoryv+0x62c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd f938 	bl	8000548 <__aeabi_f2d>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4692      	mov	sl, r2
 80032de:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80032e2:	4650      	mov	r0, sl
 80032e4:	4659      	mov	r1, fp
 80032e6:	f7fd fc37 	bl	8000b58 <__aeabi_d2f>
 80032ea:	4603      	mov	r3, r0
 80032ec:	4a19      	ldr	r2, [pc, #100]	; (8003354 <_Z10Trajectoryv+0x62c>)
 80032ee:	6013      	str	r3, [r2, #0]
		    //Acceleration= -0.5;   // recieve frol UART (negative)
		    check = 100;
 80032f0:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <_Z10Trajectoryv+0x640>)
 80032f2:	2264      	movs	r2, #100	; 0x64
 80032f4:	701a      	strb	r2, [r3, #0]
		}
		TimeinS = TimeinS + Dt;
 80032f6:	4b12      	ldr	r3, [pc, #72]	; (8003340 <_Z10Trajectoryv+0x618>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd f924 	bl	8000548 <__aeabi_f2d>
 8003300:	a30b      	add	r3, pc, #44	; (adr r3, 8003330 <_Z10Trajectoryv+0x608>)
 8003302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003306:	f7fc ffc1 	bl	800028c <__adddf3>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4610      	mov	r0, r2
 8003310:	4619      	mov	r1, r3
 8003312:	f7fd fc21 	bl	8000b58 <__aeabi_d2f>
 8003316:	4603      	mov	r3, r0
 8003318:	4a09      	ldr	r2, [pc, #36]	; (8003340 <_Z10Trajectoryv+0x618>)
 800331a:	6013      	str	r3, [r2, #0]

		//OutVelocity = 0.523598775 ;
		}
}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	ecbd 8b04 	vpop	{d8-d9}
 8003326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800332a:	bf00      	nop
 800332c:	f3af 8000 	nop.w
 8003330:	47ae147b 	.word	0x47ae147b
 8003334:	3f847ae1 	.word	0x3f847ae1
 8003338:	20000550 	.word	0x20000550
 800333c:	2000054c 	.word	0x2000054c
 8003340:	20000554 	.word	0x20000554
 8003344:	2000053c 	.word	0x2000053c
 8003348:	3fe00000 	.word	0x3fe00000
 800334c:	20000538 	.word	0x20000538
 8003350:	20000558 	.word	0x20000558
 8003354:	20000540 	.word	0x20000540
 8003358:	20000544 	.word	0x20000544
 800335c:	20000548 	.word	0x20000548
 8003360:	200006e0 	.word	0x200006e0
 8003364:	20000534 	.word	0x20000534
 8003368:	200006e1 	.word	0x200006e1
 800336c:	00000000 	.word	0x00000000

08003370 <_Z10Unwrappingv>:

//////////////////////// [Unwrapping] ///////////////////////
void Unwrapping(){
 8003370:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003374:	af00      	add	r7, sp, #0

	if(micros() - TimeUnwrap >= 10000){
 8003376:	f000 fda7 	bl	8003ec8 <_Z6microsv>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	494c      	ldr	r1, [pc, #304]	; (80034b0 <_Z10Unwrappingv+0x140>)
 8003380:	6809      	ldr	r1, [r1, #0]
 8003382:	2000      	movs	r0, #0
 8003384:	4688      	mov	r8, r1
 8003386:	4681      	mov	r9, r0
 8003388:	ebb2 0408 	subs.w	r4, r2, r8
 800338c:	eb63 0509 	sbc.w	r5, r3, r9
 8003390:	f242 7310 	movw	r3, #10000	; 0x2710
 8003394:	429c      	cmp	r4, r3
 8003396:	f175 0300 	sbcs.w	r3, r5, #0
 800339a:	bf2c      	ite	cs
 800339c:	2301      	movcs	r3, #1
 800339e:	2300      	movcc	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d07c      	beq.n	80034a0 <_Z10Unwrappingv+0x130>
		TimeUnwrap = micros();
 80033a6:	f000 fd8f 	bl	8003ec8 <_Z6microsv>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4b40      	ldr	r3, [pc, #256]	; (80034b0 <_Z10Unwrappingv+0x140>)
 80033b0:	601a      	str	r2, [r3, #0]
		Pn = BinPosXI * 0.006136;
 80033b2:	4b40      	ldr	r3, [pc, #256]	; (80034b4 <_Z10Unwrappingv+0x144>)
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd f8b4 	bl	8000524 <__aeabi_i2d>
 80033bc:	a33a      	add	r3, pc, #232	; (adr r3, 80034a8 <_Z10Unwrappingv+0x138>)
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	f7fd f919 	bl	80005f8 <__aeabi_dmul>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4610      	mov	r0, r2
 80033cc:	4619      	mov	r1, r3
 80033ce:	f7fd fbc3 	bl	8000b58 <__aeabi_d2f>
 80033d2:	4603      	mov	r3, r0
 80033d4:	4a38      	ldr	r2, [pc, #224]	; (80034b8 <_Z10Unwrappingv+0x148>)
 80033d6:	6013      	str	r3, [r2, #0]
		if(Pn-P_n <= -1*e){
 80033d8:	4b37      	ldr	r3, [pc, #220]	; (80034b8 <_Z10Unwrappingv+0x148>)
 80033da:	ed93 7a00 	vldr	s14, [r3]
 80033de:	4b37      	ldr	r3, [pc, #220]	; (80034bc <_Z10Unwrappingv+0x14c>)
 80033e0:	edd3 7a00 	vldr	s15, [r3]
 80033e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033e8:	4b35      	ldr	r3, [pc, #212]	; (80034c0 <_Z10Unwrappingv+0x150>)
 80033ea:	edd3 7a00 	vldr	s15, [r3]
 80033ee:	eef1 7a67 	vneg.f32	s15, s15
 80033f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033fa:	d80b      	bhi.n	8003414 <_Z10Unwrappingv+0xa4>
			P0 = P_0 + P_max;
 80033fc:	4b31      	ldr	r3, [pc, #196]	; (80034c4 <_Z10Unwrappingv+0x154>)
 80033fe:	ed93 7a00 	vldr	s14, [r3]
 8003402:	4b31      	ldr	r3, [pc, #196]	; (80034c8 <_Z10Unwrappingv+0x158>)
 8003404:	edd3 7a00 	vldr	s15, [r3]
 8003408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340c:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <_Z10Unwrappingv+0x15c>)
 800340e:	edc3 7a00 	vstr	s15, [r3]
 8003412:	e01f      	b.n	8003454 <_Z10Unwrappingv+0xe4>
		}
		else if(Pn - P_n >= e){
 8003414:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <_Z10Unwrappingv+0x148>)
 8003416:	ed93 7a00 	vldr	s14, [r3]
 800341a:	4b28      	ldr	r3, [pc, #160]	; (80034bc <_Z10Unwrappingv+0x14c>)
 800341c:	edd3 7a00 	vldr	s15, [r3]
 8003420:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003424:	4b26      	ldr	r3, [pc, #152]	; (80034c0 <_Z10Unwrappingv+0x150>)
 8003426:	edd3 7a00 	vldr	s15, [r3]
 800342a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003432:	db0b      	blt.n	800344c <_Z10Unwrappingv+0xdc>
			P0 = P_0 - P_max;
 8003434:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <_Z10Unwrappingv+0x154>)
 8003436:	ed93 7a00 	vldr	s14, [r3]
 800343a:	4b23      	ldr	r3, [pc, #140]	; (80034c8 <_Z10Unwrappingv+0x158>)
 800343c:	edd3 7a00 	vldr	s15, [r3]
 8003440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003444:	4b21      	ldr	r3, [pc, #132]	; (80034cc <_Z10Unwrappingv+0x15c>)
 8003446:	edc3 7a00 	vstr	s15, [r3]
 800344a:	e003      	b.n	8003454 <_Z10Unwrappingv+0xe4>
		}
		else{
			P0 = P_0;
 800344c:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <_Z10Unwrappingv+0x154>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1e      	ldr	r2, [pc, #120]	; (80034cc <_Z10Unwrappingv+0x15c>)
 8003452:	6013      	str	r3, [r2, #0]
		}

		OutUnwrap = Pn + P0;
 8003454:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <_Z10Unwrappingv+0x148>)
 8003456:	ed93 7a00 	vldr	s14, [r3]
 800345a:	4b1c      	ldr	r3, [pc, #112]	; (80034cc <_Z10Unwrappingv+0x15c>)
 800345c:	edd3 7a00 	vldr	s15, [r3]
 8003460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003464:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <_Z10Unwrappingv+0x160>)
 8003466:	edc3 7a00 	vstr	s15, [r3]
		CurrentEn = BinPosXI * 0.006136;
 800346a:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <_Z10Unwrappingv+0x144>)
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd f858 	bl	8000524 <__aeabi_i2d>
 8003474:	a30c      	add	r3, pc, #48	; (adr r3, 80034a8 <_Z10Unwrappingv+0x138>)
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	f7fd f8bd 	bl	80005f8 <__aeabi_dmul>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4610      	mov	r0, r2
 8003484:	4619      	mov	r1, r3
 8003486:	f7fd fb67 	bl	8000b58 <__aeabi_d2f>
 800348a:	4603      	mov	r3, r0
 800348c:	4a11      	ldr	r2, [pc, #68]	; (80034d4 <_Z10Unwrappingv+0x164>)
 800348e:	6013      	str	r3, [r2, #0]
		P_n = Pn;
 8003490:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <_Z10Unwrappingv+0x148>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a09      	ldr	r2, [pc, #36]	; (80034bc <_Z10Unwrappingv+0x14c>)
 8003496:	6013      	str	r3, [r2, #0]
		P_0 = P0;
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <_Z10Unwrappingv+0x15c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a09      	ldr	r2, [pc, #36]	; (80034c4 <_Z10Unwrappingv+0x154>)
 800349e:	6013      	str	r3, [r2, #0]
	}
}
 80034a0:	bf00      	nop
 80034a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034a6:	bf00      	nop
 80034a8:	f540895d 	.word	0xf540895d
 80034ac:	3f79220f 	.word	0x3f79220f
 80034b0:	20000698 	.word	0x20000698
 80034b4:	20000520 	.word	0x20000520
 80034b8:	20000688 	.word	0x20000688
 80034bc:	2000068c 	.word	0x2000068c
 80034c0:	2000014c 	.word	0x2000014c
 80034c4:	20000684 	.word	0x20000684
 80034c8:	20000148 	.word	0x20000148
 80034cc:	20000680 	.word	0x20000680
 80034d0:	20000690 	.word	0x20000690
 80034d4:	20000694 	.word	0x20000694

080034d8 <_Z12Kalmanfilterv>:
	}
}


/////////////////////////// [Kalman Filter] ///////////////////////
void Kalmanfilter(){
 80034d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034dc:	b0d2      	sub	sp, #328	; 0x148
 80034de:	af00      	add	r7, sp, #0

	if(micros() - TimeStampKalman >= 10000){
 80034e0:	f000 fcf2 	bl	8003ec8 <_Z6microsv>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4992      	ldr	r1, [pc, #584]	; (8003734 <_Z12Kalmanfilterv+0x25c>)
 80034ea:	6809      	ldr	r1, [r1, #0]
 80034ec:	2000      	movs	r0, #0
 80034ee:	4688      	mov	r8, r1
 80034f0:	4681      	mov	r9, r0
 80034f2:	ebb2 0408 	subs.w	r4, r2, r8
 80034f6:	eb63 0509 	sbc.w	r5, r3, r9
 80034fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80034fe:	429c      	cmp	r4, r3
 8003500:	f175 0300 	sbcs.w	r3, r5, #0
 8003504:	bf2c      	ite	cs
 8003506:	2301      	movcs	r3, #1
 8003508:	2300      	movcc	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 810a 	beq.w	8003726 <_Z12Kalmanfilterv+0x24e>
		 TimeStampKalman = micros();
 8003512:	f000 fcd9 	bl	8003ec8 <_Z6microsv>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4b86      	ldr	r3, [pc, #536]	; (8003734 <_Z12Kalmanfilterv+0x25c>)
 800351c:	601a      	str	r2, [r3, #0]
	//if(millis() - TimeStampKalman >= 10){
	//	TimeStampKalman = millis();
		 ////////// Predict ////////////////////
		 Q = G*Q1*G.transpose();
 800351e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003522:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003526:	4a84      	ldr	r2, [pc, #528]	; (8003738 <_Z12Kalmanfilterv+0x260>)
 8003528:	4984      	ldr	r1, [pc, #528]	; (800373c <_Z12Kalmanfilterv+0x264>)
 800352a:	4618      	mov	r0, r3
 800352c:	f000 ffa4 	bl	8004478 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>
 8003530:	4882      	ldr	r0, [pc, #520]	; (800373c <_Z12Kalmanfilterv+0x264>)
 8003532:	f000 ffda 	bl	80044ea <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>
 8003536:	4602      	mov	r2, r0
 8003538:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800353c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003546:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800354a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800354e:	f107 0114 	add.w	r1, r7, #20
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fffb 	bl	800454e <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>
 8003558:	463b      	mov	r3, r7
 800355a:	4619      	mov	r1, r3
 800355c:	4878      	ldr	r0, [pc, #480]	; (8003740 <_Z12Kalmanfilterv+0x268>)
 800355e:	f001 f80d 	bl	800457c <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X = A*X1 ;
 8003562:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003566:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800356a:	4a76      	ldr	r2, [pc, #472]	; (8003744 <_Z12Kalmanfilterv+0x26c>)
 800356c:	4976      	ldr	r1, [pc, #472]	; (8003748 <_Z12Kalmanfilterv+0x270>)
 800356e:	4618      	mov	r0, r3
 8003570:	f001 f813 	bl	800459a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003574:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003578:	4619      	mov	r1, r3
 800357a:	4874      	ldr	r0, [pc, #464]	; (800374c <_Z12Kalmanfilterv+0x274>)
 800357c:	f001 f824 	bl	80045c8 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 P = A*O*A.transpose()+Q;
 8003580:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003584:	4a72      	ldr	r2, [pc, #456]	; (8003750 <_Z12Kalmanfilterv+0x278>)
 8003586:	4970      	ldr	r1, [pc, #448]	; (8003748 <_Z12Kalmanfilterv+0x270>)
 8003588:	4618      	mov	r0, r3
 800358a:	f001 f82c 	bl	80045e6 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>
 800358e:	486e      	ldr	r0, [pc, #440]	; (8003748 <_Z12Kalmanfilterv+0x270>)
 8003590:	f001 f840 	bl	8004614 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>
 8003594:	4603      	mov	r3, r0
 8003596:	65bb      	str	r3, [r7, #88]	; 0x58
 8003598:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800359c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80035a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80035a4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 f846 	bl	800463a <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>
 80035ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80035b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80035b6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80035ba:	4a61      	ldr	r2, [pc, #388]	; (8003740 <_Z12Kalmanfilterv+0x268>)
 80035bc:	4618      	mov	r0, r3
 80035be:	f001 f853 	bl	8004668 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>
 80035c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035c6:	4619      	mov	r1, r3
 80035c8:	4862      	ldr	r0, [pc, #392]	; (8003754 <_Z12Kalmanfilterv+0x27c>)
 80035ca:	f001 f86b 	bl	80046a4 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>

		 //////////////// Update /////////////////////
	     Z << OutUnwrap ;
 80035ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80035d2:	4a61      	ldr	r2, [pc, #388]	; (8003758 <_Z12Kalmanfilterv+0x280>)
 80035d4:	4961      	ldr	r1, [pc, #388]	; (800375c <_Z12Kalmanfilterv+0x284>)
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fe64 	bl	80042a4 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 80035dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fe6e 	bl	80042c2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
	//     Z << DiffVelo ;
		 K = (P*C.transpose())*(C*P*C.transpose()+R).inverse();
 80035e6:	485e      	ldr	r0, [pc, #376]	; (8003760 <_Z12Kalmanfilterv+0x288>)
 80035e8:	f001 f86b 	bl	80046c2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035f2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80035f6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80035fa:	4956      	ldr	r1, [pc, #344]	; (8003754 <_Z12Kalmanfilterv+0x27c>)
 80035fc:	4618      	mov	r0, r3
 80035fe:	f001 f873 	bl	80046e8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>
 8003602:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003606:	4a53      	ldr	r2, [pc, #332]	; (8003754 <_Z12Kalmanfilterv+0x27c>)
 8003608:	4955      	ldr	r1, [pc, #340]	; (8003760 <_Z12Kalmanfilterv+0x288>)
 800360a:	4618      	mov	r0, r3
 800360c:	f001 f883 	bl	8004716 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003610:	4853      	ldr	r0, [pc, #332]	; (8003760 <_Z12Kalmanfilterv+0x288>)
 8003612:	f001 f856 	bl	80046c2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 8003616:	4603      	mov	r3, r0
 8003618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800361c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003620:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003624:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8003628:	4618      	mov	r0, r3
 800362a:	f001 f88b 	bl	8004744 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>
 800362e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003632:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8003636:	4a4b      	ldr	r2, [pc, #300]	; (8003764 <_Z12Kalmanfilterv+0x28c>)
 8003638:	4618      	mov	r0, r3
 800363a:	f001 f89a 	bl	8004772 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 800363e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003642:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f001 f8ed 	bl	8004828 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>
 800364e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003652:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003656:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800365a:	4618      	mov	r0, r3
 800365c:	f001 f91c 	bl	8004898 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>
 8003660:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003664:	4619      	mov	r1, r3
 8003666:	4840      	ldr	r0, [pc, #256]	; (8003768 <_Z12Kalmanfilterv+0x290>)
 8003668:	f001 f92d 	bl	80048c6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X1 = X+K*(Z-C*X);
 800366c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003670:	4a36      	ldr	r2, [pc, #216]	; (800374c <_Z12Kalmanfilterv+0x274>)
 8003672:	493b      	ldr	r1, [pc, #236]	; (8003760 <_Z12Kalmanfilterv+0x288>)
 8003674:	4618      	mov	r0, r3
 8003676:	f001 f935 	bl	80048e4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 800367a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800367e:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8003682:	4936      	ldr	r1, [pc, #216]	; (800375c <_Z12Kalmanfilterv+0x284>)
 8003684:	4618      	mov	r0, r3
 8003686:	f001 f944 	bl	8004912 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 800368a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800368e:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8003692:	4935      	ldr	r1, [pc, #212]	; (8003768 <_Z12Kalmanfilterv+0x290>)
 8003694:	4618      	mov	r0, r3
 8003696:	f001 f979 	bl	800498c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>
 800369a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800369e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80036a2:	492a      	ldr	r1, [pc, #168]	; (800374c <_Z12Kalmanfilterv+0x274>)
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 f99e 	bl	80049e6 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>
 80036aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036ae:	4619      	mov	r1, r3
 80036b0:	4824      	ldr	r0, [pc, #144]	; (8003744 <_Z12Kalmanfilterv+0x26c>)
 80036b2:	f001 f9b6 	bl	8004a22 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>
		 O = (I-(K*C))*P;
 80036b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80036ba:	4a29      	ldr	r2, [pc, #164]	; (8003760 <_Z12Kalmanfilterv+0x288>)
 80036bc:	492a      	ldr	r1, [pc, #168]	; (8003768 <_Z12Kalmanfilterv+0x290>)
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 f9be 	bl	8004a40 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 80036c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036c8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80036cc:	4927      	ldr	r1, [pc, #156]	; (800376c <_Z12Kalmanfilterv+0x294>)
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 f9cd 	bl	8004a6e <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 80036d4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80036d8:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80036dc:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <_Z12Kalmanfilterv+0x27c>)
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 fa02 	bl	8004ae8 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>
 80036e4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80036e8:	4619      	mov	r1, r3
 80036ea:	4819      	ldr	r0, [pc, #100]	; (8003750 <_Z12Kalmanfilterv+0x278>)
 80036ec:	f001 fa13 	bl	8004b16 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>

		 KalP = X(0,0);
 80036f0:	2200      	movs	r2, #0
 80036f2:	2100      	movs	r1, #0
 80036f4:	4815      	ldr	r0, [pc, #84]	; (800374c <_Z12Kalmanfilterv+0x274>)
 80036f6:	f000 fe7b 	bl	80043f0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80036fa:	4603      	mov	r3, r0
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1c      	ldr	r2, [pc, #112]	; (8003770 <_Z12Kalmanfilterv+0x298>)
 8003700:	6013      	str	r3, [r2, #0]
		 KalV = X(1,0);
 8003702:	2200      	movs	r2, #0
 8003704:	2101      	movs	r1, #1
 8003706:	4811      	ldr	r0, [pc, #68]	; (800374c <_Z12Kalmanfilterv+0x274>)
 8003708:	f000 fe72 	bl	80043f0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 800370c:	4603      	mov	r3, r0
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a18      	ldr	r2, [pc, #96]	; (8003774 <_Z12Kalmanfilterv+0x29c>)
 8003712:	6013      	str	r3, [r2, #0]
		 KalA = X(2,0);
 8003714:	2200      	movs	r2, #0
 8003716:	2102      	movs	r1, #2
 8003718:	480c      	ldr	r0, [pc, #48]	; (800374c <_Z12Kalmanfilterv+0x274>)
 800371a:	f000 fe69 	bl	80043f0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 800371e:	4603      	mov	r3, r0
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a15      	ldr	r2, [pc, #84]	; (8003778 <_Z12Kalmanfilterv+0x2a0>)
 8003724:	6013      	str	r3, [r2, #0]
		 //runtime = micros()-TimeStampKalman;

	     //ErrPos[0] = TargetDeg - BinPosXI*0.006136;
	 }

}
 8003726:	bf00      	nop
 8003728:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800372c:	46bd      	mov	sp, r7
 800372e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003732:	bf00      	nop
 8003734:	20000564 	.word	0x20000564
 8003738:	20000144 	.word	0x20000144
 800373c:	20000620 	.word	0x20000620
 8003740:	2000062c 	.word	0x2000062c
 8003744:	2000065c 	.word	0x2000065c
 8003748:	20000568 	.word	0x20000568
 800374c:	20000650 	.word	0x20000650
 8003750:	200005b0 	.word	0x200005b0
 8003754:	2000058c 	.word	0x2000058c
 8003758:	20000690 	.word	0x20000690
 800375c:	20000604 	.word	0x20000604
 8003760:	20000614 	.word	0x20000614
 8003764:	200005fc 	.word	0x200005fc
 8003768:	20000608 	.word	0x20000608
 800376c:	200005d4 	.word	0x200005d4
 8003770:	20000674 	.word	0x20000674
 8003774:	20000678 	.word	0x20000678
 8003778:	2000067c 	.word	0x2000067c

0800377c <_Z11PIDPositionv>:

///////////////////// [PID cat cat Zero] /////////////////////////////
void PIDPosition(){
 800377c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003780:	af00      	add	r7, sp, #0
	/*CrrntTime = micros();
	//DeltaTime = (CrrntTime - PreviTime) / 1000000.0; // seconds
	PreviTime = CrrntTime; // log previ here for next loop
	*/
	if(micros() - TimeStampPID_P >= 10000){
 8003782:	f000 fba1 	bl	8003ec8 <_Z6microsv>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4936      	ldr	r1, [pc, #216]	; (8003864 <_Z11PIDPositionv+0xe8>)
 800378c:	6809      	ldr	r1, [r1, #0]
 800378e:	2000      	movs	r0, #0
 8003790:	4688      	mov	r8, r1
 8003792:	4681      	mov	r9, r0
 8003794:	ebb2 0408 	subs.w	r4, r2, r8
 8003798:	eb63 0509 	sbc.w	r5, r3, r9
 800379c:	f242 7310 	movw	r3, #10000	; 0x2710
 80037a0:	429c      	cmp	r4, r3
 80037a2:	f175 0300 	sbcs.w	r3, r5, #0
 80037a6:	bf2c      	ite	cs
 80037a8:	2301      	movcs	r3, #1
 80037aa:	2300      	movcc	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d055      	beq.n	800385e <_Z11PIDPositionv+0xe2>
		TimeStampPID_P = micros();
 80037b2:	f000 fb89 	bl	8003ec8 <_Z6microsv>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4b2a      	ldr	r3, [pc, #168]	; (8003864 <_Z11PIDPositionv+0xe8>)
 80037bc:	601a      	str	r2, [r3, #0]

	//if(millis() - TimeStampPID_P >= 10){
	//	TimeStampPID_P = millis();

		ErrPos[0] = OutPosition - KalP;
 80037be:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <_Z11PIDPositionv+0xec>)
 80037c0:	ed93 7a00 	vldr	s14, [r3]
 80037c4:	4b29      	ldr	r3, [pc, #164]	; (800386c <_Z11PIDPositionv+0xf0>)
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ce:	4b28      	ldr	r3, [pc, #160]	; (8003870 <_Z11PIDPositionv+0xf4>)
 80037d0:	edc3 7a00 	vstr	s15, [r3]
	//	ErrPos[0] = OutVelocity - KalV;
		sumError = sumError + ErrPos[0];
 80037d4:	4b26      	ldr	r3, [pc, #152]	; (8003870 <_Z11PIDPositionv+0xf4>)
 80037d6:	ed93 7a00 	vldr	s14, [r3]
 80037da:	4b26      	ldr	r3, [pc, #152]	; (8003874 <_Z11PIDPositionv+0xf8>)
 80037dc:	edd3 7a00 	vldr	s15, [r3]
 80037e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e4:	4b23      	ldr	r3, [pc, #140]	; (8003874 <_Z11PIDPositionv+0xf8>)
 80037e6:	edc3 7a00 	vstr	s15, [r3]

		Propo = K_P * ErrPos[0];
 80037ea:	4b21      	ldr	r3, [pc, #132]	; (8003870 <_Z11PIDPositionv+0xf4>)
 80037ec:	ed93 7a00 	vldr	s14, [r3]
 80037f0:	4b21      	ldr	r3, [pc, #132]	; (8003878 <_Z11PIDPositionv+0xfc>)
 80037f2:	edd3 7a00 	vldr	s15, [r3]
 80037f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fa:	4b20      	ldr	r3, [pc, #128]	; (800387c <_Z11PIDPositionv+0x100>)
 80037fc:	edc3 7a00 	vstr	s15, [r3]

		Integral = K_I * sumError; // Integral -Newton-Leibniz
 8003800:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <_Z11PIDPositionv+0x104>)
 8003802:	ed93 7a00 	vldr	s14, [r3]
 8003806:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <_Z11PIDPositionv+0xf8>)
 8003808:	edd3 7a00 	vldr	s15, [r3]
 800380c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003810:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <_Z11PIDPositionv+0x108>)
 8003812:	edc3 7a00 	vstr	s15, [r3]

		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 8003816:	4b16      	ldr	r3, [pc, #88]	; (8003870 <_Z11PIDPositionv+0xf4>)
 8003818:	ed93 7a00 	vldr	s14, [r3]
 800381c:	4b14      	ldr	r3, [pc, #80]	; (8003870 <_Z11PIDPositionv+0xf4>)
 800381e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003822:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003826:	4b18      	ldr	r3, [pc, #96]	; (8003888 <_Z11PIDPositionv+0x10c>)
 8003828:	edd3 7a00 	vldr	s15, [r3]
 800382c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003830:	4b16      	ldr	r3, [pc, #88]	; (800388c <_Z11PIDPositionv+0x110>)
 8003832:	edc3 7a00 	vstr	s15, [r3]

		ufromposit = Propo + Integral + Derivate;
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <_Z11PIDPositionv+0x100>)
 8003838:	ed93 7a00 	vldr	s14, [r3]
 800383c:	4b11      	ldr	r3, [pc, #68]	; (8003884 <_Z11PIDPositionv+0x108>)
 800383e:	edd3 7a00 	vldr	s15, [r3]
 8003842:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003846:	4b11      	ldr	r3, [pc, #68]	; (800388c <_Z11PIDPositionv+0x110>)
 8003848:	edd3 7a00 	vldr	s15, [r3]
 800384c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003850:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <_Z11PIDPositionv+0x114>)
 8003852:	edc3 7a00 	vstr	s15, [r3]

		//u_contr = ufromposit ;
		ErrPos[1] = ErrPos[0]; // log previous error
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <_Z11PIDPositionv+0xf4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a05      	ldr	r2, [pc, #20]	; (8003870 <_Z11PIDPositionv+0xf4>)
 800385c:	6053      	str	r3, [r2, #4]
	}
}
 800385e:	bf00      	nop
 8003860:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003864:	2000069c 	.word	0x2000069c
 8003868:	20000540 	.word	0x20000540
 800386c:	20000674 	.word	0x20000674
 8003870:	200006a4 	.word	0x200006a4
 8003874:	200006b0 	.word	0x200006b0
 8003878:	20000150 	.word	0x20000150
 800387c:	200006b8 	.word	0x200006b8
 8003880:	200006b4 	.word	0x200006b4
 8003884:	200006bc 	.word	0x200006bc
 8003888:	20000154 	.word	0x20000154
 800388c:	200006c0 	.word	0x200006c0
 8003890:	200006ac 	.word	0x200006ac

08003894 <_Z11PIDVelocityv>:

void PIDVelocity(){
 8003894:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003898:	af00      	add	r7, sp, #0

	if(micros() - TimeStampPID_V >= 10000){
 800389a:	f000 fb15 	bl	8003ec8 <_Z6microsv>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4930      	ldr	r1, [pc, #192]	; (8003964 <_Z11PIDVelocityv+0xd0>)
 80038a4:	6809      	ldr	r1, [r1, #0]
 80038a6:	2000      	movs	r0, #0
 80038a8:	4688      	mov	r8, r1
 80038aa:	4681      	mov	r9, r0
 80038ac:	ebb2 0408 	subs.w	r4, r2, r8
 80038b0:	eb63 0509 	sbc.w	r5, r3, r9
 80038b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80038b8:	429c      	cmp	r4, r3
 80038ba:	f175 0300 	sbcs.w	r3, r5, #0
 80038be:	bf2c      	ite	cs
 80038c0:	2301      	movcs	r3, #1
 80038c2:	2300      	movcc	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d048      	beq.n	800395c <_Z11PIDVelocityv+0xc8>
		TimeStampPID_V = micros();
 80038ca:	f000 fafd 	bl	8003ec8 <_Z6microsv>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4b24      	ldr	r3, [pc, #144]	; (8003964 <_Z11PIDVelocityv+0xd0>)
 80038d4:	601a      	str	r2, [r3, #0]
		Vcontr[1] = Vcontr[0] ;
		ErrVelo[2] = ErrVelo[1] ;
		ErrVelo[1] = ErrVelo[0] ;
		*/

		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 80038d6:	4b24      	ldr	r3, [pc, #144]	; (8003968 <_Z11PIDVelocityv+0xd4>)
 80038d8:	ed93 7a00 	vldr	s14, [r3]
 80038dc:	4b23      	ldr	r3, [pc, #140]	; (800396c <_Z11PIDVelocityv+0xd8>)
 80038de:	edd3 7a00 	vldr	s15, [r3]
 80038e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038e6:	4b22      	ldr	r3, [pc, #136]	; (8003970 <_Z11PIDVelocityv+0xdc>)
 80038e8:	edd3 7a00 	vldr	s15, [r3]
 80038ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038f0:	4b20      	ldr	r3, [pc, #128]	; (8003974 <_Z11PIDVelocityv+0xe0>)
 80038f2:	edc3 7a00 	vstr	s15, [r3]
		SumAll = SumAll + ErrVelo[0];
 80038f6:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <_Z11PIDVelocityv+0xe0>)
 80038f8:	ed93 7a00 	vldr	s14, [r3]
 80038fc:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <_Z11PIDVelocityv+0xe4>)
 80038fe:	edd3 7a00 	vldr	s15, [r3]
 8003902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003906:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <_Z11PIDVelocityv+0xe4>)
 8003908:	edc3 7a00 	vstr	s15, [r3]

		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+(K_D * (ErrVelo[0]-ErrVelo[1])) ;
 800390c:	4b19      	ldr	r3, [pc, #100]	; (8003974 <_Z11PIDVelocityv+0xe0>)
 800390e:	ed93 7a00 	vldr	s14, [r3]
 8003912:	4b1a      	ldr	r3, [pc, #104]	; (800397c <_Z11PIDVelocityv+0xe8>)
 8003914:	edd3 7a00 	vldr	s15, [r3]
 8003918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800391c:	4b18      	ldr	r3, [pc, #96]	; (8003980 <_Z11PIDVelocityv+0xec>)
 800391e:	edd3 6a00 	vldr	s13, [r3]
 8003922:	4b15      	ldr	r3, [pc, #84]	; (8003978 <_Z11PIDVelocityv+0xe4>)
 8003924:	edd3 7a00 	vldr	s15, [r3]
 8003928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800392c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003930:	4b10      	ldr	r3, [pc, #64]	; (8003974 <_Z11PIDVelocityv+0xe0>)
 8003932:	edd3 6a00 	vldr	s13, [r3]
 8003936:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <_Z11PIDVelocityv+0xe0>)
 8003938:	edd3 7a01 	vldr	s15, [r3, #4]
 800393c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003940:	4b10      	ldr	r3, [pc, #64]	; (8003984 <_Z11PIDVelocityv+0xf0>)
 8003942:	edd3 7a00 	vldr	s15, [r3]
 8003946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800394a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800394e:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <_Z11PIDVelocityv+0xf4>)
 8003950:	edc3 7a00 	vstr	s15, [r3]
		ErrVelo[1] = ErrVelo[0]; // log previous error
 8003954:	4b07      	ldr	r3, [pc, #28]	; (8003974 <_Z11PIDVelocityv+0xe0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a06      	ldr	r2, [pc, #24]	; (8003974 <_Z11PIDVelocityv+0xe0>)
 800395a:	6053      	str	r3, [r2, #4]
		}
}
 800395c:	bf00      	nop
 800395e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003962:	bf00      	nop
 8003964:	200006d4 	.word	0x200006d4
 8003968:	20000544 	.word	0x20000544
 800396c:	200006ac 	.word	0x200006ac
 8003970:	20000678 	.word	0x20000678
 8003974:	200006c4 	.word	0x200006c4
 8003978:	200006d0 	.word	0x200006d0
 800397c:	20000158 	.word	0x20000158
 8003980:	2000015c 	.word	0x2000015c
 8003984:	20000154 	.word	0x20000154
 8003988:	200006d8 	.word	0x200006d8
 800398c:	00000000 	.word	0x00000000

08003990 <_Z11controlloopv>:

void controlloop(){
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0

	if( abs( Finalposition - KalP) < 0.005 && abs(KalV) < 0.0005){
 8003994:	4b2a      	ldr	r3, [pc, #168]	; (8003a40 <_Z11controlloopv+0xb0>)
 8003996:	ed93 7a00 	vldr	s14, [r3]
 800399a:	4b2a      	ldr	r3, [pc, #168]	; (8003a44 <_Z11controlloopv+0xb4>)
 800399c:	edd3 7a00 	vldr	s15, [r3]
 80039a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a4:	eeb0 0a67 	vmov.f32	s0, s15
 80039a8:	f7fd faa8 	bl	8000efc <_ZSt3absf>
 80039ac:	ee10 3a10 	vmov	r3, s0
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fc fdc9 	bl	8000548 <__aeabi_f2d>
 80039b6:	a31e      	add	r3, pc, #120	; (adr r3, 8003a30 <_Z11controlloopv+0xa0>)
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f7fd f88e 	bl	8000adc <__aeabi_dcmplt>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d015      	beq.n	80039f2 <_Z11controlloopv+0x62>
 80039c6:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <_Z11controlloopv+0xb8>)
 80039c8:	edd3 7a00 	vldr	s15, [r3]
 80039cc:	eeb0 0a67 	vmov.f32	s0, s15
 80039d0:	f7fd fa94 	bl	8000efc <_ZSt3absf>
 80039d4:	ee10 3a10 	vmov	r3, s0
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fc fdb5 	bl	8000548 <__aeabi_f2d>
 80039de:	a316      	add	r3, pc, #88	; (adr r3, 8003a38 <_Z11controlloopv+0xa8>)
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	f7fd f87a 	bl	8000adc <__aeabi_dcmplt>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <_Z11controlloopv+0x62>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <_Z11controlloopv+0x64>
 80039f2:	2300      	movs	r3, #0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d010      	beq.n	8003a1a <_Z11controlloopv+0x8a>
		PWMOut = 0;
 80039f8:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <_Z11controlloopv+0xbc>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	801a      	strh	r2, [r3, #0]
		check = 8;
 80039fe:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <_Z11controlloopv+0xc0>)
 8003a00:	2208      	movs	r2, #8
 8003a02:	701a      	strb	r2, [r3, #0]

		flagNewpos = 0;
 8003a04:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <_Z11controlloopv+0xc4>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
		flag_finishTra = 1;
 8003a0a:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <_Z11controlloopv+0xc8>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	701a      	strb	r2, [r3, #0]
		TimeinS = 0;
 8003a10:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <_Z11controlloopv+0xcc>)
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
	else{
		PIDPosition();
		PIDVelocity();
		MotDrvCytron();
	}
}
 8003a18:	e005      	b.n	8003a26 <_Z11controlloopv+0x96>
		PIDPosition();
 8003a1a:	f7ff feaf 	bl	800377c <_Z11PIDPositionv>
		PIDVelocity();
 8003a1e:	f7ff ff39 	bl	8003894 <_Z11PIDVelocityv>
		MotDrvCytron();
 8003a22:	f000 f81d 	bl	8003a60 <_Z12MotDrvCytronv>
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	f3af 8000 	nop.w
 8003a30:	47ae147b 	.word	0x47ae147b
 8003a34:	3f747ae1 	.word	0x3f747ae1
 8003a38:	d2f1a9fc 	.word	0xd2f1a9fc
 8003a3c:	3f40624d 	.word	0x3f40624d
 8003a40:	20000530 	.word	0x20000530
 8003a44:	20000674 	.word	0x20000674
 8003a48:	20000678 	.word	0x20000678
 8003a4c:	20000524 	.word	0x20000524
 8003a50:	200006e1 	.word	0x200006e1
 8003a54:	2000055c 	.word	0x2000055c
 8003a58:	200004b4 	.word	0x200004b4
 8003a5c:	20000554 	.word	0x20000554

08003a60 <_Z12MotDrvCytronv>:


void MotDrvCytron(){
 8003a60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a64:	af00      	add	r7, sp, #0
	//   direction chk
	//if(u_contr > 0){mot_dirctn= 0;}
	//else if(u_contr < 0) {mot_dirctn = 1;}
	//else{PWMOut = 0;}

	if(micros() - TimeDrive >= 10000){
 8003a66:	f000 fa2f 	bl	8003ec8 <_Z6microsv>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4932      	ldr	r1, [pc, #200]	; (8003b38 <_Z12MotDrvCytronv+0xd8>)
 8003a70:	6809      	ldr	r1, [r1, #0]
 8003a72:	2000      	movs	r0, #0
 8003a74:	4688      	mov	r8, r1
 8003a76:	4681      	mov	r9, r0
 8003a78:	ebb2 0408 	subs.w	r4, r2, r8
 8003a7c:	eb63 0509 	sbc.w	r5, r3, r9
 8003a80:	f242 7310 	movw	r3, #10000	; 0x2710
 8003a84:	429c      	cmp	r4, r3
 8003a86:	f175 0300 	sbcs.w	r3, r5, #0
 8003a8a:	bf2c      	ite	cs
 8003a8c:	2301      	movcs	r3, #1
 8003a8e:	2300      	movcc	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d049      	beq.n	8003b2a <_Z12MotDrvCytronv+0xca>
			TimeDrive = micros();
 8003a96:	f000 fa17 	bl	8003ec8 <_Z6microsv>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4b26      	ldr	r3, [pc, #152]	; (8003b38 <_Z12MotDrvCytronv+0xd8>)
 8003aa0:	601a      	str	r2, [r3, #0]
			u_contr = u_contr * 833.3;
 8003aa2:	4b26      	ldr	r3, [pc, #152]	; (8003b3c <_Z12MotDrvCytronv+0xdc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fc fd4e 	bl	8000548 <__aeabi_f2d>
 8003aac:	a320      	add	r3, pc, #128	; (adr r3, 8003b30 <_Z12MotDrvCytronv+0xd0>)
 8003aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab2:	f7fc fda1 	bl	80005f8 <__aeabi_dmul>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4610      	mov	r0, r2
 8003abc:	4619      	mov	r1, r3
 8003abe:	f7fd f84b 	bl	8000b58 <__aeabi_d2f>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	4a1d      	ldr	r2, [pc, #116]	; (8003b3c <_Z12MotDrvCytronv+0xdc>)
 8003ac6:	6013      	str	r3, [r2, #0]
			// u_contr = 2500;
			if(u_contr > 0){
 8003ac8:	4b1c      	ldr	r3, [pc, #112]	; (8003b3c <_Z12MotDrvCytronv+0xdc>)
 8003aca:	edd3 7a00 	vldr	s15, [r3]
 8003ace:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad6:	dd03      	ble.n	8003ae0 <_Z12MotDrvCytronv+0x80>
				mot_dirctn= 1;
 8003ad8:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <_Z12MotDrvCytronv+0xe0>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	e00e      	b.n	8003afe <_Z12MotDrvCytronv+0x9e>
			}
			else if(u_contr < 0) {
 8003ae0:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <_Z12MotDrvCytronv+0xdc>)
 8003ae2:	edd3 7a00 	vldr	s15, [r3]
 8003ae6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aee:	d503      	bpl.n	8003af8 <_Z12MotDrvCytronv+0x98>
				mot_dirctn = 0;
 8003af0:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <_Z12MotDrvCytronv+0xe0>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	e002      	b.n	8003afe <_Z12MotDrvCytronv+0x9e>
			}
			else{
				PWMOut = 0;
 8003af8:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <_Z12MotDrvCytronv+0xe4>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	801a      	strh	r2, [r3, #0]
			}
	// speed
	PWMOut= (int)fabsf(u_contr); // Absolute int
 8003afe:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <_Z12MotDrvCytronv+0xdc>)
 8003b00:	edd3 7a00 	vldr	s15, [r3]
 8003b04:	eef0 7ae7 	vabs.f32	s15, s15
 8003b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b0c:	ee17 3a90 	vmov	r3, s15
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <_Z12MotDrvCytronv+0xe4>)
 8003b14:	801a      	strh	r2, [r3, #0]
	if(PWMOut > 5000){PWMOut = 5000;} // saturate 50% gear 1:6 - 120rpm => 10rpm
 8003b16:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <_Z12MotDrvCytronv+0xe4>)
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d903      	bls.n	8003b2a <_Z12MotDrvCytronv+0xca>
 8003b22:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <_Z12MotDrvCytronv+0xe4>)
 8003b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b28:	801a      	strh	r2, [r3, #0]
	//if(PWMOut < 1600 ){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
	//&& fabsf(ErrPos[0]) >= 4
	//if(flag_finishTra == 1){PWMOut = 0;}
	}
}
 8003b2a:	bf00      	nop
 8003b2c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b30:	66666666 	.word	0x66666666
 8003b34:	408a0a66 	.word	0x408a0a66
 8003b38:	200006dc 	.word	0x200006dc
 8003b3c:	200006d8 	.word	0x200006d8
 8003b40:	2000052c 	.word	0x2000052c
 8003b44:	20000524 	.word	0x20000524

08003b48 <_Z13GraytoBinarioth>:

///////////////////// [Abs Encoder I2C] ////////////////////////////////////////////
////////// [Absolute Encoder] ////////////////////////////////////////////
uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	460a      	mov	r2, r1
 8003b52:	80fb      	strh	r3, [r7, #6]
 8003b54:	4613      	mov	r3, r2
 8003b56:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 8003b5c:	88fa      	ldrh	r2, [r7, #6]
 8003b5e:	797b      	ldrb	r3, [r7, #5]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	fa42 f303 	asr.w	r3, r2, r3
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 8003b6e:	2301      	movs	r3, #1
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	797b      	ldrb	r3, [r7, #5]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	da1e      	bge.n	8003bb8 <_Z13GraytoBinarioth+0x70>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 8003b7a:	8afb      	ldrh	r3, [r7, #22]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 8003b82:	88fa      	ldrh	r2, [r7, #6]
 8003b84:	7979      	ldrb	r1, [r7, #5]
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	1acb      	subs	r3, r1, r3
 8003b8c:	fa42 f303 	asr.w	r3, r2, r3
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d103      	bne.n	8003ba6 <_Z13GraytoBinarioth+0x5e>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 8003b9e:	8afb      	ldrh	r3, [r7, #22]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	82fb      	strh	r3, [r7, #22]
 8003ba4:	e004      	b.n	8003bb0 <_Z13GraytoBinarioth+0x68>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 8003ba6:	8afb      	ldrh	r3, [r7, #22]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3301      	adds	r3, #1
 8003bae:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	e7dc      	b.n	8003b72 <_Z13GraytoBinarioth+0x2a>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 8003bb8:	8afb      	ldrh	r3, [r7, #22]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <_Z14IOExpenderInitv>:

void IOExpenderInit() {// call when start system
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Xetting,
 8003bce:	2364      	movs	r3, #100	; 0x64
 8003bd0:	9302      	str	r3, [sp, #8]
 8003bd2:	2316      	movs	r3, #22
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <_Z14IOExpenderInitv+0x24>)
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	2301      	movs	r3, #1
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2140      	movs	r1, #64	; 0x40
 8003be0:	4803      	ldr	r0, [pc, #12]	; (8003bf0 <_Z14IOExpenderInitv+0x28>)
 8003be2:	f013 fcaf 	bl	8017544 <HAL_I2C_Mem_Write>
			0x16, 100);

}
 8003be6:	bf00      	nop
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000174 	.word	0x20000174
 8003bf0:	20000224 	.word	0x20000224

08003bf4 <_Z14AbsEncI2CReadxPh>:

void AbsEncI2CReadx(uint8_t *RawRAB){
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af04      	add	r7, sp, #16
 8003bfa:	6078      	str	r0, [r7, #4]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 8003bfc:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <_Z14AbsEncI2CReadxPh+0x98>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <_Z14AbsEncI2CReadxPh+0x20>
 8003c04:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <_Z14AbsEncI2CReadxPh+0x9c>)
 8003c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d101      	bne.n	8003c14 <_Z14AbsEncI2CReadxPh+0x20>
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <_Z14AbsEncI2CReadxPh+0x22>
 8003c14:	2300      	movs	r3, #0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d033      	beq.n	8003c82 <_Z14AbsEncI2CReadxPh+0x8e>

		HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 8003c1a:	2364      	movs	r3, #100	; 0x64
 8003c1c:	9302      	str	r3, [sp, #8]
 8003c1e:	2302      	movs	r3, #2
 8003c20:	9301      	str	r3, [sp, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	2301      	movs	r3, #1
 8003c28:	2212      	movs	r2, #18
 8003c2a:	2140      	movs	r1, #64	; 0x40
 8003c2c:	4818      	ldr	r0, [pc, #96]	; (8003c90 <_Z14AbsEncI2CReadxPh+0x9c>)
 8003c2e:	f013 fd83 	bl	8017738 <HAL_I2C_Mem_Read>
								RawRAB, 2, 100);

		GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 8003c32:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <_Z14AbsEncI2CReadxPh+0xa0>)
 8003c34:	785b      	ldrb	r3, [r3, #1]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	b21a      	sxth	r2, r3
 8003c3a:	4b16      	ldr	r3, [pc, #88]	; (8003c94 <_Z14AbsEncI2CReadxPh+0xa0>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	b21b      	sxth	r3, r3
 8003c40:	4313      	orrs	r3, r2
 8003c42:	b21b      	sxth	r3, r3
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <_Z14AbsEncI2CReadxPh+0xa4>)
 8003c48:	801a      	strh	r2, [r3, #0]
		// 1023- to reverse
		BinPosXI = 1023 - (GraytoBinario(GrayCBitXI, 10) + POSOFFSET) ;//
 8003c4a:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <_Z14AbsEncI2CReadxPh+0xa4>)
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	210a      	movs	r1, #10
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff ff79 	bl	8003b48 <_Z13GraytoBinarioth>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f5c3 7372 	rsb	r3, r3, #968	; 0x3c8
 8003c5c:	3303      	adds	r3, #3
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <_Z14AbsEncI2CReadxPh+0xa8>)
 8003c62:	801a      	strh	r2, [r3, #0]
		if (BinPosXI >= 1024){BinPosXI %= 1024;}
 8003c64:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <_Z14AbsEncI2CReadxPh+0xa8>)
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c6c:	d306      	bcc.n	8003c7c <_Z14AbsEncI2CReadxPh+0x88>
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <_Z14AbsEncI2CReadxPh+0xa8>)
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <_Z14AbsEncI2CReadxPh+0xa8>)
 8003c7a:	801a      	strh	r2, [r3, #0]

		flag_absenc = 0;
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <_Z14AbsEncI2CReadxPh+0x98>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	701a      	strb	r2, [r3, #0]
//			flag_absenc = 0;
//		break;
//
//		}
	}
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000522 	.word	0x20000522
 8003c90:	20000224 	.word	0x20000224
 8003c94:	2000051c 	.word	0x2000051c
 8003c98:	2000051e 	.word	0x2000051e
 8003c9c:	20000520 	.word	0x20000520

08003ca0 <_Z13Efft_activatev>:

/////////////////////// [End Effector] //////////////////////////////////

void Efft_activate(){
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af02      	add	r7, sp, #8
	uint8_t cmmd = 0x45;
 8003ca6:	2345      	movs	r3, #69	; 0x45
 8003ca8:	71fb      	strb	r3, [r7, #7]

	static enum{ef_INIT, ef_shoot} efshoot = ef_INIT;
	switch(efshoot){
 8003caa:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <_Z13Efft_activatev+0x90>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d01a      	beq.n	8003ce8 <_Z13Efft_activatev+0x48>
	default:
	case ef_INIT:
		if(flag_efftActi != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8003cb2:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <_Z13Efft_activatev+0x94>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <_Z13Efft_activatev+0x2a>
 8003cba:	4b1f      	ldr	r3, [pc, #124]	; (8003d38 <_Z13Efft_activatev+0x98>)
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d101      	bne.n	8003cca <_Z13Efft_activatev+0x2a>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <_Z13Efft_activatev+0x2c>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d028      	beq.n	8003d22 <_Z13Efft_activatev+0x82>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 0, I2C_FIRST_FRAME);
 8003cd0:	1dfa      	adds	r2, r7, #7
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2146      	movs	r1, #70	; 0x46
 8003cda:	4817      	ldr	r0, [pc, #92]	; (8003d38 <_Z13Efft_activatev+0x98>)
 8003cdc:	f013 ff52 	bl	8017b84 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_FIRST_AND_LAST_FRAME);
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &cmmd, 2, 100);
			efshoot = ef_shoot;
 8003ce0:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <_Z13Efft_activatev+0x90>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	701a      	strb	r2, [r3, #0]
		}
	break;
 8003ce6:	e01c      	b.n	8003d22 <_Z13Efft_activatev+0x82>

	case ef_shoot:
		if (hi2c3.State == HAL_I2C_STATE_READY){
 8003ce8:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <_Z13Efft_activatev+0x98>)
 8003cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d013      	beq.n	8003d26 <_Z13Efft_activatev+0x86>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_LAST_FRAME);
 8003cfe:	1dfa      	adds	r2, r7, #7
 8003d00:	2320      	movs	r3, #32
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2301      	movs	r3, #1
 8003d06:	2146      	movs	r1, #70	; 0x46
 8003d08:	480b      	ldr	r0, [pc, #44]	; (8003d38 <_Z13Efft_activatev+0x98>)
 8003d0a:	f013 ff3b 	bl	8017b84 <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_INIT;
 8003d0e:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <_Z13Efft_activatev+0x90>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 0;
 8003d14:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <_Z13Efft_activatev+0x94>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 1;
 8003d1a:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <_Z13Efft_activatev+0x9c>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	701a      	strb	r2, [r3, #0]
		}
	break;
 8003d20:	e001      	b.n	8003d26 <_Z13Efft_activatev+0x86>
	break;
 8003d22:	bf00      	nop
 8003d24:	e000      	b.n	8003d28 <_Z13Efft_activatev+0x88>
	break;
 8003d26:	bf00      	nop
	}

}
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000786 	.word	0x20000786
 8003d34:	200006e3 	.word	0x200006e3
 8003d38:	20000278 	.word	0x20000278
 8003d3c:	200006e5 	.word	0x200006e5

08003d40 <_Z9Efft_readPh>:

void Efft_read(uint8_t *Rddata){
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	6078      	str	r0, [r7, #4]
		//HAL_I2C_Mem_Read(&hi2c1, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1, 100);
		flag_efftRead = 0;
	}
	*/
	static uint8_t efrdStatus = 0;
	switch(efrdStatus){
 8003d48:	4b1f      	ldr	r3, [pc, #124]	; (8003dc8 <_Z9Efft_readPh+0x88>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d01a      	beq.n	8003d86 <_Z9Efft_readPh+0x46>
	default:
	case 0:
		if (flag_efftRead != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8003d50:	4b1e      	ldr	r3, [pc, #120]	; (8003dcc <_Z9Efft_readPh+0x8c>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <_Z9Efft_readPh+0x28>
 8003d58:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <_Z9Efft_readPh+0x90>)
 8003d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d101      	bne.n	8003d68 <_Z9Efft_readPh+0x28>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <_Z9Efft_readPh+0x2a>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d025      	beq.n	8003dba <_Z9Efft_readPh+0x7a>
			//HAL_I2C_Master_Transmit_IT(&hi2c3, ADDR_EFFT, 0x23, 1);
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
 8003d6e:	2302      	movs	r3, #2
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	2301      	movs	r3, #1
 8003d74:	4a17      	ldr	r2, [pc, #92]	; (8003dd4 <_Z9Efft_readPh+0x94>)
 8003d76:	2146      	movs	r1, #70	; 0x46
 8003d78:	4815      	ldr	r0, [pc, #84]	; (8003dd0 <_Z9Efft_readPh+0x90>)
 8003d7a:	f013 ff03 	bl	8017b84 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &readRQ, 2, 100);
			//HAL_I2C_Master_Seq_Transmit_DMA(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
			efrdStatus = 1;
 8003d7e:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <_Z9Efft_readPh+0x88>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	701a      	strb	r2, [r3, #0]
		}
	break;
 8003d84:	e019      	b.n	8003dba <_Z9Efft_readPh+0x7a>

	case 1:

		if (hi2c3.State == HAL_I2C_STATE_READY){
 8003d86:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <_Z9Efft_readPh+0x90>)
 8003d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	bf0c      	ite	eq
 8003d92:	2301      	moveq	r3, #1
 8003d94:	2300      	movne	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d010      	beq.n	8003dbe <_Z9Efft_readPh+0x7e>
			HAL_I2C_Master_Seq_Receive_IT(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
 8003d9c:	2320      	movs	r3, #32
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	2301      	movs	r3, #1
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	2146      	movs	r1, #70	; 0x46
 8003da6:	480a      	ldr	r0, [pc, #40]	; (8003dd0 <_Z9Efft_readPh+0x90>)
 8003da8:	f013 ffb2 	bl	8017d10 <HAL_I2C_Master_Seq_Receive_IT>
			//HAL_I2C_Master_Seq_Receive_DMA(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
			//HAL_I2C_Master_Receive(&hi2c3, ADDR_EFFT ,Rddata, 1, 100);
		flag_efftRead = 0;
 8003dac:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <_Z9Efft_readPh+0x8c>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
		efrdStatus = 0;
 8003db2:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <_Z9Efft_readPh+0x88>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	701a      	strb	r2, [r3, #0]
			}
	break;
 8003db8:	e001      	b.n	8003dbe <_Z9Efft_readPh+0x7e>
	break;
 8003dba:	bf00      	nop
 8003dbc:	e000      	b.n	8003dc0 <_Z9Efft_readPh+0x80>
	break;
 8003dbe:	bf00      	nop
	}

}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000787 	.word	0x20000787
 8003dcc:	200006e4 	.word	0x200006e4
 8003dd0:	20000278 	.word	0x20000278
 8003dd4:	2000018a 	.word	0x2000018a

08003dd8 <HAL_GPIO_EXTI_Callback>:

/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	80fb      	strh	r3, [r7, #6]
	//============// EMER ////=====================
	if(GPIO_Pin == GPIO_PIN_11){
 8003de2:	88fb      	ldrh	r3, [r7, #6]
 8003de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003de8:	d108      	bne.n	8003dfc <HAL_GPIO_EXTI_Callback+0x24>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		grandState = emer;
 8003dea:	4b2e      	ldr	r3, [pc, #184]	; (8003ea4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8003dec:	2203      	movs	r2, #3
 8003dee:	701a      	strb	r2, [r3, #0]
		bluecounter = 0;
 8003df0:	4b2d      	ldr	r3, [pc, #180]	; (8003ea8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 8003df6:	4b2d      	ldr	r3, [pc, #180]	; (8003eac <HAL_GPIO_EXTI_Callback+0xd4>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	801a      	strh	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
	//=============// Stop ////======================
	if(GPIO_Pin == GPIO_PIN_10){
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e02:	d110      	bne.n	8003e26 <HAL_GPIO_EXTI_Callback+0x4e>
		PWMOut = 0;
 8003e04:	4b29      	ldr	r3, [pc, #164]	; (8003eac <HAL_GPIO_EXTI_Callback+0xd4>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	801a      	strh	r2, [r3, #0]
		bluecounter = 0;
 8003e0a:	4b27      	ldr	r3, [pc, #156]	; (8003ea8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
		if(grandState == work){grandState = stopnd;}
 8003e10:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d103      	bne.n	8003e20 <HAL_GPIO_EXTI_Callback+0x48>
 8003e18:	4b22      	ldr	r3, [pc, #136]	; (8003ea4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e002      	b.n	8003e26 <HAL_GPIO_EXTI_Callback+0x4e>
		else{grandState = stop;}
 8003e20:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8003e22:	2202      	movs	r2, #2
 8003e24:	701a      	strb	r2, [r3, #0]

		}
	//=========// work Blue button //=========//
	if(GPIO_Pin == GPIO_PIN_13){
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e2c:	d120      	bne.n	8003e70 <HAL_GPIO_EXTI_Callback+0x98>
		bluecounter++;
 8003e2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	3301      	adds	r3, #1
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003e38:	701a      	strb	r2, [r3, #0]
//		    		positionlog[i] = PosDataSet[i];
//		    	}
		//if(grandState == Ready){}

		////===== Zero Calibrate Func /////////////
		if (bluecounter % 2 == 0){
 8003e3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ea8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d111      	bne.n	8003e6a <HAL_GPIO_EXTI_Callback+0x92>
			PWMOut = 1100;
 8003e46:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_GPIO_EXTI_Callback+0xd4>)
 8003e48:	f240 424c 	movw	r2, #1100	; 0x44c
 8003e4c:	801a      	strh	r2, [r3, #0]
			mot_dirctn++; mot_dirctn%=2;
 8003e4e:	4b18      	ldr	r3, [pc, #96]	; (8003eb0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	3301      	adds	r3, #1
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	4b16      	ldr	r3, [pc, #88]	; (8003eb0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003e66:	701a      	strb	r2, [r3, #0]
 8003e68:	e002      	b.n	8003e70 <HAL_GPIO_EXTI_Callback+0x98>

		}else{PWMOut = 0;}
 8003e6a:	4b10      	ldr	r3, [pc, #64]	; (8003eac <HAL_GPIO_EXTI_Callback+0xd4>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	801a      	strh	r2, [r3, #0]
		//flag_efftActi = 1;
		//trig_efftRead = 1;
	}

	//=============// setzero //================//
		if(GPIO_Pin == GPIO_PIN_2){
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d10f      	bne.n	8003e96 <HAL_GPIO_EXTI_Callback+0xbe>
			position_order = 0;
 8003e76:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
			positionlog[position_order] = 0.0122; // 0.000613 - 0.0122 => 1-2/1024
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	4a0d      	ldr	r2, [pc, #52]	; (8003eb8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	4a0d      	ldr	r2, [pc, #52]	; (8003ebc <HAL_GPIO_EXTI_Callback+0xe4>)
 8003e88:	601a      	str	r2, [r3, #0]
			Velocity = 7.0;
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8003e8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ec4 <HAL_GPIO_EXTI_Callback+0xec>)
 8003e8e:	601a      	str	r2, [r3, #0]
			grandState = SetZeroGr;
 8003e90:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8003e92:	2205      	movs	r2, #5
 8003e94:	701a      	strb	r2, [r3, #0]
		}
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	200004aa 	.word	0x200004aa
 8003ea8:	200006a0 	.word	0x200006a0
 8003eac:	20000524 	.word	0x20000524
 8003eb0:	2000052c 	.word	0x2000052c
 8003eb4:	200004c5 	.word	0x200004c5
 8003eb8:	200000f4 	.word	0x200000f4
 8003ebc:	3c47e282 	.word	0x3c47e282
 8003ec0:	20000538 	.word	0x20000538
 8003ec4:	40e00000 	.word	0x40e00000

08003ec8 <_Z6microsv>:

///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 8003ec8:	b4b0      	push	{r4, r5, r7}
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <_Z6microsv+0x2c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <_Z6microsv+0x30>)
 8003eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ede:	1884      	adds	r4, r0, r2
 8003ee0:	eb41 0503 	adc.w	r5, r1, r3
 8003ee4:	4622      	mov	r2, r4
 8003ee6:	462b      	mov	r3, r5
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bcb0      	pop	{r4, r5, r7}
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	2000035c 	.word	0x2000035c
 8003ef8:	200004b8 	.word	0x200004b8

08003efc <_Z6millisv>:
uint32_t millis()
{return _millis;}// + htim10.Instance->CNT
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <_Z6millisv+0x14>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	200004c0 	.word	0x200004c0

08003f14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003f14:	b4b0      	push	{r4, r5, r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a0e      	ldr	r2, [pc, #56]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d10a      	bne.n	8003f3a <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8003f24:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f2e:	1854      	adds	r4, r2, r1
 8003f30:	f143 0500 	adc.w	r5, r3, #0
 8003f34:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003f36:	e9c3 4500 	strd	r4, r5, [r3]
 if(htim == &htim10)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a08      	ldr	r2, [pc, #32]	; (8003f60 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d104      	bne.n	8003f4c <HAL_TIM_PeriodElapsedCallback+0x38>
 {_millis++;}
 8003f42:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3301      	adds	r3, #1
 8003f48:	4a06      	ldr	r2, [pc, #24]	; (8003f64 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003f4a:	6013      	str	r3, [r2, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bcb0      	pop	{r4, r5, r7}
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	2000035c 	.word	0x2000035c
 8003f5c:	200004b8 	.word	0x200004b8
 8003f60:	20000314 	.word	0x20000314
 8003f64:	200004c0 	.word	0x200004c0

08003f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f6c:	b672      	cpsid	i
}
 8003f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f70:	e7fe      	b.n	8003f70 <Error_Handler+0x8>

08003f72 <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>:
{
public:
  /** Alias to the template parameter \c tag */
  typedef tag Tag;

  SymbolExpr() {}
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>:
template<int N> class FixedInt
{
public:
  static const int value = N;
  EIGEN_CONSTEXPR operator int() const { return value; }
  FixedInt() {}
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <_ZNK5Eigen8internal8FixedIntILi1EEclEv>:
  template<int M>
  FixedInt<N&M> operator&( FixedInt<M>) const { return FixedInt<N&M>(); }

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
  // Needed in C++14 to allow fix<N>():
  FixedInt operator() () const { return *this; }
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	bf00      	nop
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>:
  AddExpr<Derived,ValueExpr<internal::FixedInt<N> > > operator+(internal::FixedInt<N>) const
 8003fb4:	b5b0      	push	{r4, r5, r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	7039      	strb	r1, [r7, #0]
  { return AddExpr<Derived,ValueExpr<internal::FixedInt<N> > >(derived(), ValueExpr<internal::FixedInt<N> >()); }
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fdb8 	bl	8004b34 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>
 8003fc4:	4604      	mov	r4, r0
 8003fc6:	f107 030c 	add.w	r3, r7, #12
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fdbd 	bl	8004b4a <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>
 8003fd0:	f107 020c 	add.w	r2, r7, #12
 8003fd4:	f107 0308 	add.w	r3, r7, #8
 8003fd8:	4621      	mov	r1, r4
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fdc0 	bl	8004b60 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>
 8003fe0:	bf00      	nop
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bdb0      	pop	{r4, r5, r7, pc}

08003fea <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>:
#endif

// Suppresses 'unused variable' warnings.
namespace Eigen {
  namespace internal {
    template<typename T> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void ignore_unused_variable(const T&) {}
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>:
      * a matrix to 0 is not supported.
      *
      * \sa resize(Index,Index)
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Matrix() : Base()
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fdc2 	bl	8004b92 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
    {
      Base::_check_template_params();
 800400e:	f000 fdd0 	bl	8004bb2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>:
    Matrix() : Base()
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fdd6 	bl	8004bd8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800402c:	f000 fde4 	bl	8004bf8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
    }
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>:
    Matrix() : Base()
 800403a:	b580      	push	{r7, lr}
 800403c:	b082      	sub	sp, #8
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fdea 	bl	8004c1e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 800404a:	f000 fdf8 	bl	8004c3e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
    }
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>:
    Matrix() : Base()
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fdfe 	bl	8004c64 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 8004068:	f000 fe0c 	bl	8004c84 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
    }
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>:
  * \note According the c++ standard, the argument expressions of this comma initializer are evaluated in arbitrary order.
  *
  * \sa CommaInitializer::finished(), class CommaInitializer
  */
template<typename Derived>
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
{
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fe04 	bl	8004c94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>
}
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
    finished();
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fe39 	bl	8004d14 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>
  }
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689c      	ldr	r4, [r3, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fe5e 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80040c4:	4603      	mov	r3, r0
 80040c6:	429c      	cmp	r4, r3
 80040c8:	bf0c      	ite	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	2300      	movne	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01d      	beq.n	8004110 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	441a      	add	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	605a      	str	r2, [r3, #4]
      m_col = 0;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685c      	ldr	r4, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fe4d 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80040fc:	4603      	mov	r3, r0
 80040fe:	429c      	cmp	r4, r3
 8004100:	db05      	blt.n	800410e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x62>
 8004102:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xcc>)
 8004104:	4a1d      	ldr	r2, [pc, #116]	; (800417c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 8004106:	2148      	movs	r1, #72	; 0x48
 8004108:	481d      	ldr	r0, [pc, #116]	; (8004180 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 800410a:	f019 fd5b 	bl	801dbc4 <__assert_func>
 800410e:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689c      	ldr	r4, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fe31 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800411e:	4603      	mov	r3, r0
 8004120:	429c      	cmp	r4, r3
 8004122:	db05      	blt.n	8004130 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x84>
 8004124:	4b17      	ldr	r3, [pc, #92]	; (8004184 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd8>)
 8004126:	4a15      	ldr	r2, [pc, #84]	; (800417c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 8004128:	214b      	movs	r1, #75	; 0x4b
 800412a:	4815      	ldr	r0, [pc, #84]	; (8004180 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 800412c:	f019 fd4a 	bl	801dbc4 <__assert_func>
 8004130:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d005      	beq.n	8004146 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x9a>
 800413a:	4b13      	ldr	r3, [pc, #76]	; (8004188 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xdc>)
 800413c:	4a0f      	ldr	r2, [pc, #60]	; (800417c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 800413e:	214d      	movs	r1, #77	; 0x4d
 8004140:	480f      	ldr	r0, [pc, #60]	; (8004180 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 8004142:	f019 fd3f 	bl	801dbc4 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	461c      	mov	r4, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6858      	ldr	r0, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	1c59      	adds	r1, r3, #1
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6091      	str	r1, [r2, #8]
 800415a:	461a      	mov	r2, r3
 800415c:	4601      	mov	r1, r0
 800415e:	4620      	mov	r0, r4
 8004160:	f000 fe24 	bl	8004dac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8004164:	4602      	mov	r2, r0
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6013      	str	r3, [r2, #0]
    return *this;
 800416c:	687b      	ldr	r3, [r7, #4]
  }
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	bd90      	pop	{r4, r7, pc}
 8004176:	bf00      	nop
 8004178:	0801ec40 	.word	0x0801ec40
 800417c:	0801ec90 	.word	0x0801ec90
 8004180:	0801ed54 	.word	0x0801ed54
 8004184:	0801edb0 	.word	0x0801edb0
 8004188:	0801ee08 	.word	0x0801ee08

0800418c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 fe1f 	bl	8004de0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>
}
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
    finished();
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fe54 	bl	8004e60 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>
  }
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689c      	ldr	r4, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fe78 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80041dc:	4603      	mov	r3, r0
 80041de:	429c      	cmp	r4, r3
 80041e0:	bf0c      	ite	eq
 80041e2:	2301      	moveq	r3, #1
 80041e4:	2300      	movne	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01d      	beq.n	8004228 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	441a      	add	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	605a      	str	r2, [r3, #4]
      m_col = 0;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685c      	ldr	r4, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fe67 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004214:	4603      	mov	r3, r0
 8004216:	429c      	cmp	r4, r3
 8004218:	db05      	blt.n	8004226 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x62>
 800421a:	4b1d      	ldr	r3, [pc, #116]	; (8004290 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xcc>)
 800421c:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 800421e:	2148      	movs	r1, #72	; 0x48
 8004220:	481d      	ldr	r0, [pc, #116]	; (8004298 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 8004222:	f019 fccf 	bl	801dbc4 <__assert_func>
 8004226:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689c      	ldr	r4, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fe4b 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004236:	4603      	mov	r3, r0
 8004238:	429c      	cmp	r4, r3
 800423a:	db05      	blt.n	8004248 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x84>
 800423c:	4b17      	ldr	r3, [pc, #92]	; (800429c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd8>)
 800423e:	4a15      	ldr	r2, [pc, #84]	; (8004294 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 8004240:	214b      	movs	r1, #75	; 0x4b
 8004242:	4815      	ldr	r0, [pc, #84]	; (8004298 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 8004244:	f019 fcbe 	bl	801dbc4 <__assert_func>
 8004248:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d005      	beq.n	800425e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x9a>
 8004252:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xdc>)
 8004254:	4a0f      	ldr	r2, [pc, #60]	; (8004294 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 8004256:	214d      	movs	r1, #77	; 0x4d
 8004258:	480f      	ldr	r0, [pc, #60]	; (8004298 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 800425a:	f019 fcb3 	bl	801dbc4 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	461c      	mov	r4, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6858      	ldr	r0, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	1c59      	adds	r1, r3, #1
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6091      	str	r1, [r2, #8]
 8004272:	461a      	mov	r2, r3
 8004274:	4601      	mov	r1, r0
 8004276:	4620      	mov	r0, r4
 8004278:	f000 fe3e 	bl	8004ef8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 800427c:	4602      	mov	r2, r0
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6013      	str	r3, [r2, #0]
    return *this;
 8004284:	687b      	ldr	r3, [r7, #4]
  }
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	bd90      	pop	{r4, r7, pc}
 800428e:	bf00      	nop
 8004290:	0801ec40 	.word	0x0801ec40
 8004294:	0801ee20 	.word	0x0801ee20
 8004298:	0801ed54 	.word	0x0801ed54
 800429c:	0801edb0 	.word	0x0801edb0
 80042a0:	0801ee08 	.word	0x0801ee08

080042a4 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fe39 	bl	8004f2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>
}
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
    finished();
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fe6e 	bl	8004fac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>
  }
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 80042da:	b580      	push	{r7, lr}
 80042dc:	b084      	sub	sp, #16
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 fe94 	bl	8005018 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>
}
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
    finished();
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fec9 	bl	8005098 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>
  }
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8004310:	b590      	push	{r4, r7, lr}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689c      	ldr	r4, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 feee 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8004328:	4603      	mov	r3, r0
 800432a:	429c      	cmp	r4, r3
 800432c:	bf0c      	ite	eq
 800432e:	2301      	moveq	r3, #1
 8004330:	2300      	movne	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01d      	beq.n	8004374 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	441a      	add	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	605a      	str	r2, [r3, #4]
      m_col = 0;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685c      	ldr	r4, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fedd 	bl	800511a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8004360:	4603      	mov	r3, r0
 8004362:	429c      	cmp	r4, r3
 8004364:	db05      	blt.n	8004372 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x62>
 8004366:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xcc>)
 8004368:	4a1d      	ldr	r2, [pc, #116]	; (80043e0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 800436a:	2148      	movs	r1, #72	; 0x48
 800436c:	481d      	ldr	r0, [pc, #116]	; (80043e4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 800436e:	f019 fc29 	bl	801dbc4 <__assert_func>
 8004372:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689c      	ldr	r4, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fec1 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8004382:	4603      	mov	r3, r0
 8004384:	429c      	cmp	r4, r3
 8004386:	db05      	blt.n	8004394 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x84>
 8004388:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd8>)
 800438a:	4a15      	ldr	r2, [pc, #84]	; (80043e0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 800438c:	214b      	movs	r1, #75	; 0x4b
 800438e:	4815      	ldr	r0, [pc, #84]	; (80043e4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8004390:	f019 fc18 	bl	801dbc4 <__assert_func>
 8004394:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d005      	beq.n	80043aa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x9a>
 800439e:	4b13      	ldr	r3, [pc, #76]	; (80043ec <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xdc>)
 80043a0:	4a0f      	ldr	r2, [pc, #60]	; (80043e0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 80043a2:	214d      	movs	r1, #77	; 0x4d
 80043a4:	480f      	ldr	r0, [pc, #60]	; (80043e4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 80043a6:	f019 fc0d 	bl	801dbc4 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	461c      	mov	r4, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6858      	ldr	r0, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	1c59      	adds	r1, r3, #1
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6091      	str	r1, [r2, #8]
 80043be:	461a      	mov	r2, r3
 80043c0:	4601      	mov	r1, r0
 80043c2:	4620      	mov	r0, r4
 80043c4:	f000 feb4 	bl	8005130 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 80043c8:	4602      	mov	r2, r0
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6013      	str	r3, [r2, #0]
    return *this;
 80043d0:	687b      	ldr	r3, [r7, #4]
  }
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd90      	pop	{r4, r7, pc}
 80043da:	bf00      	nop
 80043dc:	0801ec40 	.word	0x0801ec40
 80043e0:	0801eee4 	.word	0x0801eee4
 80043e4:	0801ed54 	.word	0x0801ed54
 80043e8:	0801edb0 	.word	0x0801edb0
 80043ec:	0801ee08 	.word	0x0801ee08

080043f0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>:
      * \sa operator[](Index)
      */

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Scalar&
    operator()(Index row, Index col)
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
    {
      eigen_assert(row >= 0 && row < rows()
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	db10      	blt.n	8004424 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 fead 	bl	8005162 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004408:	4602      	mov	r2, r0
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	4293      	cmp	r3, r2
 800440e:	da09      	bge.n	8004424 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	db06      	blt.n	8004424 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 feb3 	bl	8005182 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800441c:	4602      	mov	r2, r0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4293      	cmp	r3, r2
 8004422:	db06      	blt.n	8004432 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x42>
 8004424:	4b08      	ldr	r3, [pc, #32]	; (8004448 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x58>)
 8004426:	4a09      	ldr	r2, [pc, #36]	; (800444c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x5c>)
 8004428:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 800442c:	4808      	ldr	r0, [pc, #32]	; (8004450 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x60>)
 800442e:	f019 fbc9 	bl	801dbc4 <__assert_func>
          && col >= 0 && col < cols());
      return coeffRef(row, col);
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 fecc 	bl	80051d4 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>
 800443c:	4603      	mov	r3, r0
    }
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	0801efa8 	.word	0x0801efa8
 800444c:	0801efe0 	.word	0x0801efe0
 8004450:	0801f0cc 	.word	0x0801f0cc

08004454 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>:
  * on the behavior of CwiseNullaryOp.
  *
  * \sa class CwiseUnaryOp, class CwiseBinaryOp, DenseBase::NullaryExpr
  */
template<typename NullaryOp, typename PlainObjectType>
class CwiseNullaryOp : public internal::dense_xpr_base< CwiseNullaryOp<NullaryOp, PlainObjectType> >::type, internal::no_assignment_operator
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	1d1a      	adds	r2, r3, #4
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	3304      	adds	r3, #4
 8004466:	4619      	mov	r1, r3
 8004468:	4610      	mov	r0, r2
 800446a:	f000 ffaf 	bl	80053cc <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>:
  return CwiseBinaryOp<CustomBinaryOp, const Derived, const OtherDerived>(derived(), other.derived(), func);
}


#ifndef EIGEN_PARSED_BY_DOXYGEN
EIGEN_MAKE_SCALAR_BINARY_OP(operator*,product)
 8004478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800447a:	b089      	sub	sp, #36	; 0x24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	68b8      	ldr	r0, [r7, #8]
 8004486:	f000 fec8 	bl	800521a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800448a:	4604      	mov	r4, r0
 800448c:	68b8      	ldr	r0, [r7, #8]
 800448e:	f000 fec4 	bl	800521a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004492:	4603      	mov	r3, r0
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fd24 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800449a:	4605      	mov	r5, r0
 800449c:	68b8      	ldr	r0, [r7, #8]
 800449e:	f000 febc 	bl	800521a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80044a2:	4603      	mov	r3, r0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fd11 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80044aa:	4606      	mov	r6, r0
 80044ac:	f107 0318 	add.w	r3, r7, #24
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 febc 	bl	8005230 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>
 80044b8:	f107 0318 	add.w	r3, r7, #24
 80044bc:	f107 0010 	add.w	r0, r7, #16
 80044c0:	4632      	mov	r2, r6
 80044c2:	4629      	mov	r1, r5
 80044c4:	f000 fed0 	bl	8005268 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>
 80044c8:	f107 031c 	add.w	r3, r7, #28
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 ff03 	bl	80052d8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 80044d2:	f107 031c 	add.w	r3, r7, #28
 80044d6:	f107 0210 	add.w	r2, r7, #16
 80044da:	4621      	mov	r1, r4
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 ff35 	bl	800534c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	3724      	adds	r7, #36	; 0x24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044ea <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>:
  *
  * \sa transposeInPlace(), adjoint() */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
Transpose<Derived>
DenseBase<Derived>::transpose()
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
{
  return TransposeReturnType(derived());
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 ff86 	bl	8005404 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80044f8:	4602      	mov	r2, r0
 80044fa:	f107 030c 	add.w	r3, r7, #12
 80044fe:	4611      	mov	r1, r2
 8004500:	4618      	mov	r0, r3
 8004502:	f000 ffa2 	bl	800544a <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>
 8004506:	68fb      	ldr	r3, [r7, #12]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>:
  * CwiseBinaryOp types explicitly.
  *
  * \sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, class CwiseUnaryOp, class CwiseNullaryOp
  */
template<typename BinaryOp, typename LhsType, typename RhsType>
class CwiseBinaryOp :
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	1d1a      	adds	r2, r3, #4
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	3304      	adds	r3, #4
 800452a:	4619      	mov	r1, r3
 800452c:	4610      	mov	r0, r2
 800452e:	f7ff ff91 	bl	8004454 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f103 020c 	add.w	r2, r3, #12
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	330c      	adds	r3, #12
 800453c:	4619      	mov	r1, r3
 800453e:	4610      	mov	r0, r2
 8004540:	f000 ff54 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived, OtherDerived>
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 800454e:	b590      	push	{r4, r7, lr}
 8004550:	b085      	sub	sp, #20
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)
#ifdef EIGEN_DEBUG_PRODUCT
  internal::product_type<Derived,OtherDerived>::debug();
#endif

  return Product<Derived, OtherDerived>(derived(), other.derived());
 800455a:	68b8      	ldr	r0, [r7, #8]
 800455c:	f000 ff85 	bl	800546a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 8004560:	4604      	mov	r4, r0
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 ff8c 	bl	8005480 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8004568:	4603      	mov	r3, r0
 800456a:	461a      	mov	r2, r3
 800456c:	4621      	mov	r1, r4
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 ffd2 	bl	8005518 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>
}
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	bd90      	pop	{r4, r7, pc}

0800457c <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6839      	ldr	r1, [r7, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fff4 	bl	8005578 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004590:	4603      	mov	r3, r0
    }
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 800459a:	b590      	push	{r4, r7, lr}
 800459c:	b085      	sub	sp, #20
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80045a6:	68b8      	ldr	r0, [r7, #8]
 80045a8:	f000 ffff 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80045ac:	4604      	mov	r4, r0
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fe33 	bl	800521a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80045b4:	4603      	mov	r3, r0
 80045b6:	461a      	mov	r2, r3
 80045b8:	4621      	mov	r1, r4
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f001 f824 	bl	8005608 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd90      	pop	{r4, r7, pc}

080045c8 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6839      	ldr	r1, [r7, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f001 f844 	bl	8005664 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 80045dc:	4603      	mov	r3, r0
    }
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80045e6:	b590      	push	{r4, r7, lr}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80045f2:	68b8      	ldr	r0, [r7, #8]
 80045f4:	f000 ffd9 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80045f8:	4604      	mov	r4, r0
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 ffd5 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004600:	4603      	mov	r3, r0
 8004602:	461a      	mov	r2, r3
 8004604:	4621      	mov	r1, r4
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f001 f86a 	bl	80056e0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>
}
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	bd90      	pop	{r4, r7, pc}

08004614 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f001 f88d 	bl	800573c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004622:	4602      	mov	r2, r0
 8004624:	f107 030c 	add.w	r3, r7, #12
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f001 f8a9 	bl	8005782 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>
 8004630:	68fb      	ldr	r3, [r7, #12]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 800463a:	b590      	push	{r4, r7, lr}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004646:	68b8      	ldr	r0, [r7, #8]
 8004648:	f001 f8ab 	bl	80057a2 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 800464c:	4604      	mov	r4, r0
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f001 f8b2 	bl	80057b8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8004654:	4603      	mov	r3, r0
 8004656:	461a      	mov	r2, r3
 8004658:	4621      	mov	r1, r4
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f001 f8f8 	bl	8005850 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>
}
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	bd90      	pop	{r4, r7, pc}

08004668 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8004668:	b5b0      	push	{r4, r5, r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	68b8      	ldr	r0, [r7, #8]
 8004676:	f001 f91b 	bl	80058b0 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 800467a:	4604      	mov	r4, r0
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 ff94 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004682:	4605      	mov	r5, r0
 8004684:	f107 0314 	add.w	r3, r7, #20
 8004688:	4618      	mov	r0, r3
 800468a:	f001 f91c 	bl	80058c6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800468e:	f107 0314 	add.w	r3, r7, #20
 8004692:	462a      	mov	r2, r5
 8004694:	4621      	mov	r1, r4
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f001 f954 	bl	8005944 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bdb0      	pop	{r4, r5, r7, pc}

080046a4 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6839      	ldr	r1, [r7, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f001 f992 	bl	80059dc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
 80046b8:	4603      	mov	r3, r0
    }
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f001 f99f 	bl	8005a0e <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80046d0:	4602      	mov	r2, r0
 80046d2:	f107 030c 	add.w	r3, r7, #12
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f001 f9bb 	bl	8005a54 <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>
 80046de:	68fb      	ldr	r3, [r7, #12]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80046e8:	b590      	push	{r4, r7, lr}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80046f4:	68b8      	ldr	r0, [r7, #8]
 80046f6:	f000 ff58 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80046fa:	4604      	mov	r4, r0
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f001 f9b9 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8004702:	4603      	mov	r3, r0
 8004704:	461a      	mov	r2, r3
 8004706:	4621      	mov	r1, r4
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f001 f9f1 	bl	8005af0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>
}
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	bd90      	pop	{r4, r7, pc}

08004716 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004716:	b590      	push	{r4, r7, lr}
 8004718:	b085      	sub	sp, #20
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004722:	68b8      	ldr	r0, [r7, #8]
 8004724:	f001 fa12 	bl	8005b4c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004728:	4604      	mov	r4, r0
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 ff3d 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004730:	4603      	mov	r3, r0
 8004732:	461a      	mov	r2, r3
 8004734:	4621      	mov	r1, r4
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f001 fa38 	bl	8005bac <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>
}
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	bd90      	pop	{r4, r7, pc}

08004744 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004744:	b590      	push	{r4, r7, lr}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004750:	68b8      	ldr	r0, [r7, #8]
 8004752:	f001 fa59 	bl	8005c08 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 8004756:	4604      	mov	r4, r0
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f001 f98b 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800475e:	4603      	mov	r3, r0
 8004760:	461a      	mov	r2, r3
 8004762:	4621      	mov	r1, r4
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f001 fa8d 	bl	8005c84 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>
}
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	bd90      	pop	{r4, r7, pc}

08004772 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
 8004772:	b5b0      	push	{r4, r5, r7, lr}
 8004774:	b086      	sub	sp, #24
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	68b8      	ldr	r0, [r7, #8]
 8004780:	f001 fab0 	bl	8005ce4 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 8004784:	4604      	mov	r4, r0
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f001 fab7 	bl	8005cfa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800478c:	4605      	mov	r5, r0
 800478e:	f107 0314 	add.w	r3, r7, #20
 8004792:	4618      	mov	r0, r3
 8004794:	f001 f897 	bl	80058c6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004798:	f107 0314 	add.w	r3, r7, #20
 800479c:	462a      	mov	r2, r5
 800479e:	4621      	mov	r1, r4
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f001 faff 	bl	8005da4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bdb0      	pop	{r4, r5, r7, pc}

080047ae <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  inline const Derived& const_derived() const
  { return *static_cast<const Derived*>(this); }

  /** \returns the number of rows. \sa cols(), RowsAtCompileTime */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f001 fb34 	bl	8005e24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 80047bc:	4603      	mov	r3, r0
 80047be:	4618      	mov	r0, r3
 80047c0:	f001 fb3b 	bl	8005e3a <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80047c4:	4603      	mov	r3, r0
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  /** \returns the number of columns. \sa rows(), ColsAtCompileTime*/
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b082      	sub	sp, #8
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f001 fb24 	bl	8005e24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 80047dc:	4603      	mov	r3, r0
 80047de:	4618      	mov	r0, r3
 80047e0:	f001 fb38 	bl	8005e54 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80047e4:	4603      	mov	r3, r0
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>:
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80047fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	60da      	str	r2, [r3, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f103 0210 	add.w	r2, r3, #16
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	3310      	adds	r3, #16
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f001 f8d4 	bl	80059c4 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>:
  *
  * \sa computeInverseAndDetWithCheck()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC
inline const Inverse<Derived> MatrixBase<Derived>::inverse() const
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
{
  EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsInteger,THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES)
  eigen_assert(rows() == cols());
 8004832:	6838      	ldr	r0, [r7, #0]
 8004834:	f7ff ffbb 	bl	80047ae <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8004838:	4604      	mov	r4, r0
 800483a:	6838      	ldr	r0, [r7, #0]
 800483c:	f7ff ffc7 	bl	80047ce <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8004840:	4603      	mov	r3, r0
 8004842:	429c      	cmp	r4, r3
 8004844:	d006      	beq.n	8004854 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x2c>
 8004846:	4b09      	ldr	r3, [pc, #36]	; (800486c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x44>)
 8004848:	4a09      	ldr	r2, [pc, #36]	; (8004870 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x48>)
 800484a:	f240 115f 	movw	r1, #351	; 0x15f
 800484e:	4809      	ldr	r0, [pc, #36]	; (8004874 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x4c>)
 8004850:	f019 f9b8 	bl	801dbc4 <__assert_func>
  return Inverse<Derived>(derived());
 8004854:	6838      	ldr	r0, [r7, #0]
 8004856:	f001 fae5 	bl	8005e24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 800485a:	4603      	mov	r3, r0
 800485c:	4619      	mov	r1, r3
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f001 fb1d 	bl	8005e9e <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
}
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	bd90      	pop	{r4, r7, pc}
 800486c:	0801f128 	.word	0x0801f128
 8004870:	0801f13c 	.word	0x0801f13c
 8004874:	0801f290 	.word	0x0801f290

08004878 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>:
  * This class represents an abstract expression of A.inverse()
  * and most of the time this is the only way it is used.
  *
  */
template<typename XprType>
class Inverse : public InverseImpl<XprType,typename internal::traits<XprType>::StorageKind>
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	4611      	mov	r1, r2
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff ffb0 	bl	80047ee <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004898:	b590      	push	{r4, r7, lr}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80048a4:	68b8      	ldr	r0, [r7, #8]
 80048a6:	f001 fb0c 	bl	8005ec2 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 80048aa:	4604      	mov	r4, r0
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f001 fb13 	bl	8005ed8 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 80048b2:	4603      	mov	r3, r0
 80048b4:	461a      	mov	r2, r3
 80048b6:	4621      	mov	r1, r4
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f001 fb57 	bl	8005f6c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>
}
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd90      	pop	{r4, r7, pc}

080048c6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6839      	ldr	r1, [r7, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 fb7b 	bl	8005fd0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 80048da:	4603      	mov	r3, r0
    }
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80048f0:	68b8      	ldr	r0, [r7, #8]
 80048f2:	f001 f92b 	bl	8005b4c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80048f6:	4604      	mov	r4, r0
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fc8e 	bl	800521a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80048fe:	4603      	mov	r3, r0
 8004900:	461a      	mov	r2, r3
 8004902:	4621      	mov	r1, r4
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f001 fba1 	bl	800604c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	bd90      	pop	{r4, r7, pc}

08004912 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8004912:	b5b0      	push	{r4, r5, r7, lr}
 8004914:	b086      	sub	sp, #24
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
 800491e:	68b8      	ldr	r0, [r7, #8]
 8004920:	f001 f9eb 	bl	8005cfa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 8004924:	4604      	mov	r4, r0
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f001 fbbe 	bl	80060a8 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 800492c:	4605      	mov	r5, r0
 800492e:	f107 0314 	add.w	r3, r7, #20
 8004932:	4618      	mov	r0, r3
 8004934:	f001 fbc3 	bl	80060be <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 8004938:	f107 0314 	add.w	r3, r7, #20
 800493c:	462a      	mov	r2, r5
 800493e:	4621      	mov	r1, r4
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f001 fbfb 	bl	800613c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bdb0      	pop	{r4, r5, r7, pc}

0800494e <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>:
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	1d1a      	adds	r2, r3, #4
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	3304      	adds	r3, #4
 8004968:	e893 0003 	ldmia.w	r3, {r0, r1}
 800496c:	e882 0003 	stmia.w	r2, {r0, r1}
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f103 020c 	add.w	r2, r3, #12
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	330c      	adds	r3, #12
 800497a:	4619      	mov	r1, r3
 800497c:	4610      	mov	r0, r2
 800497e:	f001 fc1f 	bl	80061c0 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 800498c:	b590      	push	{r4, r7, lr}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004998:	68b8      	ldr	r0, [r7, #8]
 800499a:	f000 fc3e 	bl	800521a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800499e:	4604      	mov	r4, r0
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f001 fc19 	bl	80061d8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 80049a6:	4603      	mov	r3, r0
 80049a8:	461a      	mov	r2, r3
 80049aa:	4621      	mov	r1, r4
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f001 fc51 	bl	8006254 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>
}
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd90      	pop	{r4, r7, pc}

080049ba <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>:
  * The other template parameters are:
  * \tparam Option     can be DefaultProduct, AliasFreeProduct, or LazyProduct
  *
  */
template<typename _Lhs, typename _Rhs, int Option>
class Product : public ProductImpl<_Lhs,_Rhs,Option,
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b082      	sub	sp, #8
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	1d1a      	adds	r2, r3, #4
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	3304      	adds	r3, #4
 80049d4:	4619      	mov	r1, r3
 80049d6:	4610      	mov	r0, r2
 80049d8:	f7ff ffb9 	bl	800494e <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 80049e6:	b5b0      	push	{r4, r5, r7, lr}
 80049e8:	b086      	sub	sp, #24
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	607a      	str	r2, [r7, #4]
 80049f2:	68b8      	ldr	r0, [r7, #8]
 80049f4:	f000 fc11 	bl	800521a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80049f8:	4604      	mov	r4, r0
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f001 fc5a 	bl	80062b4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>
 8004a00:	4605      	mov	r5, r0
 8004a02:	f107 0314 	add.w	r3, r7, #20
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 ff5d 	bl	80058c6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004a0c:	f107 0314 	add.w	r3, r7, #20
 8004a10:	462a      	mov	r2, r5
 8004a12:	4621      	mov	r1, r4
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f001 fc8d 	bl	8006334 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bdb0      	pop	{r4, r5, r7, pc}

08004a22 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6839      	ldr	r1, [r7, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f001 fcbf 	bl	80063b4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
 8004a36:	4603      	mov	r3, r0
    }
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004a40:	b590      	push	{r4, r7, lr}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004a4c:	68b8      	ldr	r0, [r7, #8]
 8004a4e:	f000 fbe4 	bl	800521a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004a52:	4604      	mov	r4, r0
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f001 f879 	bl	8005b4c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4621      	mov	r1, r4
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f001 fce5 	bl	8006430 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>
}
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd90      	pop	{r4, r7, pc}

08004a6e <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8004a6e:	b5b0      	push	{r4, r5, r7, lr}
 8004a70:	b086      	sub	sp, #24
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	68b8      	ldr	r0, [r7, #8]
 8004a7c:	f000 fd95 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004a80:	4604      	mov	r4, r0
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f001 fd02 	bl	800648c <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>
 8004a88:	4605      	mov	r5, r0
 8004a8a:	f107 0314 	add.w	r3, r7, #20
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f001 fb15 	bl	80060be <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 8004a94:	f107 0314 	add.w	r3, r7, #20
 8004a98:	462a      	mov	r2, r5
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f001 fd35 	bl	800650c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bdb0      	pop	{r4, r5, r7, pc}

08004aaa <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>:
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	1d1a      	adds	r2, r3, #4
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ac8:	e882 0003 	stmia.w	r2, {r0, r1}
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f103 020c 	add.w	r2, r3, #12
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	330c      	adds	r3, #12
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	f001 fb71 	bl	80061c0 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004ae8:	b590      	push	{r4, r7, lr}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004af4:	68b8      	ldr	r0, [r7, #8]
 8004af6:	f001 fd4b 	bl	8006590 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 8004afa:	4604      	mov	r4, r0
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 fd54 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004b02:	4603      	mov	r3, r0
 8004b04:	461a      	mov	r2, r3
 8004b06:	4621      	mov	r1, r4
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f001 fd7f 	bl	800660c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>
}
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd90      	pop	{r4, r7, pc}

08004b16 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6839      	ldr	r1, [r7, #0]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f001 fd9f 	bl	8006668 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004b2a:	4603      	mov	r3, r0
    }
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>:
  ValueExpr() {}
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>:

template<typename Arg0, typename Arg1>
class AddExpr : public BaseExpr<AddExpr<Arg0,Arg1> >
{
public:
  AddExpr(const Arg0& arg0, const Arg1& arg1) : m_arg0(arg0), m_arg1(arg1) {}
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    EIGEN_MATRIX_FUNCTION_1(MatrixPowerReturnValue,        pow, power to \c p, const RealScalar& p)
    EIGEN_MATRIX_FUNCTION_1(MatrixComplexPowerReturnValue, pow, power to \c p, const std::complex<RealScalar>& p)

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(MatrixBase)
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MatrixBase)
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f001 fd89 	bl	800669a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    // Prevent user from trying to instantiate PlainObjectBase objects
    // by making all its constructor protected. See bug 1074.
  protected:

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b082      	sub	sp, #8
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff ffed 	bl	8004b7a <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f001 fd84 	bl	80066b0 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>
    {
//       _check_template_params();
//       EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void swap(DenseBase<OtherDerived> const & other)
    { Base::swap(other.derived()); }

    EIGEN_DEVICE_FUNC
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004bb2:	b480      	push	{r7}
 8004bb4:	af00      	add	r7, sp, #0
                        && ((MaxColsAtCompileTime == Dynamic) || (MaxColsAtCompileTime >= 0))
                        && (MaxRowsAtCompileTime == RowsAtCompileTime || RowsAtCompileTime==Dynamic)
                        && (MaxColsAtCompileTime == ColsAtCompileTime || ColsAtCompileTime==Dynamic)
                        && (Options & (DontAlign|RowMajor)) == Options),
        INVALID_MATRIX_TEMPLATE_PARAMETERS)
    }
 8004bb6:	bf00      	nop
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f001 fd7e 	bl	80066ca <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff ffed 	bl	8004bc0 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f001 fd79 	bl	80066e0 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>
    }
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
    }
 8004bfc:	bf00      	nop
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f001 fd73 	bl	80066fa <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7ff ffed 	bl	8004c06 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 fd6e 	bl	8006710 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>
    }
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004c3e:	b480      	push	{r7}
 8004c40:	af00      	add	r7, sp, #0
    }
 8004c42:	bf00      	nop
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f001 fd68 	bl	800672a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff ffed 	bl	8004c4c <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 fd63 	bl	8006740 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>
    }
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
    }
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
	...

08004c94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	605a      	str	r2, [r3, #4]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	609a      	str	r2, [r3, #8]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 f86a 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	dd07      	ble.n	8004cd8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x44>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 f857 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	dc05      	bgt.n	8004ce4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x50>
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x74>)
 8004cda:	4a0c      	ldr	r2, [pc, #48]	; (8004d0c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x78>)
 8004cdc:	2124      	movs	r1, #36	; 0x24
 8004cde:	480c      	ldr	r0, [pc, #48]	; (8004d10 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x7c>)
 8004ce0:	f018 ff70 	bl	801dbc4 <__assert_func>
 8004ce4:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2200      	movs	r2, #0
 8004cec:	2100      	movs	r1, #0
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f85c 	bl	8004dac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6013      	str	r3, [r2, #0]
  }
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	0801f2e8 	.word	0x0801f2e8
 8004d0c:	0801f344 	.word	0x0801f344
 8004d10:	0801ed54 	.word	0x0801ed54

08004d14 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8004d14:	b590      	push	{r4, r7, lr}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	18d4      	adds	r4, r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 f833 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004d30:	4603      	mov	r3, r0
 8004d32:	429c      	cmp	r4, r3
 8004d34:	d007      	beq.n	8004d46 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x32>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 f820 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x46>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689c      	ldr	r4, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 f816 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004d54:	4603      	mov	r3, r0
 8004d56:	429c      	cmp	r4, r3
 8004d58:	d005      	beq.n	8004d66 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x52>
 8004d5a:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x60>)
 8004d5c:	4a06      	ldr	r2, [pc, #24]	; (8004d78 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x64>)
 8004d5e:	217a      	movs	r1, #122	; 0x7a
 8004d60:	4806      	ldr	r0, [pc, #24]	; (8004d7c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x68>)
 8004d62:	f018 ff2f 	bl	801dbc4 <__assert_func>
 8004d66:	bf00      	nop
      return m_xpr;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
  }
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd90      	pop	{r4, r7, pc}
 8004d74:	0801f3f4 	.word	0x0801f3f4
 8004d78:	0801f494 	.word	0x0801f494
 8004d7c:	0801ed54 	.word	0x0801ed54

08004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	f001 fce7 	bl	800675a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	f001 fce4 	bl	800676a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 8004da2:	4603      	mov	r3, r0
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8004dac:	b590      	push	{r4, r7, lr}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f001 fcdd 	bl	800677a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	f001 fcd2 	bl	800676a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	fb03 f202 	mul.w	r2, r3, r2
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4423      	add	r3, r4
    }
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd90      	pop	{r4, r7, pc}
	...

08004de0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	609a      	str	r2, [r3, #8]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 f86a 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	dd07      	ble.n	8004e24 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x44>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 f857 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	dc05      	bgt.n	8004e30 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x50>
 8004e24:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x74>)
 8004e26:	4a0c      	ldr	r2, [pc, #48]	; (8004e58 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x78>)
 8004e28:	2124      	movs	r1, #36	; 0x24
 8004e2a:	480c      	ldr	r0, [pc, #48]	; (8004e5c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x7c>)
 8004e2c:	f018 feca 	bl	801dbc4 <__assert_func>
 8004e30:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2200      	movs	r2, #0
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f85c 	bl	8004ef8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 8004e40:	4602      	mov	r2, r0
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6013      	str	r3, [r2, #0]
  }
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	0801f2e8 	.word	0x0801f2e8
 8004e58:	0801f4fc 	.word	0x0801f4fc
 8004e5c:	0801ed54 	.word	0x0801ed54

08004e60 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 8004e60:	b590      	push	{r4, r7, lr}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	18d4      	adds	r4, r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 f833 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	429c      	cmp	r4, r3
 8004e80:	d007      	beq.n	8004e92 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x32>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f820 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x46>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689c      	ldr	r4, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f816 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	429c      	cmp	r4, r3
 8004ea4:	d005      	beq.n	8004eb2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x52>
 8004ea6:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x60>)
 8004ea8:	4a06      	ldr	r2, [pc, #24]	; (8004ec4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x64>)
 8004eaa:	217a      	movs	r1, #122	; 0x7a
 8004eac:	4806      	ldr	r0, [pc, #24]	; (8004ec8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x68>)
 8004eae:	f018 fe89 	bl	801dbc4 <__assert_func>
 8004eb2:	bf00      	nop
      return m_xpr;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
  }
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd90      	pop	{r4, r7, pc}
 8004ec0:	0801f3f4 	.word	0x0801f3f4
 8004ec4:	0801f5ac 	.word	0x0801f5ac
 8004ec8:	0801ed54 	.word	0x0801ed54

08004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	f001 fc5c 	bl	8006790 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	f001 fc59 	bl	80067a0 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8004ef8:	b590      	push	{r4, r7, lr}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f001 fc52 	bl	80067b0 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	f001 fc47 	bl	80067a0 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 8004f12:	4602      	mov	r2, r0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	fb03 f202 	mul.w	r2, r3, r2
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4423      	add	r3, r4
    }
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd90      	pop	{r4, r7, pc}
	...

08004f2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	605a      	str	r2, [r3, #4]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2201      	movs	r2, #1
 8004f48:	609a      	str	r2, [r3, #8]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 ff0e 	bl	8005d76 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	dd07      	ble.n	8004f70 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x44>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 ff11 	bl	8005d8c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	dc05      	bgt.n	8004f7c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x50>
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x74>)
 8004f72:	4a0c      	ldr	r2, [pc, #48]	; (8004fa4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x78>)
 8004f74:	2124      	movs	r1, #36	; 0x24
 8004f76:	480c      	ldr	r0, [pc, #48]	; (8004fa8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x7c>)
 8004f78:	f018 fe24 	bl	801dbc4 <__assert_func>
 8004f7c:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2200      	movs	r2, #0
 8004f84:	2100      	movs	r1, #0
 8004f86:	4618      	mov	r0, r3
 8004f88:	f001 fc1d 	bl	80067c6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6013      	str	r3, [r2, #0]
  }
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	0801f2e8 	.word	0x0801f2e8
 8004fa4:	0801f614 	.word	0x0801f614
 8004fa8:	0801ed54 	.word	0x0801ed54

08004fac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 8004fac:	b590      	push	{r4, r7, lr}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	18d4      	adds	r4, r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fed7 	bl	8005d76 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	429c      	cmp	r4, r3
 8004fcc:	d007      	beq.n	8004fde <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x32>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 feda 	bl	8005d8c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d109      	bne.n	8004ff2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x46>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689c      	ldr	r4, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fed0 	bl	8005d8c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004fec:	4603      	mov	r3, r0
 8004fee:	429c      	cmp	r4, r3
 8004ff0:	d005      	beq.n	8004ffe <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x52>
 8004ff2:	4b06      	ldr	r3, [pc, #24]	; (800500c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x60>)
 8004ff4:	4a06      	ldr	r2, [pc, #24]	; (8005010 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x64>)
 8004ff6:	217a      	movs	r1, #122	; 0x7a
 8004ff8:	4806      	ldr	r0, [pc, #24]	; (8005014 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x68>)
 8004ffa:	f018 fde3 	bl	801dbc4 <__assert_func>
 8004ffe:	bf00      	nop
      return m_xpr;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
  }
 8005004:	4618      	mov	r0, r3
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	bd90      	pop	{r4, r7, pc}
 800500c:	0801f3f4 	.word	0x0801f3f4
 8005010:	0801f6c4 	.word	0x0801f6c4
 8005014:	0801ed54 	.word	0x0801ed54

08005018 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	605a      	str	r2, [r3, #4]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	609a      	str	r2, [r3, #8]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4618      	mov	r0, r3
 8005042:	f000 f86a 	bl	800511a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	dd07      	ble.n	800505c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x44>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f857 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	dc05      	bgt.n	8005068 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x50>
 800505c:	4b0b      	ldr	r3, [pc, #44]	; (800508c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x74>)
 800505e:	4a0c      	ldr	r2, [pc, #48]	; (8005090 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x78>)
 8005060:	2124      	movs	r1, #36	; 0x24
 8005062:	480c      	ldr	r0, [pc, #48]	; (8005094 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x7c>)
 8005064:	f018 fdae 	bl	801dbc4 <__assert_func>
 8005068:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	2100      	movs	r1, #0
 8005072:	4618      	mov	r0, r3
 8005074:	f000 f85c 	bl	8005130 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 8005078:	4602      	mov	r2, r0
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6013      	str	r3, [r2, #0]
  }
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	0801f2e8 	.word	0x0801f2e8
 8005090:	0801f72c 	.word	0x0801f72c
 8005094:	0801ed54 	.word	0x0801ed54

08005098 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8005098:	b590      	push	{r4, r7, lr}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	18d4      	adds	r4, r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 f833 	bl	800511a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80050b4:	4603      	mov	r3, r0
 80050b6:	429c      	cmp	r4, r3
 80050b8:	d007      	beq.n	80050ca <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x32>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 f820 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x46>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689c      	ldr	r4, [r3, #8]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 f816 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80050d8:	4603      	mov	r3, r0
 80050da:	429c      	cmp	r4, r3
 80050dc:	d005      	beq.n	80050ea <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x52>
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x60>)
 80050e0:	4a06      	ldr	r2, [pc, #24]	; (80050fc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x64>)
 80050e2:	217a      	movs	r1, #122	; 0x7a
 80050e4:	4806      	ldr	r0, [pc, #24]	; (8005100 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x68>)
 80050e6:	f018 fd6d 	bl	801dbc4 <__assert_func>
 80050ea:	bf00      	nop
      return m_xpr;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
  }
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd90      	pop	{r4, r7, pc}
 80050f8:	0801f3f4 	.word	0x0801f3f4
 80050fc:	0801f7dc 	.word	0x0801f7dc
 8005100:	0801ed54 	.word	0x0801ed54

08005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	f001 fb74 	bl	80067f8 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 8005110:	4603      	mov	r3, r0
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	f001 fb71 	bl	8006808 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>
 8005126:	4603      	mov	r3, r0
 8005128:	4618      	mov	r0, r3
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8005130:	b590      	push	{r4, r7, lr}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
        return m_storage.data()[colId + rowId * m_storage.cols()];
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4618      	mov	r0, r3
 8005140:	f001 fb6a 	bl	8006818 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 8005144:	4604      	mov	r4, r0
 8005146:	f001 fb57 	bl	80067f8 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 800514a:	4602      	mov	r2, r0
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	fb03 f202 	mul.w	r2, r3, r2
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4423      	add	r3, r4
    }
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	bd90      	pop	{r4, r7, pc}

08005162 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f855 	bl	800521a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005170:	4603      	mov	r3, r0
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff feb5 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005178:	4603      	mov	r3, r0
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8005182:	b580      	push	{r7, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f845 	bl	800521a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005190:	4603      	mov	r3, r0
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff fe9a 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005198:	4603      	mov	r3, r0
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
protected:
  Index m_outerStride;
};

template<typename Derived>
struct evaluator<PlainObjectBase<Derived> >
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f001 fb4f 	bl	800684e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:

  plainobjectbase_evaluator_data<Scalar,OuterStrideAtCompileTime> m_d;
};

template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b082      	sub	sp, #8
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff ffec 	bl	80051a2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4618      	mov	r0, r3
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)
 80051d4:	b590      	push	{r4, r7, lr}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
      return internal::evaluator<Derived>(derived()).coeffRef(row,col);
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f90f 	bl	8005404 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80051e6:	4602      	mov	r2, r0
 80051e8:	f107 0314 	add.w	r3, r7, #20
 80051ec:	4611      	mov	r1, r2
 80051ee:	4618      	mov	r0, r3
 80051f0:	f001 fb1d 	bl	800682e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 80051f4:	f107 0314 	add.w	r3, r7, #20
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f001 fb31 	bl	8006864 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>
 8005202:	4604      	mov	r4, r0
 8005204:	bf00      	nop
 8005206:	f107 0314 	add.w	r3, r7, #20
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff ffd5 	bl	80051ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8005210:	4623      	mov	r3, r4
    }
 8005212:	4618      	mov	r0, r3
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	bd90      	pop	{r4, r7, pc}

0800521a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4618      	mov	r0, r3
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>:
namespace internal {

template<typename Scalar>
struct scalar_constant_op {
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const Scalar& other) : m_other(other) { }
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4618      	mov	r0, r3
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f001 fb1b 	bl	8006894 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>:

    typedef typename internal::dense_xpr_base<CwiseNullaryOp>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(CwiseNullaryOp)

    EIGEN_DEVICE_FUNC
    CwiseNullaryOp(Index rows, Index cols, const NullaryOp& func = NullaryOp())
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	603b      	str	r3, [r7, #0]
      : m_rows(rows), m_cols(cols), m_functor(func)
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f7ff ffea 	bl	8005250 <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	4618      	mov	r0, r3
 8005282:	f001 fb13 	bl	80068ac <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3301      	adds	r3, #1
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4618      	mov	r0, r3
 800528e:	f001 fb27 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	3304      	adds	r3, #4
 8005296:	6839      	ldr	r1, [r7, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f000 f897 	bl	80053cc <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
    {
      eigen_assert(rows >= 0
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	db08      	blt.n	80052b6 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d105      	bne.n	80052b6 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	db02      	blt.n	80052b6 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d005      	beq.n	80052c2 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x5a>
 80052b6:	4b05      	ldr	r3, [pc, #20]	; (80052cc <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x64>)
 80052b8:	4a05      	ldr	r2, [pc, #20]	; (80052d0 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x68>)
 80052ba:	2147      	movs	r1, #71	; 0x47
 80052bc:	4805      	ldr	r0, [pc, #20]	; (80052d4 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x6c>)
 80052be:	f018 fc81 	bl	801dbc4 <__assert_func>
            && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
            &&  cols >= 0
            && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols));
    }
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	0801f844 	.word	0x0801f844
 80052d0:	0801f8dc 	.word	0x0801f8dc
 80052d4:	0801f9d0 	.word	0x0801f9d0

080052d8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_product_op  : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_product_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_product_op)
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4618      	mov	r0, r3
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f001 fb0c 	bl	8006914 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>:
    const BinaryOp m_functor;
};

// Generic API dispatcher
template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
class CwiseBinaryOpImpl
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff ffed 	bl	80052ee <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index rows() const { return m_rows.value(); }
 800531e:	b580      	push	{r7, lr}
 8005320:	b082      	sub	sp, #8
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	f001 fb00 	bl	800692a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800532a:	4603      	mov	r3, r0
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index cols() const { return m_cols.value(); }
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	f001 fafd 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8005340:	4603      	mov	r3, r0
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800534c:	b590      	push	{r4, r7, lr}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f7ff ffd3 	bl	8005306 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3304      	adds	r3, #4
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff f871 	bl	8004454 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	330c      	adds	r3, #12
 8005376:	6839      	ldr	r1, [r7, #0]
 8005378:	4618      	mov	r0, r3
 800537a:	f000 f837 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fdae 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005386:	4604      	mov	r4, r0
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7ff ffc8 	bl	800531e <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800538e:	4603      	mov	r3, r0
 8005390:	429c      	cmp	r4, r3
 8005392:	d10a      	bne.n	80053aa <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x5e>
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff fd98 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800539c:	4604      	mov	r4, r0
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff ffc8 	bl	8005334 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80053a4:	4603      	mov	r3, r0
 80053a6:	429c      	cmp	r4, r3
 80053a8:	d005      	beq.n	80053b6 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x6a>
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x74>)
 80053ac:	4a05      	ldr	r2, [pc, #20]	; (80053c4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x78>)
 80053ae:	2174      	movs	r1, #116	; 0x74
 80053b0:	4805      	ldr	r0, [pc, #20]	; (80053c8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x7c>)
 80053b2:	f018 fc07 	bl	801dbc4 <__assert_func>
    }
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd90      	pop	{r4, r7, pc}
 80053c0:	0801fa2c 	.word	0x0801fa2c
 80053c4:	0801fa68 	.word	0x0801fa68
 80053c8:	0801fc90 	.word	0x0801fc90

080053cc <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>:
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4618      	mov	r0, r3
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 800541a:	b580      	push	{r7, lr}
 800541c:	b082      	sub	sp, #8
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f001 fa91 	bl	800694a <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4618      	mov	r0, r3
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8005432:	b580      	push	{r7, lr}
 8005434:	b082      	sub	sp, #8
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff ffed 	bl	800541a <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	6039      	str	r1, [r7, #0]
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff ffec 	bl	8005432 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4618      	mov	r0, r3
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4618      	mov	r0, r3
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
 8005496:	b580      	push	{r7, lr}
 8005498:	b082      	sub	sp, #8
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f001 fa5e 	bl	8006960 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>:
};

namespace internal {

template<typename Lhs, typename Rhs, int Option, int ProductTag = internal::product_type<Lhs,Rhs>::ret>
class dense_product_base
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b082      	sub	sp, #8
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff ffed 	bl	8005496 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>:
  public:
    typedef typename internal::generic_xpr_base<Product<Lhs,Rhs,Option>, MatrixXpr, StorageKind>::type Base;
};

template<typename Lhs, typename Rhs, int Option>
class ProductImpl<Lhs,Rhs,Option,Dense>
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b082      	sub	sp, #8
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff ffed 	bl	80054ae <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80054de:	b580      	push	{r7, lr}
 80054e0:	b082      	sub	sp, #8
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff fcee 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80054f0:	4603      	mov	r3, r0
    }
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff fce0 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800550c:	4603      	mov	r3, r0
 800550e:	4618      	mov	r0, r3
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005518:	b590      	push	{r4, r7, lr}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f7ff ffce 	bl	80054c6 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	68b9      	ldr	r1, [r7, #8]
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe ffee 	bl	8004510 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	3310      	adds	r3, #16
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6812      	ldr	r2, [r2, #0]
 800553c:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800553e:	68b8      	ldr	r0, [r7, #8]
 8005540:	f7ff ffcd 	bl	80054de <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8005544:	4604      	mov	r4, r0
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7ff ffd7 	bl	80054fa <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800554c:	4603      	mov	r3, r0
 800554e:	429c      	cmp	r4, r3
 8005550:	d005      	beq.n	800555e <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x46>
 8005552:	4b06      	ldr	r3, [pc, #24]	; (800556c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x54>)
 8005554:	4a06      	ldr	r2, [pc, #24]	; (8005570 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x58>)
 8005556:	2160      	movs	r1, #96	; 0x60
 8005558:	4806      	ldr	r0, [pc, #24]	; (8005574 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x5c>)
 800555a:	f018 fb33 	bl	801dbc4 <__assert_func>
 800555e:	bf00      	nop
    }
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	bd90      	pop	{r4, r7, pc}
 800556a:	bf00      	nop
 800556c:	0801fcec 	.word	0x0801fcec
 8005570:	0801fd78 	.word	0x0801fd78
 8005574:	0802003c 	.word	0x0802003c

08005578 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005578:	b590      	push	{r4, r7, lr}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f8da 	bl	800573c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005588:	4604      	mov	r4, r0
 800558a:	6838      	ldr	r0, [r7, #0]
 800558c:	f001 f9f3 	bl	8006976 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 8005590:	4603      	mov	r3, r0
 8005592:	4619      	mov	r1, r3
 8005594:	4620      	mov	r0, r4
 8005596:	f001 f9f9 	bl	800698c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>
      return this->derived();
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f8ce 	bl	800573c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80055a0:	4603      	mov	r3, r0
    }
 80055a2:	4618      	mov	r0, r3
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd90      	pop	{r4, r7, pc}

080055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f001 f9f4 	bl	80069b6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>:
class dense_product_base
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff ffed 	bl	80055c0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff ffed 	bl	80055d8 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005608:	b590      	push	{r4, r7, lr}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f7ff ffeb 	bl	80055f0 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff fba9 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800562e:	4604      	mov	r4, r0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff fc55 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005638:	4603      	mov	r3, r0
 800563a:	429c      	cmp	r4, r3
 800563c:	d005      	beq.n	800564a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 800563e:	4b06      	ldr	r3, [pc, #24]	; (8005658 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005640:	4a06      	ldr	r2, [pc, #24]	; (800565c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 8005642:	2160      	movs	r1, #96	; 0x60
 8005644:	4806      	ldr	r0, [pc, #24]	; (8005660 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005646:	f018 fabd 	bl	801dbc4 <__assert_func>
 800564a:	bf00      	nop
    }
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	bd90      	pop	{r4, r7, pc}
 8005656:	bf00      	nop
 8005658:	0801fcec 	.word	0x0801fcec
 800565c:	08020090 	.word	0x08020090
 8005660:	0802003c 	.word	0x0802003c

08005664 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005664:	b590      	push	{r4, r7, lr}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff fec8 	bl	8005404 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005674:	4604      	mov	r4, r0
 8005676:	6838      	ldr	r0, [r7, #0]
 8005678:	f001 f9a8 	bl	80069cc <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 800567c:	4603      	mov	r3, r0
 800567e:	4619      	mov	r1, r3
 8005680:	4620      	mov	r0, r4
 8005682:	f001 f9ae 	bl	80069e2 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff febc 	bl	8005404 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800568c:	4603      	mov	r3, r0
    }
 800568e:	4618      	mov	r0, r3
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	bd90      	pop	{r4, r7, pc}

08005696 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f001 f9b4 	bl	8006a0c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>:
class dense_product_base
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b082      	sub	sp, #8
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff ffed 	bl	8005696 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff ffed 	bl	80056ae <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80056e0:	b590      	push	{r4, r7, lr}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f7ff ffea 	bl	80056c6 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff fb3d 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005706:	4604      	mov	r4, r0
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff fb43 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005710:	4603      	mov	r3, r0
 8005712:	429c      	cmp	r4, r3
 8005714:	d005      	beq.n	8005722 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x42>
 8005716:	4b06      	ldr	r3, [pc, #24]	; (8005730 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x50>)
 8005718:	4a06      	ldr	r2, [pc, #24]	; (8005734 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x54>)
 800571a:	2160      	movs	r1, #96	; 0x60
 800571c:	4806      	ldr	r0, [pc, #24]	; (8005738 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x58>)
 800571e:	f018 fa51 	bl	801dbc4 <__assert_func>
 8005722:	bf00      	nop
    }
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	bd90      	pop	{r4, r7, pc}
 800572e:	bf00      	nop
 8005730:	0801fcec 	.word	0x0801fcec
 8005734:	080201b8 	.word	0x080201b8
 8005738:	0802003c 	.word	0x0802003c

0800573c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4618      	mov	r0, r3
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
 8005752:	b580      	push	{r7, lr}
 8005754:	b082      	sub	sp, #8
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f001 f961 	bl	8006a22 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff ffed 	bl	8005752 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8005782:	b580      	push	{r7, lr}
 8005784:	b082      	sub	sp, #8
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	6039      	str	r1, [r7, #0]
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff ffec 	bl	800576a <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4618      	mov	r0, r3
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>:
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b082      	sub	sp, #8
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f001 f92e 	bl	8006a38 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>:
class dense_product_base
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7ff ffed 	bl	80057ce <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80057fe:	b580      	push	{r7, lr}
 8005800:	b082      	sub	sp, #8
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7ff ffed 	bl	80057e6 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005816:	b580      	push	{r7, lr}
 8005818:	b082      	sub	sp, #8
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff faac 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005828:	4603      	mov	r3, r0
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff fa9e 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005844:	4603      	mov	r3, r0
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005850:	b590      	push	{r4, r7, lr}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f7ff ffce 	bl	80057fe <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	e892 0003 	ldmia.w	r2, {r0, r1}
 800586a:	e883 0003 	stmia.w	r3, {r0, r1}
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	3308      	adds	r3, #8
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005878:	68b8      	ldr	r0, [r7, #8]
 800587a:	f7ff ffcc 	bl	8005816 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800587e:	4604      	mov	r4, r0
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff ffd6 	bl	8005832 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005886:	4603      	mov	r3, r0
 8005888:	429c      	cmp	r4, r3
 800588a:	d005      	beq.n	8005898 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x48>
 800588c:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x54>)
 800588e:	4a06      	ldr	r2, [pc, #24]	; (80058a8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x58>)
 8005890:	2160      	movs	r1, #96	; 0x60
 8005892:	4806      	ldr	r0, [pc, #24]	; (80058ac <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x5c>)
 8005894:	f018 f996 	bl	801dbc4 <__assert_func>
 8005898:	bf00      	nop
    }
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd90      	pop	{r4, r7, pc}
 80058a4:	0801fcec 	.word	0x0801fcec
 80058a8:	080202e0 	.word	0x080202e0
 80058ac:	0802003c 	.word	0x0802003c

080058b0 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>:
  EIGEN_EMPTY_STRUCT_CTOR(scalar_sum_op)
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f001 f8b2 	bl	8006a4e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4618      	mov	r0, r3
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff ffed 	bl	80058dc <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4618      	mov	r0, r3
 8005918:	f001 f8a4 	bl	8006a64 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800591c:	4603      	mov	r3, r0
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005926:	b580      	push	{r7, lr}
 8005928:	b082      	sub	sp, #8
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3308      	adds	r3, #8
 8005932:	4618      	mov	r0, r3
 8005934:	f001 f8a4 	bl	8006a80 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005938:	4603      	mov	r3, r0
 800593a:	4618      	mov	r0, r3
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005944:	b590      	push	{r4, r7, lr}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7ff ffce 	bl	80058f4 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	ca07      	ldmia	r2, {r0, r1, r2}
 800595e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	60da      	str	r2, [r3, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3310      	adds	r3, #16
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f000 f828 	bl	80059c4 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005974:	68b8      	ldr	r0, [r7, #8]
 8005976:	f7ff ffc9 	bl	800590c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 800597a:	4604      	mov	r4, r0
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4618      	mov	r0, r3
 8005980:	f7ff fa09 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005984:	4603      	mov	r3, r0
 8005986:	429c      	cmp	r4, r3
 8005988:	d10a      	bne.n	80059a0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x5c>
 800598a:	68b8      	ldr	r0, [r7, #8]
 800598c:	f7ff ffcb 	bl	8005926 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005990:	4604      	mov	r4, r0
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff f9f3 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800599a:	4603      	mov	r3, r0
 800599c:	429c      	cmp	r4, r3
 800599e:	d005      	beq.n	80059ac <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x68>
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x74>)
 80059a2:	4a06      	ldr	r2, [pc, #24]	; (80059bc <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x78>)
 80059a4:	2174      	movs	r1, #116	; 0x74
 80059a6:	4806      	ldr	r0, [pc, #24]	; (80059c0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x7c>)
 80059a8:	f018 f90c 	bl	801dbc4 <__assert_func>
    }
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd90      	pop	{r4, r7, pc}
 80059b6:	bf00      	nop
 80059b8:	0801fa2c 	.word	0x0801fa2c
 80059bc:	0802048c 	.word	0x0802048c
 80059c0:	0801fc90 	.word	0x0801fc90

080059c4 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>:
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 80059dc:	b590      	push	{r4, r7, lr}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff fea8 	bl	800573c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80059ec:	4604      	mov	r4, r0
 80059ee:	6838      	ldr	r0, [r7, #0]
 80059f0:	f001 f854 	bl	8006a9c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>
 80059f4:	4603      	mov	r3, r0
 80059f6:	4619      	mov	r1, r3
 80059f8:	4620      	mov	r0, r4
 80059fa:	f001 f85a 	bl	8006ab2 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>
      return this->derived();
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff fe9c 	bl	800573c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005a04:	4603      	mov	r3, r0
    }
 8005a06:	4618      	mov	r0, r3
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd90      	pop	{r4, r7, pc}

08005a0e <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f001 f855 	bl	8006adc <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4618      	mov	r0, r3
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff ffed 	bl	8005a24 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff ffec 	bl	8005a3c <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f001 f82d 	bl	8006af2 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>:
class dense_product_base
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff ffed 	bl	8005a8a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b082      	sub	sp, #8
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff ffed 	bl	8005aa2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff fb10 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005af0:	b590      	push	{r4, r7, lr}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f7ff ffdc 	bl	8005aba <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff f933 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff ffd8 	bl	8005ad2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005b22:	4603      	mov	r3, r0
 8005b24:	429c      	cmp	r4, r3
 8005b26:	d005      	beq.n	8005b34 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x44>
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x50>)
 8005b2a:	4a06      	ldr	r2, [pc, #24]	; (8005b44 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x54>)
 8005b2c:	2160      	movs	r1, #96	; 0x60
 8005b2e:	4806      	ldr	r0, [pc, #24]	; (8005b48 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x58>)
 8005b30:	f018 f848 	bl	801dbc4 <__assert_func>
 8005b34:	bf00      	nop
    }
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd90      	pop	{r4, r7, pc}
 8005b40:	0801fcec 	.word	0x0801fcec
 8005b44:	08020700 	.word	0x08020700
 8005b48:	0802003c 	.word	0x0802003c

08005b4c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4618      	mov	r0, r3
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 ffcc 	bl	8006b08 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>:
class dense_product_base
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff ffed 	bl	8005b62 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b082      	sub	sp, #8
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff ffed 	bl	8005b7a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005bac:	b590      	push	{r4, r7, lr}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f7ff ffea 	bl	8005b92 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7ff fa99 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff f8dd 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	429c      	cmp	r4, r3
 8005be0:	d005      	beq.n	8005bee <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 8005be2:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005be4:	4a06      	ldr	r2, [pc, #24]	; (8005c00 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 8005be6:	2160      	movs	r1, #96	; 0x60
 8005be8:	4806      	ldr	r0, [pc, #24]	; (8005c04 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005bea:	f017 ffeb 	bl	801dbc4 <__assert_func>
 8005bee:	bf00      	nop
    }
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd90      	pop	{r4, r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	0801fcec 	.word	0x0801fcec
 8005c00:	0802084c 	.word	0x0802084c
 8005c04:	0802003c 	.word	0x0802003c

08005c08 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>:
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 ff79 	bl	8006b1e <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b082      	sub	sp, #8
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff ffed 	bl	8005c1e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7ff ffed 	bl	8005c36 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b082      	sub	sp, #8
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff f884 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005c84:	b590      	push	{r4, r7, lr}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f7ff ffdc 	bl	8005c4e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c9e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6812      	ldr	r2, [r2, #0]
 8005caa:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005cac:	68b8      	ldr	r0, [r7, #8]
 8005cae:	f7ff ffda 	bl	8005c66 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff ff0c 	bl	8005ad2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	429c      	cmp	r4, r3
 8005cbe:	d005      	beq.n	8005ccc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x48>
 8005cc0:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x54>)
 8005cc2:	4a06      	ldr	r2, [pc, #24]	; (8005cdc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x58>)
 8005cc4:	2160      	movs	r1, #96	; 0x60
 8005cc6:	4806      	ldr	r0, [pc, #24]	; (8005ce0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x5c>)
 8005cc8:	f017 ff7c 	bl	801dbc4 <__assert_func>
 8005ccc:	bf00      	nop
    }
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd90      	pop	{r4, r7, pc}
 8005cd8:	0801fcec 	.word	0x0801fcec
 8005cdc:	08020974 	.word	0x08020974
 8005ce0:	0802003c 	.word	0x0802003c

08005ce4 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4618      	mov	r0, r3
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 ff0b 	bl	8006b34 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4618      	mov	r0, r3
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff ffed 	bl	8005d10 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fefd 	bl	8006b4a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8005d50:	4603      	mov	r3, r0
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b082      	sub	sp, #8
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	3308      	adds	r3, #8
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fefd 	bl	8006b66 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b082      	sub	sp, #8
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	f000 ff00 	bl	8006b82 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 8005d82:	4603      	mov	r3, r0
 8005d84:	4618      	mov	r0, r3
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	f000 fefd 	bl	8006b92 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005da4:	b590      	push	{r4, r7, lr}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff ffb8 	bl	8005d28 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8005dbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	60da      	str	r2, [r3, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3310      	adds	r3, #16
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff fdf8 	bl	80059c4 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005dd4:	68b8      	ldr	r0, [r7, #8]
 8005dd6:	f7ff ffb3 	bl	8005d40 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8005dda:	4604      	mov	r4, r0
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7ff ffc9 	bl	8005d76 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8005de4:	4603      	mov	r3, r0
 8005de6:	429c      	cmp	r4, r3
 8005de8:	d10a      	bne.n	8005e00 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x5c>
 8005dea:	68b8      	ldr	r0, [r7, #8]
 8005dec:	f7ff ffb5 	bl	8005d5a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005df0:	4604      	mov	r4, r0
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff ffc9 	bl	8005d8c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	429c      	cmp	r4, r3
 8005dfe:	d005      	beq.n	8005e0c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x68>
 8005e00:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x74>)
 8005e02:	4a06      	ldr	r2, [pc, #24]	; (8005e1c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x78>)
 8005e04:	2174      	movs	r1, #116	; 0x74
 8005e06:	4806      	ldr	r0, [pc, #24]	; (8005e20 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x7c>)
 8005e08:	f017 fedc 	bl	801dbc4 <__assert_func>
    }
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd90      	pop	{r4, r7, pc}
 8005e16:	bf00      	nop
 8005e18:	0801fa2c 	.word	0x0801fa2c
 8005e1c:	08020b20 	.word	0x08020b20
 8005e20:	0801fc90 	.word	0x0801fc90

08005e24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>:
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff ff7b 	bl	8005d40 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8005e4a:	4603      	mov	r3, r0
    }
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff ff7b 	bl	8005d5a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005e64:	4603      	mov	r3, r0
    }
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b082      	sub	sp, #8
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fe93 	bl	8006ba2 <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>:
  XprTypeNested m_xpr;
};

// Generic API dispatcher
template<typename XprType, typename StorageKind>
class InverseImpl
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b082      	sub	sp, #8
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7ff ffed 	bl	8005e6e <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit EIGEN_DEVICE_FUNC Inverse(const XprType &xpr)
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b082      	sub	sp, #8
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]
    : m_xpr(xpr)
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff ffec 	bl	8005e86 <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe fc9b 	bl	80047ee <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
  {}
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>:
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>:
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b082      	sub	sp, #8
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fe5e 	bl	8006bb8 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>:
class dense_product_base
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b082      	sub	sp, #8
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7ff ffed 	bl	8005eee <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff ffed 	bl	8005f06 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b082      	sub	sp, #8
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3304      	adds	r3, #4
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 fe0f 	bl	8006b66 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index rows() const EIGEN_NOEXCEPT { return m_xpr.cols(); }
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b082      	sub	sp, #8
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff ff79 	bl	8005e54 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005f62:	4603      	mov	r3, r0
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005f6c:	b590      	push	{r4, r7, lr}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f7ff ffd0 	bl	8005f1e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f86:	e883 0003 	stmia.w	r3, {r0, r1}
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fe fc71 	bl	8004878 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 8005f96:	68b8      	ldr	r0, [r7, #8]
 8005f98:	f7ff ffcd 	bl	8005f36 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff ffd7 	bl	8005f52 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	429c      	cmp	r4, r3
 8005fa8:	d005      	beq.n	8005fb6 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x4a>
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x58>)
 8005fac:	4a06      	ldr	r2, [pc, #24]	; (8005fc8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x5c>)
 8005fae:	2160      	movs	r1, #96	; 0x60
 8005fb0:	4806      	ldr	r0, [pc, #24]	; (8005fcc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x60>)
 8005fb2:	f017 fe07 	bl	801dbc4 <__assert_func>
 8005fb6:	bf00      	nop
    }
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd90      	pop	{r4, r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	0801fcec 	.word	0x0801fcec
 8005fc8:	08020d94 	.word	0x08020d94
 8005fcc:	0802003c 	.word	0x0802003c

08005fd0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005fd0:	b590      	push	{r4, r7, lr}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff fa12 	bl	8005404 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005fe0:	4604      	mov	r4, r0
 8005fe2:	6838      	ldr	r0, [r7, #0]
 8005fe4:	f000 fdf3 	bl	8006bce <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	4619      	mov	r1, r3
 8005fec:	4620      	mov	r0, r4
 8005fee:	f000 fdf9 	bl	8006be4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>
      return this->derived();
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7ff fa06 	bl	8005404 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005ff8:	4603      	mov	r3, r0
    }
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd90      	pop	{r4, r7, pc}

08006002 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 8006002:	b580      	push	{r7, lr}
 8006004:	b082      	sub	sp, #8
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fdff 	bl	8006c0e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff ffed 	bl	8006002 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff ffed 	bl	800601a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800604c:	b590      	push	{r4, r7, lr}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff ffea 	bl	8006032 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff f849 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8006072:	4604      	mov	r4, r0
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe ff33 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800607c:	4603      	mov	r3, r0
 800607e:	429c      	cmp	r4, r3
 8006080:	d005      	beq.n	800608e <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 8006082:	4b06      	ldr	r3, [pc, #24]	; (800609c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 8006084:	4a06      	ldr	r2, [pc, #24]	; (80060a0 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 8006086:	2160      	movs	r1, #96	; 0x60
 8006088:	4806      	ldr	r0, [pc, #24]	; (80060a4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 800608a:	f017 fd9b 	bl	801dbc4 <__assert_func>
 800608e:	bf00      	nop
    }
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	bd90      	pop	{r4, r7, pc}
 800609a:	bf00      	nop
 800609c:	0801fcec 	.word	0x0801fcec
 80060a0:	0802111c 	.word	0x0802111c
 80060a4:	0802003c 	.word	0x0802003c

080060a8 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4618      	mov	r0, r3
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_difference_op : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_difference_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_difference_op)
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fda1 	bl	8006c24 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4618      	mov	r0, r3
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff ffed 	bl	80060d4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff f802 	bl	800511a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006116:	4603      	mov	r3, r0
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	4618      	mov	r0, r3
 800612e:	f7fe fecd 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006132:	4603      	mov	r3, r0
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800613c:	b590      	push	{r4, r7, lr}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
 8006148:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f7ff ffce 	bl	80060ec <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3304      	adds	r3, #4
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006160:	e883 0003 	stmia.w	r3, {r0, r1}
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	330c      	adds	r3, #12
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f000 f828 	bl	80061c0 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff fdff 	bl	8005d76 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8006178:	4604      	mov	r4, r0
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff ffc2 	bl	8006104 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 8006180:	4603      	mov	r3, r0
 8006182:	429c      	cmp	r4, r3
 8006184:	d10a      	bne.n	800619c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff fdff 	bl	8005d8c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800618e:	4604      	mov	r4, r0
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff ffc5 	bl	8006120 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 8006196:	4603      	mov	r3, r0
 8006198:	429c      	cmp	r4, r3
 800619a:	d005      	beq.n	80061a8 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 800619c:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 800619e:	4a06      	ldr	r2, [pc, #24]	; (80061b8 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 80061a0:	2174      	movs	r1, #116	; 0x74
 80061a2:	4806      	ldr	r0, [pc, #24]	; (80061bc <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 80061a4:	f017 fd0e 	bl	801dbc4 <__assert_func>
    }
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd90      	pop	{r4, r7, pc}
 80061b2:	bf00      	nop
 80061b4:	0801fa2c 	.word	0x0801fa2c
 80061b8:	08021244 	.word	0x08021244
 80061bc:	0801fc90 	.word	0x0801fc90

080061c0 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>:
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4618      	mov	r0, r3
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>:
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4618      	mov	r0, r3
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fd1f 	bl	8006c3a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>:
class dense_product_base
 8006206:	b580      	push	{r7, lr}
 8006208:	b082      	sub	sp, #8
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff ffed 	bl	80061ee <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff ffed 	bl	8006206 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8006236:	b580      	push	{r7, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff fd97 	bl	8005d76 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8006248:	4603      	mov	r3, r0
    }
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006254:	b590      	push	{r4, r7, lr}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f7ff ffdc 	bl	800621e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3304      	adds	r3, #4
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	4618      	mov	r0, r3
 8006274:	f7fe fb6b 	bl	800494e <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4618      	mov	r0, r3
 800627c:	f7fe fe26 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006280:	4604      	mov	r4, r0
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff ffd7 	bl	8006236 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 8006288:	4603      	mov	r3, r0
 800628a:	429c      	cmp	r4, r3
 800628c:	d005      	beq.n	800629a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x46>
 800628e:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x54>)
 8006290:	4a06      	ldr	r2, [pc, #24]	; (80062ac <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x58>)
 8006292:	2160      	movs	r1, #96	; 0x60
 8006294:	4806      	ldr	r0, [pc, #24]	; (80062b0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x5c>)
 8006296:	f017 fc95 	bl	801dbc4 <__assert_func>
 800629a:	bf00      	nop
    }
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd90      	pop	{r4, r7, pc}
 80062a6:	bf00      	nop
 80062a8:	0801fcec 	.word	0x0801fcec
 80062ac:	0802143c 	.word	0x0802143c
 80062b0:	0802003c 	.word	0x0802003c

080062b4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>:
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4618      	mov	r0, r3
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fcbc 	bl	8006c50 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b082      	sub	sp, #8
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7ff ffed 	bl	80062ca <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b082      	sub	sp, #8
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f7fe fdeb 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800630c:	4603      	mov	r3, r0
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3304      	adds	r3, #4
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fc9f 	bl	8006c66 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 8006328:	4603      	mov	r3, r0
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8006334:	b590      	push	{r4, r7, lr}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f7ff ffcd 	bl	80062e2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3304      	adds	r3, #4
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	4618      	mov	r0, r3
 8006356:	f7fe fb30 	bl	80049ba <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	3318      	adds	r3, #24
 800635e:	6839      	ldr	r1, [r7, #0]
 8006360:	4618      	mov	r0, r3
 8006362:	f7ff fb2f 	bl	80059c4 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	4618      	mov	r0, r3
 800636a:	f7fe fdba 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800636e:	4604      	mov	r4, r0
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff ffc2 	bl	80062fa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 8006376:	4603      	mov	r3, r0
 8006378:	429c      	cmp	r4, r3
 800637a:	d10a      	bne.n	8006392 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x5e>
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4618      	mov	r0, r3
 8006380:	f7fe fda4 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006384:	4604      	mov	r4, r0
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff ffc5 	bl	8006316 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 800638c:	4603      	mov	r3, r0
 800638e:	429c      	cmp	r4, r3
 8006390:	d005      	beq.n	800639e <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x6a>
 8006392:	4b05      	ldr	r3, [pc, #20]	; (80063a8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x74>)
 8006394:	4a05      	ldr	r2, [pc, #20]	; (80063ac <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x78>)
 8006396:	2174      	movs	r1, #116	; 0x74
 8006398:	4805      	ldr	r0, [pc, #20]	; (80063b0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x7c>)
 800639a:	f017 fc13 	bl	801dbc4 <__assert_func>
    }
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4618      	mov	r0, r3
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd90      	pop	{r4, r7, pc}
 80063a8:	0801fa2c 	.word	0x0801fa2c
 80063ac:	080216a8 	.word	0x080216a8
 80063b0:	0801fc90 	.word	0x0801fc90

080063b4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 80063b4:	b590      	push	{r4, r7, lr}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff f820 	bl	8005404 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80063c4:	4604      	mov	r4, r0
 80063c6:	6838      	ldr	r0, [r7, #0]
 80063c8:	f000 fc5b 	bl	8006c82 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 80063cc:	4603      	mov	r3, r0
 80063ce:	4619      	mov	r1, r3
 80063d0:	4620      	mov	r0, r4
 80063d2:	f000 fc61 	bl	8006c98 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>
      return this->derived();
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff f814 	bl	8005404 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80063dc:	4603      	mov	r3, r0
    }
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd90      	pop	{r4, r7, pc}

080063e6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b082      	sub	sp, #8
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fc67 	bl	8006cc2 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4618      	mov	r0, r3
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>:
class dense_product_base
 80063fe:	b580      	push	{r7, lr}
 8006400:	b082      	sub	sp, #8
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7ff ffed 	bl	80063e6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7ff ffed 	bl	80063fe <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
	...

08006430 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006430:	b590      	push	{r4, r7, lr}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f7ff ffea 	bl	8006416 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	4618      	mov	r0, r3
 8006452:	f7fe fd3b 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006456:	4604      	mov	r4, r0
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4618      	mov	r0, r3
 800645c:	f7fe fe5d 	bl	800511a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006460:	4603      	mov	r3, r0
 8006462:	429c      	cmp	r4, r3
 8006464:	d005      	beq.n	8006472 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 8006466:	4b06      	ldr	r3, [pc, #24]	; (8006480 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8006468:	4a06      	ldr	r2, [pc, #24]	; (8006484 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 800646a:	2160      	movs	r1, #96	; 0x60
 800646c:	4806      	ldr	r0, [pc, #24]	; (8006488 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 800646e:	f017 fba9 	bl	801dbc4 <__assert_func>
 8006472:	bf00      	nop
    }
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	bd90      	pop	{r4, r7, pc}
 800647e:	bf00      	nop
 8006480:	0801fcec 	.word	0x0801fcec
 8006484:	080219dc 	.word	0x080219dc
 8006488:	0802003c 	.word	0x0802003c

0800648c <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>:
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4618      	mov	r0, r3
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b082      	sub	sp, #8
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fc14 	bl	8006cd8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff ffed 	bl	80064a2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b082      	sub	sp, #8
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fcff 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80064e4:	4603      	mov	r3, r0
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b082      	sub	sp, #8
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe fe02 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8006500:	4603      	mov	r3, r0
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
	...

0800650c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800650c:	b590      	push	{r4, r7, lr}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
 8006518:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f7ff ffcd 	bl	80064ba <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3304      	adds	r3, #4
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006530:	e883 0003 	stmia.w	r3, {r0, r1}
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	330c      	adds	r3, #12
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff fe40 	bl	80061c0 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe fc27 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006548:	4604      	mov	r4, r0
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff ffc1 	bl	80064d2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 8006550:	4603      	mov	r3, r0
 8006552:	429c      	cmp	r4, r3
 8006554:	d10a      	bne.n	800656c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4618      	mov	r0, r3
 800655a:	f7fe fc11 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800655e:	4604      	mov	r4, r0
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7ff ffc4 	bl	80064ee <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 8006566:	4603      	mov	r3, r0
 8006568:	429c      	cmp	r4, r3
 800656a:	d005      	beq.n	8006578 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 800656c:	4b05      	ldr	r3, [pc, #20]	; (8006584 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 800656e:	4a06      	ldr	r2, [pc, #24]	; (8006588 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 8006570:	2174      	movs	r1, #116	; 0x74
 8006572:	4806      	ldr	r0, [pc, #24]	; (800658c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 8006574:	f017 fb26 	bl	801dbc4 <__assert_func>
    }
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	bd90      	pop	{r4, r7, pc}
 8006582:	bf00      	nop
 8006584:	0801fa2c 	.word	0x0801fa2c
 8006588:	08021b04 	.word	0x08021b04
 800658c:	0801fc90 	.word	0x0801fc90

08006590 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>:
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4618      	mov	r0, r3
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fb9d 	bl	8006cee <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>:
class dense_product_base
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff ffed 	bl	80065a6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff ffed 	bl	80065be <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b082      	sub	sp, #8
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe fbc0 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006600:	4603      	mov	r3, r0
    }
 8006602:	4618      	mov	r0, r3
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800660c:	b590      	push	{r4, r7, lr}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f7ff ffdc 	bl	80065d6 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	68b9      	ldr	r1, [r7, #8]
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe fa41 	bl	8004aaa <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 800662e:	68b8      	ldr	r0, [r7, #8]
 8006630:	f7ff ffdd 	bl	80065ee <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8006634:	4604      	mov	r4, r0
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4618      	mov	r0, r3
 800663a:	f7fe fbac 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800663e:	4603      	mov	r3, r0
 8006640:	429c      	cmp	r4, r3
 8006642:	d005      	beq.n	8006650 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x44>
 8006644:	4b05      	ldr	r3, [pc, #20]	; (800665c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x50>)
 8006646:	4a06      	ldr	r2, [pc, #24]	; (8006660 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x54>)
 8006648:	2160      	movs	r1, #96	; 0x60
 800664a:	4806      	ldr	r0, [pc, #24]	; (8006664 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x58>)
 800664c:	f017 faba 	bl	801dbc4 <__assert_func>
 8006650:	bf00      	nop
    }
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	bd90      	pop	{r4, r7, pc}
 800665c:	0801fcec 	.word	0x0801fcec
 8006660:	08021cfc 	.word	0x08021cfc
 8006664:	0802003c 	.word	0x0802003c

08006668 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8006668:	b590      	push	{r4, r7, lr}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff f862 	bl	800573c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006678:	4604      	mov	r4, r0
 800667a:	6838      	ldr	r0, [r7, #0]
 800667c:	f000 fb42 	bl	8006d04 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 8006680:	4603      	mov	r3, r0
 8006682:	4619      	mov	r1, r3
 8006684:	4620      	mov	r0, r4
 8006686:	f000 fb48 	bl	8006d1a <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff f856 	bl	800573c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006690:	4603      	mov	r3, r0
    }
 8006692:	4618      	mov	r0, r3
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	bd90      	pop	{r4, r7, pc}

0800669a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    }

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(DenseBase)
    /** Default constructor. Do nothing. */
    EIGEN_DEVICE_FUNC DenseBase()
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
#ifdef EIGEN_INTERNAL_DEBUGGING
      EIGEN_STATIC_ASSERT((EIGEN_IMPLIES(MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1, int(IsRowMajor))
                        && EIGEN_IMPLIES(MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1, int(!IsRowMajor))),
                          INVALID_STORAGE_ORDER_FOR_THIS_VECTOR_EXPRESSION)
#endif
    }
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4618      	mov	r0, r3
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>:
// purely fixed-size matrix
template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage
{
    internal::plain_array<T,Size,_Options> m_data;
  public:
    EIGEN_DEVICE_FUNC DenseStorage() {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 fb42 	bl	8006d44 <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>
      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
    }
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4618      	mov	r0, r3
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
    }
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4618      	mov	r0, r3
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fb35 	bl	8006d5a <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>
    }
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
    }
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4618      	mov	r0, r3
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fb28 	bl	8006d70 <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>
    }
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4618      	mov	r0, r3
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
    }
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4618      	mov	r0, r3
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fb1b 	bl	8006d86 <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>
    }
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>:
    }
    EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
      numext::swap(m_data, other.m_data);
    }
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 800675a:	b480      	push	{r7}
 800675c:	af00      	add	r7, sp, #0
 800675e:	2303      	movs	r3, #3
 8006760:	4618      	mov	r0, r3
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 800676a:	b480      	push	{r7}
 800676c:	af00      	add	r7, sp, #0
 800676e:	2303      	movs	r3, #3
 8006770:	4618      	mov	r0, r3
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC void conservativeResize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4618      	mov	r0, r3
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
 8006794:	2301      	movs	r3, #1
 8006796:	4618      	mov	r0, r3
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	2303      	movs	r3, #3
 80067a6:	4618      	mov	r0, r3
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 80067c6:	b590      	push	{r4, r7, lr}
 80067c8:	b085      	sub	sp, #20
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 fae1 	bl	8006d9c <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 80067da:	4604      	mov	r4, r0
 80067dc:	f000 f9d1 	bl	8006b82 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 80067e0:	4602      	mov	r2, r0
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	fb03 f202 	mul.w	r2, r3, r2
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4413      	add	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4423      	add	r3, r4
    }
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd90      	pop	{r4, r7, pc}

080067f8 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 80067f8:	b480      	push	{r7}
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	2303      	movs	r3, #3
 80067fe:	4618      	mov	r0, r3
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
 800680c:	2301      	movs	r3, #1
 800680e:	4618      	mov	r0, r3
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>:

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  evaluator() {}

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit evaluator(const XprType& m)
 800682e:	b580      	push	{r7, lr}
 8006830:	b082      	sub	sp, #8
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	4611      	mov	r1, r2
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fab7 	bl	8006db2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
  { }
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4618      	mov	r0, r3
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 8006864:	b590      	push	{r4, r7, lr}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681c      	ldr	r4, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4618      	mov	r0, r3
 8006878:	f000 fab2 	bl	8006de0 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 800687c:	4602      	mov	r2, r0
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	fb03 f202 	mul.w	r2, r3, r2
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4423      	add	r3, r4
  }
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	bd90      	pop	{r4, r7, pc}

08006894 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
    }
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4618      	mov	r0, r3
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
	...

080068ac <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>:
  */
template<typename T, int Value> class variable_if_dynamic
{
  public:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(variable_if_dynamic)
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d005      	beq.n	80068c8 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x1c>
 80068bc:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x28>)
 80068be:	4a06      	ldr	r2, [pc, #24]	; (80068d8 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x2c>)
 80068c0:	2185      	movs	r1, #133	; 0x85
 80068c2:	4806      	ldr	r0, [pc, #24]	; (80068dc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x30>)
 80068c4:	f017 f97e 	bl	801dbc4 <__assert_func>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	08021f68 	.word	0x08021f68
 80068d8:	08021f78 	.word	0x08021f78
 80068dc:	08021fe0 	.word	0x08021fe0

080068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>:
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d005      	beq.n	80068fc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x1c>
 80068f0:	4b05      	ldr	r3, [pc, #20]	; (8006908 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x28>)
 80068f2:	4a06      	ldr	r2, [pc, #24]	; (800690c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x2c>)
 80068f4:	2185      	movs	r1, #133	; 0x85
 80068f6:	4806      	ldr	r0, [pc, #24]	; (8006910 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x30>)
 80068f8:	f017 f964 	bl	801dbc4 <__assert_func>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	08021f68 	.word	0x08021f68
 800690c:	0802203c 	.word	0x0802203c
 8006910:	08021fe0 	.word	0x08021fe0

08006914 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
    }
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>:
    EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    T value() { return T(Value); }
 800692a:	b480      	push	{r7}
 800692c:	af00      	add	r7, sp, #0
 800692e:	2303      	movs	r3, #3
 8006930:	4618      	mov	r0, r3
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>:
 800693a:	b480      	push	{r7}
 800693c:	af00      	add	r7, sp, #0
 800693e:	2301      	movs	r3, #1
 8006940:	4618      	mov	r0, r3
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800694a:	b480      	push	{r7}
 800694c:	b083      	sub	sp, #12
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
    }
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4618      	mov	r0, r3
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
    }
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4618      	mov	r0, r3
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>:
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4618      	mov	r0, r3
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>:
// So this intermediate function removes everything related to "assume-aliasing" such that Assignment
// does not has to bother about these annoying details.

template<typename Dst, typename Src>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src)
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
{
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006996:	f107 030c 	add.w	r3, r7, #12
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fa2b 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80069a0:	f107 020c 	add.w	r2, r7, #12
 80069a4:	2300      	movs	r3, #0
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fa2f 	bl	8006e0c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>
}
 80069ae:	bf00      	nop
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
    }
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4618      	mov	r0, r3
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 80069ec:	f107 030c 	add.w	r3, r7, #12
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fa00 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80069f6:	f107 020c 	add.w	r2, r7, #12
 80069fa:	2300      	movs	r3, #0
 80069fc:	6839      	ldr	r1, [r7, #0]
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fa1c 	bl	8006e3c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>
}
 8006a04:	bf00      	nop
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
    }
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4618      	mov	r0, r3
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
    }
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
    }
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
    }
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fe f990 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006a76:	4603      	mov	r3, r0
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fe f982 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006a92:	4603      	mov	r3, r0
 8006a94:	4618      	mov	r0, r3
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>:
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b084      	sub	sp, #16
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006abc:	f107 030c 	add.w	r3, r7, #12
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 f998 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006ac6:	f107 020c 	add.w	r2, r7, #12
 8006aca:	2300      	movs	r3, #0
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f9cc 	bl	8006e6c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 8006ad4:	bf00      	nop
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
    }
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
    }
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4618      	mov	r0, r3
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
    }
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4618      	mov	r0, r3
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
    }
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
    }
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>:
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fe fadf 	bl	800511a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fad1 	bl	800511a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006b82:	b480      	push	{r7}
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	2301      	movs	r3, #1
 8006b88:	4618      	mov	r0, r3
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006b92:	b480      	push	{r7}
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	2301      	movs	r3, #1
 8006b98:	4618      	mov	r0, r3
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
    }
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
    }
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>:
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006bee:	f107 030c 	add.w	r3, r7, #12
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 f8ff 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006bf8:	f107 020c 	add.w	r2, r7, #12
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f943 	bl	8006e8c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>
}
 8006c06:	bf00      	nop
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
    }
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
    }
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
    }
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
    }
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b082      	sub	sp, #8
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7ff f88a 	bl	8005d8c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8006c78:	4603      	mov	r3, r0
    }
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>:
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006ca2:	f107 030c 	add.w	r3, r7, #12
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 f8a5 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006cac:	f107 020c 	add.w	r2, r7, #12
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f901 	bl	8006ebc <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>
}
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
    }
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
    }
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
    }
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>:
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006d24:	f107 030c 	add.w	r3, r7, #12
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 f864 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006d2e:	f107 020c 	add.w	r2, r7, #12
 8006d32:	2300      	movs	r3, #0
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f8d8 	bl	8006eec <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 8006d3c:	bf00      	nop
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>:
  plain_array()
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006d4c:	f000 f8e6 	bl	8006f1c <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>:
  plain_array()
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006d62:	f000 f8e2 	bl	8006f2a <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>
  }
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>:
  plain_array()
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006d78:	f000 f8de 	bl	8006f38 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>:
  plain_array()
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006d8e:	f000 f8d3 	bl	8006f38 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8006db2:	b590      	push	{r4, r7, lr}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f8cf 	bl	8006f60 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8006dc2:	687c      	ldr	r4, [r7, #4]
 8006dc4:	6838      	ldr	r0, [r7, #0]
 8006dc6:	f000 f8be 	bl	8006f46 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 f8d0 	bl	8006f76 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd90      	pop	{r4, r7, pc}

08006de0 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	2300      	movs	r3, #0
 8006dea:	4618      	mov	r0, r3
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4618      	mov	r0, r3
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>:
}

// Deal with "assume-aliasing"
template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b08e      	sub	sp, #56	; 0x38
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
{
  typename plain_matrix_type<Src>::type tmp(src);
 8006e1a:	f107 0314 	add.w	r3, r7, #20
 8006e1e:	68b9      	ldr	r1, [r7, #8]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 f8ba 	bl	8006f9a <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006e26:	f107 0314 	add.w	r3, r7, #20
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 f8c8 	bl	8006fc4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006e34:	bf00      	nop
 8006e36:	3738      	adds	r7, #56	; 0x38
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8006e4a:	f107 0314 	add.w	r3, r7, #20
 8006e4e:	68b9      	ldr	r1, [r7, #8]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 f8c8 	bl	8006fe6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006e56:	f107 0314 	add.w	r3, r7, #20
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 f8d6 	bl	8007010 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006e64:	bf00      	nop
 8006e66:	3720      	adds	r7, #32
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:

template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if<!evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	603b      	str	r3, [r7, #0]
{
  call_assignment_no_alias(dst, src, func);
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	68b9      	ldr	r1, [r7, #8]
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 f8d7 	bl	8007032 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006e84:	bf00      	nop
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8006e9a:	f107 0314 	add.w	r3, r7, #20
 8006e9e:	68b9      	ldr	r1, [r7, #8]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 f8d7 	bl	8007054 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006ea6:	f107 0314 	add.w	r3, r7, #20
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4619      	mov	r1, r3
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 f8ae 	bl	8007010 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006eb4:	bf00      	nop
 8006eb6:	3720      	adds	r7, #32
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b088      	sub	sp, #32
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8006eca:	f107 0314 	add.w	r3, r7, #20
 8006ece:	68b9      	ldr	r1, [r7, #8]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 f8d4 	bl	800707e <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006ed6:	f107 0314 	add.w	r3, r7, #20
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	4619      	mov	r1, r3
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 f896 	bl	8007010 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006ee4:	bf00      	nop
 8006ee6:	3720      	adds	r7, #32
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b08e      	sub	sp, #56	; 0x38
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8006efa:	f107 0314 	add.w	r3, r7, #20
 8006efe:	68b9      	ldr	r1, [r7, #8]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 f8d1 	bl	80070a8 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006f06:	f107 0314 	add.w	r3, r7, #20
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 f858 	bl	8006fc4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006f14:	bf00      	nop
 8006f16:	3738      	adds	r7, #56	; 0x38
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>:
void check_static_allocation_size()
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
}
 8006f20:	bf00      	nop
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>:
void check_static_allocation_size()
 8006f2a:	b480      	push	{r7}
 8006f2c:	af00      	add	r7, sp, #0
}
 8006f2e:	bf00      	nop
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>:
void check_static_allocation_size()
 8006f38:	b480      	push	{r7}
 8006f3a:	af00      	add	r7, sp, #0
}
 8006f3c:	bf00      	nop
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b082      	sub	sp, #8
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 f8be 	bl	80070d2 <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 8006f56:	4603      	mov	r3, r0
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b084      	sub	sp, #16
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	60f8      	str	r0, [r7, #12]
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	607a      	str	r2, [r7, #4]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 8006f88:	1d3b      	adds	r3, r7, #4
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fd f82d 	bl	8003fea <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>:
#ifndef EIGEN_PARSED_BY_DOXYGEN

    // This constructor is for both 1x1 matrices and dynamic vectors
    template<typename T>
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    explicit Matrix(const T& x)
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	6039      	str	r1, [r7, #0]
    {
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fd fdf3 	bl	8004b92 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8006fac:	f7fd fe01 	bl	8004bb2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 f8a3 	bl	8007100 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
}


template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
                      ) && int(Dst::SizeAtCompileTime) != 1
  };

  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst>::type ActualDstTypeCleaned;
  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst&>::type ActualDstType;
  ActualDstType actualDst(dst);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	617b      	str	r3, [r7, #20]
  // TODO check whether this is the right place to perform these checks:
  EIGEN_STATIC_ASSERT_LVALUE(Dst)
  EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(ActualDstTypeCleaned,Src)
  EIGEN_CHECK_BINARY_COMPATIBILIY(Func,typename ActualDstTypeCleaned::Scalar,typename Src::Scalar);

  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	68b9      	ldr	r1, [r7, #8]
 8006fd8:	6978      	ldr	r0, [r7, #20]
 8006fda:	f000 f89e 	bl	800711a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 8006fde:	bf00      	nop
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
    {
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fd fe13 	bl	8004c1e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8006ff8:	f7fd fe21 	bl	8004c3e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	4618      	mov	r0, r3
 8007002:	f000 f89d 	bl	8007140 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>
    }
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4618      	mov	r0, r3
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	6978      	ldr	r0, [r7, #20]
 8007026:	f000 f898 	bl	800715a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 800702a:	bf00      	nop
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007032:	b580      	push	{r7, lr}
 8007034:	b086      	sub	sp, #24
 8007036:	af00      	add	r7, sp, #0
 8007038:	60f8      	str	r0, [r7, #12]
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	68b9      	ldr	r1, [r7, #8]
 8007046:	6978      	ldr	r0, [r7, #20]
 8007048:	f000 f89a 	bl	8007180 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 800704c:	bf00      	nop
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
    {
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4618      	mov	r0, r3
 8007062:	f7fd fddc 	bl	8004c1e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8007066:	f7fd fdea 	bl	8004c3e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	4618      	mov	r0, r3
 8007070:	f000 f899 	bl	80071a6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>
    }
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4618      	mov	r0, r3
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	6039      	str	r1, [r7, #0]
    {
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4618      	mov	r0, r3
 800708c:	f7fd fdc7 	bl	8004c1e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8007090:	f7fd fdd5 	bl	8004c3e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	4618      	mov	r0, r3
 800709a:	f000 f891 	bl	80071c0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>
    }
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
    {
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fd fd6c 	bl	8004b92 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 80070ba:	f7fd fd7a 	bl	8004bb2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 f889 	bl	80071da <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>
    }
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4618      	mov	r0, r3
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>:
    { }

    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f87f 	bl	80071f4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>
 80070f6:	4603      	mov	r3, r0
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f87d 	bl	800720c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8007112:	bf00      	nop
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
// both partial specialization+SFINAE without ambiguous specialization
template< typename DstXprType, typename SrcXprType, typename Functor, typename Weak>
struct Assignment<DstXprType, SrcXprType, Functor, Dense2Dense, Weak>
{
  EIGEN_DEVICE_FUNC
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	607a      	str	r2, [r7, #4]
  {
#ifndef EIGEN_NO_DEBUG
    internal::check_for_aliasing(dst, src);
 8007126:	68b9      	ldr	r1, [r7, #8]
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 f890 	bl	800724e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>
#endif

    call_dense_assignment_loop(dst, src, func);
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	68b9      	ldr	r1, [r7, #8]
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 f8c4 	bl	80072c0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007138:	bf00      	nop
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f8ef 	bl	8007330 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8007152:	bf00      	nop
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	60f8      	str	r0, [r7, #12]
 8007162:	60b9      	str	r1, [r7, #8]
 8007164:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8007166:	68b9      	ldr	r1, [r7, #8]
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 f902 	bl	8007372 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	68b9      	ldr	r1, [r7, #8]
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 f908 	bl	8007388 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007178:	bf00      	nop
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800718c:	68b9      	ldr	r1, [r7, #8]
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 f932 	bl	80073f8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f9ca 	bl	8007532 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800719e:	bf00      	nop
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f9f5 	bl	80075a2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80071b8:	bf00      	nop
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fa09 	bl	80075e4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80071d2:	bf00      	nop
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 80071da:	b580      	push	{r7, lr}
 80071dc:	b082      	sub	sp, #8
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fa1d 	bl	8007626 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80071ec:	bf00      	nop
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fa33 	bl	8007668 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>
 8007202:	4603      	mov	r3, r0
    }
 8007204:	4618      	mov	r0, r3
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800720c:	b5b0      	push	{r4, r5, r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7fe fa90 	bl	800573c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800721c:	4604      	mov	r4, r0
 800721e:	6838      	ldr	r0, [r7, #0]
 8007220:	f7ff fba9 	bl	8006976 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 8007224:	4605      	mov	r5, r0
 8007226:	f107 030c 	add.w	r3, r7, #12
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff fde3 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007230:	f107 030c 	add.w	r3, r7, #12
 8007234:	461a      	mov	r2, r3
 8007236:	4629      	mov	r1, r5
 8007238:	4620      	mov	r0, r4
 800723a:	f000 fa27 	bl	800768c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7fe fa7c 	bl	800573c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007244:	4603      	mov	r3, r0
    }
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bdb0      	pop	{r4, r5, r7, pc}

0800724e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>:
    {
    }
};

template<typename Dst, typename Src>
void check_for_aliasing(const Dst &dst, const Src &src)
 800724e:	b580      	push	{r7, lr}
 8007250:	b082      	sub	sp, #8
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	6039      	str	r1, [r7, #0]
{
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4618      	mov	r0, r3
 800725c:	f7fd fd9b 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007260:	4603      	mov	r3, r0
 8007262:	2b01      	cmp	r3, #1
 8007264:	dd08      	ble.n	8007278 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4618      	mov	r0, r3
 800726a:	f7fd fd89 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800726e:	4603      	mov	r3, r0
 8007270:	2b01      	cmp	r3, #1
 8007272:	dd01      	ble.n	8007278 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 8007274:	2301      	movs	r3, #1
 8007276:	e000      	b.n	800727a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2c>
 8007278:	2300      	movs	r3, #0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fa14 	bl	80076ae <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fa24 	bl	80076e4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b082      	sub	sp, #8
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7ff ffec 	bl	800728e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08c      	sub	sp, #48	; 0x30
 80072c4:	af02      	add	r7, sp, #8
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80072cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072d0:	68b9      	ldr	r1, [r7, #8]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 f9f6 	bl	80076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	68b9      	ldr	r1, [r7, #8]
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f000 fa0d 	bl	80076fc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80072e2:	f107 0320 	add.w	r3, r7, #32
 80072e6:	68f9      	ldr	r1, [r7, #12]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 f9eb 	bl	80076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 fa50 	bl	8007794 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 80072f4:	4603      	mov	r3, r0
 80072f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80072fa:	f107 0120 	add.w	r1, r7, #32
 80072fe:	f107 0010 	add.w	r0, r7, #16
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f000 fa50 	bl	80077aa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800730a:	f107 0310 	add.w	r3, r7, #16
 800730e:	4618      	mov	r0, r3
 8007310:	f000 fa65 	bl	80077de <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 8007314:	f107 0320 	add.w	r3, r7, #32
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff ffc4 	bl	80072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800731e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007322:	4618      	mov	r0, r3
 8007324:	f7ff ffbf 	bl	80072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
}
 8007328:	bf00      	nop
 800732a:	3728      	adds	r7, #40	; 0x28
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8007330:	b5b0      	push	{r4, r5, r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7fe f862 	bl	8005404 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007340:	4604      	mov	r4, r0
 8007342:	6838      	ldr	r0, [r7, #0]
 8007344:	f7ff fb42 	bl	80069cc <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8007348:	4605      	mov	r5, r0
 800734a:	f107 030c 	add.w	r3, r7, #12
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff fd51 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007354:	f107 030c 	add.w	r3, r7, #12
 8007358:	461a      	mov	r2, r3
 800735a:	4629      	mov	r1, r5
 800735c:	4620      	mov	r0, r4
 800735e:	f000 fa49 	bl	80077f4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fe f84e 	bl	8005404 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007368:	4603      	mov	r3, r0
    }
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bdb0      	pop	{r4, r5, r7, pc}

08007372 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	6039      	str	r1, [r7, #0]
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8007388:	b580      	push	{r7, lr}
 800738a:	b08c      	sub	sp, #48	; 0x30
 800738c:	af02      	add	r7, sp, #8
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8007394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	4618      	mov	r0, r3
 800739c:	f7ff fa47 	bl	800682e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	68b9      	ldr	r1, [r7, #8]
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fa37 	bl	8007818 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80073aa:	f107 0320 	add.w	r3, r7, #32
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7ff fa3c 	bl	800682e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 fa7a 	bl	80078b0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 80073bc:	4603      	mov	r3, r0
 80073be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80073c2:	f107 0120 	add.w	r1, r7, #32
 80073c6:	f107 0010 	add.w	r0, r7, #16
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f000 fa7a 	bl	80078c6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80073d2:	f107 0310 	add.w	r3, r7, #16
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 fa8f 	bl	80078fa <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 80073dc:	f107 0320 	add.w	r3, r7, #32
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fd feea 	bl	80051ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80073e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fd fee5 	bl	80051ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
}
 80073f0:	bf00      	nop
 80073f2:	3728      	adds	r7, #40	; 0x28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4618      	mov	r0, r3
 8007406:	f7fd fcc6 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800740a:	4603      	mov	r3, r0
 800740c:	2b01      	cmp	r3, #1
 800740e:	dd08      	ble.n	8007422 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4618      	mov	r0, r3
 8007414:	f7fd fcb4 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007418:	4603      	mov	r3, r0
 800741a:	2b01      	cmp	r3, #1
 800741c:	dd01      	ble.n	8007422 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2c>
 8007422:	2300      	movs	r3, #0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d003      	beq.n	8007430 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8007428:	6839      	ldr	r1, [r7, #0]
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fa70 	bl	8007910 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>
}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fa8a 	bl	800795a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4618      	mov	r0, r3
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff ffec 	bl	8007438 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4618      	mov	r0, r3
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>:
};

// This is the default evaluator implementation for products:
// It creates a temporary and call generic_product_impl
template<typename Lhs, typename Rhs, int Options, int ProductTag, typename LhsShape, typename RhsShape>
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff ffeb 	bl	8007450 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4618      	mov	r0, r3
 8007490:	f7ff ffeb 	bl	800746a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 800749e:	b580      	push	{r7, lr}
 80074a0:	b082      	sub	sp, #8
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff ffeb 	bl	8007484 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4618      	mov	r0, r3
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff feef 	bl	80072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>:
  }

protected:

  // this helper permits to completely eliminate the functor if it is empty
  struct Data
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	332c      	adds	r3, #44	; 0x2c
 80074de:	4618      	mov	r0, r3
 80074e0:	f7ff ffea 	bl	80074b8 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	3304      	adds	r3, #4
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7ff ffd8 	bl	800749e <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4618      	mov	r0, r3
 8007504:	f7ff ffe5 	bl	80074d2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fa1b 	bl	8007944 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4618      	mov	r0, r3
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4618      	mov	r0, r3
 8007524:	f7ff ffe8 	bl	80074f8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4618      	mov	r0, r3
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8007532:	b580      	push	{r7, lr}
 8007534:	b098      	sub	sp, #96	; 0x60
 8007536:	af02      	add	r7, sp, #8
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800753e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007542:	68b9      	ldr	r1, [r7, #8]
 8007544:	4618      	mov	r0, r3
 8007546:	f000 f9ee 	bl	8007926 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	68b9      	ldr	r1, [r7, #8]
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 fa28 	bl	80079a4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8007554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007558:	68f9      	ldr	r1, [r7, #12]
 800755a:	4618      	mov	r0, r3
 800755c:	f000 f8b2 	bl	80076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 f917 	bl	8007794 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8007566:	4603      	mov	r3, r0
 8007568:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800756c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007570:	f107 0014 	add.w	r0, r7, #20
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f000 fa5e 	bl	8007a38 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800757c:	f107 0314 	add.w	r3, r7, #20
 8007580:	4618      	mov	r0, r3
 8007582:	f000 fa73 	bl	8007a6c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8007586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fe8b 	bl	80072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8007590:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff ffbf 	bl	8007518 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
}
 800759a:	bf00      	nop
 800759c:	3758      	adds	r7, #88	; 0x58
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80075a2:	b5b0      	push	{r4, r5, r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f7fd ff29 	bl	8005404 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80075b2:	4604      	mov	r4, r0
 80075b4:	6838      	ldr	r0, [r7, #0]
 80075b6:	f7ff fb0a 	bl	8006bce <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 80075ba:	4605      	mov	r5, r0
 80075bc:	f107 030c 	add.w	r3, r7, #12
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff fc18 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80075c6:	f107 030c 	add.w	r3, r7, #12
 80075ca:	461a      	mov	r2, r3
 80075cc:	4629      	mov	r1, r5
 80075ce:	4620      	mov	r0, r4
 80075d0:	f000 fa57 	bl	8007a82 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7fd ff15 	bl	8005404 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80075da:	4603      	mov	r3, r0
    }
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bdb0      	pop	{r4, r5, r7, pc}

080075e4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80075e4:	b5b0      	push	{r4, r5, r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7fd ff08 	bl	8005404 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80075f4:	4604      	mov	r4, r0
 80075f6:	6838      	ldr	r0, [r7, #0]
 80075f8:	f7ff fb43 	bl	8006c82 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 80075fc:	4605      	mov	r5, r0
 80075fe:	f107 030c 	add.w	r3, r7, #12
 8007602:	4618      	mov	r0, r3
 8007604:	f7ff fbf7 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007608:	f107 030c 	add.w	r3, r7, #12
 800760c:	461a      	mov	r2, r3
 800760e:	4629      	mov	r1, r5
 8007610:	4620      	mov	r0, r4
 8007612:	f000 fa47 	bl	8007aa4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7fd fef4 	bl	8005404 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800761c:	4603      	mov	r3, r0
    }
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bdb0      	pop	{r4, r5, r7, pc}

08007626 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8007626:	b5b0      	push	{r4, r5, r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7fe f883 	bl	800573c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007636:	4604      	mov	r4, r0
 8007638:	6838      	ldr	r0, [r7, #0]
 800763a:	f7ff fb63 	bl	8006d04 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 800763e:	4605      	mov	r5, r0
 8007640:	f107 030c 	add.w	r3, r7, #12
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff fbd6 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800764a:	f107 030c 	add.w	r3, r7, #12
 800764e:	461a      	mov	r2, r3
 8007650:	4629      	mov	r1, r5
 8007652:	4620      	mov	r0, r4
 8007654:	f000 fa37 	bl	8007ac6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7fe f86f 	bl	800573c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800765e:	4603      	mov	r3, r0
    }
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bdb0      	pop	{r4, r5, r7, pc}

08007668 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>:
  /** \returns the number of coefficients, which is rows()*cols().
    * \sa rows(), cols(), SizeAtCompileTime. */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8007668:	b590      	push	{r4, r7, lr}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7fd fd76 	bl	8005162 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007676:	4604      	mov	r4, r0
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7fd fd82 	bl	8005182 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800767e:	4603      	mov	r3, r0
 8007680:	fb04 f303 	mul.w	r3, r4, r3
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	bd90      	pop	{r4, r7, pc}

0800768c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	68b9      	ldr	r1, [r7, #8]
 80076a0:	6978      	ldr	r0, [r7, #20]
 80076a2:	f000 fa3c 	bl	8007b1e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 80076a6:	bf00      	nop
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>:
    static void run(const Derived&, const OtherDerived&)
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	6039      	str	r1, [r7, #0]
    }
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	4611      	mov	r1, r2
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fa5c 	bl	8007b92 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
  { }
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4618      	mov	r0, r3
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
	...

080076fc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4618      	mov	r0, r3
 800770c:	f7fd fb43 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007710:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	4618      	mov	r0, r3
 8007716:	f7fd fb33 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800771a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4618      	mov	r0, r3
 8007720:	f7fd fb39 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007724:	4602      	mov	r2, r0
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	4293      	cmp	r3, r2
 800772a:	d107      	bne.n	800773c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4618      	mov	r0, r3
 8007730:	f7fd fb26 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007734:	4602      	mov	r2, r0
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	4293      	cmp	r3, r2
 800773a:	d001      	beq.n	8007740 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 800773c:	2301      	movs	r3, #1
 800773e:	e000      	b.n	8007742 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8007740:	2300      	movs	r3, #0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d005      	beq.n	8007752 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	6979      	ldr	r1, [r7, #20]
 800774c:	4618      	mov	r0, r3
 800774e:	f000 fa3b 	bl	8007bc8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	4618      	mov	r0, r3
 8007756:	f7fd fb1e 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800775a:	4602      	mov	r2, r0
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	4293      	cmp	r3, r2
 8007760:	d107      	bne.n	8007772 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	4618      	mov	r0, r3
 8007766:	f7fd fb0b 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800776a:	4602      	mov	r2, r0
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	4293      	cmp	r3, r2
 8007770:	d006      	beq.n	8007780 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 8007772:	4b05      	ldr	r3, [pc, #20]	; (8007788 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007774:	4a05      	ldr	r2, [pc, #20]	; (800778c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007776:	f240 21fd 	movw	r1, #765	; 0x2fd
 800777a:	4805      	ldr	r0, [pc, #20]	; (8007790 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 800777c:	f016 fa22 	bl	801dbc4 <__assert_func>
}
 8007780:	bf00      	nop
 8007782:	3718      	adds	r7, #24
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	080220a4 	.word	0x080220a4
 800778c:	080220d4 	.word	0x080220d4
 8007790:	080221b8 	.word	0x080221b8

08007794 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4618      	mov	r0, r3
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	607a      	str	r2, [r7, #4]
 80077b6:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	605a      	str	r2, [r3, #4]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	609a      	str	r2, [r3, #8]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	69ba      	ldr	r2, [r7, #24]
 80077ce:	60da      	str	r2, [r3, #12]
  }
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80077de:	b580      	push	{r7, lr}
 80077e0:	b082      	sub	sp, #8
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fa20 	bl	8007c2c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>
  }
 80077ec:	bf00      	nop
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	68b9      	ldr	r1, [r7, #8]
 8007808:	6978      	ldr	r0, [r7, #20]
 800780a:	f000 fa3a 	bl	8007c82 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 800780e:	bf00      	nop
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
	...

08007818 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	4618      	mov	r0, r3
 8007828:	f7fd fb5b 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800782c:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	4618      	mov	r0, r3
 8007832:	f7fd fb4b 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007836:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4618      	mov	r0, r3
 800783c:	f7fd fb51 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007840:	4602      	mov	r2, r0
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	4293      	cmp	r3, r2
 8007846:	d107      	bne.n	8007858 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4618      	mov	r0, r3
 800784c:	f7fd fb3e 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007850:	4602      	mov	r2, r0
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	4293      	cmp	r3, r2
 8007856:	d001      	beq.n	800785c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8007858:	2301      	movs	r3, #1
 800785a:	e000      	b.n	800785e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 800785c:	2300      	movs	r3, #0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	6979      	ldr	r1, [r7, #20]
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fa45 	bl	8007cf8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4618      	mov	r0, r3
 8007872:	f7fd fb36 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007876:	4602      	mov	r2, r0
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	4293      	cmp	r3, r2
 800787c:	d107      	bne.n	800788e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4618      	mov	r0, r3
 8007882:	f7fd fb23 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007886:	4602      	mov	r2, r0
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	4293      	cmp	r3, r2
 800788c:	d006      	beq.n	800789c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 800788e:	4b05      	ldr	r3, [pc, #20]	; (80078a4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007890:	4a05      	ldr	r2, [pc, #20]	; (80078a8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007892:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007896:	4805      	ldr	r0, [pc, #20]	; (80078ac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8007898:	f016 f994 	bl	801dbc4 <__assert_func>
}
 800789c:	bf00      	nop
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	080220a4 	.word	0x080220a4
 80078a8:	08022214 	.word	0x08022214
 80078ac:	080221b8 	.word	0x080221b8

080078b0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4618      	mov	r0, r3
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80078c6:	b480      	push	{r7}
 80078c8:	b085      	sub	sp, #20
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	607a      	str	r2, [r7, #4]
 80078d2:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	605a      	str	r2, [r3, #4]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	609a      	str	r2, [r3, #8]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	60da      	str	r2, [r3, #12]
  }
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b082      	sub	sp, #8
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fa2a 	bl	8007d5c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>
  }
 8007908:	bf00      	nop
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
    }
 800791a:	bf00      	nop
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8007926:	b580      	push	{r7, lr}
 8007928:	b082      	sub	sp, #8
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	6039      	str	r1, [r7, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	4618      	mov	r0, r3
 8007936:	f000 fa20 	bl	8007d7a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4618      	mov	r0, r3
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4618      	mov	r0, r3
 800797c:	f7fd ffc6 	bl	800590c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8007980:	4603      	mov	r3, r0
    }
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800798a:	b580      	push	{r7, lr}
 800798c:	b082      	sub	sp, #8
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4618      	mov	r0, r3
 8007996:	f7fd ffc6 	bl	8005926 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 800799a:	4603      	mov	r3, r0
    }
 800799c:	4618      	mov	r0, r3
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80079b0:	68b8      	ldr	r0, [r7, #8]
 80079b2:	f7ff ffdd 	bl	8007970 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>
 80079b6:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80079b8:	68b8      	ldr	r0, [r7, #8]
 80079ba:	f7ff ffe6 	bl	800798a <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>
 80079be:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fd f9e7 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80079c8:	4602      	mov	r2, r0
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d107      	bne.n	80079e0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7fd f9d4 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	4293      	cmp	r3, r2
 80079de:	d001      	beq.n	80079e4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80079e0:	2301      	movs	r3, #1
 80079e2:	e000      	b.n	80079e6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80079e4:	2300      	movs	r3, #0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d005      	beq.n	80079f6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	6979      	ldr	r1, [r7, #20]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 f8e9 	bl	8007bc8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fd f9cc 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80079fe:	4602      	mov	r2, r0
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d107      	bne.n	8007a16 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fd f9b9 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d006      	beq.n	8007a24 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8007a16:	4b05      	ldr	r3, [pc, #20]	; (8007a2c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8007a18:	4a05      	ldr	r2, [pc, #20]	; (8007a30 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007a1a:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007a1e:	4805      	ldr	r0, [pc, #20]	; (8007a34 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007a20:	f016 f8d0 	bl	801dbc4 <__assert_func>
}
 8007a24:	bf00      	nop
 8007a26:	3718      	adds	r7, #24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	080220a4 	.word	0x080220a4
 8007a30:	080222f8 	.word	0x080222f8
 8007a34:	080221b8 	.word	0x080221b8

08007a38 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
 8007a44:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	605a      	str	r2, [r3, #4]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	609a      	str	r2, [r3, #8]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	69ba      	ldr	r2, [r7, #24]
 8007a5c:	60da      	str	r2, [r3, #12]
  }
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f992 	bl	8007d9e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 8007a7a:	bf00      	nop
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b086      	sub	sp, #24
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	60f8      	str	r0, [r7, #12]
 8007a8a:	60b9      	str	r1, [r7, #8]
 8007a8c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	68b9      	ldr	r1, [r7, #8]
 8007a96:	6978      	ldr	r0, [r7, #20]
 8007a98:	f000 f9ac 	bl	8007df4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 8007a9c:	bf00      	nop
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	68b9      	ldr	r1, [r7, #8]
 8007ab8:	6978      	ldr	r0, [r7, #20]
 8007aba:	f000 f9d5 	bl	8007e68 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>
}
 8007abe:	bf00      	nop
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b086      	sub	sp, #24
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	68b9      	ldr	r1, [r7, #8]
 8007ada:	6978      	ldr	r0, [r7, #20]
 8007adc:	f000 fa09 	bl	8007ef2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8007ae0:	bf00      	nop
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>:
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fa37 	bl	8007f66 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8007af8:	4603      	mov	r3, r0
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b082      	sub	sp, #8
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3310      	adds	r3, #16
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fa37 	bl	8007f82 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007b14:	4603      	mov	r3, r0
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
struct Assignment<DstXprType, Product<Lhs,Rhs,Options>, internal::assign_op<Scalar,Scalar>, Dense2Dense,
  typename enable_if<(Options==DefaultProduct || Options==AliasFreeProduct)>::type>
{
  typedef Product<Lhs,Rhs,Options> SrcXprType;
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007b1e:	b590      	push	{r4, r7, lr}
 8007b20:	b087      	sub	sp, #28
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	60b9      	str	r1, [r7, #8]
 8007b28:	607a      	str	r2, [r7, #4]
  {
    Index dstRows = src.rows();
 8007b2a:	68b8      	ldr	r0, [r7, #8]
 8007b2c:	f7ff ffdc 	bl	8007ae8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>
 8007b30:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007b32:	68b8      	ldr	r0, [r7, #8]
 8007b34:	f7ff ffe5 	bl	8007b02 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>
 8007b38:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fd f92a 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007b42:	4602      	mov	r2, r0
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d107      	bne.n	8007b5a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fd f917 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007b52:	4602      	mov	r2, r0
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d001      	beq.n	8007b5e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e000      	b.n	8007b60 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d005      	beq.n	8007b70 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	6979      	ldr	r1, [r7, #20]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 f82c 	bl	8007bc8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    // FIXME shall we handle nested_eval here?
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007b70:	68b8      	ldr	r0, [r7, #8]
 8007b72:	f000 fa14 	bl	8007f9e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>
 8007b76:	4604      	mov	r4, r0
 8007b78:	68b8      	ldr	r0, [r7, #8]
 8007b7a:	f000 fa1b 	bl	8007fb4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	461a      	mov	r2, r3
 8007b82:	4621      	mov	r1, r4
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 fa21 	bl	8007fcc <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>
  }
 8007b8a:	bf00      	nop
 8007b8c:	371c      	adds	r7, #28
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd90      	pop	{r4, r7, pc}

08007b92 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8007b92:	b5b0      	push	{r4, r5, r7, lr}
 8007b94:	b082      	sub	sp, #8
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fa50 	bl	8008042 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8007ba2:	687c      	ldr	r4, [r7, #4]
 8007ba4:	6838      	ldr	r0, [r7, #0]
 8007ba6:	f000 fa2f 	bl	8008008 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 8007baa:	4605      	mov	r5, r0
 8007bac:	6838      	ldr	r0, [r7, #0]
 8007bae:	f000 fa38 	bl	8008022 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f000 fa4d 	bl	8008058 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bdb0      	pop	{r4, r5, r7, pc}

08007bc8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d108      	bne.n	8007bec <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d105      	bne.n	8007bec <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	db02      	blt.n	8007bec <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	da06      	bge.n	8007bfa <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x32>
 8007bec:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x58>)
 8007bee:	4a0d      	ldr	r2, [pc, #52]	; (8007c24 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x5c>)
 8007bf0:	f240 1111 	movw	r1, #273	; 0x111
 8007bf4:	480c      	ldr	r0, [pc, #48]	; (8007c28 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x60>)
 8007bf6:	f015 ffe5 	bl	801dbc4 <__assert_func>
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	617b      	str	r3, [r7, #20]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	613b      	str	r3, [r7, #16]
  }
 8007c02:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	fb02 f103 	mul.w	r1, r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	f000 fa33 	bl	800807c <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>
    }
 8007c16:	bf00      	nop
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	080224bc 	.word	0x080224bc
 8007c24:	0802264c 	.word	0x0802264c
 8007c28:	080226d8 	.word	0x080226d8

08007c2c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007c34:	2100      	movs	r1, #0
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa2d 	bl	8008096 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fa48 	bl	80080d2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>
  }
 8007c42:	bf00      	nop
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b082      	sub	sp, #8
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fd f89d 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fd f92a 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007c82:	b590      	push	{r4, r7, lr}
 8007c84:	b087      	sub	sp, #28
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8007c8e:	68b8      	ldr	r0, [r7, #8]
 8007c90:	f7ff ffdb 	bl	8007c4a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 8007c94:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007c96:	68b8      	ldr	r0, [r7, #8]
 8007c98:	f7ff ffe5 	bl	8007c66 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 8007c9c:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fd f91e 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d107      	bne.n	8007cbe <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x3c>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fd f90b 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d001      	beq.n	8007cc2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x40>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e000      	b.n	8007cc4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x42>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d005      	beq.n	8007cd4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x52>
      dst.resize(dstRows, dstCols);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	6979      	ldr	r1, [r7, #20]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 f812 	bl	8007cf8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007cd4:	68b8      	ldr	r0, [r7, #8]
 8007cd6:	f000 fa0b 	bl	80080f0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 8007cda:	4604      	mov	r4, r0
 8007cdc:	68b8      	ldr	r0, [r7, #8]
 8007cde:	f000 fa13 	bl	8008108 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 fa19 	bl	8008120 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>
  }
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd90      	pop	{r4, r7, pc}
	...

08007cf8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d108      	bne.n	8007d1c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d105      	bne.n	8007d1c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	db02      	blt.n	8007d1c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	da06      	bge.n	8007d2a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x32>
 8007d1c:	4b0c      	ldr	r3, [pc, #48]	; (8007d50 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x58>)
 8007d1e:	4a0d      	ldr	r2, [pc, #52]	; (8007d54 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x5c>)
 8007d20:	f240 1111 	movw	r1, #273	; 0x111
 8007d24:	480c      	ldr	r0, [pc, #48]	; (8007d58 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x60>)
 8007d26:	f015 ff4d 	bl	801dbc4 <__assert_func>
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	613b      	str	r3, [r7, #16]
  }
 8007d32:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	fb02 f103 	mul.w	r1, r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	f000 fa0b 	bl	800815c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>
    }
 8007d46:	bf00      	nop
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	080224bc 	.word	0x080224bc
 8007d54:	08022734 	.word	0x08022734
 8007d58:	080226d8 	.word	0x080226d8

08007d5c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007d64:	2100      	movs	r1, #0
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fa05 	bl	8008176 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fa20 	bl	80081b2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>
  }
 8007d72:	bf00      	nop
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	6039      	str	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fa23 	bl	80081d0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 fa29 	bl	80081e6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>
  }
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8007da6:	2200      	movs	r2, #0
 8007da8:	2100      	movs	r1, #0
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fa43 	bl	8008236 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fa59 	bl	8008268 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 8007db6:	bf00      	nop
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b082      	sub	sp, #8
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 fa5d 	bl	8008288 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3308      	adds	r3, #8
 8007de4:	4618      	mov	r0, r3
 8007de6:	f000 fa5d 	bl	80082a4 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8007dea:	4603      	mov	r3, r0
 8007dec:	4618      	mov	r0, r3
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007df4:	b590      	push	{r4, r7, lr}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8007e00:	68b8      	ldr	r0, [r7, #8]
 8007e02:	f7ff ffdc 	bl	8007dbe <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>
 8007e06:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007e08:	68b8      	ldr	r0, [r7, #8]
 8007e0a:	f7ff ffe5 	bl	8007dd8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>
 8007e0e:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fd f865 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d107      	bne.n	8007e30 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x3c>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fd f852 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d001      	beq.n	8007e34 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x40>
 8007e30:	2301      	movs	r3, #1
 8007e32:	e000      	b.n	8007e36 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x42>
 8007e34:	2300      	movs	r3, #0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d005      	beq.n	8007e46 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x52>
      dst.resize(dstRows, dstCols);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	6979      	ldr	r1, [r7, #20]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7ff ff59 	bl	8007cf8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007e46:	68b8      	ldr	r0, [r7, #8]
 8007e48:	f000 fa39 	bl	80082be <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	68b8      	ldr	r0, [r7, #8]
 8007e50:	f000 fa40 	bl	80082d4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>
 8007e54:	4603      	mov	r3, r0
 8007e56:	461a      	mov	r2, r3
 8007e58:	4621      	mov	r1, r4
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 fa46 	bl	80082ec <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>
  }
 8007e60:	bf00      	nop
 8007e62:	371c      	adds	r7, #28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd90      	pop	{r4, r7, pc}

08007e68 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>:
template<typename DstXprType, typename OtherXpr, typename ProductType, typename Func1, typename Func2>
struct assignment_from_xpr_op_product
{
  template<typename SrcXprType, typename InitialFunc>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 8007e68:	b590      	push	{r4, r7, lr}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
  {
    call_assignment_no_alias(dst, src.lhs(), Func1());
 8007e74:	68b8      	ldr	r0, [r7, #8]
 8007e76:	f000 fa57 	bl	8008328 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	f107 0310 	add.w	r3, r7, #16
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fe ffb8 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007e86:	f107 0310 	add.w	r3, r7, #16
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f7ff f8be 	bl	8007010 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 8007e94:	68b8      	ldr	r0, [r7, #8]
 8007e96:	f000 fa53 	bl	8008340 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	f107 0314 	add.w	r3, r7, #20
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 fa59 	bl	8008358 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 8007ea6:	f107 0314 	add.w	r3, r7, #20
 8007eaa:	461a      	mov	r2, r3
 8007eac:	4621      	mov	r1, r4
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 fa5d 	bl	800836e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007eb4:	bf00      	nop
 8007eb6:	371c      	adds	r7, #28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd90      	pop	{r4, r7, pc}

08007ebc <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 fa62 	bl	8008390 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b082      	sub	sp, #8
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fc ff4c 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007ef2:	b590      	push	{r4, r7, lr}
 8007ef4:	b087      	sub	sp, #28
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	60f8      	str	r0, [r7, #12]
 8007efa:	60b9      	str	r1, [r7, #8]
 8007efc:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8007efe:	68b8      	ldr	r0, [r7, #8]
 8007f00:	f7ff ffdc 	bl	8007ebc <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>
 8007f04:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007f06:	68b8      	ldr	r0, [r7, #8]
 8007f08:	f7ff ffe5 	bl	8007ed6 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>
 8007f0c:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fc ff40 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007f16:	4602      	mov	r2, r0
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d107      	bne.n	8007f2e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x3c>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fc ff2d 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007f26:	4602      	mov	r2, r0
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d001      	beq.n	8007f32 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x40>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e000      	b.n	8007f34 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x42>
 8007f32:	2300      	movs	r3, #0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d005      	beq.n	8007f44 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x52>
      dst.resize(dstRows, dstCols);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	6979      	ldr	r1, [r7, #20]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff fe42 	bl	8007bc8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007f44:	68b8      	ldr	r0, [r7, #8]
 8007f46:	f000 fa31 	bl	80083ac <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	68b8      	ldr	r0, [r7, #8]
 8007f4e:	f000 fa38 	bl	80083c2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>
 8007f52:	4603      	mov	r3, r0
 8007f54:	461a      	mov	r2, r3
 8007f56:	4621      	mov	r1, r4
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f000 fa3e 	bl	80083da <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>
  }
 8007f5e:	bf00      	nop
 8007f60:	371c      	adds	r7, #28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd90      	pop	{r4, r7, pc}

08007f66 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b082      	sub	sp, #8
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fc ffb5 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007f78:	4603      	mov	r3, r0
    }
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b082      	sub	sp, #8
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fc ffa7 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007f94:	4603      	mov	r3, r0
 8007f96:	4618      	mov	r0, r3
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8007f9e:	b480      	push	{r7}
 8007fa0:	b083      	sub	sp, #12
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3310      	adds	r3, #16
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>:
struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,CoeffBasedProductMode>
{
  typedef typename Product<Lhs,Rhs>::Scalar Scalar;

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08a      	sub	sp, #40	; 0x28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
  {
    // Same as: dst.noalias() = lhs.lazyProduct(rhs);
    // but easier on the compiler side
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8007fd8:	f107 0310 	add.w	r3, r7, #16
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	68b9      	ldr	r1, [r7, #8]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 fa18 	bl	8008416 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>
 8007fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fe ff03 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007ff0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007ff4:	f107 0310 	add.w	r3, r7, #16
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 fa22 	bl	8008444 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008000:	bf00      	nop
 8008002:	3728      	adds	r7, #40	; 0x28
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4618      	mov	r0, r3
 8008014:	f000 fa27 	bl	8008466 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 8008018:	4603      	mov	r3, r0
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>:
      *          in a column-major matrix).
      *
      * \sa innerStride(), rowStride(), colStride()
      */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT
 8008022:	b580      	push	{r7, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
    {
      return derived().outerStride();
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7fd fabd 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8008030:	4603      	mov	r3, r0
 8008032:	4618      	mov	r0, r3
 8008034:	f000 fa22 	bl	800847c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8008038:	4603      	mov	r3, r0
    }
 800803a:	4618      	mov	r0, r3
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8008042:	b480      	push	{r7}
 8008044:	b083      	sub	sp, #12
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 800806a:	1d3b      	adds	r3, r7, #4
 800806c:	4618      	mov	r0, r3
 800806e:	f7fb ffbc 	bl	8003fea <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
 8008088:	603b      	str	r3, [r7, #0]
 800808a:	bf00      	nop
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8008096:	b5b0      	push	{r4, r5, r7, lr}
 8008098:	b082      	sub	sp, #8
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	689c      	ldr	r4, [r3, #8]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 f9f2 	bl	8008494 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>
 80080b0:	4605      	mov	r5, r0
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 f9fb 	bl	80084b4 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>
 80080be:	4603      	mov	r3, r0
 80080c0:	461a      	mov	r2, r3
 80080c2:	4629      	mov	r1, r5
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 fa05 	bl	80084d4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80080ca:	bf00      	nop
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bdb0      	pop	{r4, r5, r7, pc}

080080d2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b082      	sub	sp, #8
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80080da:	2101      	movs	r1, #1
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff ffda 	bl	8008096 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fa06 	bl	80084f4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>
  }
 80080e8:	bf00      	nop
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4618      	mov	r0, r3
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	4618      	mov	r0, r3
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008120:	b580      	push	{r7, lr}
 8008122:	b088      	sub	sp, #32
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800812c:	f107 0314 	add.w	r3, r7, #20
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	68b9      	ldr	r1, [r7, #8]
 8008134:	4618      	mov	r0, r3
 8008136:	f000 f9ec 	bl	8008512 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 800813a:	f107 031c 	add.w	r3, r7, #28
 800813e:	4618      	mov	r0, r3
 8008140:	f7fe fe59 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8008144:	f107 021c 	add.w	r2, r7, #28
 8008148:	f107 0314 	add.w	r3, r7, #20
 800814c:	4619      	mov	r1, r3
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 f9f6 	bl	8008540 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008154:	bf00      	nop
 8008156:	3720      	adds	r7, #32
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>:
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]
 800816a:	bf00      	nop
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8008176:	b5b0      	push	{r4, r5, r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	689c      	ldr	r4, [r3, #8]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 f9e9 	bl	8008562 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8008190:	4605      	mov	r5, r0
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	4618      	mov	r0, r3
 800819a:	f000 f9f2 	bl	8008582 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>
 800819e:	4603      	mov	r3, r0
 80081a0:	461a      	mov	r2, r3
 80081a2:	4629      	mov	r1, r5
 80081a4:	4620      	mov	r0, r4
 80081a6:	f000 f995 	bl	80084d4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80081aa:	bf00      	nop
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bdb0      	pop	{r4, r5, r7, pc}

080081b2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b082      	sub	sp, #8
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80081ba:	2101      	movs	r1, #1
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff ffda 	bl	8008176 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f9ed 	bl	80085a2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>
  }
 80081c8:	bf00      	nop
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4618      	mov	r0, r3
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>:
  {
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80081e6:	b590      	push	{r4, r7, lr}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	6039      	str	r1, [r7, #0]
 80081f0:	687c      	ldr	r4, [r7, #4]
 80081f2:	6838      	ldr	r0, [r7, #0]
 80081f4:	f000 f9e4 	bl	80085c0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>
 80081f8:	4603      	mov	r3, r0
 80081fa:	4619      	mov	r1, r3
 80081fc:	4620      	mov	r0, r4
 80081fe:	f7fd fbe1 	bl	80059c4 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	1d1c      	adds	r4, r3, #4
 8008206:	6838      	ldr	r0, [r7, #0]
 8008208:	f000 f9e6 	bl	80085d8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>
 800820c:	4603      	mov	r3, r0
 800820e:	4619      	mov	r1, r3
 8008210:	4620      	mov	r0, r4
 8008212:	f000 f9f8 	bl	8008606 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800821c:	6838      	ldr	r0, [r7, #0]
 800821e:	f000 f9e6 	bl	80085ee <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>
 8008222:	4603      	mov	r3, r0
 8008224:	4619      	mov	r1, r3
 8008226:	4620      	mov	r0, r4
 8008228:	f000 f9fc 	bl	8008624 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4618      	mov	r0, r3
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	bd90      	pop	{r4, r7, pc}

08008236 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8008236:	b580      	push	{r7, lr}
 8008238:	b086      	sub	sp, #24
 800823a:	af00      	add	r7, sp, #0
 800823c:	60f8      	str	r0, [r7, #12]
 800823e:	60b9      	str	r1, [r7, #8]
 8008240:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	68b8      	ldr	r0, [r7, #8]
 8008246:	f000 f9fc 	bl	8008642 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800824a:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800824c:	6879      	ldr	r1, [r7, #4]
 800824e:	68b8      	ldr	r0, [r7, #8]
 8008250:	f000 fa03 	bl	800865a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8008254:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	6979      	ldr	r1, [r7, #20]
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 fa09 	bl	8008672 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8008260:	bf00      	nop
 8008262:	3718      	adds	r7, #24
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008270:	2201      	movs	r2, #1
 8008272:	2100      	movs	r1, #0
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f7ff ffde 	bl	8008236 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fa1f 	bl	80086be <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 8008280:	bf00      	nop
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4618      	mov	r0, r3
 8008296:	f7fc fd7e 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800829a:	4603      	mov	r3, r0
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index cols() const EIGEN_NOEXCEPT { return m_xpr.rows(); }
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fd fdc3 	bl	8005e3a <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80082b4:	4603      	mov	r3, r0
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4618      	mov	r0, r3
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3308      	adds	r3, #8
 80082e0:	4618      	mov	r0, r3
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08c      	sub	sp, #48	; 0x30
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80082f8:	f107 0310 	add.w	r3, r7, #16
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	68b9      	ldr	r1, [r7, #8]
 8008300:	4618      	mov	r0, r3
 8008302:	f000 f9ec 	bl	80086de <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>
 8008306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe fd73 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8008310:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008314:	f107 0310 	add.w	r3, r7, #16
 8008318:	4619      	mov	r1, r3
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 f9f6 	bl	800870c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008320:	bf00      	nop
 8008322:	3730      	adds	r7, #48	; 0x30
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4618      	mov	r0, r3
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	3304      	adds	r3, #4
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with addition
  *
  */
template<typename DstScalar,typename SrcScalar> struct add_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(add_assign_op)
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4618      	mov	r0, r3
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800836e:	b580      	push	{r7, lr}
 8008370:	b086      	sub	sp, #24
 8008372:	af00      	add	r7, sp, #0
 8008374:	60f8      	str	r0, [r7, #12]
 8008376:	60b9      	str	r1, [r7, #8]
 8008378:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	68b9      	ldr	r1, [r7, #8]
 8008382:	6978      	ldr	r0, [r7, #20]
 8008384:	f000 f9d4 	bl	8008730 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8008388:	bf00      	nop
 800838a:	3718      	adds	r7, #24
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4618      	mov	r0, r3
 800839e:	f7fc fcfa 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80083a2:	4603      	mov	r3, r0
    }
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4618      	mov	r0, r3
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	4618      	mov	r0, r3
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80083da:	b580      	push	{r7, lr}
 80083dc:	b08a      	sub	sp, #40	; 0x28
 80083de:	af00      	add	r7, sp, #0
 80083e0:	60f8      	str	r0, [r7, #12]
 80083e2:	60b9      	str	r1, [r7, #8]
 80083e4:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80083e6:	f107 0310 	add.w	r3, r7, #16
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	68b9      	ldr	r1, [r7, #8]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 f9d8 	bl	80087a4 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>
 80083f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7fe fcfc 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80083fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008402:	f107 0310 	add.w	r3, r7, #16
 8008406:	4619      	mov	r1, r3
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 f9e2 	bl	80087d2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800840e:	bf00      	nop
 8008410:	3728      	adds	r7, #40	; 0x28
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived,OtherDerived,LazyProduct>
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8008416:	b590      	push	{r4, r7, lr}
 8008418:	b085      	sub	sp, #20
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	607a      	str	r2, [r7, #4]
    INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS)
  EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors),
    INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION)
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)

  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8008422:	68b8      	ldr	r0, [r7, #8]
 8008424:	f7fd f821 	bl	800546a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 8008428:	4604      	mov	r4, r0
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7fd f828 	bl	8005480 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8008430:	4603      	mov	r3, r0
 8008432:	461a      	mov	r2, r3
 8008434:	4621      	mov	r1, r4
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f000 fa00 	bl	800883c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>
}
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	bd90      	pop	{r4, r7, pc}

08008444 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	68b9      	ldr	r1, [r7, #8]
 8008458:	6978      	ldr	r0, [r7, #20]
 800845a:	f000 fa1f 	bl	800889c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 800845e:	bf00      	nop
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>:
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fa1c 	bl	80088c2 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>
 800848a:	4603      	mov	r3, r0
 800848c:	4618      	mov	r0, r3
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
  }
 80084a8:	4618      	mov	r0, r3
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
  }
 80084c8:	4618      	mov	r0, r3
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	601a      	str	r2, [r3, #0]
 80084e8:	bf00      	nop
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80084fc:	2102      	movs	r1, #2
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff fdc9 	bl	8008096 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f9e8 	bl	80088da <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>
  }
 800850a:	bf00      	nop
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8008512:	b590      	push	{r4, r7, lr}
 8008514:	b085      	sub	sp, #20
 8008516:	af00      	add	r7, sp, #0
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800851e:	68b8      	ldr	r0, [r7, #8]
 8008520:	f7fd f843 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8008524:	4604      	mov	r4, r0
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7fc fe77 	bl	800521a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800852c:	4603      	mov	r3, r0
 800852e:	461a      	mov	r2, r3
 8008530:	4621      	mov	r1, r4
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 fa04 	bl	8008940 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>
}
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	bd90      	pop	{r4, r7, pc}

08008540 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	68b9      	ldr	r1, [r7, #8]
 8008554:	6978      	ldr	r0, [r7, #20]
 8008556:	f000 fa21 	bl	800899c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 800855a:	bf00      	nop
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
  }
 8008576:	4618      	mov	r0, r3
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8008582:	b480      	push	{r7}
 8008584:	b083      	sub	sp, #12
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
  }
 8008596:	4618      	mov	r0, r3
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80085aa:	2102      	movs	r1, #2
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f7ff fde2 	bl	8008176 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fa05 	bl	80089c2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>
  }
 80085b8:	bf00      	nop
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3310      	adds	r3, #16
 80085cc:	4618      	mov	r0, r3
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4618      	mov	r0, r3
 80085e4:	370c      	adds	r7, #12
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80085ee:	b480      	push	{r7}
 80085f0:	b083      	sub	sp, #12
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	4618      	mov	r0, r3
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	6039      	str	r1, [r7, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6839      	ldr	r1, [r7, #0]
 8008614:	4618      	mov	r0, r3
 8008616:	f000 f9de 	bl	80089d6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4618      	mov	r0, r3
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>:
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	4618      	mov	r0, r3
 8008634:	f7ff f846 	bl	80076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8008642:	b480      	push	{r7}
 8008644:	b083      	sub	sp, #12
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	6039      	str	r1, [r7, #0]
      : inner;
 800864c:	683b      	ldr	r3, [r7, #0]
  }
 800864e:	4618      	mov	r0, r3
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	6039      	str	r1, [r7, #0]
      : outer;
 8008664:	687b      	ldr	r3, [r7, #4]
  }
 8008666:	4618      	mov	r0, r3
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8008672:	b5b0      	push	{r4, r5, r7, lr}
 8008674:	b086      	sub	sp, #24
 8008676:	af00      	add	r7, sp, #0
 8008678:	60f8      	str	r0, [r7, #12]
 800867a:	60b9      	str	r1, [r7, #8]
 800867c:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	689c      	ldr	r4, [r3, #8]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	68b9      	ldr	r1, [r7, #8]
 800868a:	4618      	mov	r0, r3
 800868c:	f000 f9b2 	bl	80089f4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8008690:	4605      	mov	r5, r0
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	68b9      	ldr	r1, [r7, #8]
 800869a:	4618      	mov	r0, r3
 800869c:	f000 f9c2 	bl	8008a24 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>
 80086a0:	eef0 7a40 	vmov.f32	s15, s0
 80086a4:	edc7 7a05 	vstr	s15, [r7, #20]
 80086a8:	f107 0314 	add.w	r3, r7, #20
 80086ac:	461a      	mov	r2, r3
 80086ae:	4629      	mov	r1, r5
 80086b0:	4620      	mov	r0, r4
 80086b2:	f7ff ff0f 	bl	80084d4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80086b6:	bf00      	nop
 80086b8:	3718      	adds	r7, #24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bdb0      	pop	{r4, r5, r7, pc}

080086be <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80086c6:	2202      	movs	r2, #2
 80086c8:	2100      	movs	r1, #0
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7ff fdb3 	bl	8008236 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f9ce 	bl	8008a72 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 80086d6:	bf00      	nop
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80086de:	b590      	push	{r4, r7, lr}
 80086e0:	b085      	sub	sp, #20
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	60f8      	str	r0, [r7, #12]
 80086e6:	60b9      	str	r1, [r7, #8]
 80086e8:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80086ea:	68b8      	ldr	r0, [r7, #8]
 80086ec:	f7fd fbe9 	bl	8005ec2 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 80086f0:	4604      	mov	r4, r0
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7fd fbf0 	bl	8005ed8 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 80086f8:	4603      	mov	r3, r0
 80086fa:	461a      	mov	r2, r3
 80086fc:	4621      	mov	r1, r4
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f000 f9ec 	bl	8008adc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>
}
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	bd90      	pop	{r4, r7, pc}

0800870c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	68b9      	ldr	r1, [r7, #8]
 8008720:	6978      	ldr	r0, [r7, #20]
 8008722:	f000 fa0d 	bl	8008b40 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 8008726:	bf00      	nop
 8008728:	3718      	adds	r7, #24
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
	...

08008730 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::add_assign_op<Scalar,Scalar> &)
 8008730:	b590      	push	{r4, r7, lr}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4618      	mov	r0, r3
 8008740:	f7fc fbcf 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008744:	4604      	mov	r4, r0
 8008746:	68b8      	ldr	r0, [r7, #8]
 8008748:	f7fd fdd7 	bl	80062fa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 800874c:	4603      	mov	r3, r0
 800874e:	429c      	cmp	r4, r3
 8008750:	d10a      	bne.n	8008768 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x38>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	4618      	mov	r0, r3
 8008756:	f7fc fbb9 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800875a:	4604      	mov	r4, r0
 800875c:	68b8      	ldr	r0, [r7, #8]
 800875e:	f7fd fdda 	bl	8006316 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 8008762:	4603      	mov	r3, r0
 8008764:	429c      	cmp	r4, r3
 8008766:	d005      	beq.n	8008774 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x44>
 8008768:	4b0b      	ldr	r3, [pc, #44]	; (8008798 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x68>)
 800876a:	4a0c      	ldr	r2, [pc, #48]	; (800879c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x6c>)
 800876c:	21a1      	movs	r1, #161	; 0xa1
 800876e:	480c      	ldr	r0, [pc, #48]	; (80087a0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x70>)
 8008770:	f015 fa28 	bl	801dbc4 <__assert_func>
    generic_product_impl<Lhs, Rhs>::addTo(dst, src.lhs(), src.rhs());
 8008774:	68b8      	ldr	r0, [r7, #8]
 8008776:	f000 f9f6 	bl	8008b66 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>
 800877a:	4604      	mov	r4, r0
 800877c:	68b8      	ldr	r0, [r7, #8]
 800877e:	f000 f9fe 	bl	8008b7e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>
 8008782:	4603      	mov	r3, r0
 8008784:	461a      	mov	r2, r3
 8008786:	4621      	mov	r1, r4
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 fa04 	bl	8008b96 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>
  }
 800878e:	bf00      	nop
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	bd90      	pop	{r4, r7, pc}
 8008796:	bf00      	nop
 8008798:	080227c0 	.word	0x080227c0
 800879c:	080227f8 	.word	0x080227f8
 80087a0:	08022cb8 	.word	0x08022cb8

080087a4 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80087a4:	b590      	push	{r4, r7, lr}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80087b0:	68b8      	ldr	r0, [r7, #8]
 80087b2:	f7fd feed 	bl	8006590 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 80087b6:	4604      	mov	r4, r0
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7fc fef6 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80087be:	4603      	mov	r3, r0
 80087c0:	461a      	mov	r2, r3
 80087c2:	4621      	mov	r1, r4
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 fa29 	bl	8008c1c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>
}
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd90      	pop	{r4, r7, pc}

080087d2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b086      	sub	sp, #24
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	60f8      	str	r0, [r7, #12]
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	68b9      	ldr	r1, [r7, #8]
 80087e6:	6978      	ldr	r0, [r7, #20]
 80087e8:	f000 fa46 	bl	8008c78 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 80087ec:	bf00      	nop
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fa4e 	bl	8008c9e <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4618      	mov	r0, r3
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>:
class dense_product_base
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff ffed 	bl	80087f4 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff ffed 	bl	800880c <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800883c:	b590      	push	{r4, r7, lr}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f7ff ffeb 	bl	8008824 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	68b9      	ldr	r1, [r7, #8]
 8008852:	4618      	mov	r0, r3
 8008854:	f7fb fe5c 	bl	8004510 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	3310      	adds	r3, #16
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	6812      	ldr	r2, [r2, #0]
 8008860:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8008862:	68b8      	ldr	r0, [r7, #8]
 8008864:	f7fc fe3b 	bl	80054de <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8008868:	4604      	mov	r4, r0
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7fc fe45 	bl	80054fa <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008870:	4603      	mov	r3, r0
 8008872:	429c      	cmp	r4, r3
 8008874:	d005      	beq.n	8008882 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x46>
 8008876:	4b06      	ldr	r3, [pc, #24]	; (8008890 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x54>)
 8008878:	4a06      	ldr	r2, [pc, #24]	; (8008894 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x58>)
 800887a:	2160      	movs	r1, #96	; 0x60
 800887c:	4806      	ldr	r0, [pc, #24]	; (8008898 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x5c>)
 800887e:	f015 f9a1 	bl	801dbc4 <__assert_func>
 8008882:	bf00      	nop
    }
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	4618      	mov	r0, r3
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	bd90      	pop	{r4, r7, pc}
 800888e:	bf00      	nop
 8008890:	0801fcec 	.word	0x0801fcec
 8008894:	08022d18 	.word	0x08022d18
 8008898:	0802003c 	.word	0x0802003c

0800889c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80088a8:	68b9      	ldr	r1, [r7, #8]
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f000 fa02 	bl	8008cb4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	68b9      	ldr	r1, [r7, #8]
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 fab3 	bl	8008e20 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80088ba:	bf00      	nop
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fae0 	bl	8008e90 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80088d0:	4603      	mov	r3, r0
    }
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80088e2:	2103      	movs	r1, #3
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7ff fbd6 	bl	8008096 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fae0 	bl	8008eb0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>
  }
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fae4 	bl	8008ece <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4618      	mov	r0, r3
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>:
class dense_product_base
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f7ff ffed 	bl	80088f8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4618      	mov	r0, r3
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f7ff ffed 	bl	8008910 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4618      	mov	r0, r3
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008940:	b590      	push	{r4, r7, lr}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f7ff ffeb 	bl	8008928 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	4618      	mov	r0, r3
 8008962:	f7fc fa0d 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008966:	4604      	mov	r4, r0
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4618      	mov	r0, r3
 800896c:	f7fc fab9 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008970:	4603      	mov	r3, r0
 8008972:	429c      	cmp	r4, r3
 8008974:	d005      	beq.n	8008982 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x42>
 8008976:	4b06      	ldr	r3, [pc, #24]	; (8008990 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x50>)
 8008978:	4a06      	ldr	r2, [pc, #24]	; (8008994 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x54>)
 800897a:	2160      	movs	r1, #96	; 0x60
 800897c:	4806      	ldr	r0, [pc, #24]	; (8008998 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x58>)
 800897e:	f015 f921 	bl	801dbc4 <__assert_func>
 8008982:	bf00      	nop
    }
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	4618      	mov	r0, r3
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	bd90      	pop	{r4, r7, pc}
 800898e:	bf00      	nop
 8008990:	0801fcec 	.word	0x0801fcec
 8008994:	08022fdc 	.word	0x08022fdc
 8008998:	0802003c 	.word	0x0802003c

0800899c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80089a8:	68b9      	ldr	r1, [r7, #8]
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f000 fa9a 	bl	8008ee4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	68b9      	ldr	r1, [r7, #8]
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f000 fac3 	bl	8008f40 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80089ba:	bf00      	nop
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	bf00      	nop
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b082      	sub	sp, #8
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	6039      	str	r1, [r7, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 fae3 	bl	8008fb0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4618      	mov	r0, r3
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 80089f4:	b590      	push	{r4, r7, lr}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681c      	ldr	r4, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 fb0f 	bl	800902a <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	fb03 f202 	mul.w	r2, r3, r2
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	4413      	add	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4423      	add	r3, r4
  }
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd90      	pop	{r4, r7, pc}

08008a24 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8008a24:	b5b0      	push	{r4, r5, r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 fb04 	bl	8009040 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>
 8008a38:	4604      	mov	r4, r0
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	68b9      	ldr	r1, [r7, #8]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 fb07 	bl	8009056 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>
 8008a48:	4605      	mov	r5, r0
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	332c      	adds	r3, #44	; 0x2c
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	68b9      	ldr	r1, [r7, #8]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 fb17 	bl	8009086 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f000 fb29 	bl	80090b6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8008a64:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008a68:	eeb0 0a67 	vmov.f32	s0, s15
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bdb0      	pop	{r4, r5, r7, pc}

08008a72 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7ff fbd9 	bl	8008236 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fb2b 	bl	80090e0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 8008a8a:	bf00      	nop
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b082      	sub	sp, #8
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fb30 	bl	8009100 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>:
class dense_product_base
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b082      	sub	sp, #8
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff ffed 	bl	8008a92 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4618      	mov	r0, r3
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7ff ffed 	bl	8008aaa <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
	...

08008adc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008adc:	b590      	push	{r4, r7, lr}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f7ff ffea 	bl	8008ac2 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008af6:	e883 0003 	stmia.w	r3, {r0, r1}
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3308      	adds	r3, #8
 8008afe:	6879      	ldr	r1, [r7, #4]
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fb feb9 	bl	8004878 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 8008b06:	68b8      	ldr	r0, [r7, #8]
 8008b08:	f7fd fa15 	bl	8005f36 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7fd fa1f 	bl	8005f52 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8008b14:	4603      	mov	r3, r0
 8008b16:	429c      	cmp	r4, r3
 8008b18:	d005      	beq.n	8008b26 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x4a>
 8008b1a:	4b06      	ldr	r3, [pc, #24]	; (8008b34 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x58>)
 8008b1c:	4a06      	ldr	r2, [pc, #24]	; (8008b38 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x5c>)
 8008b1e:	2160      	movs	r1, #96	; 0x60
 8008b20:	4806      	ldr	r0, [pc, #24]	; (8008b3c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x60>)
 8008b22:	f015 f84f 	bl	801dbc4 <__assert_func>
 8008b26:	bf00      	nop
    }
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd90      	pop	{r4, r7, pc}
 8008b32:	bf00      	nop
 8008b34:	0801fcec 	.word	0x0801fcec
 8008b38:	08023104 	.word	0x08023104
 8008b3c:	0802003c 	.word	0x0802003c

08008b40 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008b4c:	68b9      	ldr	r1, [r7, #8]
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f000 fae1 	bl	8009116 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	68b9      	ldr	r1, [r7, #8]
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 fb23 	bl	80091a4 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008b5e:	bf00      	nop
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8008b66:	b480      	push	{r7}
 8008b68:	b083      	sub	sp, #12
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4618      	mov	r0, r3
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8008b7e:	b480      	push	{r7}
 8008b80:	b083      	sub	sp, #12
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	3304      	adds	r3, #4
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>:

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void addTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b08a      	sub	sp, #40	; 0x28
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	60b9      	str	r1, [r7, #8]
 8008ba0:	607a      	str	r2, [r7, #4]
  {
    // dst.noalias() += lhs.lazyProduct(rhs);
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::add_assign_op<typename Dst::Scalar,Scalar>());
 8008ba2:	f107 0310 	add.w	r3, r7, #16
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	68b9      	ldr	r1, [r7, #8]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fb32 	bl	8009214 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>
 8008bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7ff fbcf 	bl	8008358 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 8008bba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008bbe:	f107 0310 	add.w	r3, r7, #16
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f000 fb3c 	bl	8009242 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008bca:	bf00      	nop
 8008bcc:	3728      	adds	r7, #40	; 0x28
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b082      	sub	sp, #8
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fb42 	bl	8009264 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4618      	mov	r0, r3
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>:
class dense_product_base
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff ffed 	bl	8008bd2 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b082      	sub	sp, #8
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7ff ffed 	bl	8008bea <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
	...

08008c1c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008c1c:	b590      	push	{r4, r7, lr}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f7ff ffea 	bl	8008c02 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	68b9      	ldr	r1, [r7, #8]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fb ff39 	bl	8004aaa <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 8008c3e:	68b8      	ldr	r0, [r7, #8]
 8008c40:	f7fd fcd5 	bl	80065ee <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8008c44:	4604      	mov	r4, r0
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fc f8a4 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	429c      	cmp	r4, r3
 8008c52:	d005      	beq.n	8008c60 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x44>
 8008c54:	4b05      	ldr	r3, [pc, #20]	; (8008c6c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x50>)
 8008c56:	4a06      	ldr	r2, [pc, #24]	; (8008c70 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x54>)
 8008c58:	2160      	movs	r1, #96	; 0x60
 8008c5a:	4806      	ldr	r0, [pc, #24]	; (8008c74 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x58>)
 8008c5c:	f014 ffb2 	bl	801dbc4 <__assert_func>
 8008c60:	bf00      	nop
    }
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd90      	pop	{r4, r7, pc}
 8008c6c:	0801fcec 	.word	0x0801fcec
 8008c70:	0802348c 	.word	0x0802348c
 8008c74:	0802003c 	.word	0x0802003c

08008c78 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008c84:	68b9      	ldr	r1, [r7, #8]
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f000 faf7 	bl	800927a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	68b9      	ldr	r1, [r7, #8]
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 fb35 	bl	8009300 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008c96:	bf00      	nop
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008c9e:	b480      	push	{r7}
 8008ca0:	b083      	sub	sp, #12
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
    }
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fc f868 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	dd08      	ble.n	8008cde <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fc f856 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	dd01      	ble.n	8008cde <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e000      	b.n	8008ce0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2c>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fb42 	bl	8009370 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>
}
 8008cec:	bf00      	nop
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct evaluator<const T>
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fc fa5b 	bl	80051ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4618      	mov	r0, r3
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseNullaryOp<NullaryOp,PlainObjectType> >
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b082      	sub	sp, #8
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fb5a 	bl	80093d0 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<const T>
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b082      	sub	sp, #8
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7ff ffec 	bl	8008d0e <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7ff ffea 	bl	8008d26 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	3304      	adds	r3, #4
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7ff ffcc 	bl	8008cf4 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b082      	sub	sp, #8
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7ff ffe5 	bl	8008d40 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fb1f 	bl	80093ba <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7ff ffe8 	bl	8008d66 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fc fa05 	bl	80051ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fb18 	bl	80093e6 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4618      	mov	r0, r3
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7ff ffe8 	bl	8008da0 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>:

template<int StorageOrder, int UnrollingIndex, typename Lhs, typename Rhs, typename Packet, int LoadMode>
struct etor_product_packet_impl;

template<typename Lhs, typename Rhs, int ProductTag>
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b082      	sub	sp, #8
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3324      	adds	r3, #36	; 0x24
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7ff ffea 	bl	8008dc0 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3314      	adds	r3, #20
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7ff ffc8 	bl	8008d86 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fad4 	bl	80093a4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b082      	sub	sp, #8
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7ff ffe2 	bl	8008dda <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b096      	sub	sp, #88	; 0x58
 8008e24:	af02      	add	r7, sp, #8
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8008e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e30:	68b9      	ldr	r1, [r7, #8]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 faa7 	bl	8009386 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>
  resize_if_allowed(dst, src, func);
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	68b9      	ldr	r1, [r7, #8]
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 faf9 	bl	8009434 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8008e42:	f107 0320 	add.w	r3, r7, #32
 8008e46:	68f9      	ldr	r1, [r7, #12]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7fe fc3b 	bl	80076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f7fe fca0 	bl	8007794 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8008e54:	4603      	mov	r3, r0
 8008e56:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008e5a:	f107 0120 	add.w	r1, r7, #32
 8008e5e:	f107 0010 	add.w	r0, r7, #16
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f000 fb2f 	bl	80094c8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8008e6a:	f107 0310 	add.w	r3, r7, #16
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 fb44 	bl	80094fc <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>
  DstEvaluatorType dstEvaluator(dst);
 8008e74:	f107 0320 	add.w	r3, r7, #32
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fe fa14 	bl	80072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8008e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7ff ffbf 	bl	8008e06 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
}
 8008e88:	bf00      	nop
 8008e8a:	3750      	adds	r7, #80	; 0x50
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7fc fb86 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fb ff78 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008eb8:	2104      	movs	r1, #4
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f7ff f8eb 	bl	8008096 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fb26 	bl	8009512 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>
  }
 8008ec6:	bf00      	nop
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008ece:	b480      	push	{r7}
 8008ed0:	b083      	sub	sp, #12
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
    }
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
}
 8008eee:	bf00      	nop
 8008ef0:	370c      	adds	r7, #12
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b082      	sub	sp, #8
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	330c      	adds	r3, #12
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fc f957 	bl	80051ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	3308      	adds	r3, #8
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fe f9c8 	bl	80072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fb19 	bl	800954e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b082      	sub	sp, #8
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7ff ffe2 	bl	8008efa <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b090      	sub	sp, #64	; 0x40
 8008f44:	af02      	add	r7, sp, #8
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8008f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f50:	68b9      	ldr	r1, [r7, #8]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 faec 	bl	8009530 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	68b9      	ldr	r1, [r7, #8]
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 fb1d 	bl	800959c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8008f62:	f107 0320 	add.w	r3, r7, #32
 8008f66:	68f9      	ldr	r1, [r7, #12]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fd fc60 	bl	800682e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f7fe fc9e 	bl	80078b0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8008f74:	4603      	mov	r3, r0
 8008f76:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008f7a:	f107 0120 	add.w	r1, r7, #32
 8008f7e:	f107 0010 	add.w	r0, r7, #16
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f000 fb53 	bl	8009630 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8008f8a:	f107 0310 	add.w	r3, r7, #16
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 fb68 	bl	8009664 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 8008f94:	f107 0320 	add.w	r3, r7, #32
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7fc f90e 	bl	80051ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8008f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7ff ffbf 	bl	8008f26 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
}
 8008fa8:	bf00      	nop
 8008faa:	3738      	adds	r7, #56	; 0x38
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 8008fb0:	b5b0      	push	{r4, r5, r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f000 fb5c 	bl	800967a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	1d1c      	adds	r4, r3, #4
 8008fc6:	6838      	ldr	r0, [r7, #0]
 8008fc8:	f7fc fca0 	bl	800590c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	60bb      	str	r3, [r7, #8]
 8008fd0:	6838      	ldr	r0, [r7, #0]
 8008fd2:	f7fc fca8 	bl	8005926 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	60fb      	str	r3, [r7, #12]
 8008fda:	f107 020c 	add.w	r2, r7, #12
 8008fde:	f107 0308 	add.w	r3, r7, #8
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f000 fb55 	bl	8009694 <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4619      	mov	r1, r3
 8008fee:	2004      	movs	r0, #4
 8008ff0:	f7f7 ffa4 	bl	8000f3c <_ZnwjPv>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	f000 fb62 	bl	80096c6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	1d1c      	adds	r4, r3, #4
 8009006:	6838      	ldr	r0, [r7, #0]
 8009008:	f000 fb6d 	bl	80096e6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 800900c:	4605      	mov	r5, r0
 800900e:	6838      	ldr	r0, [r7, #0]
 8009010:	f000 fb74 	bl	80096fc <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 8009014:	4603      	mov	r3, r0
 8009016:	461a      	mov	r2, r3
 8009018:	4629      	mov	r1, r5
 800901a:	4620      	mov	r0, r4
 800901c:	f000 fb7a 	bl	8009714 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>
  }
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bdb0      	pop	{r4, r5, r7, pc}

0800902a <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 800902a:	b480      	push	{r7}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	2303      	movs	r3, #3
 8009034:	4618      	mov	r0, r3
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const BinaryOp& func() const { return op; }
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4618      	mov	r0, r3
 800904c:	370c      	adds	r7, #12
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8009056:	b590      	push	{r4, r7, lr}
 8009058:	b085      	sub	sp, #20
 800905a:	af00      	add	r7, sp, #0
 800905c:	60f8      	str	r0, [r7, #12]
 800905e:	60b9      	str	r1, [r7, #8]
 8009060:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681c      	ldr	r4, [r3, #0]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	4618      	mov	r0, r3
 800906a:	f7ff ffde 	bl	800902a <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800906e:	4602      	mov	r2, r0
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	fb03 f202 	mul.w	r2, r3, r2
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4413      	add	r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4423      	add	r3, r4
  }
 800907e:	4618      	mov	r0, r3
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	bd90      	pop	{r4, r7, pc}

08009086 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8009086:	b590      	push	{r4, r7, lr}
 8009088:	b085      	sub	sp, #20
 800908a:	af00      	add	r7, sp, #0
 800908c:	60f8      	str	r0, [r7, #12]
 800908e:	60b9      	str	r1, [r7, #8]
 8009090:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681c      	ldr	r4, [r3, #0]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	4618      	mov	r0, r3
 800909a:	f7ff ffc6 	bl	800902a <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800909e:	4602      	mov	r2, r0
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	fb03 f202 	mul.w	r2, r3, r2
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	4413      	add	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4423      	add	r3, r4
  }
 80090ae:	4618      	mov	r0, r3
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd90      	pop	{r4, r7, pc}

080090b6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80090b6:	b480      	push	{r7}
 80090b8:	b085      	sub	sp, #20
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	607a      	str	r2, [r7, #4]
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	ed93 7a00 	vldr	s14, [r3]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	edd3 7a00 	vldr	s15, [r3]
 80090ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090d2:	eeb0 0a67 	vmov.f32	s0, s15
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80090e8:	2201      	movs	r2, #1
 80090ea:	2101      	movs	r1, #1
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7ff f8a2 	bl	8008236 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fb2c 	bl	8009750 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 80090f8:	bf00      	nop
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
    }
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4618      	mov	r0, r3
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8009116:	b480      	push	{r7}
 8009118:	b083      	sub	sp, #12
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	6039      	str	r1, [r7, #0]
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fb35 	bl	80097a4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4618      	mov	r0, r3
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff ffec 	bl	800912c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800915e:	b580      	push	{r7, lr}
 8009160:	b082      	sub	sp, #8
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	3314      	adds	r3, #20
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff ffea 	bl	8009144 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3310      	adds	r3, #16
 8009174:	4618      	mov	r0, r3
 8009176:	f7fc f820 	bl	80051ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fb07 	bl	800978e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4618      	mov	r0, r3
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800918a:	b580      	push	{r7, lr}
 800918c:	b082      	sub	sp, #8
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4618      	mov	r0, r3
 8009196:	f7ff ffe2 	bl	800915e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4618      	mov	r0, r3
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b092      	sub	sp, #72	; 0x48
 80091a8:	af02      	add	r7, sp, #8
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80091b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091b4:	68b9      	ldr	r1, [r7, #8]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 fada 	bl	8009770 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>
  resize_if_allowed(dst, src, func);
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	68b9      	ldr	r1, [r7, #8]
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f000 fb15 	bl	80097f0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80091c6:	f107 0320 	add.w	r3, r7, #32
 80091ca:	68f9      	ldr	r1, [r7, #12]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fd fb2e 	bl	800682e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f7fe fb6c 	bl	80078b0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 80091d8:	4603      	mov	r3, r0
 80091da:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80091de:	f107 0120 	add.w	r1, r7, #32
 80091e2:	f107 0010 	add.w	r0, r7, #16
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f000 fb4b 	bl	8009884 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80091ee:	f107 0310 	add.w	r3, r7, #16
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 fb60 	bl	80098b8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>
  DstEvaluatorType dstEvaluator(dst);
 80091f8:	f107 0320 	add.w	r3, r7, #32
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fb ffdc 	bl	80051ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8009202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009206:	4618      	mov	r0, r3
 8009208:	f7ff ffbf 	bl	800918a <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
}
 800920c:	bf00      	nop
 800920e:	3740      	adds	r7, #64	; 0x40
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8009214:	b590      	push	{r4, r7, lr}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8009220:	68b8      	ldr	r0, [r7, #8]
 8009222:	f7fb fffa 	bl	800521a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8009226:	4604      	mov	r4, r0
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7fc ffd5 	bl	80061d8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 800922e:	4603      	mov	r3, r0
 8009230:	461a      	mov	r2, r3
 8009232:	4621      	mov	r1, r4
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 fb6f 	bl	8009918 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>
}
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	bd90      	pop	{r4, r7, pc}

08009242 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8009242:	b580      	push	{r7, lr}
 8009244:	b086      	sub	sp, #24
 8009246:	af00      	add	r7, sp, #0
 8009248:	60f8      	str	r0, [r7, #12]
 800924a:	60b9      	str	r1, [r7, #8]
 800924c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	68b9      	ldr	r1, [r7, #8]
 8009256:	6978      	ldr	r0, [r7, #20]
 8009258:	f000 fb8e 	bl	8009978 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 800925c:	bf00      	nop
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
    }
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4618      	mov	r0, r3
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800927a:	b580      	push	{r7, lr}
 800927c:	b082      	sub	sp, #8
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4618      	mov	r0, r3
 8009288:	f7fb fd85 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800928c:	4603      	mov	r3, r0
 800928e:	2b01      	cmp	r3, #1
 8009290:	dd08      	ble.n	80092a4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4618      	mov	r0, r3
 8009296:	f7fb fd73 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800929a:	4603      	mov	r3, r0
 800929c:	2b01      	cmp	r3, #1
 800929e:	dd01      	ble.n	80092a4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 80092a0:	2301      	movs	r3, #1
 80092a2:	e000      	b.n	80092a6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2c>
 80092a4:	2300      	movs	r3, #0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fb76 	bl	800999e <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>
}
 80092b2:	bf00      	nop
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b082      	sub	sp, #8
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	332c      	adds	r3, #44	; 0x2c
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fd ffed 	bl	80072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	3328      	adds	r3, #40	; 0x28
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fd ffe8 	bl	80072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fb7b 	bl	80099d2 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b082      	sub	sp, #8
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff ffe2 	bl	80092ba <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4618      	mov	r0, r3
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009300:	b580      	push	{r7, lr}
 8009302:	b098      	sub	sp, #96	; 0x60
 8009304:	af02      	add	r7, sp, #8
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800930c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009310:	68b9      	ldr	r1, [r7, #8]
 8009312:	4618      	mov	r0, r3
 8009314:	f000 fb4e 	bl	80099b4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	68b9      	ldr	r1, [r7, #8]
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f000 fb7f 	bl	8009a20 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8009322:	f107 0320 	add.w	r3, r7, #32
 8009326:	68f9      	ldr	r1, [r7, #12]
 8009328:	4618      	mov	r0, r3
 800932a:	f7fe f9cb 	bl	80076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f7fe fa30 	bl	8007794 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8009334:	4603      	mov	r3, r0
 8009336:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800933a:	f107 0120 	add.w	r1, r7, #32
 800933e:	f107 0010 	add.w	r0, r7, #16
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f000 fbb5 	bl	8009ab4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800934a:	f107 0310 	add.w	r3, r7, #16
 800934e:	4618      	mov	r0, r3
 8009350:	f000 fbca 	bl	8009ae8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8009354:	f107 0320 	add.w	r3, r7, #32
 8009358:	4618      	mov	r0, r3
 800935a:	f7fd ffa4 	bl	80072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800935e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009362:	4618      	mov	r0, r3
 8009364:	f7ff ffbf 	bl	80092e6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
}
 8009368:	bf00      	nop
 800936a:	3758      	adds	r7, #88	; 0x58
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>:
    static void run(const Derived&, const OtherDerived&)
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
    }
 800937a:	bf00      	nop
 800937c:	370c      	adds	r7, #12
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr

08009386 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009386:	b580      	push	{r7, lr}
 8009388:	b082      	sub	sp, #8
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	6039      	str	r1, [r7, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	4618      	mov	r0, r3
 8009396:	f000 fbb2 	bl	8009afe <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4618      	mov	r0, r3
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
 80093ba:	b480      	push	{r7}
 80093bc:	b083      	sub	sp, #12
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4618      	mov	r0, r3
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 80093e6:	b480      	push	{r7}
 80093e8:	b083      	sub	sp, #12
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4618      	mov	r0, r3
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4618      	mov	r0, r3
 8009408:	f7fe fdad 	bl	8007f66 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 800940c:	4603      	mov	r3, r0
 800940e:	4618      	mov	r0, r3
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009416:	b580      	push	{r7, lr}
 8009418:	b082      	sub	sp, #8
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	3310      	adds	r3, #16
 8009422:	4618      	mov	r0, r3
 8009424:	f7fe fdad 	bl	8007f82 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009428:	4603      	mov	r3, r0
 800942a:	4618      	mov	r0, r3
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
	...

08009434 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009440:	68b8      	ldr	r0, [r7, #8]
 8009442:	f7ff ffdb 	bl	80093fc <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>
 8009446:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009448:	68b8      	ldr	r0, [r7, #8]
 800944a:	f7ff ffe4 	bl	8009416 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>
 800944e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	4618      	mov	r0, r3
 8009454:	f7fb fc9f 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009458:	4602      	mov	r2, r0
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	4293      	cmp	r3, r2
 800945e:	d107      	bne.n	8009470 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4618      	mov	r0, r3
 8009464:	f7fb fc8c 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009468:	4602      	mov	r2, r0
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	4293      	cmp	r3, r2
 800946e:	d001      	beq.n	8009474 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009470:	2301      	movs	r3, #1
 8009472:	e000      	b.n	8009476 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009474:	2300      	movs	r3, #0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d005      	beq.n	8009486 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	6979      	ldr	r1, [r7, #20]
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe fba1 	bl	8007bc8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	4618      	mov	r0, r3
 800948a:	f7fb fc84 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800948e:	4602      	mov	r2, r0
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	4293      	cmp	r3, r2
 8009494:	d107      	bne.n	80094a6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	4618      	mov	r0, r3
 800949a:	f7fb fc71 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800949e:	4602      	mov	r2, r0
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d006      	beq.n	80094b4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80094a6:	4b05      	ldr	r3, [pc, #20]	; (80094bc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80094a8:	4a05      	ldr	r2, [pc, #20]	; (80094c0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80094aa:	f240 21fd 	movw	r1, #765	; 0x2fd
 80094ae:	4805      	ldr	r0, [pc, #20]	; (80094c4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80094b0:	f014 fb88 	bl	801dbc4 <__assert_func>
}
 80094b4:	bf00      	nop
 80094b6:	3718      	adds	r7, #24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	080220a4 	.word	0x080220a4
 80094c0:	080236f8 	.word	0x080236f8
 80094c4:	080221b8 	.word	0x080221b8

080094c8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
 80094d4:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	605a      	str	r2, [r3, #4]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	609a      	str	r2, [r3, #8]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	69ba      	ldr	r2, [r7, #24]
 80094ec:	60da      	str	r2, [r3, #12]
  }
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	4618      	mov	r0, r3
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fb32 	bl	8009b6e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>
  }
 800950a:	bf00      	nop
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009512:	b580      	push	{r7, lr}
 8009514:	b082      	sub	sp, #8
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800951a:	2105      	movs	r1, #5
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7fe fdba 	bl	8008096 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fb33 	bl	8009b8e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>
  }
 8009528:	bf00      	nop
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>:
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	4618      	mov	r0, r3
 8009540:	f000 fb34 	bl	8009bac <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4618      	mov	r0, r3
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
 800954e:	b480      	push	{r7}
 8009550:	b083      	sub	sp, #12
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4618      	mov	r0, r3
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4618      	mov	r0, r3
 8009572:	f7fb fc10 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009576:	4603      	mov	r3, r0
 8009578:	4618      	mov	r0, r3
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	4618      	mov	r0, r3
 800958e:	f7fb fc9d 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009592:	4603      	mov	r3, r0
 8009594:	4618      	mov	r0, r3
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80095a8:	68b8      	ldr	r0, [r7, #8]
 80095aa:	f7ff ffdb 	bl	8009564 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>
 80095ae:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80095b0:	68b8      	ldr	r0, [r7, #8]
 80095b2:	f7ff ffe5 	bl	8009580 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>
 80095b6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fb fc91 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80095c0:	4602      	mov	r2, r0
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d107      	bne.n	80095d8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fb fc7e 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80095d0:	4602      	mov	r2, r0
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d001      	beq.n	80095dc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80095d8:	2301      	movs	r3, #1
 80095da:	e000      	b.n	80095de <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80095dc:	2300      	movs	r3, #0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d005      	beq.n	80095ee <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	6979      	ldr	r1, [r7, #20]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7fe fb85 	bl	8007cf8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fb fc76 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80095f6:	4602      	mov	r2, r0
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d107      	bne.n	800960e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	4618      	mov	r0, r3
 8009602:	f7fb fc63 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009606:	4602      	mov	r2, r0
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	4293      	cmp	r3, r2
 800960c:	d006      	beq.n	800961c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800960e:	4b05      	ldr	r3, [pc, #20]	; (8009624 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009610:	4a05      	ldr	r2, [pc, #20]	; (8009628 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009612:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009616:	4805      	ldr	r0, [pc, #20]	; (800962c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009618:	f014 fad4 	bl	801dbc4 <__assert_func>
}
 800961c:	bf00      	nop
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	080220a4 	.word	0x080220a4
 8009628:	080238d8 	.word	0x080238d8
 800962c:	080221b8 	.word	0x080221b8

08009630 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
 800963c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	601a      	str	r2, [r3, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	605a      	str	r2, [r3, #4]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	609a      	str	r2, [r3, #8]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	69ba      	ldr	r2, [r7, #24]
 8009654:	60da      	str	r2, [r3, #12]
  }
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fad2 	bl	8009c16 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
  evaluator() {}
 800967a:	b580      	push	{r7, lr}
 800967c:	b082      	sub	sp, #8
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4618      	mov	r0, r3
 8009686:	f000 fad5 	bl	8009c34 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4618      	mov	r0, r3
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
    {
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 fae4 	bl	8009c70 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 80096a8:	f000 faf2 	bl	8009c90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	6819      	ldr	r1, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	2300      	movs	r3, #0
 80096b8:	f000 faf1 	bl	8009c9e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b082      	sub	sp, #8
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
 80096ce:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	4611      	mov	r1, r2
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 faf5 	bl	8009cc6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>
  { }
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4618      	mov	r0, r3
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3308      	adds	r3, #8
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8009714:	b580      	push	{r7, lr}
 8009716:	b088      	sub	sp, #32
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8009720:	f107 0310 	add.w	r3, r7, #16
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	68b9      	ldr	r1, [r7, #8]
 8009728:	4618      	mov	r0, r3
 800972a:	f000 fae7 	bl	8009cfc <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>
 800972e:	f107 031c 	add.w	r3, r7, #28
 8009732:	4618      	mov	r0, r3
 8009734:	f7fd fb5f 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8009738:	f107 021c 	add.w	r2, r7, #28
 800973c:	f107 0310 	add.w	r3, r7, #16
 8009740:	4619      	mov	r1, r3
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f000 faf1 	bl	8009d2a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009748:	bf00      	nop
 800974a:	3720      	adds	r7, #32
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009758:	2202      	movs	r2, #2
 800975a:	2101      	movs	r1, #1
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7fe fd6a 	bl	8008236 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 faf2 	bl	8009d4c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 8009768:	bf00      	nop
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	4618      	mov	r0, r3
 8009780:	f000 faf4 	bl	8009d6c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4618      	mov	r0, r3
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800978e:	b480      	push	{r7}
 8009790:	b083      	sub	sp, #12
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4618      	mov	r0, r3
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4618      	mov	r0, r3
 80097b0:	370c      	adds	r7, #12
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b082      	sub	sp, #8
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fe fd5f 	bl	8008288 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 80097ca:	4603      	mov	r3, r0
 80097cc:	4618      	mov	r0, r3
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3308      	adds	r3, #8
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fe fd5f 	bl	80082a4 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 80097e6:	4603      	mov	r3, r0
 80097e8:	4618      	mov	r0, r3
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80097fc:	68b8      	ldr	r0, [r7, #8]
 80097fe:	f7ff ffdc 	bl	80097ba <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>
 8009802:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009804:	68b8      	ldr	r0, [r7, #8]
 8009806:	f7ff ffe5 	bl	80097d4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>
 800980a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4618      	mov	r0, r3
 8009810:	f7fb fb67 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009814:	4602      	mov	r2, r0
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	4293      	cmp	r3, r2
 800981a:	d107      	bne.n	800982c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	4618      	mov	r0, r3
 8009820:	f7fb fb54 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009824:	4602      	mov	r2, r0
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	4293      	cmp	r3, r2
 800982a:	d001      	beq.n	8009830 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800982c:	2301      	movs	r3, #1
 800982e:	e000      	b.n	8009832 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009830:	2300      	movs	r3, #0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d005      	beq.n	8009842 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	6979      	ldr	r1, [r7, #20]
 800983c:	4618      	mov	r0, r3
 800983e:	f7fe fa5b 	bl	8007cf8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	4618      	mov	r0, r3
 8009846:	f7fb fb4c 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800984a:	4602      	mov	r2, r0
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	4293      	cmp	r3, r2
 8009850:	d107      	bne.n	8009862 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	4618      	mov	r0, r3
 8009856:	f7fb fb39 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800985a:	4602      	mov	r2, r0
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	4293      	cmp	r3, r2
 8009860:	d006      	beq.n	8009870 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009862:	4b05      	ldr	r3, [pc, #20]	; (8009878 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009864:	4a05      	ldr	r2, [pc, #20]	; (800987c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009866:	f240 21fd 	movw	r1, #765	; 0x2fd
 800986a:	4805      	ldr	r0, [pc, #20]	; (8009880 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800986c:	f014 f9aa 	bl	801dbc4 <__assert_func>
}
 8009870:	bf00      	nop
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	080220a4 	.word	0x080220a4
 800987c:	080239ec 	.word	0x080239ec
 8009880:	080221b8 	.word	0x080221b8

08009884 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
 8009890:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	68ba      	ldr	r2, [r7, #8]
 8009896:	601a      	str	r2, [r3, #0]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	605a      	str	r2, [r3, #4]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	609a      	str	r2, [r3, #8]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	69ba      	ldr	r2, [r7, #24]
 80098a8:	60da      	str	r2, [r3, #12]
  }
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4618      	mov	r0, r3
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fa8e 	bl	8009de2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>
  }
 80098c6:	bf00      	nop
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b082      	sub	sp, #8
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fa92 	bl	8009e00 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4618      	mov	r0, r3
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>:
class dense_product_base
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7ff ffed 	bl	80098ce <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4618      	mov	r0, r3
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80098fe:	b580      	push	{r7, lr}
 8009900:	b082      	sub	sp, #8
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7ff ffed 	bl	80098e6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
	...

08009918 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8009918:	b590      	push	{r4, r7, lr}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f7ff ffea 	bl	80098fe <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	601a      	str	r2, [r3, #0]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	3304      	adds	r3, #4
 8009934:	6879      	ldr	r1, [r7, #4]
 8009936:	4618      	mov	r0, r3
 8009938:	f7fb f809 	bl	800494e <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	4618      	mov	r0, r3
 8009940:	f7fb fac4 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009944:	4604      	mov	r4, r0
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f7fc fc75 	bl	8006236 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 800994c:	4603      	mov	r3, r0
 800994e:	429c      	cmp	r4, r3
 8009950:	d005      	beq.n	800995e <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x46>
 8009952:	4b06      	ldr	r3, [pc, #24]	; (800996c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x54>)
 8009954:	4a06      	ldr	r2, [pc, #24]	; (8009970 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x58>)
 8009956:	2160      	movs	r1, #96	; 0x60
 8009958:	4806      	ldr	r0, [pc, #24]	; (8009974 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x5c>)
 800995a:	f014 f933 	bl	801dbc4 <__assert_func>
 800995e:	bf00      	nop
    }
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	4618      	mov	r0, r3
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	bd90      	pop	{r4, r7, pc}
 800996a:	bf00      	nop
 800996c:	0801fcec 	.word	0x0801fcec
 8009970:	08023c30 	.word	0x08023c30
 8009974:	0802003c 	.word	0x0802003c

08009978 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8009984:	68b9      	ldr	r1, [r7, #8]
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f000 fa45 	bl	8009e16 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	68b9      	ldr	r1, [r7, #8]
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f000 fa6e 	bl	8009e72 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009996:	bf00      	nop
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 800999e:	b480      	push	{r7}
 80099a0:	b083      	sub	sp, #12
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	6039      	str	r1, [r7, #0]
    }
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>:
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 fa8d 	bl	8009ee2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4618      	mov	r0, r3
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
 80099d2:	b480      	push	{r7}
 80099d4:	b083      	sub	sp, #12
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4618      	mov	r0, r3
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fe fccc 	bl	8008390 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 80099f8:	4603      	mov	r3, r0
 80099fa:	4618      	mov	r0, r3
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b082      	sub	sp, #8
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fb f9b6 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009a14:	4603      	mov	r3, r0
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
	...

08009a20 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009a2c:	68b8      	ldr	r0, [r7, #8]
 8009a2e:	f7ff ffdb 	bl	80099e8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>
 8009a32:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009a34:	68b8      	ldr	r0, [r7, #8]
 8009a36:	f7ff ffe4 	bl	8009a02 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>
 8009a3a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fb f9a9 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009a44:	4602      	mov	r2, r0
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d107      	bne.n	8009a5c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fb f996 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009a54:	4602      	mov	r2, r0
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d001      	beq.n	8009a60 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e000      	b.n	8009a62 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009a60:	2300      	movs	r3, #0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d005      	beq.n	8009a72 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	6979      	ldr	r1, [r7, #20]
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fe f8ab 	bl	8007bc8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fb f98e 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d107      	bne.n	8009a92 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fb f97b 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d006      	beq.n	8009aa0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009a92:	4b05      	ldr	r3, [pc, #20]	; (8009aa8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009a94:	4a05      	ldr	r2, [pc, #20]	; (8009aac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009a96:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009a9a:	4805      	ldr	r0, [pc, #20]	; (8009ab0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009a9c:	f014 f892 	bl	801dbc4 <__assert_func>
}
 8009aa0:	bf00      	nop
 8009aa2:	3718      	adds	r7, #24
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	080220a4 	.word	0x080220a4
 8009aac:	08023e9c 	.word	0x08023e9c
 8009ab0:	080221b8 	.word	0x080221b8

08009ab4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	607a      	str	r2, [r7, #4]
 8009ac0:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	601a      	str	r2, [r3, #0]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	605a      	str	r2, [r3, #4]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	609a      	str	r2, [r3, #8]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	69ba      	ldr	r2, [r7, #24]
 8009ad8:	60da      	str	r2, [r3, #12]
  }
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	4618      	mov	r0, r3
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fa2c 	bl	8009f4e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 8009af6:	bf00      	nop
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>:
  typedef Product<Lhs, Rhs, LazyProduct> XprType;
  typedef typename XprType::Scalar Scalar;
  typedef typename XprType::CoeffReturnType CoeffReturnType;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit product_evaluator(const XprType& xpr)
 8009afe:	b590      	push	{r4, r7, lr}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	6039      	str	r1, [r7, #0]
    : m_lhs(xpr.lhs()),
      m_rhs(xpr.rhs()),
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
                            //       or perhaps declare them on the fly on the packet method... We have experiment to check what's best.
      m_innerDim(xpr.lhs().cols())
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fa47 	bl	8009f9c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8009b0e:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009b10:	6838      	ldr	r0, [r7, #0]
 8009b12:	f000 fa2c 	bl	8009f6e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 8009b16:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009b18:	4619      	mov	r1, r3
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f7fa fcf8 	bl	8004510 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
      m_rhs(xpr.rhs()),
 8009b20:	6838      	ldr	r0, [r7, #0]
 8009b22:	f000 fa2f 	bl	8009f84 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>
 8009b26:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3310      	adds	r3, #16
 8009b2c:	6812      	ldr	r2, [r2, #0]
 8009b2e:	601a      	str	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3314      	adds	r3, #20
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009b34:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 8009b36:	4611      	mov	r1, r2
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f000 fa3a 	bl	8009fb2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f103 0224 	add.w	r2, r3, #36	; 0x24
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	3310      	adds	r3, #16
      m_innerDim(xpr.lhs().cols())
 8009b48:	4619      	mov	r1, r3
 8009b4a:	4610      	mov	r0, r2
 8009b4c:	f000 fa40 	bl	8009fd0 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
 8009b50:	6838      	ldr	r0, [r7, #0]
 8009b52:	f000 fa0c 	bl	8009f6e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 8009b56:	4603      	mov	r3, r0
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7fb fcc0 	bl	80054de <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	629a      	str	r2, [r3, #40]	; 0x28
    std::cerr << "CanVectorizeInner=    " << CanVectorizeInner << "\n";
    std::cerr << "EvalToRowMajor=       " << EvalToRowMajor << "\n";
    std::cerr << "Alignment=            " << Alignment << "\n";
    std::cerr << "Flags=                " << Flags << "\n";
#endif
  }
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd90      	pop	{r4, r7, pc}

08009b6e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b082      	sub	sp, #8
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009b76:	2200      	movs	r2, #0
 8009b78:	2100      	movs	r1, #0
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 fa37 	bl	8009fee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fa4d 	bl	800a020 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>
  }
 8009b86:	bf00      	nop
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b082      	sub	sp, #8
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009b96:	2106      	movs	r1, #6
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f7fe fa7c 	bl	8008096 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fa4e 	bl	800a040 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>
  }
 8009ba4:	bf00      	nop
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fa69 	bl	800a08e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8009bbc:	6838      	ldr	r0, [r7, #0]
 8009bbe:	f000 fa4e 	bl	800a05e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 8009bc2:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8009bc8:	6838      	ldr	r0, [r7, #0]
 8009bca:	f000 fa54 	bl	800a076 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>
 8009bce:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	605a      	str	r2, [r3, #4]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8009bde:	4619      	mov	r1, r3
 8009be0:	4610      	mov	r0, r2
 8009be2:	f7fd fd6f 	bl	80076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	4610      	mov	r0, r2
 8009bf4:	f7fc fe1b 	bl	800682e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8009bf8:	6838      	ldr	r0, [r7, #0]
 8009bfa:	f000 fa30 	bl	800a05e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fb f8bd 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009c06:	4602      	mov	r2, r0
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	611a      	str	r2, [r3, #16]
  }
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b082      	sub	sp, #8
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009c1e:	2100      	movs	r1, #0
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fa3f 	bl	800a0a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa5f 	bl	800a0ea <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 8009c2c:	bf00      	nop
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>:
  evaluator()
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fa63 	bl	800a108 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2203      	movs	r2, #3
 8009c46:	2100      	movs	r1, #0
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fe fa05 	bl	8008058 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4618      	mov	r0, r3
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fa5c 	bl	800a11e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f7ff ffed 	bl	8009c58 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 fa57 	bl	800a134 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>
    }
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3708      	adds	r7, #8
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8009c90:	b480      	push	{r7}
 8009c92:	af00      	add	r7, sp, #0
    }
 8009c94:	bf00      	nop
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr

08009c9e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b086      	sub	sp, #24
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	60f8      	str	r0, [r7, #12]
 8009ca6:	60b9      	str	r1, [r7, #8]
 8009ca8:	607a      	str	r2, [r7, #4]
 8009caa:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8009cac:	2301      	movs	r3, #1
 8009cae:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	68b9      	ldr	r1, [r7, #8]
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 fa49 	bl	800a150 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
    }
 8009cbe:	bf00      	nop
 8009cc0:	3718      	adds	r7, #24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8009cc6:	b5b0      	push	{r4, r5, r7, lr}
 8009cc8:	b082      	sub	sp, #8
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fa19 	bl	800a108 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009cd6:	687c      	ldr	r4, [r7, #4]
 8009cd8:	6838      	ldr	r0, [r7, #0]
 8009cda:	f000 fa6b 	bl	800a1b4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>
 8009cde:	4605      	mov	r5, r0
 8009ce0:	6838      	ldr	r0, [r7, #0]
 8009ce2:	f000 fa74 	bl	800a1ce <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	461a      	mov	r2, r3
 8009cea:	4629      	mov	r1, r5
 8009cec:	4620      	mov	r0, r4
 8009cee:	f7fe f9b3 	bl	8008058 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bdb0      	pop	{r4, r5, r7, pc}

08009cfc <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8009cfc:	b590      	push	{r4, r7, lr}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8009d08:	68b8      	ldr	r0, [r7, #8]
 8009d0a:	f7fb fd4a 	bl	80057a2 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 8009d0e:	4604      	mov	r4, r0
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f7fb fd51 	bl	80057b8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8009d16:	4603      	mov	r3, r0
 8009d18:	461a      	mov	r2, r3
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f000 fa8b 	bl	800a238 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>
}
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd90      	pop	{r4, r7, pc}

08009d2a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b086      	sub	sp, #24
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	60f8      	str	r0, [r7, #12]
 8009d32:	60b9      	str	r1, [r7, #8]
 8009d34:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	68b9      	ldr	r1, [r7, #8]
 8009d3e:	6978      	ldr	r0, [r7, #20]
 8009d40:	f000 faaa 	bl	800a298 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 8009d44:	bf00      	nop
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009d54:	2200      	movs	r2, #0
 8009d56:	2102      	movs	r1, #2
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7fe fa6c 	bl	8008236 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 faad 	bl	800a2be <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 8009d64:	bf00      	nop
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>:
  explicit product_evaluator(const XprType& xpr)
 8009d6c:	b590      	push	{r4, r7, lr}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fac8 	bl	800a30c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8009d7c:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009d7e:	6838      	ldr	r0, [r7, #0]
 8009d80:	f000 faad 	bl	800a2de <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 8009d84:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009d86:	4619      	mov	r1, r3
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f000 faca 	bl	800a322 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f103 040c 	add.w	r4, r3, #12
      m_rhs(xpr.rhs()),
 8009d94:	6838      	ldr	r0, [r7, #0]
 8009d96:	f000 faad 	bl	800a2f4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>
 8009d9a:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f000 fad4 	bl	800a34c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	3310      	adds	r3, #16
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009da8:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 8009daa:	4611      	mov	r1, r2
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fc fd3e 	bl	800682e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f103 0214 	add.w	r2, r3, #20
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	330c      	adds	r3, #12
      m_innerDim(xpr.lhs().cols())
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	f000 fad9 	bl	800a376 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 8009dc4:	6838      	ldr	r0, [r7, #0]
 8009dc6:	f000 fa8a 	bl	800a2de <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fc f8b2 	bl	8005f36 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	619a      	str	r2, [r3, #24]
  }
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd90      	pop	{r4, r7, pc}

08009de2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b082      	sub	sp, #8
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009dea:	2100      	movs	r1, #0
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fad2 	bl	800a396 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 faf2 	bl	800a3dc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>
  }
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
    }
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8009e16:	b480      	push	{r7}
 8009e18:	b083      	sub	sp, #12
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	6039      	str	r1, [r7, #0]
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	330c      	adds	r3, #12
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7ff f983 	bl	8009144 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	3308      	adds	r3, #8
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fb f9b9 	bl	80051ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fae5 	bl	800a418 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4618      	mov	r0, r3
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7ff ffe2 	bl	8009e2c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b090      	sub	sp, #64	; 0x40
 8009e76:	af02      	add	r7, sp, #8
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	60b9      	str	r1, [r7, #8]
 8009e7c:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8009e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e82:	68b9      	ldr	r1, [r7, #8]
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 fab8 	bl	800a3fa <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	68b9      	ldr	r1, [r7, #8]
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f000 faea 	bl	800a468 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 8009e94:	f107 0320 	add.w	r3, r7, #32
 8009e98:	68f9      	ldr	r1, [r7, #12]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fc fcc7 	bl	800682e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f7fd fd05 	bl	80078b0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009eac:	f107 0120 	add.w	r1, r7, #32
 8009eb0:	f107 0010 	add.w	r0, r7, #16
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f000 fb04 	bl	800a4c4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009ebc:	f107 0310 	add.w	r3, r7, #16
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 fb19 	bl	800a4f8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8009ec6:	f107 0320 	add.w	r3, r7, #32
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fb f975 	bl	80051ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8009ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7ff ffbf 	bl	8009e58 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
}
 8009eda:	bf00      	nop
 8009edc:	3738      	adds	r7, #56	; 0x38
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 8009ee2:	b590      	push	{r4, r7, lr}
 8009ee4:	b083      	sub	sp, #12
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fb25 	bl	800a53c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8009ef2:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009ef4:	6838      	ldr	r0, [r7, #0]
 8009ef6:	f000 fb0a 	bl	800a50e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 8009efa:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009efc:	4619      	mov	r1, r3
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 fb27 	bl	800a552 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>
      m_rhs(xpr.rhs()),
 8009f04:	6838      	ldr	r0, [r7, #0]
 8009f06:	f000 fb0d 	bl	800a524 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>
 8009f0a:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	625a      	str	r2, [r3, #36]	; 0x24
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009f14:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 8009f16:	4611      	mov	r1, r2
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fd fbd3 	bl	80076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      m_innerDim(xpr.lhs().cols())
 8009f28:	4619      	mov	r1, r3
 8009f2a:	4610      	mov	r0, r2
 8009f2c:	f7fd fbca 	bl	80076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8009f30:	6838      	ldr	r0, [r7, #0]
 8009f32:	f000 faec 	bl	800a50e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 8009f36:	4603      	mov	r3, r0
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fc fb58 	bl	80065ee <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	631a      	str	r2, [r3, #48]	; 0x30
  }
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4618      	mov	r0, r3
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd90      	pop	{r4, r7, pc}

08009f4e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b082      	sub	sp, #8
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009f56:	2200      	movs	r2, #0
 8009f58:	2100      	movs	r1, #0
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fb0e 	bl	800a57c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fb24 	bl	800a5ae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 8009f66:	bf00      	nop
 8009f68:	3708      	adds	r7, #8
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8009f6e:	b480      	push	{r7}
 8009f70:	b083      	sub	sp, #12
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	3310      	adds	r3, #16
 8009f90:	4618      	mov	r0, r3
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	370c      	adds	r7, #12
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b082      	sub	sp, #8
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
 8009fba:	6039      	str	r1, [r7, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f000 fb04 	bl	800a5ce <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3708      	adds	r7, #8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 fb07 	bl	800a5f2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b086      	sub	sp, #24
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	60f8      	str	r0, [r7, #12]
 8009ff6:	60b9      	str	r1, [r7, #8]
 8009ff8:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	68b8      	ldr	r0, [r7, #8]
 8009ffe:	f000 fb0e 	bl	800a61e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800a002:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800a004:	6879      	ldr	r1, [r7, #4]
 800a006:	68b8      	ldr	r0, [r7, #8]
 800a008:	f000 fb15 	bl	800a636 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800a00c:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	6979      	ldr	r1, [r7, #20]
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	f000 fb1b 	bl	800a64e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800a018:	bf00      	nop
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a028:	2201      	movs	r2, #1
 800a02a:	2100      	movs	r1, #0
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f7ff ffde 	bl	8009fee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fb31 	bl	800a69a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>
  }
 800a038:	bf00      	nop
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a048:	2107      	movs	r1, #7
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7fe f823 	bl	8008096 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 fb32 	bl	800a6ba <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>
  }
 800a056:	bf00      	nop
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a05e:	b480      	push	{r7}
 800a060:	b083      	sub	sp, #12
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4618      	mov	r0, r3
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a076:	b480      	push	{r7}
 800a078:	b083      	sub	sp, #12
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	4618      	mov	r0, r3
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a08e:	b480      	push	{r7}
 800a090:	b083      	sub	sp, #12
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4618      	mov	r0, r3
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800a0a4:	b5b0      	push	{r4, r5, r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	689c      	ldr	r4, [r3, #8]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	6839      	ldr	r1, [r7, #0]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fe fa52 	bl	8008562 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800a0be:	4605      	mov	r5, r0
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 fb06 	bl	800a6d8 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 800a0cc:	eef0 7a40 	vmov.f32	s15, s0
 800a0d0:	edc7 7a03 	vstr	s15, [r7, #12]
 800a0d4:	f107 030c 	add.w	r3, r7, #12
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4629      	mov	r1, r5
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f7fe f9f9 	bl	80084d4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a0e2:	bf00      	nop
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bdb0      	pop	{r4, r5, r7, pc}

0800a0ea <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b082      	sub	sp, #8
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a0f2:	2101      	movs	r1, #1
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f7ff ffd5 	bl	800a0a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fb25 	bl	800a74a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 800a100:	bf00      	nop
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4618      	mov	r0, r3
 800a114:	370c      	adds	r7, #12
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800a11e:	b480      	push	{r7}
 800a120:	b083      	sub	sp, #12
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
    }
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4618      	mov	r0, r3
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4618      	mov	r0, r3
 800a140:	f000 fb12 	bl	800a768 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>
    }
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4618      	mov	r0, r3
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
	...

0800a150 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d108      	bne.n	800a174 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2b03      	cmp	r3, #3
 800a166:	d105      	bne.n	800a174 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	db02      	blt.n	800a174 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	da06      	bge.n	800a182 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x32>
 800a174:	4b0c      	ldr	r3, [pc, #48]	; (800a1a8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x58>)
 800a176:	4a0d      	ldr	r2, [pc, #52]	; (800a1ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x5c>)
 800a178:	f240 1111 	movw	r1, #273	; 0x111
 800a17c:	480c      	ldr	r0, [pc, #48]	; (800a1b0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x60>)
 800a17e:	f013 fd21 	bl	801dbc4 <__assert_func>
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	617b      	str	r3, [r7, #20]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	613b      	str	r3, [r7, #16]
  }
 800a18a:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	fb02 f103 	mul.w	r1, r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	f000 faf0 	bl	800a77e <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>
    }
 800a19e:	bf00      	nop
 800a1a0:	3718      	adds	r7, #24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	080224bc 	.word	0x080224bc
 800a1ac:	08024054 	.word	0x08024054
 800a1b0:	080226d8 	.word	0x080226d8

0800a1b4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 faea 	bl	800a798 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b082      	sub	sp, #8
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
      return derived().outerStride();
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fae9 	bl	800a7ae <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 faf0 	bl	800a7c4 <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>
 800a1e4:	4603      	mov	r3, r0
    }
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b082      	sub	sp, #8
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 faf0 	bl	800a7dc <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4618      	mov	r0, r3
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>:
class dense_product_base
 800a206:	b580      	push	{r7, lr}
 800a208:	b082      	sub	sp, #8
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7ff ffed 	bl	800a1ee <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4618      	mov	r0, r3
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800a21e:	b580      	push	{r7, lr}
 800a220:	b082      	sub	sp, #8
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7ff ffed 	bl	800a206 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4618      	mov	r0, r3
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800a238:	b590      	push	{r4, r7, lr}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f7ff ffea 	bl	800a21e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a252:	e883 0003 	stmia.w	r3, {r0, r1}
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	3308      	adds	r3, #8
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	6812      	ldr	r2, [r2, #0]
 800a25e:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800a260:	68b8      	ldr	r0, [r7, #8]
 800a262:	f7fb fad8 	bl	8005816 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800a266:	4604      	mov	r4, r0
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f7fb fae2 	bl	8005832 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800a26e:	4603      	mov	r3, r0
 800a270:	429c      	cmp	r4, r3
 800a272:	d005      	beq.n	800a280 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x48>
 800a274:	4b05      	ldr	r3, [pc, #20]	; (800a28c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x54>)
 800a276:	4a06      	ldr	r2, [pc, #24]	; (800a290 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x58>)
 800a278:	2160      	movs	r1, #96	; 0x60
 800a27a:	4806      	ldr	r0, [pc, #24]	; (800a294 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x5c>)
 800a27c:	f013 fca2 	bl	801dbc4 <__assert_func>
 800a280:	bf00      	nop
    }
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	4618      	mov	r0, r3
 800a286:	3714      	adds	r7, #20
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd90      	pop	{r4, r7, pc}
 800a28c:	0801fcec 	.word	0x0801fcec
 800a290:	080240e8 	.word	0x080240e8
 800a294:	0802003c 	.word	0x0802003c

0800a298 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800a2a4:	68b9      	ldr	r1, [r7, #8]
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 fab9 	bl	800a81e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	68b9      	ldr	r1, [r7, #8]
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f000 fb14 	bl	800a8de <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800a2b6:	bf00      	nop
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b082      	sub	sp, #8
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	2102      	movs	r1, #2
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7fd ffb3 	bl	8008236 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 fb3c 	bl	800a94e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800a2d6:	bf00      	nop
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a2de:	b480      	push	{r7}
 800a2e0:	b083      	sub	sp, #12
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	3308      	adds	r3, #8
 800a300:	4618      	mov	r0, r3
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4618      	mov	r0, r3
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 800a322:	b580      	push	{r7, lr}
 800a324:	b082      	sub	sp, #8
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	6039      	str	r1, [r7, #0]
    {
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fa fc75 	bl	8004c1e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 800a334:	f7fa fc83 	bl	8004c3e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6839      	ldr	r1, [r7, #0]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 fb16 	bl	800a96e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4618      	mov	r0, r3
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>:
    explicit Matrix(const T& x)
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
    {
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4618      	mov	r0, r3
 800a35a:	f7fa fc3d 	bl	8004bd8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800a35e:	f7fa fc4b 	bl	8004bf8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	4618      	mov	r0, r3
 800a368:	f000 fb0e 	bl	800a988 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 800a376:	b580      	push	{r7, lr}
 800a378:	b082      	sub	sp, #8
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	4611      	mov	r1, r2
 800a386:	4618      	mov	r0, r3
 800a388:	f000 fb0b 	bl	800a9a2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>
  { }
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4618      	mov	r0, r3
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800a396:	b5b0      	push	{r4, r5, r7, lr}
 800a398:	b084      	sub	sp, #16
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
 800a39e:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	689c      	ldr	r4, [r3, #8]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	6839      	ldr	r1, [r7, #0]
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe f8d9 	bl	8008562 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800a3b0:	4605      	mov	r5, r0
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f000 fb09 	bl	800a9d0 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>
 800a3be:	eef0 7a40 	vmov.f32	s15, s0
 800a3c2:	edc7 7a03 	vstr	s15, [r7, #12]
 800a3c6:	f107 030c 	add.w	r3, r7, #12
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f7fe f880 	bl	80084d4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a3d4:	bf00      	nop
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bdb0      	pop	{r4, r5, r7, pc}

0800a3dc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a3e4:	2101      	movs	r1, #1
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f7ff ffd5 	bl	800a396 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fb28 	bl	800aa42 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>
  }
 800a3f2:	bf00      	nop
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b082      	sub	sp, #8
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
 800a402:	6039      	str	r1, [r7, #0]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6839      	ldr	r1, [r7, #0]
 800a408:	4618      	mov	r0, r3
 800a40a:	f000 fb29 	bl	800aa60 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4618      	mov	r0, r3
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4618      	mov	r0, r3
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800a42e:	b580      	push	{r7, lr}
 800a430:	b082      	sub	sp, #8
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fa fd51 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800a440:	4603      	mov	r3, r0
 800a442:	4618      	mov	r0, r3
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b082      	sub	sp, #8
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	3304      	adds	r3, #4
 800a456:	4618      	mov	r0, r3
 800a458:	f7fc fc05 	bl	8006c66 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 800a45c:	4603      	mov	r3, r0
 800a45e:	4618      	mov	r0, r3
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
	...

0800a468 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 800a468:	b590      	push	{r4, r7, lr}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	4618      	mov	r0, r3
 800a478:	f7fa fd33 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800a47c:	4604      	mov	r4, r0
 800a47e:	68b8      	ldr	r0, [r7, #8]
 800a480:	f7ff ffd5 	bl	800a42e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>
 800a484:	4603      	mov	r3, r0
 800a486:	429c      	cmp	r4, r3
 800a488:	d10a      	bne.n	800a4a0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fa fd1d 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800a492:	4604      	mov	r4, r0
 800a494:	68b8      	ldr	r0, [r7, #8]
 800a496:	f7ff ffd8 	bl	800a44a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>
 800a49a:	4603      	mov	r3, r0
 800a49c:	429c      	cmp	r4, r3
 800a49e:	d006      	beq.n	800a4ae <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 800a4a0:	4b05      	ldr	r3, [pc, #20]	; (800a4b8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 800a4a2:	4a06      	ldr	r2, [pc, #24]	; (800a4bc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 800a4a4:	f240 21f2 	movw	r1, #754	; 0x2f2
 800a4a8:	4805      	ldr	r0, [pc, #20]	; (800a4c0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 800a4aa:	f013 fb8b 	bl	801dbc4 <__assert_func>
}
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd90      	pop	{r4, r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	080227c0 	.word	0x080227c0
 800a4bc:	08024294 	.word	0x08024294
 800a4c0:	080221b8 	.word	0x080221b8

0800a4c4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
 800a4d0:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	68ba      	ldr	r2, [r7, #8]
 800a4d6:	601a      	str	r2, [r3, #0]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	605a      	str	r2, [r3, #4]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	609a      	str	r2, [r3, #8]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	69ba      	ldr	r2, [r7, #24]
 800a4e8:	60da      	str	r2, [r3, #12]
  }
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 fae6 	bl	800aad2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>
  }
 800a506:	bf00      	nop
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a50e:	b480      	push	{r7}
 800a510:	b083      	sub	sp, #12
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4618      	mov	r0, r3
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	4618      	mov	r0, r3
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4618      	mov	r0, r3
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr

0800a552 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	6039      	str	r1, [r7, #0]
    {
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fa fb17 	bl	8004b92 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800a564:	f7fa fb25 	bl	8004bb2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 fabf 	bl	800aaf0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800a588:	6879      	ldr	r1, [r7, #4]
 800a58a:	68b8      	ldr	r0, [r7, #8]
 800a58c:	f000 fabd 	bl	800ab0a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800a590:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800a592:	6879      	ldr	r1, [r7, #4]
 800a594:	68b8      	ldr	r0, [r7, #8]
 800a596:	f000 fac4 	bl	800ab22 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800a59a:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	6979      	ldr	r1, [r7, #20]
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f000 faca 	bl	800ab3a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800a5a6:	bf00      	nop
 800a5a8:	3718      	adds	r7, #24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff ffde 	bl	800a57c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 fae0 	bl	800ab86 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 800a5c6:	bf00      	nop
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b082      	sub	sp, #8
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	6039      	str	r1, [r7, #0]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 fae4 	bl	800aba6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6839      	ldr	r1, [r7, #0]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f000 faea 	bl	800abbc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3708      	adds	r7, #8
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800a5f2:	b590      	push	{r4, r7, lr}
 800a5f4:	b083      	sub	sp, #12
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	6039      	str	r1, [r7, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 fb11 	bl	800ac24 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800a602:	687c      	ldr	r4, [r7, #4]
 800a604:	6838      	ldr	r0, [r7, #0]
 800a606:	f000 fb01 	bl	800ac0c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800a60a:	4603      	mov	r3, r0
 800a60c:	4619      	mov	r1, r3
 800a60e:	4620      	mov	r0, r4
 800a610:	f7fc f90d 	bl	800682e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4618      	mov	r0, r3
 800a618:	370c      	adds	r7, #12
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd90      	pop	{r4, r7, pc}

0800a61e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800a61e:	b480      	push	{r7}
 800a620:	b083      	sub	sp, #12
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	6039      	str	r1, [r7, #0]
      : inner;
 800a628:	683b      	ldr	r3, [r7, #0]
  }
 800a62a:	4618      	mov	r0, r3
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800a636:	b480      	push	{r7}
 800a638:	b083      	sub	sp, #12
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	6039      	str	r1, [r7, #0]
      : outer;
 800a640:	687b      	ldr	r3, [r7, #4]
  }
 800a642:	4618      	mov	r0, r3
 800a644:	370c      	adds	r7, #12
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800a64e:	b5b0      	push	{r4, r5, r7, lr}
 800a650:	b086      	sub	sp, #24
 800a652:	af00      	add	r7, sp, #0
 800a654:	60f8      	str	r0, [r7, #12]
 800a656:	60b9      	str	r1, [r7, #8]
 800a658:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	689c      	ldr	r4, [r3, #8]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	68b9      	ldr	r1, [r7, #8]
 800a666:	4618      	mov	r0, r3
 800a668:	f7fe f9c4 	bl	80089f4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800a66c:	4605      	mov	r5, r0
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	68b9      	ldr	r1, [r7, #8]
 800a676:	4618      	mov	r0, r3
 800a678:	f000 fadf 	bl	800ac3a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>
 800a67c:	eef0 7a40 	vmov.f32	s15, s0
 800a680:	edc7 7a05 	vstr	s15, [r7, #20]
 800a684:	f107 0314 	add.w	r3, r7, #20
 800a688:	461a      	mov	r2, r3
 800a68a:	4629      	mov	r1, r5
 800a68c:	4620      	mov	r0, r4
 800a68e:	f7fd ff21 	bl	80084d4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a692:	bf00      	nop
 800a694:	3718      	adds	r7, #24
 800a696:	46bd      	mov	sp, r7
 800a698:	bdb0      	pop	{r4, r5, r7, pc}

0800a69a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b082      	sub	sp, #8
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a6a2:	2202      	movs	r2, #2
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f7ff fca1 	bl	8009fee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 faf7 	bl	800aca0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>
  }
 800a6b2:	bf00      	nop
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b082      	sub	sp, #8
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a6c2:	2108      	movs	r1, #8
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f7fd fce6 	bl	8008096 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 faf8 	bl	800acc0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>
  }
 800a6d0:	bf00      	nop
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  /* Allow index-based non-packet access. It is impossible though to allow index-based packed access,
   * which is why we don't set the LinearAccessBit.
   * TODO: this seems possible when the result is a vector
   */
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  const CoeffReturnType coeff(Index index) const
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b0a4      	sub	sp, #144	; 0x90
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  {
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6819      	ldr	r1, [r3, #0]
 800a6f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a6f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 faea 	bl	800acd4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800a700:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a704:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a708:	4611      	mov	r1, r2
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 faf5 	bl	800acfa <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6859      	ldr	r1, [r3, #4]
 800a714:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a718:	2200      	movs	r2, #0
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 fafe 	bl	800ad1c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>
 800a720:	f107 030c 	add.w	r3, r7, #12
 800a724:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a728:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a72c:	4618      	mov	r0, r3
 800a72e:	f000 fb08 	bl	800ad42 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800a732:	f107 030c 	add.w	r3, r7, #12
 800a736:	4618      	mov	r0, r3
 800a738:	f000 fb31 	bl	800ad9e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>
 800a73c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a740:	eeb0 0a67 	vmov.f32	s0, s15
 800a744:	3790      	adds	r7, #144	; 0x90
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b082      	sub	sp, #8
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a752:	2102      	movs	r1, #2
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7ff fca5 	bl	800a0a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fb3a 	bl	800add4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 800a760:	bf00      	nop
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>:
  plain_array()
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800a770:	f7fc fbd4 	bl	8006f1c <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4618      	mov	r0, r3
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800a77e:	b480      	push	{r7}
 800a780:	b085      	sub	sp, #20
 800a782:	af00      	add	r7, sp, #0
 800a784:	60f8      	str	r0, [r7, #12]
 800a786:	60b9      	str	r1, [r7, #8]
 800a788:	607a      	str	r2, [r7, #4]
 800a78a:	603b      	str	r3, [r7, #0]
 800a78c:	bf00      	nop
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	370c      	adds	r7, #12
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800a7ae:	b480      	push	{r7}
 800a7b0:	b083      	sub	sp, #12
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fb0b 	bl	800ade8 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
    }
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr

0800a7f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b082      	sub	sp, #8
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
 800a7fa:	f000 fb01 	bl	800ae00 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>
 800a7fe:	4603      	mov	r3, r0
 800a800:	4618      	mov	r0, r3
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	f000 fafe 	bl	800ae10 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>
 800a814:	4603      	mov	r3, r0
 800a816:	4618      	mov	r0, r3
 800a818:	3708      	adds	r7, #8
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800a81e:	b580      	push	{r7, lr}
 800a820:	b082      	sub	sp, #8
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7ff ffe1 	bl	800a7f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800a830:	4603      	mov	r3, r0
 800a832:	2b01      	cmp	r3, #1
 800a834:	dd08      	ble.n	800a848 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4618      	mov	r0, r3
 800a83a:	f7ff ffe5 	bl	800a808 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b01      	cmp	r3, #1
 800a842:	dd01      	ble.n	800a848 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800a844:	2301      	movs	r3, #1
 800a846:	e000      	b.n	800a84a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2c>
 800a848:	2300      	movs	r3, #0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800a84e:	6839      	ldr	r1, [r7, #0]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 fae5 	bl	800ae20 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>
}
 800a856:	bf00      	nop
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800a85e:	b580      	push	{r7, lr}
 800a860:	b082      	sub	sp, #8
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4618      	mov	r0, r3
 800a86a:	f7fc fd1c 	bl	80072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 fafb 	bl	800ae6a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4618      	mov	r0, r3
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800a87e:	b580      	push	{r7, lr}
 800a880:	b082      	sub	sp, #8
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4618      	mov	r0, r3
 800a88a:	f7ff ffe8 	bl	800a85e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4618      	mov	r0, r3
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	332c      	adds	r3, #44	; 0x2c
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7ff ffea 	bl	800a87e <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	3328      	adds	r3, #40	; 0x28
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fc fcf9 	bl	80072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 facd 	bl	800ae54 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7ff ffe2 	bl	800a898 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b098      	sub	sp, #96	; 0x60
 800a8e2:	af02      	add	r7, sp, #8
 800a8e4:	60f8      	str	r0, [r7, #12]
 800a8e6:	60b9      	str	r1, [r7, #8]
 800a8e8:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800a8ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8ee:	68b9      	ldr	r1, [r7, #8]
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 faa0 	bl	800ae36 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	68b9      	ldr	r1, [r7, #8]
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f000 fadc 	bl	800aeb8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800a900:	f107 0320 	add.w	r3, r7, #32
 800a904:	68f9      	ldr	r1, [r7, #12]
 800a906:	4618      	mov	r0, r3
 800a908:	f7fe fedd 	bl	80096c6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f000 fb1d 	bl	800af4c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>
 800a912:	4603      	mov	r3, r0
 800a914:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a918:	f107 0120 	add.w	r1, r7, #32
 800a91c:	f107 0010 	add.w	r0, r7, #16
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f000 fb1d 	bl	800af62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800a928:	f107 0310 	add.w	r3, r7, #16
 800a92c:	4618      	mov	r0, r3
 800a92e:	f000 fb32 	bl	800af96 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800a932:	f107 0320 	add.w	r3, r7, #32
 800a936:	4618      	mov	r0, r3
 800a938:	f7fc fd8a 	bl	8007450 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800a93c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a940:	4618      	mov	r0, r3
 800a942:	f7ff ffbf 	bl	800a8c4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
}
 800a946:	bf00      	nop
 800a948:	3758      	adds	r7, #88	; 0x58
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a94e:	b580      	push	{r7, lr}
 800a950:	b082      	sub	sp, #8
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a956:	2202      	movs	r2, #2
 800a958:	2102      	movs	r1, #2
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f7fd fc6b 	bl	8008236 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fb23 	bl	800afac <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800a966:	bf00      	nop
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800a96e:	b580      	push	{r7, lr}
 800a970:	b082      	sub	sp, #8
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800a978:	6839      	ldr	r1, [r7, #0]
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fb20 	bl	800afc0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800a980:	bf00      	nop
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800a992:	6839      	ldr	r1, [r7, #0]
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fb34 	bl	800b002 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800a99a:	bf00      	nop
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 800a9a2:	b590      	push	{r4, r7, lr}
 800a9a4:	b083      	sub	sp, #12
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 fb56 	bl	800b05e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 800a9b2:	687c      	ldr	r4, [r7, #4]
 800a9b4:	6838      	ldr	r0, [r7, #0]
 800a9b6:	f000 fb45 	bl	800b044 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4619      	mov	r1, r3
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f7fc fad8 	bl	8006f76 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd90      	pop	{r4, r7, pc}

0800a9d0 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b0a2      	sub	sp, #136	; 0x88
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800a9e6:	6879      	ldr	r1, [r7, #4]
 800a9e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a9ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f000 fb3f 	bl	800b074 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800a9f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a9fa:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800a9fe:	4611      	mov	r1, r2
 800aa00:	4618      	mov	r0, r3
 800aa02:	f000 fb4a 	bl	800b09a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f103 010c 	add.w	r1, r3, #12
 800aa0c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800aa10:	2200      	movs	r2, #0
 800aa12:	4618      	mov	r0, r3
 800aa14:	f000 fb52 	bl	800b0bc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800aa18:	f107 030c 	add.w	r3, r7, #12
 800aa1c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800aa20:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800aa24:	4618      	mov	r0, r3
 800aa26:	f000 fb5c 	bl	800b0e2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800aa2a:	f107 030c 	add.w	r3, r7, #12
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f000 fb85 	bl	800b13e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800aa34:	eef0 7a40 	vmov.f32	s15, s0
  }
 800aa38:	eeb0 0a67 	vmov.f32	s0, s15
 800aa3c:	3788      	adds	r7, #136	; 0x88
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b082      	sub	sp, #8
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800aa4a:	2102      	movs	r1, #2
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f7ff fca2 	bl	800a396 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 fb8e 	bl	800b174 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>
  }
 800aa58:	bf00      	nop
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 800aa60:	b590      	push	{r4, r7, lr}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fba4 	bl	800b1b8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800aa70:	6838      	ldr	r0, [r7, #0]
 800aa72:	f000 fb89 	bl	800b188 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800aa76:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	601a      	str	r2, [r3, #0]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	1d1c      	adds	r4, r3, #4
      m_rhs(xpr.rhs()),
 800aa80:	6838      	ldr	r0, [r7, #0]
 800aa82:	f000 fb8d 	bl	800b1a0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>
 800aa86:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800aa88:	4619      	mov	r1, r3
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f000 fb9f 	bl	800b1ce <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	f7fb fec6 	bl	800682e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 800aaac:	4619      	mov	r1, r3
 800aaae:	4610      	mov	r0, r2
 800aab0:	f7ff fc61 	bl	800a376 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 800aab4:	6838      	ldr	r0, [r7, #0]
 800aab6:	f000 fb67 	bl	800b188 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800aaba:	4603      	mov	r3, r0
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7fa fa05 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800aac2:	4602      	mov	r2, r0
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	611a      	str	r2, [r3, #16]
  }
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4618      	mov	r0, r3
 800aacc:	370c      	adds	r7, #12
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd90      	pop	{r4, r7, pc}

0800aad2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b082      	sub	sp, #8
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800aada:	2100      	movs	r1, #0
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 fb8b 	bl	800b1f8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 fbab 	bl	800b23e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>
  }
 800aae8:	bf00      	nop
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800aafa:	6839      	ldr	r1, [r7, #0]
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fbad 	bl	800b25c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800ab02:	bf00      	nop
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800ab0a:	b480      	push	{r7}
 800ab0c:	b083      	sub	sp, #12
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
 800ab12:	6039      	str	r1, [r7, #0]
      : inner;
 800ab14:	683b      	ldr	r3, [r7, #0]
  }
 800ab16:	4618      	mov	r0, r3
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800ab22:	b480      	push	{r7}
 800ab24:	b083      	sub	sp, #12
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
 800ab2a:	6039      	str	r1, [r7, #0]
      : outer;
 800ab2c:	687b      	ldr	r3, [r7, #4]
  }
 800ab2e:	4618      	mov	r0, r3
 800ab30:	370c      	adds	r7, #12
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr

0800ab3a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800ab3a:	b5b0      	push	{r4, r5, r7, lr}
 800ab3c:	b086      	sub	sp, #24
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	60f8      	str	r0, [r7, #12]
 800ab42:	60b9      	str	r1, [r7, #8]
 800ab44:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	689c      	ldr	r4, [r3, #8]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	68b9      	ldr	r1, [r7, #8]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7fd ff4e 	bl	80089f4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800ab58:	4605      	mov	r5, r0
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	68b9      	ldr	r1, [r7, #8]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f000 fb9b 	bl	800b29e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>
 800ab68:	eef0 7a40 	vmov.f32	s15, s0
 800ab6c:	edc7 7a05 	vstr	s15, [r7, #20]
 800ab70:	f107 0314 	add.w	r3, r7, #20
 800ab74:	461a      	mov	r2, r3
 800ab76:	4629      	mov	r1, r5
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f7fd fcab 	bl	80084d4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800ab7e:	bf00      	nop
 800ab80:	3718      	adds	r7, #24
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bdb0      	pop	{r4, r5, r7, pc}

0800ab86 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b082      	sub	sp, #8
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ab8e:	2202      	movs	r2, #2
 800ab90:	2100      	movs	r1, #0
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f7ff fcf2 	bl	800a57c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fbb2 	bl	800b302 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 800ab9e:	bf00      	nop
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800aba6:	b480      	push	{r7}
 800aba8:	b083      	sub	sp, #12
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4618      	mov	r0, r3
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800abbc:	b590      	push	{r4, r7, lr}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
 800abc6:	687c      	ldr	r4, [r7, #4]
 800abc8:	6838      	ldr	r0, [r7, #0]
 800abca:	f000 fbaa 	bl	800b322 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>
 800abce:	4603      	mov	r3, r0
 800abd0:	4619      	mov	r1, r3
 800abd2:	4620      	mov	r0, r4
 800abd4:	f7fa fc0a 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	1d1c      	adds	r4, r3, #4
 800abdc:	6838      	ldr	r0, [r7, #0]
 800abde:	f000 fbac 	bl	800b33a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>
 800abe2:	4603      	mov	r3, r0
 800abe4:	4619      	mov	r1, r3
 800abe6:	4620      	mov	r0, r4
 800abe8:	f000 fbbf 	bl	800b36a <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f103 0408 	add.w	r4, r3, #8
 800abf2:	6838      	ldr	r0, [r7, #0]
 800abf4:	f000 fbad 	bl	800b352 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>
 800abf8:	4603      	mov	r3, r0
 800abfa:	4619      	mov	r1, r3
 800abfc:	4620      	mov	r0, r4
 800abfe:	f000 fbc3 	bl	800b388 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4618      	mov	r0, r3
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd90      	pop	{r4, r7, pc}

0800ac0c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4618      	mov	r0, r3
 800ac1a:	370c      	adds	r7, #12
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	370c      	adds	r7, #12
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr

0800ac3a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b0a4      	sub	sp, #144	; 0x90
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	60f8      	str	r0, [r7, #12]
 800ac42:	60b9      	str	r1, [r7, #8]
 800ac44:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800ac46:	68f9      	ldr	r1, [r7, #12]
 800ac48:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f000 fbde 	bl	800b410 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>
 800ac54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ac58:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ac5c:	4611      	mov	r1, r2
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 fbf9 	bl	800b456 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f103 0110 	add.w	r1, r3, #16
 800ac6a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	4618      	mov	r0, r3
 800ac72:	f000 fc01 	bl	800b478 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>
 800ac76:	f107 0310 	add.w	r3, r7, #16
 800ac7a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800ac7e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 fc0b 	bl	800b49e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>
 800ac88:	f107 0310 	add.w	r3, r7, #16
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f000 fc34 	bl	800b4fa <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>
 800ac92:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ac96:	eeb0 0a67 	vmov.f32	s0, s15
 800ac9a:	3790      	adds	r7, #144	; 0x90
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800aca8:	2200      	movs	r2, #0
 800acaa:	2101      	movs	r1, #1
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f7ff f99e 	bl	8009fee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fc3c 	bl	800b530 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>
  }
 800acb8:	bf00      	nop
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	bf00      	nop
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>:
  return RowXpr(derived(), i);
}

/// This is the const version of row(). */
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
ConstRowXpr row(Index i) const
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
{
  return ConstRowXpr(derived(), i);
 800ace0:	68b8      	ldr	r0, [r7, #8]
 800ace2:	f7fa fc62 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800ace6:	4603      	mov	r3, r0
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	4619      	mov	r1, r3
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f000 fc2f 	bl	800b550 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>
}
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b082      	sub	sp, #8
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
 800ad02:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800ad04:	6838      	ldr	r0, [r7, #0]
 800ad06:	f000 fc4d 	bl	800b5a4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fc6b 	bl	800b5ea <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>
}
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800ad28:	68b8      	ldr	r0, [r7, #8]
 800ad2a:	f7fa fa76 	bl	800521a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	4619      	mov	r1, r3
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f000 fc6f 	bl	800b618 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>
}
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	3710      	adds	r7, #16
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
  * \sa class CwiseBinaryOp, cwiseAbs2
  */
template<typename OtherDerived>
EIGEN_DEVICE_FUNC
EIGEN_STRONG_INLINE const EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800ad42:	b5b0      	push	{r4, r5, r7, lr}
 800ad44:	b086      	sub	sp, #24
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	60f8      	str	r0, [r7, #12]
 800ad4a:	60b9      	str	r1, [r7, #8]
 800ad4c:	607a      	str	r2, [r7, #4]
{
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800ad4e:	68b8      	ldr	r0, [r7, #8]
 800ad50:	f000 fc8a 	bl	800b668 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800ad54:	4604      	mov	r4, r0
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fc91 	bl	800b67e <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>
 800ad5c:	4605      	mov	r5, r0
 800ad5e:	f107 0314 	add.w	r3, r7, #20
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fa fab8 	bl	80052d8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800ad68:	f107 0314 	add.w	r3, r7, #20
 800ad6c:	462a      	mov	r2, r5
 800ad6e:	4621      	mov	r1, r4
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	f000 fcd7 	bl	800b724 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	3718      	adds	r7, #24
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bdb0      	pop	{r4, r5, r7, pc}

0800ad7e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b082      	sub	sp, #8
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 fd2a 	bl	800b7e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 fd31 	bl	800b7f6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>
 800ad94:	4603      	mov	r3, r0
 800ad96:	4618      	mov	r0, r3
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>:
  *
  * \sa trace(), prod(), mean()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
DenseBase<Derived>::sum() const
 800ad9e:	b590      	push	{r4, r7, lr}
 800ada0:	b085      	sub	sp, #20
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
{
  if(SizeAtCompileTime==0 || (SizeAtCompileTime==Dynamic && size()==0))
    return Scalar(0);
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fd1a 	bl	800b7e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800adac:	4604      	mov	r4, r0
 800adae:	f107 030c 	add.w	r3, r7, #12
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7fa fd87 	bl	80058c6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800adb8:	f107 030c 	add.w	r3, r7, #12
 800adbc:	4619      	mov	r1, r3
 800adbe:	4620      	mov	r0, r4
 800adc0:	f000 fdf4 	bl	800b9ac <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800adc4:	eef0 7a40 	vmov.f32	s15, s0
 800adc8:	bf00      	nop
}
 800adca:	eeb0 0a67 	vmov.f32	s0, s15
 800adce:	3714      	adds	r7, #20
 800add0:	46bd      	mov	sp, r7
 800add2:	bd90      	pop	{r4, r7, pc}

0800add4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	bf00      	nop
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fe21 	bl	800ba38 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800adf6:	4603      	mov	r3, r0
    }
 800adf8:	4618      	mov	r0, r3
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 800ae00:	b480      	push	{r7}
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	2303      	movs	r3, #3
 800ae06:	4618      	mov	r0, r3
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 800ae10:	b480      	push	{r7}
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	2303      	movs	r3, #3
 800ae16:	4618      	mov	r0, r3
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>:
    static void run(const Derived&, const OtherDerived&)
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
    }
 800ae2a:	bf00      	nop
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr

0800ae36 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b082      	sub	sp, #8
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	6039      	str	r1, [r7, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6839      	ldr	r1, [r7, #0]
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 fe07 	bl	800ba58 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	370c      	adds	r7, #12
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
 800ae6a:	b480      	push	{r7}
 800ae6c:	b083      	sub	sp, #12
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4618      	mov	r0, r3
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fb fdea 	bl	8006a64 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800ae90:	4603      	mov	r3, r0
 800ae92:	4618      	mov	r0, r3
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b082      	sub	sp, #8
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	3308      	adds	r3, #8
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fb fdea 	bl	8006a80 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800aeac:	4603      	mov	r3, r0
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
	...

0800aeb8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800aec4:	68b8      	ldr	r0, [r7, #8]
 800aec6:	f7ff ffdb 	bl	800ae80 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>
 800aeca:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800aecc:	68b8      	ldr	r0, [r7, #8]
 800aece:	f7ff ffe4 	bl	800ae9a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>
 800aed2:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7ff fc8b 	bl	800a7f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800aedc:	4602      	mov	r2, r0
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d107      	bne.n	800aef4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7ff fc8e 	bl	800a808 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800aeec:	4602      	mov	r2, r0
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d001      	beq.n	800aef8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800aef4:	2301      	movs	r3, #1
 800aef6:	e000      	b.n	800aefa <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800aef8:	2300      	movs	r3, #0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d005      	beq.n	800af0a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	6979      	ldr	r1, [r7, #20]
 800af04:	4618      	mov	r0, r3
 800af06:	f7ff f923 	bl	800a150 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7ff fc70 	bl	800a7f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800af12:	4602      	mov	r2, r0
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	4293      	cmp	r3, r2
 800af18:	d107      	bne.n	800af2a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7ff fc73 	bl	800a808 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800af22:	4602      	mov	r2, r0
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	4293      	cmp	r3, r2
 800af28:	d006      	beq.n	800af38 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800af2a:	4b05      	ldr	r3, [pc, #20]	; (800af40 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800af2c:	4a05      	ldr	r2, [pc, #20]	; (800af44 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800af2e:	f240 21fd 	movw	r1, #765	; 0x2fd
 800af32:	4805      	ldr	r0, [pc, #20]	; (800af48 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800af34:	f012 fe46 	bl	801dbc4 <__assert_func>
}
 800af38:	bf00      	nop
 800af3a:	3718      	adds	r7, #24
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	080220a4 	.word	0x080220a4
 800af44:	08024450 	.word	0x08024450
 800af48:	080221b8 	.word	0x080221b8

0800af4c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	4618      	mov	r0, r3
 800af58:	370c      	adds	r7, #12
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr

0800af62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800af62:	b480      	push	{r7}
 800af64:	b085      	sub	sp, #20
 800af66:	af00      	add	r7, sp, #0
 800af68:	60f8      	str	r0, [r7, #12]
 800af6a:	60b9      	str	r1, [r7, #8]
 800af6c:	607a      	str	r2, [r7, #4]
 800af6e:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	601a      	str	r2, [r3, #0]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	605a      	str	r2, [r3, #4]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	683a      	ldr	r2, [r7, #0]
 800af80:	609a      	str	r2, [r3, #8]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	69ba      	ldr	r2, [r7, #24]
 800af86:	60da      	str	r2, [r3, #12]
  }
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	4618      	mov	r0, r3
 800af8c:	3714      	adds	r7, #20
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800af96:	b580      	push	{r7, lr}
 800af98:	b082      	sub	sp, #8
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 fd92 	bl	800bac8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>
  }
 800afa4:	bf00      	nop
 800afa6:	3708      	adds	r7, #8
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800afc0:	b5b0      	push	{r4, r5, r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7fa fa1a 	bl	8005404 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800afd0:	4604      	mov	r4, r0
 800afd2:	6838      	ldr	r0, [r7, #0]
 800afd4:	f7fa ff75 	bl	8005ec2 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 800afd8:	4605      	mov	r5, r0
 800afda:	f107 030c 	add.w	r3, r7, #12
 800afde:	4618      	mov	r0, r3
 800afe0:	f7fb ff09 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800afe4:	f107 030c 	add.w	r3, r7, #12
 800afe8:	461a      	mov	r2, r3
 800afea:	4629      	mov	r1, r5
 800afec:	4620      	mov	r0, r4
 800afee:	f000 fd7b 	bl	800bae8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7fa fa06 	bl	8005404 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800aff8:	4603      	mov	r3, r0
    }
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bdb0      	pop	{r4, r5, r7, pc}

0800b002 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b002:	b5b0      	push	{r4, r5, r7, lr}
 800b004:	b084      	sub	sp, #16
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 fd7c 	bl	800bb0a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b012:	4604      	mov	r4, r0
 800b014:	6838      	ldr	r0, [r7, #0]
 800b016:	f7fa ff5f 	bl	8005ed8 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 800b01a:	4605      	mov	r5, r0
 800b01c:	f107 030c 	add.w	r3, r7, #12
 800b020:	4618      	mov	r0, r3
 800b022:	f7fb fee8 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b026:	f107 030c 	add.w	r3, r7, #12
 800b02a:	461a      	mov	r2, r3
 800b02c:	4629      	mov	r1, r5
 800b02e:	4620      	mov	r0, r4
 800b030:	f000 fd76 	bl	800bb20 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fd68 	bl	800bb0a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b03a:	4603      	mov	r3, r0
    }
 800b03c:	4618      	mov	r0, r3
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bdb0      	pop	{r4, r5, r7, pc}

0800b044 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4618      	mov	r0, r3
 800b050:	f000 fd77 	bl	800bb42 <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 800b054:	4603      	mov	r3, r0
 800b056:	4618      	mov	r0, r3
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800b05e:	b480      	push	{r7}
 800b060:	b083      	sub	sp, #12
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4618      	mov	r0, r3
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>:
ConstRowXpr row(Index i) const
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800b080:	68b8      	ldr	r0, [r7, #8]
 800b082:	f7fa f8ca 	bl	800521a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b086:	4603      	mov	r3, r0
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	4619      	mov	r1, r3
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f000 fd6f 	bl	800bb70 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>
}
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b082      	sub	sp, #8
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
 800b0a2:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800b0a4:	6838      	ldr	r0, [r7, #0]
 800b0a6:	f000 fd8d 	bl	800bbc4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 fdab 	bl	800bc0a <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>
}
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b0c8:	68b8      	ldr	r0, [r7, #8]
 800b0ca:	f7fa fe16 	bl	8005cfa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f000 fdaf 	bl	800bc38 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>
}
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b0e2:	b5b0      	push	{r4, r5, r7, lr}
 800b0e4:	b086      	sub	sp, #24
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	60f8      	str	r0, [r7, #12]
 800b0ea:	60b9      	str	r1, [r7, #8]
 800b0ec:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b0ee:	68b8      	ldr	r0, [r7, #8]
 800b0f0:	f000 fdd4 	bl	800bc9c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fddb 	bl	800bcb2 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>
 800b0fc:	4605      	mov	r5, r0
 800b0fe:	f107 0314 	add.w	r3, r7, #20
 800b102:	4618      	mov	r0, r3
 800b104:	f7fa f8e8 	bl	80052d8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b108:	f107 0314 	add.w	r3, r7, #20
 800b10c:	462a      	mov	r2, r5
 800b10e:	4621      	mov	r1, r4
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f000 fe21 	bl	800bd58 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800b116:	68f8      	ldr	r0, [r7, #12]
 800b118:	3718      	adds	r7, #24
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bdb0      	pop	{r4, r5, r7, pc}

0800b11e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800b11e:	b580      	push	{r7, lr}
 800b120:	b082      	sub	sp, #8
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fe72 	bl	800be10 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b12c:	4603      	mov	r3, r0
 800b12e:	4618      	mov	r0, r3
 800b130:	f000 fe79 	bl	800be26 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>
 800b134:	4603      	mov	r3, r0
 800b136:	4618      	mov	r0, r3
 800b138:	3708      	adds	r7, #8
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800b13e:	b590      	push	{r4, r7, lr}
 800b140:	b085      	sub	sp, #20
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fe62 	bl	800be10 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b14c:	4604      	mov	r4, r0
 800b14e:	f107 030c 	add.w	r3, r7, #12
 800b152:	4618      	mov	r0, r3
 800b154:	f7fa fbb7 	bl	80058c6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b158:	f107 030c 	add.w	r3, r7, #12
 800b15c:	4619      	mov	r1, r3
 800b15e:	4620      	mov	r0, r4
 800b160:	f000 ff3c 	bl	800bfdc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b164:	eef0 7a40 	vmov.f32	s15, s0
 800b168:	bf00      	nop
}
 800b16a:	eeb0 0a67 	vmov.f32	s0, s15
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	bd90      	pop	{r4, r7, pc}

0800b174 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4618      	mov	r0, r3
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>:
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	370c      	adds	r7, #12
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr

0800b1ce <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b082      	sub	sp, #8
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
 800b1d6:	6039      	str	r1, [r7, #0]
    {
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7f9 fcfc 	bl	8004bd8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800b1e0:	f7f9 fd0a 	bl	8004bf8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6839      	ldr	r1, [r7, #0]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f000 ff3d 	bl	800c068 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800b1f8:	b5b0      	push	{r4, r5, r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	689c      	ldr	r4, [r3, #8]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	6839      	ldr	r1, [r7, #0]
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fd f9a8 	bl	8008562 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800b212:	4605      	mov	r5, r0
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	6839      	ldr	r1, [r7, #0]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f000 ff31 	bl	800c082 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>
 800b220:	eef0 7a40 	vmov.f32	s15, s0
 800b224:	edc7 7a03 	vstr	s15, [r7, #12]
 800b228:	f107 030c 	add.w	r3, r7, #12
 800b22c:	461a      	mov	r2, r3
 800b22e:	4629      	mov	r1, r5
 800b230:	4620      	mov	r0, r4
 800b232:	f000 ff5f 	bl	800c0f4 <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>
  }
 800b236:	bf00      	nop
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bdb0      	pop	{r4, r5, r7, pc}

0800b23e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800b23e:	b580      	push	{r7, lr}
 800b240:	b082      	sub	sp, #8
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800b246:	2101      	movs	r1, #1
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7ff ffd5 	bl	800b1f8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 ff67 	bl	800c122 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>
  }
 800b254:	bf00      	nop
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b25c:	b5b0      	push	{r4, r5, r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f7fa fa68 	bl	800573c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b26c:	4604      	mov	r4, r0
 800b26e:	6838      	ldr	r0, [r7, #0]
 800b270:	f7fb f98e 	bl	8006590 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 800b274:	4605      	mov	r5, r0
 800b276:	f107 030c 	add.w	r3, r7, #12
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fb fdbb 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b280:	f107 030c 	add.w	r3, r7, #12
 800b284:	461a      	mov	r2, r3
 800b286:	4629      	mov	r1, r5
 800b288:	4620      	mov	r0, r4
 800b28a:	f000 ff59 	bl	800c140 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f7fa fa54 	bl	800573c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b294:	4603      	mov	r3, r0
    }
 800b296:	4618      	mov	r0, r3
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bdb0      	pop	{r4, r5, r7, pc}

0800b29e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b0a4      	sub	sp, #144	; 0x90
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	60f8      	str	r0, [r7, #12]
 800b2a6:	60b9      	str	r1, [r7, #8]
 800b2a8:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800b2aa:	68f9      	ldr	r1, [r7, #12]
 800b2ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7ff fd0e 	bl	800acd4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800b2b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b2bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b2c0:	4611      	mov	r1, r2
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7ff fd19 	bl	800acfa <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b2cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f000 ff45 	bl	800c162 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 800b2d8:	f107 0314 	add.w	r3, r7, #20
 800b2dc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b2e0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f000 ff4f 	bl	800c188 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 800b2ea:	f107 0314 	add.w	r3, r7, #20
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 ff78 	bl	800c1e4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 800b2f4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800b2f8:	eeb0 0a67 	vmov.f32	s0, s15
 800b2fc:	3790      	adds	r7, #144	; 0x90
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b302:	b580      	push	{r7, lr}
 800b304:	b082      	sub	sp, #8
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b30a:	2200      	movs	r2, #0
 800b30c:	2101      	movs	r1, #1
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7ff f934 	bl	800a57c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 ff80 	bl	800c21a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 800b31a:	bf00      	nop
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800b322:	b480      	push	{r7}
 800b324:	b083      	sub	sp, #12
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	330c      	adds	r3, #12
 800b32e:	4618      	mov	r0, r3
 800b330:	370c      	adds	r7, #12
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800b33a:	b480      	push	{r7}
 800b33c:	b083      	sub	sp, #12
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4618      	mov	r0, r3
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr

0800b352 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800b352:	b480      	push	{r7}
 800b354:	b083      	sub	sp, #12
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	3304      	adds	r3, #4
 800b35e:	4618      	mov	r0, r3
 800b360:	370c      	adds	r7, #12
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr

0800b36a <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b082      	sub	sp, #8
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
 800b372:	6039      	str	r1, [r7, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6839      	ldr	r1, [r7, #0]
 800b378:	4618      	mov	r0, r3
 800b37a:	f7fb fa58 	bl	800682e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4618      	mov	r0, r3
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>:
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6839      	ldr	r1, [r7, #0]
 800b396:	4618      	mov	r0, r3
 800b398:	f000 ff4f 	bl	800c23a <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>:
    typedef typename internal::ref_selector<XprType>::non_const_type XprTypeNested;
  public:

    typedef typename internal::dense_xpr_base<BlockType>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(BlockType)
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b082      	sub	sp, #8
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
 800b3ae:	6039      	str	r1, [r7, #0]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7f9 f8aa 	bl	8004510 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	3310      	adds	r3, #16
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	6912      	ldr	r2, [r2, #16]
 800b3c4:	601a      	str	r2, [r3, #0]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl)
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	4611      	mov	r1, r2
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7ff ffe0 	bl	800b3a6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Block)
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	683a      	ldr	r2, [r7, #0]
 800b3fe:	4611      	mov	r1, r2
 800b400:	4618      	mov	r0, r3
 800b402:	f7ff ffe5 	bl	800b3d0 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4618      	mov	r0, r3
 800b40a:	3708      	adds	r7, #8
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>:
ConstRowXpr row(Index i) const
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800b41c:	68b8      	ldr	r0, [r7, #8]
 800b41e:	f7fa f824 	bl	800546a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 800b422:	4603      	mov	r3, r0
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	4619      	mov	r1, r3
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f000 ff1d 	bl	800c268 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>
}
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Transpose)
 800b436:	b580      	push	{r7, lr}
 800b438:	b082      	sub	sp, #8
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
 800b43e:	6039      	str	r1, [r7, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	683a      	ldr	r2, [r7, #0]
 800b444:	4611      	mov	r1, r2
 800b446:	4618      	mov	r0, r3
 800b448:	f7ff ffd2 	bl	800b3f0 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4618      	mov	r0, r3
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800b456:	b580      	push	{r7, lr}
 800b458:	b082      	sub	sp, #8
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
 800b45e:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800b460:	6838      	ldr	r0, [r7, #0]
 800b462:	f000 ff29 	bl	800c2b8 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>
 800b466:	4603      	mov	r3, r0
 800b468:	4619      	mov	r1, r3
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 ff47 	bl	800c2fe <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
}
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	3708      	adds	r7, #8
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b484:	68b8      	ldr	r0, [r7, #8]
 800b486:	f7f9 fffb 	bl	8005480 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800b48a:	4603      	mov	r3, r0
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	4619      	mov	r1, r3
 800b490:	68f8      	ldr	r0, [r7, #12]
 800b492:	f000 ff47 	bl	800c324 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>
}
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b49e:	b5b0      	push	{r4, r5, r7, lr}
 800b4a0:	b086      	sub	sp, #24
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	60f8      	str	r0, [r7, #12]
 800b4a6:	60b9      	str	r1, [r7, #8]
 800b4a8:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b4aa:	68b8      	ldr	r0, [r7, #8]
 800b4ac:	f000 ff62 	bl	800c374 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 ff69 	bl	800c38a <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>
 800b4b8:	4605      	mov	r5, r0
 800b4ba:	f107 0314 	add.w	r3, r7, #20
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7f9 ff0a 	bl	80052d8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b4c4:	f107 0314 	add.w	r3, r7, #20
 800b4c8:	462a      	mov	r2, r5
 800b4ca:	4621      	mov	r1, r4
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f000 ffaf 	bl	800c430 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>
}
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	3718      	adds	r7, #24
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bdb0      	pop	{r4, r5, r7, pc}

0800b4da <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>:
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b082      	sub	sp, #8
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fffe 	bl	800c4e4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f001 f805 	bl	800c4fa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3708      	adds	r7, #8
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800b4fa:	b590      	push	{r4, r7, lr}
 800b4fc:	b085      	sub	sp, #20
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 ffee 	bl	800c4e4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800b508:	4604      	mov	r4, r0
 800b50a:	f107 030c 	add.w	r3, r7, #12
 800b50e:	4618      	mov	r0, r3
 800b510:	f7fa f9d9 	bl	80058c6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b514:	f107 030c 	add.w	r3, r7, #12
 800b518:	4619      	mov	r1, r3
 800b51a:	4620      	mov	r0, r4
 800b51c:	f001 f8da 	bl	800c6d4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b520:	eef0 7a40 	vmov.f32	s15, s0
 800b524:	bf00      	nop
}
 800b526:	eeb0 0a67 	vmov.f32	s0, s15
 800b52a:	3714      	adds	r7, #20
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd90      	pop	{r4, r7, pc}

0800b530 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b538:	2201      	movs	r2, #1
 800b53a:	2101      	movs	r1, #1
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7fe fd56 	bl	8009fee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f001 f90c 	bl	800c760 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>
  }
 800b548:	bf00      	nop
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	607a      	str	r2, [r7, #4]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	68b9      	ldr	r1, [r7, #8]
 800b562:	4618      	mov	r0, r3
 800b564:	f001 f90c 	bl	800c780 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	db07      	blt.n	800b57e <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x2e>
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	4618      	mov	r0, r3
 800b572:	f7f9 fc10 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800b576:	4602      	mov	r2, r0
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4293      	cmp	r3, r2
 800b57c:	db05      	blt.n	800b58a <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x3a>
 800b57e:	4b06      	ldr	r3, [pc, #24]	; (800b598 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x48>)
 800b580:	4a06      	ldr	r2, [pc, #24]	; (800b59c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x4c>)
 800b582:	2178      	movs	r1, #120	; 0x78
 800b584:	4806      	ldr	r0, [pc, #24]	; (800b5a0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x50>)
 800b586:	f012 fb1d 	bl	801dbc4 <__assert_func>
 800b58a:	bf00      	nop
    }
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	4618      	mov	r0, r3
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	080245b0 	.word	0x080245b0
 800b59c:	08024658 	.word	0x08024658
 800b5a0:	08024734 	.word	0x08024734

0800b5a4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	370c      	adds	r7, #12
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b082      	sub	sp, #8
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f001 f8ed 	bl	800c7a2 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b082      	sub	sp, #8
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7ff ffed 	bl	800b5ba <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3708      	adds	r7, #8
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800b5ea:	b5b0      	push	{r4, r5, r7, lr}
 800b5ec:	b082      	sub	sp, #8
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
 800b5f2:	6039      	str	r1, [r7, #0]
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7ff ffec 	bl	800b5d2 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	4614      	mov	r4, r2
 800b600:	461d      	mov	r5, r3
 800b602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b606:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b60a:	e884 0003 	stmia.w	r4, {r0, r1}
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4618      	mov	r0, r3
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bdb0      	pop	{r4, r5, r7, pc}

0800b618 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	68b9      	ldr	r1, [r7, #8]
 800b62a:	4618      	mov	r0, r3
 800b62c:	f001 f8c4 	bl	800c7b8 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	db07      	blt.n	800b646 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	4618      	mov	r0, r3
 800b63a:	f7f9 fc47 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800b63e:	4602      	mov	r2, r0
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4293      	cmp	r3, r2
 800b644:	db05      	blt.n	800b652 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800b646:	4b05      	ldr	r3, [pc, #20]	; (800b65c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800b648:	4a05      	ldr	r2, [pc, #20]	; (800b660 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800b64a:	2178      	movs	r1, #120	; 0x78
 800b64c:	4805      	ldr	r0, [pc, #20]	; (800b664 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800b64e:	f012 fab9 	bl	801dbc4 <__assert_func>
    }
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	4618      	mov	r0, r3
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	080245b0 	.word	0x080245b0
 800b660:	08024788 	.word	0x08024788
 800b664:	08024734 	.word	0x08024734

0800b668 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>:
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4618      	mov	r0, r3
 800b674:	370c      	adds	r7, #12
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr

0800b67e <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>:
 800b67e:	b480      	push	{r7}
 800b680:	b083      	sub	sp, #12
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	4618      	mov	r0, r3
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f001 f89c 	bl	800c7da <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3708      	adds	r7, #8
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7ff ffed 	bl	800b694 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f001 f88e 	bl	800c7f0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3708      	adds	r7, #8
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b082      	sub	sp, #8
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f001 f88c 	bl	800c806 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>:

    typedef typename Base::CoeffReturnType CoeffReturnType;

    /** \copydoc DenseBase::rows() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	f7fb f913 	bl	800692a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800b704:	4603      	mov	r3, r0
 800b706:	4618      	mov	r0, r3
 800b708:	3708      	adds	r7, #8
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>:
    /** \copydoc DenseBase::cols() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800b70e:	b580      	push	{r7, lr}
 800b710:	b082      	sub	sp, #8
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
 800b716:	f7fb f910 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800b71a:	4603      	mov	r3, r0
 800b71c:	4618      	mov	r0, r3
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800b724:	b5b0      	push	{r4, r5, r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
 800b730:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f7ff ffba 	bl	800b6ac <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 800b738:	68fa      	ldr	r2, [r7, #12]
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	4614      	mov	r4, r2
 800b73e:	461d      	mov	r5, r3
 800b740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b744:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b748:	e884 0003 	stmia.w	r4, {r0, r1}
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f103 0218 	add.w	r2, r3, #24
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4614      	mov	r4, r2
 800b756:	461d      	mov	r5, r3
 800b758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b75a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b75c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b760:	e884 0003 	stmia.w	r4, {r0, r1}
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	3330      	adds	r3, #48	; 0x30
 800b768:	6839      	ldr	r1, [r7, #0]
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7f9 fe3e 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800b770:	68b8      	ldr	r0, [r7, #8]
 800b772:	f7ff ffa7 	bl	800b6c4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800b776:	4604      	mov	r4, r0
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7ff ffbc 	bl	800b6f8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800b780:	4603      	mov	r3, r0
 800b782:	429c      	cmp	r4, r3
 800b784:	d10a      	bne.n	800b79c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 800b786:	68b8      	ldr	r0, [r7, #8]
 800b788:	f7ff ffa9 	bl	800b6de <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800b78c:	4604      	mov	r4, r0
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4618      	mov	r0, r3
 800b792:	f7ff ffbc 	bl	800b70e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>
 800b796:	4603      	mov	r3, r0
 800b798:	429c      	cmp	r4, r3
 800b79a:	d005      	beq.n	800b7a8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 800b79c:	4b05      	ldr	r3, [pc, #20]	; (800b7b4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800b79e:	4a06      	ldr	r2, [pc, #24]	; (800b7b8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800b7a0:	2174      	movs	r1, #116	; 0x74
 800b7a2:	4806      	ldr	r0, [pc, #24]	; (800b7bc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 800b7a4:	f012 fa0e 	bl	801dbc4 <__assert_func>
    }
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bdb0      	pop	{r4, r5, r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	0801fa2c 	.word	0x0801fa2c
 800b7b8:	08024864 	.word	0x08024864
 800b7bc:	0801fc90 	.word	0x0801fc90

0800b7c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 f809 	bl	800b7e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f001 f823 	bl	800c81c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3708      	adds	r7, #8
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	370c      	adds	r7, #12
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr

0800b7f6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b082      	sub	sp, #8
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4618      	mov	r0, r3
 800b802:	f7ff ff5f 	bl	800b6c4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800b806:	4603      	mov	r3, r0
    }
 800b808:	4618      	mov	r0, r3
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
// but that might complicate template specialization
template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator;

template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator : evaluator_base<Derived>
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f001 f831 	bl	800c880 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4618      	mov	r0, r3
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>:

// TODO: This evaluator does not actually use the child evaluator;
// all action is via the data() as returned by the Block expression.

template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4618      	mov	r0, r3
 800b834:	f7ff ffec 	bl	800b810 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4618      	mov	r0, r3
 800b83c:	3708      	adds	r7, #8
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800b842:	b580      	push	{r7, lr}
 800b844:	b082      	sub	sp, #8
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7ff ffeb 	bl	800b828 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4618      	mov	r0, r3
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<const T>
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4618      	mov	r0, r3
 800b868:	f7ff ffeb 	bl	800b842 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800b876:	b580      	push	{r7, lr}
 800b878:	b082      	sub	sp, #8
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4618      	mov	r0, r3
 800b882:	f7ff ffeb 	bl	800b85c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 ffef 	bl	800c86a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	4618      	mov	r0, r3
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800b896:	b580      	push	{r7, lr}
 800b898:	b082      	sub	sp, #8
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7ff ffe8 	bl	800b876 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3708      	adds	r7, #8
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7ff ffeb 	bl	800b896 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3708      	adds	r7, #8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 ffdf 	bl	800c896 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b082      	sub	sp, #8
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7ff ffec 	bl	800b8ca <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3708      	adds	r7, #8
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	4618      	mov	r0, r3
 800b908:	f7ff ffeb 	bl	800b8e2 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	4618      	mov	r0, r3
 800b910:	3708      	adds	r7, #8
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800b916:	b580      	push	{r7, lr}
 800b918:	b082      	sub	sp, #8
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4618      	mov	r0, r3
 800b922:	f7ff ffeb 	bl	800b8fc <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	4618      	mov	r0, r3
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	330c      	adds	r3, #12
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7ff ffea 	bl	800b916 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	3304      	adds	r3, #4
 800b946:	4618      	mov	r0, r3
 800b948:	f7ff ffb2 	bl	800b8b0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4618      	mov	r0, r3
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800b956:	b580      	push	{r7, lr}
 800b958:	b082      	sub	sp, #8
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	4618      	mov	r0, r3
 800b962:	f7ff ffe5 	bl	800b930 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 ff74 	bl	800c854 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4618      	mov	r0, r3
 800b970:	3708      	adds	r7, #8
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800b976:	b580      	push	{r7, lr}
 800b978:	b082      	sub	sp, #8
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4618      	mov	r0, r3
 800b982:	f7ff ffe8 	bl	800b956 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	4618      	mov	r0, r3
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7ff ffeb 	bl	800b976 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3708      	adds	r7, #8
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
	...

0800b9ac <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	ed2d 8b02 	vpush	{d8}
 800b9b2:	b088      	sub	sp, #32
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f7ff f9df 	bl	800ad7e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	dd05      	ble.n	800b9d2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f7ff fefa 	bl	800b7c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	dc06      	bgt.n	800b9e0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800b9d2:	4b16      	ldr	r3, [pc, #88]	; (800ba2c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800b9d4:	4a16      	ldr	r2, [pc, #88]	; (800ba30 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800b9d6:	f240 119b 	movw	r1, #411	; 0x19b
 800b9da:	4816      	ldr	r0, [pc, #88]	; (800ba34 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800b9dc:	f012 f8f2 	bl	801dbc4 <__assert_func>
 800b9e0:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7ff fefc 	bl	800b7e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	f107 030c 	add.w	r3, r7, #12
 800b9ee:	4611      	mov	r1, r2
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f000 ff20 	bl	800c836 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7ff fef2 	bl	800b7e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	f107 030c 	add.w	r3, r7, #12
 800ba02:	6839      	ldr	r1, [r7, #0]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f000 ff51 	bl	800c8ac <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800ba0a:	eeb0 8a40 	vmov.f32	s16, s0
 800ba0e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800ba10:	f107 030c 	add.w	r3, r7, #12
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7ff ffbb 	bl	800b990 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800ba1a:	eef0 7a48 	vmov.f32	s15, s16
}
 800ba1e:	eeb0 0a67 	vmov.f32	s0, s15
 800ba22:	3720      	adds	r7, #32
 800ba24:	46bd      	mov	sp, r7
 800ba26:	ecbd 8b02 	vpop	{d8}
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	08024aac 	.word	0x08024aac
 800ba30:	08024af0 	.word	0x08024af0
 800ba34:	08024cb8 	.word	0x08024cb8

0800ba38 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f7fe feb4 	bl	800a7ae <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800ba46:	4603      	mov	r3, r0
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7fe fedd 	bl	800a808 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	4618      	mov	r0, r3
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800ba58:	b590      	push	{r4, r7, lr}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 ff4a 	bl	800c8fc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>
 800ba68:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800ba6a:	6838      	ldr	r0, [r7, #0]
 800ba6c:	f000 ff2f 	bl	800c8ce <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800ba70:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800ba72:	4619      	mov	r1, r3
 800ba74:	4620      	mov	r0, r4
 800ba76:	f000 ff4c 	bl	800c912 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>
      m_rhs(xpr.rhs()),
 800ba7a:	6838      	ldr	r0, [r7, #0]
 800ba7c:	f000 ff32 	bl	800c8e4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>
 800ba80:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	3324      	adds	r3, #36	; 0x24
 800ba86:	6812      	ldr	r2, [r2, #0]
 800ba88:	601a      	str	r2, [r3, #0]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800ba8e:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800ba90:	4611      	mov	r1, r2
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fb fe16 	bl	80076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	3324      	adds	r3, #36	; 0x24
      m_innerDim(xpr.lhs().cols())
 800baa2:	4619      	mov	r1, r3
 800baa4:	4610      	mov	r0, r2
 800baa6:	f000 ff49 	bl	800c93c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
 800baaa:	6838      	ldr	r0, [r7, #0]
 800baac:	f000 ff0f 	bl	800c8ce <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800bab0:	4603      	mov	r3, r0
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7f9 feaf 	bl	8005816 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800bab8:	4602      	mov	r2, r0
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	631a      	str	r2, [r3, #48]	; 0x30
  }
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4618      	mov	r0, r3
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd90      	pop	{r4, r7, pc}

0800bac8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800bad0:	2200      	movs	r2, #0
 800bad2:	2100      	movs	r1, #0
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 ff40 	bl	800c95a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 ff56 	bl	800c98c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>
  }
 800bae0:	bf00      	nop
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800bae8:	b580      	push	{r7, lr}
 800baea:	b086      	sub	sp, #24
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	68b9      	ldr	r1, [r7, #8]
 800bafc:	6978      	ldr	r0, [r7, #20]
 800bafe:	f000 ff55 	bl	800c9ac <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800bb02:	bf00      	nop
 800bb04:	3718      	adds	r7, #24
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800bb0a:	b480      	push	{r7}
 800bb0c:	b083      	sub	sp, #12
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4618      	mov	r0, r3
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	68b9      	ldr	r1, [r7, #8]
 800bb34:	6978      	ldr	r0, [r7, #20]
 800bb36:	f000 ff73 	bl	800ca20 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 800bb3a:	bf00      	nop
 800bb3c:	3718      	adds	r7, #24
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800bb42:	b480      	push	{r7}
 800bb44:	b083      	sub	sp, #12
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 ff9c 	bl	800ca9e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>
 800bb66:	4603      	mov	r3, r0
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	68b9      	ldr	r1, [r7, #8]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f000 ff97 	bl	800cab6 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	db07      	blt.n	800bb9e <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7f9 f9a6 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800bb96:	4602      	mov	r2, r0
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	db05      	blt.n	800bbaa <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 800bb9e:	4b06      	ldr	r3, [pc, #24]	; (800bbb8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 800bba0:	4a06      	ldr	r2, [pc, #24]	; (800bbbc <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 800bba2:	2178      	movs	r1, #120	; 0x78
 800bba4:	4806      	ldr	r0, [pc, #24]	; (800bbc0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x50>)
 800bba6:	f012 f80d 	bl	801dbc4 <__assert_func>
 800bbaa:	bf00      	nop
    }
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	080245b0 	.word	0x080245b0
 800bbbc:	08024d0c 	.word	0x08024d0c
 800bbc0:	08024734 	.word	0x08024734

0800bbc4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	370c      	adds	r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b082      	sub	sp, #8
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 ff78 	bl	800cad8 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4618      	mov	r0, r3
 800bbec:	3708      	adds	r7, #8
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b082      	sub	sp, #8
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f7ff ffed 	bl	800bbda <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	4618      	mov	r0, r3
 800bc04:	3708      	adds	r7, #8
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800bc0a:	b5b0      	push	{r4, r5, r7, lr}
 800bc0c:	b082      	sub	sp, #8
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
 800bc12:	6039      	str	r1, [r7, #0]
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f7ff ffec 	bl	800bbf2 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	4614      	mov	r4, r2
 800bc20:	461d      	mov	r5, r3
 800bc22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc26:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bc2a:	e884 0003 	stmia.w	r4, {r0, r1}
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4618      	mov	r0, r3
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bdb0      	pop	{r4, r5, r7, pc}

0800bc38 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	68b9      	ldr	r1, [r7, #8]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f000 ff4f 	bl	800caee <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	db0f      	blt.n	800bc76 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x3e>
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7fa f88c 	bl	8005d76 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	4293      	cmp	r3, r2
 800bc64:	db0d      	blt.n	800bc82 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fa f88f 	bl	8005d8c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4293      	cmp	r3, r2
 800bc74:	db05      	blt.n	800bc82 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800bc76:	4b06      	ldr	r3, [pc, #24]	; (800bc90 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x58>)
 800bc78:	4a06      	ldr	r2, [pc, #24]	; (800bc94 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x5c>)
 800bc7a:	2178      	movs	r1, #120	; 0x78
 800bc7c:	4806      	ldr	r0, [pc, #24]	; (800bc98 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x60>)
 800bc7e:	f011 ffa1 	bl	801dbc4 <__assert_func>
 800bc82:	bf00      	nop
    }
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	080245b0 	.word	0x080245b0
 800bc94:	08024de8 	.word	0x08024de8
 800bc98:	08024734 	.word	0x08024734

0800bc9c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>:
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	4618      	mov	r0, r3
 800bca8:	370c      	adds	r7, #12
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr

0800bcb2 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>:
 800bcb2:	b480      	push	{r7}
 800bcb4:	b083      	sub	sp, #12
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 ff1d 	bl	800cb10 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f7ff ffed 	bl	800bcc8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4618      	mov	r0, r3
 800bd04:	f000 ff0f 	bl	800cb26 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b082      	sub	sp, #8
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f000 ff0d 	bl	800cb3c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>
 800bd22:	4603      	mov	r3, r0
 800bd24:	4618      	mov	r0, r3
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	f7fa fe01 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b082      	sub	sp, #8
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
 800bd4a:	f7fa fdf6 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	4618      	mov	r0, r3
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800bd58:	b5b0      	push	{r4, r5, r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
 800bd64:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f7ff ffba 	bl	800bce0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	4614      	mov	r4, r2
 800bd72:	461d      	mov	r5, r3
 800bd74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd78:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bd7c:	e884 0003 	stmia.w	r4, {r0, r1}
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f103 0218 	add.w	r2, r3, #24
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4614      	mov	r4, r2
 800bd8a:	461d      	mov	r5, r3
 800bd8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd90:	682b      	ldr	r3, [r5, #0]
 800bd92:	6023      	str	r3, [r4, #0]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	332c      	adds	r3, #44	; 0x2c
 800bd98:	6839      	ldr	r1, [r7, #0]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7f9 fb26 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800bda0:	68b8      	ldr	r0, [r7, #8]
 800bda2:	f7ff ffa9 	bl	800bcf8 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800bda6:	4604      	mov	r4, r0
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7ff ffbe 	bl	800bd2c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	429c      	cmp	r4, r3
 800bdb4:	d10a      	bne.n	800bdcc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x74>
 800bdb6:	68b8      	ldr	r0, [r7, #8]
 800bdb8:	f7ff ffab 	bl	800bd12 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7ff ffbe 	bl	800bd42 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	429c      	cmp	r4, r3
 800bdca:	d005      	beq.n	800bdd8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x80>
 800bdcc:	4b05      	ldr	r3, [pc, #20]	; (800bde4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x8c>)
 800bdce:	4a06      	ldr	r2, [pc, #24]	; (800bde8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800bdd0:	2174      	movs	r1, #116	; 0x74
 800bdd2:	4806      	ldr	r0, [pc, #24]	; (800bdec <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800bdd4:	f011 fef6 	bl	801dbc4 <__assert_func>
    }
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	4618      	mov	r0, r3
 800bddc:	3710      	adds	r7, #16
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bdb0      	pop	{r4, r5, r7, pc}
 800bde2:	bf00      	nop
 800bde4:	0801fa2c 	.word	0x0801fa2c
 800bde8:	08024ec4 	.word	0x08024ec4
 800bdec:	0801fc90 	.word	0x0801fc90

0800bdf0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 f809 	bl	800be10 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800bdfe:	4603      	mov	r3, r0
 800be00:	4618      	mov	r0, r3
 800be02:	f000 fea6 	bl	800cb52 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>
 800be06:	4603      	mov	r3, r0
 800be08:	4618      	mov	r0, r3
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	4618      	mov	r0, r3
 800be1c:	370c      	adds	r7, #12
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr

0800be26 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800be26:	b580      	push	{r7, lr}
 800be28:	b082      	sub	sp, #8
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	4618      	mov	r0, r3
 800be32:	f7ff ff61 	bl	800bcf8 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800be36:	4603      	mov	r3, r0
    }
 800be38:	4618      	mov	r0, r3
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 feb4 	bl	800cbb6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	4618      	mov	r0, r3
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4618      	mov	r0, r3
 800be64:	f7ff ffec 	bl	800be40 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4618      	mov	r0, r3
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}

0800be72 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800be72:	b580      	push	{r7, lr}
 800be74:	b082      	sub	sp, #8
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7ff ffeb 	bl	800be58 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4618      	mov	r0, r3
 800be86:	3708      	adds	r7, #8
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	4618      	mov	r0, r3
 800be98:	f7ff ffeb 	bl	800be72 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4618      	mov	r0, r3
 800bea0:	3708      	adds	r7, #8
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b082      	sub	sp, #8
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7ff ffeb 	bl	800be8c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 fe72 	bl	800cba0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4618      	mov	r0, r3
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b082      	sub	sp, #8
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7ff ffe8 	bl	800bea6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4618      	mov	r0, r3
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4618      	mov	r0, r3
 800beec:	f7ff ffeb 	bl	800bec6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4618      	mov	r0, r3
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800befa:	b580      	push	{r7, lr}
 800befc:	b082      	sub	sp, #8
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 fe62 	bl	800cbcc <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b082      	sub	sp, #8
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7ff ffec 	bl	800befa <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4618      	mov	r0, r3
 800bf26:	3708      	adds	r7, #8
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7ff ffeb 	bl	800bf12 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3708      	adds	r7, #8
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b082      	sub	sp, #8
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7ff ffeb 	bl	800bf2c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	330c      	adds	r3, #12
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7ff ffea 	bl	800bf46 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	3304      	adds	r3, #4
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7ff ffb2 	bl	800bee0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b082      	sub	sp, #8
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7ff ffe5 	bl	800bf60 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fdf7 	bl	800cb8a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b082      	sub	sp, #8
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7ff ffe8 	bl	800bf86 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3708      	adds	r7, #8
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7ff ffeb 	bl	800bfa6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
	...

0800bfdc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	ed2d 8b02 	vpush	{d8}
 800bfe2:	b088      	sub	sp, #32
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f7ff f897 	bl	800b11e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	dd05      	ble.n	800c002 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f7ff fefa 	bl	800bdf0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	dc06      	bgt.n	800c010 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800c002:	4b16      	ldr	r3, [pc, #88]	; (800c05c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800c004:	4a16      	ldr	r2, [pc, #88]	; (800c060 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800c006:	f240 119b 	movw	r1, #411	; 0x19b
 800c00a:	4816      	ldr	r0, [pc, #88]	; (800c064 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800c00c:	f011 fdda 	bl	801dbc4 <__assert_func>
 800c010:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f7ff fefc 	bl	800be10 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800c018:	4602      	mov	r2, r0
 800c01a:	f107 030c 	add.w	r3, r7, #12
 800c01e:	4611      	mov	r1, r2
 800c020:	4618      	mov	r0, r3
 800c022:	f000 fda3 	bl	800cb6c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f7ff fef2 	bl	800be10 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800c02c:	4602      	mov	r2, r0
 800c02e:	f107 030c 	add.w	r3, r7, #12
 800c032:	6839      	ldr	r1, [r7, #0]
 800c034:	4618      	mov	r0, r3
 800c036:	f000 fdd4 	bl	800cbe2 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800c03a:	eeb0 8a40 	vmov.f32	s16, s0
 800c03e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c040:	f107 030c 	add.w	r3, r7, #12
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff ffbb 	bl	800bfc0 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c04a:	eef0 7a48 	vmov.f32	s15, s16
}
 800c04e:	eeb0 0a67 	vmov.f32	s0, s15
 800c052:	3720      	adds	r7, #32
 800c054:	46bd      	mov	sp, r7
 800c056:	ecbd 8b02 	vpop	{d8}
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	08024aac 	.word	0x08024aac
 800c060:	0802510c 	.word	0x0802510c
 800c064:	08024cb8 	.word	0x08024cb8

0800c068 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800c072:	6839      	ldr	r1, [r7, #0]
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fdc5 	bl	800cc04 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800c07a:	bf00      	nop
 800c07c:	3708      	adds	r7, #8
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800c082:	b580      	push	{r7, lr}
 800c084:	b0a2      	sub	sp, #136	; 0x88
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
 800c08a:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800c092:	2300      	movs	r3, #0
 800c094:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6819      	ldr	r1, [r3, #0]
 800c09c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c0a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7fe ffe5 	bl	800b074 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800c0aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c0ae:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7fe fff0 	bl	800b09a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	1d19      	adds	r1, r3, #4
 800c0be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7fe fff9 	bl	800b0bc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800c0ca:	f107 030c 	add.w	r3, r7, #12
 800c0ce:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c0d2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7ff f803 	bl	800b0e2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800c0dc:	f107 030c 	add.w	r3, r7, #12
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7ff f82c 	bl	800b13e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800c0e6:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c0ea:	eeb0 0a67 	vmov.f32	s0, s15
 800c0ee:	3788      	adds	r7, #136	; 0x88
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	607a      	str	r2, [r7, #4]
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	ed93 7a00 	vldr	s14, [r3]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	edd3 7a00 	vldr	s15, [r3]
 800c10c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	edc3 7a00 	vstr	s15, [r3]
 800c116:	bf00      	nop
 800c118:	3714      	adds	r7, #20
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr

0800c122 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800c122:	b580      	push	{r7, lr}
 800c124:	b082      	sub	sp, #8
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800c12a:	2102      	movs	r1, #2
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f7ff f863 	bl	800b1f8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 fd87 	bl	800cc46 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>
  }
 800c138:	bf00      	nop
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800c140:	b580      	push	{r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	68b9      	ldr	r1, [r7, #8]
 800c154:	6978      	ldr	r0, [r7, #20]
 800c156:	f000 fd80 	bl	800cc5a <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800c15a:	bf00      	nop
 800c15c:	3718      	adds	r7, #24
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 800c162:	b580      	push	{r7, lr}
 800c164:	b084      	sub	sp, #16
 800c166:	af00      	add	r7, sp, #0
 800c168:	60f8      	str	r0, [r7, #12]
 800c16a:	60b9      	str	r1, [r7, #8]
 800c16c:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800c16e:	68b8      	ldr	r0, [r7, #8]
 800c170:	f7f9 fa1b 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800c174:	4603      	mov	r3, r0
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	4619      	mov	r1, r3
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f000 fd98 	bl	800ccb0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>
}
 800c180:	68f8      	ldr	r0, [r7, #12]
 800c182:	3710      	adds	r7, #16
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800c188:	b5b0      	push	{r4, r5, r7, lr}
 800c18a:	b086      	sub	sp, #24
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800c194:	68b8      	ldr	r0, [r7, #8]
 800c196:	f7ff fa67 	bl	800b668 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800c19a:	4604      	mov	r4, r0
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 fdaf 	bl	800cd00 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 800c1a2:	4605      	mov	r5, r0
 800c1a4:	f107 0314 	add.w	r3, r7, #20
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7f9 f895 	bl	80052d8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800c1ae:	f107 0314 	add.w	r3, r7, #20
 800c1b2:	462a      	mov	r2, r5
 800c1b4:	4621      	mov	r1, r4
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	f000 fddc 	bl	800cd74 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>
}
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	3718      	adds	r7, #24
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bdb0      	pop	{r4, r5, r7, pc}

0800c1c4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 fe2f 	bl	800ce30 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f000 fe36 	bl	800ce46 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3708      	adds	r7, #8
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800c1e4:	b590      	push	{r4, r7, lr}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 fe1f 	bl	800ce30 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c1f2:	4604      	mov	r4, r0
 800c1f4:	f107 030c 	add.w	r3, r7, #12
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7f9 fb64 	bl	80058c6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800c1fe:	f107 030c 	add.w	r3, r7, #12
 800c202:	4619      	mov	r1, r3
 800c204:	4620      	mov	r0, r4
 800c206:	f000 fe9b 	bl	800cf40 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800c20a:	eef0 7a40 	vmov.f32	s15, s0
 800c20e:	bf00      	nop
}
 800c210:	eeb0 0a67 	vmov.f32	s0, s15
 800c214:	3714      	adds	r7, #20
 800c216:	46bd      	mov	sp, r7
 800c218:	bd90      	pop	{r4, r7, pc}

0800c21a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c21a:	b580      	push	{r7, lr}
 800c21c:	b082      	sub	sp, #8
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c222:	2201      	movs	r2, #1
 800c224:	2101      	movs	r1, #1
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f7fe f9a8 	bl	800a57c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 fecd 	bl	800cfcc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 800c232:	bf00      	nop
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC explicit evaluator(const XprType& n)
 800c23a:	b590      	push	{r4, r7, lr}
 800c23c:	b083      	sub	sp, #12
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
 800c242:	6039      	str	r1, [r7, #0]
    : m_functor(n.functor()), m_wrapper()
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 fedd 	bl	800d004 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800c24a:	687c      	ldr	r4, [r7, #4]
 800c24c:	6838      	ldr	r0, [r7, #0]
 800c24e:	f000 fecd 	bl	800cfec <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 800c252:	4603      	mov	r3, r0
 800c254:	4619      	mov	r1, r3
 800c256:	4620      	mov	r0, r4
 800c258:	f7f9 f8b8 	bl	80053cc <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
  }
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4618      	mov	r0, r3
 800c260:	370c      	adds	r7, #12
 800c262:	46bd      	mov	sp, r7
 800c264:	bd90      	pop	{r4, r7, pc}
	...

0800c268 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	68b9      	ldr	r1, [r7, #8]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f000 fecd 	bl	800d01a <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>
      eigen_assert( (i>=0) && (
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2b00      	cmp	r3, #0
 800c284:	db06      	blt.n	800c294 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x2c>
 800c286:	68b8      	ldr	r0, [r7, #8]
 800c288:	f7fb fe6d 	bl	8007f66 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 800c28c:	4602      	mov	r2, r0
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4293      	cmp	r3, r2
 800c292:	db05      	blt.n	800c2a0 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x38>
 800c294:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x44>)
 800c296:	4a06      	ldr	r2, [pc, #24]	; (800c2b0 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x48>)
 800c298:	2178      	movs	r1, #120	; 0x78
 800c29a:	4806      	ldr	r0, [pc, #24]	; (800c2b4 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x4c>)
 800c29c:	f011 fc92 	bl	801dbc4 <__assert_func>
 800c2a0:	bf00      	nop
    }
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3710      	adds	r7, #16
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	080245b0 	.word	0x080245b0
 800c2b0:	080252d4 	.word	0x080252d4
 800c2b4:	08024734 	.word	0x08024734

0800c2b8 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	370c      	adds	r7, #12
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b082      	sub	sp, #8
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 feb0 	bl	800d03c <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3708      	adds	r7, #8
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b082      	sub	sp, #8
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7ff ffed 	bl	800c2ce <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3708      	adds	r7, #8
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}

0800c2fe <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b082      	sub	sp, #8
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
 800c306:	6039      	str	r1, [r7, #0]
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f7ff ffec 	bl	800c2e6 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6839      	ldr	r1, [r7, #0]
 800c312:	4618      	mov	r0, r3
 800c314:	f7ff f86c 	bl	800b3f0 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	4618      	mov	r0, r3
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
	...

0800c324 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	68b9      	ldr	r1, [r7, #8]
 800c336:	4618      	mov	r0, r3
 800c338:	f000 fe8b 	bl	800d052 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	db06      	blt.n	800c350 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x2c>
 800c342:	68b8      	ldr	r0, [r7, #8]
 800c344:	f7fb fe1d 	bl	8007f82 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800c348:	4602      	mov	r2, r0
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4293      	cmp	r3, r2
 800c34e:	db05      	blt.n	800c35c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x38>
 800c350:	4b05      	ldr	r3, [pc, #20]	; (800c368 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x44>)
 800c352:	4a06      	ldr	r2, [pc, #24]	; (800c36c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x48>)
 800c354:	2178      	movs	r1, #120	; 0x78
 800c356:	4806      	ldr	r0, [pc, #24]	; (800c370 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x4c>)
 800c358:	f011 fc34 	bl	801dbc4 <__assert_func>
    }
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	080245b0 	.word	0x080245b0
 800c36c:	0802546c 	.word	0x0802546c
 800c370:	08024734 	.word	0x08024734

0800c374 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>:
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4618      	mov	r0, r3
 800c380:	370c      	adds	r7, #12
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>:
 800c38a:	b480      	push	{r7}
 800c38c:	b083      	sub	sp, #12
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	4618      	mov	r0, r3
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 fe63 	bl	800d074 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f7ff ffed 	bl	800c3a0 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3708      	adds	r7, #8
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f000 fe55 	bl	800d08a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3708      	adds	r7, #8
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b082      	sub	sp, #8
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f000 fe53 	bl	800d0a0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	f7fa fa95 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c410:	4603      	mov	r3, r0
 800c412:	4618      	mov	r0, r3
 800c414:	3708      	adds	r7, #8
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b082      	sub	sp, #8
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	f7fa fa8a 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c426:	4603      	mov	r3, r0
 800c428:	4618      	mov	r0, r3
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800c430:	b5b0      	push	{r4, r5, r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
 800c43c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800c43e:	68f8      	ldr	r0, [r7, #12]
 800c440:	f7ff ffba 	bl	800c3b8 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	3304      	adds	r3, #4
 800c448:	68b9      	ldr	r1, [r7, #8]
 800c44a:	4618      	mov	r0, r3
 800c44c:	f7fe fff3 	bl	800b436 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f103 021c 	add.w	r2, r3, #28
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4614      	mov	r4, r2
 800c45a:	461d      	mov	r5, r3
 800c45c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c45e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c460:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c464:	e884 0003 	stmia.w	r4, {r0, r1}
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	3334      	adds	r3, #52	; 0x34
 800c46c:	6839      	ldr	r1, [r7, #0]
 800c46e:	4618      	mov	r0, r3
 800c470:	f7f8 ffbc 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800c474:	68b8      	ldr	r0, [r7, #8]
 800c476:	f7ff ffab 	bl	800c3d0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800c47a:	4604      	mov	r4, r0
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4618      	mov	r0, r3
 800c480:	f7ff ffc0 	bl	800c404 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>
 800c484:	4603      	mov	r3, r0
 800c486:	429c      	cmp	r4, r3
 800c488:	d10a      	bne.n	800c4a0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x70>
 800c48a:	68b8      	ldr	r0, [r7, #8]
 800c48c:	f7ff ffad 	bl	800c3ea <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800c490:	4604      	mov	r4, r0
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4618      	mov	r0, r3
 800c496:	f7ff ffc0 	bl	800c41a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>
 800c49a:	4603      	mov	r3, r0
 800c49c:	429c      	cmp	r4, r3
 800c49e:	d005      	beq.n	800c4ac <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x7c>
 800c4a0:	4b05      	ldr	r3, [pc, #20]	; (800c4b8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x88>)
 800c4a2:	4a06      	ldr	r2, [pc, #24]	; (800c4bc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x8c>)
 800c4a4:	2174      	movs	r1, #116	; 0x74
 800c4a6:	4806      	ldr	r0, [pc, #24]	; (800c4c0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x90>)
 800c4a8:	f011 fb8c 	bl	801dbc4 <__assert_func>
    }
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bdb0      	pop	{r4, r5, r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	0801fa2c 	.word	0x0801fa2c
 800c4bc:	0802555c 	.word	0x0802555c
 800c4c0:	0801fc90 	.word	0x0801fc90

0800c4c4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 f809 	bl	800c4e4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f000 fdee 	bl	800d0b6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3708      	adds	r7, #8
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	370c      	adds	r7, #12
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b082      	sub	sp, #8
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	3304      	adds	r3, #4
 800c506:	4618      	mov	r0, r3
 800c508:	f7ff ff62 	bl	800c3d0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800c50c:	4603      	mov	r3, r0
    }
 800c50e:	4618      	mov	r0, r3
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<const T>
 800c516:	b580      	push	{r7, lr}
 800c518:	b082      	sub	sp, #8
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	4618      	mov	r0, r3
 800c522:	f7fc fc30 	bl	8008d86 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4618      	mov	r0, r3
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>, IndexBased>
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7ff ffeb 	bl	800c516 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f000 fdeb 	bl	800d11c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4618      	mov	r0, r3
 800c54a:	3708      	adds	r7, #8
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /*HasDirectAccess*/ false>
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7ff ffe8 	bl	800c530 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	4618      	mov	r0, r3
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b082      	sub	sp, #8
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4618      	mov	r0, r3
 800c576:	f7ff ffeb 	bl	800c550 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4618      	mov	r0, r3
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4618      	mov	r0, r3
 800c590:	f7ff ffeb 	bl	800c56a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	4618      	mov	r0, r3
 800c598:	3708      	adds	r7, #8
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b082      	sub	sp, #8
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7ff ffeb 	bl	800c584 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fda9 	bl	800d106 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3708      	adds	r7, #8
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b082      	sub	sp, #8
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7ff ffe8 	bl	800c59e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7ff ffeb 	bl	800c5be <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3708      	adds	r7, #8
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b082      	sub	sp, #8
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 fd99 	bl	800d132 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4618      	mov	r0, r3
 800c604:	3708      	adds	r7, #8
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b082      	sub	sp, #8
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4618      	mov	r0, r3
 800c616:	f7ff ffec 	bl	800c5f2 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	4618      	mov	r0, r3
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4618      	mov	r0, r3
 800c630:	f7ff ffeb 	bl	800c60a <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4618      	mov	r0, r3
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c63e:	b580      	push	{r7, lr}
 800c640:	b082      	sub	sp, #8
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4618      	mov	r0, r3
 800c64a:	f7ff ffeb 	bl	800c624 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4618      	mov	r0, r3
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>:
  struct Data
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	3320      	adds	r3, #32
 800c664:	4618      	mov	r0, r3
 800c666:	f7ff ffea 	bl	800c63e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	3304      	adds	r3, #4
 800c66e:	4618      	mov	r0, r3
 800c670:	f7ff ffb2 	bl	800c5d8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	4618      	mov	r0, r3
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800c67e:	b580      	push	{r7, lr}
 800c680:	b082      	sub	sp, #8
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4618      	mov	r0, r3
 800c68a:	f7ff ffe5 	bl	800c658 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 fd2e 	bl	800d0f0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4618      	mov	r0, r3
 800c698:	3708      	adds	r7, #8
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}

0800c69e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b082      	sub	sp, #8
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7ff ffe8 	bl	800c67e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7ff ffeb 	bl	800c69e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
	...

0800c6d4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	ed2d 8b02 	vpush	{d8}
 800c6da:	b08c      	sub	sp, #48	; 0x30
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f7fe fef9 	bl	800b4da <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	dd05      	ble.n	800c6fa <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f7ff fee8 	bl	800c4c4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	dc06      	bgt.n	800c708 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800c6fa:	4b16      	ldr	r3, [pc, #88]	; (800c754 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800c6fc:	4a16      	ldr	r2, [pc, #88]	; (800c758 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800c6fe:	f240 119b 	movw	r1, #411	; 0x19b
 800c702:	4816      	ldr	r0, [pc, #88]	; (800c75c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800c704:	f011 fa5e 	bl	801dbc4 <__assert_func>
 800c708:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f7ff feea 	bl	800c4e4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c710:	4602      	mov	r2, r0
 800c712:	f107 0308 	add.w	r3, r7, #8
 800c716:	4611      	mov	r1, r2
 800c718:	4618      	mov	r0, r3
 800c71a:	f000 fcda 	bl	800d0d2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f7ff fee0 	bl	800c4e4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c724:	4602      	mov	r2, r0
 800c726:	f107 0308 	add.w	r3, r7, #8
 800c72a:	6839      	ldr	r1, [r7, #0]
 800c72c:	4618      	mov	r0, r3
 800c72e:	f000 fd0b 	bl	800d148 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>
 800c732:	eeb0 8a40 	vmov.f32	s16, s0
 800c736:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c738:	f107 0308 	add.w	r3, r7, #8
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff ffbb 	bl	800c6b8 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c742:	eef0 7a48 	vmov.f32	s15, s16
}
 800c746:	eeb0 0a67 	vmov.f32	s0, s15
 800c74a:	3730      	adds	r7, #48	; 0x30
 800c74c:	46bd      	mov	sp, r7
 800c74e:	ecbd 8b02 	vpop	{d8}
 800c752:	bd80      	pop	{r7, pc}
 800c754:	08024aac 	.word	0x08024aac
 800c758:	08025944 	.word	0x08025944
 800c75c:	08024cb8 	.word	0x08024cb8

0800c760 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c760:	b580      	push	{r7, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c768:	2202      	movs	r2, #2
 800c76a:	2101      	movs	r1, #1
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f7fd fc3e 	bl	8009fee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 fcf9 	bl	800d16a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>
  }
 800c778:	bf00      	nop
 800c77a:	3708      	adds	r7, #8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	68b9      	ldr	r1, [r7, #8]
 800c792:	4618      	mov	r0, r3
 800c794:	f000 fcf9 	bl	800d18a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	4618      	mov	r0, r3
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c7a2:	b480      	push	{r7}
 800c7a4:	b083      	sub	sp, #12
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
    }
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	607a      	str	r2, [r7, #4]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	68b9      	ldr	r1, [r7, #8]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f000 fd13 	bl	800d1f6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3710      	adds	r7, #16
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c7da:	b480      	push	{r7}
 800c7dc:	b083      	sub	sp, #12
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
    }
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	370c      	adds	r7, #12
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>:
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	f7fa f897 	bl	800692a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	4618      	mov	r0, r3
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c806:	b580      	push	{r7, lr}
 800c808:	b082      	sub	sp, #8
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
 800c80e:	f7fa f894 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c812:	4603      	mov	r3, r0
 800c814:	4618      	mov	r0, r3
 800c816:	3708      	adds	r7, #8
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4618      	mov	r0, r3
 800c828:	f7fe ff59 	bl	800b6de <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800c82c:	4603      	mov	r3, r0
    }
 800c82e:	4618      	mov	r0, r3
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}

0800c836 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800c836:	b580      	push	{r7, lr}
 800c838:	b082      	sub	sp, #8
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
 800c83e:	6039      	str	r1, [r7, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	4618      	mov	r0, r3
 800c846:	f000 fd0c 	bl	800d262 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4618      	mov	r0, r3
 800c84e:	3708      	adds	r7, #8
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4618      	mov	r0, r3
 800c860:	370c      	adds	r7, #12
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr

0800c86a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
 800c86a:	b480      	push	{r7}
 800c86c:	b083      	sub	sp, #12
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4618      	mov	r0, r3
 800c876:	370c      	adds	r7, #12
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
 800c880:	b480      	push	{r7}
 800c882:	b083      	sub	sp, #12
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	4618      	mov	r0, r3
 800c88c:	370c      	adds	r7, #12
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr

0800c896 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
 800c896:	b480      	push	{r7}
 800c898:	b083      	sub	sp, #12
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	370c      	adds	r7, #12
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr

0800c8ac <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800c8b8:	68b9      	ldr	r1, [r7, #8]
 800c8ba:	68f8      	ldr	r0, [r7, #12]
 800c8bc:	f000 fce0 	bl	800d280 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800c8c0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c8c4:	eeb0 0a67 	vmov.f32	s0, s15
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800c8ce:	b480      	push	{r7}
 800c8d0:	b083      	sub	sp, #12
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	3308      	adds	r3, #8
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr

0800c8fc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	4618      	mov	r0, r3
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr

0800c912 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 800c912:	b580      	push	{r7, lr}
 800c914:	b082      	sub	sp, #8
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
 800c91a:	6039      	str	r1, [r7, #0]
    {
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4618      	mov	r0, r3
 800c920:	f7f8 f937 	bl	8004b92 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800c924:	f7f8 f945 	bl	8004bb2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6839      	ldr	r1, [r7, #0]
 800c92c:	4618      	mov	r0, r3
 800c92e:	f000 fccb 	bl	800d2c8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>
    }
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	4618      	mov	r0, r3
 800c936:	3708      	adds	r7, #8
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6839      	ldr	r1, [r7, #0]
 800c94a:	4618      	mov	r0, r3
 800c94c:	f000 fcc9 	bl	800d2e2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4618      	mov	r0, r3
 800c954:	3708      	adds	r7, #8
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b086      	sub	sp, #24
 800c95e:	af00      	add	r7, sp, #0
 800c960:	60f8      	str	r0, [r7, #12]
 800c962:	60b9      	str	r1, [r7, #8]
 800c964:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800c966:	6879      	ldr	r1, [r7, #4]
 800c968:	68b8      	ldr	r0, [r7, #8]
 800c96a:	f000 fcd0 	bl	800d30e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800c96e:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800c970:	6879      	ldr	r1, [r7, #4]
 800c972:	68b8      	ldr	r0, [r7, #8]
 800c974:	f000 fcd7 	bl	800d326 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800c978:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800c97a:	693a      	ldr	r2, [r7, #16]
 800c97c:	6979      	ldr	r1, [r7, #20]
 800c97e:	68f8      	ldr	r0, [r7, #12]
 800c980:	f000 fcdd 	bl	800d33e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800c984:	bf00      	nop
 800c986:	3718      	adds	r7, #24
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c994:	2201      	movs	r2, #1
 800c996:	2100      	movs	r1, #0
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f7ff ffde 	bl	800c95a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 fcf3 	bl	800d38a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>
  }
 800c9a4:	bf00      	nop
 800c9a6:	3708      	adds	r7, #8
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800c9ac:	b590      	push	{r4, r7, lr}
 800c9ae:	b087      	sub	sp, #28
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800c9b8:	68b8      	ldr	r0, [r7, #8]
 800c9ba:	f7fb fc65 	bl	8008288 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 800c9be:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800c9c0:	68b8      	ldr	r0, [r7, #8]
 800c9c2:	f7f9 fab8 	bl	8005f36 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800c9c6:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7f8 fa89 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d107      	bne.n	800c9e8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x3c>
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7f8 fa76 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d001      	beq.n	800c9ec <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x40>
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	e000      	b.n	800c9ee <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x42>
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d005      	beq.n	800c9fe <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x52>
      dst.resize(dstRows, dstCols);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	693a      	ldr	r2, [r7, #16]
 800c9f6:	6979      	ldr	r1, [r7, #20]
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fb f97d 	bl	8007cf8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800c9fe:	68b8      	ldr	r0, [r7, #8]
 800ca00:	f000 fcd3 	bl	800d3aa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>
 800ca04:	4604      	mov	r4, r0
 800ca06:	68b8      	ldr	r0, [r7, #8]
 800ca08:	f000 fcdb 	bl	800d3c2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	461a      	mov	r2, r3
 800ca10:	4621      	mov	r1, r4
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	f000 fce1 	bl	800d3da <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>
  }
 800ca18:	bf00      	nop
 800ca1a:	371c      	adds	r7, #28
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd90      	pop	{r4, r7, pc}

0800ca20 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename XprType::Scalar> &)
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b088      	sub	sp, #32
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800ca2c:	68b8      	ldr	r0, [r7, #8]
 800ca2e:	f7f9 fa90 	bl	8005f52 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 800ca32:	61f8      	str	r0, [r7, #28]
    Index dstCols = src.cols();
 800ca34:	68b8      	ldr	r0, [r7, #8]
 800ca36:	f7fb fc35 	bl	80082a4 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 800ca3a:	61b8      	str	r0, [r7, #24]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7f9 f999 	bl	8005d76 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800ca44:	4602      	mov	r2, r0
 800ca46:	69fb      	ldr	r3, [r7, #28]
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d107      	bne.n	800ca5c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7f9 f99c 	bl	8005d8c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800ca54:	4602      	mov	r2, r0
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d001      	beq.n	800ca60 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	e000      	b.n	800ca62 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 800ca60:	2300      	movs	r3, #0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d005      	beq.n	800ca72 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	69ba      	ldr	r2, [r7, #24]
 800ca6a:	69f9      	ldr	r1, [r7, #28]
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f000 fcd3 	bl	800d418 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    const int Size = EIGEN_PLAIN_ENUM_MIN(XprType::ColsAtCompileTime,DstXprType::ColsAtCompileTime);
 800ca72:	2301      	movs	r3, #1
 800ca74:	617b      	str	r3, [r7, #20]
    ActualXprType actual_xpr(src.nestedExpression());
 800ca76:	68b8      	ldr	r0, [r7, #8]
 800ca78:	f000 fd00 	bl	800d47c <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	f107 0310 	add.w	r3, r7, #16
 800ca82:	4611      	mov	r1, r2
 800ca84:	4618      	mov	r0, r3
 800ca86:	f000 fd04 	bl	800d492 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>
    compute_inverse<ActualXprTypeCleanded, DstXprType>::run(actual_xpr, dst);
 800ca8a:	f107 0310 	add.w	r3, r7, #16
 800ca8e:	68f9      	ldr	r1, [r7, #12]
 800ca90:	4618      	mov	r0, r3
 800ca92:	f000 fd13 	bl	800d4bc <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>
  }
 800ca96:	bf00      	nop
 800ca98:	3720      	adds	r7, #32
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b082      	sub	sp, #8
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 fd47 	bl	800d53a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>
 800caac:	4603      	mov	r3, r0
    }
 800caae:	4618      	mov	r0, r3
 800cab0:	3708      	adds	r7, #8
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b084      	sub	sp, #16
 800caba:	af00      	add	r7, sp, #0
 800cabc:	60f8      	str	r0, [r7, #12]
 800cabe:	60b9      	str	r1, [r7, #8]
 800cac0:	607a      	str	r2, [r7, #4]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	68b9      	ldr	r1, [r7, #8]
 800cac8:	4618      	mov	r0, r3
 800caca:	f000 fd58 	bl	800d57e <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	4618      	mov	r0, r3
 800cad2:	3710      	adds	r7, #16
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
    }
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	4618      	mov	r0, r3
 800cae4:	370c      	adds	r7, #12
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr

0800caee <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800caee:	b580      	push	{r7, lr}
 800caf0:	b084      	sub	sp, #16
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	60f8      	str	r0, [r7, #12]
 800caf6:	60b9      	str	r1, [r7, #8]
 800caf8:	607a      	str	r2, [r7, #4]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	68b9      	ldr	r1, [r7, #8]
 800cb00:	4618      	mov	r0, r3
 800cb02:	f000 fd6d 	bl	800d5e0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
    }
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	370c      	adds	r7, #12
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr

0800cb26 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800cb26:	b580      	push	{r7, lr}
 800cb28:	b082      	sub	sp, #8
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	6078      	str	r0, [r7, #4]
 800cb2e:	f7f9 ff04 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cb32:	4603      	mov	r3, r0
 800cb34:	4618      	mov	r0, r3
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	f7f9 fef9 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3708      	adds	r7, #8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b082      	sub	sp, #8
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7ff f8d8 	bl	800bd12 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800cb62:	4603      	mov	r3, r0
    }
 800cb64:	4618      	mov	r0, r3
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6839      	ldr	r1, [r7, #0]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f000 fd61 	bl	800d642 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4618      	mov	r0, r3
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800cb8a:	b480      	push	{r7}
 800cb8c:	b083      	sub	sp, #12
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	4618      	mov	r0, r3
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	370c      	adds	r7, #12
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr

0800cbb6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
 800cbb6:	b480      	push	{r7}
 800cbb8:	b083      	sub	sp, #12
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	370c      	adds	r7, #12
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr

0800cbcc <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	370c      	adds	r7, #12
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr

0800cbe2 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b084      	sub	sp, #16
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	60f8      	str	r0, [r7, #12]
 800cbea:	60b9      	str	r1, [r7, #8]
 800cbec:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800cbee:	68b9      	ldr	r1, [r7, #8]
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f000 fd35 	bl	800d660 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800cbf6:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cbfa:	eeb0 0a67 	vmov.f32	s0, s15
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800cc04:	b5b0      	push	{r4, r5, r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7fe ff7b 	bl	800bb0a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800cc14:	4604      	mov	r4, r0
 800cc16:	6838      	ldr	r0, [r7, #0]
 800cc18:	f7f9 fade 	bl	80061d8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 800cc1c:	4605      	mov	r5, r0
 800cc1e:	f107 030c 	add.w	r3, r7, #12
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fa f8e7 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800cc28:	f107 030c 	add.w	r3, r7, #12
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	4629      	mov	r1, r5
 800cc30:	4620      	mov	r0, r4
 800cc32:	f000 fd26 	bl	800d682 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7fe ff67 	bl	800bb0a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800cc3c:	4603      	mov	r3, r0
    }
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3710      	adds	r7, #16
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bdb0      	pop	{r4, r5, r7, pc}

0800cc46 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800cc46:	b480      	push	{r7}
 800cc48:	b083      	sub	sp, #12
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
 800cc4e:	bf00      	nop
 800cc50:	370c      	adds	r7, #12
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr

0800cc5a <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800cc5a:	b590      	push	{r4, r7, lr}
 800cc5c:	b087      	sub	sp, #28
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	60f8      	str	r0, [r7, #12]
 800cc62:	60b9      	str	r1, [r7, #8]
 800cc64:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800cc66:	68b8      	ldr	r0, [r7, #8]
 800cc68:	f000 fd1c 	bl	800d6a4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>
 800cc6c:	4604      	mov	r4, r0
 800cc6e:	f107 0310 	add.w	r3, r7, #16
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7fa f8bf 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800cc78:	f107 0310 	add.w	r3, r7, #16
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	4621      	mov	r1, r4
 800cc80:	68f8      	ldr	r0, [r7, #12]
 800cc82:	f7fa f99f 	bl	8006fc4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800cc86:	68b8      	ldr	r0, [r7, #8]
 800cc88:	f000 fd18 	bl	800d6bc <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>
 800cc8c:	4604      	mov	r4, r0
 800cc8e:	f107 0314 	add.w	r3, r7, #20
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 fd1e 	bl	800d6d4 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800cc98:	f107 0314 	add.w	r3, r7, #20
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	4621      	mov	r1, r4
 800cca0:	68f8      	ldr	r0, [r7, #12]
 800cca2:	f000 fd22 	bl	800d6ea <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800cca6:	bf00      	nop
 800cca8:	371c      	adds	r7, #28
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd90      	pop	{r4, r7, pc}
	...

0800ccb0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	607a      	str	r2, [r7, #4]
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	68b9      	ldr	r1, [r7, #8]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f000 fd22 	bl	800d70c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	db07      	blt.n	800ccde <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7f8 f855 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	db05      	blt.n	800ccea <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800ccde:	4b05      	ldr	r3, [pc, #20]	; (800ccf4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800cce0:	4a05      	ldr	r2, [pc, #20]	; (800ccf8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800cce2:	2178      	movs	r1, #120	; 0x78
 800cce4:	4805      	ldr	r0, [pc, #20]	; (800ccfc <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800cce6:	f010 ff6d 	bl	801dbc4 <__assert_func>
    }
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	4618      	mov	r0, r3
 800ccee:	3710      	adds	r7, #16
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	080245b0 	.word	0x080245b0
 800ccf8:	08025bd8 	.word	0x08025bd8
 800ccfc:	08024734 	.word	0x08024734

0800cd00 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>:
 800cd00:	b480      	push	{r7}
 800cd02:	b083      	sub	sp, #12
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	370c      	adds	r7, #12
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b082      	sub	sp, #8
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 fd05 	bl	800d72e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	4618      	mov	r0, r3
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}

0800cd2e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800cd2e:	b580      	push	{r7, lr}
 800cd30:	b082      	sub	sp, #8
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f7ff ffed 	bl	800cd16 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3708      	adds	r7, #8
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>:
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b082      	sub	sp, #8
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
 800cd4e:	f7f9 fdec 	bl	800692a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800cd52:	4603      	mov	r3, r0
 800cd54:	4618      	mov	r0, r3
 800cd56:	3708      	adds	r7, #8
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	f7f9 fde9 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
	...

0800cd74 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800cd74:	b5b0      	push	{r4, r5, r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	607a      	str	r2, [r7, #4]
 800cd80:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f7ff ffd3 	bl	800cd2e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	4614      	mov	r4, r2
 800cd8e:	461d      	mov	r5, r3
 800cd90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd94:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cd98:	e884 0003 	stmia.w	r4, {r0, r1}
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f103 0218 	add.w	r2, r3, #24
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	4614      	mov	r4, r2
 800cda6:	461d      	mov	r5, r3
 800cda8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cdaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cdac:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cdb0:	e884 0003 	stmia.w	r4, {r0, r1}
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	3330      	adds	r3, #48	; 0x30
 800cdb8:	6839      	ldr	r1, [r7, #0]
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7f8 fb16 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800cdc0:	68b8      	ldr	r0, [r7, #8]
 800cdc2:	f7fe fc7f 	bl	800b6c4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800cdc6:	4604      	mov	r4, r0
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7ff ffbb 	bl	800cd46 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	429c      	cmp	r4, r3
 800cdd4:	d10a      	bne.n	800cdec <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x78>
 800cdd6:	68b8      	ldr	r0, [r7, #8]
 800cdd8:	f7fe fc81 	bl	800b6de <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800cddc:	4604      	mov	r4, r0
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7ff ffbb 	bl	800cd5c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 800cde6:	4603      	mov	r3, r0
 800cde8:	429c      	cmp	r4, r3
 800cdea:	d005      	beq.n	800cdf8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x84>
 800cdec:	4b05      	ldr	r3, [pc, #20]	; (800ce04 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x90>)
 800cdee:	4a06      	ldr	r2, [pc, #24]	; (800ce08 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x94>)
 800cdf0:	2174      	movs	r1, #116	; 0x74
 800cdf2:	4806      	ldr	r0, [pc, #24]	; (800ce0c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x98>)
 800cdf4:	f010 fee6 	bl	801dbc4 <__assert_func>
    }
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bdb0      	pop	{r4, r5, r7, pc}
 800ce02:	bf00      	nop
 800ce04:	0801fa2c 	.word	0x0801fa2c
 800ce08:	08025cb4 	.word	0x08025cb4
 800ce0c:	0801fc90 	.word	0x0801fc90

0800ce10 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 f809 	bl	800ce30 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	4618      	mov	r0, r3
 800ce22:	f000 fc8f 	bl	800d744 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>
 800ce26:	4603      	mov	r3, r0
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	370c      	adds	r7, #12
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr

0800ce46 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800ce46:	b580      	push	{r7, lr}
 800ce48:	b082      	sub	sp, #8
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7fe fc37 	bl	800b6c4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800ce56:	4603      	mov	r3, r0
    }
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3708      	adds	r7, #8
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}

0800ce60 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f000 fc92 	bl	800d792 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	4618      	mov	r0, r3
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7ff ffec 	bl	800ce60 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3708      	adds	r7, #8
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b082      	sub	sp, #8
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7ff ffeb 	bl	800ce78 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	4618      	mov	r0, r3
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7ff ffeb 	bl	800ce92 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	4618      	mov	r0, r3
 800cec0:	3708      	adds	r7, #8
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b082      	sub	sp, #8
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	330c      	adds	r3, #12
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7ff ffea 	bl	800ceac <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	3304      	adds	r3, #4
 800cedc:	4618      	mov	r0, r3
 800cede:	f7fe fce7 	bl	800b8b0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	4618      	mov	r0, r3
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7ff ffe5 	bl	800cec6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 fc3d 	bl	800d77c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	4618      	mov	r0, r3
 800cf06:	3708      	adds	r7, #8
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7ff ffe8 	bl	800ceec <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b082      	sub	sp, #8
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7ff ffeb 	bl	800cf0c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3708      	adds	r7, #8
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800cf40:	b580      	push	{r7, lr}
 800cf42:	ed2d 8b02 	vpush	{d8}
 800cf46:	b088      	sub	sp, #32
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f7ff f938 	bl	800c1c4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	dd05      	ble.n	800cf66 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f7ff ff58 	bl	800ce10 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	dc06      	bgt.n	800cf74 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800cf66:	4b16      	ldr	r3, [pc, #88]	; (800cfc0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800cf68:	4a16      	ldr	r2, [pc, #88]	; (800cfc4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800cf6a:	f240 119b 	movw	r1, #411	; 0x19b
 800cf6e:	4816      	ldr	r0, [pc, #88]	; (800cfc8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800cf70:	f010 fe28 	bl	801dbc4 <__assert_func>
 800cf74:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f7ff ff5a 	bl	800ce30 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	f107 030c 	add.w	r3, r7, #12
 800cf82:	4611      	mov	r1, r2
 800cf84:	4618      	mov	r0, r3
 800cf86:	f000 fbea 	bl	800d75e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f7ff ff50 	bl	800ce30 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800cf90:	4602      	mov	r2, r0
 800cf92:	f107 030c 	add.w	r3, r7, #12
 800cf96:	6839      	ldr	r1, [r7, #0]
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f000 fc05 	bl	800d7a8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 800cf9e:	eeb0 8a40 	vmov.f32	s16, s0
 800cfa2:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800cfa4:	f107 030c 	add.w	r3, r7, #12
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7ff ffbc 	bl	800cf26 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800cfae:	eef0 7a48 	vmov.f32	s15, s16
}
 800cfb2:	eeb0 0a67 	vmov.f32	s0, s15
 800cfb6:	3720      	adds	r7, #32
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	ecbd 8b02 	vpop	{d8}
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	08024aac 	.word	0x08024aac
 800cfc4:	08025efc 	.word	0x08025efc
 800cfc8:	08024cb8 	.word	0x08024cb8

0800cfcc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800cfd4:	2202      	movs	r2, #2
 800cfd6:	2101      	movs	r1, #1
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f7fd facf 	bl	800a57c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fbf3 	bl	800d7ca <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 800cfe4:	bf00      	nop
 800cfe6:	3708      	adds	r7, #8
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:

    /** \returns the functor representing the nullary operation */
    EIGEN_DEVICE_FUNC
    const NullaryOp& functor() const { return m_functor; }
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	3304      	adds	r3, #4
 800cff8:	4618      	mov	r0, r3
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	4618      	mov	r0, r3
 800d010:	370c      	adds	r7, #12
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b084      	sub	sp, #16
 800d01e:	af00      	add	r7, sp, #0
 800d020:	60f8      	str	r0, [r7, #12]
 800d022:	60b9      	str	r1, [r7, #8]
 800d024:	607a      	str	r2, [r7, #4]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	68b9      	ldr	r1, [r7, #8]
 800d02c:	4618      	mov	r0, r3
 800d02e:	f000 fbe8 	bl	800d802 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	4618      	mov	r0, r3
 800d036:	3710      	adds	r7, #16
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
    }
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	4618      	mov	r0, r3
 800d048:	370c      	adds	r7, #12
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr

0800d052 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>:
 800d052:	b580      	push	{r7, lr}
 800d054:	b084      	sub	sp, #16
 800d056:	af00      	add	r7, sp, #0
 800d058:	60f8      	str	r0, [r7, #12]
 800d05a:	60b9      	str	r1, [r7, #8]
 800d05c:	607a      	str	r2, [r7, #4]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	687a      	ldr	r2, [r7, #4]
 800d062:	68b9      	ldr	r1, [r7, #8]
 800d064:	4618      	mov	r0, r3
 800d066:	f000 fbf7 	bl	800d858 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	4618      	mov	r0, r3
 800d06e:	3710      	adds	r7, #16
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
    }
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4618      	mov	r0, r3
 800d080:	370c      	adds	r7, #12
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr

0800d08a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>:
      : m_xpr(xpr), m_startRow(startRow), m_startCol(startCol),
                    m_blockRows(blockRows), m_blockCols(blockCols)
    {}

    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
    EIGEN_DEVICE_FUNC inline Index cols() const { return m_blockCols.value(); }
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b082      	sub	sp, #8
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
 800d092:	f7f9 fc52 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d096:	4603      	mov	r3, r0
 800d098:	4618      	mov	r0, r3
 800d09a:	3708      	adds	r7, #8
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>:
    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	f7f9 fc47 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3708      	adds	r7, #8
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}

0800d0b6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b082      	sub	sp, #8
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	3304      	adds	r3, #4
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7ff f991 	bl	800c3ea <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800d0c8:	4603      	mov	r3, r0
    }
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3708      	adds	r7, #8
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}

0800d0d2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b082      	sub	sp, #8
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
 800d0da:	6039      	str	r1, [r7, #0]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6839      	ldr	r1, [r7, #0]
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f000 fbeb 	bl	800d8bc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3708      	adds	r7, #8
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	370c      	adds	r7, #12
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr

0800d106 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
 800d106:	b480      	push	{r7}
 800d108:	b083      	sub	sp, #12
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	4618      	mov	r0, r3
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	4618      	mov	r0, r3
 800d128:	370c      	adds	r7, #12
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr

0800d132 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
 800d132:	b480      	push	{r7}
 800d134:	b083      	sub	sp, #12
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4618      	mov	r0, r3
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr

0800d148 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	60b9      	str	r1, [r7, #8]
 800d152:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800d154:	68b9      	ldr	r1, [r7, #8]
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	f000 fbbf 	bl	800d8da <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>
 800d15c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d160:	eeb0 0a67 	vmov.f32	s0, s15
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}

0800d16a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d16a:	b580      	push	{r7, lr}
 800d16c:	b082      	sub	sp, #8
 800d16e:	af00      	add	r7, sp, #0
 800d170:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d172:	2200      	movs	r2, #0
 800d174:	2102      	movs	r1, #2
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f7fc ff39 	bl	8009fee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 fbbd 	bl	800d8fc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>
  }
 800d182:	bf00      	nop
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}

0800d18a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)

    /** Column or Row constructor
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    BlockImpl_dense(XprType& xpr, Index i)
 800d18a:	b5b0      	push	{r4, r5, r7, lr}
 800d18c:	b084      	sub	sp, #16
 800d18e:	af00      	add	r7, sp, #0
 800d190:	60f8      	str	r0, [r7, #12]
 800d192:	60b9      	str	r1, [r7, #8]
 800d194:	607a      	str	r2, [r7, #4]
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
             BlockRows==1 ? 1 : xpr.rows(),
             BlockCols==1 ? 1 : xpr.cols()),
        m_xpr(xpr),
        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d196:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7fa ff34 	bl	8008008 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800d1a0:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d1a2:	68b8      	ldr	r0, [r7, #8]
 800d1a4:	f000 fbba 	bl	800d91c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800d1a8:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	fb02 f303 	mul.w	r3, r2, r3
 800d1b0:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d1b2:	441d      	add	r5, r3
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7f7 fde2 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2201      	movs	r2, #1
 800d1c0:	4629      	mov	r1, r5
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	f000 fbc2 	bl	800d94c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	68ba      	ldr	r2, [r7, #8]
 800d1cc:	609a      	str	r2, [r3, #8]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	330c      	adds	r3, #12
 800d1d2:	6879      	ldr	r1, [r7, #4]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f000 fbf7 	bl	800d9c8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	3310      	adds	r3, #16
 800d1de:	2100      	movs	r1, #0
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f000 fbf1 	bl	800d9c8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
    {
      init();
 800d1e6:	68f8      	ldr	r0, [r7, #12]
 800d1e8:	f000 fbfd 	bl	800d9e6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>
    }
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3710      	adds	r7, #16
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bdb0      	pop	{r4, r5, r7, pc}

0800d1f6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d1f6:	b5b0      	push	{r4, r5, r7, lr}
 800d1f8:	b084      	sub	sp, #16
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	60f8      	str	r0, [r7, #12]
 800d1fe:	60b9      	str	r1, [r7, #8]
 800d200:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d202:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	4618      	mov	r0, r3
 800d208:	f7f9 fe9d 	bl	8006f46 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800d20c:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d20e:	68b8      	ldr	r0, [r7, #8]
 800d210:	f7f9 ff6a 	bl	80070e8 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800d214:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	fb02 f303 	mul.w	r3, r2, r3
 800d21c:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d21e:	441d      	add	r5, r3
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	4618      	mov	r0, r3
 800d224:	f7f7 fe5d 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800d228:	4602      	mov	r2, r0
 800d22a:	2301      	movs	r3, #1
 800d22c:	4629      	mov	r1, r5
 800d22e:	4620      	mov	r0, r4
 800d230:	f000 fc00 	bl	800da34 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	68ba      	ldr	r2, [r7, #8]
 800d238:	609a      	str	r2, [r3, #8]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	330c      	adds	r3, #12
 800d23e:	2100      	movs	r1, #0
 800d240:	4618      	mov	r0, r3
 800d242:	f000 fbc1 	bl	800d9c8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	3310      	adds	r3, #16
 800d24a:	6879      	ldr	r1, [r7, #4]
 800d24c:	4618      	mov	r0, r3
 800d24e:	f000 fc2f 	bl	800dab0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d252:	68f8      	ldr	r0, [r7, #12]
 800d254:	f000 fc46 	bl	800dae4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	4618      	mov	r0, r3
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bdb0      	pop	{r4, r5, r7, pc}

0800d262 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d262:	b580      	push	{r7, lr}
 800d264:	b082      	sub	sp, #8
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
 800d26a:	6039      	str	r1, [r7, #0]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6839      	ldr	r1, [r7, #0]
 800d270:	4618      	mov	r0, r3
 800d272:	f000 fc47 	bl	800db04 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	4618      	mov	r0, r3
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d28a:	6839      	ldr	r1, [r7, #0]
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 fc4b 	bl	800db28 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800d292:	eef0 7a40 	vmov.f32	s15, s0
 800d296:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800d29a:	6839      	ldr	r1, [r7, #0]
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 fc54 	bl	800db4a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800d2a2:	eef0 7a40 	vmov.f32	s15, s0
 800d2a6:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d2aa:	f107 020c 	add.w	r2, r7, #12
 800d2ae:	f107 0308 	add.w	r3, r7, #8
 800d2b2:	4619      	mov	r1, r3
 800d2b4:	6838      	ldr	r0, [r7, #0]
 800d2b6:	f7fb fefe 	bl	80090b6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800d2ba:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d2be:	eeb0 0a67 	vmov.f32	s0, s15
 800d2c2:	3710      	adds	r7, #16
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b082      	sub	sp, #8
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800d2d2:	6839      	ldr	r1, [r7, #0]
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 fc5c 	bl	800db92 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800d2da:	bf00      	nop
 800d2dc:	3708      	adds	r7, #8
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}

0800d2e2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800d2e2:	b590      	push	{r4, r7, lr}
 800d2e4:	b083      	sub	sp, #12
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	6039      	str	r1, [r7, #0]
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 fc7d 	bl	800dbec <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 800d2f2:	687c      	ldr	r4, [r7, #4]
 800d2f4:	6838      	ldr	r0, [r7, #0]
 800d2f6:	f000 fc6d 	bl	800dbd4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	4620      	mov	r0, r4
 800d300:	f7fa f9e0 	bl	80076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	4618      	mov	r0, r3
 800d308:	370c      	adds	r7, #12
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd90      	pop	{r4, r7, pc}

0800d30e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800d30e:	b480      	push	{r7}
 800d310:	b083      	sub	sp, #12
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
 800d316:	6039      	str	r1, [r7, #0]
      : inner;
 800d318:	687b      	ldr	r3, [r7, #4]
  }
 800d31a:	4618      	mov	r0, r3
 800d31c:	370c      	adds	r7, #12
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr

0800d326 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800d326:	b480      	push	{r7}
 800d328:	b083      	sub	sp, #12
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
 800d32e:	6039      	str	r1, [r7, #0]
      : outer;
 800d330:	683b      	ldr	r3, [r7, #0]
  }
 800d332:	4618      	mov	r0, r3
 800d334:	370c      	adds	r7, #12
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr

0800d33e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800d33e:	b5b0      	push	{r4, r5, r7, lr}
 800d340:	b086      	sub	sp, #24
 800d342:	af00      	add	r7, sp, #0
 800d344:	60f8      	str	r0, [r7, #12]
 800d346:	60b9      	str	r1, [r7, #8]
 800d348:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	689c      	ldr	r4, [r3, #8]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	68b9      	ldr	r1, [r7, #8]
 800d356:	4618      	mov	r0, r3
 800d358:	f000 fc53 	bl	800dc02 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>
 800d35c:	4605      	mov	r5, r0
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	685b      	ldr	r3, [r3, #4]
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	68b9      	ldr	r1, [r7, #8]
 800d366:	4618      	mov	r0, r3
 800d368:	f000 fc63 	bl	800dc32 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>
 800d36c:	eef0 7a40 	vmov.f32	s15, s0
 800d370:	edc7 7a05 	vstr	s15, [r7, #20]
 800d374:	f107 0314 	add.w	r3, r7, #20
 800d378:	461a      	mov	r2, r3
 800d37a:	4629      	mov	r1, r5
 800d37c:	4620      	mov	r0, r4
 800d37e:	f7fb f8a9 	bl	80084d4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800d382:	bf00      	nop
 800d384:	3718      	adds	r7, #24
 800d386:	46bd      	mov	sp, r7
 800d388:	bdb0      	pop	{r4, r5, r7, pc}

0800d38a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b082      	sub	sp, #8
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d392:	2202      	movs	r2, #2
 800d394:	2100      	movs	r1, #0
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7ff fadf 	bl	800c95a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 fc7b 	bl	800dc98 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>
  }
 800d3a2:	bf00      	nop
 800d3a4:	3708      	adds	r7, #8
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}

0800d3aa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800d3aa:	b480      	push	{r7}
 800d3ac:	b083      	sub	sp, #12
 800d3ae:	af00      	add	r7, sp, #0
 800d3b0:	6078      	str	r0, [r7, #4]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	370c      	adds	r7, #12
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr

0800d3c2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800d3c2:	b480      	push	{r7}
 800d3c4:	b083      	sub	sp, #12
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	3304      	adds	r3, #4
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	370c      	adds	r7, #12
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr

0800d3da <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800d3da:	b580      	push	{r7, lr}
 800d3dc:	b088      	sub	sp, #32
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	60f8      	str	r0, [r7, #12]
 800d3e2:	60b9      	str	r1, [r7, #8]
 800d3e4:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800d3e6:	f107 0314 	add.w	r3, r7, #20
 800d3ea:	687a      	ldr	r2, [r7, #4]
 800d3ec:	68b9      	ldr	r1, [r7, #8]
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f000 fc62 	bl	800dcb8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>
 800d3f4:	f107 031c 	add.w	r3, r7, #28
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7f9 fcfc 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800d3fe:	f107 021c 	add.w	r2, r7, #28
 800d402:	f107 0314 	add.w	r3, r7, #20
 800d406:	4619      	mov	r1, r3
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	f000 fc6c 	bl	800dce6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800d40e:	bf00      	nop
 800d410:	3720      	adds	r7, #32
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
	...

0800d418 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800d418:	b580      	push	{r7, lr}
 800d41a:	b086      	sub	sp, #24
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	2b01      	cmp	r3, #1
 800d428:	d108      	bne.n	800d43c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d105      	bne.n	800d43c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	2b00      	cmp	r3, #0
 800d434:	db02      	blt.n	800d43c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	da06      	bge.n	800d44a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x32>
 800d43c:	4b0c      	ldr	r3, [pc, #48]	; (800d470 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x58>)
 800d43e:	4a0d      	ldr	r2, [pc, #52]	; (800d474 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x5c>)
 800d440:	f240 1111 	movw	r1, #273	; 0x111
 800d444:	480c      	ldr	r0, [pc, #48]	; (800d478 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x60>)
 800d446:	f010 fbbd 	bl	801dbc4 <__assert_func>
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	617b      	str	r3, [r7, #20]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	613b      	str	r3, [r7, #16]
  }
 800d452:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	fb02 f103 	mul.w	r1, r2, r3
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	68ba      	ldr	r2, [r7, #8]
 800d462:	f000 fc51 	bl	800dd08 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>
    }
 800d466:	bf00      	nop
 800d468:	3718      	adds	r7, #24
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	080224bc 	.word	0x080224bc
 800d474:	080260c4 	.word	0x080260c4
 800d478:	080226d8 	.word	0x080226d8

0800d47c <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>:
  EIGEN_DEVICE_FUNC const XprTypeNestedCleaned& nestedExpression() const { return m_xpr; }
 800d47c:	b480      	push	{r7}
 800d47e:	b083      	sub	sp, #12
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	4618      	mov	r0, r3
 800d488:	370c      	adds	r7, #12
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr

0800d492 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>:
    explicit Matrix(const T& x)
 800d492:	b580      	push	{r7, lr}
 800d494:	b082      	sub	sp, #8
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
 800d49a:	6039      	str	r1, [r7, #0]
    {
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7f7 fb9a 	bl	8004bd8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800d4a4:	f7f7 fba8 	bl	8004bf8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6839      	ldr	r1, [r7, #0]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f000 fc38 	bl	800dd22 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>
    }
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3708      	adds	r7, #8
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>:
  static inline void run(const MatrixType& matrix, ResultType& result)
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	ed2d 8b02 	vpush	{d8}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800d4ca:	f107 030c 	add.w	r3, r7, #12
 800d4ce:	6879      	ldr	r1, [r7, #4]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7fc ff50 	bl	800a376 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    result.coeffRef(0,0) = Scalar(1) / matrixEval.coeff(0,0);
 800d4d6:	f107 030c 	add.w	r3, r7, #12
 800d4da:	2200      	movs	r2, #0
 800d4dc:	2100      	movs	r1, #0
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f000 fc2c 	bl	800dd3c <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	ed93 8a00 	vldr	s16, [r3]
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f7f9 f968 	bl	80067c6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4fc:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800d500:	edc3 7a00 	vstr	s15, [r3]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800d504:	f107 030c 	add.w	r3, r7, #12
 800d508:	4618      	mov	r0, r3
 800d50a:	f7fb fe1b 	bl	8009144 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  }
 800d50e:	bf00      	nop
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	ecbd 8b02 	vpop	{d8}
 800d518:	bd80      	pop	{r7, pc}

0800d51a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b082      	sub	sp, #8
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f7f8 fbe9 	bl	8005cfa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d528:	4603      	mov	r3, r0
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7f8 fc23 	bl	8005d76 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800d530:	4603      	mov	r3, r0
 800d532:	4618      	mov	r0, r3
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 800d53a:	b590      	push	{r4, r7, lr}
 800d53c:	b083      	sub	sp, #12
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f7ff ffe9 	bl	800d51a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800d548:	4604      	mov	r4, r0
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f000 f807 	bl	800d55e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800d550:	4603      	mov	r3, r0
 800d552:	fb04 f303 	mul.w	r3, r4, r3
 800d556:	4618      	mov	r0, r3
 800d558:	370c      	adds	r7, #12
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd90      	pop	{r4, r7, pc}

0800d55e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800d55e:	b580      	push	{r7, lr}
 800d560:	b082      	sub	sp, #8
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f7f8 fbc7 	bl	8005cfa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d56c:	4603      	mov	r3, r0
 800d56e:	4618      	mov	r0, r3
 800d570:	f7f8 fc0c 	bl	8005d8c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800d574:	4603      	mov	r3, r0
 800d576:	4618      	mov	r0, r3
 800d578:	3708      	adds	r7, #8
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d57e:	b5b0      	push	{r4, r5, r7, lr}
 800d580:	b084      	sub	sp, #16
 800d582:	af00      	add	r7, sp, #0
 800d584:	60f8      	str	r0, [r7, #12]
 800d586:	60b9      	str	r1, [r7, #8]
 800d588:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d58a:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	4618      	mov	r0, r3
 800d590:	f7f9 fcd9 	bl	8006f46 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800d594:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d596:	68b8      	ldr	r0, [r7, #8]
 800d598:	f000 fa35 	bl	800da06 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800d59c:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	fb02 f303 	mul.w	r3, r2, r3
 800d5a4:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d5a6:	18e9      	adds	r1, r5, r3
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	f000 fbe9 	bl	800dd84 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	68ba      	ldr	r2, [r7, #8]
 800d5b6:	609a      	str	r2, [r3, #8]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	330c      	adds	r3, #12
 800d5bc:	6879      	ldr	r1, [r7, #4]
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f000 fa02 	bl	800d9c8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	3310      	adds	r3, #16
 800d5c8:	2100      	movs	r1, #0
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f000 fa70 	bl	800dab0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d5d0:	68f8      	ldr	r0, [r7, #12]
 800d5d2:	f000 fc15 	bl	800de00 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>
    }
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bdb0      	pop	{r4, r5, r7, pc}

0800d5e0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d5e0:	b5b0      	push	{r4, r5, r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d5ec:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7fd fd27 	bl	800b044 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800d5f6:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d5f8:	68b8      	ldr	r0, [r7, #8]
 800d5fa:	f000 fc11 	bl	800de20 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 800d5fe:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	fb02 f303 	mul.w	r3, r2, r3
 800d606:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d608:	18e9      	adds	r1, r5, r3
 800d60a:	2301      	movs	r3, #1
 800d60c:	2201      	movs	r2, #1
 800d60e:	4620      	mov	r0, r4
 800d610:	f000 fc1e 	bl	800de50 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	68ba      	ldr	r2, [r7, #8]
 800d618:	609a      	str	r2, [r3, #8]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	330c      	adds	r3, #12
 800d61e:	6879      	ldr	r1, [r7, #4]
 800d620:	4618      	mov	r0, r3
 800d622:	f000 fa45 	bl	800dab0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	330d      	adds	r3, #13
 800d62a:	6879      	ldr	r1, [r7, #4]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f000 fa3f 	bl	800dab0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d632:	68f8      	ldr	r0, [r7, #12]
 800d634:	f000 fc4a 	bl	800decc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>
    }
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	4618      	mov	r0, r3
 800d63c:	3710      	adds	r7, #16
 800d63e:	46bd      	mov	sp, r7
 800d640:	bdb0      	pop	{r4, r5, r7, pc}

0800d642 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d642:	b580      	push	{r7, lr}
 800d644:	b082      	sub	sp, #8
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
 800d64a:	6039      	str	r1, [r7, #0]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6839      	ldr	r1, [r7, #0]
 800d650:	4618      	mov	r0, r3
 800d652:	f000 fc4b 	bl	800deec <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	4618      	mov	r0, r3
 800d65a:	3708      	adds	r7, #8
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d66a:	2200      	movs	r2, #0
 800d66c:	2100      	movs	r1, #0
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 fc4e 	bl	800df10 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800d674:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d678:	eeb0 0a67 	vmov.f32	s0, s15
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d682:	b580      	push	{r7, lr}
 800d684:	b086      	sub	sp, #24
 800d686:	af00      	add	r7, sp, #0
 800d688:	60f8      	str	r0, [r7, #12]
 800d68a:	60b9      	str	r1, [r7, #8]
 800d68c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	68b9      	ldr	r1, [r7, #8]
 800d696:	6978      	ldr	r0, [r7, #20]
 800d698:	f000 fc4d 	bl	800df36 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800d69c:	bf00      	nop
 800d69e:	3718      	adds	r7, #24
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	370c      	adds	r7, #12
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr

0800d6bc <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800d6bc:	b480      	push	{r7}
 800d6be:	b083      	sub	sp, #12
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	3304      	adds	r3, #4
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	370c      	adds	r7, #12
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr

0800d6d4 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with subtraction
  *
  */
template<typename DstScalar,typename SrcScalar> struct sub_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(sub_assign_op)
 800d6d4:	b480      	push	{r7}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	370c      	adds	r7, #12
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr

0800d6ea <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d6ea:	b580      	push	{r7, lr}
 800d6ec:	b086      	sub	sp, #24
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	60f8      	str	r0, [r7, #12]
 800d6f2:	60b9      	str	r1, [r7, #8]
 800d6f4:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	68b9      	ldr	r1, [r7, #8]
 800d6fe:	6978      	ldr	r0, [r7, #20]
 800d700:	f000 fc44 	bl	800df8c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800d704:	bf00      	nop
 800d706:	3718      	adds	r7, #24
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	68b9      	ldr	r1, [r7, #8]
 800d71e:	4618      	mov	r0, r3
 800d720:	f000 fc6e 	bl	800e000 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	4618      	mov	r0, r3
 800d728:	3710      	adds	r7, #16
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d72e:	b480      	push	{r7}
 800d730:	b083      	sub	sp, #12
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
    }
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	4618      	mov	r0, r3
 800d73a:	370c      	adds	r7, #12
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr

0800d744 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fd ffc5 	bl	800b6de <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800d754:	4603      	mov	r3, r0
    }
 800d756:	4618      	mov	r0, r3
 800d758:	3708      	adds	r7, #8
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800d75e:	b580      	push	{r7, lr}
 800d760:	b082      	sub	sp, #8
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
 800d766:	6039      	str	r1, [r7, #0]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6839      	ldr	r1, [r7, #0]
 800d76c:	4618      	mov	r0, r3
 800d76e:	f000 fc7d 	bl	800e06c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	4618      	mov	r0, r3
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	4618      	mov	r0, r3
 800d788:	370c      	adds	r7, #12
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr

0800d792 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
 800d792:	b480      	push	{r7}
 800d794:	b083      	sub	sp, #12
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4618      	mov	r0, r3
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr

0800d7a8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	60f8      	str	r0, [r7, #12]
 800d7b0:	60b9      	str	r1, [r7, #8]
 800d7b2:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800d7b4:	68b9      	ldr	r1, [r7, #8]
 800d7b6:	68f8      	ldr	r0, [r7, #12]
 800d7b8:	f000 fc67 	bl	800e08a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>
 800d7bc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d7c0:	eeb0 0a67 	vmov.f32	s0, s15
 800d7c4:	3710      	adds	r7, #16
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b082      	sub	sp, #8
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	2102      	movs	r1, #2
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7fc fed0 	bl	800a57c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f000 fc78 	bl	800e0d2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 800d7e2:	bf00      	nop
 800d7e4:	3708      	adds	r7, #8
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b082      	sub	sp, #8
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 fc7d 	bl	800e0f2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3708      	adds	r7, #8
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>:
    inline BlockImpl_dense(XprType& xpr, Index i)
 800d802:	b580      	push	{r7, lr}
 800d804:	b084      	sub	sp, #16
 800d806:	af00      	add	r7, sp, #0
 800d808:	60f8      	str	r0, [r7, #12]
 800d80a:	60b9      	str	r1, [r7, #8]
 800d80c:	607a      	str	r2, [r7, #4]
        m_blockCols(BlockCols==1 ? 1 : xpr.cols())
 800d80e:	68f8      	ldr	r0, [r7, #12]
 800d810:	f7ff ffeb 	bl	800d7ea <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	68b9      	ldr	r1, [r7, #8]
 800d818:	4618      	mov	r0, r3
 800d81a:	f7f6 fe79 	bl	8004510 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	3310      	adds	r3, #16
 800d822:	6879      	ldr	r1, [r7, #4]
 800d824:	4618      	mov	r0, r3
 800d826:	f000 f8cf 	bl	800d9c8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	3314      	adds	r3, #20
 800d82e:	2100      	movs	r1, #0
 800d830:	4618      	mov	r0, r3
 800d832:	f000 f93d 	bl	800dab0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	3315      	adds	r3, #21
 800d83a:	2101      	movs	r1, #1
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7f9 f84f 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	3316      	adds	r3, #22
 800d846:	2101      	movs	r1, #1
 800d848:	4618      	mov	r0, r3
 800d84a:	f7f9 f849 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
    {}
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	4618      	mov	r0, r3
 800d852:	3710      	adds	r7, #16
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d858:	b5b0      	push	{r4, r5, r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	60f8      	str	r0, [r7, #12]
 800d860:	60b9      	str	r1, [r7, #8]
 800d862:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d864:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d866:	68b8      	ldr	r0, [r7, #8]
 800d868:	f000 fc4e 	bl	800e108 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>
 800d86c:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d86e:	68b8      	ldr	r0, [r7, #8]
 800d870:	f000 fc5e 	bl	800e130 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 800d874:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	fb02 f303 	mul.w	r3, r2, r3
 800d87c:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d87e:	18e9      	adds	r1, r5, r3
 800d880:	2301      	movs	r3, #1
 800d882:	2201      	movs	r2, #1
 800d884:	4620      	mov	r0, r4
 800d886:	f000 fc87 	bl	800e198 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	3308      	adds	r3, #8
 800d88e:	68ba      	ldr	r2, [r7, #8]
 800d890:	6812      	ldr	r2, [r2, #0]
 800d892:	601a      	str	r2, [r3, #0]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	330c      	adds	r3, #12
 800d898:	2100      	movs	r1, #0
 800d89a:	4618      	mov	r0, r3
 800d89c:	f000 f908 	bl	800dab0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	3310      	adds	r3, #16
 800d8a4:	6879      	ldr	r1, [r7, #4]
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f000 f88e 	bl	800d9c8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800d8ac:	68f8      	ldr	r0, [r7, #12]
 800d8ae:	f000 fcb1 	bl	800e214 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>
    }
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bdb0      	pop	{r4, r5, r7, pc}

0800d8bc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b082      	sub	sp, #8
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6839      	ldr	r1, [r7, #0]
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f000 fcb2 	bl	800e234 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}

0800d8da <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b082      	sub	sp, #8
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
 800d8e2:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	2100      	movs	r1, #0
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f000 fcb5 	bl	800e258 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 800d8ee:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d8f2:	eeb0 0a67 	vmov.f32	s0, s15
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d904:	2201      	movs	r2, #1
 800d906:	2102      	movs	r1, #2
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f7fc fb70 	bl	8009fee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f000 fcb5 	bl	800e27e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>
  }
 800d914:	bf00      	nop
 800d916:	3708      	adds	r7, #8
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	2301      	movs	r3, #1
 800d926:	4618      	mov	r0, r3
 800d928:	370c      	adds	r7, #12
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr

0800d932 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
 800d932:	b580      	push	{r7, lr}
 800d934:	b082      	sub	sp, #8
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f000 fcaf 	bl	800e29e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	4618      	mov	r0, r3
 800d944:	3708      	adds	r7, #8
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
	...

0800d94c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>:
      checkSanity<Derived>();
    }

    /** \internal Constructor for dynamically sized matrices */
    EIGEN_DEVICE_FUNC
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	607a      	str	r2, [r7, #4]
 800d958:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800d95a:	68f8      	ldr	r0, [r7, #12]
 800d95c:	f7ff ffe9 	bl	800d932 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	68ba      	ldr	r2, [r7, #8]
 800d964:	601a      	str	r2, [r3, #0]
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	3304      	adds	r3, #4
 800d96a:	6879      	ldr	r1, [r7, #4]
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7f8 ffb7 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	3305      	adds	r3, #5
 800d976:	6839      	ldr	r1, [r7, #0]
 800d978:	4618      	mov	r0, r3
 800d97a:	f7f8 ff97 	bl	80068ac <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
    {
      eigen_assert( (dataPtr == 0)
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d011      	beq.n	800d9a8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2b00      	cmp	r3, #0
 800d988:	db08      	blt.n	800d99c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d105      	bne.n	800d99c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	2b00      	cmp	r3, #0
 800d994:	db02      	blt.n	800d99c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	2b03      	cmp	r3, #3
 800d99a:	d005      	beq.n	800d9a8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800d99c:	4b07      	ldr	r3, [pc, #28]	; (800d9bc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x70>)
 800d99e:	4a08      	ldr	r2, [pc, #32]	; (800d9c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x74>)
 800d9a0:	21b0      	movs	r1, #176	; 0xb0
 800d9a2:	4808      	ldr	r0, [pc, #32]	; (800d9c4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x78>)
 800d9a4:	f010 f90e 	bl	801dbc4 <__assert_func>
              || (   rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
                  && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols)));
      checkSanity<Derived>();
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	68f8      	ldr	r0, [r7, #12]
 800d9ac:	f000 fc82 	bl	800e2b4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3710      	adds	r7, #16
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	08026150 	.word	0x08026150
 800d9c0:	080261fc 	.word	0x080261fc
 800d9c4:	08026300 	.word	0x08026300

0800d9c8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>:

template<typename T> class variable_if_dynamic<T, Dynamic>
{
    T m_value;
  public:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T value = 0) EIGEN_NO_THROW : m_value(value) {}
 800d9c8:	b480      	push	{r7}
 800d9ca:	b083      	sub	sp, #12
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	683a      	ldr	r2, [r7, #0]
 800d9d6:	601a      	str	r2, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	370c      	adds	r7, #12
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr

0800d9e6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>:
    }
    #endif

  protected:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void init()
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b082      	sub	sp, #8
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
    {
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
                    ? m_xpr.outerStride()
                    : m_xpr.innerStride();
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7ff ff92 	bl	800d91c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800d9f8:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	615a      	str	r2, [r3, #20]
    }
 800d9fe:	bf00      	nop
 800da00:	3708      	adds	r7, #8
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>:
 800da06:	b480      	push	{r7}
 800da08:	b083      	sub	sp, #12
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
 800da0e:	2301      	movs	r3, #1
 800da10:	4618      	mov	r0, r3
 800da12:	370c      	adds	r7, #12
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f000 fc50 	bl	800e2ca <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	4618      	mov	r0, r3
 800da2e:	3708      	adds	r7, #8
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	60b9      	str	r1, [r7, #8]
 800da3e:	607a      	str	r2, [r7, #4]
 800da40:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800da42:	68f8      	ldr	r0, [r7, #12]
 800da44:	f7ff ffea 	bl	800da1c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	68ba      	ldr	r2, [r7, #8]
 800da4c:	601a      	str	r2, [r3, #0]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	3304      	adds	r3, #4
 800da52:	6879      	ldr	r1, [r7, #4]
 800da54:	4618      	mov	r0, r3
 800da56:	f7f8 ff29 	bl	80068ac <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	3305      	adds	r3, #5
 800da5e:	6839      	ldr	r1, [r7, #0]
 800da60:	4618      	mov	r0, r3
 800da62:	f7f8 ff3d 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d011      	beq.n	800da90 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	db08      	blt.n	800da84 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2b03      	cmp	r3, #3
 800da76:	d105      	bne.n	800da84 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	db02      	blt.n	800da84 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	2b01      	cmp	r3, #1
 800da82:	d005      	beq.n	800da90 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800da84:	4b07      	ldr	r3, [pc, #28]	; (800daa4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800da86:	4a08      	ldr	r2, [pc, #32]	; (800daa8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800da88:	21b0      	movs	r1, #176	; 0xb0
 800da8a:	4808      	ldr	r0, [pc, #32]	; (800daac <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800da8c:	f010 f89a 	bl	801dbc4 <__assert_func>
      checkSanity<Derived>();
 800da90:	2100      	movs	r1, #0
 800da92:	68f8      	ldr	r0, [r7, #12]
 800da94:	f000 fc24 	bl	800e2e0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	4618      	mov	r0, r3
 800da9c:	3710      	adds	r7, #16
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	08026150 	.word	0x08026150
 800daa8:	08026354 	.word	0x08026354
 800daac:	08026300 	.word	0x08026300

0800dab0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d005      	beq.n	800dacc <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x1c>
 800dac0:	4b05      	ldr	r3, [pc, #20]	; (800dad8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x28>)
 800dac2:	4a06      	ldr	r2, [pc, #24]	; (800dadc <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x2c>)
 800dac4:	2185      	movs	r1, #133	; 0x85
 800dac6:	4806      	ldr	r0, [pc, #24]	; (800dae0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x30>)
 800dac8:	f010 f87c 	bl	801dbc4 <__assert_func>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	4618      	mov	r0, r3
 800dad0:	3708      	adds	r7, #8
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	08021f68 	.word	0x08021f68
 800dadc:	08026458 	.word	0x08026458
 800dae0:	08021fe0 	.word	0x08021fe0

0800dae4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b082      	sub	sp, #8
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	689b      	ldr	r3, [r3, #8]
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7f9 faf9 	bl	80070e8 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800daf6:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	615a      	str	r2, [r3, #20]
    }
 800dafc:	bf00      	nop
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 fbf1 	bl	800e2f6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6839      	ldr	r1, [r7, #0]
 800db18:	4618      	mov	r0, r3
 800db1a:	f000 fbf7 	bl	800e30c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4618      	mov	r0, r3
 800db22:	3708      	adds	r7, #8
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800db32:	2200      	movs	r2, #0
 800db34:	2100      	movs	r1, #0
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 fc10 	bl	800e35c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800db3c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800db40:	eeb0 0a67 	vmov.f32	s0, s15
 800db44:	3708      	adds	r7, #8
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}

0800db4a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b084      	sub	sp, #16
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
 800db52:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800db54:	6839      	ldr	r1, [r7, #0]
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 fc13 	bl	800e382 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 800db5c:	eef0 7a40 	vmov.f32	s15, s0
 800db60:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800db64:	6839      	ldr	r1, [r7, #0]
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 fc1c 	bl	800e3a4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 800db6c:	eef0 7a40 	vmov.f32	s15, s0
 800db70:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800db74:	f107 020c 	add.w	r2, r7, #12
 800db78:	f107 0308 	add.w	r3, r7, #8
 800db7c:	4619      	mov	r1, r3
 800db7e:	6838      	ldr	r0, [r7, #0]
 800db80:	f7fb fa99 	bl	80090b6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800db84:	eef0 7a40 	vmov.f32	s15, s0
  }
 800db88:	eeb0 0a67 	vmov.f32	s0, s15
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800db92:	b5b0      	push	{r4, r5, r7, lr}
 800db94:	b084      	sub	sp, #16
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
 800db9a:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7f7 fdcd 	bl	800573c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800dba2:	4604      	mov	r4, r0
 800dba4:	6838      	ldr	r0, [r7, #0]
 800dba6:	f7f7 fdfc 	bl	80057a2 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 800dbaa:	4605      	mov	r5, r0
 800dbac:	f107 030c 	add.w	r3, r7, #12
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7f9 f920 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800dbb6:	f107 030c 	add.w	r3, r7, #12
 800dbba:	461a      	mov	r2, r3
 800dbbc:	4629      	mov	r1, r5
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f000 fc01 	bl	800e3c6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f7f7 fdb9 	bl	800573c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800dbca:	4603      	mov	r3, r0
    }
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3710      	adds	r7, #16
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bdb0      	pop	{r4, r5, r7, pc}

0800dbd4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800dbd4:	b480      	push	{r7}
 800dbd6:	b083      	sub	sp, #12
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	370c      	adds	r7, #12
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	370c      	adds	r7, #12
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr

0800dc02 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 800dc02:	b590      	push	{r4, r7, lr}
 800dc04:	b085      	sub	sp, #20
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	60f8      	str	r0, [r7, #12]
 800dc0a:	60b9      	str	r1, [r7, #8]
 800dc0c:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row * m_d.outerStride() + col];
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681c      	ldr	r4, [r3, #0]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7fb fa08 	bl	800902a <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	fb03 f202 	mul.w	r2, r3, r2
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	4413      	add	r3, r2
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	4423      	add	r3, r4
  }
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3714      	adds	r7, #20
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd90      	pop	{r4, r7, pc}

0800dc32 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b0a4      	sub	sp, #144	; 0x90
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	60f8      	str	r0, [r7, #12]
 800dc3a:	60b9      	str	r1, [r7, #8]
 800dc3c:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800dc3e:	68f9      	ldr	r1, [r7, #12]
 800dc40:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dc44:	68ba      	ldr	r2, [r7, #8]
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7fd f844 	bl	800acd4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800dc4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dc50:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dc54:	4611      	mov	r1, r2
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fd f84f 	bl	800acfa <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800dc62:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f000 fbbd 	bl	800e3e8 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>
 800dc6e:	f107 0314 	add.w	r3, r7, #20
 800dc72:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800dc76:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f000 fbc7 	bl	800e40e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800dc80:	f107 0314 	add.w	r3, r7, #20
 800dc84:	4618      	mov	r0, r3
 800dc86:	f000 fbf0 	bl	800e46a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>
 800dc8a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dc8e:	eeb0 0a67 	vmov.f32	s0, s15
 800dc92:	3790      	adds	r7, #144	; 0x90
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800dca0:	2200      	movs	r2, #0
 800dca2:	2101      	movs	r1, #1
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f7fe fe58 	bl	800c95a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 fbf8 	bl	800e4a0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>
  }
 800dcb0:	bf00      	nop
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800dcb8:	b590      	push	{r4, r7, lr}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	60b9      	str	r1, [r7, #8]
 800dcc2:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800dcc4:	68b8      	ldr	r0, [r7, #8]
 800dcc6:	f7f7 fc70 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800dcca:	4604      	mov	r4, r0
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f7f7 fed1 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	4621      	mov	r1, r4
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	f000 fc15 	bl	800e508 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>
}
 800dcde:	68f8      	ldr	r0, [r7, #12]
 800dce0:	3714      	adds	r7, #20
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd90      	pop	{r4, r7, pc}

0800dce6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b086      	sub	sp, #24
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	60f8      	str	r0, [r7, #12]
 800dcee:	60b9      	str	r1, [r7, #8]
 800dcf0:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	68b9      	ldr	r1, [r7, #8]
 800dcfa:	6978      	ldr	r0, [r7, #20]
 800dcfc:	f000 fc32 	bl	800e564 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800dd00:	bf00      	nop
 800dd02:	3718      	adds	r7, #24
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}

0800dd08 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800dd08:	b480      	push	{r7}
 800dd0a:	b085      	sub	sp, #20
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	60b9      	str	r1, [r7, #8]
 800dd12:	607a      	str	r2, [r7, #4]
 800dd14:	603b      	str	r3, [r7, #0]
 800dd16:	bf00      	nop
 800dd18:	3714      	adds	r7, #20
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr

0800dd22 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b082      	sub	sp, #8
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800dd2c:	6839      	ldr	r1, [r7, #0]
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 fc2b 	bl	800e58a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800dd34:	bf00      	nop
 800dd36:	3708      	adds	r7, #8
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800dd3c:	b590      	push	{r4, r7, lr}
 800dd3e:	b085      	sub	sp, #20
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681c      	ldr	r4, [r3, #0]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7f9 f846 	bl	8006de0 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 800dd54:	4602      	mov	r2, r0
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	fb03 f202 	mul.w	r2, r3, r2
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	4413      	add	r3, r2
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	4423      	add	r3, r4
  }
 800dd64:	4618      	mov	r0, r3
 800dd66:	3714      	adds	r7, #20
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd90      	pop	{r4, r7, pc}

0800dd6c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 fc29 	bl	800e5cc <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
 800dd90:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800dd92:	68f8      	ldr	r0, [r7, #12]
 800dd94:	f7ff ffea 	bl	800dd6c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	601a      	str	r2, [r3, #0]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	3304      	adds	r3, #4
 800dda2:	6879      	ldr	r1, [r7, #4]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7f8 fd9b 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	3305      	adds	r3, #5
 800ddae:	6839      	ldr	r1, [r7, #0]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7f8 fd95 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d011      	beq.n	800dde0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	db08      	blt.n	800ddd4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d105      	bne.n	800ddd4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	db02      	blt.n	800ddd4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d005      	beq.n	800dde0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800ddd4:	4b07      	ldr	r3, [pc, #28]	; (800ddf4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800ddd6:	4a08      	ldr	r2, [pc, #32]	; (800ddf8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800ddd8:	21b0      	movs	r1, #176	; 0xb0
 800ddda:	4808      	ldr	r0, [pc, #32]	; (800ddfc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800dddc:	f00f fef2 	bl	801dbc4 <__assert_func>
      checkSanity<Derived>();
 800dde0:	2100      	movs	r1, #0
 800dde2:	68f8      	ldr	r0, [r7, #12]
 800dde4:	f000 fbfd 	bl	800e5e2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	4618      	mov	r0, r3
 800ddec:	3710      	adds	r7, #16
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	08026150 	.word	0x08026150
 800ddf8:	080264c0 	.word	0x080264c0
 800ddfc:	08026300 	.word	0x08026300

0800de00 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	689b      	ldr	r3, [r3, #8]
 800de0c:	4618      	mov	r0, r3
 800de0e:	f7f9 f96b 	bl	80070e8 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800de12:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	615a      	str	r2, [r3, #20]
    }
 800de18:	bf00      	nop
 800de1a:	3708      	adds	r7, #8
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>:
 800de20:	b480      	push	{r7}
 800de22:	b083      	sub	sp, #12
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	2301      	movs	r3, #1
 800de2a:	4618      	mov	r0, r3
 800de2c:	370c      	adds	r7, #12
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr

0800de36 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
 800de36:	b580      	push	{r7, lr}
 800de38:	b082      	sub	sp, #8
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 fbda 	bl	800e5f8 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	4618      	mov	r0, r3
 800de48:	3708      	adds	r7, #8
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
	...

0800de50 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	60f8      	str	r0, [r7, #12]
 800de58:	60b9      	str	r1, [r7, #8]
 800de5a:	607a      	str	r2, [r7, #4]
 800de5c:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800de5e:	68f8      	ldr	r0, [r7, #12]
 800de60:	f7ff ffe9 	bl	800de36 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	68ba      	ldr	r2, [r7, #8]
 800de68:	601a      	str	r2, [r3, #0]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	3304      	adds	r3, #4
 800de6e:	6879      	ldr	r1, [r7, #4]
 800de70:	4618      	mov	r0, r3
 800de72:	f7f8 fd35 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	3305      	adds	r3, #5
 800de7a:	6839      	ldr	r1, [r7, #0]
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7f8 fd2f 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d011      	beq.n	800deac <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	db08      	blt.n	800dea0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2b01      	cmp	r3, #1
 800de92:	d105      	bne.n	800dea0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	db02      	blt.n	800dea0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d005      	beq.n	800deac <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800dea0:	4b07      	ldr	r3, [pc, #28]	; (800dec0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800dea2:	4a08      	ldr	r2, [pc, #32]	; (800dec4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800dea4:	21b0      	movs	r1, #176	; 0xb0
 800dea6:	4808      	ldr	r0, [pc, #32]	; (800dec8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800dea8:	f00f fe8c 	bl	801dbc4 <__assert_func>
      checkSanity<Derived>();
 800deac:	2100      	movs	r1, #0
 800deae:	68f8      	ldr	r0, [r7, #12]
 800deb0:	f000 fbad 	bl	800e60e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	4618      	mov	r0, r3
 800deb8:	3710      	adds	r7, #16
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	08026150 	.word	0x08026150
 800dec4:	080265c4 	.word	0x080265c4
 800dec8:	08026300 	.word	0x08026300

0800decc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>:
    void init()
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	689b      	ldr	r3, [r3, #8]
 800ded8:	4618      	mov	r0, r3
 800deda:	f7fd fe3d 	bl	800bb58 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 800dede:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	611a      	str	r2, [r3, #16]
    }
 800dee4:	bf00      	nop
 800dee6:	3708      	adds	r7, #8
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f000 fb94 	bl	800e624 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6839      	ldr	r1, [r7, #0]
 800df00:	4618      	mov	r0, r3
 800df02:	f000 fb9a 	bl	800e63a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	4618      	mov	r0, r3
 800df0a:	3708      	adds	r7, #8
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	60f8      	str	r0, [r7, #12]
 800df18:	60b9      	str	r1, [r7, #8]
 800df1a:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	68b9      	ldr	r1, [r7, #8]
 800df22:	4618      	mov	r0, r3
 800df24:	f000 fbb1 	bl	800e68a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800df28:	eef0 7a40 	vmov.f32	s15, s0
 800df2c:	eeb0 0a67 	vmov.f32	s0, s15
 800df30:	3710      	adds	r7, #16
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}

0800df36 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800df36:	b590      	push	{r4, r7, lr}
 800df38:	b087      	sub	sp, #28
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	60f8      	str	r0, [r7, #12]
 800df3e:	60b9      	str	r1, [r7, #8]
 800df40:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800df42:	68b8      	ldr	r0, [r7, #8]
 800df44:	f000 fbd1 	bl	800e6ea <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>
 800df48:	4604      	mov	r4, r0
 800df4a:	f107 0310 	add.w	r3, r7, #16
 800df4e:	4618      	mov	r0, r3
 800df50:	f7f8 ff51 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800df54:	f107 0310 	add.w	r3, r7, #16
 800df58:	461a      	mov	r2, r3
 800df5a:	4621      	mov	r1, r4
 800df5c:	68f8      	ldr	r0, [r7, #12]
 800df5e:	f000 fbd0 	bl	800e702 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800df62:	68b8      	ldr	r0, [r7, #8]
 800df64:	f000 fbde 	bl	800e724 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>
 800df68:	4604      	mov	r4, r0
 800df6a:	f107 0314 	add.w	r3, r7, #20
 800df6e:	4618      	mov	r0, r3
 800df70:	f7ff fbb0 	bl	800d6d4 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800df74:	f107 0314 	add.w	r3, r7, #20
 800df78:	461a      	mov	r2, r3
 800df7a:	4621      	mov	r1, r4
 800df7c:	68f8      	ldr	r0, [r7, #12]
 800df7e:	f000 fbdd 	bl	800e73c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800df82:	bf00      	nop
 800df84:	371c      	adds	r7, #28
 800df86:	46bd      	mov	sp, r7
 800df88:	bd90      	pop	{r4, r7, pc}
	...

0800df8c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800df8c:	b590      	push	{r4, r7, lr}
 800df8e:	b085      	sub	sp, #20
 800df90:	af00      	add	r7, sp, #0
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7f6 fefb 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800dfa0:	4604      	mov	r4, r0
 800dfa2:	68b8      	ldr	r0, [r7, #8]
 800dfa4:	f7f8 fa95 	bl	80064d2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	429c      	cmp	r4, r3
 800dfac:	d10a      	bne.n	800dfc4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7f6 fee5 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	68b8      	ldr	r0, [r7, #8]
 800dfba:	f7f8 fa98 	bl	80064ee <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	429c      	cmp	r4, r3
 800dfc2:	d005      	beq.n	800dfd0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800dfc4:	4b0b      	ldr	r3, [pc, #44]	; (800dff4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800dfc6:	4a0c      	ldr	r2, [pc, #48]	; (800dff8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800dfc8:	21b0      	movs	r1, #176	; 0xb0
 800dfca:	480c      	ldr	r0, [pc, #48]	; (800dffc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800dfcc:	f00f fdfa 	bl	801dbc4 <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800dfd0:	68b8      	ldr	r0, [r7, #8]
 800dfd2:	f000 fbc4 	bl	800e75e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	68b8      	ldr	r0, [r7, #8]
 800dfda:	f000 fbcc 	bl	800e776 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	4621      	mov	r1, r4
 800dfe4:	68f8      	ldr	r0, [r7, #12]
 800dfe6:	f000 fbd2 	bl	800e78e <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>
  }
 800dfea:	bf00      	nop
 800dfec:	3714      	adds	r7, #20
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd90      	pop	{r4, r7, pc}
 800dff2:	bf00      	nop
 800dff4:	080227c0 	.word	0x080227c0
 800dff8:	080266c8 	.word	0x080266c8
 800dffc:	08022cb8 	.word	0x08022cb8

0800e000 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800e000:	b5b0      	push	{r4, r5, r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	60b9      	str	r1, [r7, #8]
 800e00a:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800e00c:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	4618      	mov	r0, r3
 800e012:	f7f9 fff9 	bl	8008008 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800e016:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800e018:	68b8      	ldr	r0, [r7, #8]
 800e01a:	f7fa fa2f 	bl	800847c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800e01e:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	fb02 f303 	mul.w	r3, r2, r3
 800e026:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800e028:	441d      	add	r5, r3
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7f6 feb2 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800e032:	4602      	mov	r2, r0
 800e034:	2301      	movs	r3, #1
 800e036:	4629      	mov	r1, r5
 800e038:	4620      	mov	r0, r4
 800e03a:	f000 fbd3 	bl	800e7e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	68ba      	ldr	r2, [r7, #8]
 800e042:	609a      	str	r2, [r3, #8]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	330c      	adds	r3, #12
 800e048:	2100      	movs	r1, #0
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7ff fcbc 	bl	800d9c8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	3310      	adds	r3, #16
 800e054:	6879      	ldr	r1, [r7, #4]
 800e056:	4618      	mov	r0, r3
 800e058:	f7ff fcb6 	bl	800d9c8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800e05c:	68f8      	ldr	r0, [r7, #12]
 800e05e:	f000 fbff 	bl	800e860 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	4618      	mov	r0, r3
 800e066:	3710      	adds	r7, #16
 800e068:	46bd      	mov	sp, r7
 800e06a:	bdb0      	pop	{r4, r5, r7, pc}

0800e06c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6839      	ldr	r1, [r7, #0]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f000 fc00 	bl	800e880 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	4618      	mov	r0, r3
 800e084:	3708      	adds	r7, #8
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}

0800e08a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800e08a:	b580      	push	{r7, lr}
 800e08c:	b084      	sub	sp, #16
 800e08e:	af00      	add	r7, sp, #0
 800e090:	6078      	str	r0, [r7, #4]
 800e092:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e094:	6839      	ldr	r1, [r7, #0]
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f000 fc04 	bl	800e8a4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>
 800e09c:	eef0 7a40 	vmov.f32	s15, s0
 800e0a0:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800e0a4:	6839      	ldr	r1, [r7, #0]
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f000 fc0d 	bl	800e8c6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>
 800e0ac:	eef0 7a40 	vmov.f32	s15, s0
 800e0b0:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e0b4:	f107 020c 	add.w	r2, r7, #12
 800e0b8:	f107 0308 	add.w	r3, r7, #8
 800e0bc:	4619      	mov	r1, r3
 800e0be:	6838      	ldr	r0, [r7, #0]
 800e0c0:	f7fa fff9 	bl	80090b6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800e0c4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e0c8:	eeb0 0a67 	vmov.f32	s0, s15
 800e0cc:	3710      	adds	r7, #16
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}

0800e0d2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b082      	sub	sp, #8
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e0da:	2201      	movs	r2, #1
 800e0dc:	2102      	movs	r1, #2
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f7fc fa4c 	bl	800a57c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f000 fc12 	bl	800e90e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800e0ea:	bf00      	nop
 800e0ec:	3708      	adds	r7, #8
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e0f2:	b480      	push	{r7}
 800e0f4:	b083      	sub	sp, #12
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
    }
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	370c      	adds	r7, #12
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr

0800e108 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f7f7 f9b5 	bl	8005480 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e116:	4603      	mov	r3, r0
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fc fd77 	bl	800ac0c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e11e:	4603      	mov	r3, r0
 800e120:	4618      	mov	r0, r3
 800e122:	f7f8 ff10 	bl	8006f46 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800e126:	4603      	mov	r3, r0
 800e128:	4618      	mov	r0, r3
 800e12a:	3708      	adds	r7, #8
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f7f7 f9a1 	bl	8005480 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e13e:	4603      	mov	r3, r0
 800e140:	4618      	mov	r0, r3
 800e142:	f7fc fd63 	bl	800ac0c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e146:	4603      	mov	r3, r0
 800e148:	4618      	mov	r0, r3
 800e14a:	f7ff fc5c 	bl	800da06 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800e14e:	4603      	mov	r3, r0
 800e150:	4618      	mov	r0, r3
 800e152:	3708      	adds	r7, #8
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 800e158:	b580      	push	{r7, lr}
 800e15a:	b082      	sub	sp, #8
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f7f7 f98d 	bl	8005480 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e166:	4603      	mov	r3, r0
 800e168:	4618      	mov	r0, r3
 800e16a:	f7fc fd4f 	bl	800ac0c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e16e:	4603      	mov	r3, r0
 800e170:	4618      	mov	r0, r3
 800e172:	f7f8 ffb9 	bl	80070e8 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800e176:	4603      	mov	r3, r0
 800e178:	4618      	mov	r0, r3
 800e17a:	3708      	adds	r7, #8
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
 800e180:	b580      	push	{r7, lr}
 800e182:	b082      	sub	sp, #8
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 fbd0 	bl	800e92e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	4618      	mov	r0, r3
 800e192:	3708      	adds	r7, #8
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	60f8      	str	r0, [r7, #12]
 800e1a0:	60b9      	str	r1, [r7, #8]
 800e1a2:	607a      	str	r2, [r7, #4]
 800e1a4:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e1a6:	68f8      	ldr	r0, [r7, #12]
 800e1a8:	f7ff ffea 	bl	800e180 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	68ba      	ldr	r2, [r7, #8]
 800e1b0:	601a      	str	r2, [r3, #0]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	3304      	adds	r3, #4
 800e1b6:	6879      	ldr	r1, [r7, #4]
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7f8 fb91 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	3305      	adds	r3, #5
 800e1c2:	6839      	ldr	r1, [r7, #0]
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7f8 fb8b 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d011      	beq.n	800e1f4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	db08      	blt.n	800e1e8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d105      	bne.n	800e1e8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	db02      	blt.n	800e1e8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d005      	beq.n	800e1f4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e1e8:	4b07      	ldr	r3, [pc, #28]	; (800e208 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800e1ea:	4a08      	ldr	r2, [pc, #32]	; (800e20c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800e1ec:	21b0      	movs	r1, #176	; 0xb0
 800e1ee:	4808      	ldr	r0, [pc, #32]	; (800e210 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800e1f0:	f00f fce8 	bl	801dbc4 <__assert_func>
      checkSanity<Derived>();
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	68f8      	ldr	r0, [r7, #12]
 800e1f8:	f000 fba4 	bl	800e944 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	4618      	mov	r0, r3
 800e200:	3710      	adds	r7, #16
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	08026150 	.word	0x08026150
 800e20c:	08026a44 	.word	0x08026a44
 800e210:	08026300 	.word	0x08026300

0800e214 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	3308      	adds	r3, #8
 800e220:	4618      	mov	r0, r3
 800e222:	f7ff ff99 	bl	800e158 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 800e226:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	615a      	str	r2, [r3, #20]
    }
 800e22c:	bf00      	nop
 800e22e:	3708      	adds	r7, #8
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	6039      	str	r1, [r7, #0]
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f000 fb8b 	bl	800e95a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6839      	ldr	r1, [r7, #0]
 800e248:	4618      	mov	r0, r3
 800e24a:	f000 fb91 	bl	800e970 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>
  }
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	4618      	mov	r0, r3
 800e252:	3708      	adds	r7, #8
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	687a      	ldr	r2, [r7, #4]
 800e268:	68b9      	ldr	r1, [r7, #8]
 800e26a:	4618      	mov	r0, r3
 800e26c:	f000 fba8 	bl	800e9c0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>
 800e270:	eef0 7a40 	vmov.f32	s15, s0
 800e274:	eeb0 0a67 	vmov.f32	s0, s15
 800e278:	3710      	adds	r7, #16
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}

0800e27e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e27e:	b580      	push	{r7, lr}
 800e280:	b082      	sub	sp, #8
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e286:	2202      	movs	r2, #2
 800e288:	2102      	movs	r1, #2
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f7fb feaf 	bl	8009fee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f000 fbc5 	bl	800ea20 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>
  }
 800e296:	bf00      	nop
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e29e:	b480      	push	{r7}
 800e2a0:	b083      	sub	sp, #12
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
    }
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	370c      	adds	r7, #12
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr

0800e2b4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
#endif
    }

    template<typename T>
    EIGEN_DEVICE_FUNC
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
    {}
 800e2be:	bf00      	nop
 800e2c0:	370c      	adds	r7, #12
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr

0800e2ca <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e2ca:	b480      	push	{r7}
 800e2cc:	b083      	sub	sp, #12
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
    }
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	370c      	adds	r7, #12
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e2e0:	b480      	push	{r7}
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
    {}
 800e2ea:	bf00      	nop
 800e2ec:	370c      	adds	r7, #12
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f4:	4770      	bx	lr

0800e2f6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e2f6:	b480      	push	{r7}
 800e2f8:	b083      	sub	sp, #12
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	4618      	mov	r0, r3
 800e302:	370c      	adds	r7, #12
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr

0800e30c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e30c:	b590      	push	{r4, r7, lr}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	6039      	str	r1, [r7, #0]
 800e316:	687c      	ldr	r4, [r7, #4]
 800e318:	6838      	ldr	r0, [r7, #0]
 800e31a:	f000 fb8b 	bl	800ea34 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>
 800e31e:	4603      	mov	r3, r0
 800e320:	4619      	mov	r1, r3
 800e322:	4620      	mov	r0, r4
 800e324:	f7f7 f862 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	1d1c      	adds	r4, r3, #4
 800e32c:	6838      	ldr	r0, [r7, #0]
 800e32e:	f000 fb8d 	bl	800ea4c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>
 800e332:	4603      	mov	r3, r0
 800e334:	4619      	mov	r1, r3
 800e336:	4620      	mov	r0, r4
 800e338:	f000 fb9f 	bl	800ea7a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f103 040c 	add.w	r4, r3, #12
 800e342:	6838      	ldr	r0, [r7, #0]
 800e344:	f000 fb8d 	bl	800ea62 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>
 800e348:	4603      	mov	r3, r0
 800e34a:	4619      	mov	r1, r3
 800e34c:	4620      	mov	r0, r4
 800e34e:	f000 fba3 	bl	800ea98 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4618      	mov	r0, r3
 800e356:	370c      	adds	r7, #12
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd90      	pop	{r4, r7, pc}

0800e35c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	6879      	ldr	r1, [r7, #4]
 800e36e:	4618      	mov	r0, r3
 800e370:	f000 fba1 	bl	800eab6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800e374:	eef0 7a40 	vmov.f32	s15, s0
 800e378:	eeb0 0a67 	vmov.f32	s0, s15
 800e37c:	3710      	adds	r7, #16
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e382:	b580      	push	{r7, lr}
 800e384:	b082      	sub	sp, #8
 800e386:	af00      	add	r7, sp, #0
 800e388:	6078      	str	r0, [r7, #4]
 800e38a:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e38c:	2201      	movs	r2, #1
 800e38e:	2100      	movs	r1, #0
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f7ff ffe3 	bl	800e35c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e396:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e39a:	eeb0 0a67 	vmov.f32	s0, s15
 800e39e:	3708      	adds	r7, #8
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e3ae:	2202      	movs	r2, #2
 800e3b0:	2100      	movs	r1, #0
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f7ff ffd2 	bl	800e35c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e3b8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e3bc:	eeb0 0a67 	vmov.f32	s0, s15
 800e3c0:	3708      	adds	r7, #8
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}

0800e3c6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e3c6:	b580      	push	{r7, lr}
 800e3c8:	b086      	sub	sp, #24
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	60f8      	str	r0, [r7, #12]
 800e3ce:	60b9      	str	r1, [r7, #8]
 800e3d0:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	68b9      	ldr	r1, [r7, #8]
 800e3da:	6978      	ldr	r0, [r7, #20]
 800e3dc:	f000 fb9b 	bl	800eb16 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800e3e0:	bf00      	nop
 800e3e2:	3718      	adds	r7, #24
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b084      	sub	sp, #16
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	60f8      	str	r0, [r7, #12]
 800e3f0:	60b9      	str	r1, [r7, #8]
 800e3f2:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800e3f4:	68b8      	ldr	r0, [r7, #8]
 800e3f6:	f7f7 f9df 	bl	80057b8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	4619      	mov	r1, r3
 800e400:	68f8      	ldr	r0, [r7, #12]
 800e402:	f000 fbc3 	bl	800eb8c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>
}
 800e406:	68f8      	ldr	r0, [r7, #12]
 800e408:	3710      	adds	r7, #16
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}

0800e40e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800e40e:	b5b0      	push	{r4, r5, r7, lr}
 800e410:	b086      	sub	sp, #24
 800e412:	af00      	add	r7, sp, #0
 800e414:	60f8      	str	r0, [r7, #12]
 800e416:	60b9      	str	r1, [r7, #8]
 800e418:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800e41a:	68b8      	ldr	r0, [r7, #8]
 800e41c:	f7fd f924 	bl	800b668 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800e420:	4604      	mov	r4, r0
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 fbda 	bl	800ebdc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>
 800e428:	4605      	mov	r5, r0
 800e42a:	f107 0314 	add.w	r3, r7, #20
 800e42e:	4618      	mov	r0, r3
 800e430:	f7f6 ff52 	bl	80052d8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800e434:	f107 0314 	add.w	r3, r7, #20
 800e438:	462a      	mov	r2, r5
 800e43a:	4621      	mov	r1, r4
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	f000 fc07 	bl	800ec50 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 800e442:	68f8      	ldr	r0, [r7, #12]
 800e444:	3718      	adds	r7, #24
 800e446:	46bd      	mov	sp, r7
 800e448:	bdb0      	pop	{r4, r5, r7, pc}

0800e44a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b082      	sub	sp, #8
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f000 fc5a 	bl	800ed0c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e458:	4603      	mov	r3, r0
 800e45a:	4618      	mov	r0, r3
 800e45c:	f000 fc61 	bl	800ed22 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>
 800e460:	4603      	mov	r3, r0
 800e462:	4618      	mov	r0, r3
 800e464:	3708      	adds	r7, #8
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}

0800e46a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800e46a:	b590      	push	{r4, r7, lr}
 800e46c:	b085      	sub	sp, #20
 800e46e:	af00      	add	r7, sp, #0
 800e470:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f000 fc4a 	bl	800ed0c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e478:	4604      	mov	r4, r0
 800e47a:	f107 030c 	add.w	r3, r7, #12
 800e47e:	4618      	mov	r0, r3
 800e480:	f7f7 fa21 	bl	80058c6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800e484:	f107 030c 	add.w	r3, r7, #12
 800e488:	4619      	mov	r1, r3
 800e48a:	4620      	mov	r0, r4
 800e48c:	f000 fcc6 	bl	800ee1c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800e490:	eef0 7a40 	vmov.f32	s15, s0
 800e494:	bf00      	nop
}
 800e496:	eeb0 0a67 	vmov.f32	s0, s15
 800e49a:	3714      	adds	r7, #20
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd90      	pop	{r4, r7, pc}

0800e4a0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	2101      	movs	r1, #1
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f7fe fa54 	bl	800c95a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 fcf8 	bl	800eea8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>
  }
 800e4b8:	bf00      	nop
 800e4ba:	3708      	adds	r7, #8
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 fcfd 	bl	800eec8 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3708      	adds	r7, #8
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>:
class dense_product_base
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f7ff ffed 	bl	800e4c0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3708      	adds	r7, #8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f7ff ffed 	bl	800e4d8 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	4618      	mov	r0, r3
 800e502:	3708      	adds	r7, #8
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800e508:	b590      	push	{r4, r7, lr}
 800e50a:	b085      	sub	sp, #20
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	607a      	str	r2, [r7, #4]
 800e514:	68f8      	ldr	r0, [r7, #12]
 800e516:	f7ff ffeb 	bl	800e4f0 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	68ba      	ldr	r2, [r7, #8]
 800e51e:	601a      	str	r2, [r3, #0]
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	3304      	adds	r3, #4
 800e524:	687a      	ldr	r2, [r7, #4]
 800e526:	6812      	ldr	r2, [r2, #0]
 800e528:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7f6 fc27 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e532:	4604      	mov	r4, r0
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f7f7 facc 	bl	8005ad2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800e53a:	4603      	mov	r3, r0
 800e53c:	429c      	cmp	r4, r3
 800e53e:	d005      	beq.n	800e54c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x44>
 800e540:	4b05      	ldr	r3, [pc, #20]	; (800e558 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x50>)
 800e542:	4a06      	ldr	r2, [pc, #24]	; (800e55c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x54>)
 800e544:	2160      	movs	r1, #96	; 0x60
 800e546:	4806      	ldr	r0, [pc, #24]	; (800e560 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x58>)
 800e548:	f00f fb3c 	bl	801dbc4 <__assert_func>
 800e54c:	bf00      	nop
    }
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	4618      	mov	r0, r3
 800e552:	3714      	adds	r7, #20
 800e554:	46bd      	mov	sp, r7
 800e556:	bd90      	pop	{r4, r7, pc}
 800e558:	0801fcec 	.word	0x0801fcec
 800e55c:	08026b5c 	.word	0x08026b5c
 800e560:	0802003c 	.word	0x0802003c

0800e564 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800e564:	b580      	push	{r7, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	60b9      	str	r1, [r7, #8]
 800e56e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800e570:	68b9      	ldr	r1, [r7, #8]
 800e572:	68f8      	ldr	r0, [r7, #12]
 800e574:	f000 fcb3 	bl	800eede <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800e578:	687a      	ldr	r2, [r7, #4]
 800e57a:	68b9      	ldr	r1, [r7, #8]
 800e57c:	68f8      	ldr	r0, [r7, #12]
 800e57e:	f000 fd12 	bl	800efa6 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e582:	bf00      	nop
 800e584:	3710      	adds	r7, #16
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}

0800e58a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800e58a:	b5b0      	push	{r4, r5, r7, lr}
 800e58c:	b084      	sub	sp, #16
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
 800e592:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f7fd fab8 	bl	800bb0a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800e59a:	4604      	mov	r4, r0
 800e59c:	6838      	ldr	r0, [r7, #0]
 800e59e:	f7f7 fc41 	bl	8005e24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 800e5a2:	4605      	mov	r5, r0
 800e5a4:	f107 030c 	add.w	r3, r7, #12
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7f8 fc24 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800e5ae:	f107 030c 	add.w	r3, r7, #12
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	4629      	mov	r1, r5
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	f000 fd2d 	bl	800f016 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f7fd faa4 	bl	800bb0a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800e5c2:	4603      	mov	r3, r0
    }
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3710      	adds	r7, #16
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bdb0      	pop	{r4, r5, r7, pc}

0800e5cc <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e5cc:	b480      	push	{r7}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
    }
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	370c      	adds	r7, #12
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e0:	4770      	bx	lr

0800e5e2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e5e2:	b480      	push	{r7}
 800e5e4:	b083      	sub	sp, #12
 800e5e6:	af00      	add	r7, sp, #0
 800e5e8:	6078      	str	r0, [r7, #4]
 800e5ea:	6039      	str	r1, [r7, #0]
    {}
 800e5ec:	bf00      	nop
 800e5ee:	370c      	adds	r7, #12
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr

0800e5f8 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e5f8:	b480      	push	{r7}
 800e5fa:	b083      	sub	sp, #12
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
    }
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	4618      	mov	r0, r3
 800e604:	370c      	adds	r7, #12
 800e606:	46bd      	mov	sp, r7
 800e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60c:	4770      	bx	lr

0800e60e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e60e:	b480      	push	{r7}
 800e610:	b083      	sub	sp, #12
 800e612:	af00      	add	r7, sp, #0
 800e614:	6078      	str	r0, [r7, #4]
 800e616:	6039      	str	r1, [r7, #0]
    {}
 800e618:	bf00      	nop
 800e61a:	370c      	adds	r7, #12
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr

0800e624 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e624:	b480      	push	{r7}
 800e626:	b083      	sub	sp, #12
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	4618      	mov	r0, r3
 800e630:	370c      	adds	r7, #12
 800e632:	46bd      	mov	sp, r7
 800e634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e638:	4770      	bx	lr

0800e63a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e63a:	b590      	push	{r4, r7, lr}
 800e63c:	b083      	sub	sp, #12
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
 800e642:	6039      	str	r1, [r7, #0]
 800e644:	687c      	ldr	r4, [r7, #4]
 800e646:	6838      	ldr	r0, [r7, #0]
 800e648:	f000 fcf6 	bl	800f038 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>
 800e64c:	4603      	mov	r3, r0
 800e64e:	4619      	mov	r1, r3
 800e650:	4620      	mov	r0, r4
 800e652:	f7f6 fecb 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	1d1c      	adds	r4, r3, #4
 800e65a:	6838      	ldr	r0, [r7, #0]
 800e65c:	f000 fcf8 	bl	800f050 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>
 800e660:	4603      	mov	r3, r0
 800e662:	4619      	mov	r1, r3
 800e664:	4620      	mov	r0, r4
 800e666:	f000 fd0a 	bl	800f07e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f103 040c 	add.w	r4, r3, #12
 800e670:	6838      	ldr	r0, [r7, #0]
 800e672:	f000 fcf8 	bl	800f066 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>
 800e676:	4603      	mov	r3, r0
 800e678:	4619      	mov	r1, r3
 800e67a:	4620      	mov	r0, r4
 800e67c:	f000 fd0e 	bl	800f09c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	4618      	mov	r0, r3
 800e684:	370c      	adds	r7, #12
 800e686:	46bd      	mov	sp, r7
 800e688:	bd90      	pop	{r4, r7, pc}

0800e68a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e68a:	b590      	push	{r4, r7, lr}
 800e68c:	b087      	sub	sp, #28
 800e68e:	af00      	add	r7, sp, #0
 800e690:	60f8      	str	r0, [r7, #12]
 800e692:	60b9      	str	r1, [r7, #8]
 800e694:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	4618      	mov	r0, r3
 800e69a:	f000 fd0e 	bl	800f0ba <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800e69e:	4604      	mov	r4, r0
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	3304      	adds	r3, #4
 800e6a4:	687a      	ldr	r2, [r7, #4]
 800e6a6:	68b9      	ldr	r1, [r7, #8]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f000 fd11 	bl	800f0d0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800e6ae:	eef0 7a40 	vmov.f32	s15, s0
 800e6b2:	edc7 7a04 	vstr	s15, [r7, #16]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	330c      	adds	r3, #12
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	68b9      	ldr	r1, [r7, #8]
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f000 fd19 	bl	800f0f6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>
 800e6c4:	eef0 7a40 	vmov.f32	s15, s0
 800e6c8:	edc7 7a05 	vstr	s15, [r7, #20]
 800e6cc:	f107 0214 	add.w	r2, r7, #20
 800e6d0:	f107 0310 	add.w	r3, r7, #16
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	f000 fd2e 	bl	800f138 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800e6dc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e6e0:	eeb0 0a67 	vmov.f32	s0, s15
 800e6e4:	371c      	adds	r7, #28
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd90      	pop	{r4, r7, pc}

0800e6ea <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800e6ea:	b480      	push	{r7}
 800e6ec:	b083      	sub	sp, #12
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	370c      	adds	r7, #12
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr

0800e702 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e702:	b580      	push	{r7, lr}
 800e704:	b086      	sub	sp, #24
 800e706:	af00      	add	r7, sp, #0
 800e708:	60f8      	str	r0, [r7, #12]
 800e70a:	60b9      	str	r1, [r7, #8]
 800e70c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e712:	687a      	ldr	r2, [r7, #4]
 800e714:	68b9      	ldr	r1, [r7, #8]
 800e716:	6978      	ldr	r0, [r7, #20]
 800e718:	f000 fd23 	bl	800f162 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 800e71c:	bf00      	nop
 800e71e:	3718      	adds	r7, #24
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	3304      	adds	r3, #4
 800e730:	4618      	mov	r0, r3
 800e732:	370c      	adds	r7, #12
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr

0800e73c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b086      	sub	sp, #24
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	68b9      	ldr	r1, [r7, #8]
 800e750:	6978      	ldr	r0, [r7, #20]
 800e752:	f000 fd19 	bl	800f188 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800e756:	bf00      	nop
 800e758:	3718      	adds	r7, #24
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}

0800e75e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800e75e:	b480      	push	{r7}
 800e760:	b083      	sub	sp, #12
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4618      	mov	r0, r3
 800e76c:	370c      	adds	r7, #12
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr

0800e776 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800e776:	b480      	push	{r7}
 800e778:	b083      	sub	sp, #12
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	4618      	mov	r0, r3
 800e784:	370c      	adds	r7, #12
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr

0800e78e <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800e78e:	b580      	push	{r7, lr}
 800e790:	b088      	sub	sp, #32
 800e792:	af00      	add	r7, sp, #0
 800e794:	60f8      	str	r0, [r7, #12]
 800e796:	60b9      	str	r1, [r7, #8]
 800e798:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::sub_assign_op<typename Dst::Scalar,Scalar>());
 800e79a:	f107 0314 	add.w	r3, r7, #20
 800e79e:	687a      	ldr	r2, [r7, #4]
 800e7a0:	68b9      	ldr	r1, [r7, #8]
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f000 fd2a 	bl	800f1fc <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 800e7a8:	f107 031c 	add.w	r3, r7, #28
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7fe ff91 	bl	800d6d4 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800e7b2:	f107 021c 	add.w	r2, r7, #28
 800e7b6:	f107 0314 	add.w	r3, r7, #20
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	f000 fd34 	bl	800f22a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e7c2:	bf00      	nop
 800e7c4:	3720      	adds	r7, #32
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b082      	sub	sp, #8
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 fd3a 	bl	800f24c <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3708      	adds	r7, #8
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
	...

0800e7e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	607a      	str	r2, [r7, #4]
 800e7f0:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e7f2:	68f8      	ldr	r0, [r7, #12]
 800e7f4:	f7ff ffe9 	bl	800e7ca <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	68ba      	ldr	r2, [r7, #8]
 800e7fc:	601a      	str	r2, [r3, #0]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	3304      	adds	r3, #4
 800e802:	6879      	ldr	r1, [r7, #4]
 800e804:	4618      	mov	r0, r3
 800e806:	f7f8 f851 	bl	80068ac <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	3305      	adds	r3, #5
 800e80e:	6839      	ldr	r1, [r7, #0]
 800e810:	4618      	mov	r0, r3
 800e812:	f7f8 f865 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d011      	beq.n	800e840 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	db08      	blt.n	800e834 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2b03      	cmp	r3, #3
 800e826:	d105      	bne.n	800e834 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	db02      	blt.n	800e834 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	2b01      	cmp	r3, #1
 800e832:	d005      	beq.n	800e840 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e834:	4b07      	ldr	r3, [pc, #28]	; (800e854 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800e836:	4a08      	ldr	r2, [pc, #32]	; (800e858 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800e838:	21b0      	movs	r1, #176	; 0xb0
 800e83a:	4808      	ldr	r0, [pc, #32]	; (800e85c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800e83c:	f00f f9c2 	bl	801dbc4 <__assert_func>
      checkSanity<Derived>();
 800e840:	2100      	movs	r1, #0
 800e842:	68f8      	ldr	r0, [r7, #12]
 800e844:	f000 fd0d 	bl	800f262 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	4618      	mov	r0, r3
 800e84c:	3710      	adds	r7, #16
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
 800e852:	bf00      	nop
 800e854:	08026150 	.word	0x08026150
 800e858:	08026ca8 	.word	0x08026ca8
 800e85c:	08026300 	.word	0x08026300

0800e860 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	689b      	ldr	r3, [r3, #8]
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7f9 fe05 	bl	800847c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800e872:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	615a      	str	r2, [r3, #20]
    }
 800e878:	bf00      	nop
 800e87a:	3708      	adds	r7, #8
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	6039      	str	r1, [r7, #0]
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f000 fcf4 	bl	800f278 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6839      	ldr	r1, [r7, #0]
 800e894:	4618      	mov	r0, r3
 800e896:	f000 fcfa 	bl	800f28e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	4618      	mov	r0, r3
 800e89e:	3708      	adds	r7, #8
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	2100      	movs	r1, #0
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f000 fd13 	bl	800f2de <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e8b8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e8bc:	eeb0 0a67 	vmov.f32	s0, s15
 800e8c0:	3708      	adds	r7, #8
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}

0800e8c6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800e8c6:	b580      	push	{r7, lr}
 800e8c8:	b084      	sub	sp, #16
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	6078      	str	r0, [r7, #4]
 800e8ce:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e8d0:	6839      	ldr	r1, [r7, #0]
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f000 fd16 	bl	800f304 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>
 800e8d8:	eef0 7a40 	vmov.f32	s15, s0
 800e8dc:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800e8e0:	6839      	ldr	r1, [r7, #0]
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f000 fd1f 	bl	800f326 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>
 800e8e8:	eef0 7a40 	vmov.f32	s15, s0
 800e8ec:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e8f0:	f107 020c 	add.w	r2, r7, #12
 800e8f4:	f107 0308 	add.w	r3, r7, #8
 800e8f8:	4619      	mov	r1, r3
 800e8fa:	6838      	ldr	r0, [r7, #0]
 800e8fc:	f7fa fbdb 	bl	80090b6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800e900:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e904:	eeb0 0a67 	vmov.f32	s0, s15
 800e908:	3710      	adds	r7, #16
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}

0800e90e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e90e:	b580      	push	{r7, lr}
 800e910:	b082      	sub	sp, #8
 800e912:	af00      	add	r7, sp, #0
 800e914:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e916:	2202      	movs	r2, #2
 800e918:	2102      	movs	r1, #2
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f7fb fe2e 	bl	800a57c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 fd11 	bl	800f348 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800e926:	bf00      	nop
 800e928:	3708      	adds	r7, #8
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}

0800e92e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e92e:	b480      	push	{r7}
 800e930:	b083      	sub	sp, #12
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
    }
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	4618      	mov	r0, r3
 800e93a:	370c      	adds	r7, #12
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr

0800e944 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	6039      	str	r1, [r7, #0]
    {}
 800e94e:	bf00      	nop
 800e950:	370c      	adds	r7, #12
 800e952:	46bd      	mov	sp, r7
 800e954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e958:	4770      	bx	lr

0800e95a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e95a:	b480      	push	{r7}
 800e95c:	b083      	sub	sp, #12
 800e95e:	af00      	add	r7, sp, #0
 800e960:	6078      	str	r0, [r7, #4]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4618      	mov	r0, r3
 800e966:	370c      	adds	r7, #12
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr

0800e970 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e970:	b590      	push	{r4, r7, lr}
 800e972:	b083      	sub	sp, #12
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
 800e97a:	687c      	ldr	r4, [r7, #4]
 800e97c:	6838      	ldr	r0, [r7, #0]
 800e97e:	f000 fced 	bl	800f35c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>
 800e982:	4603      	mov	r3, r0
 800e984:	4619      	mov	r1, r3
 800e986:	4620      	mov	r0, r4
 800e988:	f7f6 fd30 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	1d1c      	adds	r4, r3, #4
 800e990:	6838      	ldr	r0, [r7, #0]
 800e992:	f000 fcef 	bl	800f374 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>
 800e996:	4603      	mov	r3, r0
 800e998:	4619      	mov	r1, r3
 800e99a:	4620      	mov	r0, r4
 800e99c:	f000 fd02 	bl	800f3a4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f103 0420 	add.w	r4, r3, #32
 800e9a6:	6838      	ldr	r0, [r7, #0]
 800e9a8:	f000 fcf0 	bl	800f38c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	f000 fd06 	bl	800f3c2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	370c      	adds	r7, #12
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd90      	pop	{r4, r7, pc}

0800e9c0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e9c0:	b590      	push	{r4, r7, lr}
 800e9c2:	b087      	sub	sp, #28
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	60b9      	str	r1, [r7, #8]
 800e9ca:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f000 fd06 	bl	800f3e0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	3304      	adds	r3, #4
 800e9da:	687a      	ldr	r2, [r7, #4]
 800e9dc:	68b9      	ldr	r1, [r7, #8]
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f000 fd09 	bl	800f3f6 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800e9e4:	eef0 7a40 	vmov.f32	s15, s0
 800e9e8:	edc7 7a04 	vstr	s15, [r7, #16]
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	3320      	adds	r3, #32
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	68b9      	ldr	r1, [r7, #8]
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f000 fd11 	bl	800f41c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 800e9fa:	eef0 7a40 	vmov.f32	s15, s0
 800e9fe:	edc7 7a05 	vstr	s15, [r7, #20]
 800ea02:	f107 0214 	add.w	r2, r7, #20
 800ea06:	f107 0310 	add.w	r3, r7, #16
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	f000 fb93 	bl	800f138 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800ea12:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ea16:	eeb0 0a67 	vmov.f32	s0, s15
 800ea1a:	371c      	adds	r7, #28
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd90      	pop	{r4, r7, pc}

0800ea20 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	bf00      	nop
 800ea2a:	370c      	adds	r7, #12
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr

0800ea34 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	3330      	adds	r3, #48	; 0x30
 800ea40:	4618      	mov	r0, r3
 800ea42:	370c      	adds	r7, #12
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr

0800ea4c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800ea4c:	b480      	push	{r7}
 800ea4e:	b083      	sub	sp, #12
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	4618      	mov	r0, r3
 800ea58:	370c      	adds	r7, #12
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr

0800ea62 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800ea62:	b480      	push	{r7}
 800ea64:	b083      	sub	sp, #12
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	3318      	adds	r3, #24
 800ea6e:	4618      	mov	r0, r3
 800ea70:	370c      	adds	r7, #12
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr

0800ea7a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800ea7a:	b580      	push	{r7, lr}
 800ea7c:	b082      	sub	sp, #8
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	6078      	str	r0, [r7, #4]
 800ea82:	6039      	str	r1, [r7, #0]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6839      	ldr	r1, [r7, #0]
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f000 fce8 	bl	800f45e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	4618      	mov	r0, r3
 800ea92:	3708      	adds	r7, #8
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>:
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6839      	ldr	r1, [r7, #0]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f000 fce8 	bl	800f47c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	4618      	mov	r0, r3
 800eab0:	3708      	adds	r7, #8
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}

0800eab6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800eab6:	b590      	push	{r4, r7, lr}
 800eab8:	b087      	sub	sp, #28
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	60f8      	str	r0, [r7, #12]
 800eabe:	60b9      	str	r1, [r7, #8]
 800eac0:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	4618      	mov	r0, r3
 800eac6:	f000 fce8 	bl	800f49a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800eaca:	4604      	mov	r4, r0
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	3304      	adds	r3, #4
 800ead0:	687a      	ldr	r2, [r7, #4]
 800ead2:	68b9      	ldr	r1, [r7, #8]
 800ead4:	4618      	mov	r0, r3
 800ead6:	f000 fceb 	bl	800f4b0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800eada:	eef0 7a40 	vmov.f32	s15, s0
 800eade:	edc7 7a04 	vstr	s15, [r7, #16]
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	330c      	adds	r3, #12
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	68b9      	ldr	r1, [r7, #8]
 800eaea:	4618      	mov	r0, r3
 800eaec:	f000 fcf3 	bl	800f4d6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>
 800eaf0:	eef0 7a40 	vmov.f32	s15, s0
 800eaf4:	edc7 7a05 	vstr	s15, [r7, #20]
 800eaf8:	f107 0214 	add.w	r2, r7, #20
 800eafc:	f107 0310 	add.w	r3, r7, #16
 800eb00:	4619      	mov	r1, r3
 800eb02:	4620      	mov	r0, r4
 800eb04:	f000 fb18 	bl	800f138 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800eb08:	eef0 7a40 	vmov.f32	s15, s0
  }
 800eb0c:	eeb0 0a67 	vmov.f32	s0, s15
 800eb10:	371c      	adds	r7, #28
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd90      	pop	{r4, r7, pc}

0800eb16 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800eb16:	b590      	push	{r4, r7, lr}
 800eb18:	b087      	sub	sp, #28
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	60f8      	str	r0, [r7, #12]
 800eb1e:	60b9      	str	r1, [r7, #8]
 800eb20:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800eb22:	68b8      	ldr	r0, [r7, #8]
 800eb24:	f7f7 ff9e 	bl	8006a64 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800eb28:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800eb2a:	68b8      	ldr	r0, [r7, #8]
 800eb2c:	f7f6 fe73 	bl	8005816 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800eb30:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7f6 f92e 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	4293      	cmp	r3, r2
 800eb40:	d107      	bne.n	800eb52 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x3c>
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7f6 f91b 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d001      	beq.n	800eb56 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x40>
 800eb52:	2301      	movs	r3, #1
 800eb54:	e000      	b.n	800eb58 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x42>
 800eb56:	2300      	movs	r3, #0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d005      	beq.n	800eb68 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x52>
      dst.resize(dstRows, dstCols);
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	693a      	ldr	r2, [r7, #16]
 800eb60:	6979      	ldr	r1, [r7, #20]
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7f9 f830 	bl	8007bc8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800eb68:	68b8      	ldr	r0, [r7, #8]
 800eb6a:	f000 fcd5 	bl	800f518 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>
 800eb6e:	4604      	mov	r4, r0
 800eb70:	68b8      	ldr	r0, [r7, #8]
 800eb72:	f000 fcdd 	bl	800f530 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>
 800eb76:	4603      	mov	r3, r0
 800eb78:	461a      	mov	r2, r3
 800eb7a:	4621      	mov	r1, r4
 800eb7c:	68f8      	ldr	r0, [r7, #12]
 800eb7e:	f000 fce3 	bl	800f548 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>
  }
 800eb82:	bf00      	nop
 800eb84:	371c      	adds	r7, #28
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd90      	pop	{r4, r7, pc}
	...

0800eb8c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	687a      	ldr	r2, [r7, #4]
 800eb9c:	68b9      	ldr	r1, [r7, #8]
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f000 fcf0 	bl	800f584 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	db06      	blt.n	800ebb8 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x2c>
 800ebaa:	68b8      	ldr	r0, [r7, #8]
 800ebac:	f7f7 ff68 	bl	8006a80 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800ebb0:	4602      	mov	r2, r0
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	db05      	blt.n	800ebc4 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x38>
 800ebb8:	4b05      	ldr	r3, [pc, #20]	; (800ebd0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x44>)
 800ebba:	4a06      	ldr	r2, [pc, #24]	; (800ebd4 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x48>)
 800ebbc:	2178      	movs	r1, #120	; 0x78
 800ebbe:	4806      	ldr	r0, [pc, #24]	; (800ebd8 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x4c>)
 800ebc0:	f00f f800 	bl	801dbc4 <__assert_func>
    }
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3710      	adds	r7, #16
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	080245b0 	.word	0x080245b0
 800ebd4:	08026dac 	.word	0x08026dac
 800ebd8:	08024734 	.word	0x08024734

0800ebdc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	370c      	adds	r7, #12
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr

0800ebf2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 800ebf2:	b580      	push	{r7, lr}
 800ebf4:	b082      	sub	sp, #8
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	6078      	str	r0, [r7, #4]
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f000 fcd3 	bl	800f5a6 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	4618      	mov	r0, r3
 800ec04:	3708      	adds	r7, #8
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}

0800ec0a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800ec0a:	b580      	push	{r7, lr}
 800ec0c:	b082      	sub	sp, #8
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f7ff ffed 	bl	800ebf2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3708      	adds	r7, #8
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}

0800ec22 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800ec22:	b580      	push	{r7, lr}
 800ec24:	b082      	sub	sp, #8
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
 800ec2a:	f7f7 fe7e 	bl	800692a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	4618      	mov	r0, r3
 800ec32:	3708      	adds	r7, #8
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b082      	sub	sp, #8
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	f7f7 fe7b 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ec44:	4603      	mov	r3, r0
 800ec46:	4618      	mov	r0, r3
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
	...

0800ec50 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800ec50:	b5b0      	push	{r4, r5, r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	607a      	str	r2, [r7, #4]
 800ec5c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800ec5e:	68f8      	ldr	r0, [r7, #12]
 800ec60:	f7ff ffd3 	bl	800ec0a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	4614      	mov	r4, r2
 800ec6a:	461d      	mov	r5, r3
 800ec6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec70:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ec74:	e884 0003 	stmia.w	r4, {r0, r1}
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f103 0218 	add.w	r2, r3, #24
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	4614      	mov	r4, r2
 800ec82:	461d      	mov	r5, r3
 800ec84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec88:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ec8c:	e884 0003 	stmia.w	r4, {r0, r1}
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	3330      	adds	r3, #48	; 0x30
 800ec94:	6839      	ldr	r1, [r7, #0]
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7f6 fba8 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800ec9c:	68b8      	ldr	r0, [r7, #8]
 800ec9e:	f7fc fd11 	bl	800b6c4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800eca2:	4604      	mov	r4, r0
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7ff ffbb 	bl	800ec22 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>
 800ecac:	4603      	mov	r3, r0
 800ecae:	429c      	cmp	r4, r3
 800ecb0:	d10a      	bne.n	800ecc8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 800ecb2:	68b8      	ldr	r0, [r7, #8]
 800ecb4:	f7fc fd13 	bl	800b6de <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800ecb8:	4604      	mov	r4, r0
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7ff ffbb 	bl	800ec38 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	429c      	cmp	r4, r3
 800ecc6:	d005      	beq.n	800ecd4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 800ecc8:	4b05      	ldr	r3, [pc, #20]	; (800ece0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 800ecca:	4a06      	ldr	r2, [pc, #24]	; (800ece4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 800eccc:	2174      	movs	r1, #116	; 0x74
 800ecce:	4806      	ldr	r0, [pc, #24]	; (800ece8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 800ecd0:	f00e ff78 	bl	801dbc4 <__assert_func>
    }
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3710      	adds	r7, #16
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bdb0      	pop	{r4, r5, r7, pc}
 800ecde:	bf00      	nop
 800ece0:	0801fa2c 	.word	0x0801fa2c
 800ece4:	08026e9c 	.word	0x08026e9c
 800ece8:	0801fc90 	.word	0x0801fc90

0800ecec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 f809 	bl	800ed0c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f000 fc5d 	bl	800f5bc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>
 800ed02:	4603      	mov	r3, r0
 800ed04:	4618      	mov	r0, r3
 800ed06:	3708      	adds	r7, #8
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	4618      	mov	r0, r3
 800ed18:	370c      	adds	r7, #12
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr

0800ed22 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800ed22:	b580      	push	{r7, lr}
 800ed24:	b082      	sub	sp, #8
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7fc fcc9 	bl	800b6c4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800ed32:	4603      	mov	r3, r0
    }
 800ed34:	4618      	mov	r0, r3
 800ed36:	3708      	adds	r7, #8
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}

0800ed3c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b082      	sub	sp, #8
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f000 fc60 	bl	800f60a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3708      	adds	r7, #8
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b082      	sub	sp, #8
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7ff ffec 	bl	800ed3c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	4618      	mov	r0, r3
 800ed68:	3708      	adds	r7, #8
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}

0800ed6e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800ed6e:	b580      	push	{r7, lr}
 800ed70:	b082      	sub	sp, #8
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	6078      	str	r0, [r7, #4]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f7ff ffeb 	bl	800ed54 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	4618      	mov	r0, r3
 800ed82:	3708      	adds	r7, #8
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7ff ffeb 	bl	800ed6e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3708      	adds	r7, #8
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}

0800eda2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800eda2:	b580      	push	{r7, lr}
 800eda4:	b082      	sub	sp, #8
 800eda6:	af00      	add	r7, sp, #0
 800eda8:	6078      	str	r0, [r7, #4]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	330c      	adds	r3, #12
 800edae:	4618      	mov	r0, r3
 800edb0:	f7ff ffea 	bl	800ed88 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	3304      	adds	r3, #4
 800edb8:	4618      	mov	r0, r3
 800edba:	f7fc fd79 	bl	800b8b0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	4618      	mov	r0, r3
 800edc2:	3708      	adds	r7, #8
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}

0800edc8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800edc8:	b580      	push	{r7, lr}
 800edca:	b082      	sub	sp, #8
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7ff ffe5 	bl	800eda2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f000 fc0b 	bl	800f5f4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	4618      	mov	r0, r3
 800ede2:	3708      	adds	r7, #8
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800ede8:	b580      	push	{r7, lr}
 800edea:	b082      	sub	sp, #8
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	4618      	mov	r0, r3
 800edf4:	f7ff ffe8 	bl	800edc8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	4618      	mov	r0, r3
 800edfc:	3708      	adds	r7, #8
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}

0800ee02 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800ee02:	b580      	push	{r7, lr}
 800ee04:	b082      	sub	sp, #8
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7ff ffeb 	bl	800ede8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	4618      	mov	r0, r3
 800ee16:	3708      	adds	r7, #8
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	ed2d 8b02 	vpush	{d8}
 800ee22:	b088      	sub	sp, #32
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f7ff fb0d 	bl	800e44a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>
 800ee30:	4603      	mov	r3, r0
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	dd05      	ble.n	800ee42 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f7ff ff58 	bl	800ecec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	dc06      	bgt.n	800ee50 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800ee42:	4b16      	ldr	r3, [pc, #88]	; (800ee9c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800ee44:	4a16      	ldr	r2, [pc, #88]	; (800eea0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800ee46:	f240 119b 	movw	r1, #411	; 0x19b
 800ee4a:	4816      	ldr	r0, [pc, #88]	; (800eea4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800ee4c:	f00e feba 	bl	801dbc4 <__assert_func>
 800ee50:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f7ff ff5a 	bl	800ed0c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800ee58:	4602      	mov	r2, r0
 800ee5a:	f107 030c 	add.w	r3, r7, #12
 800ee5e:	4611      	mov	r1, r2
 800ee60:	4618      	mov	r0, r3
 800ee62:	f000 fbb8 	bl	800f5d6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f7ff ff50 	bl	800ed0c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800ee6c:	4602      	mov	r2, r0
 800ee6e:	f107 030c 	add.w	r3, r7, #12
 800ee72:	6839      	ldr	r1, [r7, #0]
 800ee74:	4618      	mov	r0, r3
 800ee76:	f000 fbd3 	bl	800f620 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800ee7a:	eeb0 8a40 	vmov.f32	s16, s0
 800ee7e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800ee80:	f107 030c 	add.w	r3, r7, #12
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7ff ffbc 	bl	800ee02 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800ee8a:	eef0 7a48 	vmov.f32	s15, s16
}
 800ee8e:	eeb0 0a67 	vmov.f32	s0, s15
 800ee92:	3720      	adds	r7, #32
 800ee94:	46bd      	mov	sp, r7
 800ee96:	ecbd 8b02 	vpop	{d8}
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	08024aac 	.word	0x08024aac
 800eea0:	0802710c 	.word	0x0802710c
 800eea4:	08024cb8 	.word	0x08024cb8

0800eea8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800eeb0:	2202      	movs	r2, #2
 800eeb2:	2101      	movs	r1, #1
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f7fd fd50 	bl	800c95a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f000 fbc1 	bl	800f642 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>
  }
 800eec0:	bf00      	nop
 800eec2:	3708      	adds	r7, #8
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800eec8:	b480      	push	{r7}
 800eeca:	b083      	sub	sp, #12
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
    }
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4618      	mov	r0, r3
 800eed4:	370c      	adds	r7, #12
 800eed6:	46bd      	mov	sp, r7
 800eed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eedc:	4770      	bx	lr

0800eede <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800eede:	b480      	push	{r7}
 800eee0:	b083      	sub	sp, #12
 800eee2:	af00      	add	r7, sp, #0
 800eee4:	6078      	str	r0, [r7, #4]
 800eee6:	6039      	str	r1, [r7, #0]
}
 800eee8:	bf00      	nop
 800eeea:	370c      	adds	r7, #12
 800eeec:	46bd      	mov	sp, r7
 800eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef2:	4770      	bx	lr

0800eef4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f000 fbd5 	bl	800f6ac <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	4618      	mov	r0, r3
 800ef06:	3708      	adds	r7, #8
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7ff ffec 	bl	800eef4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3708      	adds	r7, #8
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}

0800ef26 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800ef26:	b580      	push	{r7, lr}
 800ef28:	b082      	sub	sp, #8
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7ff ffeb 	bl	800ef0c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f000 fbad 	bl	800f696 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3708      	adds	r7, #8
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}

0800ef46 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800ef46:	b580      	push	{r7, lr}
 800ef48:	b082      	sub	sp, #8
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	6078      	str	r0, [r7, #4]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7ff ffe8 	bl	800ef26 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3708      	adds	r7, #8
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	330c      	adds	r3, #12
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7ff ffea 	bl	800ef46 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	3308      	adds	r3, #8
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7f8 f995 	bl	80072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f000 fb7f 	bl	800f680 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	4618      	mov	r0, r3
 800ef86:	3708      	adds	r7, #8
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7ff ffe2 	bl	800ef60 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3708      	adds	r7, #8
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}

0800efa6 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800efa6:	b580      	push	{r7, lr}
 800efa8:	b090      	sub	sp, #64	; 0x40
 800efaa:	af02      	add	r7, sp, #8
 800efac:	60f8      	str	r0, [r7, #12]
 800efae:	60b9      	str	r1, [r7, #8]
 800efb0:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800efb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800efb6:	68b9      	ldr	r1, [r7, #8]
 800efb8:	4618      	mov	r0, r3
 800efba:	f000 fb52 	bl	800f662 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800efbe:	687a      	ldr	r2, [r7, #4]
 800efc0:	68b9      	ldr	r1, [r7, #8]
 800efc2:	68f8      	ldr	r0, [r7, #12]
 800efc4:	f000 fb9a 	bl	800f6fc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800efc8:	f107 0320 	add.w	r3, r7, #32
 800efcc:	68f9      	ldr	r1, [r7, #12]
 800efce:	4618      	mov	r0, r3
 800efd0:	f7f7 fc2d 	bl	800682e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800efd4:	68f8      	ldr	r0, [r7, #12]
 800efd6:	f7f8 fc6b 	bl	80078b0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800efda:	4603      	mov	r3, r0
 800efdc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800efe0:	f107 0120 	add.w	r1, r7, #32
 800efe4:	f107 0010 	add.w	r0, r7, #16
 800efe8:	9300      	str	r3, [sp, #0]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f000 fbd0 	bl	800f790 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800eff0:	f107 0310 	add.w	r3, r7, #16
 800eff4:	4618      	mov	r0, r3
 800eff6:	f000 fbe5 	bl	800f7c4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800effa:	f107 0320 	add.w	r3, r7, #32
 800effe:	4618      	mov	r0, r3
 800f000:	f7f6 f8db 	bl	80051ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800f004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f008:	4618      	mov	r0, r3
 800f00a:	f7ff ffbf 	bl	800ef8c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
}
 800f00e:	bf00      	nop
 800f010:	3738      	adds	r7, #56	; 0x38
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}

0800f016 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800f016:	b580      	push	{r7, lr}
 800f018:	b086      	sub	sp, #24
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	60f8      	str	r0, [r7, #12]
 800f01e:	60b9      	str	r1, [r7, #8]
 800f020:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	68b9      	ldr	r1, [r7, #8]
 800f02a:	6978      	ldr	r0, [r7, #20]
 800f02c:	f000 fbd5 	bl	800f7da <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>
}
 800f030:	bf00      	nop
 800f032:	3718      	adds	r7, #24
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f038:	b480      	push	{r7}
 800f03a:	b083      	sub	sp, #12
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	332c      	adds	r3, #44	; 0x2c
 800f044:	4618      	mov	r0, r3
 800f046:	370c      	adds	r7, #12
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr

0800f050 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	4618      	mov	r0, r3
 800f05c:	370c      	adds	r7, #12
 800f05e:	46bd      	mov	sp, r7
 800f060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f064:	4770      	bx	lr

0800f066 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f066:	b480      	push	{r7}
 800f068:	b083      	sub	sp, #12
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	6078      	str	r0, [r7, #4]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	3318      	adds	r3, #24
 800f072:	4618      	mov	r0, r3
 800f074:	370c      	adds	r7, #12
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr

0800f07e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f07e:	b580      	push	{r7, lr}
 800f080:	b082      	sub	sp, #8
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
 800f086:	6039      	str	r1, [r7, #0]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6839      	ldr	r1, [r7, #0]
 800f08c:	4618      	mov	r0, r3
 800f08e:	f000 fbb7 	bl	800f800 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	4618      	mov	r0, r3
 800f096:	3708      	adds	r7, #8
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}

0800f09c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>:
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6839      	ldr	r1, [r7, #0]
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f000 fbb7 	bl	800f81e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3708      	adds	r7, #8
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f0ba:	b480      	push	{r7}
 800f0bc:	b083      	sub	sp, #12
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	6078      	str	r0, [r7, #4]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	370c      	adds	r7, #12
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr

0800f0d0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	60b9      	str	r1, [r7, #8]
 800f0da:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	68ba      	ldr	r2, [r7, #8]
 800f0e0:	6879      	ldr	r1, [r7, #4]
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f000 fbaa 	bl	800f83c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>
 800f0e8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f0ec:	eeb0 0a67 	vmov.f32	s0, s15
 800f0f0:	3710      	adds	r7, #16
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}

0800f0f6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f0f6:	b5b0      	push	{r4, r5, r7, lr}
 800f0f8:	b084      	sub	sp, #16
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	60f8      	str	r0, [r7, #12]
 800f0fe:	60b9      	str	r1, [r7, #8]
 800f100:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681c      	ldr	r4, [r3, #0]
 800f106:	68f8      	ldr	r0, [r7, #12]
 800f108:	f000 fbb9 	bl	800f87e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>
 800f10c:	4602      	mov	r2, r0
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	fb03 f502 	mul.w	r5, r3, r2
 800f114:	68f8      	ldr	r0, [r7, #12]
 800f116:	f000 fbbd 	bl	800f894 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>
 800f11a:	4602      	mov	r2, r0
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	fb02 f303 	mul.w	r3, r2, r3
 800f122:	442b      	add	r3, r5
 800f124:	009b      	lsls	r3, r3, #2
 800f126:	4423      	add	r3, r4
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	ee07 3a90 	vmov	s15, r3
  }
 800f12e:	eeb0 0a67 	vmov.f32	s0, s15
 800f132:	3710      	adds	r7, #16
 800f134:	46bd      	mov	sp, r7
 800f136:	bdb0      	pop	{r4, r5, r7, pc}

0800f138 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800f138:	b480      	push	{r7}
 800f13a:	b085      	sub	sp, #20
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	60b9      	str	r1, [r7, #8]
 800f142:	607a      	str	r2, [r7, #4]
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	ed93 7a00 	vldr	s14, [r3]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	edd3 7a00 	vldr	s15, [r3]
 800f150:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f154:	eeb0 0a67 	vmov.f32	s0, s15
 800f158:	3714      	adds	r7, #20
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr

0800f162 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800f162:	b580      	push	{r7, lr}
 800f164:	b084      	sub	sp, #16
 800f166:	af00      	add	r7, sp, #0
 800f168:	60f8      	str	r0, [r7, #12]
 800f16a:	60b9      	str	r1, [r7, #8]
 800f16c:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f16e:	68b9      	ldr	r1, [r7, #8]
 800f170:	68f8      	ldr	r0, [r7, #12]
 800f172:	f000 fb9a 	bl	800f8aa <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f176:	687a      	ldr	r2, [r7, #4]
 800f178:	68b9      	ldr	r1, [r7, #8]
 800f17a:	68f8      	ldr	r0, [r7, #12]
 800f17c:	f000 fba0 	bl	800f8c0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f180:	bf00      	nop
 800f182:	3710      	adds	r7, #16
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}

0800f188 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800f188:	b590      	push	{r4, r7, lr}
 800f18a:	b085      	sub	sp, #20
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	60f8      	str	r0, [r7, #12]
 800f190:	60b9      	str	r1, [r7, #8]
 800f192:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	4618      	mov	r0, r3
 800f198:	f7f6 fded 	bl	8005d76 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800f19c:	4604      	mov	r4, r0
 800f19e:	68b8      	ldr	r0, [r7, #8]
 800f1a0:	f7f6 ffb0 	bl	8006104 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	429c      	cmp	r4, r3
 800f1a8:	d10a      	bne.n	800f1c0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f7f6 fded 	bl	8005d8c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800f1b2:	4604      	mov	r4, r0
 800f1b4:	68b8      	ldr	r0, [r7, #8]
 800f1b6:	f7f6 ffb3 	bl	8006120 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	429c      	cmp	r4, r3
 800f1be:	d005      	beq.n	800f1cc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800f1c0:	4b0b      	ldr	r3, [pc, #44]	; (800f1f0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800f1c2:	4a0c      	ldr	r2, [pc, #48]	; (800f1f4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800f1c4:	21b0      	movs	r1, #176	; 0xb0
 800f1c6:	480c      	ldr	r0, [pc, #48]	; (800f1f8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800f1c8:	f00e fcfc 	bl	801dbc4 <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800f1cc:	68b8      	ldr	r0, [r7, #8]
 800f1ce:	f000 fbaf 	bl	800f930 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 800f1d2:	4604      	mov	r4, r0
 800f1d4:	68b8      	ldr	r0, [r7, #8]
 800f1d6:	f000 fbb7 	bl	800f948 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	461a      	mov	r2, r3
 800f1de:	4621      	mov	r1, r4
 800f1e0:	68f8      	ldr	r0, [r7, #12]
 800f1e2:	f000 fbbd 	bl	800f960 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>
  }
 800f1e6:	bf00      	nop
 800f1e8:	3714      	adds	r7, #20
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd90      	pop	{r4, r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	080227c0 	.word	0x080227c0
 800f1f4:	080272e8 	.word	0x080272e8
 800f1f8:	08022cb8 	.word	0x08022cb8

0800f1fc <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800f1fc:	b590      	push	{r4, r7, lr}
 800f1fe:	b085      	sub	sp, #20
 800f200:	af00      	add	r7, sp, #0
 800f202:	60f8      	str	r0, [r7, #12]
 800f204:	60b9      	str	r1, [r7, #8]
 800f206:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800f208:	68b8      	ldr	r0, [r7, #8]
 800f20a:	f7f6 f806 	bl	800521a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800f20e:	4604      	mov	r4, r0
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f7f6 fc9b 	bl	8005b4c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800f216:	4603      	mov	r3, r0
 800f218:	461a      	mov	r2, r3
 800f21a:	4621      	mov	r1, r4
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f000 fbf3 	bl	800fa08 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>
}
 800f222:	68f8      	ldr	r0, [r7, #12]
 800f224:	3714      	adds	r7, #20
 800f226:	46bd      	mov	sp, r7
 800f228:	bd90      	pop	{r4, r7, pc}

0800f22a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b086      	sub	sp, #24
 800f22e:	af00      	add	r7, sp, #0
 800f230:	60f8      	str	r0, [r7, #12]
 800f232:	60b9      	str	r1, [r7, #8]
 800f234:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800f23a:	687a      	ldr	r2, [r7, #4]
 800f23c:	68b9      	ldr	r1, [r7, #8]
 800f23e:	6978      	ldr	r0, [r7, #20]
 800f240:	f000 fc10 	bl	800fa64 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800f244:	bf00      	nop
 800f246:	3718      	adds	r7, #24
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f24c:	b480      	push	{r7}
 800f24e:	b083      	sub	sp, #12
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
    }
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	4618      	mov	r0, r3
 800f258:	370c      	adds	r7, #12
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr

0800f262 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800f262:	b480      	push	{r7}
 800f264:	b083      	sub	sp, #12
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
 800f26a:	6039      	str	r1, [r7, #0]
    {}
 800f26c:	bf00      	nop
 800f26e:	370c      	adds	r7, #12
 800f270:	46bd      	mov	sp, r7
 800f272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f276:	4770      	bx	lr

0800f278 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	4618      	mov	r0, r3
 800f284:	370c      	adds	r7, #12
 800f286:	46bd      	mov	sp, r7
 800f288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28c:	4770      	bx	lr

0800f28e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800f28e:	b590      	push	{r4, r7, lr}
 800f290:	b083      	sub	sp, #12
 800f292:	af00      	add	r7, sp, #0
 800f294:	6078      	str	r0, [r7, #4]
 800f296:	6039      	str	r1, [r7, #0]
 800f298:	687c      	ldr	r4, [r7, #4]
 800f29a:	6838      	ldr	r0, [r7, #0]
 800f29c:	f000 fbf5 	bl	800fa8a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	f7f6 f8a1 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	1d1c      	adds	r4, r3, #4
 800f2ae:	6838      	ldr	r0, [r7, #0]
 800f2b0:	f000 fbf7 	bl	800faa2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	f7ff fbde 	bl	800ea7a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f103 040c 	add.w	r4, r3, #12
 800f2c4:	6838      	ldr	r0, [r7, #0]
 800f2c6:	f000 fbf7 	bl	800fab8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	f000 fbfe 	bl	800fad0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	370c      	adds	r7, #12
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd90      	pop	{r4, r7, pc}

0800f2de <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800f2de:	b580      	push	{r7, lr}
 800f2e0:	b084      	sub	sp, #16
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	60f8      	str	r0, [r7, #12]
 800f2e6:	60b9      	str	r1, [r7, #8]
 800f2e8:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	68ba      	ldr	r2, [r7, #8]
 800f2ee:	6879      	ldr	r1, [r7, #4]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f000 fbfc 	bl	800faee <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>
 800f2f6:	eef0 7a40 	vmov.f32	s15, s0
 800f2fa:	eeb0 0a67 	vmov.f32	s0, s15
 800f2fe:	3710      	adds	r7, #16
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}

0800f304 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800f304:	b580      	push	{r7, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800f30e:	2201      	movs	r2, #1
 800f310:	2100      	movs	r1, #0
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7ff ffe3 	bl	800f2de <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800f318:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f31c:	eeb0 0a67 	vmov.f32	s0, s15
 800f320:	3708      	adds	r7, #8
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}

0800f326 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800f326:	b580      	push	{r7, lr}
 800f328:	b082      	sub	sp, #8
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
 800f32e:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800f330:	2202      	movs	r2, #2
 800f332:	2100      	movs	r1, #0
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f7ff ffd2 	bl	800f2de <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800f33a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f33e:	eeb0 0a67 	vmov.f32	s0, s15
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800f348:	b480      	push	{r7}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
 800f350:	bf00      	nop
 800f352:	370c      	adds	r7, #12
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr

0800f35c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f35c:	b480      	push	{r7}
 800f35e:	b083      	sub	sp, #12
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	3334      	adds	r3, #52	; 0x34
 800f368:	4618      	mov	r0, r3
 800f36a:	370c      	adds	r7, #12
 800f36c:	46bd      	mov	sp, r7
 800f36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f372:	4770      	bx	lr

0800f374 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f374:	b480      	push	{r7}
 800f376:	b083      	sub	sp, #12
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	3304      	adds	r3, #4
 800f380:	4618      	mov	r0, r3
 800f382:	370c      	adds	r7, #12
 800f384:	46bd      	mov	sp, r7
 800f386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38a:	4770      	bx	lr

0800f38c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f38c:	b480      	push	{r7}
 800f38e:	b083      	sub	sp, #12
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	331c      	adds	r3, #28
 800f398:	4618      	mov	r0, r3
 800f39a:	370c      	adds	r7, #12
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr

0800f3a4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6839      	ldr	r1, [r7, #0]
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f000 fbcb 	bl	800fb4e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3708      	adds	r7, #8
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}

0800f3c2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>:
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	b082      	sub	sp, #8
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
 800f3ca:	6039      	str	r1, [r7, #0]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6839      	ldr	r1, [r7, #0]
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f000 fbcb 	bl	800fb6c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3708      	adds	r7, #8
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f3e0:	b480      	push	{r7}
 800f3e2:	b083      	sub	sp, #12
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	370c      	adds	r7, #12
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr

0800f3f6 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f3f6:	b580      	push	{r7, lr}
 800f3f8:	b084      	sub	sp, #16
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	60f8      	str	r0, [r7, #12]
 800f3fe:	60b9      	str	r1, [r7, #8]
 800f400:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	68ba      	ldr	r2, [r7, #8]
 800f406:	6879      	ldr	r1, [r7, #4]
 800f408:	4618      	mov	r0, r3
 800f40a:	f000 fbc6 	bl	800fb9a <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>
 800f40e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f412:	eeb0 0a67 	vmov.f32	s0, s15
 800f416:	3710      	adds	r7, #16
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f41c:	b5b0      	push	{r4, r5, r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
 800f422:	60f8      	str	r0, [r7, #12]
 800f424:	60b9      	str	r1, [r7, #8]
 800f426:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	681c      	ldr	r4, [r3, #0]
 800f42c:	68f8      	ldr	r0, [r7, #12]
 800f42e:	f000 fbd4 	bl	800fbda <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 800f432:	4602      	mov	r2, r0
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	fb03 f502 	mul.w	r5, r3, r2
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f000 fbd8 	bl	800fbf0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 800f440:	4602      	mov	r2, r0
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	fb02 f303 	mul.w	r3, r2, r3
 800f448:	442b      	add	r3, r5
 800f44a:	009b      	lsls	r3, r3, #2
 800f44c:	4423      	add	r3, r4
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	ee07 3a90 	vmov	s15, r3
  }
 800f454:	eeb0 0a67 	vmov.f32	s0, s15
 800f458:	3710      	adds	r7, #16
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bdb0      	pop	{r4, r5, r7, pc}

0800f45e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f45e:	b580      	push	{r7, lr}
 800f460:	b082      	sub	sp, #8
 800f462:	af00      	add	r7, sp, #0
 800f464:	6078      	str	r0, [r7, #4]
 800f466:	6039      	str	r1, [r7, #0]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6839      	ldr	r1, [r7, #0]
 800f46c:	4618      	mov	r0, r3
 800f46e:	f000 fbca 	bl	800fc06 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4618      	mov	r0, r3
 800f476:	3708      	adds	r7, #8
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	6039      	str	r1, [r7, #0]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6839      	ldr	r1, [r7, #0]
 800f48a:	4618      	mov	r0, r3
 800f48c:	f000 fbd1 	bl	800fc32 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	4618      	mov	r0, r3
 800f494:	3708      	adds	r7, #8
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}

0800f49a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f49a:	b480      	push	{r7}
 800f49c:	b083      	sub	sp, #12
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	6078      	str	r0, [r7, #4]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	370c      	adds	r7, #12
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr

0800f4b0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	60f8      	str	r0, [r7, #12]
 800f4b8:	60b9      	str	r1, [r7, #8]
 800f4ba:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	68ba      	ldr	r2, [r7, #8]
 800f4c0:	6879      	ldr	r1, [r7, #4]
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f000 fbc9 	bl	800fc5a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>
 800f4c8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f4cc:	eeb0 0a67 	vmov.f32	s0, s15
 800f4d0:	3710      	adds	r7, #16
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}

0800f4d6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f4d6:	b5b0      	push	{r4, r5, r7, lr}
 800f4d8:	b084      	sub	sp, #16
 800f4da:	af00      	add	r7, sp, #0
 800f4dc:	60f8      	str	r0, [r7, #12]
 800f4de:	60b9      	str	r1, [r7, #8]
 800f4e0:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681c      	ldr	r4, [r3, #0]
 800f4e6:	68f8      	ldr	r0, [r7, #12]
 800f4e8:	f000 fbd8 	bl	800fc9c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>
 800f4ec:	4602      	mov	r2, r0
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	fb03 f502 	mul.w	r5, r3, r2
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	f000 fbdc 	bl	800fcb2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>
 800f4fa:	4602      	mov	r2, r0
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	fb02 f303 	mul.w	r3, r2, r3
 800f502:	442b      	add	r3, r5
 800f504:	009b      	lsls	r3, r3, #2
 800f506:	4423      	add	r3, r4
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	ee07 3a90 	vmov	s15, r3
  }
 800f50e:	eeb0 0a67 	vmov.f32	s0, s15
 800f512:	3710      	adds	r7, #16
 800f514:	46bd      	mov	sp, r7
 800f516:	bdb0      	pop	{r4, r5, r7, pc}

0800f518 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800f518:	b480      	push	{r7}
 800f51a:	b083      	sub	sp, #12
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	4618      	mov	r0, r3
 800f526:	370c      	adds	r7, #12
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr

0800f530 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800f530:	b480      	push	{r7}
 800f532:	b083      	sub	sp, #12
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	4618      	mov	r0, r3
 800f53e:	370c      	adds	r7, #12
 800f540:	46bd      	mov	sp, r7
 800f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f546:	4770      	bx	lr

0800f548 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800f548:	b580      	push	{r7, lr}
 800f54a:	b088      	sub	sp, #32
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800f554:	f107 0314 	add.w	r3, r7, #20
 800f558:	687a      	ldr	r2, [r7, #4]
 800f55a:	68b9      	ldr	r1, [r7, #8]
 800f55c:	4618      	mov	r0, r3
 800f55e:	f000 fbb3 	bl	800fcc8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>
 800f562:	f107 031c 	add.w	r3, r7, #28
 800f566:	4618      	mov	r0, r3
 800f568:	f7f7 fc45 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800f56c:	f107 021c 	add.w	r2, r7, #28
 800f570:	f107 0314 	add.w	r3, r7, #20
 800f574:	4619      	mov	r1, r3
 800f576:	68f8      	ldr	r0, [r7, #12]
 800f578:	f000 fbbd 	bl	800fcf6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f57c:	bf00      	nop
 800f57e:	3720      	adds	r7, #32
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}

0800f584 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800f584:	b580      	push	{r7, lr}
 800f586:	b084      	sub	sp, #16
 800f588:	af00      	add	r7, sp, #0
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	607a      	str	r2, [r7, #4]
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	68b9      	ldr	r1, [r7, #8]
 800f596:	4618      	mov	r0, r3
 800f598:	f000 fbbe 	bl	800fd18 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3710      	adds	r7, #16
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}

0800f5a6 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f5a6:	b480      	push	{r7}
 800f5a8:	b083      	sub	sp, #12
 800f5aa:	af00      	add	r7, sp, #0
 800f5ac:	6078      	str	r0, [r7, #4]
    }
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	370c      	adds	r7, #12
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr

0800f5bc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7fc f889 	bl	800b6de <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800f5cc:	4603      	mov	r3, r0
    }
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3708      	adds	r7, #8
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800f5d6:	b580      	push	{r7, lr}
 800f5d8:	b082      	sub	sp, #8
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
 800f5de:	6039      	str	r1, [r7, #0]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6839      	ldr	r1, [r7, #0]
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f000 fbcd 	bl	800fd84 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3708      	adds	r7, #8
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800f5f4:	b480      	push	{r7}
 800f5f6:	b083      	sub	sp, #12
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4618      	mov	r0, r3
 800f600:	370c      	adds	r7, #12
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr

0800f60a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
 800f60a:	b480      	push	{r7}
 800f60c:	b083      	sub	sp, #12
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	4618      	mov	r0, r3
 800f616:	370c      	adds	r7, #12
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr

0800f620 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0
 800f626:	60f8      	str	r0, [r7, #12]
 800f628:	60b9      	str	r1, [r7, #8]
 800f62a:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800f62c:	68b9      	ldr	r1, [r7, #8]
 800f62e:	68f8      	ldr	r0, [r7, #12]
 800f630:	f000 fbb7 	bl	800fda2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800f634:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f638:	eeb0 0a67 	vmov.f32	s0, s15
 800f63c:	3710      	adds	r7, #16
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}

0800f642 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f642:	b580      	push	{r7, lr}
 800f644:	b082      	sub	sp, #8
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800f64a:	2200      	movs	r2, #0
 800f64c:	2102      	movs	r1, #2
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f7fd f983 	bl	800c95a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f000 fbc8 	bl	800fdea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>
  }
 800f65a:	bf00      	nop
 800f65c:	3708      	adds	r7, #8
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}

0800f662 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800f662:	b580      	push	{r7, lr}
 800f664:	b082      	sub	sp, #8
 800f666:	af00      	add	r7, sp, #0
 800f668:	6078      	str	r0, [r7, #4]
 800f66a:	6039      	str	r1, [r7, #0]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6839      	ldr	r1, [r7, #0]
 800f670:	4618      	mov	r0, r3
 800f672:	f000 fbca 	bl	800fe0a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	4618      	mov	r0, r3
 800f67a:	3708      	adds	r7, #8
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
 800f680:	b480      	push	{r7}
 800f682:	b083      	sub	sp, #12
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	4618      	mov	r0, r3
 800f68c:	370c      	adds	r7, #12
 800f68e:	46bd      	mov	sp, r7
 800f690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f694:	4770      	bx	lr

0800f696 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 800f696:	b480      	push	{r7}
 800f698:	b083      	sub	sp, #12
 800f69a:	af00      	add	r7, sp, #0
 800f69c:	6078      	str	r0, [r7, #4]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr

0800f6ac <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	370c      	adds	r7, #12
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr

0800f6c2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800f6c2:	b580      	push	{r7, lr}
 800f6c4:	b082      	sub	sp, #8
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	6078      	str	r0, [r7, #4]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7f5 fb61 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3708      	adds	r7, #8
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}

0800f6de <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800f6de:	b580      	push	{r7, lr}
 800f6e0:	b082      	sub	sp, #8
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	3304      	adds	r3, #4
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7f7 fa3b 	bl	8006b66 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3708      	adds	r7, #8
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
	...

0800f6fc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b086      	sub	sp, #24
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800f708:	68b8      	ldr	r0, [r7, #8]
 800f70a:	f7ff ffda 	bl	800f6c2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>
 800f70e:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800f710:	68b8      	ldr	r0, [r7, #8]
 800f712:	f7ff ffe4 	bl	800f6de <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>
 800f716:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7f5 fbe1 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800f720:	4602      	mov	r2, r0
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	4293      	cmp	r3, r2
 800f726:	d107      	bne.n	800f738 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7f5 fbce 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800f730:	4602      	mov	r2, r0
 800f732:	693b      	ldr	r3, [r7, #16]
 800f734:	4293      	cmp	r3, r2
 800f736:	d001      	beq.n	800f73c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800f738:	2301      	movs	r3, #1
 800f73a:	e000      	b.n	800f73e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800f73c:	2300      	movs	r3, #0
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d005      	beq.n	800f74e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	693a      	ldr	r2, [r7, #16]
 800f746:	6979      	ldr	r1, [r7, #20]
 800f748:	4618      	mov	r0, r3
 800f74a:	f7f8 fad5 	bl	8007cf8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	4618      	mov	r0, r3
 800f752:	f7f5 fbc6 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800f756:	4602      	mov	r2, r0
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d107      	bne.n	800f76e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	4618      	mov	r0, r3
 800f762:	f7f5 fbb3 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800f766:	4602      	mov	r2, r0
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d006      	beq.n	800f77c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800f76e:	4b05      	ldr	r3, [pc, #20]	; (800f784 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800f770:	4a05      	ldr	r2, [pc, #20]	; (800f788 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800f772:	f240 21fd 	movw	r1, #765	; 0x2fd
 800f776:	4805      	ldr	r0, [pc, #20]	; (800f78c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800f778:	f00e fa24 	bl	801dbc4 <__assert_func>
}
 800f77c:	bf00      	nop
 800f77e:	3718      	adds	r7, #24
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}
 800f784:	080220a4 	.word	0x080220a4
 800f788:	08027664 	.word	0x08027664
 800f78c:	080221b8 	.word	0x080221b8

0800f790 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800f790:	b480      	push	{r7}
 800f792:	b085      	sub	sp, #20
 800f794:	af00      	add	r7, sp, #0
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
 800f79c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	68ba      	ldr	r2, [r7, #8]
 800f7a2:	601a      	str	r2, [r3, #0]
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	605a      	str	r2, [r3, #4]
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	683a      	ldr	r2, [r7, #0]
 800f7ae:	609a      	str	r2, [r3, #8]
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	69ba      	ldr	r2, [r7, #24]
 800f7b4:	60da      	str	r2, [r3, #12]
  }
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3714      	adds	r7, #20
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr

0800f7c4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b082      	sub	sp, #8
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	f000 fb53 	bl	800fe78 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>
  }
 800f7d2:	bf00      	nop
 800f7d4:	3708      	adds	r7, #8
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}

0800f7da <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800f7da:	b580      	push	{r7, lr}
 800f7dc:	b084      	sub	sp, #16
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	60f8      	str	r0, [r7, #12]
 800f7e2:	60b9      	str	r1, [r7, #8]
 800f7e4:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f7e6:	68b9      	ldr	r1, [r7, #8]
 800f7e8:	68f8      	ldr	r0, [r7, #12]
 800f7ea:	f000 fb54 	bl	800fe96 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f7ee:	687a      	ldr	r2, [r7, #4]
 800f7f0:	68b9      	ldr	r1, [r7, #8]
 800f7f2:	68f8      	ldr	r0, [r7, #12]
 800f7f4:	f000 fbbe 	bl	800ff74 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f7f8:	bf00      	nop
 800f7fa:	3710      	adds	r7, #16
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	6039      	str	r1, [r7, #0]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6839      	ldr	r1, [r7, #0]
 800f80e:	4618      	mov	r0, r3
 800f810:	f000 fbe8 	bl	800ffe4 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	4618      	mov	r0, r3
 800f818:	3708      	adds	r7, #8
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}

0800f81e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f81e:	b580      	push	{r7, lr}
 800f820:	b082      	sub	sp, #8
 800f822:	af00      	add	r7, sp, #0
 800f824:	6078      	str	r0, [r7, #4]
 800f826:	6039      	str	r1, [r7, #0]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6839      	ldr	r1, [r7, #0]
 800f82c:	4618      	mov	r0, r3
 800f82e:	f000 fbef 	bl	8010010 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>
  }
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	4618      	mov	r0, r3
 800f836:	3708      	adds	r7, #8
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f83c:	b5b0      	push	{r4, r5, r7, lr}
 800f83e:	b084      	sub	sp, #16
 800f840:	af00      	add	r7, sp, #0
 800f842:	60f8      	str	r0, [r7, #12]
 800f844:	60b9      	str	r1, [r7, #8]
 800f846:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681c      	ldr	r4, [r3, #0]
 800f84c:	68f8      	ldr	r0, [r7, #12]
 800f84e:	f000 fbf3 	bl	8010038 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>
 800f852:	4602      	mov	r2, r0
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	fb03 f502 	mul.w	r5, r3, r2
 800f85a:	68f8      	ldr	r0, [r7, #12]
 800f85c:	f000 fbf7 	bl	801004e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>
 800f860:	4602      	mov	r2, r0
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	fb02 f303 	mul.w	r3, r2, r3
 800f868:	442b      	add	r3, r5
 800f86a:	009b      	lsls	r3, r3, #2
 800f86c:	4423      	add	r3, r4
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	ee07 3a90 	vmov	s15, r3
  }
 800f874:	eeb0 0a67 	vmov.f32	s0, s15
 800f878:	3710      	adds	r7, #16
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bdb0      	pop	{r4, r5, r7, pc}

0800f87e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800f87e:	b580      	push	{r7, lr}
 800f880:	b082      	sub	sp, #8
 800f882:	af00      	add	r7, sp, #0
 800f884:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800f886:	f7f7 f858 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f88a:	4603      	mov	r3, r0
  }
 800f88c:	4618      	mov	r0, r3
 800f88e:	3708      	adds	r7, #8
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800f89c:	f7f7 f84d 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f8a0:	4603      	mov	r3, r0
  }
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3708      	adds	r7, #8
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}

0800f8aa <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800f8aa:	b480      	push	{r7}
 800f8ac:	b083      	sub	sp, #12
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	6078      	str	r0, [r7, #4]
 800f8b2:	6039      	str	r1, [r7, #0]
}
 800f8b4:	bf00      	nop
 800f8b6:	370c      	adds	r7, #12
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b08c      	sub	sp, #48	; 0x30
 800f8c4:	af02      	add	r7, sp, #8
 800f8c6:	60f8      	str	r0, [r7, #12]
 800f8c8:	60b9      	str	r1, [r7, #8]
 800f8ca:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800f8cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8d0:	68b9      	ldr	r1, [r7, #8]
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fa fd4f 	bl	800a376 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 800f8d8:	687a      	ldr	r2, [r7, #4]
 800f8da:	68b9      	ldr	r1, [r7, #8]
 800f8dc:	68f8      	ldr	r0, [r7, #12]
 800f8de:	f000 fbc1 	bl	8010064 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800f8e2:	f107 0320 	add.w	r3, r7, #32
 800f8e6:	68f9      	ldr	r1, [r7, #12]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7fa fd44 	bl	800a376 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800f8ee:	68f8      	ldr	r0, [r7, #12]
 800f8f0:	f000 fc04 	bl	80100fc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f8fa:	f107 0120 	add.w	r1, r7, #32
 800f8fe:	f107 0010 	add.w	r0, r7, #16
 800f902:	9300      	str	r3, [sp, #0]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f000 fc04 	bl	8010112 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800f90a:	f107 0310 	add.w	r3, r7, #16
 800f90e:	4618      	mov	r0, r3
 800f910:	f000 fc19 	bl	8010146 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 800f914:	f107 0320 	add.w	r3, r7, #32
 800f918:	4618      	mov	r0, r3
 800f91a:	f7f9 fc13 	bl	8009144 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800f91e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f922:	4618      	mov	r0, r3
 800f924:	f7f9 fc0e 	bl	8009144 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
}
 800f928:	bf00      	nop
 800f92a:	3728      	adds	r7, #40	; 0x28
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}

0800f930 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800f930:	b480      	push	{r7}
 800f932:	b083      	sub	sp, #12
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	4618      	mov	r0, r3
 800f93e:	370c      	adds	r7, #12
 800f940:	46bd      	mov	sp, r7
 800f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f946:	4770      	bx	lr

0800f948 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800f948:	b480      	push	{r7}
 800f94a:	b083      	sub	sp, #12
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	685b      	ldr	r3, [r3, #4]
 800f954:	4618      	mov	r0, r3
 800f956:	370c      	adds	r7, #12
 800f958:	46bd      	mov	sp, r7
 800f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95e:	4770      	bx	lr

0800f960 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800f960:	b580      	push	{r7, lr}
 800f962:	ed2d 8b02 	vpush	{d8}
 800f966:	b088      	sub	sp, #32
 800f968:	af00      	add	r7, sp, #0
 800f96a:	60f8      	str	r0, [r7, #12]
 800f96c:	60b9      	str	r1, [r7, #8]
 800f96e:	607a      	str	r2, [r7, #4]
  { dst.coeffRef(0,0) -= (lhs.transpose().cwiseProduct(rhs)).sum(); }
 800f970:	68b8      	ldr	r0, [r7, #8]
 800f972:	f000 fbf3 	bl	801015c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 800f976:	4603      	mov	r3, r0
 800f978:	61fb      	str	r3, [r7, #28]
 800f97a:	f107 0310 	add.w	r3, r7, #16
 800f97e:	f107 011c 	add.w	r1, r7, #28
 800f982:	687a      	ldr	r2, [r7, #4]
 800f984:	4618      	mov	r0, r3
 800f986:	f000 fbfc 	bl	8010182 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>
 800f98a:	f107 0310 	add.w	r3, r7, #16
 800f98e:	4618      	mov	r0, r3
 800f990:	f000 fc25 	bl	80101de <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>
 800f994:	eeb0 8a40 	vmov.f32	s16, s0
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	2200      	movs	r2, #0
 800f99c:	2100      	movs	r1, #0
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7f6 ff11 	bl	80067c6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	edd3 7a00 	vldr	s15, [r3]
 800f9aa:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800f9ae:	edc3 7a00 	vstr	s15, [r3]
 800f9b2:	bf00      	nop
 800f9b4:	3720      	adds	r7, #32
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	ecbd 8b02 	vpop	{d8}
 800f9bc:	bd80      	pop	{r7, pc}

0800f9be <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b082      	sub	sp, #8
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f000 fc24 	bl	8010214 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3708      	adds	r7, #8
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}

0800f9d6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>:
class dense_product_base
 800f9d6:	b580      	push	{r7, lr}
 800f9d8:	b082      	sub	sp, #8
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f7ff ffed 	bl	800f9be <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3708      	adds	r7, #8
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}

0800f9ee <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800f9ee:	b580      	push	{r7, lr}
 800f9f0:	b082      	sub	sp, #8
 800f9f2:	af00      	add	r7, sp, #0
 800f9f4:	6078      	str	r0, [r7, #4]
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f7ff ffed 	bl	800f9d6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3708      	adds	r7, #8
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
	...

0800fa08 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800fa08:	b590      	push	{r4, r7, lr}
 800fa0a:	b085      	sub	sp, #20
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	60f8      	str	r0, [r7, #12]
 800fa10:	60b9      	str	r1, [r7, #8]
 800fa12:	607a      	str	r2, [r7, #4]
 800fa14:	68f8      	ldr	r0, [r7, #12]
 800fa16:	f7ff ffea 	bl	800f9ee <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	68ba      	ldr	r2, [r7, #8]
 800fa1e:	601a      	str	r2, [r3, #0]
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	687a      	ldr	r2, [r7, #4]
 800fa24:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7f5 fa4f 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800fa2e:	4604      	mov	r4, r0
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7f5 fb71 	bl	800511a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	429c      	cmp	r4, r3
 800fa3c:	d005      	beq.n	800fa4a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 800fa3e:	4b06      	ldr	r3, [pc, #24]	; (800fa58 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 800fa40:	4a06      	ldr	r2, [pc, #24]	; (800fa5c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 800fa42:	2160      	movs	r1, #96	; 0x60
 800fa44:	4806      	ldr	r0, [pc, #24]	; (800fa60 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 800fa46:	f00e f8bd 	bl	801dbc4 <__assert_func>
 800fa4a:	bf00      	nop
    }
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3714      	adds	r7, #20
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd90      	pop	{r4, r7, pc}
 800fa56:	bf00      	nop
 800fa58:	0801fcec 	.word	0x0801fcec
 800fa5c:	0802778c 	.word	0x0802778c
 800fa60:	0802003c 	.word	0x0802003c

0800fa64 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	60f8      	str	r0, [r7, #12]
 800fa6c:	60b9      	str	r1, [r7, #8]
 800fa6e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800fa70:	68b9      	ldr	r1, [r7, #8]
 800fa72:	68f8      	ldr	r0, [r7, #12]
 800fa74:	f000 fbd9 	bl	801022a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800fa78:	687a      	ldr	r2, [r7, #4]
 800fa7a:	68b9      	ldr	r1, [r7, #8]
 800fa7c:	68f8      	ldr	r0, [r7, #12]
 800fa7e:	f000 fc17 	bl	80102b0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800fa82:	bf00      	nop
 800fa84:	3710      	adds	r7, #16
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}

0800fa8a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800fa8a:	b480      	push	{r7}
 800fa8c:	b083      	sub	sp, #12
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	3330      	adds	r3, #48	; 0x30
 800fa96:	4618      	mov	r0, r3
 800fa98:	370c      	adds	r7, #12
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr

0800faa2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800faa2:	b480      	push	{r7}
 800faa4:	b083      	sub	sp, #12
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4618      	mov	r0, r3
 800faae:	370c      	adds	r7, #12
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr

0800fab8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800fab8:	b480      	push	{r7}
 800faba:	b083      	sub	sp, #12
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	3318      	adds	r3, #24
 800fac4:	4618      	mov	r0, r3
 800fac6:	370c      	adds	r7, #12
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr

0800fad0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6839      	ldr	r1, [r7, #0]
 800fade:	4618      	mov	r0, r3
 800fae0:	f000 fc1e 	bl	8010320 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	4618      	mov	r0, r3
 800fae8:	3708      	adds	r7, #8
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}

0800faee <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800faee:	b590      	push	{r4, r7, lr}
 800faf0:	b087      	sub	sp, #28
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	60f8      	str	r0, [r7, #12]
 800faf6:	60b9      	str	r1, [r7, #8]
 800faf8:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	4618      	mov	r0, r3
 800fafe:	f000 fc1e 	bl	801033e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 800fb02:	4604      	mov	r4, r0
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	3304      	adds	r3, #4
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	68b9      	ldr	r1, [r7, #8]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7ff fccf 	bl	800f4b0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800fb12:	eef0 7a40 	vmov.f32	s15, s0
 800fb16:	edc7 7a04 	vstr	s15, [r7, #16]
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	330c      	adds	r3, #12
 800fb1e:	687a      	ldr	r2, [r7, #4]
 800fb20:	68b9      	ldr	r1, [r7, #8]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f000 fc16 	bl	8010354 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 800fb28:	eef0 7a40 	vmov.f32	s15, s0
 800fb2c:	edc7 7a05 	vstr	s15, [r7, #20]
 800fb30:	f107 0214 	add.w	r2, r7, #20
 800fb34:	f107 0310 	add.w	r3, r7, #16
 800fb38:	4619      	mov	r1, r3
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	f7ff fafc 	bl	800f138 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800fb40:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fb44:	eeb0 0a67 	vmov.f32	s0, s15
 800fb48:	371c      	adds	r7, #28
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd90      	pop	{r4, r7, pc}

0800fb4e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800fb4e:	b580      	push	{r7, lr}
 800fb50:	b082      	sub	sp, #8
 800fb52:	af00      	add	r7, sp, #0
 800fb54:	6078      	str	r0, [r7, #4]
 800fb56:	6039      	str	r1, [r7, #0]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6839      	ldr	r1, [r7, #0]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f000 fc1a 	bl	8010396 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4618      	mov	r0, r3
 800fb66:	3708      	adds	r7, #8
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
 800fb74:	6039      	str	r1, [r7, #0]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6839      	ldr	r1, [r7, #0]
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f000 fc21 	bl	80103c2 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>
  }
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	4618      	mov	r0, r3
 800fb84:	3708      	adds	r7, #8
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}

0800fb8a <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>:
    T value() { return T(Value); }
 800fb8a:	b480      	push	{r7}
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	2300      	movs	r3, #0
 800fb90:	4618      	mov	r0, r3
 800fb92:	46bd      	mov	sp, r7
 800fb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb98:	4770      	bx	lr

0800fb9a <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fb9a:	b5b0      	push	{r4, r5, r7, lr}
 800fb9c:	b084      	sub	sp, #16
 800fb9e:	af00      	add	r7, sp, #0
 800fba0:	60f8      	str	r0, [r7, #12]
 800fba2:	60b9      	str	r1, [r7, #8]
 800fba4:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(m_startRow.value() + row, m_startCol.value() + col);
 800fba6:	68fc      	ldr	r4, [r7, #12]
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	3310      	adds	r3, #16
 800fbac:	4618      	mov	r0, r3
 800fbae:	f000 fc1c 	bl	80103ea <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 800fbb2:	4602      	mov	r2, r0
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	18d5      	adds	r5, r2, r3
 800fbb8:	f7ff ffe7 	bl	800fb8a <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 800fbbc:	4602      	mov	r2, r0
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	4413      	add	r3, r2
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	4629      	mov	r1, r5
 800fbc6:	4620      	mov	r0, r4
 800fbc8:	f000 fc1b 	bl	8010402 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>
 800fbcc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fbd0:	eeb0 0a67 	vmov.f32	s0, s15
 800fbd4:	3710      	adds	r7, #16
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bdb0      	pop	{r4, r5, r7, pc}

0800fbda <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b082      	sub	sp, #8
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800fbe2:	f7f6 feaa 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fbe6:	4603      	mov	r3, r0
  }
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3708      	adds	r7, #8
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}

0800fbf0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b082      	sub	sp, #8
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800fbf8:	f7f6 fe97 	bl	800692a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800fbfc:	4603      	mov	r3, r0
  }
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3708      	adds	r7, #8
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}

0800fc06 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800fc06:	b590      	push	{r4, r7, lr}
 800fc08:	b083      	sub	sp, #12
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
 800fc0e:	6039      	str	r1, [r7, #0]
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f000 fc2d 	bl	8010470 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800fc16:	687c      	ldr	r4, [r7, #4]
 800fc18:	6838      	ldr	r0, [r7, #0]
 800fc1a:	f000 fc1e 	bl	801045a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	4619      	mov	r1, r3
 800fc22:	4620      	mov	r0, r4
 800fc24:	f000 fc2f 	bl	8010486 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	370c      	adds	r7, #12
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd90      	pop	{r4, r7, pc}

0800fc32 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
{
  typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;
  typedef typename XprType::Scalar Scalar;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit block_evaluator(const XprType& block)
 800fc32:	b580      	push	{r7, lr}
 800fc34:	b082      	sub	sp, #8
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	6078      	str	r0, [r7, #4]
 800fc3a:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6839      	ldr	r1, [r7, #0]
 800fc40:	4618      	mov	r0, r3
 800fc42:	f000 fc2f 	bl	80104a4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>
  {
    // TODO: for the 3.3 release, this should be turned to an internal assertion, but let's keep it as is for the beta lifetime
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f000 fc55 	bl	80104f8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 800fc4e:	bf00      	nop
  }
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	4618      	mov	r0, r3
 800fc54:	3708      	adds	r7, #8
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}

0800fc5a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fc5a:	b5b0      	push	{r4, r5, r7, lr}
 800fc5c:	b084      	sub	sp, #16
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	60f8      	str	r0, [r7, #12]
 800fc62:	60b9      	str	r1, [r7, #8]
 800fc64:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681c      	ldr	r4, [r3, #0]
 800fc6a:	68f8      	ldr	r0, [r7, #12]
 800fc6c:	f000 fc50 	bl	8010510 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>
 800fc70:	4602      	mov	r2, r0
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	fb03 f502 	mul.w	r5, r3, r2
 800fc78:	68f8      	ldr	r0, [r7, #12]
 800fc7a:	f000 fc54 	bl	8010526 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	fb02 f303 	mul.w	r3, r2, r3
 800fc86:	442b      	add	r3, r5
 800fc88:	009b      	lsls	r3, r3, #2
 800fc8a:	4423      	add	r3, r4
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	ee07 3a90 	vmov	s15, r3
  }
 800fc92:	eeb0 0a67 	vmov.f32	s0, s15
 800fc96:	3710      	adds	r7, #16
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bdb0      	pop	{r4, r5, r7, pc}

0800fc9c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800fca4:	f7f6 fe41 	bl	800692a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800fca8:	4603      	mov	r3, r0
  }
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3708      	adds	r7, #8
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}

0800fcb2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800fcb2:	b580      	push	{r7, lr}
 800fcb4:	b082      	sub	sp, #8
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800fcba:	f7f6 fe3e 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fcbe:	4603      	mov	r3, r0
  }
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3708      	adds	r7, #8
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800fcc8:	b590      	push	{r4, r7, lr}
 800fcca:	b085      	sub	sp, #20
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	60f8      	str	r0, [r7, #12]
 800fcd0:	60b9      	str	r1, [r7, #8]
 800fcd2:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800fcd4:	68b8      	ldr	r0, [r7, #8]
 800fcd6:	f7f5 fc68 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800fcda:	4604      	mov	r4, r0
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f7f5 fc64 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800fce2:	4603      	mov	r3, r0
 800fce4:	461a      	mov	r2, r3
 800fce6:	4621      	mov	r1, r4
 800fce8:	68f8      	ldr	r0, [r7, #12]
 800fcea:	f000 fc4b 	bl	8010584 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>
}
 800fcee:	68f8      	ldr	r0, [r7, #12]
 800fcf0:	3714      	adds	r7, #20
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd90      	pop	{r4, r7, pc}

0800fcf6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800fcf6:	b580      	push	{r7, lr}
 800fcf8:	b086      	sub	sp, #24
 800fcfa:	af00      	add	r7, sp, #0
 800fcfc:	60f8      	str	r0, [r7, #12]
 800fcfe:	60b9      	str	r1, [r7, #8]
 800fd00:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	68b9      	ldr	r1, [r7, #8]
 800fd0a:	6978      	ldr	r0, [r7, #20]
 800fd0c:	f000 fc68 	bl	80105e0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800fd10:	bf00      	nop
 800fd12:	3718      	adds	r7, #24
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}

0800fd18 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800fd18:	b5b0      	push	{r4, r5, r7, lr}
 800fd1a:	b084      	sub	sp, #16
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	60f8      	str	r0, [r7, #12]
 800fd20:	60b9      	str	r1, [r7, #8]
 800fd22:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800fd24:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800fd26:	68b8      	ldr	r0, [r7, #8]
 800fd28:	f000 fc6d 	bl	8010606 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>
 800fd2c:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800fd2e:	68b8      	ldr	r0, [r7, #8]
 800fd30:	f000 fc7d 	bl	801062e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 800fd34:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	fb02 f303 	mul.w	r3, r2, r3
 800fd3c:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800fd3e:	441d      	add	r5, r3
 800fd40:	68b8      	ldr	r0, [r7, #8]
 800fd42:	f7f5 fd76 	bl	8005832 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800fd46:	4602      	mov	r2, r0
 800fd48:	2301      	movs	r3, #1
 800fd4a:	4629      	mov	r1, r5
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	f000 fca3 	bl	8010698 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	3308      	adds	r3, #8
 800fd56:	68ba      	ldr	r2, [r7, #8]
 800fd58:	6812      	ldr	r2, [r2, #0]
 800fd5a:	601a      	str	r2, [r3, #0]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	330c      	adds	r3, #12
 800fd60:	2100      	movs	r1, #0
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7fd fe30 	bl	800d9c8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	3310      	adds	r3, #16
 800fd6c:	6879      	ldr	r1, [r7, #4]
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7fd fe2a 	bl	800d9c8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800fd74:	68f8      	ldr	r0, [r7, #12]
 800fd76:	f000 fccd 	bl	8010714 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>
    }
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3710      	adds	r7, #16
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bdb0      	pop	{r4, r5, r7, pc}

0800fd84 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	6039      	str	r1, [r7, #0]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6839      	ldr	r1, [r7, #0]
 800fd92:	4618      	mov	r0, r3
 800fd94:	f000 fcce 	bl	8010734 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3708      	adds	r7, #8
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}

0800fda2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800fda2:	b580      	push	{r7, lr}
 800fda4:	b084      	sub	sp, #16
 800fda6:	af00      	add	r7, sp, #0
 800fda8:	6078      	str	r0, [r7, #4]
 800fdaa:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800fdac:	6839      	ldr	r1, [r7, #0]
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f000 fcd2 	bl	8010758 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800fdb4:	eef0 7a40 	vmov.f32	s15, s0
 800fdb8:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800fdbc:	6839      	ldr	r1, [r7, #0]
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f000 fcdb 	bl	801077a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800fdc4:	eef0 7a40 	vmov.f32	s15, s0
 800fdc8:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800fdcc:	f107 020c 	add.w	r2, r7, #12
 800fdd0:	f107 0308 	add.w	r3, r7, #8
 800fdd4:	4619      	mov	r1, r3
 800fdd6:	6838      	ldr	r0, [r7, #0]
 800fdd8:	f7f9 f96d 	bl	80090b6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800fddc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fde0:	eeb0 0a67 	vmov.f32	s0, s15
 800fde4:	3710      	adds	r7, #16
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}

0800fdea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800fdea:	b580      	push	{r7, lr}
 800fdec:	b082      	sub	sp, #8
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	2102      	movs	r1, #2
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f7fc fdaf 	bl	800c95a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f000 fce0 	bl	80107c2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>
  }
 800fe02:	bf00      	nop
 800fe04:	3708      	adds	r7, #8
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}

0800fe0a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800fe0a:	b580      	push	{r7, lr}
 800fe0c:	b082      	sub	sp, #8
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	6078      	str	r0, [r7, #4]
 800fe12:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f000 fcfc 	bl	8010812 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800fe1a:	6838      	ldr	r0, [r7, #0]
 800fe1c:	f000 fce1 	bl	80107e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 800fe20:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 800fe26:	6838      	ldr	r0, [r7, #0]
 800fe28:	f000 fce7 	bl	80107fa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>
 800fe2c:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	3304      	adds	r3, #4
 800fe32:	6812      	ldr	r2, [r2, #0]
 800fe34:	601a      	str	r2, [r3, #0]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800fe40:	4619      	mov	r1, r3
 800fe42:	4610      	mov	r0, r2
 800fe44:	f7f7 fc3e 	bl	80076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 800fe52:	4619      	mov	r1, r3
 800fe54:	4610      	mov	r0, r2
 800fe56:	f000 fce7 	bl	8010828 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 800fe5a:	6838      	ldr	r0, [r7, #0]
 800fe5c:	f000 fcc1 	bl	80107e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 800fe60:	4603      	mov	r3, r0
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7f4 ff8c 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800fe68:	4602      	mov	r2, r0
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	611a      	str	r2, [r3, #16]
  }
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	4618      	mov	r0, r3
 800fe72:	3708      	adds	r7, #8
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800fe80:	2100      	movs	r1, #0
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f000 fcdf 	bl	8010846 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f000 fcff 	bl	801088c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>
  }
 800fe8e:	bf00      	nop
 800fe90:	3708      	adds	r7, #8
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}

0800fe96 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800fe96:	b480      	push	{r7}
 800fe98:	b083      	sub	sp, #12
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
 800fe9e:	6039      	str	r1, [r7, #0]
}
 800fea0:	bf00      	nop
 800fea2:	370c      	adds	r7, #12
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	4770      	bx	lr

0800feac <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7f9 f944 	bl	8009144 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	4618      	mov	r0, r3
 800fec0:	3708      	adds	r7, #8
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}

0800fec6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800fec6:	b580      	push	{r7, lr}
 800fec8:	b082      	sub	sp, #8
 800feca:	af00      	add	r7, sp, #0
 800fecc:	6078      	str	r0, [r7, #4]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4618      	mov	r0, r3
 800fed2:	f7ff ffeb 	bl	800feac <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	4618      	mov	r0, r3
 800feda:	3708      	adds	r7, #8
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}

0800fee0 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b082      	sub	sp, #8
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	4618      	mov	r0, r3
 800feec:	f7ff ffeb 	bl	800fec6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	4618      	mov	r0, r3
 800fef4:	3708      	adds	r7, #8
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 800fefa:	b580      	push	{r7, lr}
 800fefc:	b082      	sub	sp, #8
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7f9 f91d 	bl	8009144 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3708      	adds	r7, #8
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}

0800ff14 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	330c      	adds	r3, #12
 800ff20:	4618      	mov	r0, r3
 800ff22:	f7ff ffea 	bl	800fefa <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	3304      	adds	r3, #4
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7ff ffd8 	bl	800fee0 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	4618      	mov	r0, r3
 800ff34:	3708      	adds	r7, #8
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}

0800ff3a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800ff3a:	b580      	push	{r7, lr}
 800ff3c:	b082      	sub	sp, #8
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	6078      	str	r0, [r7, #4]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7ff ffe5 	bl	800ff14 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f000 fcbc 	bl	80108c8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	4618      	mov	r0, r3
 800ff54:	3708      	adds	r7, #8
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}

0800ff5a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800ff5a:	b580      	push	{r7, lr}
 800ff5c:	b082      	sub	sp, #8
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7ff ffe8 	bl	800ff3a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3708      	adds	r7, #8
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}

0800ff74 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b090      	sub	sp, #64	; 0x40
 800ff78:	af02      	add	r7, sp, #8
 800ff7a:	60f8      	str	r0, [r7, #12]
 800ff7c:	60b9      	str	r1, [r7, #8]
 800ff7e:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800ff80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff84:	68b9      	ldr	r1, [r7, #8]
 800ff86:	4618      	mov	r0, r3
 800ff88:	f000 fc8f 	bl	80108aa <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
  resize_if_allowed(dst, src, func);
 800ff8c:	687a      	ldr	r2, [r7, #4]
 800ff8e:	68b9      	ldr	r1, [r7, #8]
 800ff90:	68f8      	ldr	r0, [r7, #12]
 800ff92:	f000 fca5 	bl	80108e0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800ff96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff9a:	68f9      	ldr	r1, [r7, #12]
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7fa f9ea 	bl	800a376 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800ffa2:	68f8      	ldr	r0, [r7, #12]
 800ffa4:	f000 f8aa 	bl	80100fc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ffae:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800ffb2:	f107 0014 	add.w	r0, r7, #20
 800ffb6:	9300      	str	r3, [sp, #0]
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f000 fcdb 	bl	8010974 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800ffbe:	f107 0314 	add.w	r3, r7, #20
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f000 fcf0 	bl	80109a8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>
  DstEvaluatorType dstEvaluator(dst);
 800ffc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7f9 f8b9 	bl	8009144 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800ffd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7ff ffbf 	bl	800ff5a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
}
 800ffdc:	bf00      	nop
 800ffde:	3738      	adds	r7, #56	; 0x38
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800ffe4:	b590      	push	{r4, r7, lr}
 800ffe6:	b083      	sub	sp, #12
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f000 fcf0 	bl	80109d4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800fff4:	687c      	ldr	r4, [r7, #4]
 800fff6:	6838      	ldr	r0, [r7, #0]
 800fff8:	f000 fce1 	bl	80109be <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>
 800fffc:	4603      	mov	r3, r0
 800fffe:	4619      	mov	r1, r3
 8010000:	4620      	mov	r0, r4
 8010002:	f000 fcf2 	bl	80109ea <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	4618      	mov	r0, r3
 801000a:	370c      	adds	r7, #12
 801000c:	46bd      	mov	sp, r7
 801000e:	bd90      	pop	{r4, r7, pc}

08010010 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
 8010018:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6839      	ldr	r1, [r7, #0]
 801001e:	4618      	mov	r0, r3
 8010020:	f000 fcf2 	bl	8010a08 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	4618      	mov	r0, r3
 8010028:	f000 fd18 	bl	8010a5c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 801002c:	bf00      	nop
  }
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	4618      	mov	r0, r3
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}

08010038 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8010040:	f7f6 fc73 	bl	800692a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8010044:	4603      	mov	r3, r0
  }
 8010046:	4618      	mov	r0, r3
 8010048:	3708      	adds	r7, #8
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}

0801004e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 801004e:	b580      	push	{r7, lr}
 8010050:	b082      	sub	sp, #8
 8010052:	af00      	add	r7, sp, #0
 8010054:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8010056:	f7f6 fc70 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801005a:	4603      	mov	r3, r0
  }
 801005c:	4618      	mov	r0, r3
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8010064:	b580      	push	{r7, lr}
 8010066:	b086      	sub	sp, #24
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	4618      	mov	r0, r3
 8010074:	f7f5 fe7f 	bl	8005d76 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010078:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	4618      	mov	r0, r3
 801007e:	f7f5 fe85 	bl	8005d8c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010082:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	4618      	mov	r0, r3
 8010088:	f7f5 fe75 	bl	8005d76 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 801008c:	4602      	mov	r2, r0
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	4293      	cmp	r3, r2
 8010092:	d107      	bne.n	80100a4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	4618      	mov	r0, r3
 8010098:	f7f5 fe78 	bl	8005d8c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 801009c:	4602      	mov	r2, r0
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d001      	beq.n	80100a8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 80100a4:	2301      	movs	r3, #1
 80100a6:	e000      	b.n	80100aa <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 80100a8:	2300      	movs	r3, #0
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d005      	beq.n	80100ba <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	693a      	ldr	r2, [r7, #16]
 80100b2:	6979      	ldr	r1, [r7, #20]
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7fd f9af 	bl	800d418 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	4618      	mov	r0, r3
 80100be:	f7f5 fe5a 	bl	8005d76 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80100c2:	4602      	mov	r2, r0
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	4293      	cmp	r3, r2
 80100c8:	d107      	bne.n	80100da <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7f5 fe5d 	bl	8005d8c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80100d2:	4602      	mov	r2, r0
 80100d4:	693b      	ldr	r3, [r7, #16]
 80100d6:	4293      	cmp	r3, r2
 80100d8:	d006      	beq.n	80100e8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 80100da:	4b05      	ldr	r3, [pc, #20]	; (80100f0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80100dc:	4a05      	ldr	r2, [pc, #20]	; (80100f4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80100de:	f240 21fd 	movw	r1, #765	; 0x2fd
 80100e2:	4805      	ldr	r0, [pc, #20]	; (80100f8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 80100e4:	f00d fd6e 	bl	801dbc4 <__assert_func>
}
 80100e8:	bf00      	nop
 80100ea:	3718      	adds	r7, #24
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	080220a4 	.word	0x080220a4
 80100f4:	080278b4 	.word	0x080278b4
 80100f8:	080221b8 	.word	0x080221b8

080100fc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	4618      	mov	r0, r3
 8010108:	370c      	adds	r7, #12
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr

08010112 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8010112:	b480      	push	{r7}
 8010114:	b085      	sub	sp, #20
 8010116:	af00      	add	r7, sp, #0
 8010118:	60f8      	str	r0, [r7, #12]
 801011a:	60b9      	str	r1, [r7, #8]
 801011c:	607a      	str	r2, [r7, #4]
 801011e:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	68ba      	ldr	r2, [r7, #8]
 8010124:	601a      	str	r2, [r3, #0]
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	687a      	ldr	r2, [r7, #4]
 801012a:	605a      	str	r2, [r3, #4]
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	683a      	ldr	r2, [r7, #0]
 8010130:	609a      	str	r2, [r3, #8]
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	69ba      	ldr	r2, [r7, #24]
 8010136:	60da      	str	r2, [r3, #12]
  }
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	4618      	mov	r0, r3
 801013c:	3714      	adds	r7, #20
 801013e:	46bd      	mov	sp, r7
 8010140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010144:	4770      	bx	lr

08010146 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010146:	b580      	push	{r7, lr}
 8010148:	b082      	sub	sp, #8
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f000 fc90 	bl	8010a74 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>
  }
 8010154:	bf00      	nop
 8010156:	3708      	adds	r7, #8
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}

0801015c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 801015c:	b580      	push	{r7, lr}
 801015e:	b084      	sub	sp, #16
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
  return ConstTransposeReturnType(derived());
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f7f5 fcf1 	bl	8005b4c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 801016a:	4602      	mov	r2, r0
 801016c:	f107 030c 	add.w	r3, r7, #12
 8010170:	4611      	mov	r1, r2
 8010172:	4618      	mov	r0, r3
 8010174:	f000 fca5 	bl	8010ac2 <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>
 8010178:	68fb      	ldr	r3, [r7, #12]
}
 801017a:	4618      	mov	r0, r3
 801017c:	3710      	adds	r7, #16
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}

08010182 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8010182:	b5b0      	push	{r4, r5, r7, lr}
 8010184:	b086      	sub	sp, #24
 8010186:	af00      	add	r7, sp, #0
 8010188:	60f8      	str	r0, [r7, #12]
 801018a:	60b9      	str	r1, [r7, #8]
 801018c:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 801018e:	68b8      	ldr	r0, [r7, #8]
 8010190:	f000 fca7 	bl	8010ae2 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8010194:	4604      	mov	r4, r0
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f7f5 f83f 	bl	800521a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 801019c:	4605      	mov	r5, r0
 801019e:	f107 0314 	add.w	r3, r7, #20
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7f5 f898 	bl	80052d8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 80101a8:	f107 0314 	add.w	r3, r7, #20
 80101ac:	462a      	mov	r2, r5
 80101ae:	4621      	mov	r1, r4
 80101b0:	68f8      	ldr	r0, [r7, #12]
 80101b2:	f000 fcd5 	bl	8010b60 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>
}
 80101b6:	68f8      	ldr	r0, [r7, #12]
 80101b8:	3718      	adds	r7, #24
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bdb0      	pop	{r4, r5, r7, pc}

080101be <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80101be:	b580      	push	{r7, lr}
 80101c0:	b082      	sub	sp, #8
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f000 fd18 	bl	8010bfc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 80101cc:	4603      	mov	r3, r0
 80101ce:	4618      	mov	r0, r3
 80101d0:	f000 fd1f 	bl	8010c12 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80101d4:	4603      	mov	r3, r0
 80101d6:	4618      	mov	r0, r3
 80101d8:	3708      	adds	r7, #8
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}

080101de <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 80101de:	b590      	push	{r4, r7, lr}
 80101e0:	b085      	sub	sp, #20
 80101e2:	af00      	add	r7, sp, #0
 80101e4:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f000 fd08 	bl	8010bfc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 80101ec:	4604      	mov	r4, r0
 80101ee:	f107 030c 	add.w	r3, r7, #12
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7f5 fb67 	bl	80058c6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80101f8:	f107 030c 	add.w	r3, r7, #12
 80101fc:	4619      	mov	r1, r3
 80101fe:	4620      	mov	r0, r4
 8010200:	f000 fd88 	bl	8010d14 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8010204:	eef0 7a40 	vmov.f32	s15, s0
 8010208:	bf00      	nop
}
 801020a:	eeb0 0a67 	vmov.f32	s0, s15
 801020e:	3714      	adds	r7, #20
 8010210:	46bd      	mov	sp, r7
 8010212:	bd90      	pop	{r4, r7, pc}

08010214 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8010214:	b480      	push	{r7}
 8010216:	b083      	sub	sp, #12
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
    }
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	4618      	mov	r0, r3
 8010220:	370c      	adds	r7, #12
 8010222:	46bd      	mov	sp, r7
 8010224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010228:	4770      	bx	lr

0801022a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 801022a:	b580      	push	{r7, lr}
 801022c:	b082      	sub	sp, #8
 801022e:	af00      	add	r7, sp, #0
 8010230:	6078      	str	r0, [r7, #4]
 8010232:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	4618      	mov	r0, r3
 8010238:	f7f4 fdad 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 801023c:	4603      	mov	r3, r0
 801023e:	2b01      	cmp	r3, #1
 8010240:	dd08      	ble.n	8010254 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	4618      	mov	r0, r3
 8010246:	f7f4 fd9b 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 801024a:	4603      	mov	r3, r0
 801024c:	2b01      	cmp	r3, #1
 801024e:	dd01      	ble.n	8010254 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 8010250:	2301      	movs	r3, #1
 8010252:	e000      	b.n	8010256 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2c>
 8010254:	2300      	movs	r3, #0
 8010256:	2b00      	cmp	r3, #0
 8010258:	d003      	beq.n	8010262 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 801025a:	6839      	ldr	r1, [r7, #0]
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f000 fd9f 	bl	8010da0 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>
}
 8010262:	bf00      	nop
 8010264:	3708      	adds	r7, #8
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}

0801026a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 801026a:	b580      	push	{r7, lr}
 801026c:	b082      	sub	sp, #8
 801026e:	af00      	add	r7, sp, #0
 8010270:	6078      	str	r0, [r7, #4]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	330c      	adds	r3, #12
 8010276:	4618      	mov	r0, r3
 8010278:	f7fe fe48 	bl	800ef0c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	3308      	adds	r3, #8
 8010280:	4618      	mov	r0, r3
 8010282:	f7f4 ff9a 	bl	80051ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f000 fda4 	bl	8010dd4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	4618      	mov	r0, r3
 8010290:	3708      	adds	r7, #8
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}

08010296 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8010296:	b580      	push	{r7, lr}
 8010298:	b082      	sub	sp, #8
 801029a:	af00      	add	r7, sp, #0
 801029c:	6078      	str	r0, [r7, #4]
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7ff ffe2 	bl	801026a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4618      	mov	r0, r3
 80102aa:	3708      	adds	r7, #8
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b090      	sub	sp, #64	; 0x40
 80102b4:	af02      	add	r7, sp, #8
 80102b6:	60f8      	str	r0, [r7, #12]
 80102b8:	60b9      	str	r1, [r7, #8]
 80102ba:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80102bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102c0:	68b9      	ldr	r1, [r7, #8]
 80102c2:	4618      	mov	r0, r3
 80102c4:	f000 fd77 	bl	8010db6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 80102c8:	687a      	ldr	r2, [r7, #4]
 80102ca:	68b9      	ldr	r1, [r7, #8]
 80102cc:	68f8      	ldr	r0, [r7, #12]
 80102ce:	f000 fda9 	bl	8010e24 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 80102d2:	f107 0320 	add.w	r3, r7, #32
 80102d6:	68f9      	ldr	r1, [r7, #12]
 80102d8:	4618      	mov	r0, r3
 80102da:	f7f7 f9f3 	bl	80076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80102de:	68f8      	ldr	r0, [r7, #12]
 80102e0:	f7f7 fa58 	bl	8007794 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 80102e4:	4603      	mov	r3, r0
 80102e6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80102ea:	f107 0120 	add.w	r1, r7, #32
 80102ee:	f107 0010 	add.w	r0, r7, #16
 80102f2:	9300      	str	r3, [sp, #0]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f000 fdc3 	bl	8010e80 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80102fa:	f107 0310 	add.w	r3, r7, #16
 80102fe:	4618      	mov	r0, r3
 8010300:	f000 fdd8 	bl	8010eb4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>
  DstEvaluatorType dstEvaluator(dst);
 8010304:	f107 0320 	add.w	r3, r7, #32
 8010308:	4618      	mov	r0, r3
 801030a:	f7f6 ffcc 	bl	80072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 801030e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010312:	4618      	mov	r0, r3
 8010314:	f7ff ffbf 	bl	8010296 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
}
 8010318:	bf00      	nop
 801031a:	3738      	adds	r7, #56	; 0x38
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8010320:	b580      	push	{r7, lr}
 8010322:	b082      	sub	sp, #8
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
 8010328:	6039      	str	r1, [r7, #0]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	6839      	ldr	r1, [r7, #0]
 801032e:	4618      	mov	r0, r3
 8010330:	f000 fdcb 	bl	8010eca <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	4618      	mov	r0, r3
 8010338:	3708      	adds	r7, #8
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}

0801033e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 801033e:	b480      	push	{r7}
 8010340:	b083      	sub	sp, #12
 8010342:	af00      	add	r7, sp, #0
 8010344:	6078      	str	r0, [r7, #4]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	4618      	mov	r0, r3
 801034a:	370c      	adds	r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr

08010354 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8010354:	b5b0      	push	{r4, r5, r7, lr}
 8010356:	b084      	sub	sp, #16
 8010358:	af00      	add	r7, sp, #0
 801035a:	60f8      	str	r0, [r7, #12]
 801035c:	60b9      	str	r1, [r7, #8]
 801035e:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681c      	ldr	r4, [r3, #0]
 8010364:	68f8      	ldr	r0, [r7, #12]
 8010366:	f000 fdc4 	bl	8010ef2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 801036a:	4602      	mov	r2, r0
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	fb03 f502 	mul.w	r5, r3, r2
 8010372:	68f8      	ldr	r0, [r7, #12]
 8010374:	f000 fdc8 	bl	8010f08 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 8010378:	4602      	mov	r2, r0
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	fb02 f303 	mul.w	r3, r2, r3
 8010380:	442b      	add	r3, r5
 8010382:	009b      	lsls	r3, r3, #2
 8010384:	4423      	add	r3, r4
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	ee07 3a90 	vmov	s15, r3
  }
 801038c:	eeb0 0a67 	vmov.f32	s0, s15
 8010390:	3710      	adds	r7, #16
 8010392:	46bd      	mov	sp, r7
 8010394:	bdb0      	pop	{r4, r5, r7, pc}

08010396 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8010396:	b590      	push	{r4, r7, lr}
 8010398:	b083      	sub	sp, #12
 801039a:	af00      	add	r7, sp, #0
 801039c:	6078      	str	r0, [r7, #4]
 801039e:	6039      	str	r1, [r7, #0]
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f000 fdc7 	bl	8010f34 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 80103a6:	687c      	ldr	r4, [r7, #4]
 80103a8:	6838      	ldr	r0, [r7, #0]
 80103aa:	f000 fdb8 	bl	8010f1e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>
 80103ae:	4603      	mov	r3, r0
 80103b0:	4619      	mov	r1, r3
 80103b2:	4620      	mov	r0, r4
 80103b4:	f000 fdc9 	bl	8010f4a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	4618      	mov	r0, r3
 80103bc:	370c      	adds	r7, #12
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd90      	pop	{r4, r7, pc}

080103c2 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80103c2:	b580      	push	{r7, lr}
 80103c4:	b082      	sub	sp, #8
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
 80103ca:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	6839      	ldr	r1, [r7, #0]
 80103d0:	4618      	mov	r0, r3
 80103d2:	f000 fdc9 	bl	8010f68 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	4618      	mov	r0, r3
 80103da:	f000 fdef 	bl	8010fbc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 80103de:	bf00      	nop
  }
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	4618      	mov	r0, r3
 80103e4:	3708      	adds	r7, #8
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}

080103ea <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T value() const { return m_value; }
 80103ea:	b480      	push	{r7}
 80103ec:	b083      	sub	sp, #12
 80103ee:	af00      	add	r7, sp, #0
 80103f0:	6078      	str	r0, [r7, #4]
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	4618      	mov	r0, r3
 80103f8:	370c      	adds	r7, #12
 80103fa:	46bd      	mov	sp, r7
 80103fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010400:	4770      	bx	lr

08010402 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8010402:	b5b0      	push	{r4, r5, r7, lr}
 8010404:	b086      	sub	sp, #24
 8010406:	af00      	add	r7, sp, #0
 8010408:	60f8      	str	r0, [r7, #12]
 801040a:	60b9      	str	r1, [r7, #8]
 801040c:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	4618      	mov	r0, r3
 8010412:	f000 fddf 	bl	8010fd4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 8010416:	4604      	mov	r4, r0
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	3304      	adds	r3, #4
 801041c:	687a      	ldr	r2, [r7, #4]
 801041e:	68b9      	ldr	r1, [r7, #8]
 8010420:	4618      	mov	r0, r3
 8010422:	f000 fde2 	bl	8010fea <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 8010426:	4605      	mov	r5, r0
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	3308      	adds	r3, #8
 801042c:	687a      	ldr	r2, [r7, #4]
 801042e:	68b9      	ldr	r1, [r7, #8]
 8010430:	4618      	mov	r0, r3
 8010432:	f000 fdf2 	bl	801101a <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>
 8010436:	eef0 7a40 	vmov.f32	s15, s0
 801043a:	edc7 7a05 	vstr	s15, [r7, #20]
 801043e:	f107 0314 	add.w	r3, r7, #20
 8010442:	461a      	mov	r2, r3
 8010444:	4629      	mov	r1, r5
 8010446:	4620      	mov	r0, r4
 8010448:	f7fe fe76 	bl	800f138 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 801044c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010450:	eeb0 0a67 	vmov.f32	s0, s15
 8010454:	3718      	adds	r7, #24
 8010456:	46bd      	mov	sp, r7
 8010458:	bdb0      	pop	{r4, r5, r7, pc}

0801045a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 801045a:	b480      	push	{r7}
 801045c:	b083      	sub	sp, #12
 801045e:	af00      	add	r7, sp, #0
 8010460:	6078      	str	r0, [r7, #4]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	4618      	mov	r0, r3
 8010466:	370c      	adds	r7, #12
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr

08010470 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010470:	b480      	push	{r7}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	4618      	mov	r0, r3
 801047c:	370c      	adds	r7, #12
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr

08010486 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8010486:	b580      	push	{r7, lr}
 8010488:	b082      	sub	sp, #8
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
 801048e:	6039      	str	r1, [r7, #0]
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6839      	ldr	r1, [r7, #0]
 8010494:	4618      	mov	r0, r3
 8010496:	f000 fdd4 	bl	8011042 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	4618      	mov	r0, r3
 801049e:	3708      	adds	r7, #8
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}

080104a4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 80104a4:	b590      	push	{r4, r7, lr}
 80104a6:	b083      	sub	sp, #12
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f000 fdf2 	bl	8011098 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	4618      	mov	r0, r3
 80104b8:	f000 f81e 	bl	80104f8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 80104bc:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	601a      	str	r2, [r3, #0]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	1d1c      	adds	r4, r3, #4
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	4618      	mov	r0, r3
 80104ca:	f000 fdc9 	bl	8011060 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 80104ce:	4603      	mov	r3, r0
 80104d0:	4619      	mov	r1, r3
 80104d2:	4620      	mov	r0, r4
 80104d4:	f7f6 fa04 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	1d5c      	adds	r4, r3, #5
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	4618      	mov	r0, r3
 80104e0:	f000 fdcc 	bl	801107c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 80104e4:	4603      	mov	r3, r0
 80104e6:	4619      	mov	r1, r3
 80104e8:	4620      	mov	r0, r4
 80104ea:	f7f6 f9df 	bl	80068ac <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	4618      	mov	r0, r3
 80104f2:	370c      	adds	r7, #12
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd90      	pop	{r4, r7, pc}

080104f8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80104f8:	b480      	push	{r7}
 80104fa:	b083      	sub	sp, #12
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	4618      	mov	r0, r3
 8010506:	370c      	adds	r7, #12
 8010508:	46bd      	mov	sp, r7
 801050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050e:	4770      	bx	lr

08010510 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8010510:	b580      	push	{r7, lr}
 8010512:	b082      	sub	sp, #8
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8010518:	f7f6 fa07 	bl	800692a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 801051c:	4603      	mov	r3, r0
  }
 801051e:	4618      	mov	r0, r3
 8010520:	3708      	adds	r7, #8
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}

08010526 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8010526:	b580      	push	{r7, lr}
 8010528:	b082      	sub	sp, #8
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 801052e:	f7f6 fa04 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8010532:	4603      	mov	r3, r0
  }
 8010534:	4618      	mov	r0, r3
 8010536:	3708      	adds	r7, #8
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f000 fdb2 	bl	80110ae <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	4618      	mov	r0, r3
 801054e:	3708      	adds	r7, #8
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>:
class dense_product_base
 8010554:	b580      	push	{r7, lr}
 8010556:	b082      	sub	sp, #8
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f7ff ffed 	bl	801053c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	4618      	mov	r0, r3
 8010566:	3708      	adds	r7, #8
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}

0801056c <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 801056c:	b580      	push	{r7, lr}
 801056e:	b082      	sub	sp, #8
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f7ff ffed 	bl	8010554 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	4618      	mov	r0, r3
 801057e:	3708      	adds	r7, #8
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}

08010584 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8010584:	b590      	push	{r4, r7, lr}
 8010586:	b085      	sub	sp, #20
 8010588:	af00      	add	r7, sp, #0
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	60b9      	str	r1, [r7, #8]
 801058e:	607a      	str	r2, [r7, #4]
 8010590:	68f8      	ldr	r0, [r7, #12]
 8010592:	f7ff ffeb 	bl	801056c <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	68ba      	ldr	r2, [r7, #8]
 801059a:	601a      	str	r2, [r3, #0]
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	687a      	ldr	r2, [r7, #4]
 80105a0:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7f4 fbeb 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80105aa:	4604      	mov	r4, r0
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7f4 fbf1 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80105b4:	4603      	mov	r3, r0
 80105b6:	429c      	cmp	r4, r3
 80105b8:	d005      	beq.n	80105c6 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x42>
 80105ba:	4b06      	ldr	r3, [pc, #24]	; (80105d4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x50>)
 80105bc:	4a06      	ldr	r2, [pc, #24]	; (80105d8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x54>)
 80105be:	2160      	movs	r1, #96	; 0x60
 80105c0:	4806      	ldr	r0, [pc, #24]	; (80105dc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x58>)
 80105c2:	f00d faff 	bl	801dbc4 <__assert_func>
 80105c6:	bf00      	nop
    }
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	4618      	mov	r0, r3
 80105cc:	3714      	adds	r7, #20
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd90      	pop	{r4, r7, pc}
 80105d2:	bf00      	nop
 80105d4:	0801fcec 	.word	0x0801fcec
 80105d8:	08027998 	.word	0x08027998
 80105dc:	0802003c 	.word	0x0802003c

080105e0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b084      	sub	sp, #16
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	60f8      	str	r0, [r7, #12]
 80105e8:	60b9      	str	r1, [r7, #8]
 80105ea:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80105ec:	68b9      	ldr	r1, [r7, #8]
 80105ee:	68f8      	ldr	r0, [r7, #12]
 80105f0:	f000 fd68 	bl	80110c4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80105f4:	687a      	ldr	r2, [r7, #4]
 80105f6:	68b9      	ldr	r1, [r7, #8]
 80105f8:	68f8      	ldr	r0, [r7, #12]
 80105fa:	f000 fda6 	bl	801114a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80105fe:	bf00      	nop
 8010600:	3710      	adds	r7, #16
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}

08010606 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 8010606:	b580      	push	{r7, lr}
 8010608:	b082      	sub	sp, #8
 801060a:	af00      	add	r7, sp, #0
 801060c:	6078      	str	r0, [r7, #4]
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f7f5 f8d2 	bl	80057b8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8010614:	4603      	mov	r3, r0
 8010616:	4618      	mov	r0, r3
 8010618:	f7fd fadc 	bl	800dbd4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 801061c:	4603      	mov	r3, r0
 801061e:	4618      	mov	r0, r3
 8010620:	f7f7 fcf2 	bl	8008008 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 8010624:	4603      	mov	r3, r0
 8010626:	4618      	mov	r0, r3
 8010628:	3708      	adds	r7, #8
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}

0801062e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 801062e:	b580      	push	{r7, lr}
 8010630:	b082      	sub	sp, #8
 8010632:	af00      	add	r7, sp, #0
 8010634:	6078      	str	r0, [r7, #4]
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f7f5 f8be 	bl	80057b8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 801063c:	4603      	mov	r3, r0
 801063e:	4618      	mov	r0, r3
 8010640:	f7fd fac8 	bl	800dbd4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 8010644:	4603      	mov	r3, r0
 8010646:	4618      	mov	r0, r3
 8010648:	f7fd f968 	bl	800d91c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 801064c:	4603      	mov	r3, r0
 801064e:	4618      	mov	r0, r3
 8010650:	3708      	adds	r7, #8
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}

08010656 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 8010656:	b580      	push	{r7, lr}
 8010658:	b082      	sub	sp, #8
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f7f5 f8aa 	bl	80057b8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8010664:	4603      	mov	r3, r0
 8010666:	4618      	mov	r0, r3
 8010668:	f7fd fab4 	bl	800dbd4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 801066c:	4603      	mov	r3, r0
 801066e:	4618      	mov	r0, r3
 8010670:	f7f7 ff04 	bl	800847c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8010674:	4603      	mov	r3, r0
 8010676:	4618      	mov	r0, r3
 8010678:	3708      	adds	r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
 801067e:	b580      	push	{r7, lr}
 8010680:	b082      	sub	sp, #8
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f000 fd97 	bl	80111ba <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	4618      	mov	r0, r3
 8010690:	3708      	adds	r7, #8
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
	...

08010698 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8010698:	b580      	push	{r7, lr}
 801069a:	b084      	sub	sp, #16
 801069c:	af00      	add	r7, sp, #0
 801069e:	60f8      	str	r0, [r7, #12]
 80106a0:	60b9      	str	r1, [r7, #8]
 80106a2:	607a      	str	r2, [r7, #4]
 80106a4:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 80106a6:	68f8      	ldr	r0, [r7, #12]
 80106a8:	f7ff ffe9 	bl	801067e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	68ba      	ldr	r2, [r7, #8]
 80106b0:	601a      	str	r2, [r3, #0]
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	3304      	adds	r3, #4
 80106b6:	6879      	ldr	r1, [r7, #4]
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7f6 f8f7 	bl	80068ac <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	3305      	adds	r3, #5
 80106c2:	6839      	ldr	r1, [r7, #0]
 80106c4:	4618      	mov	r0, r3
 80106c6:	f7f6 f90b 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d011      	beq.n	80106f4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	db08      	blt.n	80106e8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2b03      	cmp	r3, #3
 80106da:	d105      	bne.n	80106e8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	db02      	blt.n	80106e8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	2b01      	cmp	r3, #1
 80106e6:	d005      	beq.n	80106f4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 80106e8:	4b07      	ldr	r3, [pc, #28]	; (8010708 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 80106ea:	4a08      	ldr	r2, [pc, #32]	; (801070c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 80106ec:	21b0      	movs	r1, #176	; 0xb0
 80106ee:	4808      	ldr	r0, [pc, #32]	; (8010710 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 80106f0:	f00d fa68 	bl	801dbc4 <__assert_func>
      checkSanity<Derived>();
 80106f4:	2100      	movs	r1, #0
 80106f6:	68f8      	ldr	r0, [r7, #12]
 80106f8:	f000 fd6a 	bl	80111d0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	4618      	mov	r0, r3
 8010700:	3710      	adds	r7, #16
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	08026150 	.word	0x08026150
 801070c:	08027ac0 	.word	0x08027ac0
 8010710:	08026300 	.word	0x08026300

08010714 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>:
    void init()
 8010714:	b580      	push	{r7, lr}
 8010716:	b082      	sub	sp, #8
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 8010720:	4618      	mov	r0, r3
 8010722:	f7ff ff84 	bl	801062e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 8010726:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	615a      	str	r2, [r3, #20]
    }
 801072c:	bf00      	nop
 801072e:	3708      	adds	r7, #8
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}

08010734 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8010734:	b580      	push	{r7, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f000 fd51 	bl	80111e6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6839      	ldr	r1, [r7, #0]
 8010748:	4618      	mov	r0, r3
 801074a:	f000 fd57 	bl	80111fc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	4618      	mov	r0, r3
 8010752:	3708      	adds	r7, #8
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8010762:	2200      	movs	r2, #0
 8010764:	2100      	movs	r1, #0
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f000 fd70 	bl	801124c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 801076c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010770:	eeb0 0a67 	vmov.f32	s0, s15
 8010774:	3708      	adds	r7, #8
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}

0801077a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801077a:	b580      	push	{r7, lr}
 801077c:	b084      	sub	sp, #16
 801077e:	af00      	add	r7, sp, #0
 8010780:	6078      	str	r0, [r7, #4]
 8010782:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8010784:	6839      	ldr	r1, [r7, #0]
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f000 fd73 	bl	8011272 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 801078c:	eef0 7a40 	vmov.f32	s15, s0
 8010790:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8010794:	6839      	ldr	r1, [r7, #0]
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f000 fd7c 	bl	8011294 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 801079c:	eef0 7a40 	vmov.f32	s15, s0
 80107a0:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80107a4:	f107 020c 	add.w	r2, r7, #12
 80107a8:	f107 0308 	add.w	r3, r7, #8
 80107ac:	4619      	mov	r1, r3
 80107ae:	6838      	ldr	r0, [r7, #0]
 80107b0:	f7f8 fc81 	bl	80090b6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80107b4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80107b8:	eeb0 0a67 	vmov.f32	s0, s15
 80107bc:	3710      	adds	r7, #16
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}

080107c2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80107c2:	b580      	push	{r7, lr}
 80107c4:	b082      	sub	sp, #8
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80107ca:	2202      	movs	r2, #2
 80107cc:	2102      	movs	r1, #2
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f7fc f8c3 	bl	800c95a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f000 fd6e 	bl	80112b6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>
  }
 80107da:	bf00      	nop
 80107dc:	3708      	adds	r7, #8
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}

080107e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80107e2:	b480      	push	{r7}
 80107e4:	b083      	sub	sp, #12
 80107e6:	af00      	add	r7, sp, #0
 80107e8:	6078      	str	r0, [r7, #4]
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	4618      	mov	r0, r3
 80107f0:	370c      	adds	r7, #12
 80107f2:	46bd      	mov	sp, r7
 80107f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f8:	4770      	bx	lr

080107fa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80107fa:	b480      	push	{r7}
 80107fc:	b083      	sub	sp, #12
 80107fe:	af00      	add	r7, sp, #0
 8010800:	6078      	str	r0, [r7, #4]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	3304      	adds	r3, #4
 8010806:	4618      	mov	r0, r3
 8010808:	370c      	adds	r7, #12
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr

08010812 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010812:	b480      	push	{r7}
 8010814:	b083      	sub	sp, #12
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	4618      	mov	r0, r3
 801081e:	370c      	adds	r7, #12
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr

08010828 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8010828:	b580      	push	{r7, lr}
 801082a:	b082      	sub	sp, #8
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6839      	ldr	r1, [r7, #0]
 8010836:	4618      	mov	r0, r3
 8010838:	f000 fd47 	bl	80112ca <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	4618      	mov	r0, r3
 8010840:	3708      	adds	r7, #8
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}

08010846 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8010846:	b5b0      	push	{r4, r5, r7, lr}
 8010848:	b084      	sub	sp, #16
 801084a:	af00      	add	r7, sp, #0
 801084c:	6078      	str	r0, [r7, #4]
 801084e:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	689c      	ldr	r4, [r3, #8]
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	6839      	ldr	r1, [r7, #0]
 801085a:	4618      	mov	r0, r3
 801085c:	f7f7 fe81 	bl	8008562 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8010860:	4605      	mov	r5, r0
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	6839      	ldr	r1, [r7, #0]
 8010868:	4618      	mov	r0, r3
 801086a:	f000 fd44 	bl	80112f6 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>
 801086e:	eef0 7a40 	vmov.f32	s15, s0
 8010872:	edc7 7a03 	vstr	s15, [r7, #12]
 8010876:	f107 030c 	add.w	r3, r7, #12
 801087a:	461a      	mov	r2, r3
 801087c:	4629      	mov	r1, r5
 801087e:	4620      	mov	r0, r4
 8010880:	f7f7 fe28 	bl	80084d4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8010884:	bf00      	nop
 8010886:	3710      	adds	r7, #16
 8010888:	46bd      	mov	sp, r7
 801088a:	bdb0      	pop	{r4, r5, r7, pc}

0801088c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 801088c:	b580      	push	{r7, lr}
 801088e:	b082      	sub	sp, #8
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010894:	2101      	movs	r1, #1
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f7ff ffd5 	bl	8010846 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f000 fd63 	bl	8011368 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>
  }
 80108a2:	bf00      	nop
 80108a4:	3708      	adds	r7, #8
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}

080108aa <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80108aa:	b580      	push	{r7, lr}
 80108ac:	b082      	sub	sp, #8
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	6078      	str	r0, [r7, #4]
 80108b2:	6039      	str	r1, [r7, #0]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	6839      	ldr	r1, [r7, #0]
 80108b8:	4618      	mov	r0, r3
 80108ba:	f000 fd64 	bl	8011386 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	4618      	mov	r0, r3
 80108c2:	3708      	adds	r7, #8
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80108c8:	b480      	push	{r7}
 80108ca:	b083      	sub	sp, #12
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	4618      	mov	r0, r3
 80108d4:	370c      	adds	r7, #12
 80108d6:	46bd      	mov	sp, r7
 80108d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108dc:	4770      	bx	lr
	...

080108e0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b086      	sub	sp, #24
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	60f8      	str	r0, [r7, #12]
 80108e8:	60b9      	str	r1, [r7, #8]
 80108ea:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80108ec:	68b8      	ldr	r0, [r7, #8]
 80108ee:	f7f5 faa4 	bl	8005e3a <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80108f2:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80108f4:	68b8      	ldr	r0, [r7, #8]
 80108f6:	f7f5 faad 	bl	8005e54 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80108fa:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	4618      	mov	r0, r3
 8010900:	f7f5 fa39 	bl	8005d76 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010904:	4602      	mov	r2, r0
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	4293      	cmp	r3, r2
 801090a:	d107      	bne.n	801091c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	4618      	mov	r0, r3
 8010910:	f7f5 fa3c 	bl	8005d8c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010914:	4602      	mov	r2, r0
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	4293      	cmp	r3, r2
 801091a:	d001      	beq.n	8010920 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 801091c:	2301      	movs	r3, #1
 801091e:	e000      	b.n	8010922 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8010920:	2300      	movs	r3, #0
 8010922:	2b00      	cmp	r3, #0
 8010924:	d005      	beq.n	8010932 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	693a      	ldr	r2, [r7, #16]
 801092a:	6979      	ldr	r1, [r7, #20]
 801092c:	4618      	mov	r0, r3
 801092e:	f7fc fd73 	bl	800d418 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	4618      	mov	r0, r3
 8010936:	f7f5 fa1e 	bl	8005d76 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 801093a:	4602      	mov	r2, r0
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	4293      	cmp	r3, r2
 8010940:	d107      	bne.n	8010952 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	4618      	mov	r0, r3
 8010946:	f7f5 fa21 	bl	8005d8c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 801094a:	4602      	mov	r2, r0
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	4293      	cmp	r3, r2
 8010950:	d006      	beq.n	8010960 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8010952:	4b05      	ldr	r3, [pc, #20]	; (8010968 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8010954:	4a05      	ldr	r2, [pc, #20]	; (801096c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8010956:	f240 21fd 	movw	r1, #765	; 0x2fd
 801095a:	4805      	ldr	r0, [pc, #20]	; (8010970 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 801095c:	f00d f932 	bl	801dbc4 <__assert_func>
}
 8010960:	bf00      	nop
 8010962:	3718      	adds	r7, #24
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}
 8010968:	080220a4 	.word	0x080220a4
 801096c:	08027bd8 	.word	0x08027bd8
 8010970:	080221b8 	.word	0x080221b8

08010974 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8010974:	b480      	push	{r7}
 8010976:	b085      	sub	sp, #20
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
 8010980:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	68ba      	ldr	r2, [r7, #8]
 8010986:	601a      	str	r2, [r3, #0]
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	687a      	ldr	r2, [r7, #4]
 801098c:	605a      	str	r2, [r3, #4]
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	683a      	ldr	r2, [r7, #0]
 8010992:	609a      	str	r2, [r3, #8]
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	69ba      	ldr	r2, [r7, #24]
 8010998:	60da      	str	r2, [r3, #12]
  }
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	4618      	mov	r0, r3
 801099e:	3714      	adds	r7, #20
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr

080109a8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f000 fcfa 	bl	80113aa <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>
  }
 80109b6:	bf00      	nop
 80109b8:	3708      	adds	r7, #8
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}

080109be <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 80109be:	b480      	push	{r7}
 80109c0:	b083      	sub	sp, #12
 80109c2:	af00      	add	r7, sp, #0
 80109c4:	6078      	str	r0, [r7, #4]
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	4618      	mov	r0, r3
 80109ca:	370c      	adds	r7, #12
 80109cc:	46bd      	mov	sp, r7
 80109ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d2:	4770      	bx	lr

080109d4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80109d4:	b480      	push	{r7}
 80109d6:	b083      	sub	sp, #12
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	4618      	mov	r0, r3
 80109e0:	370c      	adds	r7, #12
 80109e2:	46bd      	mov	sp, r7
 80109e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e8:	4770      	bx	lr

080109ea <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80109ea:	b580      	push	{r7, lr}
 80109ec:	b082      	sub	sp, #8
 80109ee:	af00      	add	r7, sp, #0
 80109f0:	6078      	str	r0, [r7, #4]
 80109f2:	6039      	str	r1, [r7, #0]
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6839      	ldr	r1, [r7, #0]
 80109f8:	4618      	mov	r0, r3
 80109fa:	f000 fce5 	bl	80113c8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	4618      	mov	r0, r3
 8010a02:	3708      	adds	r7, #8
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8010a08:	b590      	push	{r4, r7, lr}
 8010a0a:	b083      	sub	sp, #12
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f000 fd03 	bl	801141e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f000 f81e 	bl	8010a5c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 8010a20:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	601a      	str	r2, [r3, #0]
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	1d1c      	adds	r4, r3, #4
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f000 fcda 	bl	80113e6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>
 8010a32:	4603      	mov	r3, r0
 8010a34:	4619      	mov	r1, r3
 8010a36:	4620      	mov	r0, r4
 8010a38:	f7f5 ff52 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	1d5c      	adds	r4, r3, #5
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	4618      	mov	r0, r3
 8010a44:	f000 fcdd 	bl	8011402 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	4620      	mov	r0, r4
 8010a4e:	f7f5 ff47 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	4618      	mov	r0, r3
 8010a56:	370c      	adds	r7, #12
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd90      	pop	{r4, r7, pc}

08010a5c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8010a5c:	b480      	push	{r7}
 8010a5e:	b083      	sub	sp, #12
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	4618      	mov	r0, r3
 8010a6a:	370c      	adds	r7, #12
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a72:	4770      	bx	lr

08010a74 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b082      	sub	sp, #8
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010a7c:	2100      	movs	r1, #0
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f000 fcd8 	bl	8011434 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f000 fcf3 	bl	8011470 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>
  }
 8010a8a:	bf00      	nop
 8010a8c:	3708      	adds	r7, #8
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 8010a92:	b580      	push	{r7, lr}
 8010a94:	b082      	sub	sp, #8
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f000 fcf2 	bl	8011484 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3708      	adds	r7, #8
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}

08010aaa <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8010aaa:	b580      	push	{r7, lr}
 8010aac:	b082      	sub	sp, #8
 8010aae:	af00      	add	r7, sp, #0
 8010ab0:	6078      	str	r0, [r7, #4]
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f7ff ffed 	bl	8010a92 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	4618      	mov	r0, r3
 8010abc:	3708      	adds	r7, #8
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}

08010ac2 <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8010ac2:	b580      	push	{r7, lr}
 8010ac4:	b082      	sub	sp, #8
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	6078      	str	r0, [r7, #4]
 8010aca:	6039      	str	r1, [r7, #0]
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f7ff ffec 	bl	8010aaa <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	683a      	ldr	r2, [r7, #0]
 8010ad6:	601a      	str	r2, [r3, #0]
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	4618      	mov	r0, r3
 8010adc:	3708      	adds	r7, #8
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}

08010ae2 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8010ae2:	b480      	push	{r7}
 8010ae4:	b083      	sub	sp, #12
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	6078      	str	r0, [r7, #4]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	4618      	mov	r0, r3
 8010aee:	370c      	adds	r7, #12
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr

08010af8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f000 fcca 	bl	801149a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3708      	adds	r7, #8
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b082      	sub	sp, #8
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f7ff ffed 	bl	8010af8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	4618      	mov	r0, r3
 8010b22:	3708      	adds	r7, #8
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}

08010b28 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b082      	sub	sp, #8
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7f4 fae5 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3708      	adds	r7, #8
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b082      	sub	sp, #8
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7f4 fae2 	bl	800511a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010b56:	4603      	mov	r3, r0
 8010b58:	4618      	mov	r0, r3
 8010b5a:	3708      	adds	r7, #8
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bd80      	pop	{r7, pc}

08010b60 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8010b60:	b590      	push	{r4, r7, lr}
 8010b62:	b085      	sub	sp, #20
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	60f8      	str	r0, [r7, #12]
 8010b68:	60b9      	str	r1, [r7, #8]
 8010b6a:	607a      	str	r2, [r7, #4]
 8010b6c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8010b6e:	68f8      	ldr	r0, [r7, #12]
 8010b70:	f7ff ffce 	bl	8010b10 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	68ba      	ldr	r2, [r7, #8]
 8010b78:	6812      	ldr	r2, [r2, #0]
 8010b7a:	601a      	str	r2, [r3, #0]
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	687a      	ldr	r2, [r7, #4]
 8010b80:	605a      	str	r2, [r3, #4]
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	3308      	adds	r3, #8
 8010b86:	6839      	ldr	r1, [r7, #0]
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f7f4 fc2f 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8010b8e:	68b8      	ldr	r0, [r7, #8]
 8010b90:	f7ff ffca 	bl	8010b28 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010b94:	4604      	mov	r4, r0
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7f4 f9a2 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	429c      	cmp	r4, r3
 8010ba2:	d10a      	bne.n	8010bba <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x5a>
 8010ba4:	68b8      	ldr	r0, [r7, #8]
 8010ba6:	f7ff ffcd 	bl	8010b44 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010baa:	4604      	mov	r4, r0
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7f4 f98c 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	429c      	cmp	r4, r3
 8010bb8:	d005      	beq.n	8010bc6 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x66>
 8010bba:	4b05      	ldr	r3, [pc, #20]	; (8010bd0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x70>)
 8010bbc:	4a05      	ldr	r2, [pc, #20]	; (8010bd4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x74>)
 8010bbe:	2174      	movs	r1, #116	; 0x74
 8010bc0:	4805      	ldr	r0, [pc, #20]	; (8010bd8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x78>)
 8010bc2:	f00c ffff 	bl	801dbc4 <__assert_func>
    }
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	4618      	mov	r0, r3
 8010bca:	3714      	adds	r7, #20
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd90      	pop	{r4, r7, pc}
 8010bd0:	0801fa2c 	.word	0x0801fa2c
 8010bd4:	08027d9c 	.word	0x08027d9c
 8010bd8:	0801fc90 	.word	0x0801fc90

08010bdc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f000 f809 	bl	8010bfc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010bea:	4603      	mov	r3, r0
 8010bec:	4618      	mov	r0, r3
 8010bee:	f000 fc5f 	bl	80114b0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3708      	adds	r7, #8
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8010bfc:	b480      	push	{r7}
 8010bfe:	b083      	sub	sp, #12
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	4618      	mov	r0, r3
 8010c08:	370c      	adds	r7, #12
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c10:	4770      	bx	lr

08010c12 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b082      	sub	sp, #8
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7ff ff83 	bl	8010b28 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010c22:	4603      	mov	r3, r0
    }
 8010c24:	4618      	mov	r0, r3
 8010c26:	3708      	adds	r7, #8
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}

08010c2c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<const T>
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b082      	sub	sp, #8
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7fe f968 	bl	800ef0c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3708      	adds	r7, #8
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8010c46:	b580      	push	{r7, lr}
 8010c48:	b082      	sub	sp, #8
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7ff ffeb 	bl	8010c2c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f000 fc51 	bl	80114fe <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3708      	adds	r7, #8
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}

08010c66 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8010c66:	b580      	push	{r7, lr}
 8010c68:	b082      	sub	sp, #8
 8010c6a:	af00      	add	r7, sp, #0
 8010c6c:	6078      	str	r0, [r7, #4]
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	4618      	mov	r0, r3
 8010c72:	f7ff ffe8 	bl	8010c46 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3708      	adds	r7, #8
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}

08010c80 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<const T>
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7ff ffeb 	bl	8010c66 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	4618      	mov	r0, r3
 8010c94:	3708      	adds	r7, #8
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}

08010c9a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 8010c9a:	b580      	push	{r7, lr}
 8010c9c:	b082      	sub	sp, #8
 8010c9e:	af00      	add	r7, sp, #0
 8010ca0:	6078      	str	r0, [r7, #4]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	3308      	adds	r3, #8
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f7f8 f824 	bl	8008cf4 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	3304      	adds	r3, #4
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f7ff ffe5 	bl	8010c80 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3708      	adds	r7, #8
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}

08010cc0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b082      	sub	sp, #8
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7ff ffe5 	bl	8010c9a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	f000 fc09 	bl	80114e8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3708      	adds	r7, #8
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7ff ffe8 	bl	8010cc0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3708      	adds	r7, #8
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}

08010cfa <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b082      	sub	sp, #8
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	6078      	str	r0, [r7, #4]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7ff ffeb 	bl	8010ce0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	3708      	adds	r7, #8
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd80      	pop	{r7, pc}

08010d14 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8010d14:	b580      	push	{r7, lr}
 8010d16:	ed2d 8b02 	vpush	{d8}
 8010d1a:	b086      	sub	sp, #24
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
 8010d20:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f7ff fa4b 	bl	80101be <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	dd05      	ble.n	8010d3a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f7ff ff54 	bl	8010bdc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	dc06      	bgt.n	8010d48 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8010d3a:	4b16      	ldr	r3, [pc, #88]	; (8010d94 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8010d3c:	4a16      	ldr	r2, [pc, #88]	; (8010d98 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8010d3e:	f240 119b 	movw	r1, #411	; 0x19b
 8010d42:	4816      	ldr	r0, [pc, #88]	; (8010d9c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8010d44:	f00c ff3e 	bl	801dbc4 <__assert_func>
 8010d48:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f7ff ff56 	bl	8010bfc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010d50:	4602      	mov	r2, r0
 8010d52:	f107 030c 	add.w	r3, r7, #12
 8010d56:	4611      	mov	r1, r2
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f000 fbb6 	bl	80114ca <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f7ff ff4c 	bl	8010bfc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010d64:	4602      	mov	r2, r0
 8010d66:	f107 030c 	add.w	r3, r7, #12
 8010d6a:	6839      	ldr	r1, [r7, #0]
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f000 fbd1 	bl	8011514 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>
 8010d72:	eeb0 8a40 	vmov.f32	s16, s0
 8010d76:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8010d78:	f107 030c 	add.w	r3, r7, #12
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7ff ffbc 	bl	8010cfa <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8010d82:	eef0 7a48 	vmov.f32	s15, s16
}
 8010d86:	eeb0 0a67 	vmov.f32	s0, s15
 8010d8a:	3718      	adds	r7, #24
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	ecbd 8b02 	vpop	{d8}
 8010d92:	bd80      	pop	{r7, pc}
 8010d94:	08024aac 	.word	0x08024aac
 8010d98:	08027f64 	.word	0x08027f64
 8010d9c:	08024cb8 	.word	0x08024cb8

08010da0 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>:
    static void run(const Derived&, const OtherDerived&)
 8010da0:	b480      	push	{r7}
 8010da2:	b083      	sub	sp, #12
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	6039      	str	r1, [r7, #0]
    }
 8010daa:	bf00      	nop
 8010dac:	370c      	adds	r7, #12
 8010dae:	46bd      	mov	sp, r7
 8010db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db4:	4770      	bx	lr

08010db6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8010db6:	b580      	push	{r7, lr}
 8010db8:	b082      	sub	sp, #8
 8010dba:	af00      	add	r7, sp, #0
 8010dbc:	6078      	str	r0, [r7, #4]
 8010dbe:	6039      	str	r1, [r7, #0]
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6839      	ldr	r1, [r7, #0]
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f000 fbb6 	bl	8011536 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3708      	adds	r7, #8
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}

08010dd4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8010dd4:	b480      	push	{r7}
 8010dd6:	b083      	sub	sp, #12
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	4618      	mov	r0, r3
 8010de0:	370c      	adds	r7, #12
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr

08010dea <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8010dea:	b580      	push	{r7, lr}
 8010dec:	b082      	sub	sp, #8
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	4618      	mov	r0, r3
 8010df8:	f7f4 f873 	bl	8004ee2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	4618      	mov	r0, r3
 8010e00:	3708      	adds	r7, #8
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}

08010e06 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8010e06:	b580      	push	{r7, lr}
 8010e08:	b082      	sub	sp, #8
 8010e0a:	af00      	add	r7, sp, #0
 8010e0c:	6078      	str	r0, [r7, #4]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	4618      	mov	r0, r3
 8010e14:	f7f4 f976 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3708      	adds	r7, #8
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
	...

08010e24 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 8010e24:	b590      	push	{r4, r7, lr}
 8010e26:	b085      	sub	sp, #20
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	60f8      	str	r0, [r7, #12]
 8010e2c:	60b9      	str	r1, [r7, #8]
 8010e2e:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7f3 ffaf 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010e38:	4604      	mov	r4, r0
 8010e3a:	68b8      	ldr	r0, [r7, #8]
 8010e3c:	f7ff ffd5 	bl	8010dea <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>
 8010e40:	4603      	mov	r3, r0
 8010e42:	429c      	cmp	r4, r3
 8010e44:	d10a      	bne.n	8010e5c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f7f3 ff99 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010e4e:	4604      	mov	r4, r0
 8010e50:	68b8      	ldr	r0, [r7, #8]
 8010e52:	f7ff ffd8 	bl	8010e06 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>
 8010e56:	4603      	mov	r3, r0
 8010e58:	429c      	cmp	r4, r3
 8010e5a:	d006      	beq.n	8010e6a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 8010e5c:	4b05      	ldr	r3, [pc, #20]	; (8010e74 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 8010e5e:	4a06      	ldr	r2, [pc, #24]	; (8010e78 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 8010e60:	f240 21f2 	movw	r1, #754	; 0x2f2
 8010e64:	4805      	ldr	r0, [pc, #20]	; (8010e7c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 8010e66:	f00c fead 	bl	801dbc4 <__assert_func>
}
 8010e6a:	bf00      	nop
 8010e6c:	3714      	adds	r7, #20
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd90      	pop	{r4, r7, pc}
 8010e72:	bf00      	nop
 8010e74:	080227c0 	.word	0x080227c0
 8010e78:	080280e8 	.word	0x080280e8
 8010e7c:	080221b8 	.word	0x080221b8

08010e80 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8010e80:	b480      	push	{r7}
 8010e82:	b085      	sub	sp, #20
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	60f8      	str	r0, [r7, #12]
 8010e88:	60b9      	str	r1, [r7, #8]
 8010e8a:	607a      	str	r2, [r7, #4]
 8010e8c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	68ba      	ldr	r2, [r7, #8]
 8010e92:	601a      	str	r2, [r3, #0]
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	687a      	ldr	r2, [r7, #4]
 8010e98:	605a      	str	r2, [r3, #4]
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	683a      	ldr	r2, [r7, #0]
 8010e9e:	609a      	str	r2, [r3, #8]
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	69ba      	ldr	r2, [r7, #24]
 8010ea4:	60da      	str	r2, [r3, #12]
  }
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3714      	adds	r7, #20
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr

08010eb4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f000 fb6f 	bl	80115a0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>
  }
 8010ec2:	bf00      	nop
 8010ec4:	3708      	adds	r7, #8
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8010eca:	b580      	push	{r7, lr}
 8010ecc:	b082      	sub	sp, #8
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	6078      	str	r0, [r7, #4]
 8010ed2:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6839      	ldr	r1, [r7, #0]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f000 fb71 	bl	80115c0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f000 fb97 	bl	8011614 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 8010ee6:	bf00      	nop
  }
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	4618      	mov	r0, r3
 8010eec:	3708      	adds	r7, #8
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}

08010ef2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8010ef2:	b580      	push	{r7, lr}
 8010ef4:	b082      	sub	sp, #8
 8010ef6:	af00      	add	r7, sp, #0
 8010ef8:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8010efa:	f7f5 fd16 	bl	800692a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8010efe:	4603      	mov	r3, r0
  }
 8010f00:	4618      	mov	r0, r3
 8010f02:	3708      	adds	r7, #8
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b082      	sub	sp, #8
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8010f10:	f7f5 fd13 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8010f14:	4603      	mov	r3, r0
  }
 8010f16:	4618      	mov	r0, r3
 8010f18:	3708      	adds	r7, #8
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}

08010f1e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8010f1e:	b480      	push	{r7}
 8010f20:	b083      	sub	sp, #12
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	6078      	str	r0, [r7, #4]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	4618      	mov	r0, r3
 8010f2a:	370c      	adds	r7, #12
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f32:	4770      	bx	lr

08010f34 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010f34:	b480      	push	{r7}
 8010f36:	b083      	sub	sp, #12
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	4618      	mov	r0, r3
 8010f40:	370c      	adds	r7, #12
 8010f42:	46bd      	mov	sp, r7
 8010f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f48:	4770      	bx	lr

08010f4a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8010f4a:	b580      	push	{r7, lr}
 8010f4c:	b082      	sub	sp, #8
 8010f4e:	af00      	add	r7, sp, #0
 8010f50:	6078      	str	r0, [r7, #4]
 8010f52:	6039      	str	r1, [r7, #0]
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6839      	ldr	r1, [r7, #0]
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f000 fb67 	bl	801162c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	4618      	mov	r0, r3
 8010f62:	3708      	adds	r7, #8
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8010f68:	b590      	push	{r4, r7, lr}
 8010f6a:	b083      	sub	sp, #12
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f000 fb85 	bl	8011682 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f000 f81e 	bl	8010fbc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 8010f80:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	601a      	str	r2, [r3, #0]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	1d1c      	adds	r4, r3, #4
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f000 fb5c 	bl	801164a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8010f92:	4603      	mov	r3, r0
 8010f94:	4619      	mov	r1, r3
 8010f96:	4620      	mov	r0, r4
 8010f98:	f7f5 fca2 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	1d5c      	adds	r4, r3, #5
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f000 fb5f 	bl	8011666 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	4619      	mov	r1, r3
 8010fac:	4620      	mov	r0, r4
 8010fae:	f7f5 fc7d 	bl	80068ac <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	370c      	adds	r7, #12
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd90      	pop	{r4, r7, pc}

08010fbc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>:
 8010fbc:	b480      	push	{r7}
 8010fbe:	b083      	sub	sp, #12
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	4618      	mov	r0, r3
 8010fca:	370c      	adds	r7, #12
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd2:	4770      	bx	lr

08010fd4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	4618      	mov	r0, r3
 8010fe0:	370c      	adds	r7, #12
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe8:	4770      	bx	lr

08010fea <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8010fea:	b590      	push	{r4, r7, lr}
 8010fec:	b085      	sub	sp, #20
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	60f8      	str	r0, [r7, #12]
 8010ff2:	60b9      	str	r1, [r7, #8]
 8010ff4:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	681c      	ldr	r4, [r3, #0]
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7f5 feef 	bl	8006de0 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8011002:	4602      	mov	r2, r0
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	fb03 f202 	mul.w	r2, r3, r2
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	4413      	add	r3, r2
 801100e:	009b      	lsls	r3, r3, #2
 8011010:	4423      	add	r3, r4
  }
 8011012:	4618      	mov	r0, r3
 8011014:	3714      	adds	r7, #20
 8011016:	46bd      	mov	sp, r7
 8011018:	bd90      	pop	{r4, r7, pc}

0801101a <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>:
  CoeffReturnType coeff(IndexType row, IndexType col) const
 801101a:	b580      	push	{r7, lr}
 801101c:	b084      	sub	sp, #16
 801101e:	af00      	add	r7, sp, #0
 8011020:	60f8      	str	r0, [r7, #12]
 8011022:	60b9      	str	r1, [r7, #8]
 8011024:	607a      	str	r2, [r7, #4]
    return m_wrapper(m_functor, row, col);
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	1d18      	adds	r0, r3, #4
 801102a:	68f9      	ldr	r1, [r7, #12]
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	68ba      	ldr	r2, [r7, #8]
 8011030:	f000 fb32 	bl	8011698 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>
 8011034:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011038:	eeb0 0a67 	vmov.f32	s0, s15
 801103c:	3710      	adds	r7, #16
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}

08011042 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8011042:	b580      	push	{r7, lr}
 8011044:	b082      	sub	sp, #8
 8011046:	af00      	add	r7, sp, #0
 8011048:	6078      	str	r0, [r7, #4]
 801104a:	6039      	str	r1, [r7, #0]
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6839      	ldr	r1, [r7, #0]
 8011050:	4618      	mov	r0, r3
 8011052:	f000 fb32 	bl	80116ba <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>
  }
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	4618      	mov	r0, r3
 801105a:	3708      	adds	r7, #8
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	689b      	ldr	r3, [r3, #8]
 801106c:	4618      	mov	r0, r3
 801106e:	f7fc fcca 	bl	800da06 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 8011072:	4603      	mov	r3, r0
    }
 8011074:	4618      	mov	r0, r3
 8011076:	3708      	adds	r7, #8
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}

0801107c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801107c:	b580      	push	{r7, lr}
 801107e:	b082      	sub	sp, #8
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	689b      	ldr	r3, [r3, #8]
 8011088:	4618      	mov	r0, r3
 801108a:	f7f6 f82d 	bl	80070e8 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 801108e:	4603      	mov	r3, r0
    }
 8011090:	4618      	mov	r0, r3
 8011092:	3708      	adds	r7, #8
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}

08011098 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011098:	b480      	push	{r7}
 801109a:	b083      	sub	sp, #12
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	4618      	mov	r0, r3
 80110a4:	370c      	adds	r7, #12
 80110a6:	46bd      	mov	sp, r7
 80110a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ac:	4770      	bx	lr

080110ae <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80110ae:	b480      	push	{r7}
 80110b0:	b083      	sub	sp, #12
 80110b2:	af00      	add	r7, sp, #0
 80110b4:	6078      	str	r0, [r7, #4]
    }
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	4618      	mov	r0, r3
 80110ba:	370c      	adds	r7, #12
 80110bc:	46bd      	mov	sp, r7
 80110be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c2:	4770      	bx	lr

080110c4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b082      	sub	sp, #8
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7f3 fe60 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80110d6:	4603      	mov	r3, r0
 80110d8:	2b01      	cmp	r3, #1
 80110da:	dd08      	ble.n	80110ee <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	4618      	mov	r0, r3
 80110e0:	f7f3 fe4e 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80110e4:	4603      	mov	r3, r0
 80110e6:	2b01      	cmp	r3, #1
 80110e8:	dd01      	ble.n	80110ee <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 80110ea:	2301      	movs	r3, #1
 80110ec:	e000      	b.n	80110f0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2c>
 80110ee:	2300      	movs	r3, #0
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d003      	beq.n	80110fc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80110f4:	6839      	ldr	r1, [r7, #0]
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f000 faf3 	bl	80116e2 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>
}
 80110fc:	bf00      	nop
 80110fe:	3708      	adds	r7, #8
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}

08011104 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8011104:	b580      	push	{r7, lr}
 8011106:	b082      	sub	sp, #8
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	330c      	adds	r3, #12
 8011110:	4618      	mov	r0, r3
 8011112:	f7f6 f8c8 	bl	80072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	3308      	adds	r3, #8
 801111a:	4618      	mov	r0, r3
 801111c:	f7f6 f8c3 	bl	80072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8011120:	6878      	ldr	r0, [r7, #4]
 8011122:	f000 faf8 	bl	8011716 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	4618      	mov	r0, r3
 801112a:	3708      	adds	r7, #8
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8011130:	b580      	push	{r7, lr}
 8011132:	b082      	sub	sp, #8
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	4618      	mov	r0, r3
 801113c:	f7ff ffe2 	bl	8011104 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	4618      	mov	r0, r3
 8011144:	3708      	adds	r7, #8
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}

0801114a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 801114a:	b580      	push	{r7, lr}
 801114c:	b090      	sub	sp, #64	; 0x40
 801114e:	af02      	add	r7, sp, #8
 8011150:	60f8      	str	r0, [r7, #12]
 8011152:	60b9      	str	r1, [r7, #8]
 8011154:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8011156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801115a:	68b9      	ldr	r1, [r7, #8]
 801115c:	4618      	mov	r0, r3
 801115e:	f000 facb 	bl	80116f8 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>
  resize_if_allowed(dst, src, func);
 8011162:	687a      	ldr	r2, [r7, #4]
 8011164:	68b9      	ldr	r1, [r7, #8]
 8011166:	68f8      	ldr	r0, [r7, #12]
 8011168:	f000 fafc 	bl	8011764 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 801116c:	f107 0320 	add.w	r3, r7, #32
 8011170:	68f9      	ldr	r1, [r7, #12]
 8011172:	4618      	mov	r0, r3
 8011174:	f7f6 faa6 	bl	80076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8011178:	68f8      	ldr	r0, [r7, #12]
 801117a:	f7f6 fb0b 	bl	8007794 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 801117e:	4603      	mov	r3, r0
 8011180:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011184:	f107 0120 	add.w	r1, r7, #32
 8011188:	f107 0010 	add.w	r0, r7, #16
 801118c:	9300      	str	r3, [sp, #0]
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f000 fb32 	bl	80117f8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8011194:	f107 0310 	add.w	r3, r7, #16
 8011198:	4618      	mov	r0, r3
 801119a:	f000 fb47 	bl	801182c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>
  DstEvaluatorType dstEvaluator(dst);
 801119e:	f107 0320 	add.w	r3, r7, #32
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7f6 f87f 	bl	80072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80111a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80111ac:	4618      	mov	r0, r3
 80111ae:	f7ff ffbf 	bl	8011130 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
}
 80111b2:	bf00      	nop
 80111b4:	3738      	adds	r7, #56	; 0x38
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}

080111ba <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80111ba:	b480      	push	{r7}
 80111bc:	b083      	sub	sp, #12
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6078      	str	r0, [r7, #4]
    }
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	4618      	mov	r0, r3
 80111c6:	370c      	adds	r7, #12
 80111c8:	46bd      	mov	sp, r7
 80111ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ce:	4770      	bx	lr

080111d0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 80111d0:	b480      	push	{r7}
 80111d2:	b083      	sub	sp, #12
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	6039      	str	r1, [r7, #0]
    {}
 80111da:	bf00      	nop
 80111dc:	370c      	adds	r7, #12
 80111de:	46bd      	mov	sp, r7
 80111e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e4:	4770      	bx	lr

080111e6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 80111e6:	b480      	push	{r7}
 80111e8:	b083      	sub	sp, #12
 80111ea:	af00      	add	r7, sp, #0
 80111ec:	6078      	str	r0, [r7, #4]
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	4618      	mov	r0, r3
 80111f2:	370c      	adds	r7, #12
 80111f4:	46bd      	mov	sp, r7
 80111f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fa:	4770      	bx	lr

080111fc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80111fc:	b590      	push	{r4, r7, lr}
 80111fe:	b083      	sub	sp, #12
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	6039      	str	r1, [r7, #0]
 8011206:	687c      	ldr	r4, [r7, #4]
 8011208:	6838      	ldr	r0, [r7, #0]
 801120a:	f000 fb1a 	bl	8011842 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>
 801120e:	4603      	mov	r3, r0
 8011210:	4619      	mov	r1, r3
 8011212:	4620      	mov	r0, r4
 8011214:	f7f4 f8ea 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	1d1c      	adds	r4, r3, #4
 801121c:	6838      	ldr	r0, [r7, #0]
 801121e:	f000 fb1c 	bl	801185a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>
 8011222:	4603      	mov	r3, r0
 8011224:	4619      	mov	r1, r3
 8011226:	4620      	mov	r0, r4
 8011228:	f7fd fc27 	bl	800ea7a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f103 040c 	add.w	r4, r3, #12
 8011232:	6838      	ldr	r0, [r7, #0]
 8011234:	f000 fb1c 	bl	8011870 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>
 8011238:	4603      	mov	r3, r0
 801123a:	4619      	mov	r1, r3
 801123c:	4620      	mov	r0, r4
 801123e:	f000 fb23 	bl	8011888 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	4618      	mov	r0, r3
 8011246:	370c      	adds	r7, #12
 8011248:	46bd      	mov	sp, r7
 801124a:	bd90      	pop	{r4, r7, pc}

0801124c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 801124c:	b580      	push	{r7, lr}
 801124e:	b084      	sub	sp, #16
 8011250:	af00      	add	r7, sp, #0
 8011252:	60f8      	str	r0, [r7, #12]
 8011254:	60b9      	str	r1, [r7, #8]
 8011256:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	68ba      	ldr	r2, [r7, #8]
 801125c:	6879      	ldr	r1, [r7, #4]
 801125e:	4618      	mov	r0, r3
 8011260:	f000 fb21 	bl	80118a6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8011264:	eef0 7a40 	vmov.f32	s15, s0
 8011268:	eeb0 0a67 	vmov.f32	s0, s15
 801126c:	3710      	adds	r7, #16
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}

08011272 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8011272:	b580      	push	{r7, lr}
 8011274:	b082      	sub	sp, #8
 8011276:	af00      	add	r7, sp, #0
 8011278:	6078      	str	r0, [r7, #4]
 801127a:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801127c:	2201      	movs	r2, #1
 801127e:	2100      	movs	r1, #0
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f7ff ffe3 	bl	801124c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8011286:	eef0 7a40 	vmov.f32	s15, s0
  }
 801128a:	eeb0 0a67 	vmov.f32	s0, s15
 801128e:	3708      	adds	r7, #8
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}

08011294 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8011294:	b580      	push	{r7, lr}
 8011296:	b082      	sub	sp, #8
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801129e:	2202      	movs	r2, #2
 80112a0:	2100      	movs	r1, #0
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f7ff ffd2 	bl	801124c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 80112a8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80112ac:	eeb0 0a67 	vmov.f32	s0, s15
 80112b0:	3708      	adds	r7, #8
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}

080112b6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80112b6:	b480      	push	{r7}
 80112b8:	b083      	sub	sp, #12
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	6078      	str	r0, [r7, #4]
 80112be:	bf00      	nop
 80112c0:	370c      	adds	r7, #12
 80112c2:	46bd      	mov	sp, r7
 80112c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c8:	4770      	bx	lr

080112ca <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80112ca:	b590      	push	{r4, r7, lr}
 80112cc:	b083      	sub	sp, #12
 80112ce:	af00      	add	r7, sp, #0
 80112d0:	6078      	str	r0, [r7, #4]
 80112d2:	6039      	str	r1, [r7, #0]
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f000 fb22 	bl	801191e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80112da:	687c      	ldr	r4, [r7, #4]
 80112dc:	6838      	ldr	r0, [r7, #0]
 80112de:	f000 fb12 	bl	8011906 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 80112e2:	4603      	mov	r3, r0
 80112e4:	4619      	mov	r1, r3
 80112e6:	4620      	mov	r0, r4
 80112e8:	f000 fb24 	bl	8011934 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	4618      	mov	r0, r3
 80112f0:	370c      	adds	r7, #12
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd90      	pop	{r4, r7, pc}

080112f6 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 80112f6:	b580      	push	{r7, lr}
 80112f8:	b0a4      	sub	sp, #144	; 0x90
 80112fa:	af00      	add	r7, sp, #0
 80112fc:	6078      	str	r0, [r7, #4]
 80112fe:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 8011306:	2300      	movs	r3, #0
 8011308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6819      	ldr	r1, [r3, #0]
 8011310:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011314:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011318:	4618      	mov	r0, r3
 801131a:	f7f9 fcdb 	bl	800acd4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 801131e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011322:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011326:	4611      	mov	r1, r2
 8011328:	4618      	mov	r0, r3
 801132a:	f7f9 fce6 	bl	800acfa <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	1d19      	adds	r1, r3, #4
 8011332:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8011336:	2200      	movs	r2, #0
 8011338:	4618      	mov	r0, r3
 801133a:	f000 fb0b 	bl	8011954 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>
 801133e:	f107 030c 	add.w	r3, r7, #12
 8011342:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8011346:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801134a:	4618      	mov	r0, r3
 801134c:	f000 fb15 	bl	801197a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>
 8011350:	f107 030c 	add.w	r3, r7, #12
 8011354:	4618      	mov	r0, r3
 8011356:	f000 fb3e 	bl	80119d6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>
 801135a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801135e:	eeb0 0a67 	vmov.f32	s0, s15
 8011362:	3790      	adds	r7, #144	; 0x90
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}

08011368 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8011368:	b580      	push	{r7, lr}
 801136a:	b082      	sub	sp, #8
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8011370:	2102      	movs	r1, #2
 8011372:	6878      	ldr	r0, [r7, #4]
 8011374:	f7ff fa67 	bl	8010846 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f000 fb47 	bl	8011a0c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>
  }
 801137e:	bf00      	nop
 8011380:	3708      	adds	r7, #8
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}

08011386 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8011386:	b580      	push	{r7, lr}
 8011388:	b082      	sub	sp, #8
 801138a:	af00      	add	r7, sp, #0
 801138c:	6078      	str	r0, [r7, #4]
 801138e:	6039      	str	r1, [r7, #0]
 8011390:	6878      	ldr	r0, [r7, #4]
 8011392:	f000 fb45 	bl	8011a20 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	6839      	ldr	r1, [r7, #0]
 801139a:	4618      	mov	r0, r3
 801139c:	f000 fb4b 	bl	8011a36 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	4618      	mov	r0, r3
 80113a4:	3708      	adds	r7, #8
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}

080113aa <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80113aa:	b580      	push	{r7, lr}
 80113ac:	b082      	sub	sp, #8
 80113ae:	af00      	add	r7, sp, #0
 80113b0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80113b2:	2100      	movs	r1, #0
 80113b4:	6878      	ldr	r0, [r7, #4]
 80113b6:	f000 fb66 	bl	8011a86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f000 fb86 	bl	8011acc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>
  }
 80113c0:	bf00      	nop
 80113c2:	3708      	adds	r7, #8
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}

080113c8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	6039      	str	r1, [r7, #0]
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6839      	ldr	r1, [r7, #0]
 80113d6:	4618      	mov	r0, r3
 80113d8:	f000 fb82 	bl	8011ae0 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	4618      	mov	r0, r3
 80113e0:	3708      	adds	r7, #8
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}

080113e6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80113e6:	b580      	push	{r7, lr}
 80113e8:	b082      	sub	sp, #8
 80113ea:	af00      	add	r7, sp, #0
 80113ec:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	689b      	ldr	r3, [r3, #8]
 80113f2:	4618      	mov	r0, r3
 80113f4:	f7fc fd14 	bl	800de20 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 80113f8:	4603      	mov	r3, r0
    }
 80113fa:	4618      	mov	r0, r3
 80113fc:	3708      	adds	r7, #8
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}

08011402 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011402:	b580      	push	{r7, lr}
 8011404:	b082      	sub	sp, #8
 8011406:	af00      	add	r7, sp, #0
 8011408:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	689b      	ldr	r3, [r3, #8]
 801140e:	4618      	mov	r0, r3
 8011410:	f7fa fba2 	bl	800bb58 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 8011414:	4603      	mov	r3, r0
    }
 8011416:	4618      	mov	r0, r3
 8011418:	3708      	adds	r7, #8
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}

0801141e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801141e:	b480      	push	{r7}
 8011420:	b083      	sub	sp, #12
 8011422:	af00      	add	r7, sp, #0
 8011424:	6078      	str	r0, [r7, #4]
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	4618      	mov	r0, r3
 801142a:	370c      	adds	r7, #12
 801142c:	46bd      	mov	sp, r7
 801142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011432:	4770      	bx	lr

08011434 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8011434:	b5b0      	push	{r4, r5, r7, lr}
 8011436:	b082      	sub	sp, #8
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
 801143c:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	689c      	ldr	r4, [r3, #8]
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	6839      	ldr	r1, [r7, #0]
 8011448:	4618      	mov	r0, r3
 801144a:	f000 fb5d 	bl	8011b08 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 801144e:	4605      	mov	r5, r0
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	685b      	ldr	r3, [r3, #4]
 8011454:	6839      	ldr	r1, [r7, #0]
 8011456:	4618      	mov	r0, r3
 8011458:	f000 fb66 	bl	8011b28 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 801145c:	4603      	mov	r3, r0
 801145e:	461a      	mov	r2, r3
 8011460:	4629      	mov	r1, r5
 8011462:	4620      	mov	r0, r4
 8011464:	f7f7 f836 	bl	80084d4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8011468:	bf00      	nop
 801146a:	3708      	adds	r7, #8
 801146c:	46bd      	mov	sp, r7
 801146e:	bdb0      	pop	{r4, r5, r7, pc}

08011470 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011470:	b480      	push	{r7}
 8011472:	b083      	sub	sp, #12
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	bf00      	nop
 801147a:	370c      	adds	r7, #12
 801147c:	46bd      	mov	sp, r7
 801147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011482:	4770      	bx	lr

08011484 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8011484:	b480      	push	{r7}
 8011486:	b083      	sub	sp, #12
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
    }
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	4618      	mov	r0, r3
 8011490:	370c      	adds	r7, #12
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr

0801149a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801149a:	b480      	push	{r7}
 801149c:	b083      	sub	sp, #12
 801149e:	af00      	add	r7, sp, #0
 80114a0:	6078      	str	r0, [r7, #4]
    }
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	4618      	mov	r0, r3
 80114a6:	370c      	adds	r7, #12
 80114a8:	46bd      	mov	sp, r7
 80114aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ae:	4770      	bx	lr

080114b0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b082      	sub	sp, #8
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7ff fb42 	bl	8010b44 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80114c0:	4603      	mov	r3, r0
    }
 80114c2:	4618      	mov	r0, r3
 80114c4:	3708      	adds	r7, #8
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}

080114ca <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 80114ca:	b580      	push	{r7, lr}
 80114cc:	b082      	sub	sp, #8
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
 80114d2:	6039      	str	r1, [r7, #0]
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6839      	ldr	r1, [r7, #0]
 80114d8:	4618      	mov	r0, r3
 80114da:	f000 fb35 	bl	8011b48 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	4618      	mov	r0, r3
 80114e2:	3708      	adds	r7, #8
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}

080114e8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80114e8:	b480      	push	{r7}
 80114ea:	b083      	sub	sp, #12
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	4618      	mov	r0, r3
 80114f4:	370c      	adds	r7, #12
 80114f6:	46bd      	mov	sp, r7
 80114f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fc:	4770      	bx	lr

080114fe <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 80114fe:	b480      	push	{r7}
 8011500:	b083      	sub	sp, #12
 8011502:	af00      	add	r7, sp, #0
 8011504:	6078      	str	r0, [r7, #4]
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	4618      	mov	r0, r3
 801150a:	370c      	adds	r7, #12
 801150c:	46bd      	mov	sp, r7
 801150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011512:	4770      	bx	lr

08011514 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8011514:	b580      	push	{r7, lr}
 8011516:	b084      	sub	sp, #16
 8011518:	af00      	add	r7, sp, #0
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	60b9      	str	r1, [r7, #8]
 801151e:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8011520:	68b9      	ldr	r1, [r7, #8]
 8011522:	68f8      	ldr	r0, [r7, #12]
 8011524:	f000 fb1f 	bl	8011b66 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>
 8011528:	eef0 7a40 	vmov.f32	s15, s0
  }
 801152c:	eeb0 0a67 	vmov.f32	s0, s15
 8011530:	3710      	adds	r7, #16
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}

08011536 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8011536:	b580      	push	{r7, lr}
 8011538:	b082      	sub	sp, #8
 801153a:	af00      	add	r7, sp, #0
 801153c:	6078      	str	r0, [r7, #4]
 801153e:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f000 fb4c 	bl	8011bde <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8011546:	6838      	ldr	r0, [r7, #0]
 8011548:	f000 fb31 	bl	8011bae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 801154c:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8011552:	6838      	ldr	r0, [r7, #0]
 8011554:	f000 fb37 	bl	8011bc6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>
 8011558:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	605a      	str	r2, [r3, #4]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8011568:	4619      	mov	r1, r3
 801156a:	4610      	mov	r0, r2
 801156c:	f7f5 f95f 	bl	800682e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 801157a:	4619      	mov	r1, r3
 801157c:	4610      	mov	r0, r2
 801157e:	f000 f9d9 	bl	8011934 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8011582:	6838      	ldr	r0, [r7, #0]
 8011584:	f000 fb13 	bl	8011bae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 8011588:	4603      	mov	r3, r0
 801158a:	4618      	mov	r0, r3
 801158c:	f7f3 fc9e 	bl	8004ecc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8011590:	4602      	mov	r2, r0
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	611a      	str	r2, [r3, #16]
  }
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	4618      	mov	r0, r3
 801159a:	3708      	adds	r7, #8
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}

080115a0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b082      	sub	sp, #8
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80115a8:	2200      	movs	r2, #0
 80115aa:	2100      	movs	r1, #0
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f000 fb21 	bl	8011bf4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	f000 fb37 	bl	8011c26 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>
  }
 80115b8:	bf00      	nop
 80115ba:	3708      	adds	r7, #8
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}

080115c0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 80115c0:	b590      	push	{r4, r7, lr}
 80115c2:	b083      	sub	sp, #12
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
 80115c8:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f000 fb57 	bl	8011c7e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	4618      	mov	r0, r3
 80115d4:	f000 f81e 	bl	8011614 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 80115d8:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	601a      	str	r2, [r3, #0]
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	1d1c      	adds	r4, r3, #4
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	4618      	mov	r0, r3
 80115e6:	f000 fb2e 	bl	8011c46 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 80115ea:	4603      	mov	r3, r0
 80115ec:	4619      	mov	r1, r3
 80115ee:	4620      	mov	r0, r4
 80115f0:	f7f5 f976 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	1d5c      	adds	r4, r3, #5
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	4618      	mov	r0, r3
 80115fc:	f000 fb31 	bl	8011c62 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 8011600:	4603      	mov	r3, r0
 8011602:	4619      	mov	r1, r3
 8011604:	4620      	mov	r0, r4
 8011606:	f7f5 f951 	bl	80068ac <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	4618      	mov	r0, r3
 801160e:	370c      	adds	r7, #12
 8011610:	46bd      	mov	sp, r7
 8011612:	bd90      	pop	{r4, r7, pc}

08011614 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8011614:	b480      	push	{r7}
 8011616:	b083      	sub	sp, #12
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	4618      	mov	r0, r3
 8011622:	370c      	adds	r7, #12
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr

0801162c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801162c:	b580      	push	{r7, lr}
 801162e:	b082      	sub	sp, #8
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	6039      	str	r1, [r7, #0]
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6839      	ldr	r1, [r7, #0]
 801163a:	4618      	mov	r0, r3
 801163c:	f000 fb2a 	bl	8011c94 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>
  }
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	4618      	mov	r0, r3
 8011644:	3708      	adds	r7, #8
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}

0801164a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801164a:	b580      	push	{r7, lr}
 801164c:	b082      	sub	sp, #8
 801164e:	af00      	add	r7, sp, #0
 8011650:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	3308      	adds	r3, #8
 8011656:	4618      	mov	r0, r3
 8011658:	f7fc fd6a 	bl	800e130 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 801165c:	4603      	mov	r3, r0
    }
 801165e:	4618      	mov	r0, r3
 8011660:	3708      	adds	r7, #8
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}

08011666 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011666:	b580      	push	{r7, lr}
 8011668:	b082      	sub	sp, #8
 801166a:	af00      	add	r7, sp, #0
 801166c:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	3308      	adds	r3, #8
 8011672:	4618      	mov	r0, r3
 8011674:	f7fc fd70 	bl	800e158 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 8011678:	4603      	mov	r3, r0
    }
 801167a:	4618      	mov	r0, r3
 801167c:	3708      	adds	r7, #8
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}

08011682 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011682:	b480      	push	{r7}
 8011684:	b083      	sub	sp, #12
 8011686:	af00      	add	r7, sp, #0
 8011688:	6078      	str	r0, [r7, #4]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	4618      	mov	r0, r3
 801168e:	370c      	adds	r7, #12
 8011690:	46bd      	mov	sp, r7
 8011692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011696:	4770      	bx	lr

08011698 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType=0, IndexType=0) const { return op(); }
 8011698:	b580      	push	{r7, lr}
 801169a:	b084      	sub	sp, #16
 801169c:	af00      	add	r7, sp, #0
 801169e:	60f8      	str	r0, [r7, #12]
 80116a0:	60b9      	str	r1, [r7, #8]
 80116a2:	607a      	str	r2, [r7, #4]
 80116a4:	603b      	str	r3, [r7, #0]
 80116a6:	68b8      	ldr	r0, [r7, #8]
 80116a8:	f000 fb03 	bl	8011cb2 <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>
 80116ac:	eef0 7a40 	vmov.f32	s15, s0
 80116b0:	eeb0 0a67 	vmov.f32	s0, s15
 80116b4:	3710      	adds	r7, #16
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}

080116ba <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80116ba:	b580      	push	{r7, lr}
 80116bc:	b082      	sub	sp, #8
 80116be:	af00      	add	r7, sp, #0
 80116c0:	6078      	str	r0, [r7, #4]
 80116c2:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6839      	ldr	r1, [r7, #0]
 80116c8:	4618      	mov	r0, r3
 80116ca:	f000 fb01 	bl	8011cd0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	4618      	mov	r0, r3
 80116d2:	f000 fb27 	bl	8011d24 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 80116d6:	bf00      	nop
  }
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	4618      	mov	r0, r3
 80116dc:	3708      	adds	r7, #8
 80116de:	46bd      	mov	sp, r7
 80116e0:	bd80      	pop	{r7, pc}

080116e2 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>:
    static void run(const Derived&, const OtherDerived&)
 80116e2:	b480      	push	{r7}
 80116e4:	b083      	sub	sp, #12
 80116e6:	af00      	add	r7, sp, #0
 80116e8:	6078      	str	r0, [r7, #4]
 80116ea:	6039      	str	r1, [r7, #0]
    }
 80116ec:	bf00      	nop
 80116ee:	370c      	adds	r7, #12
 80116f0:	46bd      	mov	sp, r7
 80116f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f6:	4770      	bx	lr

080116f8 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6839      	ldr	r1, [r7, #0]
 8011706:	4618      	mov	r0, r3
 8011708:	f000 fb18 	bl	8011d3c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	4618      	mov	r0, r3
 8011710:	3708      	adds	r7, #8
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}

08011716 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8011716:	b480      	push	{r7}
 8011718:	b083      	sub	sp, #12
 801171a:	af00      	add	r7, sp, #0
 801171c:	6078      	str	r0, [r7, #4]
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	4618      	mov	r0, r3
 8011722:	370c      	adds	r7, #12
 8011724:	46bd      	mov	sp, r7
 8011726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172a:	4770      	bx	lr

0801172c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	4618      	mov	r0, r3
 801173a:	f7f3 fb2c 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 801173e:	4603      	mov	r3, r0
 8011740:	4618      	mov	r0, r3
 8011742:	3708      	adds	r7, #8
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}

08011748 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	685b      	ldr	r3, [r3, #4]
 8011754:	4618      	mov	r0, r3
 8011756:	f7f3 fb13 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 801175a:	4603      	mov	r3, r0
 801175c:	4618      	mov	r0, r3
 801175e:	3708      	adds	r7, #8
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8011764:	b580      	push	{r7, lr}
 8011766:	b086      	sub	sp, #24
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8011770:	68b8      	ldr	r0, [r7, #8]
 8011772:	f7ff ffdb 	bl	801172c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>
 8011776:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8011778:	68b8      	ldr	r0, [r7, #8]
 801177a:	f7ff ffe5 	bl	8011748 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>
 801177e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	4618      	mov	r0, r3
 8011784:	f7f3 fb07 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011788:	4602      	mov	r2, r0
 801178a:	697b      	ldr	r3, [r7, #20]
 801178c:	4293      	cmp	r3, r2
 801178e:	d107      	bne.n	80117a0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	4618      	mov	r0, r3
 8011794:	f7f3 faf4 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011798:	4602      	mov	r2, r0
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	4293      	cmp	r3, r2
 801179e:	d001      	beq.n	80117a4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80117a0:	2301      	movs	r3, #1
 80117a2:	e000      	b.n	80117a6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80117a4:	2300      	movs	r3, #0
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d005      	beq.n	80117b6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	693a      	ldr	r2, [r7, #16]
 80117ae:	6979      	ldr	r1, [r7, #20]
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7f6 fa09 	bl	8007bc8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	4618      	mov	r0, r3
 80117ba:	f7f3 faec 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80117be:	4602      	mov	r2, r0
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	4293      	cmp	r3, r2
 80117c4:	d107      	bne.n	80117d6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7f3 fad9 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80117ce:	4602      	mov	r2, r0
 80117d0:	693b      	ldr	r3, [r7, #16]
 80117d2:	4293      	cmp	r3, r2
 80117d4:	d006      	beq.n	80117e4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80117d6:	4b05      	ldr	r3, [pc, #20]	; (80117ec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80117d8:	4a05      	ldr	r2, [pc, #20]	; (80117f0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80117da:	f240 21fd 	movw	r1, #765	; 0x2fd
 80117de:	4805      	ldr	r0, [pc, #20]	; (80117f4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80117e0:	f00c f9f0 	bl	801dbc4 <__assert_func>
}
 80117e4:	bf00      	nop
 80117e6:	3718      	adds	r7, #24
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	080220a4 	.word	0x080220a4
 80117f0:	08028200 	.word	0x08028200
 80117f4:	080221b8 	.word	0x080221b8

080117f8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80117f8:	b480      	push	{r7}
 80117fa:	b085      	sub	sp, #20
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	60f8      	str	r0, [r7, #12]
 8011800:	60b9      	str	r1, [r7, #8]
 8011802:	607a      	str	r2, [r7, #4]
 8011804:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	68ba      	ldr	r2, [r7, #8]
 801180a:	601a      	str	r2, [r3, #0]
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	687a      	ldr	r2, [r7, #4]
 8011810:	605a      	str	r2, [r3, #4]
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	683a      	ldr	r2, [r7, #0]
 8011816:	609a      	str	r2, [r3, #8]
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	69ba      	ldr	r2, [r7, #24]
 801181c:	60da      	str	r2, [r3, #12]
  }
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	4618      	mov	r0, r3
 8011822:	3714      	adds	r7, #20
 8011824:	46bd      	mov	sp, r7
 8011826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182a:	4770      	bx	lr

0801182c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f000 fab6 	bl	8011da6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>
  }
 801183a:	bf00      	nop
 801183c:	3708      	adds	r7, #8
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}

08011842 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8011842:	b480      	push	{r7}
 8011844:	b083      	sub	sp, #12
 8011846:	af00      	add	r7, sp, #0
 8011848:	6078      	str	r0, [r7, #4]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	3330      	adds	r3, #48	; 0x30
 801184e:	4618      	mov	r0, r3
 8011850:	370c      	adds	r7, #12
 8011852:	46bd      	mov	sp, r7
 8011854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011858:	4770      	bx	lr

0801185a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 801185a:	b480      	push	{r7}
 801185c:	b083      	sub	sp, #12
 801185e:	af00      	add	r7, sp, #0
 8011860:	6078      	str	r0, [r7, #4]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	4618      	mov	r0, r3
 8011866:	370c      	adds	r7, #12
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr

08011870 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8011870:	b480      	push	{r7}
 8011872:	b083      	sub	sp, #12
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	3318      	adds	r3, #24
 801187c:	4618      	mov	r0, r3
 801187e:	370c      	adds	r7, #12
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr

08011888 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8011888:	b580      	push	{r7, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
 8011890:	6039      	str	r1, [r7, #0]
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6839      	ldr	r1, [r7, #0]
 8011896:	4618      	mov	r0, r3
 8011898:	f000 fa95 	bl	8011dc6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	4618      	mov	r0, r3
 80118a0:	3708      	adds	r7, #8
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}

080118a6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80118a6:	b590      	push	{r4, r7, lr}
 80118a8:	b087      	sub	sp, #28
 80118aa:	af00      	add	r7, sp, #0
 80118ac:	60f8      	str	r0, [r7, #12]
 80118ae:	60b9      	str	r1, [r7, #8]
 80118b0:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	4618      	mov	r0, r3
 80118b6:	f000 fa95 	bl	8011de4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 80118ba:	4604      	mov	r4, r0
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	3304      	adds	r3, #4
 80118c0:	687a      	ldr	r2, [r7, #4]
 80118c2:	68b9      	ldr	r1, [r7, #8]
 80118c4:	4618      	mov	r0, r3
 80118c6:	f7fd fdf3 	bl	800f4b0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 80118ca:	eef0 7a40 	vmov.f32	s15, s0
 80118ce:	edc7 7a04 	vstr	s15, [r7, #16]
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	330c      	adds	r3, #12
 80118d6:	687a      	ldr	r2, [r7, #4]
 80118d8:	68b9      	ldr	r1, [r7, #8]
 80118da:	4618      	mov	r0, r3
 80118dc:	f000 fa8d 	bl	8011dfa <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 80118e0:	eef0 7a40 	vmov.f32	s15, s0
 80118e4:	edc7 7a05 	vstr	s15, [r7, #20]
 80118e8:	f107 0214 	add.w	r2, r7, #20
 80118ec:	f107 0310 	add.w	r3, r7, #16
 80118f0:	4619      	mov	r1, r3
 80118f2:	4620      	mov	r0, r4
 80118f4:	f7fd fc20 	bl	800f138 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80118f8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80118fc:	eeb0 0a67 	vmov.f32	s0, s15
 8011900:	371c      	adds	r7, #28
 8011902:	46bd      	mov	sp, r7
 8011904:	bd90      	pop	{r4, r7, pc}

08011906 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8011906:	b480      	push	{r7}
 8011908:	b083      	sub	sp, #12
 801190a:	af00      	add	r7, sp, #0
 801190c:	6078      	str	r0, [r7, #4]
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	4618      	mov	r0, r3
 8011914:	370c      	adds	r7, #12
 8011916:	46bd      	mov	sp, r7
 8011918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191c:	4770      	bx	lr

0801191e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801191e:	b480      	push	{r7}
 8011920:	b083      	sub	sp, #12
 8011922:	af00      	add	r7, sp, #0
 8011924:	6078      	str	r0, [r7, #4]
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	4618      	mov	r0, r3
 801192a:	370c      	adds	r7, #12
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr

08011934 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8011934:	b580      	push	{r7, lr}
 8011936:	b082      	sub	sp, #8
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	683a      	ldr	r2, [r7, #0]
 8011942:	4611      	mov	r1, r2
 8011944:	4618      	mov	r0, r3
 8011946:	f000 fa79 	bl	8011e3c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
  { }
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	4618      	mov	r0, r3
 801194e:	3708      	adds	r7, #8
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}

08011954 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 8011954:	b580      	push	{r7, lr}
 8011956:	b084      	sub	sp, #16
 8011958:	af00      	add	r7, sp, #0
 801195a:	60f8      	str	r0, [r7, #12]
 801195c:	60b9      	str	r1, [r7, #8]
 801195e:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8011960:	68b8      	ldr	r0, [r7, #8]
 8011962:	f7f4 f887 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8011966:	4603      	mov	r3, r0
 8011968:	687a      	ldr	r2, [r7, #4]
 801196a:	4619      	mov	r1, r3
 801196c:	68f8      	ldr	r0, [r7, #12]
 801196e:	f000 fa7d 	bl	8011e6c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>
}
 8011972:	68f8      	ldr	r0, [r7, #12]
 8011974:	3710      	adds	r7, #16
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}

0801197a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 801197a:	b5b0      	push	{r4, r5, r7, lr}
 801197c:	b086      	sub	sp, #24
 801197e:	af00      	add	r7, sp, #0
 8011980:	60f8      	str	r0, [r7, #12]
 8011982:	60b9      	str	r1, [r7, #8]
 8011984:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8011986:	68b8      	ldr	r0, [r7, #8]
 8011988:	f7f9 fe6e 	bl	800b668 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 801198c:	4604      	mov	r4, r0
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f000 fa94 	bl	8011ebc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>
 8011994:	4605      	mov	r5, r0
 8011996:	f107 0314 	add.w	r3, r7, #20
 801199a:	4618      	mov	r0, r3
 801199c:	f7f3 fc9c 	bl	80052d8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 80119a0:	f107 0314 	add.w	r3, r7, #20
 80119a4:	462a      	mov	r2, r5
 80119a6:	4621      	mov	r1, r4
 80119a8:	68f8      	ldr	r0, [r7, #12]
 80119aa:	f000 fac1 	bl	8011f30 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>
}
 80119ae:	68f8      	ldr	r0, [r7, #12]
 80119b0:	3718      	adds	r7, #24
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bdb0      	pop	{r4, r5, r7, pc}

080119b6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80119b6:	b580      	push	{r7, lr}
 80119b8:	b082      	sub	sp, #8
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	6078      	str	r0, [r7, #4]
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f000 fb14 	bl	8011fec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 80119c4:	4603      	mov	r3, r0
 80119c6:	4618      	mov	r0, r3
 80119c8:	f000 fb1b 	bl	8012002 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>
 80119cc:	4603      	mov	r3, r0
 80119ce:	4618      	mov	r0, r3
 80119d0:	3708      	adds	r7, #8
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}

080119d6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 80119d6:	b590      	push	{r4, r7, lr}
 80119d8:	b085      	sub	sp, #20
 80119da:	af00      	add	r7, sp, #0
 80119dc:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 80119de:	6878      	ldr	r0, [r7, #4]
 80119e0:	f000 fb04 	bl	8011fec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 80119e4:	4604      	mov	r4, r0
 80119e6:	f107 030c 	add.w	r3, r7, #12
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7f3 ff6b 	bl	80058c6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80119f0:	f107 030c 	add.w	r3, r7, #12
 80119f4:	4619      	mov	r1, r3
 80119f6:	4620      	mov	r0, r4
 80119f8:	f000 fb80 	bl	80120fc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 80119fc:	eef0 7a40 	vmov.f32	s15, s0
 8011a00:	bf00      	nop
}
 8011a02:	eeb0 0a67 	vmov.f32	s0, s15
 8011a06:	3714      	adds	r7, #20
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd90      	pop	{r4, r7, pc}

08011a0c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011a0c:	b480      	push	{r7}
 8011a0e:	b083      	sub	sp, #12
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
 8011a14:	bf00      	nop
 8011a16:	370c      	adds	r7, #12
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr

08011a20 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011a20:	b480      	push	{r7}
 8011a22:	b083      	sub	sp, #12
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	370c      	adds	r7, #12
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a34:	4770      	bx	lr

08011a36 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8011a36:	b590      	push	{r4, r7, lr}
 8011a38:	b083      	sub	sp, #12
 8011a3a:	af00      	add	r7, sp, #0
 8011a3c:	6078      	str	r0, [r7, #4]
 8011a3e:	6039      	str	r1, [r7, #0]
 8011a40:	687c      	ldr	r4, [r7, #4]
 8011a42:	6838      	ldr	r0, [r7, #0]
 8011a44:	f000 fba0 	bl	8012188 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	4619      	mov	r1, r3
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	f7f3 ffb9 	bl	80059c4 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	1d1c      	adds	r4, r3, #4
 8011a56:	6838      	ldr	r0, [r7, #0]
 8011a58:	f000 fba2 	bl	80121a0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	4619      	mov	r1, r3
 8011a60:	4620      	mov	r0, r4
 8011a62:	f000 fbb4 	bl	80121ce <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	f103 040c 	add.w	r4, r3, #12
 8011a6c:	6838      	ldr	r0, [r7, #0]
 8011a6e:	f000 fba2 	bl	80121b6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>
 8011a72:	4603      	mov	r3, r0
 8011a74:	4619      	mov	r1, r3
 8011a76:	4620      	mov	r0, r4
 8011a78:	f000 fbb8 	bl	80121ec <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	4618      	mov	r0, r3
 8011a80:	370c      	adds	r7, #12
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd90      	pop	{r4, r7, pc}

08011a86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8011a86:	b5b0      	push	{r4, r5, r7, lr}
 8011a88:	b084      	sub	sp, #16
 8011a8a:	af00      	add	r7, sp, #0
 8011a8c:	6078      	str	r0, [r7, #4]
 8011a8e:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	689c      	ldr	r4, [r3, #8]
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	6839      	ldr	r1, [r7, #0]
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f000 f834 	bl	8011b08 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 8011aa0:	4605      	mov	r5, r0
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	685b      	ldr	r3, [r3, #4]
 8011aa6:	6839      	ldr	r1, [r7, #0]
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f000 fbae 	bl	801220a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>
 8011aae:	eef0 7a40 	vmov.f32	s15, s0
 8011ab2:	edc7 7a03 	vstr	s15, [r7, #12]
 8011ab6:	f107 030c 	add.w	r3, r7, #12
 8011aba:	461a      	mov	r2, r3
 8011abc:	4629      	mov	r1, r5
 8011abe:	4620      	mov	r0, r4
 8011ac0:	f7f6 fd08 	bl	80084d4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8011ac4:	bf00      	nop
 8011ac6:	3710      	adds	r7, #16
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bdb0      	pop	{r4, r5, r7, pc}

08011acc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011acc:	b480      	push	{r7}
 8011ace:	b083      	sub	sp, #12
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
 8011ad4:	bf00      	nop
 8011ad6:	370c      	adds	r7, #12
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ade:	4770      	bx	lr

08011ae0 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b082      	sub	sp, #8
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6839      	ldr	r1, [r7, #0]
 8011aee:	4618      	mov	r0, r3
 8011af0:	f000 fbaf 	bl	8012252 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8011af4:	683b      	ldr	r3, [r7, #0]
 8011af6:	4618      	mov	r0, r3
 8011af8:	f000 fbd5 	bl	80122a6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 8011afc:	bf00      	nop
  }
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	4618      	mov	r0, r3
 8011b02:	3708      	adds	r7, #8
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}

08011b08 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8011b08:	b480      	push	{r7}
 8011b0a:	b083      	sub	sp, #12
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
 8011b10:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681a      	ldr	r2, [r3, #0]
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	009b      	lsls	r3, r3, #2
 8011b1a:	4413      	add	r3, r2
  }
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	370c      	adds	r7, #12
 8011b20:	46bd      	mov	sp, r7
 8011b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b26:	4770      	bx	lr

08011b28 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8011b28:	b480      	push	{r7}
 8011b2a:	b083      	sub	sp, #12
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681a      	ldr	r2, [r3, #0]
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	009b      	lsls	r3, r3, #2
 8011b3a:	4413      	add	r3, r2
  }
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	370c      	adds	r7, #12
 8011b40:	46bd      	mov	sp, r7
 8011b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b46:	4770      	bx	lr

08011b48 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b082      	sub	sp, #8
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
 8011b50:	6039      	str	r1, [r7, #0]
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6839      	ldr	r1, [r7, #0]
 8011b56:	4618      	mov	r0, r3
 8011b58:	f000 fbb1 	bl	80122be <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3708      	adds	r7, #8
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}

08011b66 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8011b66:	b580      	push	{r7, lr}
 8011b68:	b084      	sub	sp, #16
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	6078      	str	r0, [r7, #4]
 8011b6e:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011b70:	6839      	ldr	r1, [r7, #0]
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f000 fbb5 	bl	80122e2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>
 8011b78:	eef0 7a40 	vmov.f32	s15, s0
 8011b7c:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8011b80:	6839      	ldr	r1, [r7, #0]
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f000 fbbe 	bl	8012304 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>
 8011b88:	eef0 7a40 	vmov.f32	s15, s0
 8011b8c:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011b90:	f107 020c 	add.w	r2, r7, #12
 8011b94:	f107 0308 	add.w	r3, r7, #8
 8011b98:	4619      	mov	r1, r3
 8011b9a:	6838      	ldr	r0, [r7, #0]
 8011b9c:	f7f7 fa8b 	bl	80090b6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8011ba0:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8011ba8:	3710      	adds	r7, #16
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}

08011bae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8011bae:	b480      	push	{r7}
 8011bb0:	b083      	sub	sp, #12
 8011bb2:	af00      	add	r7, sp, #0
 8011bb4:	6078      	str	r0, [r7, #4]
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	4618      	mov	r0, r3
 8011bbc:	370c      	adds	r7, #12
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc4:	4770      	bx	lr

08011bc6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8011bc6:	b480      	push	{r7}
 8011bc8:	b083      	sub	sp, #12
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	370c      	adds	r7, #12
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bdc:	4770      	bx	lr

08011bde <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011bde:	b480      	push	{r7}
 8011be0:	b083      	sub	sp, #12
 8011be2:	af00      	add	r7, sp, #0
 8011be4:	6078      	str	r0, [r7, #4]
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	4618      	mov	r0, r3
 8011bea:	370c      	adds	r7, #12
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr

08011bf4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b086      	sub	sp, #24
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8011c00:	6879      	ldr	r1, [r7, #4]
 8011c02:	68b8      	ldr	r0, [r7, #8]
 8011c04:	f000 fba2 	bl	801234c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8011c08:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8011c0a:	6879      	ldr	r1, [r7, #4]
 8011c0c:	68b8      	ldr	r0, [r7, #8]
 8011c0e:	f000 fba9 	bl	8012364 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8011c12:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8011c14:	693a      	ldr	r2, [r7, #16]
 8011c16:	6979      	ldr	r1, [r7, #20]
 8011c18:	68f8      	ldr	r0, [r7, #12]
 8011c1a:	f000 fbaf 	bl	801237c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>
  }
 8011c1e:	bf00      	nop
 8011c20:	3718      	adds	r7, #24
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}

08011c26 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011c26:	b580      	push	{r7, lr}
 8011c28:	b082      	sub	sp, #8
 8011c2a:	af00      	add	r7, sp, #0
 8011c2c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011c2e:	2201      	movs	r2, #1
 8011c30:	2100      	movs	r1, #0
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f7ff ffde 	bl	8011bf4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f000 fbc5 	bl	80123c8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>
  }
 8011c3e:	bf00      	nop
 8011c40:	3708      	adds	r7, #8
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}

08011c46 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011c46:	b580      	push	{r7, lr}
 8011c48:	b082      	sub	sp, #8
 8011c4a:	af00      	add	r7, sp, #0
 8011c4c:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	689b      	ldr	r3, [r3, #8]
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7fb fe62 	bl	800d91c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8011c58:	4603      	mov	r3, r0
    }
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3708      	adds	r7, #8
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}

08011c62 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011c62:	b580      	push	{r7, lr}
 8011c64:	b082      	sub	sp, #8
 8011c66:	af00      	add	r7, sp, #0
 8011c68:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	689b      	ldr	r3, [r3, #8]
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f7f6 fc04 	bl	800847c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8011c74:	4603      	mov	r3, r0
    }
 8011c76:	4618      	mov	r0, r3
 8011c78:	3708      	adds	r7, #8
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}

08011c7e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 8011c7e:	b480      	push	{r7}
 8011c80:	b083      	sub	sp, #12
 8011c82:	af00      	add	r7, sp, #0
 8011c84:	6078      	str	r0, [r7, #4]
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	370c      	adds	r7, #12
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c92:	4770      	bx	lr

08011c94 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b082      	sub	sp, #8
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
 8011c9c:	6039      	str	r1, [r7, #0]
    : unary_evaluator<XprType>(block)
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	6839      	ldr	r1, [r7, #0]
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f000 fbb9 	bl	801241a <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>
  {}
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	4618      	mov	r0, r3
 8011cac:	3708      	adds	r7, #8
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}

08011cb2 <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() () const { return m_other; }
 8011cb2:	b480      	push	{r7}
 8011cb4:	b083      	sub	sp, #12
 8011cb6:	af00      	add	r7, sp, #0
 8011cb8:	6078      	str	r0, [r7, #4]
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	ee07 3a90 	vmov	s15, r3
 8011cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8011cc6:	370c      	adds	r7, #12
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cce:	4770      	bx	lr

08011cd0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8011cd0:	b590      	push	{r4, r7, lr}
 8011cd2:	b083      	sub	sp, #12
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f000 fc05 	bl	80124ea <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f000 f81e 	bl	8011d24 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 8011ce8:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	601a      	str	r2, [r3, #0]
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	1d1c      	adds	r4, r3, #4
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f000 fbdc 	bl	80124b2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	4619      	mov	r1, r3
 8011cfe:	4620      	mov	r0, r4
 8011d00:	f7f4 fdd4 	bl	80068ac <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	1d5c      	adds	r4, r3, #5
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f000 fbdf 	bl	80124ce <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>
 8011d10:	4603      	mov	r3, r0
 8011d12:	4619      	mov	r1, r3
 8011d14:	4620      	mov	r0, r4
 8011d16:	f7f4 fde3 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	370c      	adds	r7, #12
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd90      	pop	{r4, r7, pc}

08011d24 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>:
 8011d24:	b480      	push	{r7}
 8011d26:	b083      	sub	sp, #12
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	4618      	mov	r0, r3
 8011d32:	370c      	adds	r7, #12
 8011d34:	46bd      	mov	sp, r7
 8011d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3a:	4770      	bx	lr

08011d3c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>:
  explicit product_evaluator(const XprType& xpr)
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b082      	sub	sp, #8
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8011d46:	6878      	ldr	r0, [r7, #4]
 8011d48:	f000 fbf2 	bl	8012530 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8011d4c:	6838      	ldr	r0, [r7, #0]
 8011d4e:	f000 fbd7 	bl	8012500 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 8011d52:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8011d58:	6838      	ldr	r0, [r7, #0]
 8011d5a:	f000 fbdd 	bl	8012518 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>
 8011d5e:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	605a      	str	r2, [r3, #4]
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8011d6e:	4619      	mov	r1, r3
 8011d70:	4610      	mov	r0, r2
 8011d72:	f7f5 fca7 	bl	80076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8011d80:	4619      	mov	r1, r3
 8011d82:	4610      	mov	r0, r2
 8011d84:	f7f5 fc9e 	bl	80076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8011d88:	6838      	ldr	r0, [r7, #0]
 8011d8a:	f000 fbb9 	bl	8012500 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7f2 fff5 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011d96:	4602      	mov	r2, r0
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	611a      	str	r2, [r3, #16]
  }
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3708      	adds	r7, #8
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}

08011da6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011da6:	b580      	push	{r7, lr}
 8011da8:	b082      	sub	sp, #8
 8011daa:	af00      	add	r7, sp, #0
 8011dac:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011dae:	2200      	movs	r2, #0
 8011db0:	2100      	movs	r1, #0
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f000 fbc7 	bl	8012546 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011db8:	6878      	ldr	r0, [r7, #4]
 8011dba:	f000 fbdd 	bl	8012578 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>
  }
 8011dbe:	bf00      	nop
 8011dc0:	3708      	adds	r7, #8
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}

08011dc6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8011dc6:	b580      	push	{r7, lr}
 8011dc8:	b082      	sub	sp, #8
 8011dca:	af00      	add	r7, sp, #0
 8011dcc:	6078      	str	r0, [r7, #4]
 8011dce:	6039      	str	r1, [r7, #0]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6839      	ldr	r1, [r7, #0]
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f000 fbdf 	bl	8012598 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>
  }
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3708      	adds	r7, #8
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8011de4:	b480      	push	{r7}
 8011de6:	b083      	sub	sp, #12
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	4618      	mov	r0, r3
 8011df0:	370c      	adds	r7, #12
 8011df2:	46bd      	mov	sp, r7
 8011df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df8:	4770      	bx	lr

08011dfa <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8011dfa:	b5b0      	push	{r4, r5, r7, lr}
 8011dfc:	b084      	sub	sp, #16
 8011dfe:	af00      	add	r7, sp, #0
 8011e00:	60f8      	str	r0, [r7, #12]
 8011e02:	60b9      	str	r1, [r7, #8]
 8011e04:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	681c      	ldr	r4, [r3, #0]
 8011e0a:	68f8      	ldr	r0, [r7, #12]
 8011e0c:	f000 fbd8 	bl	80125c0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8011e10:	4602      	mov	r2, r0
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	fb03 f502 	mul.w	r5, r3, r2
 8011e18:	68f8      	ldr	r0, [r7, #12]
 8011e1a:	f000 fbdc 	bl	80125d6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 8011e1e:	4602      	mov	r2, r0
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	fb02 f303 	mul.w	r3, r2, r3
 8011e26:	442b      	add	r3, r5
 8011e28:	009b      	lsls	r3, r3, #2
 8011e2a:	4423      	add	r3, r4
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	ee07 3a90 	vmov	s15, r3
  }
 8011e32:	eeb0 0a67 	vmov.f32	s0, s15
 8011e36:	3710      	adds	r7, #16
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bdb0      	pop	{r4, r5, r7, pc}

08011e3c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8011e3c:	b590      	push	{r4, r7, lr}
 8011e3e:	b083      	sub	sp, #12
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f000 fbdd 	bl	8012606 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8011e4c:	687c      	ldr	r4, [r7, #4]
 8011e4e:	6838      	ldr	r0, [r7, #0]
 8011e50:	f000 fbcc 	bl	80125ec <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8011e54:	4603      	mov	r3, r0
 8011e56:	2200      	movs	r2, #0
 8011e58:	4619      	mov	r1, r3
 8011e5a:	4620      	mov	r0, r4
 8011e5c:	f7f5 f88b 	bl	8006f76 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	4618      	mov	r0, r3
 8011e64:	370c      	adds	r7, #12
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd90      	pop	{r4, r7, pc}
	...

08011e6c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b084      	sub	sp, #16
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	60f8      	str	r0, [r7, #12]
 8011e74:	60b9      	str	r1, [r7, #8]
 8011e76:	607a      	str	r2, [r7, #4]
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	687a      	ldr	r2, [r7, #4]
 8011e7c:	68b9      	ldr	r1, [r7, #8]
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f000 fbcc 	bl	801261c <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	db06      	blt.n	8011e98 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x2c>
 8011e8a:	68b8      	ldr	r0, [r7, #8]
 8011e8c:	f7f4 fe6b 	bl	8006b66 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8011e90:	4602      	mov	r2, r0
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	4293      	cmp	r3, r2
 8011e96:	db05      	blt.n	8011ea4 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x38>
 8011e98:	4b05      	ldr	r3, [pc, #20]	; (8011eb0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x44>)
 8011e9a:	4a06      	ldr	r2, [pc, #24]	; (8011eb4 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x48>)
 8011e9c:	2178      	movs	r1, #120	; 0x78
 8011e9e:	4806      	ldr	r0, [pc, #24]	; (8011eb8 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x4c>)
 8011ea0:	f00b fe90 	bl	801dbc4 <__assert_func>
    }
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3710      	adds	r7, #16
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}
 8011eae:	bf00      	nop
 8011eb0:	080245b0 	.word	0x080245b0
 8011eb4:	08028314 	.word	0x08028314
 8011eb8:	08024734 	.word	0x08024734

08011ebc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8011ebc:	b480      	push	{r7}
 8011ebe:	b083      	sub	sp, #12
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	370c      	adds	r7, #12
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed0:	4770      	bx	lr

08011ed2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
 8011ed2:	b580      	push	{r7, lr}
 8011ed4:	b082      	sub	sp, #8
 8011ed6:	af00      	add	r7, sp, #0
 8011ed8:	6078      	str	r0, [r7, #4]
 8011eda:	6878      	ldr	r0, [r7, #4]
 8011edc:	f000 fbaf 	bl	801263e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3708      	adds	r7, #8
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}

08011eea <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8011eea:	b580      	push	{r7, lr}
 8011eec:	b082      	sub	sp, #8
 8011eee:	af00      	add	r7, sp, #0
 8011ef0:	6078      	str	r0, [r7, #4]
 8011ef2:	6878      	ldr	r0, [r7, #4]
 8011ef4:	f7ff ffed 	bl	8011ed2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	4618      	mov	r0, r3
 8011efc:	3708      	adds	r7, #8
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}

08011f02 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8011f02:	b580      	push	{r7, lr}
 8011f04:	b082      	sub	sp, #8
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	6078      	str	r0, [r7, #4]
 8011f0a:	f7f4 fd0e 	bl	800692a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	4618      	mov	r0, r3
 8011f12:	3708      	adds	r7, #8
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}

08011f18 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
 8011f20:	f7f4 fd0b 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8011f24:	4603      	mov	r3, r0
 8011f26:	4618      	mov	r0, r3
 8011f28:	3708      	adds	r7, #8
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}
	...

08011f30 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8011f30:	b5b0      	push	{r4, r5, r7, lr}
 8011f32:	b084      	sub	sp, #16
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	60f8      	str	r0, [r7, #12]
 8011f38:	60b9      	str	r1, [r7, #8]
 8011f3a:	607a      	str	r2, [r7, #4]
 8011f3c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8011f3e:	68f8      	ldr	r0, [r7, #12]
 8011f40:	f7ff ffd3 	bl	8011eea <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 8011f44:	68fa      	ldr	r2, [r7, #12]
 8011f46:	68bb      	ldr	r3, [r7, #8]
 8011f48:	4614      	mov	r4, r2
 8011f4a:	461d      	mov	r5, r3
 8011f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f50:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011f54:	e884 0003 	stmia.w	r4, {r0, r1}
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	f103 0218 	add.w	r2, r3, #24
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	4614      	mov	r4, r2
 8011f62:	461d      	mov	r5, r3
 8011f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011f6c:	e884 0003 	stmia.w	r4, {r0, r1}
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	3330      	adds	r3, #48	; 0x30
 8011f74:	6839      	ldr	r1, [r7, #0]
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7f3 fa38 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8011f7c:	68b8      	ldr	r0, [r7, #8]
 8011f7e:	f7f9 fba1 	bl	800b6c4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 8011f82:	4604      	mov	r4, r0
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7ff ffbb 	bl	8011f02 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	429c      	cmp	r4, r3
 8011f90:	d10a      	bne.n	8011fa8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x78>
 8011f92:	68b8      	ldr	r0, [r7, #8]
 8011f94:	f7f9 fba3 	bl	800b6de <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8011f98:	4604      	mov	r4, r0
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7ff ffbb 	bl	8011f18 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	429c      	cmp	r4, r3
 8011fa6:	d005      	beq.n	8011fb4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x84>
 8011fa8:	4b05      	ldr	r3, [pc, #20]	; (8011fc0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x90>)
 8011faa:	4a06      	ldr	r2, [pc, #24]	; (8011fc4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x94>)
 8011fac:	2174      	movs	r1, #116	; 0x74
 8011fae:	4806      	ldr	r0, [pc, #24]	; (8011fc8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x98>)
 8011fb0:	f00b fe08 	bl	801dbc4 <__assert_func>
    }
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	3710      	adds	r7, #16
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8011fbe:	bf00      	nop
 8011fc0:	0801fa2c 	.word	0x0801fa2c
 8011fc4:	08028404 	.word	0x08028404
 8011fc8:	0801fc90 	.word	0x0801fc90

08011fcc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b082      	sub	sp, #8
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
 8011fd4:	6878      	ldr	r0, [r7, #4]
 8011fd6:	f000 f809 	bl	8011fec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f000 fb39 	bl	8012654 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	3708      	adds	r7, #8
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}

08011fec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8011fec:	b480      	push	{r7}
 8011fee:	b083      	sub	sp, #12
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	370c      	adds	r7, #12
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012000:	4770      	bx	lr

08012002 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8012002:	b580      	push	{r7, lr}
 8012004:	b082      	sub	sp, #8
 8012006:	af00      	add	r7, sp, #0
 8012008:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	4618      	mov	r0, r3
 801200e:	f7f9 fb59 	bl	800b6c4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 8012012:	4603      	mov	r3, r0
    }
 8012014:	4618      	mov	r0, r3
 8012016:	3708      	adds	r7, #8
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}

0801201c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 801201c:	b580      	push	{r7, lr}
 801201e:	b082      	sub	sp, #8
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	f000 fb3c 	bl	80126a2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	4618      	mov	r0, r3
 801202e:	3708      	adds	r7, #8
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}

08012034 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8012034:	b580      	push	{r7, lr}
 8012036:	b082      	sub	sp, #8
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	4618      	mov	r0, r3
 8012040:	f7ff ffec 	bl	801201c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	4618      	mov	r0, r3
 8012048:	3708      	adds	r7, #8
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}

0801204e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 801204e:	b580      	push	{r7, lr}
 8012050:	b082      	sub	sp, #8
 8012052:	af00      	add	r7, sp, #0
 8012054:	6078      	str	r0, [r7, #4]
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	4618      	mov	r0, r3
 801205a:	f7ff ffeb 	bl	8012034 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	4618      	mov	r0, r3
 8012062:	3708      	adds	r7, #8
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}

08012068 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 8012068:	b580      	push	{r7, lr}
 801206a:	b082      	sub	sp, #8
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	4618      	mov	r0, r3
 8012074:	f7ff ffeb 	bl	801204e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	4618      	mov	r0, r3
 801207c:	3708      	adds	r7, #8
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}

08012082 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>:
  struct Data
 8012082:	b580      	push	{r7, lr}
 8012084:	b082      	sub	sp, #8
 8012086:	af00      	add	r7, sp, #0
 8012088:	6078      	str	r0, [r7, #4]
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	330c      	adds	r3, #12
 801208e:	4618      	mov	r0, r3
 8012090:	f7ff ffea 	bl	8012068 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	3304      	adds	r3, #4
 8012098:	4618      	mov	r0, r3
 801209a:	f7f9 fc09 	bl	800b8b0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	4618      	mov	r0, r3
 80120a2:	3708      	adds	r7, #8
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}

080120a8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b082      	sub	sp, #8
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7ff ffe5 	bl	8012082 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f000 fae7 	bl	801268c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	4618      	mov	r0, r3
 80120c2:	3708      	adds	r7, #8
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd80      	pop	{r7, pc}

080120c8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7ff ffe8 	bl	80120a8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	4618      	mov	r0, r3
 80120dc:	3708      	adds	r7, #8
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}

080120e2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 80120e2:	b580      	push	{r7, lr}
 80120e4:	b082      	sub	sp, #8
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	6078      	str	r0, [r7, #4]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	4618      	mov	r0, r3
 80120ee:	f7ff ffeb 	bl	80120c8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	4618      	mov	r0, r3
 80120f6:	3708      	adds	r7, #8
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}

080120fc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 80120fc:	b580      	push	{r7, lr}
 80120fe:	ed2d 8b02 	vpush	{d8}
 8012102:	b088      	sub	sp, #32
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
 8012108:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f7ff fc53 	bl	80119b6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>
 8012110:	4603      	mov	r3, r0
 8012112:	2b00      	cmp	r3, #0
 8012114:	dd05      	ble.n	8012122 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	f7ff ff58 	bl	8011fcc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>
 801211c:	4603      	mov	r3, r0
 801211e:	2b00      	cmp	r3, #0
 8012120:	dc06      	bgt.n	8012130 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8012122:	4b16      	ldr	r3, [pc, #88]	; (801217c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8012124:	4a16      	ldr	r2, [pc, #88]	; (8012180 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8012126:	f240 119b 	movw	r1, #411	; 0x19b
 801212a:	4816      	ldr	r0, [pc, #88]	; (8012184 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 801212c:	f00b fd4a 	bl	801dbc4 <__assert_func>
 8012130:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f7ff ff5a 	bl	8011fec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8012138:	4602      	mov	r2, r0
 801213a:	f107 030c 	add.w	r3, r7, #12
 801213e:	4611      	mov	r1, r2
 8012140:	4618      	mov	r0, r3
 8012142:	f000 fa94 	bl	801266e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f7ff ff50 	bl	8011fec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 801214c:	4602      	mov	r2, r0
 801214e:	f107 030c 	add.w	r3, r7, #12
 8012152:	6839      	ldr	r1, [r7, #0]
 8012154:	4618      	mov	r0, r3
 8012156:	f000 faaf 	bl	80126b8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>
 801215a:	eeb0 8a40 	vmov.f32	s16, s0
 801215e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8012160:	f107 030c 	add.w	r3, r7, #12
 8012164:	4618      	mov	r0, r3
 8012166:	f7ff ffbc 	bl	80120e2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801216a:	eef0 7a48 	vmov.f32	s15, s16
}
 801216e:	eeb0 0a67 	vmov.f32	s0, s15
 8012172:	3720      	adds	r7, #32
 8012174:	46bd      	mov	sp, r7
 8012176:	ecbd 8b02 	vpop	{d8}
 801217a:	bd80      	pop	{r7, pc}
 801217c:	08024aac 	.word	0x08024aac
 8012180:	08028674 	.word	0x08028674
 8012184:	08024cb8 	.word	0x08024cb8

08012188 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8012188:	b480      	push	{r7}
 801218a:	b083      	sub	sp, #12
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	3310      	adds	r3, #16
 8012194:	4618      	mov	r0, r3
 8012196:	370c      	adds	r7, #12
 8012198:	46bd      	mov	sp, r7
 801219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219e:	4770      	bx	lr

080121a0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80121a0:	b480      	push	{r7}
 80121a2:	b083      	sub	sp, #12
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	4618      	mov	r0, r3
 80121ac:	370c      	adds	r7, #12
 80121ae:	46bd      	mov	sp, r7
 80121b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b4:	4770      	bx	lr

080121b6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80121b6:	b480      	push	{r7}
 80121b8:	b083      	sub	sp, #12
 80121ba:	af00      	add	r7, sp, #0
 80121bc:	6078      	str	r0, [r7, #4]
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	68db      	ldr	r3, [r3, #12]
 80121c2:	4618      	mov	r0, r3
 80121c4:	370c      	adds	r7, #12
 80121c6:	46bd      	mov	sp, r7
 80121c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121cc:	4770      	bx	lr

080121ce <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80121ce:	b580      	push	{r7, lr}
 80121d0:	b082      	sub	sp, #8
 80121d2:	af00      	add	r7, sp, #0
 80121d4:	6078      	str	r0, [r7, #4]
 80121d6:	6039      	str	r1, [r7, #0]
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	6839      	ldr	r1, [r7, #0]
 80121dc:	4618      	mov	r0, r3
 80121de:	f000 fa7c 	bl	80126da <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	4618      	mov	r0, r3
 80121e6:	3708      	adds	r7, #8
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}

080121ec <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>:
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b082      	sub	sp, #8
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
 80121f4:	6039      	str	r1, [r7, #0]
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6839      	ldr	r1, [r7, #0]
 80121fa:	4618      	mov	r0, r3
 80121fc:	f7f8 f8bb 	bl	800a376 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	4618      	mov	r0, r3
 8012204:	3708      	adds	r7, #8
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}

0801220a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 801220a:	b5b0      	push	{r4, r5, r7, lr}
 801220c:	b082      	sub	sp, #8
 801220e:	af00      	add	r7, sp, #0
 8012210:	6078      	str	r0, [r7, #4]
 8012212:	6039      	str	r1, [r7, #0]
    return m_d.func()(m_d.lhsImpl.coeff(index), m_d.rhsImpl.coeff(index));
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	4618      	mov	r0, r3
 8012218:	f000 fa6e 	bl	80126f8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 801221c:	4604      	mov	r4, r0
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	3304      	adds	r3, #4
 8012222:	6839      	ldr	r1, [r7, #0]
 8012224:	4618      	mov	r0, r3
 8012226:	f7ff fc7f 	bl	8011b28 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 801222a:	4605      	mov	r5, r0
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	330c      	adds	r3, #12
 8012230:	6839      	ldr	r1, [r7, #0]
 8012232:	4618      	mov	r0, r3
 8012234:	f7ff fc78 	bl	8011b28 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8012238:	4603      	mov	r3, r0
 801223a:	461a      	mov	r2, r3
 801223c:	4629      	mov	r1, r5
 801223e:	4620      	mov	r0, r4
 8012240:	f7f6 ff39 	bl	80090b6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012244:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012248:	eeb0 0a67 	vmov.f32	s0, s15
 801224c:	3708      	adds	r7, #8
 801224e:	46bd      	mov	sp, r7
 8012250:	bdb0      	pop	{r4, r5, r7, pc}

08012252 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8012252:	b590      	push	{r4, r7, lr}
 8012254:	b083      	sub	sp, #12
 8012256:	af00      	add	r7, sp, #0
 8012258:	6078      	str	r0, [r7, #4]
 801225a:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	f000 fa72 	bl	8012746 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	4618      	mov	r0, r3
 8012266:	f000 f81e 	bl	80122a6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 801226a:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	601a      	str	r2, [r3, #0]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	1d1c      	adds	r4, r3, #4
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	4618      	mov	r0, r3
 8012278:	f000 fa49 	bl	801270e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 801227c:	4603      	mov	r3, r0
 801227e:	4619      	mov	r1, r3
 8012280:	4620      	mov	r0, r4
 8012282:	f7f4 fb2d 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	1d5c      	adds	r4, r3, #5
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	4618      	mov	r0, r3
 801228e:	f000 fa4c 	bl	801272a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 8012292:	4603      	mov	r3, r0
 8012294:	4619      	mov	r1, r3
 8012296:	4620      	mov	r0, r4
 8012298:	f7f4 fb08 	bl	80068ac <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	4618      	mov	r0, r3
 80122a0:	370c      	adds	r7, #12
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd90      	pop	{r4, r7, pc}

080122a6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80122a6:	b480      	push	{r7}
 80122a8:	b083      	sub	sp, #12
 80122aa:	af00      	add	r7, sp, #0
 80122ac:	6078      	str	r0, [r7, #4]
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	4618      	mov	r0, r3
 80122b4:	370c      	adds	r7, #12
 80122b6:	46bd      	mov	sp, r7
 80122b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122bc:	4770      	bx	lr

080122be <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80122be:	b580      	push	{r7, lr}
 80122c0:	b082      	sub	sp, #8
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	6078      	str	r0, [r7, #4]
 80122c6:	6039      	str	r1, [r7, #0]
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f000 fa47 	bl	801275c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6839      	ldr	r1, [r7, #0]
 80122d2:	4618      	mov	r0, r3
 80122d4:	f000 fa4d 	bl	8012772 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	4618      	mov	r0, r3
 80122dc:	3708      	adds	r7, #8
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}

080122e2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80122e2:	b580      	push	{r7, lr}
 80122e4:	b082      	sub	sp, #8
 80122e6:	af00      	add	r7, sp, #0
 80122e8:	6078      	str	r0, [r7, #4]
 80122ea:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80122ec:	2200      	movs	r2, #0
 80122ee:	2100      	movs	r1, #0
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f000 fa66 	bl	80127c2 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 80122f6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80122fa:	eeb0 0a67 	vmov.f32	s0, s15
 80122fe:	3708      	adds	r7, #8
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}

08012304 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8012304:	b580      	push	{r7, lr}
 8012306:	b084      	sub	sp, #16
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
 801230c:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801230e:	6839      	ldr	r1, [r7, #0]
 8012310:	6878      	ldr	r0, [r7, #4]
 8012312:	f000 fa69 	bl	80127e8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>
 8012316:	eef0 7a40 	vmov.f32	s15, s0
 801231a:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 801231e:	6839      	ldr	r1, [r7, #0]
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f000 fa72 	bl	801280a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>
 8012326:	eef0 7a40 	vmov.f32	s15, s0
 801232a:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801232e:	f107 020c 	add.w	r2, r7, #12
 8012332:	f107 0308 	add.w	r3, r7, #8
 8012336:	4619      	mov	r1, r3
 8012338:	6838      	ldr	r0, [r7, #0]
 801233a:	f7f6 febc 	bl	80090b6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 801233e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012342:	eeb0 0a67 	vmov.f32	s0, s15
 8012346:	3710      	adds	r7, #16
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}

0801234c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 801234c:	b480      	push	{r7}
 801234e:	b083      	sub	sp, #12
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
 8012354:	6039      	str	r1, [r7, #0]
      : inner;
 8012356:	683b      	ldr	r3, [r7, #0]
  }
 8012358:	4618      	mov	r0, r3
 801235a:	370c      	adds	r7, #12
 801235c:	46bd      	mov	sp, r7
 801235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012362:	4770      	bx	lr

08012364 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8012364:	b480      	push	{r7}
 8012366:	b083      	sub	sp, #12
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
 801236c:	6039      	str	r1, [r7, #0]
      : outer;
 801236e:	687b      	ldr	r3, [r7, #4]
  }
 8012370:	4618      	mov	r0, r3
 8012372:	370c      	adds	r7, #12
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr

0801237c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 801237c:	b5b0      	push	{r4, r5, r7, lr}
 801237e:	b086      	sub	sp, #24
 8012380:	af00      	add	r7, sp, #0
 8012382:	60f8      	str	r0, [r7, #12]
 8012384:	60b9      	str	r1, [r7, #8]
 8012386:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	689c      	ldr	r4, [r3, #8]
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	687a      	ldr	r2, [r7, #4]
 8012392:	68b9      	ldr	r1, [r7, #8]
 8012394:	4618      	mov	r0, r3
 8012396:	f7f6 fb2d 	bl	80089f4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 801239a:	4605      	mov	r5, r0
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	685b      	ldr	r3, [r3, #4]
 80123a0:	687a      	ldr	r2, [r7, #4]
 80123a2:	68b9      	ldr	r1, [r7, #8]
 80123a4:	4618      	mov	r0, r3
 80123a6:	f000 fa41 	bl	801282c <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>
 80123aa:	eef0 7a40 	vmov.f32	s15, s0
 80123ae:	edc7 7a05 	vstr	s15, [r7, #20]
 80123b2:	f107 0314 	add.w	r3, r7, #20
 80123b6:	461a      	mov	r2, r3
 80123b8:	4629      	mov	r1, r5
 80123ba:	4620      	mov	r0, r4
 80123bc:	f000 fa69 	bl	8012892 <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>
  }
 80123c0:	bf00      	nop
 80123c2:	3718      	adds	r7, #24
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bdb0      	pop	{r4, r5, r7, pc}

080123c8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b082      	sub	sp, #8
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80123d0:	2202      	movs	r2, #2
 80123d2:	2100      	movs	r1, #0
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f7ff fc0d 	bl	8011bf4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f000 fa70 	bl	80128c0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>
  }
 80123e0:	bf00      	nop
 80123e2:	3708      	adds	r7, #8
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd80      	pop	{r7, pc}

080123e8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>:
    StorageIndex startRow() const EIGEN_NOEXCEPT
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b082      	sub	sp, #8
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
      return m_startRow.value();
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	3310      	adds	r3, #16
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7fd fff8 	bl	80103ea <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 80123fa:	4603      	mov	r3, r0
    }
 80123fc:	4618      	mov	r0, r3
 80123fe:	3708      	adds	r7, #8
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}

08012404 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>:
    StorageIndex startCol() const EIGEN_NOEXCEPT
 8012404:	b580      	push	{r7, lr}
 8012406:	b082      	sub	sp, #8
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
      return m_startCol.value();
 801240c:	f7fd fbbd 	bl	800fb8a <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 8012410:	4603      	mov	r3, r0
    }
 8012412:	4618      	mov	r0, r3
 8012414:	3708      	adds	r7, #8
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}

0801241a <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>:
  explicit unary_evaluator(const XprType& block)
 801241a:	b5b0      	push	{r4, r5, r7, lr}
 801241c:	b082      	sub	sp, #8
 801241e:	af00      	add	r7, sp, #0
 8012420:	6078      	str	r0, [r7, #4]
 8012422:	6039      	str	r1, [r7, #0]
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 8012424:	6878      	ldr	r0, [r7, #4]
 8012426:	f000 fa66 	bl	80128f6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 801242a:	687c      	ldr	r4, [r7, #4]
    : m_argImpl(block.nestedExpression()),
 801242c:	683b      	ldr	r3, [r7, #0]
 801242e:	4618      	mov	r0, r3
 8012430:	f000 fa56 	bl	80128e0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 8012434:	4603      	mov	r3, r0
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 8012436:	4619      	mov	r1, r3
 8012438:	4620      	mov	r0, r4
 801243a:	f000 fa67 	bl	801290c <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f103 0410 	add.w	r4, r3, #16
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	4618      	mov	r0, r3
 8012448:	f7ff ffce 	bl	80123e8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 801244c:	4603      	mov	r3, r0
 801244e:	4619      	mov	r1, r3
 8012450:	4620      	mov	r0, r4
 8012452:	f7fb fab9 	bl	800d9c8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f103 0414 	add.w	r4, r3, #20
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	4618      	mov	r0, r3
 8012460:	f7ff ffd0 	bl	8012404 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 8012464:	4603      	mov	r3, r0
 8012466:	4619      	mov	r1, r3
 8012468:	4620      	mov	r0, r4
 801246a:	f7fb fb21 	bl	800dab0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f103 0518 	add.w	r5, r3, #24
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	4618      	mov	r0, r3
 8012478:	f7ff ffc4 	bl	8012404 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 801247c:	4604      	mov	r4, r0
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	4618      	mov	r0, r3
 8012482:	f000 fa2d 	bl	80128e0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 8012486:	4603      	mov	r3, r0
 8012488:	4618      	mov	r0, r3
 801248a:	f7f5 fd6c 	bl	8007f66 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 801248e:	4603      	mov	r3, r0
 8012490:	fb03 f404 	mul.w	r4, r3, r4
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	4618      	mov	r0, r3
 8012498:	f7ff ffa6 	bl	80123e8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 801249c:	4603      	mov	r3, r0
 801249e:	4423      	add	r3, r4
 80124a0:	4619      	mov	r1, r3
 80124a2:	4628      	mov	r0, r5
 80124a4:	f7fb fa90 	bl	800d9c8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
  { }
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	4618      	mov	r0, r3
 80124ac:	3708      	adds	r7, #8
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bdb0      	pop	{r4, r5, r7, pc}

080124b2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80124b2:	b580      	push	{r7, lr}
 80124b4:	b082      	sub	sp, #8
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	689b      	ldr	r3, [r3, #8]
             ? m_xpr.innerStride()
 80124be:	4618      	mov	r0, r3
 80124c0:	f7f5 ffdc 	bl	800847c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 80124c4:	4603      	mov	r3, r0
    }
 80124c6:	4618      	mov	r0, r3
 80124c8:	3708      	adds	r7, #8
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}

080124ce <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80124ce:	b580      	push	{r7, lr}
 80124d0:	b082      	sub	sp, #8
 80124d2:	af00      	add	r7, sp, #0
 80124d4:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 80124da:	4618      	mov	r0, r3
 80124dc:	f7fb fa1e 	bl	800d91c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 80124e0:	4603      	mov	r3, r0
    }
 80124e2:	4618      	mov	r0, r3
 80124e4:	3708      	adds	r7, #8
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}

080124ea <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80124ea:	b480      	push	{r7}
 80124ec:	b083      	sub	sp, #12
 80124ee:	af00      	add	r7, sp, #0
 80124f0:	6078      	str	r0, [r7, #4]
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	4618      	mov	r0, r3
 80124f6:	370c      	adds	r7, #12
 80124f8:	46bd      	mov	sp, r7
 80124fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fe:	4770      	bx	lr

08012500 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8012500:	b480      	push	{r7}
 8012502:	b083      	sub	sp, #12
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	4618      	mov	r0, r3
 801250e:	370c      	adds	r7, #12
 8012510:	46bd      	mov	sp, r7
 8012512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012516:	4770      	bx	lr

08012518 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8012518:	b480      	push	{r7}
 801251a:	b083      	sub	sp, #12
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	685b      	ldr	r3, [r3, #4]
 8012524:	4618      	mov	r0, r3
 8012526:	370c      	adds	r7, #12
 8012528:	46bd      	mov	sp, r7
 801252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252e:	4770      	bx	lr

08012530 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>:
 8012530:	b480      	push	{r7}
 8012532:	b083      	sub	sp, #12
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	4618      	mov	r0, r3
 801253c:	370c      	adds	r7, #12
 801253e:	46bd      	mov	sp, r7
 8012540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012544:	4770      	bx	lr

08012546 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8012546:	b580      	push	{r7, lr}
 8012548:	b086      	sub	sp, #24
 801254a:	af00      	add	r7, sp, #0
 801254c:	60f8      	str	r0, [r7, #12]
 801254e:	60b9      	str	r1, [r7, #8]
 8012550:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8012552:	6879      	ldr	r1, [r7, #4]
 8012554:	68b8      	ldr	r0, [r7, #8]
 8012556:	f000 f9e8 	bl	801292a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 801255a:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 801255c:	6879      	ldr	r1, [r7, #4]
 801255e:	68b8      	ldr	r0, [r7, #8]
 8012560:	f000 f9ef 	bl	8012942 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8012564:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8012566:	693a      	ldr	r2, [r7, #16]
 8012568:	6979      	ldr	r1, [r7, #20]
 801256a:	68f8      	ldr	r0, [r7, #12]
 801256c:	f000 f9f5 	bl	801295a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8012570:	bf00      	nop
 8012572:	3718      	adds	r7, #24
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}

08012578 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012580:	2201      	movs	r2, #1
 8012582:	2100      	movs	r1, #0
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f7ff ffde 	bl	8012546 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f000 fa0b 	bl	80129a6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>
  }
 8012590:	bf00      	nop
 8012592:	3708      	adds	r7, #8
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}

08012598 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
 80125a0:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	6839      	ldr	r1, [r7, #0]
 80125a6:	4618      	mov	r0, r3
 80125a8:	f000 fa0d 	bl	80129c6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	4618      	mov	r0, r3
 80125b0:	f000 fa33 	bl	8012a1a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 80125b4:	bf00      	nop
  }
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	4618      	mov	r0, r3
 80125ba:	3708      	adds	r7, #8
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80125c8:	f7f4 f9b7 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80125cc:	4603      	mov	r3, r0
  }
 80125ce:	4618      	mov	r0, r3
 80125d0:	3708      	adds	r7, #8
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}

080125d6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80125d6:	b580      	push	{r7, lr}
 80125d8:	b082      	sub	sp, #8
 80125da:	af00      	add	r7, sp, #0
 80125dc:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80125de:	f7f4 f9a4 	bl	800692a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80125e2:	4603      	mov	r3, r0
  }
 80125e4:	4618      	mov	r0, r3
 80125e6:	3708      	adds	r7, #8
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bd80      	pop	{r7, pc}

080125ec <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b082      	sub	sp, #8
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	4618      	mov	r0, r3
 80125f8:	f000 fa1b 	bl	8012a32 <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 80125fc:	4603      	mov	r3, r0
 80125fe:	4618      	mov	r0, r3
 8012600:	3708      	adds	r7, #8
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}

08012606 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012606:	b480      	push	{r7}
 8012608:	b083      	sub	sp, #12
 801260a:	af00      	add	r7, sp, #0
 801260c:	6078      	str	r0, [r7, #4]
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	4618      	mov	r0, r3
 8012612:	370c      	adds	r7, #12
 8012614:	46bd      	mov	sp, r7
 8012616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261a:	4770      	bx	lr

0801261c <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 801261c:	b580      	push	{r7, lr}
 801261e:	b084      	sub	sp, #16
 8012620:	af00      	add	r7, sp, #0
 8012622:	60f8      	str	r0, [r7, #12]
 8012624:	60b9      	str	r1, [r7, #8]
 8012626:	607a      	str	r2, [r7, #4]
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	687a      	ldr	r2, [r7, #4]
 801262c:	68b9      	ldr	r1, [r7, #8]
 801262e:	4618      	mov	r0, r3
 8012630:	f000 fa16 	bl	8012a60 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	4618      	mov	r0, r3
 8012638:	3710      	adds	r7, #16
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}

0801263e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801263e:	b480      	push	{r7}
 8012640:	b083      	sub	sp, #12
 8012642:	af00      	add	r7, sp, #0
 8012644:	6078      	str	r0, [r7, #4]
    }
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	4618      	mov	r0, r3
 801264a:	370c      	adds	r7, #12
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr

08012654 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8012654:	b580      	push	{r7, lr}
 8012656:	b082      	sub	sp, #8
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	4618      	mov	r0, r3
 8012660:	f7f9 f83d 	bl	800b6de <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8012664:	4603      	mov	r3, r0
    }
 8012666:	4618      	mov	r0, r3
 8012668:	3708      	adds	r7, #8
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}

0801266e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 801266e:	b580      	push	{r7, lr}
 8012670:	b082      	sub	sp, #8
 8012672:	af00      	add	r7, sp, #0
 8012674:	6078      	str	r0, [r7, #4]
 8012676:	6039      	str	r1, [r7, #0]
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	6839      	ldr	r1, [r7, #0]
 801267c:	4618      	mov	r0, r3
 801267e:	f000 fa25 	bl	8012acc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	4618      	mov	r0, r3
 8012686:	3708      	adds	r7, #8
 8012688:	46bd      	mov	sp, r7
 801268a:	bd80      	pop	{r7, pc}

0801268c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 801268c:	b480      	push	{r7}
 801268e:	b083      	sub	sp, #12
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	4618      	mov	r0, r3
 8012698:	370c      	adds	r7, #12
 801269a:	46bd      	mov	sp, r7
 801269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a0:	4770      	bx	lr

080126a2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
 80126a2:	b480      	push	{r7}
 80126a4:	b083      	sub	sp, #12
 80126a6:	af00      	add	r7, sp, #0
 80126a8:	6078      	str	r0, [r7, #4]
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	4618      	mov	r0, r3
 80126ae:	370c      	adds	r7, #12
 80126b0:	46bd      	mov	sp, r7
 80126b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b6:	4770      	bx	lr

080126b8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b084      	sub	sp, #16
 80126bc:	af00      	add	r7, sp, #0
 80126be:	60f8      	str	r0, [r7, #12]
 80126c0:	60b9      	str	r1, [r7, #8]
 80126c2:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80126c4:	68b9      	ldr	r1, [r7, #8]
 80126c6:	68f8      	ldr	r0, [r7, #12]
 80126c8:	f000 fa0f 	bl	8012aea <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>
 80126cc:	eef0 7a40 	vmov.f32	s15, s0
  }
 80126d0:	eeb0 0a67 	vmov.f32	s0, s15
 80126d4:	3710      	adds	r7, #16
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}

080126da <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80126da:	b580      	push	{r7, lr}
 80126dc:	b082      	sub	sp, #8
 80126de:	af00      	add	r7, sp, #0
 80126e0:	6078      	str	r0, [r7, #4]
 80126e2:	6039      	str	r1, [r7, #0]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	6839      	ldr	r1, [r7, #0]
 80126e8:	4618      	mov	r0, r3
 80126ea:	f000 fa22 	bl	8012b32 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	4618      	mov	r0, r3
 80126f2:	3708      	adds	r7, #8
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80126f8:	b480      	push	{r7}
 80126fa:	b083      	sub	sp, #12
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	4618      	mov	r0, r3
 8012704:	370c      	adds	r7, #12
 8012706:	46bd      	mov	sp, r7
 8012708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270c:	4770      	bx	lr

0801270e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801270e:	b580      	push	{r7, lr}
 8012710:	b082      	sub	sp, #8
 8012712:	af00      	add	r7, sp, #0
 8012714:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	689b      	ldr	r3, [r3, #8]
 801271a:	4618      	mov	r0, r3
 801271c:	f7fb f973 	bl	800da06 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 8012720:	4603      	mov	r3, r0
    }
 8012722:	4618      	mov	r0, r3
 8012724:	3708      	adds	r7, #8
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}

0801272a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801272a:	b580      	push	{r7, lr}
 801272c:	b082      	sub	sp, #8
 801272e:	af00      	add	r7, sp, #0
 8012730:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	689b      	ldr	r3, [r3, #8]
 8012736:	4618      	mov	r0, r3
 8012738:	f7f4 fcd6 	bl	80070e8 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 801273c:	4603      	mov	r3, r0
    }
 801273e:	4618      	mov	r0, r3
 8012740:	3708      	adds	r7, #8
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}

08012746 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012746:	b480      	push	{r7}
 8012748:	b083      	sub	sp, #12
 801274a:	af00      	add	r7, sp, #0
 801274c:	6078      	str	r0, [r7, #4]
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	4618      	mov	r0, r3
 8012752:	370c      	adds	r7, #12
 8012754:	46bd      	mov	sp, r7
 8012756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275a:	4770      	bx	lr

0801275c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 801275c:	b480      	push	{r7}
 801275e:	b083      	sub	sp, #12
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	4618      	mov	r0, r3
 8012768:	370c      	adds	r7, #12
 801276a:	46bd      	mov	sp, r7
 801276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012770:	4770      	bx	lr

08012772 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8012772:	b590      	push	{r4, r7, lr}
 8012774:	b083      	sub	sp, #12
 8012776:	af00      	add	r7, sp, #0
 8012778:	6078      	str	r0, [r7, #4]
 801277a:	6039      	str	r1, [r7, #0]
 801277c:	687c      	ldr	r4, [r7, #4]
 801277e:	6838      	ldr	r0, [r7, #0]
 8012780:	f000 fa14 	bl	8012bac <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 8012784:	4603      	mov	r3, r0
 8012786:	4619      	mov	r1, r3
 8012788:	4620      	mov	r0, r4
 801278a:	f7f2 fe2f 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	1d1c      	adds	r4, r3, #4
 8012792:	6838      	ldr	r0, [r7, #0]
 8012794:	f000 fa16 	bl	8012bc4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>
 8012798:	4603      	mov	r3, r0
 801279a:	4619      	mov	r1, r3
 801279c:	4620      	mov	r0, r4
 801279e:	f000 fa28 	bl	8012bf2 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f103 0408 	add.w	r4, r3, #8
 80127a8:	6838      	ldr	r0, [r7, #0]
 80127aa:	f000 fa16 	bl	8012bda <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>
 80127ae:	4603      	mov	r3, r0
 80127b0:	4619      	mov	r1, r3
 80127b2:	4620      	mov	r0, r4
 80127b4:	f7f8 fdd9 	bl	800b36a <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	4618      	mov	r0, r3
 80127bc:	370c      	adds	r7, #12
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd90      	pop	{r4, r7, pc}

080127c2 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 80127c2:	b580      	push	{r7, lr}
 80127c4:	b084      	sub	sp, #16
 80127c6:	af00      	add	r7, sp, #0
 80127c8:	60f8      	str	r0, [r7, #12]
 80127ca:	60b9      	str	r1, [r7, #8]
 80127cc:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	68ba      	ldr	r2, [r7, #8]
 80127d2:	6879      	ldr	r1, [r7, #4]
 80127d4:	4618      	mov	r0, r3
 80127d6:	f000 fa1b 	bl	8012c10 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>
 80127da:	eef0 7a40 	vmov.f32	s15, s0
 80127de:	eeb0 0a67 	vmov.f32	s0, s15
 80127e2:	3710      	adds	r7, #16
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}

080127e8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b082      	sub	sp, #8
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
 80127f0:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80127f2:	2201      	movs	r2, #1
 80127f4:	2100      	movs	r1, #0
 80127f6:	6878      	ldr	r0, [r7, #4]
 80127f8:	f7ff ffe3 	bl	80127c2 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 80127fc:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012800:	eeb0 0a67 	vmov.f32	s0, s15
 8012804:	3708      	adds	r7, #8
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}

0801280a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801280a:	b580      	push	{r7, lr}
 801280c:	b082      	sub	sp, #8
 801280e:	af00      	add	r7, sp, #0
 8012810:	6078      	str	r0, [r7, #4]
 8012812:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012814:	2202      	movs	r2, #2
 8012816:	2100      	movs	r1, #0
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f7ff ffd2 	bl	80127c2 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 801281e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012822:	eeb0 0a67 	vmov.f32	s0, s15
 8012826:	3708      	adds	r7, #8
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}

0801282c <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 801282c:	b580      	push	{r7, lr}
 801282e:	b0a4      	sub	sp, #144	; 0x90
 8012830:	af00      	add	r7, sp, #0
 8012832:	60f8      	str	r0, [r7, #12]
 8012834:	60b9      	str	r1, [r7, #8]
 8012836:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	6819      	ldr	r1, [r3, #0]
 801283c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012840:	68ba      	ldr	r2, [r7, #8]
 8012842:	4618      	mov	r0, r3
 8012844:	f7f8 fc16 	bl	800b074 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 8012848:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801284c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012850:	4611      	mov	r1, r2
 8012852:	4618      	mov	r0, r3
 8012854:	f7f8 fc21 	bl	800b09a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	6859      	ldr	r1, [r3, #4]
 801285c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012860:	687a      	ldr	r2, [r7, #4]
 8012862:	4618      	mov	r0, r3
 8012864:	f000 f9ff 	bl	8012c66 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>
 8012868:	f107 0314 	add.w	r3, r7, #20
 801286c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012870:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012874:	4618      	mov	r0, r3
 8012876:	f000 fa09 	bl	8012c8c <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 801287a:	f107 0314 	add.w	r3, r7, #20
 801287e:	4618      	mov	r0, r3
 8012880:	f000 fa32 	bl	8012ce8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>
 8012884:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012888:	eeb0 0a67 	vmov.f32	s0, s15
 801288c:	3790      	adds	r7, #144	; 0x90
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}

08012892 <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 8012892:	b480      	push	{r7}
 8012894:	b085      	sub	sp, #20
 8012896:	af00      	add	r7, sp, #0
 8012898:	60f8      	str	r0, [r7, #12]
 801289a:	60b9      	str	r1, [r7, #8]
 801289c:	607a      	str	r2, [r7, #4]
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	ed93 7a00 	vldr	s14, [r3]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	edd3 7a00 	vldr	s15, [r3]
 80128aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80128ae:	68bb      	ldr	r3, [r7, #8]
 80128b0:	edc3 7a00 	vstr	s15, [r3]
 80128b4:	bf00      	nop
 80128b6:	3714      	adds	r7, #20
 80128b8:	46bd      	mov	sp, r7
 80128ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128be:	4770      	bx	lr

080128c0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b082      	sub	sp, #8
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80128c8:	2200      	movs	r2, #0
 80128ca:	2101      	movs	r1, #1
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f7ff f991 	bl	8011bf4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	f000 fa23 	bl	8012d1e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>
  }
 80128d8:	bf00      	nop
 80128da:	3708      	adds	r7, #8
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}

080128e0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>:
    const typename internal::remove_all<XprTypeNested>::type& nestedExpression() const
 80128e0:	b480      	push	{r7}
 80128e2:	b083      	sub	sp, #12
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
      return m_xpr;
 80128e8:	687b      	ldr	r3, [r7, #4]
    }
 80128ea:	4618      	mov	r0, r3
 80128ec:	370c      	adds	r7, #12
 80128ee:	46bd      	mov	sp, r7
 80128f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f4:	4770      	bx	lr

080128f6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80128f6:	b480      	push	{r7}
 80128f8:	b083      	sub	sp, #12
 80128fa:	af00      	add	r7, sp, #0
 80128fc:	6078      	str	r0, [r7, #4]
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	4618      	mov	r0, r3
 8012902:	370c      	adds	r7, #12
 8012904:	46bd      	mov	sp, r7
 8012906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290a:	4770      	bx	lr

0801290c <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801290c:	b580      	push	{r7, lr}
 801290e:	b082      	sub	sp, #8
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
 8012914:	6039      	str	r1, [r7, #0]
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	6839      	ldr	r1, [r7, #0]
 801291a:	4618      	mov	r0, r3
 801291c:	f7f7 fb49 	bl	8009fb2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	4618      	mov	r0, r3
 8012924:	3708      	adds	r7, #8
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}

0801292a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 801292a:	b480      	push	{r7}
 801292c:	b083      	sub	sp, #12
 801292e:	af00      	add	r7, sp, #0
 8012930:	6078      	str	r0, [r7, #4]
 8012932:	6039      	str	r1, [r7, #0]
      : inner;
 8012934:	683b      	ldr	r3, [r7, #0]
  }
 8012936:	4618      	mov	r0, r3
 8012938:	370c      	adds	r7, #12
 801293a:	46bd      	mov	sp, r7
 801293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012940:	4770      	bx	lr

08012942 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8012942:	b480      	push	{r7}
 8012944:	b083      	sub	sp, #12
 8012946:	af00      	add	r7, sp, #0
 8012948:	6078      	str	r0, [r7, #4]
 801294a:	6039      	str	r1, [r7, #0]
      : outer;
 801294c:	687b      	ldr	r3, [r7, #4]
  }
 801294e:	4618      	mov	r0, r3
 8012950:	370c      	adds	r7, #12
 8012952:	46bd      	mov	sp, r7
 8012954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012958:	4770      	bx	lr

0801295a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 801295a:	b5b0      	push	{r4, r5, r7, lr}
 801295c:	b086      	sub	sp, #24
 801295e:	af00      	add	r7, sp, #0
 8012960:	60f8      	str	r0, [r7, #12]
 8012962:	60b9      	str	r1, [r7, #8]
 8012964:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	689c      	ldr	r4, [r3, #8]
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	687a      	ldr	r2, [r7, #4]
 8012970:	68b9      	ldr	r1, [r7, #8]
 8012972:	4618      	mov	r0, r3
 8012974:	f7f6 f83e 	bl	80089f4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8012978:	4605      	mov	r5, r0
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	685b      	ldr	r3, [r3, #4]
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	68b9      	ldr	r1, [r7, #8]
 8012982:	4618      	mov	r0, r3
 8012984:	f000 f9db 	bl	8012d3e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>
 8012988:	eef0 7a40 	vmov.f32	s15, s0
 801298c:	edc7 7a05 	vstr	s15, [r7, #20]
 8012990:	f107 0314 	add.w	r3, r7, #20
 8012994:	461a      	mov	r2, r3
 8012996:	4629      	mov	r1, r5
 8012998:	4620      	mov	r0, r4
 801299a:	f7f5 fd9b 	bl	80084d4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 801299e:	bf00      	nop
 80129a0:	3718      	adds	r7, #24
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bdb0      	pop	{r4, r5, r7, pc}

080129a6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80129a6:	b580      	push	{r7, lr}
 80129a8:	b082      	sub	sp, #8
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80129ae:	2202      	movs	r2, #2
 80129b0:	2100      	movs	r1, #0
 80129b2:	6878      	ldr	r0, [r7, #4]
 80129b4:	f7ff fdc7 	bl	8012546 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80129b8:	6878      	ldr	r0, [r7, #4]
 80129ba:	f000 f9f3 	bl	8012da4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>
  }
 80129be:	bf00      	nop
 80129c0:	3708      	adds	r7, #8
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}

080129c6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 80129c6:	b590      	push	{r4, r7, lr}
 80129c8:	b083      	sub	sp, #12
 80129ca:	af00      	add	r7, sp, #0
 80129cc:	6078      	str	r0, [r7, #4]
 80129ce:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	f000 fa13 	bl	8012dfc <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	4618      	mov	r0, r3
 80129da:	f000 f81e 	bl	8012a1a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 80129de:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	601a      	str	r2, [r3, #0]
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	1d1c      	adds	r4, r3, #4
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	4618      	mov	r0, r3
 80129ec:	f000 f9ea 	bl	8012dc4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>
 80129f0:	4603      	mov	r3, r0
 80129f2:	4619      	mov	r1, r3
 80129f4:	4620      	mov	r0, r4
 80129f6:	f7f3 ff59 	bl	80068ac <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	1d5c      	adds	r4, r3, #5
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	4618      	mov	r0, r3
 8012a02:	f000 f9ed 	bl	8012de0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>
 8012a06:	4603      	mov	r3, r0
 8012a08:	4619      	mov	r1, r3
 8012a0a:	4620      	mov	r0, r4
 8012a0c:	f7f3 ff68 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	4618      	mov	r0, r3
 8012a14:	370c      	adds	r7, #12
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd90      	pop	{r4, r7, pc}

08012a1a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>:
 8012a1a:	b480      	push	{r7}
 8012a1c:	b083      	sub	sp, #12
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	6078      	str	r0, [r7, #4]
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	4618      	mov	r0, r3
 8012a28:	370c      	adds	r7, #12
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a30:	4770      	bx	lr

08012a32 <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8012a32:	b480      	push	{r7}
 8012a34:	b083      	sub	sp, #12
 8012a36:	af00      	add	r7, sp, #0
 8012a38:	6078      	str	r0, [r7, #4]
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	370c      	adds	r7, #12
 8012a40:	46bd      	mov	sp, r7
 8012a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a46:	4770      	bx	lr

08012a48 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b082      	sub	sp, #8
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
 8012a50:	6878      	ldr	r0, [r7, #4]
 8012a52:	f000 f9de 	bl	8012e12 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>
 8012a56:	4603      	mov	r3, r0
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3708      	adds	r7, #8
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}

08012a60 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8012a60:	b5b0      	push	{r4, r5, r7, lr}
 8012a62:	b084      	sub	sp, #16
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	60f8      	str	r0, [r7, #12]
 8012a68:	60b9      	str	r1, [r7, #8]
 8012a6a:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8012a6c:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8012a6e:	68b8      	ldr	r0, [r7, #8]
 8012a70:	f000 f9db 	bl	8012e2a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>
 8012a74:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8012a76:	68b8      	ldr	r0, [r7, #8]
 8012a78:	f000 f9ff 	bl	8012e7a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8012a7c:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	fb02 f303 	mul.w	r3, r2, r3
 8012a84:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8012a86:	441d      	add	r5, r3
 8012a88:	68b8      	ldr	r0, [r7, #8]
 8012a8a:	f7f3 f822 	bl	8005ad2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8012a8e:	4602      	mov	r2, r0
 8012a90:	2301      	movs	r3, #1
 8012a92:	4629      	mov	r1, r5
 8012a94:	4620      	mov	r0, r4
 8012a96:	f000 fa11 	bl	8012ebc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	3308      	adds	r3, #8
 8012a9e:	68ba      	ldr	r2, [r7, #8]
 8012aa0:	6812      	ldr	r2, [r2, #0]
 8012aa2:	601a      	str	r2, [r3, #0]
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	330c      	adds	r3, #12
 8012aa8:	2100      	movs	r1, #0
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f7fa ff8c 	bl	800d9c8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	3310      	adds	r3, #16
 8012ab4:	6879      	ldr	r1, [r7, #4]
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f7fa fffa 	bl	800dab0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 8012abc:	68f8      	ldr	r0, [r7, #12]
 8012abe:	f000 fa3b 	bl	8012f38 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>
    }
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3710      	adds	r7, #16
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bdb0      	pop	{r4, r5, r7, pc}

08012acc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b082      	sub	sp, #8
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
 8012ad4:	6039      	str	r1, [r7, #0]
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6839      	ldr	r1, [r7, #0]
 8012ada:	4618      	mov	r0, r3
 8012adc:	f000 fa3c 	bl	8012f58 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	3708      	adds	r7, #8
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}

08012aea <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8012aea:	b580      	push	{r7, lr}
 8012aec:	b084      	sub	sp, #16
 8012aee:	af00      	add	r7, sp, #0
 8012af0:	6078      	str	r0, [r7, #4]
 8012af2:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012af4:	6839      	ldr	r1, [r7, #0]
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f000 fa40 	bl	8012f7c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>
 8012afc:	eef0 7a40 	vmov.f32	s15, s0
 8012b00:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8012b04:	6839      	ldr	r1, [r7, #0]
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f000 fa49 	bl	8012f9e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>
 8012b0c:	eef0 7a40 	vmov.f32	s15, s0
 8012b10:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012b14:	f107 020c 	add.w	r2, r7, #12
 8012b18:	f107 0308 	add.w	r3, r7, #8
 8012b1c:	4619      	mov	r1, r3
 8012b1e:	6838      	ldr	r0, [r7, #0]
 8012b20:	f7f6 fac9 	bl	80090b6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012b24:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012b28:	eeb0 0a67 	vmov.f32	s0, s15
 8012b2c:	3710      	adds	r7, #16
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	bd80      	pop	{r7, pc}

08012b32 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>:
  explicit product_evaluator(const XprType& xpr)
 8012b32:	b5b0      	push	{r4, r5, r7, lr}
 8012b34:	b084      	sub	sp, #16
 8012b36:	af00      	add	r7, sp, #0
 8012b38:	6078      	str	r0, [r7, #4]
 8012b3a:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f000 fa51 	bl	8012fe6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	1d1c      	adds	r4, r3, #4
 8012b48:	6838      	ldr	r0, [r7, #0]
 8012b4a:	f7f3 f8f9 	bl	8005d40 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	60bb      	str	r3, [r7, #8]
 8012b52:	6838      	ldr	r0, [r7, #0]
 8012b54:	f7f3 f901 	bl	8005d5a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	60fb      	str	r3, [r7, #12]
 8012b5c:	f107 020c 	add.w	r2, r7, #12
 8012b60:	f107 0308 	add.w	r3, r7, #8
 8012b64:	4619      	mov	r1, r3
 8012b66:	4620      	mov	r0, r4
 8012b68:	f000 fa4a 	bl	8013000 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	4619      	mov	r1, r3
 8012b70:	2004      	movs	r0, #4
 8012b72:	f7ee f9e3 	bl	8000f3c <_ZnwjPv>
 8012b76:	4602      	mov	r2, r0
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	3304      	adds	r3, #4
 8012b7c:	4619      	mov	r1, r3
 8012b7e:	4610      	mov	r0, r2
 8012b80:	f7f7 fbf9 	bl	800a376 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	1d1c      	adds	r4, r3, #4
 8012b88:	6838      	ldr	r0, [r7, #0]
 8012b8a:	f000 fa52 	bl	8013032 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 8012b8e:	4605      	mov	r5, r0
 8012b90:	6838      	ldr	r0, [r7, #0]
 8012b92:	f000 fa59 	bl	8013048 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 8012b96:	4603      	mov	r3, r0
 8012b98:	461a      	mov	r2, r3
 8012b9a:	4629      	mov	r1, r5
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	f000 fa5f 	bl	8013060 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>
  }
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	3710      	adds	r7, #16
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bdb0      	pop	{r4, r5, r7, pc}

08012bac <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8012bac:	b480      	push	{r7}
 8012bae:	b083      	sub	sp, #12
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	3308      	adds	r3, #8
 8012bb8:	4618      	mov	r0, r3
 8012bba:	370c      	adds	r7, #12
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc2:	4770      	bx	lr

08012bc4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8012bc4:	b480      	push	{r7}
 8012bc6:	b083      	sub	sp, #12
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	4618      	mov	r0, r3
 8012bd0:	370c      	adds	r7, #12
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd8:	4770      	bx	lr

08012bda <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8012bda:	b480      	push	{r7}
 8012bdc:	b083      	sub	sp, #12
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	6078      	str	r0, [r7, #4]
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	685b      	ldr	r3, [r3, #4]
 8012be6:	4618      	mov	r0, r3
 8012be8:	370c      	adds	r7, #12
 8012bea:	46bd      	mov	sp, r7
 8012bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf0:	4770      	bx	lr

08012bf2 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8012bf2:	b580      	push	{r7, lr}
 8012bf4:	b082      	sub	sp, #8
 8012bf6:	af00      	add	r7, sp, #0
 8012bf8:	6078      	str	r0, [r7, #4]
 8012bfa:	6039      	str	r1, [r7, #0]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	6839      	ldr	r1, [r7, #0]
 8012c00:	4618      	mov	r0, r3
 8012c02:	f000 fa55 	bl	80130b0 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	4618      	mov	r0, r3
 8012c0a:	3708      	adds	r7, #8
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	bd80      	pop	{r7, pc}

08012c10 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8012c10:	b590      	push	{r4, r7, lr}
 8012c12:	b087      	sub	sp, #28
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	60f8      	str	r0, [r7, #12]
 8012c18:	60b9      	str	r1, [r7, #8]
 8012c1a:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f000 fa55 	bl	80130ce <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 8012c24:	4604      	mov	r4, r0
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	3304      	adds	r3, #4
 8012c2a:	687a      	ldr	r2, [r7, #4]
 8012c2c:	68b9      	ldr	r1, [r7, #8]
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f000 fa58 	bl	80130e4 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 8012c34:	eef0 7a40 	vmov.f32	s15, s0
 8012c38:	edc7 7a05 	vstr	s15, [r7, #20]
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	3308      	adds	r3, #8
 8012c40:	687a      	ldr	r2, [r7, #4]
 8012c42:	68b9      	ldr	r1, [r7, #8]
 8012c44:	4618      	mov	r0, r3
 8012c46:	f7fe f9d0 	bl	8010fea <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 8012c4a:	4602      	mov	r2, r0
 8012c4c:	f107 0314 	add.w	r3, r7, #20
 8012c50:	4619      	mov	r1, r3
 8012c52:	4620      	mov	r0, r4
 8012c54:	f7fc fa70 	bl	800f138 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8012c58:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8012c60:	371c      	adds	r7, #28
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd90      	pop	{r4, r7, pc}

08012c66 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 8012c66:	b580      	push	{r7, lr}
 8012c68:	b084      	sub	sp, #16
 8012c6a:	af00      	add	r7, sp, #0
 8012c6c:	60f8      	str	r0, [r7, #12]
 8012c6e:	60b9      	str	r1, [r7, #8]
 8012c70:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8012c72:	68b8      	ldr	r0, [r7, #8]
 8012c74:	f7f2 ff6a 	bl	8005b4c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	687a      	ldr	r2, [r7, #4]
 8012c7c:	4619      	mov	r1, r3
 8012c7e:	68f8      	ldr	r0, [r7, #12]
 8012c80:	f000 fa46 	bl	8013110 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>
}
 8012c84:	68f8      	ldr	r0, [r7, #12]
 8012c86:	3710      	adds	r7, #16
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}

08012c8c <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8012c8c:	b5b0      	push	{r4, r5, r7, lr}
 8012c8e:	b086      	sub	sp, #24
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	60f8      	str	r0, [r7, #12]
 8012c94:	60b9      	str	r1, [r7, #8]
 8012c96:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8012c98:	68b8      	ldr	r0, [r7, #8]
 8012c9a:	f7f8 ffff 	bl	800bc9c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012c9e:	4604      	mov	r4, r0
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f000 fa5d 	bl	8013160 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>
 8012ca6:	4605      	mov	r5, r0
 8012ca8:	f107 0314 	add.w	r3, r7, #20
 8012cac:	4618      	mov	r0, r3
 8012cae:	f7f2 fb13 	bl	80052d8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8012cb2:	f107 0314 	add.w	r3, r7, #20
 8012cb6:	462a      	mov	r2, r5
 8012cb8:	4621      	mov	r1, r4
 8012cba:	68f8      	ldr	r0, [r7, #12]
 8012cbc:	f000 fa8a 	bl	80131d4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 8012cc0:	68f8      	ldr	r0, [r7, #12]
 8012cc2:	3718      	adds	r7, #24
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bdb0      	pop	{r4, r5, r7, pc}

08012cc8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b082      	sub	sp, #8
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f000 fadd 	bl	8013290 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f000 fae4 	bl	80132a6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3708      	adds	r7, #8
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}

08012ce8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8012ce8:	b590      	push	{r4, r7, lr}
 8012cea:	b085      	sub	sp, #20
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f000 facd 	bl	8013290 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012cf6:	4604      	mov	r4, r0
 8012cf8:	f107 030c 	add.w	r3, r7, #12
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f7f2 fde2 	bl	80058c6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8012d02:	f107 030c 	add.w	r3, r7, #12
 8012d06:	4619      	mov	r1, r3
 8012d08:	4620      	mov	r0, r4
 8012d0a:	f000 fb49 	bl	80133a0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8012d0e:	eef0 7a40 	vmov.f32	s15, s0
 8012d12:	bf00      	nop
}
 8012d14:	eeb0 0a67 	vmov.f32	s0, s15
 8012d18:	3714      	adds	r7, #20
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd90      	pop	{r4, r7, pc}

08012d1e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012d1e:	b580      	push	{r7, lr}
 8012d20:	b082      	sub	sp, #8
 8012d22:	af00      	add	r7, sp, #0
 8012d24:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012d26:	2201      	movs	r2, #1
 8012d28:	2101      	movs	r1, #1
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f7fe ff62 	bl	8011bf4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f000 fb7b 	bl	801342c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>
  }
 8012d36:	bf00      	nop
 8012d38:	3708      	adds	r7, #8
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd80      	pop	{r7, pc}

08012d3e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 8012d3e:	b580      	push	{r7, lr}
 8012d40:	b0a4      	sub	sp, #144	; 0x90
 8012d42:	af00      	add	r7, sp, #0
 8012d44:	60f8      	str	r0, [r7, #12]
 8012d46:	60b9      	str	r1, [r7, #8]
 8012d48:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	6819      	ldr	r1, [r3, #0]
 8012d4e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012d52:	68ba      	ldr	r2, [r7, #8]
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7f7 ffbd 	bl	800acd4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 8012d5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012d5e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012d62:	4611      	mov	r1, r2
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7f7 ffc8 	bl	800acfa <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	6859      	ldr	r1, [r3, #4]
 8012d6e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012d72:	687a      	ldr	r2, [r7, #4]
 8012d74:	4618      	mov	r0, r3
 8012d76:	f7f9 f9f4 	bl	800c162 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 8012d7a:	f107 0314 	add.w	r3, r7, #20
 8012d7e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012d82:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7f9 f9fe 	bl	800c188 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8012d8c:	f107 0314 	add.w	r3, r7, #20
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7f9 fa27 	bl	800c1e4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 8012d96:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8012d9e:	3790      	adds	r7, #144	; 0x90
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}

08012da4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b082      	sub	sp, #8
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012dac:	2200      	movs	r2, #0
 8012dae:	2101      	movs	r1, #1
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f7ff fbc8 	bl	8012546 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f000 fb48 	bl	801344c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>
  }
 8012dbc:	bf00      	nop
 8012dbe:	3708      	adds	r7, #8
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}

08012dc4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	3308      	adds	r3, #8
             ? m_xpr.innerStride()
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7fd fc40 	bl	8010656 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>
 8012dd6:	4603      	mov	r3, r0
    }
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3708      	adds	r7, #8
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}

08012de0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b082      	sub	sp, #8
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7fd fc1e 	bl	801062e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 8012df2:	4603      	mov	r3, r0
    }
 8012df4:	4618      	mov	r0, r3
 8012df6:	3708      	adds	r7, #8
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}

08012dfc <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012dfc:	b480      	push	{r7}
 8012dfe:	b083      	sub	sp, #12
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	4618      	mov	r0, r3
 8012e08:	370c      	adds	r7, #12
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e10:	4770      	bx	lr

08012e12 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 8012e12:	b580      	push	{r7, lr}
 8012e14:	b082      	sub	sp, #8
 8012e16:	af00      	add	r7, sp, #0
 8012e18:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8012e1a:	6878      	ldr	r0, [r7, #4]
 8012e1c:	f000 fb36 	bl	801348c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>
 8012e20:	4603      	mov	r3, r0
    }
 8012e22:	4618      	mov	r0, r3
 8012e24:	3708      	adds	r7, #8
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}

08012e2a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 8012e2a:	b580      	push	{r7, lr}
 8012e2c:	b082      	sub	sp, #8
 8012e2e:	af00      	add	r7, sp, #0
 8012e30:	6078      	str	r0, [r7, #4]
 8012e32:	6878      	ldr	r0, [r7, #4]
 8012e34:	f7f2 fe1e 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f7fe fd63 	bl	8011906 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8012e40:	4603      	mov	r3, r0
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7ff fbd2 	bl	80125ec <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3708      	adds	r7, #8
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}

08012e52 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 8012e52:	b580      	push	{r7, lr}
 8012e54:	b082      	sub	sp, #8
 8012e56:	af00      	add	r7, sp, #0
 8012e58:	6078      	str	r0, [r7, #4]
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f7f2 fe0a 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012e60:	4603      	mov	r3, r0
 8012e62:	4618      	mov	r0, r3
 8012e64:	f7fe fd4f 	bl	8011906 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f000 fb30 	bl	80134d0 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8012e70:	4603      	mov	r3, r0
 8012e72:	4618      	mov	r0, r3
 8012e74:	3708      	adds	r7, #8
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd80      	pop	{r7, pc}

08012e7a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 8012e7a:	b580      	push	{r7, lr}
 8012e7c:	b082      	sub	sp, #8
 8012e7e:	af00      	add	r7, sp, #0
 8012e80:	6078      	str	r0, [r7, #4]
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	f7f2 fdf6 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7fe fd3b 	bl	8011906 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8012e90:	4603      	mov	r3, r0
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7ff fdd8 	bl	8012a48 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3708      	adds	r7, #8
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}

08012ea2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
 8012ea2:	b580      	push	{r7, lr}
 8012ea4:	b082      	sub	sp, #8
 8012ea6:	af00      	add	r7, sp, #0
 8012ea8:	6078      	str	r0, [r7, #4]
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f000 fb1b 	bl	80134e6 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3708      	adds	r7, #8
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}
	...

08012ebc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b084      	sub	sp, #16
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	60f8      	str	r0, [r7, #12]
 8012ec4:	60b9      	str	r1, [r7, #8]
 8012ec6:	607a      	str	r2, [r7, #4]
 8012ec8:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8012eca:	68f8      	ldr	r0, [r7, #12]
 8012ecc:	f7ff ffe9 	bl	8012ea2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	68ba      	ldr	r2, [r7, #8]
 8012ed4:	601a      	str	r2, [r3, #0]
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	3304      	adds	r3, #4
 8012eda:	6879      	ldr	r1, [r7, #4]
 8012edc:	4618      	mov	r0, r3
 8012ede:	f7f3 fce5 	bl	80068ac <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	3305      	adds	r3, #5
 8012ee6:	6839      	ldr	r1, [r7, #0]
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7f3 fcf9 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d011      	beq.n	8012f18 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	db08      	blt.n	8012f0c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	2b03      	cmp	r3, #3
 8012efe:	d105      	bne.n	8012f0c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	db02      	blt.n	8012f0c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	2b01      	cmp	r3, #1
 8012f0a:	d005      	beq.n	8012f18 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 8012f0c:	4b07      	ldr	r3, [pc, #28]	; (8012f2c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 8012f0e:	4a08      	ldr	r2, [pc, #32]	; (8012f30 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 8012f10:	21b0      	movs	r1, #176	; 0xb0
 8012f12:	4808      	ldr	r0, [pc, #32]	; (8012f34 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 8012f14:	f00a fe56 	bl	801dbc4 <__assert_func>
      checkSanity<Derived>();
 8012f18:	2100      	movs	r1, #0
 8012f1a:	68f8      	ldr	r0, [r7, #12]
 8012f1c:	f000 faee 	bl	80134fc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	4618      	mov	r0, r3
 8012f24:	3710      	adds	r7, #16
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd80      	pop	{r7, pc}
 8012f2a:	bf00      	nop
 8012f2c:	08026150 	.word	0x08026150
 8012f30:	0802884c 	.word	0x0802884c
 8012f34:	08026300 	.word	0x08026300

08012f38 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b082      	sub	sp, #8
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	3308      	adds	r3, #8
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7ff ff98 	bl	8012e7a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8012f4a:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	615a      	str	r2, [r3, #20]
    }
 8012f50:	bf00      	nop
 8012f52:	3708      	adds	r7, #8
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}

08012f58 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	6039      	str	r1, [r7, #0]
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f000 fad5 	bl	8013512 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	6839      	ldr	r1, [r7, #0]
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f000 fadb 	bl	8013528 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>
  }
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	4618      	mov	r0, r3
 8012f76:	3708      	adds	r7, #8
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}

08012f7c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b082      	sub	sp, #8
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
 8012f84:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012f86:	2200      	movs	r2, #0
 8012f88:	2100      	movs	r1, #0
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f000 faf4 	bl	8013578 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8012f90:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012f94:	eeb0 0a67 	vmov.f32	s0, s15
 8012f98:	3708      	adds	r7, #8
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bd80      	pop	{r7, pc}

08012f9e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8012f9e:	b580      	push	{r7, lr}
 8012fa0:	b084      	sub	sp, #16
 8012fa2:	af00      	add	r7, sp, #0
 8012fa4:	6078      	str	r0, [r7, #4]
 8012fa6:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012fa8:	6839      	ldr	r1, [r7, #0]
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	f000 faf7 	bl	801359e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>
 8012fb0:	eef0 7a40 	vmov.f32	s15, s0
 8012fb4:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8012fb8:	6839      	ldr	r1, [r7, #0]
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f000 fb00 	bl	80135c0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>
 8012fc0:	eef0 7a40 	vmov.f32	s15, s0
 8012fc4:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012fc8:	f107 020c 	add.w	r2, r7, #12
 8012fcc:	f107 0308 	add.w	r3, r7, #8
 8012fd0:	4619      	mov	r1, r3
 8012fd2:	6838      	ldr	r0, [r7, #0]
 8012fd4:	f7f6 f86f 	bl	80090b6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012fd8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8012fe0:	3710      	adds	r7, #16
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}

08012fe6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  evaluator() {}
 8012fe6:	b580      	push	{r7, lr}
 8012fe8:	b082      	sub	sp, #8
 8012fea:	af00      	add	r7, sp, #0
 8012fec:	6078      	str	r0, [r7, #4]
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f000 faf6 	bl	80135e2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	3708      	adds	r7, #8
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}

08013000 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8013000:	b580      	push	{r7, lr}
 8013002:	b084      	sub	sp, #16
 8013004:	af00      	add	r7, sp, #0
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	60b9      	str	r1, [r7, #8]
 801300a:	607a      	str	r2, [r7, #4]
    {
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	4618      	mov	r0, r3
 8013010:	f7f1 fde2 	bl	8004bd8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 8013014:	f7f1 fdf0 	bl	8004bf8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8013018:	68f8      	ldr	r0, [r7, #12]
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	6819      	ldr	r1, [r3, #0]
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	681a      	ldr	r2, [r3, #0]
 8013022:	2300      	movs	r3, #0
 8013024:	f000 faef 	bl	8013606 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	4618      	mov	r0, r3
 801302c:	3710      	adds	r7, #16
 801302e:	46bd      	mov	sp, r7
 8013030:	bd80      	pop	{r7, pc}

08013032 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8013032:	b480      	push	{r7}
 8013034:	b083      	sub	sp, #12
 8013036:	af00      	add	r7, sp, #0
 8013038:	6078      	str	r0, [r7, #4]
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	4618      	mov	r0, r3
 801303e:	370c      	adds	r7, #12
 8013040:	46bd      	mov	sp, r7
 8013042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013046:	4770      	bx	lr

08013048 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8013048:	b480      	push	{r7}
 801304a:	b083      	sub	sp, #12
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	3308      	adds	r3, #8
 8013054:	4618      	mov	r0, r3
 8013056:	370c      	adds	r7, #12
 8013058:	46bd      	mov	sp, r7
 801305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305e:	4770      	bx	lr

08013060 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8013060:	b590      	push	{r4, r7, lr}
 8013062:	b08b      	sub	sp, #44	; 0x2c
 8013064:	af00      	add	r7, sp, #0
 8013066:	60f8      	str	r0, [r7, #12]
 8013068:	60b9      	str	r1, [r7, #8]
 801306a:	607a      	str	r2, [r7, #4]
    dst.coeffRef(0,0) = (lhs.transpose().cwiseProduct(rhs)).sum();
 801306c:	f107 0320 	add.w	r3, r7, #32
 8013070:	68b9      	ldr	r1, [r7, #8]
 8013072:	4618      	mov	r0, r3
 8013074:	f000 fadb 	bl	801362e <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>
 8013078:	f107 0310 	add.w	r3, r7, #16
 801307c:	f107 0120 	add.w	r1, r7, #32
 8013080:	687a      	ldr	r2, [r7, #4]
 8013082:	4618      	mov	r0, r3
 8013084:	f000 fae4 	bl	8013650 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	2200      	movs	r2, #0
 801308c:	2100      	movs	r1, #0
 801308e:	4618      	mov	r0, r3
 8013090:	f7f3 fb99 	bl	80067c6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8013094:	4604      	mov	r4, r0
 8013096:	f107 0310 	add.w	r3, r7, #16
 801309a:	4618      	mov	r0, r3
 801309c:	f000 fb06 	bl	80136ac <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>
 80130a0:	eef0 7a40 	vmov.f32	s15, s0
 80130a4:	edc4 7a00 	vstr	s15, [r4]
  }
 80130a8:	bf00      	nop
 80130aa:	372c      	adds	r7, #44	; 0x2c
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd90      	pop	{r4, r7, pc}

080130b0 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b082      	sub	sp, #8
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
 80130b8:	6039      	str	r1, [r7, #0]
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	6839      	ldr	r1, [r7, #0]
 80130be:	4618      	mov	r0, r3
 80130c0:	f000 fb0f 	bl	80136e2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	4618      	mov	r0, r3
 80130c8:	3708      	adds	r7, #8
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}

080130ce <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80130ce:	b480      	push	{r7}
 80130d0:	b083      	sub	sp, #12
 80130d2:	af00      	add	r7, sp, #0
 80130d4:	6078      	str	r0, [r7, #4]
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	4618      	mov	r0, r3
 80130da:	370c      	adds	r7, #12
 80130dc:	46bd      	mov	sp, r7
 80130de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e2:	4770      	bx	lr

080130e4 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b084      	sub	sp, #16
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	60f8      	str	r0, [r7, #12]
 80130ec:	60b9      	str	r1, [r7, #8]
 80130ee:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	68ba      	ldr	r2, [r7, #8]
 80130f4:	6879      	ldr	r1, [r7, #4]
 80130f6:	4618      	mov	r0, r3
 80130f8:	f000 fb09 	bl	801370e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 80130fc:	4603      	mov	r3, r0
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	ee07 3a90 	vmov	s15, r3
  }
 8013104:	eeb0 0a67 	vmov.f32	s0, s15
 8013108:	3710      	adds	r7, #16
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}
	...

08013110 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8013110:	b580      	push	{r7, lr}
 8013112:	b084      	sub	sp, #16
 8013114:	af00      	add	r7, sp, #0
 8013116:	60f8      	str	r0, [r7, #12]
 8013118:	60b9      	str	r1, [r7, #8]
 801311a:	607a      	str	r2, [r7, #4]
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	687a      	ldr	r2, [r7, #4]
 8013120:	68b9      	ldr	r1, [r7, #8]
 8013122:	4618      	mov	r0, r3
 8013124:	f000 fb0b 	bl	801373e <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2b00      	cmp	r3, #0
 801312c:	db07      	blt.n	801313e <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	4618      	mov	r0, r3
 8013132:	f7f1 ffe7 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8013136:	4602      	mov	r2, r0
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	4293      	cmp	r3, r2
 801313c:	db05      	blt.n	801314a <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 801313e:	4b05      	ldr	r3, [pc, #20]	; (8013154 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x44>)
 8013140:	4a05      	ldr	r2, [pc, #20]	; (8013158 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 8013142:	2178      	movs	r1, #120	; 0x78
 8013144:	4805      	ldr	r0, [pc, #20]	; (801315c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 8013146:	f00a fd3d 	bl	801dbc4 <__assert_func>
    }
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	4618      	mov	r0, r3
 801314e:	3710      	adds	r7, #16
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}
 8013154:	080245b0 	.word	0x080245b0
 8013158:	08028960 	.word	0x08028960
 801315c:	08024734 	.word	0x08024734

08013160 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013160:	b480      	push	{r7}
 8013162:	b083      	sub	sp, #12
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	4618      	mov	r0, r3
 801316c:	370c      	adds	r7, #12
 801316e:	46bd      	mov	sp, r7
 8013170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013174:	4770      	bx	lr

08013176 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
 8013176:	b580      	push	{r7, lr}
 8013178:	b082      	sub	sp, #8
 801317a:	af00      	add	r7, sp, #0
 801317c:	6078      	str	r0, [r7, #4]
 801317e:	6878      	ldr	r0, [r7, #4]
 8013180:	f000 faee 	bl	8013760 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	4618      	mov	r0, r3
 8013188:	3708      	adds	r7, #8
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}

0801318e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 801318e:	b580      	push	{r7, lr}
 8013190:	b082      	sub	sp, #8
 8013192:	af00      	add	r7, sp, #0
 8013194:	6078      	str	r0, [r7, #4]
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	f7ff ffed 	bl	8013176 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	4618      	mov	r0, r3
 80131a0:	3708      	adds	r7, #8
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd80      	pop	{r7, pc}

080131a6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 80131a6:	b580      	push	{r7, lr}
 80131a8:	b082      	sub	sp, #8
 80131aa:	af00      	add	r7, sp, #0
 80131ac:	6078      	str	r0, [r7, #4]
 80131ae:	f7f3 fbc4 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80131b2:	4603      	mov	r3, r0
 80131b4:	4618      	mov	r0, r3
 80131b6:	3708      	adds	r7, #8
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}

080131bc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 80131bc:	b580      	push	{r7, lr}
 80131be:	b082      	sub	sp, #8
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	f7f3 fbb9 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80131c8:	4603      	mov	r3, r0
 80131ca:	4618      	mov	r0, r3
 80131cc:	3708      	adds	r7, #8
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}
	...

080131d4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80131d4:	b5b0      	push	{r4, r5, r7, lr}
 80131d6:	b084      	sub	sp, #16
 80131d8:	af00      	add	r7, sp, #0
 80131da:	60f8      	str	r0, [r7, #12]
 80131dc:	60b9      	str	r1, [r7, #8]
 80131de:	607a      	str	r2, [r7, #4]
 80131e0:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80131e2:	68f8      	ldr	r0, [r7, #12]
 80131e4:	f7ff ffd3 	bl	801318e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 80131e8:	68fa      	ldr	r2, [r7, #12]
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	4614      	mov	r4, r2
 80131ee:	461d      	mov	r5, r3
 80131f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80131f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80131f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	f103 0218 	add.w	r2, r3, #24
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	4614      	mov	r4, r2
 8013206:	461d      	mov	r5, r3
 8013208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801320a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801320c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013210:	e884 0003 	stmia.w	r4, {r0, r1}
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	3330      	adds	r3, #48	; 0x30
 8013218:	6839      	ldr	r1, [r7, #0]
 801321a:	4618      	mov	r0, r3
 801321c:	f7f2 f8e6 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8013220:	68b8      	ldr	r0, [r7, #8]
 8013222:	f7f8 fd69 	bl	800bcf8 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 8013226:	4604      	mov	r4, r0
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	4618      	mov	r0, r3
 801322c:	f7ff ffbb 	bl	80131a6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>
 8013230:	4603      	mov	r3, r0
 8013232:	429c      	cmp	r4, r3
 8013234:	d10a      	bne.n	801324c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 8013236:	68b8      	ldr	r0, [r7, #8]
 8013238:	f7f8 fd6b 	bl	800bd12 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 801323c:	4604      	mov	r4, r0
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	4618      	mov	r0, r3
 8013242:	f7ff ffbb 	bl	80131bc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>
 8013246:	4603      	mov	r3, r0
 8013248:	429c      	cmp	r4, r3
 801324a:	d005      	beq.n	8013258 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 801324c:	4b05      	ldr	r3, [pc, #20]	; (8013264 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 801324e:	4a06      	ldr	r2, [pc, #24]	; (8013268 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 8013250:	2174      	movs	r1, #116	; 0x74
 8013252:	4806      	ldr	r0, [pc, #24]	; (801326c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 8013254:	f00a fcb6 	bl	801dbc4 <__assert_func>
    }
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	4618      	mov	r0, r3
 801325c:	3710      	adds	r7, #16
 801325e:	46bd      	mov	sp, r7
 8013260:	bdb0      	pop	{r4, r5, r7, pc}
 8013262:	bf00      	nop
 8013264:	0801fa2c 	.word	0x0801fa2c
 8013268:	08028a3c 	.word	0x08028a3c
 801326c:	0801fc90 	.word	0x0801fc90

08013270 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8013270:	b580      	push	{r7, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f000 f809 	bl	8013290 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 801327e:	4603      	mov	r3, r0
 8013280:	4618      	mov	r0, r3
 8013282:	f000 fa78 	bl	8013776 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>
 8013286:	4603      	mov	r3, r0
 8013288:	4618      	mov	r0, r3
 801328a:	3708      	adds	r7, #8
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}

08013290 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013290:	b480      	push	{r7}
 8013292:	b083      	sub	sp, #12
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	4618      	mov	r0, r3
 801329c:	370c      	adds	r7, #12
 801329e:	46bd      	mov	sp, r7
 80132a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a4:	4770      	bx	lr

080132a6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80132a6:	b580      	push	{r7, lr}
 80132a8:	b082      	sub	sp, #8
 80132aa:	af00      	add	r7, sp, #0
 80132ac:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7f8 fd21 	bl	800bcf8 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 80132b6:	4603      	mov	r3, r0
    }
 80132b8:	4618      	mov	r0, r3
 80132ba:	3708      	adds	r7, #8
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}

080132c0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b082      	sub	sp, #8
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
 80132c8:	6878      	ldr	r0, [r7, #4]
 80132ca:	f000 fa7b 	bl	80137c4 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	4618      	mov	r0, r3
 80132d2:	3708      	adds	r7, #8
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}

080132d8 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 80132d8:	b580      	push	{r7, lr}
 80132da:	b082      	sub	sp, #8
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7ff ffec 	bl	80132c0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	4618      	mov	r0, r3
 80132ec:	3708      	adds	r7, #8
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}

080132f2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 80132f2:	b580      	push	{r7, lr}
 80132f4:	b082      	sub	sp, #8
 80132f6:	af00      	add	r7, sp, #0
 80132f8:	6078      	str	r0, [r7, #4]
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	4618      	mov	r0, r3
 80132fe:	f7ff ffeb 	bl	80132d8 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	4618      	mov	r0, r3
 8013306:	3708      	adds	r7, #8
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}

0801330c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	4618      	mov	r0, r3
 8013318:	f7ff ffeb 	bl	80132f2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	4618      	mov	r0, r3
 8013320:	3708      	adds	r7, #8
 8013322:	46bd      	mov	sp, r7
 8013324:	bd80      	pop	{r7, pc}

08013326 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 8013326:	b580      	push	{r7, lr}
 8013328:	b082      	sub	sp, #8
 801332a:	af00      	add	r7, sp, #0
 801332c:	6078      	str	r0, [r7, #4]
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	330c      	adds	r3, #12
 8013332:	4618      	mov	r0, r3
 8013334:	f7ff ffea 	bl	801330c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	3304      	adds	r3, #4
 801333c:	4618      	mov	r0, r3
 801333e:	f7f8 fdcf 	bl	800bee0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	4618      	mov	r0, r3
 8013346:	3708      	adds	r7, #8
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}

0801334c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 801334c:	b580      	push	{r7, lr}
 801334e:	b082      	sub	sp, #8
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	4618      	mov	r0, r3
 8013358:	f7ff ffe5 	bl	8013326 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f000 fa26 	bl	80137ae <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	4618      	mov	r0, r3
 8013366:	3708      	adds	r7, #8
 8013368:	46bd      	mov	sp, r7
 801336a:	bd80      	pop	{r7, pc}

0801336c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 801336c:	b580      	push	{r7, lr}
 801336e:	b082      	sub	sp, #8
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	4618      	mov	r0, r3
 8013378:	f7ff ffe8 	bl	801334c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	4618      	mov	r0, r3
 8013380:	3708      	adds	r7, #8
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}

08013386 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8013386:	b580      	push	{r7, lr}
 8013388:	b082      	sub	sp, #8
 801338a:	af00      	add	r7, sp, #0
 801338c:	6078      	str	r0, [r7, #4]
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	4618      	mov	r0, r3
 8013392:	f7ff ffeb 	bl	801336c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	4618      	mov	r0, r3
 801339a:	3708      	adds	r7, #8
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}

080133a0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 80133a0:	b580      	push	{r7, lr}
 80133a2:	ed2d 8b02 	vpush	{d8}
 80133a6:	b088      	sub	sp, #32
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
 80133ac:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f7ff fc8a 	bl	8012cc8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>
 80133b4:	4603      	mov	r3, r0
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	dd05      	ble.n	80133c6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 80133ba:	6878      	ldr	r0, [r7, #4]
 80133bc:	f7ff ff58 	bl	8013270 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>
 80133c0:	4603      	mov	r3, r0
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	dc06      	bgt.n	80133d4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 80133c6:	4b16      	ldr	r3, [pc, #88]	; (8013420 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 80133c8:	4a16      	ldr	r2, [pc, #88]	; (8013424 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 80133ca:	f240 119b 	movw	r1, #411	; 0x19b
 80133ce:	4816      	ldr	r0, [pc, #88]	; (8013428 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 80133d0:	f00a fbf8 	bl	801dbc4 <__assert_func>
 80133d4:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80133d6:	6878      	ldr	r0, [r7, #4]
 80133d8:	f7ff ff5a 	bl	8013290 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 80133dc:	4602      	mov	r2, r0
 80133de:	f107 030c 	add.w	r3, r7, #12
 80133e2:	4611      	mov	r1, r2
 80133e4:	4618      	mov	r0, r3
 80133e6:	f000 f9d3 	bl	8013790 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	f7ff ff50 	bl	8013290 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 80133f0:	4602      	mov	r2, r0
 80133f2:	f107 030c 	add.w	r3, r7, #12
 80133f6:	6839      	ldr	r1, [r7, #0]
 80133f8:	4618      	mov	r0, r3
 80133fa:	f000 f9ee 	bl	80137da <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 80133fe:	eeb0 8a40 	vmov.f32	s16, s0
 8013402:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8013404:	f107 030c 	add.w	r3, r7, #12
 8013408:	4618      	mov	r0, r3
 801340a:	f7ff ffbc 	bl	8013386 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801340e:	eef0 7a48 	vmov.f32	s15, s16
}
 8013412:	eeb0 0a67 	vmov.f32	s0, s15
 8013416:	3720      	adds	r7, #32
 8013418:	46bd      	mov	sp, r7
 801341a:	ecbd 8b02 	vpop	{d8}
 801341e:	bd80      	pop	{r7, pc}
 8013420:	08024aac 	.word	0x08024aac
 8013424:	08028c88 	.word	0x08028c88
 8013428:	08024cb8 	.word	0x08024cb8

0801342c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801342c:	b580      	push	{r7, lr}
 801342e:	b082      	sub	sp, #8
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013434:	2202      	movs	r2, #2
 8013436:	2101      	movs	r1, #1
 8013438:	6878      	ldr	r0, [r7, #4]
 801343a:	f7fe fbdb 	bl	8011bf4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801343e:	6878      	ldr	r0, [r7, #4]
 8013440:	f000 f9dc 	bl	80137fc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>
  }
 8013444:	bf00      	nop
 8013446:	3708      	adds	r7, #8
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}

0801344c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801344c:	b580      	push	{r7, lr}
 801344e:	b082      	sub	sp, #8
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013454:	2201      	movs	r2, #1
 8013456:	2101      	movs	r1, #1
 8013458:	6878      	ldr	r0, [r7, #4]
 801345a:	f7ff f874 	bl	8012546 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	f000 f9dc 	bl	801381c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>
  }
 8013464:	bf00      	nop
 8013466:	3708      	adds	r7, #8
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}

0801346c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 801346c:	b580      	push	{r7, lr}
 801346e:	b082      	sub	sp, #8
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	f7f2 fb69 	bl	8005b4c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 801347a:	4603      	mov	r3, r0
 801347c:	4618      	mov	r0, r3
 801347e:	f7f1 fe4c 	bl	800511a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8013482:	4603      	mov	r3, r0
 8013484:	4618      	mov	r0, r3
 8013486:	3708      	adds	r7, #8
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}

0801348c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 801348c:	b590      	push	{r4, r7, lr}
 801348e:	b083      	sub	sp, #12
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
 8013494:	6878      	ldr	r0, [r7, #4]
 8013496:	f7ff ffe9 	bl	801346c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 801349a:	4604      	mov	r4, r0
 801349c:	6878      	ldr	r0, [r7, #4]
 801349e:	f000 f807 	bl	80134b0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80134a2:	4603      	mov	r3, r0
 80134a4:	fb04 f303 	mul.w	r3, r4, r3
 80134a8:	4618      	mov	r0, r3
 80134aa:	370c      	adds	r7, #12
 80134ac:	46bd      	mov	sp, r7
 80134ae:	bd90      	pop	{r4, r7, pc}

080134b0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b082      	sub	sp, #8
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
 80134b8:	6878      	ldr	r0, [r7, #4]
 80134ba:	f7f2 fb47 	bl	8005b4c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80134be:	4603      	mov	r3, r0
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7f1 fe1f 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80134c6:	4603      	mov	r3, r0
 80134c8:	4618      	mov	r0, r3
 80134ca:	3708      	adds	r7, #8
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}

080134d0 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 80134d0:	b480      	push	{r7}
 80134d2:	b083      	sub	sp, #12
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	2301      	movs	r3, #1
 80134da:	4618      	mov	r0, r3
 80134dc:	370c      	adds	r7, #12
 80134de:	46bd      	mov	sp, r7
 80134e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e4:	4770      	bx	lr

080134e6 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80134e6:	b480      	push	{r7}
 80134e8:	b083      	sub	sp, #12
 80134ea:	af00      	add	r7, sp, #0
 80134ec:	6078      	str	r0, [r7, #4]
    }
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	4618      	mov	r0, r3
 80134f2:	370c      	adds	r7, #12
 80134f4:	46bd      	mov	sp, r7
 80134f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fa:	4770      	bx	lr

080134fc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 80134fc:	b480      	push	{r7}
 80134fe:	b083      	sub	sp, #12
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
 8013504:	6039      	str	r1, [r7, #0]
    {}
 8013506:	bf00      	nop
 8013508:	370c      	adds	r7, #12
 801350a:	46bd      	mov	sp, r7
 801350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013510:	4770      	bx	lr

08013512 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013512:	b480      	push	{r7}
 8013514:	b083      	sub	sp, #12
 8013516:	af00      	add	r7, sp, #0
 8013518:	6078      	str	r0, [r7, #4]
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	4618      	mov	r0, r3
 801351e:	370c      	adds	r7, #12
 8013520:	46bd      	mov	sp, r7
 8013522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013526:	4770      	bx	lr

08013528 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8013528:	b590      	push	{r4, r7, lr}
 801352a:	b083      	sub	sp, #12
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
 8013530:	6039      	str	r1, [r7, #0]
 8013532:	687c      	ldr	r4, [r7, #4]
 8013534:	6838      	ldr	r0, [r7, #0]
 8013536:	f000 f981 	bl	801383c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>
 801353a:	4603      	mov	r3, r0
 801353c:	4619      	mov	r1, r3
 801353e:	4620      	mov	r0, r4
 8013540:	f7f1 ff54 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	1d1c      	adds	r4, r3, #4
 8013548:	6838      	ldr	r0, [r7, #0]
 801354a:	f000 f983 	bl	8013854 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>
 801354e:	4603      	mov	r3, r0
 8013550:	4619      	mov	r1, r3
 8013552:	4620      	mov	r0, r4
 8013554:	f7fb fa91 	bl	800ea7a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	f103 040c 	add.w	r4, r3, #12
 801355e:	6838      	ldr	r0, [r7, #0]
 8013560:	f000 f983 	bl	801386a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>
 8013564:	4603      	mov	r3, r0
 8013566:	4619      	mov	r1, r3
 8013568:	4620      	mov	r0, r4
 801356a:	f000 f98a 	bl	8013882 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	4618      	mov	r0, r3
 8013572:	370c      	adds	r7, #12
 8013574:	46bd      	mov	sp, r7
 8013576:	bd90      	pop	{r4, r7, pc}

08013578 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8013578:	b580      	push	{r7, lr}
 801357a:	b084      	sub	sp, #16
 801357c:	af00      	add	r7, sp, #0
 801357e:	60f8      	str	r0, [r7, #12]
 8013580:	60b9      	str	r1, [r7, #8]
 8013582:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	68ba      	ldr	r2, [r7, #8]
 8013588:	6879      	ldr	r1, [r7, #4]
 801358a:	4618      	mov	r0, r3
 801358c:	f000 f988 	bl	80138a0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>
 8013590:	eef0 7a40 	vmov.f32	s15, s0
 8013594:	eeb0 0a67 	vmov.f32	s0, s15
 8013598:	3710      	adds	r7, #16
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}

0801359e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801359e:	b580      	push	{r7, lr}
 80135a0:	b082      	sub	sp, #8
 80135a2:	af00      	add	r7, sp, #0
 80135a4:	6078      	str	r0, [r7, #4]
 80135a6:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80135a8:	2201      	movs	r2, #1
 80135aa:	2100      	movs	r1, #0
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f7ff ffe3 	bl	8013578 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80135b2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80135b6:	eeb0 0a67 	vmov.f32	s0, s15
 80135ba:	3708      	adds	r7, #8
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b082      	sub	sp, #8
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80135ca:	2202      	movs	r2, #2
 80135cc:	2100      	movs	r1, #0
 80135ce:	6878      	ldr	r0, [r7, #4]
 80135d0:	f7ff ffd2 	bl	8013578 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80135d4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80135d8:	eeb0 0a67 	vmov.f32	s0, s15
 80135dc:	3708      	adds	r7, #8
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}

080135e2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  evaluator()
 80135e2:	b580      	push	{r7, lr}
 80135e4:	b082      	sub	sp, #8
 80135e6:	af00      	add	r7, sp, #0
 80135e8:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f7f7 fd37 	bl	800b05e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	2200      	movs	r2, #0
 80135f4:	2100      	movs	r1, #0
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7f3 fcbd 	bl	8006f76 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	4618      	mov	r0, r3
 8013600:	3708      	adds	r7, #8
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}

08013606 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8013606:	b580      	push	{r7, lr}
 8013608:	b086      	sub	sp, #24
 801360a:	af00      	add	r7, sp, #0
 801360c:	60f8      	str	r0, [r7, #12]
 801360e:	60b9      	str	r1, [r7, #8]
 8013610:	607a      	str	r2, [r7, #4]
 8013612:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8013614:	2301      	movs	r3, #1
 8013616:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8013618:	2301      	movs	r3, #1
 801361a:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 801361c:	687a      	ldr	r2, [r7, #4]
 801361e:	68b9      	ldr	r1, [r7, #8]
 8013620:	68f8      	ldr	r0, [r7, #12]
 8013622:	f7f9 fef9 	bl	800d418 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    }
 8013626:	bf00      	nop
 8013628:	3718      	adds	r7, #24
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}

0801362e <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 801362e:	b580      	push	{r7, lr}
 8013630:	b082      	sub	sp, #8
 8013632:	af00      	add	r7, sp, #0
 8013634:	6078      	str	r0, [r7, #4]
 8013636:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 8013638:	6838      	ldr	r0, [r7, #0]
 801363a:	f7f2 fae5 	bl	8005c08 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 801363e:	4603      	mov	r3, r0
 8013640:	4619      	mov	r1, r3
 8013642:	6878      	ldr	r0, [r7, #4]
 8013644:	f000 f974 	bl	8013930 <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>
}
 8013648:	6878      	ldr	r0, [r7, #4]
 801364a:	3708      	adds	r7, #8
 801364c:	46bd      	mov	sp, r7
 801364e:	bd80      	pop	{r7, pc}

08013650 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8013650:	b5b0      	push	{r4, r5, r7, lr}
 8013652:	b086      	sub	sp, #24
 8013654:	af00      	add	r7, sp, #0
 8013656:	60f8      	str	r0, [r7, #12]
 8013658:	60b9      	str	r1, [r7, #8]
 801365a:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 801365c:	68b8      	ldr	r0, [r7, #8]
 801365e:	f000 f97a 	bl	8013956 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>
 8013662:	4604      	mov	r4, r0
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f7f2 fa05 	bl	8005a74 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 801366a:	4605      	mov	r5, r0
 801366c:	f107 0314 	add.w	r3, r7, #20
 8013670:	4618      	mov	r0, r3
 8013672:	f7f1 fe31 	bl	80052d8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8013676:	f107 0314 	add.w	r3, r7, #20
 801367a:	462a      	mov	r2, r5
 801367c:	4621      	mov	r1, r4
 801367e:	68f8      	ldr	r0, [r7, #12]
 8013680:	f000 f9a6 	bl	80139d0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>
}
 8013684:	68f8      	ldr	r0, [r7, #12]
 8013686:	3718      	adds	r7, #24
 8013688:	46bd      	mov	sp, r7
 801368a:	bdb0      	pop	{r4, r5, r7, pc}

0801368c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 801368c:	b580      	push	{r7, lr}
 801368e:	b082      	sub	sp, #8
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f000 f9eb 	bl	8013a70 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 801369a:	4603      	mov	r3, r0
 801369c:	4618      	mov	r0, r3
 801369e:	f000 f9f2 	bl	8013a86 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>
 80136a2:	4603      	mov	r3, r0
 80136a4:	4618      	mov	r0, r3
 80136a6:	3708      	adds	r7, #8
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bd80      	pop	{r7, pc}

080136ac <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>:
DenseBase<Derived>::sum() const
 80136ac:	b590      	push	{r4, r7, lr}
 80136ae:	b085      	sub	sp, #20
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 80136b4:	6878      	ldr	r0, [r7, #4]
 80136b6:	f000 f9db 	bl	8013a70 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 80136ba:	4604      	mov	r4, r0
 80136bc:	f107 030c 	add.w	r3, r7, #12
 80136c0:	4618      	mov	r0, r3
 80136c2:	f7f2 f900 	bl	80058c6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80136c6:	f107 030c 	add.w	r3, r7, #12
 80136ca:	4619      	mov	r1, r3
 80136cc:	4620      	mov	r0, r4
 80136ce:	f000 fa83 	bl	8013bd8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 80136d2:	eef0 7a40 	vmov.f32	s15, s0
 80136d6:	bf00      	nop
}
 80136d8:	eeb0 0a67 	vmov.f32	s0, s15
 80136dc:	3714      	adds	r7, #20
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd90      	pop	{r4, r7, pc}

080136e2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80136e2:	b590      	push	{r4, r7, lr}
 80136e4:	b083      	sub	sp, #12
 80136e6:	af00      	add	r7, sp, #0
 80136e8:	6078      	str	r0, [r7, #4]
 80136ea:	6039      	str	r1, [r7, #0]
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f000 fac5 	bl	8013c7c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80136f2:	687c      	ldr	r4, [r7, #4]
 80136f4:	6838      	ldr	r0, [r7, #0]
 80136f6:	f000 fab5 	bl	8013c64 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 80136fa:	4603      	mov	r3, r0
 80136fc:	4619      	mov	r1, r3
 80136fe:	4620      	mov	r0, r4
 8013700:	f000 fac7 	bl	8013c92 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	4618      	mov	r0, r3
 8013708:	370c      	adds	r7, #12
 801370a:	46bd      	mov	sp, r7
 801370c:	bd90      	pop	{r4, r7, pc}

0801370e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801370e:	b590      	push	{r4, r7, lr}
 8013710:	b085      	sub	sp, #20
 8013712:	af00      	add	r7, sp, #0
 8013714:	60f8      	str	r0, [r7, #12]
 8013716:	60b9      	str	r1, [r7, #8]
 8013718:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	681c      	ldr	r4, [r3, #0]
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	4618      	mov	r0, r3
 8013722:	f7f3 fb5d 	bl	8006de0 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8013726:	4602      	mov	r2, r0
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	fb03 f202 	mul.w	r2, r3, r2
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	4413      	add	r3, r2
 8013732:	009b      	lsls	r3, r3, #2
 8013734:	4423      	add	r3, r4
  }
 8013736:	4618      	mov	r0, r3
 8013738:	3714      	adds	r7, #20
 801373a:	46bd      	mov	sp, r7
 801373c:	bd90      	pop	{r4, r7, pc}

0801373e <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 801373e:	b580      	push	{r7, lr}
 8013740:	b084      	sub	sp, #16
 8013742:	af00      	add	r7, sp, #0
 8013744:	60f8      	str	r0, [r7, #12]
 8013746:	60b9      	str	r1, [r7, #8]
 8013748:	607a      	str	r2, [r7, #4]
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	687a      	ldr	r2, [r7, #4]
 801374e:	68b9      	ldr	r1, [r7, #8]
 8013750:	4618      	mov	r0, r3
 8013752:	f000 faad 	bl	8013cb0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	4618      	mov	r0, r3
 801375a:	3710      	adds	r7, #16
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}

08013760 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013760:	b480      	push	{r7}
 8013762:	b083      	sub	sp, #12
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
    }
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	4618      	mov	r0, r3
 801376c:	370c      	adds	r7, #12
 801376e:	46bd      	mov	sp, r7
 8013770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013774:	4770      	bx	lr

08013776 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8013776:	b580      	push	{r7, lr}
 8013778:	b082      	sub	sp, #8
 801377a:	af00      	add	r7, sp, #0
 801377c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	4618      	mov	r0, r3
 8013782:	f7f8 fac6 	bl	800bd12 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 8013786:	4603      	mov	r3, r0
    }
 8013788:	4618      	mov	r0, r3
 801378a:	3708      	adds	r7, #8
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}

08013790 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8013790:	b580      	push	{r7, lr}
 8013792:	b082      	sub	sp, #8
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
 8013798:	6039      	str	r1, [r7, #0]
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	6839      	ldr	r1, [r7, #0]
 801379e:	4618      	mov	r0, r3
 80137a0:	f000 fab7 	bl	8013d12 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	4618      	mov	r0, r3
 80137a8:	3708      	adds	r7, #8
 80137aa:	46bd      	mov	sp, r7
 80137ac:	bd80      	pop	{r7, pc}

080137ae <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80137ae:	b480      	push	{r7}
 80137b0:	b083      	sub	sp, #12
 80137b2:	af00      	add	r7, sp, #0
 80137b4:	6078      	str	r0, [r7, #4]
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	4618      	mov	r0, r3
 80137ba:	370c      	adds	r7, #12
 80137bc:	46bd      	mov	sp, r7
 80137be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c2:	4770      	bx	lr

080137c4 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
 80137c4:	b480      	push	{r7}
 80137c6:	b083      	sub	sp, #12
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	4618      	mov	r0, r3
 80137d0:	370c      	adds	r7, #12
 80137d2:	46bd      	mov	sp, r7
 80137d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d8:	4770      	bx	lr

080137da <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80137da:	b580      	push	{r7, lr}
 80137dc:	b084      	sub	sp, #16
 80137de:	af00      	add	r7, sp, #0
 80137e0:	60f8      	str	r0, [r7, #12]
 80137e2:	60b9      	str	r1, [r7, #8]
 80137e4:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80137e6:	68b9      	ldr	r1, [r7, #8]
 80137e8:	68f8      	ldr	r0, [r7, #12]
 80137ea:	f000 faa1 	bl	8013d30 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 80137ee:	eef0 7a40 	vmov.f32	s15, s0
  }
 80137f2:	eeb0 0a67 	vmov.f32	s0, s15
 80137f6:	3710      	adds	r7, #16
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}

080137fc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b082      	sub	sp, #8
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013804:	2200      	movs	r2, #0
 8013806:	2102      	movs	r1, #2
 8013808:	6878      	ldr	r0, [r7, #4]
 801380a:	f7fe f9f3 	bl	8011bf4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801380e:	6878      	ldr	r0, [r7, #4]
 8013810:	f000 fa9f 	bl	8013d52 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>
  }
 8013814:	bf00      	nop
 8013816:	3708      	adds	r7, #8
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}

0801381c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801381c:	b580      	push	{r7, lr}
 801381e:	b082      	sub	sp, #8
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013824:	2202      	movs	r2, #2
 8013826:	2101      	movs	r1, #1
 8013828:	6878      	ldr	r0, [r7, #4]
 801382a:	f7fe fe8c 	bl	8012546 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801382e:	6878      	ldr	r0, [r7, #4]
 8013830:	f000 fa9f 	bl	8013d72 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>
  }
 8013834:	bf00      	nop
 8013836:	3708      	adds	r7, #8
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}

0801383c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 801383c:	b480      	push	{r7}
 801383e:	b083      	sub	sp, #12
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	3330      	adds	r3, #48	; 0x30
 8013848:	4618      	mov	r0, r3
 801384a:	370c      	adds	r7, #12
 801384c:	46bd      	mov	sp, r7
 801384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013852:	4770      	bx	lr

08013854 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8013854:	b480      	push	{r7}
 8013856:	b083      	sub	sp, #12
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	4618      	mov	r0, r3
 8013860:	370c      	adds	r7, #12
 8013862:	46bd      	mov	sp, r7
 8013864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013868:	4770      	bx	lr

0801386a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 801386a:	b480      	push	{r7}
 801386c:	b083      	sub	sp, #12
 801386e:	af00      	add	r7, sp, #0
 8013870:	6078      	str	r0, [r7, #4]
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	3318      	adds	r3, #24
 8013876:	4618      	mov	r0, r3
 8013878:	370c      	adds	r7, #12
 801387a:	46bd      	mov	sp, r7
 801387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013880:	4770      	bx	lr

08013882 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013882:	b580      	push	{r7, lr}
 8013884:	b082      	sub	sp, #8
 8013886:	af00      	add	r7, sp, #0
 8013888:	6078      	str	r0, [r7, #4]
 801388a:	6039      	str	r1, [r7, #0]
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	6839      	ldr	r1, [r7, #0]
 8013890:	4618      	mov	r0, r3
 8013892:	f000 fa7e 	bl	8013d92 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	4618      	mov	r0, r3
 801389a:	3708      	adds	r7, #8
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}

080138a0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80138a0:	b590      	push	{r4, r7, lr}
 80138a2:	b087      	sub	sp, #28
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	60f8      	str	r0, [r7, #12]
 80138a8:	60b9      	str	r1, [r7, #8]
 80138aa:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	4618      	mov	r0, r3
 80138b0:	f000 fa7e 	bl	8013db0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>
 80138b4:	4604      	mov	r4, r0
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	3304      	adds	r3, #4
 80138ba:	687a      	ldr	r2, [r7, #4]
 80138bc:	68b9      	ldr	r1, [r7, #8]
 80138be:	4618      	mov	r0, r3
 80138c0:	f7fb fdf6 	bl	800f4b0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 80138c4:	eef0 7a40 	vmov.f32	s15, s0
 80138c8:	edc7 7a04 	vstr	s15, [r7, #16]
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	330c      	adds	r3, #12
 80138d0:	687a      	ldr	r2, [r7, #4]
 80138d2:	68b9      	ldr	r1, [r7, #8]
 80138d4:	4618      	mov	r0, r3
 80138d6:	f000 fa76 	bl	8013dc6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 80138da:	eef0 7a40 	vmov.f32	s15, s0
 80138de:	edc7 7a05 	vstr	s15, [r7, #20]
 80138e2:	f107 0214 	add.w	r2, r7, #20
 80138e6:	f107 0310 	add.w	r3, r7, #16
 80138ea:	4619      	mov	r1, r3
 80138ec:	4620      	mov	r0, r4
 80138ee:	f7fb fc23 	bl	800f138 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80138f2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80138f6:	eeb0 0a67 	vmov.f32	s0, s15
 80138fa:	371c      	adds	r7, #28
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd90      	pop	{r4, r7, pc}

08013900 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8013900:	b580      	push	{r7, lr}
 8013902:	b082      	sub	sp, #8
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	f000 fa7d 	bl	8013e08 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	4618      	mov	r0, r3
 8013912:	3708      	adds	r7, #8
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}

08013918 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8013918:	b580      	push	{r7, lr}
 801391a:	b082      	sub	sp, #8
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f7ff ffed 	bl	8013900 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	4618      	mov	r0, r3
 801392a:	3708      	adds	r7, #8
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}

08013930 <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8013930:	b580      	push	{r7, lr}
 8013932:	b082      	sub	sp, #8
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
 8013938:	6039      	str	r1, [r7, #0]
 801393a:	6878      	ldr	r0, [r7, #4]
 801393c:	f7ff ffec 	bl	8013918 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	683a      	ldr	r2, [r7, #0]
 8013944:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013948:	e883 0003 	stmia.w	r3, {r0, r1}
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	4618      	mov	r0, r3
 8013950:	3708      	adds	r7, #8
 8013952:	46bd      	mov	sp, r7
 8013954:	bd80      	pop	{r7, pc}

08013956 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013956:	b480      	push	{r7}
 8013958:	b083      	sub	sp, #12
 801395a:	af00      	add	r7, sp, #0
 801395c:	6078      	str	r0, [r7, #4]
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	4618      	mov	r0, r3
 8013962:	370c      	adds	r7, #12
 8013964:	46bd      	mov	sp, r7
 8013966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396a:	4770      	bx	lr

0801396c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f000 fa52 	bl	8013e1e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	4618      	mov	r0, r3
 801397e:	3708      	adds	r7, #8
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}

08013984 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8013984:	b580      	push	{r7, lr}
 8013986:	b082      	sub	sp, #8
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f7ff ffed 	bl	801396c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	4618      	mov	r0, r3
 8013996:	3708      	adds	r7, #8
 8013998:	46bd      	mov	sp, r7
 801399a:	bd80      	pop	{r7, pc}

0801399c <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 801399c:	b580      	push	{r7, lr}
 801399e:	b082      	sub	sp, #8
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7f2 f95d 	bl	8005c66 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 80139ac:	4603      	mov	r3, r0
 80139ae:	4618      	mov	r0, r3
 80139b0:	3708      	adds	r7, #8
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}

080139b6 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 80139b6:	b580      	push	{r7, lr}
 80139b8:	b082      	sub	sp, #8
 80139ba:	af00      	add	r7, sp, #0
 80139bc:	6078      	str	r0, [r7, #4]
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	4618      	mov	r0, r3
 80139c2:	f7f3 f8c2 	bl	8006b4a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 80139c6:	4603      	mov	r3, r0
 80139c8:	4618      	mov	r0, r3
 80139ca:	3708      	adds	r7, #8
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bd80      	pop	{r7, pc}

080139d0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80139d0:	b590      	push	{r4, r7, lr}
 80139d2:	b085      	sub	sp, #20
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	607a      	str	r2, [r7, #4]
 80139dc:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80139de:	68f8      	ldr	r0, [r7, #12]
 80139e0:	f7ff ffd0 	bl	8013984 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	68ba      	ldr	r2, [r7, #8]
 80139e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80139ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	3308      	adds	r3, #8
 80139f4:	687a      	ldr	r2, [r7, #4]
 80139f6:	6812      	ldr	r2, [r2, #0]
 80139f8:	601a      	str	r2, [r3, #0]
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	330c      	adds	r3, #12
 80139fe:	6839      	ldr	r1, [r7, #0]
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7f1 fcf3 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8013a06:	68b8      	ldr	r0, [r7, #8]
 8013a08:	f7ff ffc8 	bl	801399c <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 8013a0c:	4604      	mov	r4, r0
 8013a0e:	6878      	ldr	r0, [r7, #4]
 8013a10:	f7f2 f85f 	bl	8005ad2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8013a14:	4603      	mov	r3, r0
 8013a16:	429c      	cmp	r4, r3
 8013a18:	d109      	bne.n	8013a2e <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x5e>
 8013a1a:	68b8      	ldr	r0, [r7, #8]
 8013a1c:	f7ff ffcb 	bl	80139b6 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8013a20:	4604      	mov	r4, r0
 8013a22:	6878      	ldr	r0, [r7, #4]
 8013a24:	f7f3 f89f 	bl	8006b66 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	429c      	cmp	r4, r3
 8013a2c:	d005      	beq.n	8013a3a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x6a>
 8013a2e:	4b05      	ldr	r3, [pc, #20]	; (8013a44 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x74>)
 8013a30:	4a05      	ldr	r2, [pc, #20]	; (8013a48 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x78>)
 8013a32:	2174      	movs	r1, #116	; 0x74
 8013a34:	4805      	ldr	r0, [pc, #20]	; (8013a4c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x7c>)
 8013a36:	f00a f8c5 	bl	801dbc4 <__assert_func>
    }
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	3714      	adds	r7, #20
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bd90      	pop	{r4, r7, pc}
 8013a44:	0801fa2c 	.word	0x0801fa2c
 8013a48:	08028e50 	.word	0x08028e50
 8013a4c:	0801fc90 	.word	0x0801fc90

08013a50 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b082      	sub	sp, #8
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f000 f809 	bl	8013a70 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	4618      	mov	r0, r3
 8013a62:	f000 f9e7 	bl	8013e34 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>
 8013a66:	4603      	mov	r3, r0
 8013a68:	4618      	mov	r0, r3
 8013a6a:	3708      	adds	r7, #8
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}

08013a70 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013a70:	b480      	push	{r7}
 8013a72:	b083      	sub	sp, #12
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	370c      	adds	r7, #12
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a84:	4770      	bx	lr

08013a86 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8013a86:	b580      	push	{r7, lr}
 8013a88:	b082      	sub	sp, #8
 8013a8a:	af00      	add	r7, sp, #0
 8013a8c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	4618      	mov	r0, r3
 8013a92:	f7ff ff83 	bl	801399c <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 8013a96:	4603      	mov	r3, r0
    }
 8013a98:	4618      	mov	r0, r3
 8013a9a:	3708      	adds	r7, #8
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}

08013aa0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b082      	sub	sp, #8
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f7fb fa2e 	bl	800ef0c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	3708      	adds	r7, #8
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}

08013aba <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8013aba:	b580      	push	{r7, lr}
 8013abc:	b082      	sub	sp, #8
 8013abe:	af00      	add	r7, sp, #0
 8013ac0:	6078      	str	r0, [r7, #4]
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f7ff ffeb 	bl	8013aa0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	4618      	mov	r0, r3
 8013ace:	3708      	adds	r7, #8
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}

08013ad4 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<const T>
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b082      	sub	sp, #8
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f7ff ffeb 	bl	8013aba <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	3708      	adds	r7, #8
 8013aea:	46bd      	mov	sp, r7
 8013aec:	bd80      	pop	{r7, pc}

08013aee <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8013aee:	b580      	push	{r7, lr}
 8013af0:	b082      	sub	sp, #8
 8013af2:	af00      	add	r7, sp, #0
 8013af4:	6078      	str	r0, [r7, #4]
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7ff ffeb 	bl	8013ad4 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8013afe:	6878      	ldr	r0, [r7, #4]
 8013b00:	f000 f9bf 	bl	8013e82 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	4618      	mov	r0, r3
 8013b08:	3708      	adds	r7, #8
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}

08013b0e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8013b0e:	b580      	push	{r7, lr}
 8013b10:	b082      	sub	sp, #8
 8013b12:	af00      	add	r7, sp, #0
 8013b14:	6078      	str	r0, [r7, #4]
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7ff ffe8 	bl	8013aee <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	4618      	mov	r0, r3
 8013b22:	3708      	adds	r7, #8
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}

08013b28 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator<const T>
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b082      	sub	sp, #8
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7ff ffeb 	bl	8013b0e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	3708      	adds	r7, #8
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	bd80      	pop	{r7, pc}

08013b42 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 8013b42:	b580      	push	{r7, lr}
 8013b44:	b082      	sub	sp, #8
 8013b46:	af00      	add	r7, sp, #0
 8013b48:	6078      	str	r0, [r7, #4]
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7fb f9fa 	bl	800ef46 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	4618      	mov	r0, r3
 8013b56:	3708      	adds	r7, #8
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}

08013b5c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b082      	sub	sp, #8
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	3314      	adds	r3, #20
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7ff ffea 	bl	8013b42 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	3304      	adds	r3, #4
 8013b72:	4618      	mov	r0, r3
 8013b74:	f7ff ffd8 	bl	8013b28 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	3708      	adds	r7, #8
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}

08013b82 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8013b82:	b580      	push	{r7, lr}
 8013b84:	b082      	sub	sp, #8
 8013b86:	af00      	add	r7, sp, #0
 8013b88:	6078      	str	r0, [r7, #4]
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f7ff ffe5 	bl	8013b5c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 8013b92:	6878      	ldr	r0, [r7, #4]
 8013b94:	f000 f96a 	bl	8013e6c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3708      	adds	r7, #8
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}

08013ba2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8013ba2:	b580      	push	{r7, lr}
 8013ba4:	b082      	sub	sp, #8
 8013ba6:	af00      	add	r7, sp, #0
 8013ba8:	6078      	str	r0, [r7, #4]
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	4618      	mov	r0, r3
 8013bae:	f7ff ffe8 	bl	8013b82 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	3708      	adds	r7, #8
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}

08013bbc <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b082      	sub	sp, #8
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f7ff ffeb 	bl	8013ba2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	4618      	mov	r0, r3
 8013bd0:	3708      	adds	r7, #8
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	bd80      	pop	{r7, pc}
	...

08013bd8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	ed2d 8b02 	vpush	{d8}
 8013bde:	b088      	sub	sp, #32
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
 8013be4:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8013be6:	6878      	ldr	r0, [r7, #4]
 8013be8:	f7ff fd50 	bl	801368c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>
 8013bec:	4603      	mov	r3, r0
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	dd05      	ble.n	8013bfe <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f7ff ff2c 	bl	8013a50 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	dc06      	bgt.n	8013c0c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8013bfe:	4b16      	ldr	r3, [pc, #88]	; (8013c58 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8013c00:	4a16      	ldr	r2, [pc, #88]	; (8013c5c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8013c02:	f240 119b 	movw	r1, #411	; 0x19b
 8013c06:	4816      	ldr	r0, [pc, #88]	; (8013c60 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8013c08:	f009 ffdc 	bl	801dbc4 <__assert_func>
 8013c0c:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8013c0e:	6878      	ldr	r0, [r7, #4]
 8013c10:	f7ff ff2e 	bl	8013a70 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013c14:	4602      	mov	r2, r0
 8013c16:	f107 0308 	add.w	r3, r7, #8
 8013c1a:	4611      	mov	r1, r2
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f000 f916 	bl	8013e4e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013c22:	6878      	ldr	r0, [r7, #4]
 8013c24:	f7ff ff24 	bl	8013a70 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013c28:	4602      	mov	r2, r0
 8013c2a:	f107 0308 	add.w	r3, r7, #8
 8013c2e:	6839      	ldr	r1, [r7, #0]
 8013c30:	4618      	mov	r0, r3
 8013c32:	f000 f931 	bl	8013e98 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 8013c36:	eeb0 8a40 	vmov.f32	s16, s0
 8013c3a:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8013c3c:	f107 0308 	add.w	r3, r7, #8
 8013c40:	4618      	mov	r0, r3
 8013c42:	f7ff ffbb 	bl	8013bbc <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013c46:	eef0 7a48 	vmov.f32	s15, s16
}
 8013c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8013c4e:	3720      	adds	r7, #32
 8013c50:	46bd      	mov	sp, r7
 8013c52:	ecbd 8b02 	vpop	{d8}
 8013c56:	bd80      	pop	{r7, pc}
 8013c58:	08024aac 	.word	0x08024aac
 8013c5c:	0802909c 	.word	0x0802909c
 8013c60:	08024cb8 	.word	0x08024cb8

08013c64 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8013c64:	b480      	push	{r7}
 8013c66:	b083      	sub	sp, #12
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	4618      	mov	r0, r3
 8013c72:	370c      	adds	r7, #12
 8013c74:	46bd      	mov	sp, r7
 8013c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7a:	4770      	bx	lr

08013c7c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013c7c:	b480      	push	{r7}
 8013c7e:	b083      	sub	sp, #12
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	4618      	mov	r0, r3
 8013c88:	370c      	adds	r7, #12
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c90:	4770      	bx	lr

08013c92 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013c92:	b580      	push	{r7, lr}
 8013c94:	b082      	sub	sp, #8
 8013c96:	af00      	add	r7, sp, #0
 8013c98:	6078      	str	r0, [r7, #4]
 8013c9a:	6039      	str	r1, [r7, #0]
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	6839      	ldr	r1, [r7, #0]
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7fd fe47 	bl	8011934 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	4618      	mov	r0, r3
 8013caa:	3708      	adds	r7, #8
 8013cac:	46bd      	mov	sp, r7
 8013cae:	bd80      	pop	{r7, pc}

08013cb0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8013cb0:	b5b0      	push	{r4, r5, r7, lr}
 8013cb2:	b084      	sub	sp, #16
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	60f8      	str	r0, [r7, #12]
 8013cb8:	60b9      	str	r1, [r7, #8]
 8013cba:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8013cbc:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f7fe fc93 	bl	80125ec <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8013cc6:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8013cc8:	68b8      	ldr	r0, [r7, #8]
 8013cca:	f7ff fc01 	bl	80134d0 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8013cce:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	fb02 f303 	mul.w	r3, r2, r3
 8013cd6:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8013cd8:	18e9      	adds	r1, r5, r3
 8013cda:	2301      	movs	r3, #1
 8013cdc:	2201      	movs	r2, #1
 8013cde:	4620      	mov	r0, r4
 8013ce0:	f000 f8f8 	bl	8013ed4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	68ba      	ldr	r2, [r7, #8]
 8013ce8:	609a      	str	r2, [r3, #8]
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	330c      	adds	r3, #12
 8013cee:	2100      	movs	r1, #0
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f7f9 fedd 	bl	800dab0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	3310      	adds	r3, #16
 8013cfa:	6879      	ldr	r1, [r7, #4]
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f7f9 fe63 	bl	800d9c8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8013d02:	68f8      	ldr	r0, [r7, #12]
 8013d04:	f000 f924 	bl	8013f50 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>
    }
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	3710      	adds	r7, #16
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	bdb0      	pop	{r4, r5, r7, pc}

08013d12 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8013d12:	b580      	push	{r7, lr}
 8013d14:	b082      	sub	sp, #8
 8013d16:	af00      	add	r7, sp, #0
 8013d18:	6078      	str	r0, [r7, #4]
 8013d1a:	6039      	str	r1, [r7, #0]
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	6839      	ldr	r1, [r7, #0]
 8013d20:	4618      	mov	r0, r3
 8013d22:	f000 f925 	bl	8013f70 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3708      	adds	r7, #8
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}

08013d30 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b082      	sub	sp, #8
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
 8013d38:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	2100      	movs	r1, #0
 8013d3e:	6878      	ldr	r0, [r7, #4]
 8013d40:	f000 f928 	bl	8013f94 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8013d44:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013d48:	eeb0 0a67 	vmov.f32	s0, s15
 8013d4c:	3708      	adds	r7, #8
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bd80      	pop	{r7, pc}

08013d52 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013d52:	b580      	push	{r7, lr}
 8013d54:	b082      	sub	sp, #8
 8013d56:	af00      	add	r7, sp, #0
 8013d58:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013d5a:	2201      	movs	r2, #1
 8013d5c:	2102      	movs	r1, #2
 8013d5e:	6878      	ldr	r0, [r7, #4]
 8013d60:	f7fd ff48 	bl	8011bf4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013d64:	6878      	ldr	r0, [r7, #4]
 8013d66:	f000 f928 	bl	8013fba <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>
  }
 8013d6a:	bf00      	nop
 8013d6c:	3708      	adds	r7, #8
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}

08013d72 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013d72:	b580      	push	{r7, lr}
 8013d74:	b082      	sub	sp, #8
 8013d76:	af00      	add	r7, sp, #0
 8013d78:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	2102      	movs	r1, #2
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f7fe fbe1 	bl	8012546 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013d84:	6878      	ldr	r0, [r7, #4]
 8013d86:	f000 f928 	bl	8013fda <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>
  }
 8013d8a:	bf00      	nop
 8013d8c:	3708      	adds	r7, #8
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}

08013d92 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8013d92:	b580      	push	{r7, lr}
 8013d94:	b082      	sub	sp, #8
 8013d96:	af00      	add	r7, sp, #0
 8013d98:	6078      	str	r0, [r7, #4]
 8013d9a:	6039      	str	r1, [r7, #0]
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	6839      	ldr	r1, [r7, #0]
 8013da0:	4618      	mov	r0, r3
 8013da2:	f000 f92a 	bl	8013ffa <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>
  }
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	4618      	mov	r0, r3
 8013daa:	3708      	adds	r7, #8
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}

08013db0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8013db0:	b480      	push	{r7}
 8013db2:	b083      	sub	sp, #12
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	4618      	mov	r0, r3
 8013dbc:	370c      	adds	r7, #12
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc4:	4770      	bx	lr

08013dc6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013dc6:	b5b0      	push	{r4, r5, r7, lr}
 8013dc8:	b084      	sub	sp, #16
 8013dca:	af00      	add	r7, sp, #0
 8013dcc:	60f8      	str	r0, [r7, #12]
 8013dce:	60b9      	str	r1, [r7, #8]
 8013dd0:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	681c      	ldr	r4, [r3, #0]
 8013dd6:	68f8      	ldr	r0, [r7, #12]
 8013dd8:	f000 f923 	bl	8014022 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8013ddc:	4602      	mov	r2, r0
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	fb03 f502 	mul.w	r5, r3, r2
 8013de4:	68f8      	ldr	r0, [r7, #12]
 8013de6:	f000 f927 	bl	8014038 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 8013dea:	4602      	mov	r2, r0
 8013dec:	68bb      	ldr	r3, [r7, #8]
 8013dee:	fb02 f303 	mul.w	r3, r2, r3
 8013df2:	442b      	add	r3, r5
 8013df4:	009b      	lsls	r3, r3, #2
 8013df6:	4423      	add	r3, r4
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	ee07 3a90 	vmov	s15, r3
  }
 8013dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8013e02:	3710      	adds	r7, #16
 8013e04:	46bd      	mov	sp, r7
 8013e06:	bdb0      	pop	{r4, r5, r7, pc}

08013e08 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013e08:	b480      	push	{r7}
 8013e0a:	b083      	sub	sp, #12
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
    }
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	4618      	mov	r0, r3
 8013e14:	370c      	adds	r7, #12
 8013e16:	46bd      	mov	sp, r7
 8013e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1c:	4770      	bx	lr

08013e1e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013e1e:	b480      	push	{r7}
 8013e20:	b083      	sub	sp, #12
 8013e22:	af00      	add	r7, sp, #0
 8013e24:	6078      	str	r0, [r7, #4]
    }
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	4618      	mov	r0, r3
 8013e2a:	370c      	adds	r7, #12
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e32:	4770      	bx	lr

08013e34 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b082      	sub	sp, #8
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f7ff fdb9 	bl	80139b6 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8013e44:	4603      	mov	r3, r0
    }
 8013e46:	4618      	mov	r0, r3
 8013e48:	3708      	adds	r7, #8
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}

08013e4e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8013e4e:	b580      	push	{r7, lr}
 8013e50:	b082      	sub	sp, #8
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	6078      	str	r0, [r7, #4]
 8013e56:	6039      	str	r1, [r7, #0]
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	6839      	ldr	r1, [r7, #0]
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	f000 f8f6 	bl	801404e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	4618      	mov	r0, r3
 8013e66:	3708      	adds	r7, #8
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}

08013e6c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8013e6c:	b480      	push	{r7}
 8013e6e:	b083      	sub	sp, #12
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	4618      	mov	r0, r3
 8013e78:	370c      	adds	r7, #12
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e80:	4770      	bx	lr

08013e82 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
 8013e82:	b480      	push	{r7}
 8013e84:	b083      	sub	sp, #12
 8013e86:	af00      	add	r7, sp, #0
 8013e88:	6078      	str	r0, [r7, #4]
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	370c      	adds	r7, #12
 8013e90:	46bd      	mov	sp, r7
 8013e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e96:	4770      	bx	lr

08013e98 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b084      	sub	sp, #16
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	60f8      	str	r0, [r7, #12]
 8013ea0:	60b9      	str	r1, [r7, #8]
 8013ea2:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8013ea4:	68b9      	ldr	r1, [r7, #8]
 8013ea6:	68f8      	ldr	r0, [r7, #12]
 8013ea8:	f000 f8e0 	bl	801406c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>
 8013eac:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8013eb4:	3710      	adds	r7, #16
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd80      	pop	{r7, pc}

08013eba <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
 8013eba:	b580      	push	{r7, lr}
 8013ebc:	b082      	sub	sp, #8
 8013ebe:	af00      	add	r7, sp, #0
 8013ec0:	6078      	str	r0, [r7, #4]
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	f000 f8f6 	bl	80140b4 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	4618      	mov	r0, r3
 8013ecc:	3708      	adds	r7, #8
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}
	...

08013ed4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b084      	sub	sp, #16
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	60f8      	str	r0, [r7, #12]
 8013edc:	60b9      	str	r1, [r7, #8]
 8013ede:	607a      	str	r2, [r7, #4]
 8013ee0:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8013ee2:	68f8      	ldr	r0, [r7, #12]
 8013ee4:	f7ff ffe9 	bl	8013eba <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	68ba      	ldr	r2, [r7, #8]
 8013eec:	601a      	str	r2, [r3, #0]
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	3304      	adds	r3, #4
 8013ef2:	6879      	ldr	r1, [r7, #4]
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f7f2 fcf3 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	3305      	adds	r3, #5
 8013efe:	6839      	ldr	r1, [r7, #0]
 8013f00:	4618      	mov	r0, r3
 8013f02:	f7f2 fced 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8013f06:	68bb      	ldr	r3, [r7, #8]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d011      	beq.n	8013f30 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	db08      	blt.n	8013f24 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2b01      	cmp	r3, #1
 8013f16:	d105      	bne.n	8013f24 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8013f18:	683b      	ldr	r3, [r7, #0]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	db02      	blt.n	8013f24 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	2b01      	cmp	r3, #1
 8013f22:	d005      	beq.n	8013f30 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8013f24:	4b07      	ldr	r3, [pc, #28]	; (8013f44 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 8013f26:	4a08      	ldr	r2, [pc, #32]	; (8013f48 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 8013f28:	21b0      	movs	r1, #176	; 0xb0
 8013f2a:	4808      	ldr	r0, [pc, #32]	; (8013f4c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 8013f2c:	f009 fe4a 	bl	801dbc4 <__assert_func>
      checkSanity<Derived>();
 8013f30:	2100      	movs	r1, #0
 8013f32:	68f8      	ldr	r0, [r7, #12]
 8013f34:	f000 f8c9 	bl	80140ca <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	3710      	adds	r7, #16
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bd80      	pop	{r7, pc}
 8013f42:	bf00      	nop
 8013f44:	08026150 	.word	0x08026150
 8013f48:	08029264 	.word	0x08029264
 8013f4c:	08026300 	.word	0x08026300

08013f50 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b082      	sub	sp, #8
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	689b      	ldr	r3, [r3, #8]
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f7fe fd73 	bl	8012a48 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8013f62:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	615a      	str	r2, [r3, #20]
    }
 8013f68:	bf00      	nop
 8013f6a:	3708      	adds	r7, #8
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}

08013f70 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b082      	sub	sp, #8
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
 8013f78:	6039      	str	r1, [r7, #0]
 8013f7a:	6878      	ldr	r0, [r7, #4]
 8013f7c:	f000 f8b0 	bl	80140e0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	6839      	ldr	r1, [r7, #0]
 8013f84:	4618      	mov	r0, r3
 8013f86:	f000 f8b6 	bl	80140f6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	3708      	adds	r7, #8
 8013f90:	46bd      	mov	sp, r7
 8013f92:	bd80      	pop	{r7, pc}

08013f94 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b084      	sub	sp, #16
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	60f8      	str	r0, [r7, #12]
 8013f9c:	60b9      	str	r1, [r7, #8]
 8013f9e:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	687a      	ldr	r2, [r7, #4]
 8013fa4:	68b9      	ldr	r1, [r7, #8]
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f000 f8cd 	bl	8014146 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8013fac:	eef0 7a40 	vmov.f32	s15, s0
 8013fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8013fb4:	3710      	adds	r7, #16
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}

08013fba <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013fba:	b580      	push	{r7, lr}
 8013fbc:	b082      	sub	sp, #8
 8013fbe:	af00      	add	r7, sp, #0
 8013fc0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013fc2:	2202      	movs	r2, #2
 8013fc4:	2102      	movs	r1, #2
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f7fd fe14 	bl	8011bf4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013fcc:	6878      	ldr	r0, [r7, #4]
 8013fce:	f000 f8ea 	bl	80141a6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>
  }
 8013fd2:	bf00      	nop
 8013fd4:	3708      	adds	r7, #8
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}

08013fda <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013fda:	b580      	push	{r7, lr}
 8013fdc:	b082      	sub	sp, #8
 8013fde:	af00      	add	r7, sp, #0
 8013fe0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013fe2:	2201      	movs	r2, #1
 8013fe4:	2102      	movs	r1, #2
 8013fe6:	6878      	ldr	r0, [r7, #4]
 8013fe8:	f7fe faad 	bl	8012546 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f000 f8e4 	bl	80141ba <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>
  }
 8013ff2:	bf00      	nop
 8013ff4:	3708      	adds	r7, #8
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}

08013ffa <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8013ffa:	b580      	push	{r7, lr}
 8013ffc:	b082      	sub	sp, #8
 8013ffe:	af00      	add	r7, sp, #0
 8014000:	6078      	str	r0, [r7, #4]
 8014002:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	6839      	ldr	r1, [r7, #0]
 8014008:	4618      	mov	r0, r3
 801400a:	f000 f8e6 	bl	80141da <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 801400e:	683b      	ldr	r3, [r7, #0]
 8014010:	4618      	mov	r0, r3
 8014012:	f000 f90c 	bl	801422e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 8014016:	bf00      	nop
  }
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	4618      	mov	r0, r3
 801401c:	3708      	adds	r7, #8
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}

08014022 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8014022:	b580      	push	{r7, lr}
 8014024:	b082      	sub	sp, #8
 8014026:	af00      	add	r7, sp, #0
 8014028:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 801402a:	f7f2 fc7e 	bl	800692a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 801402e:	4603      	mov	r3, r0
  }
 8014030:	4618      	mov	r0, r3
 8014032:	3708      	adds	r7, #8
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}

08014038 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8014038:	b580      	push	{r7, lr}
 801403a:	b082      	sub	sp, #8
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8014040:	f7f2 fc7b 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8014044:	4603      	mov	r3, r0
  }
 8014046:	4618      	mov	r0, r3
 8014048:	3708      	adds	r7, #8
 801404a:	46bd      	mov	sp, r7
 801404c:	bd80      	pop	{r7, pc}

0801404e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 801404e:	b580      	push	{r7, lr}
 8014050:	b082      	sub	sp, #8
 8014052:	af00      	add	r7, sp, #0
 8014054:	6078      	str	r0, [r7, #4]
 8014056:	6039      	str	r1, [r7, #0]
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	6839      	ldr	r1, [r7, #0]
 801405c:	4618      	mov	r0, r3
 801405e:	f000 f8f2 	bl	8014246 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	4618      	mov	r0, r3
 8014066:	3708      	adds	r7, #8
 8014068:	46bd      	mov	sp, r7
 801406a:	bd80      	pop	{r7, pc}

0801406c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801406c:	b580      	push	{r7, lr}
 801406e:	b084      	sub	sp, #16
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
 8014074:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014076:	6839      	ldr	r1, [r7, #0]
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f000 f8f6 	bl	801426a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>
 801407e:	eef0 7a40 	vmov.f32	s15, s0
 8014082:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8014086:	6839      	ldr	r1, [r7, #0]
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f000 f8ff 	bl	801428c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>
 801408e:	eef0 7a40 	vmov.f32	s15, s0
 8014092:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014096:	f107 020c 	add.w	r2, r7, #12
 801409a:	f107 0308 	add.w	r3, r7, #8
 801409e:	4619      	mov	r1, r3
 80140a0:	6838      	ldr	r0, [r7, #0]
 80140a2:	f7f5 f808 	bl	80090b6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80140a6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80140aa:	eeb0 0a67 	vmov.f32	s0, s15
 80140ae:	3710      	adds	r7, #16
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}

080140b4 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80140b4:	b480      	push	{r7}
 80140b6:	b083      	sub	sp, #12
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
    }
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	4618      	mov	r0, r3
 80140c0:	370c      	adds	r7, #12
 80140c2:	46bd      	mov	sp, r7
 80140c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c8:	4770      	bx	lr

080140ca <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 80140ca:	b480      	push	{r7}
 80140cc:	b083      	sub	sp, #12
 80140ce:	af00      	add	r7, sp, #0
 80140d0:	6078      	str	r0, [r7, #4]
 80140d2:	6039      	str	r1, [r7, #0]
    {}
 80140d4:	bf00      	nop
 80140d6:	370c      	adds	r7, #12
 80140d8:	46bd      	mov	sp, r7
 80140da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140de:	4770      	bx	lr

080140e0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80140e0:	b480      	push	{r7}
 80140e2:	b083      	sub	sp, #12
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	4618      	mov	r0, r3
 80140ec:	370c      	adds	r7, #12
 80140ee:	46bd      	mov	sp, r7
 80140f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f4:	4770      	bx	lr

080140f6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80140f6:	b590      	push	{r4, r7, lr}
 80140f8:	b083      	sub	sp, #12
 80140fa:	af00      	add	r7, sp, #0
 80140fc:	6078      	str	r0, [r7, #4]
 80140fe:	6039      	str	r1, [r7, #0]
 8014100:	687c      	ldr	r4, [r7, #4]
 8014102:	6838      	ldr	r0, [r7, #0]
 8014104:	f000 f8e6 	bl	80142d4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>
 8014108:	4603      	mov	r3, r0
 801410a:	4619      	mov	r1, r3
 801410c:	4620      	mov	r0, r4
 801410e:	f7f1 f96d 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	1d1c      	adds	r4, r3, #4
 8014116:	6838      	ldr	r0, [r7, #0]
 8014118:	f000 f8e8 	bl	80142ec <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>
 801411c:	4603      	mov	r3, r0
 801411e:	4619      	mov	r1, r3
 8014120:	4620      	mov	r0, r4
 8014122:	f7fa ffac 	bl	800f07e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	f103 040c 	add.w	r4, r3, #12
 801412c:	6838      	ldr	r0, [r7, #0]
 801412e:	f000 f8e8 	bl	8014302 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>
 8014132:	4603      	mov	r3, r0
 8014134:	4619      	mov	r1, r3
 8014136:	4620      	mov	r0, r4
 8014138:	f000 f8ef 	bl	801431a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	4618      	mov	r0, r3
 8014140:	370c      	adds	r7, #12
 8014142:	46bd      	mov	sp, r7
 8014144:	bd90      	pop	{r4, r7, pc}

08014146 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014146:	b590      	push	{r4, r7, lr}
 8014148:	b087      	sub	sp, #28
 801414a:	af00      	add	r7, sp, #0
 801414c:	60f8      	str	r0, [r7, #12]
 801414e:	60b9      	str	r1, [r7, #8]
 8014150:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	4618      	mov	r0, r3
 8014156:	f000 f8ef 	bl	8014338 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 801415a:	4604      	mov	r4, r0
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	3304      	adds	r3, #4
 8014160:	687a      	ldr	r2, [r7, #4]
 8014162:	68b9      	ldr	r1, [r7, #8]
 8014164:	4618      	mov	r0, r3
 8014166:	f7fa ffb3 	bl	800f0d0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 801416a:	eef0 7a40 	vmov.f32	s15, s0
 801416e:	edc7 7a04 	vstr	s15, [r7, #16]
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	330c      	adds	r3, #12
 8014176:	687a      	ldr	r2, [r7, #4]
 8014178:	68b9      	ldr	r1, [r7, #8]
 801417a:	4618      	mov	r0, r3
 801417c:	f000 f8e7 	bl	801434e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 8014180:	eef0 7a40 	vmov.f32	s15, s0
 8014184:	edc7 7a05 	vstr	s15, [r7, #20]
 8014188:	f107 0214 	add.w	r2, r7, #20
 801418c:	f107 0310 	add.w	r3, r7, #16
 8014190:	4619      	mov	r1, r3
 8014192:	4620      	mov	r0, r4
 8014194:	f7fa ffd0 	bl	800f138 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8014198:	eef0 7a40 	vmov.f32	s15, s0
  }
 801419c:	eeb0 0a67 	vmov.f32	s0, s15
 80141a0:	371c      	adds	r7, #28
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd90      	pop	{r4, r7, pc}

080141a6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80141a6:	b480      	push	{r7}
 80141a8:	b083      	sub	sp, #12
 80141aa:	af00      	add	r7, sp, #0
 80141ac:	6078      	str	r0, [r7, #4]
 80141ae:	bf00      	nop
 80141b0:	370c      	adds	r7, #12
 80141b2:	46bd      	mov	sp, r7
 80141b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b8:	4770      	bx	lr

080141ba <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80141ba:	b580      	push	{r7, lr}
 80141bc:	b082      	sub	sp, #8
 80141be:	af00      	add	r7, sp, #0
 80141c0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80141c2:	2202      	movs	r2, #2
 80141c4:	2102      	movs	r1, #2
 80141c6:	6878      	ldr	r0, [r7, #4]
 80141c8:	f7fe f9bd 	bl	8012546 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80141cc:	6878      	ldr	r0, [r7, #4]
 80141ce:	f000 f8df 	bl	8014390 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>
  }
 80141d2:	bf00      	nop
 80141d4:	3708      	adds	r7, #8
 80141d6:	46bd      	mov	sp, r7
 80141d8:	bd80      	pop	{r7, pc}

080141da <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 80141da:	b590      	push	{r4, r7, lr}
 80141dc:	b083      	sub	sp, #12
 80141de:	af00      	add	r7, sp, #0
 80141e0:	6078      	str	r0, [r7, #4]
 80141e2:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80141e4:	6878      	ldr	r0, [r7, #4]
 80141e6:	f000 f8f9 	bl	80143dc <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	4618      	mov	r0, r3
 80141ee:	f000 f81e 	bl	801422e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 80141f2:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	601a      	str	r2, [r3, #0]
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	1d1c      	adds	r4, r3, #4
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	4618      	mov	r0, r3
 8014200:	f000 f8d0 	bl	80143a4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>
 8014204:	4603      	mov	r3, r0
 8014206:	4619      	mov	r1, r3
 8014208:	4620      	mov	r0, r4
 801420a:	f7f2 fb69 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	1d5c      	adds	r4, r3, #5
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	4618      	mov	r0, r3
 8014216:	f000 f8d3 	bl	80143c0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>
 801421a:	4603      	mov	r3, r0
 801421c:	4619      	mov	r1, r3
 801421e:	4620      	mov	r0, r4
 8014220:	f7f2 fb44 	bl	80068ac <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	4618      	mov	r0, r3
 8014228:	370c      	adds	r7, #12
 801422a:	46bd      	mov	sp, r7
 801422c:	bd90      	pop	{r4, r7, pc}

0801422e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 801422e:	b480      	push	{r7}
 8014230:	b083      	sub	sp, #12
 8014232:	af00      	add	r7, sp, #0
 8014234:	6078      	str	r0, [r7, #4]
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	4618      	mov	r0, r3
 801423c:	370c      	adds	r7, #12
 801423e:	46bd      	mov	sp, r7
 8014240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014244:	4770      	bx	lr

08014246 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8014246:	b580      	push	{r7, lr}
 8014248:	b082      	sub	sp, #8
 801424a:	af00      	add	r7, sp, #0
 801424c:	6078      	str	r0, [r7, #4]
 801424e:	6039      	str	r1, [r7, #0]
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f000 f8ce 	bl	80143f2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	6839      	ldr	r1, [r7, #0]
 801425a:	4618      	mov	r0, r3
 801425c:	f000 f8d4 	bl	8014408 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	4618      	mov	r0, r3
 8014264:	3708      	adds	r7, #8
 8014266:	46bd      	mov	sp, r7
 8014268:	bd80      	pop	{r7, pc}

0801426a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801426a:	b580      	push	{r7, lr}
 801426c:	b082      	sub	sp, #8
 801426e:	af00      	add	r7, sp, #0
 8014270:	6078      	str	r0, [r7, #4]
 8014272:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014274:	2200      	movs	r2, #0
 8014276:	2100      	movs	r1, #0
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f000 f8ed 	bl	8014458 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 801427e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014282:	eeb0 0a67 	vmov.f32	s0, s15
 8014286:	3708      	adds	r7, #8
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}

0801428c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801428c:	b580      	push	{r7, lr}
 801428e:	b084      	sub	sp, #16
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
 8014294:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014296:	6839      	ldr	r1, [r7, #0]
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f000 f8f0 	bl	801447e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>
 801429e:	eef0 7a40 	vmov.f32	s15, s0
 80142a2:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80142a6:	6839      	ldr	r1, [r7, #0]
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f000 f8f9 	bl	80144a0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>
 80142ae:	eef0 7a40 	vmov.f32	s15, s0
 80142b2:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80142b6:	f107 020c 	add.w	r2, r7, #12
 80142ba:	f107 0308 	add.w	r3, r7, #8
 80142be:	4619      	mov	r1, r3
 80142c0:	6838      	ldr	r0, [r7, #0]
 80142c2:	f7f4 fef8 	bl	80090b6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80142c6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80142ca:	eeb0 0a67 	vmov.f32	s0, s15
 80142ce:	3710      	adds	r7, #16
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bd80      	pop	{r7, pc}

080142d4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80142d4:	b480      	push	{r7}
 80142d6:	b083      	sub	sp, #12
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	3330      	adds	r3, #48	; 0x30
 80142e0:	4618      	mov	r0, r3
 80142e2:	370c      	adds	r7, #12
 80142e4:	46bd      	mov	sp, r7
 80142e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ea:	4770      	bx	lr

080142ec <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80142ec:	b480      	push	{r7}
 80142ee:	b083      	sub	sp, #12
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	4618      	mov	r0, r3
 80142f8:	370c      	adds	r7, #12
 80142fa:	46bd      	mov	sp, r7
 80142fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014300:	4770      	bx	lr

08014302 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8014302:	b480      	push	{r7}
 8014304:	b083      	sub	sp, #12
 8014306:	af00      	add	r7, sp, #0
 8014308:	6078      	str	r0, [r7, #4]
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	3318      	adds	r3, #24
 801430e:	4618      	mov	r0, r3
 8014310:	370c      	adds	r7, #12
 8014312:	46bd      	mov	sp, r7
 8014314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014318:	4770      	bx	lr

0801431a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801431a:	b580      	push	{r7, lr}
 801431c:	b082      	sub	sp, #8
 801431e:	af00      	add	r7, sp, #0
 8014320:	6078      	str	r0, [r7, #4]
 8014322:	6039      	str	r1, [r7, #0]
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6839      	ldr	r1, [r7, #0]
 8014328:	4618      	mov	r0, r3
 801432a:	f000 f8ca 	bl	80144c2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	4618      	mov	r0, r3
 8014332:	3708      	adds	r7, #8
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}

08014338 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8014338:	b480      	push	{r7}
 801433a:	b083      	sub	sp, #12
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	4618      	mov	r0, r3
 8014344:	370c      	adds	r7, #12
 8014346:	46bd      	mov	sp, r7
 8014348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434c:	4770      	bx	lr

0801434e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801434e:	b5b0      	push	{r4, r5, r7, lr}
 8014350:	b084      	sub	sp, #16
 8014352:	af00      	add	r7, sp, #0
 8014354:	60f8      	str	r0, [r7, #12]
 8014356:	60b9      	str	r1, [r7, #8]
 8014358:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	681c      	ldr	r4, [r3, #0]
 801435e:	68f8      	ldr	r0, [r7, #12]
 8014360:	f000 f8be 	bl	80144e0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 8014364:	4602      	mov	r2, r0
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	fb03 f502 	mul.w	r5, r3, r2
 801436c:	68f8      	ldr	r0, [r7, #12]
 801436e:	f000 f8c2 	bl	80144f6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 8014372:	4602      	mov	r2, r0
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	fb02 f303 	mul.w	r3, r2, r3
 801437a:	442b      	add	r3, r5
 801437c:	009b      	lsls	r3, r3, #2
 801437e:	4423      	add	r3, r4
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	ee07 3a90 	vmov	s15, r3
  }
 8014386:	eeb0 0a67 	vmov.f32	s0, s15
 801438a:	3710      	adds	r7, #16
 801438c:	46bd      	mov	sp, r7
 801438e:	bdb0      	pop	{r4, r5, r7, pc}

08014390 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8014390:	b480      	push	{r7}
 8014392:	b083      	sub	sp, #12
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
 8014398:	bf00      	nop
 801439a:	370c      	adds	r7, #12
 801439c:	46bd      	mov	sp, r7
 801439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a2:	4770      	bx	lr

080143a4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b082      	sub	sp, #8
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	3308      	adds	r3, #8
 80143b0:	4618      	mov	r0, r3
 80143b2:	f7fe fd4e 	bl	8012e52 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>
 80143b6:	4603      	mov	r3, r0
    }
 80143b8:	4618      	mov	r0, r3
 80143ba:	3708      	adds	r7, #8
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}

080143c0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b082      	sub	sp, #8
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	3308      	adds	r3, #8
 80143cc:	4618      	mov	r0, r3
 80143ce:	f7fe fd54 	bl	8012e7a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 80143d2:	4603      	mov	r3, r0
    }
 80143d4:	4618      	mov	r0, r3
 80143d6:	3708      	adds	r7, #8
 80143d8:	46bd      	mov	sp, r7
 80143da:	bd80      	pop	{r7, pc}

080143dc <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80143dc:	b480      	push	{r7}
 80143de:	b083      	sub	sp, #12
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	4618      	mov	r0, r3
 80143e8:	370c      	adds	r7, #12
 80143ea:	46bd      	mov	sp, r7
 80143ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f0:	4770      	bx	lr

080143f2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 80143f2:	b480      	push	{r7}
 80143f4:	b083      	sub	sp, #12
 80143f6:	af00      	add	r7, sp, #0
 80143f8:	6078      	str	r0, [r7, #4]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	4618      	mov	r0, r3
 80143fe:	370c      	adds	r7, #12
 8014400:	46bd      	mov	sp, r7
 8014402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014406:	4770      	bx	lr

08014408 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8014408:	b590      	push	{r4, r7, lr}
 801440a:	b083      	sub	sp, #12
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	6039      	str	r1, [r7, #0]
 8014412:	687c      	ldr	r4, [r7, #4]
 8014414:	6838      	ldr	r0, [r7, #0]
 8014416:	f000 f879 	bl	801450c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>
 801441a:	4603      	mov	r3, r0
 801441c:	4619      	mov	r1, r3
 801441e:	4620      	mov	r0, r4
 8014420:	f7f0 ffe4 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	1d1c      	adds	r4, r3, #4
 8014428:	6838      	ldr	r0, [r7, #0]
 801442a:	f000 f87b 	bl	8014524 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>
 801442e:	4603      	mov	r3, r0
 8014430:	4619      	mov	r1, r3
 8014432:	4620      	mov	r0, r4
 8014434:	f000 f88d 	bl	8014552 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	f103 0414 	add.w	r4, r3, #20
 801443e:	6838      	ldr	r0, [r7, #0]
 8014440:	f000 f87b 	bl	801453a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>
 8014444:	4603      	mov	r3, r0
 8014446:	4619      	mov	r1, r3
 8014448:	4620      	mov	r0, r4
 801444a:	f000 f891 	bl	8014570 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	4618      	mov	r0, r3
 8014452:	370c      	adds	r7, #12
 8014454:	46bd      	mov	sp, r7
 8014456:	bd90      	pop	{r4, r7, pc}

08014458 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8014458:	b580      	push	{r7, lr}
 801445a:	b084      	sub	sp, #16
 801445c:	af00      	add	r7, sp, #0
 801445e:	60f8      	str	r0, [r7, #12]
 8014460:	60b9      	str	r1, [r7, #8]
 8014462:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	68ba      	ldr	r2, [r7, #8]
 8014468:	6879      	ldr	r1, [r7, #4]
 801446a:	4618      	mov	r0, r3
 801446c:	f000 f88f 	bl	801458e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>
 8014470:	eef0 7a40 	vmov.f32	s15, s0
 8014474:	eeb0 0a67 	vmov.f32	s0, s15
 8014478:	3710      	adds	r7, #16
 801447a:	46bd      	mov	sp, r7
 801447c:	bd80      	pop	{r7, pc}

0801447e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801447e:	b580      	push	{r7, lr}
 8014480:	b082      	sub	sp, #8
 8014482:	af00      	add	r7, sp, #0
 8014484:	6078      	str	r0, [r7, #4]
 8014486:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014488:	2201      	movs	r2, #1
 801448a:	2100      	movs	r1, #0
 801448c:	6878      	ldr	r0, [r7, #4]
 801448e:	f7ff ffe3 	bl	8014458 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 8014492:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014496:	eeb0 0a67 	vmov.f32	s0, s15
 801449a:	3708      	adds	r7, #8
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}

080144a0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b082      	sub	sp, #8
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80144aa:	2202      	movs	r2, #2
 80144ac:	2100      	movs	r1, #0
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f7ff ffd2 	bl	8014458 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 80144b4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80144b8:	eeb0 0a67 	vmov.f32	s0, s15
 80144bc:	3708      	adds	r7, #8
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}

080144c2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80144c2:	b580      	push	{r7, lr}
 80144c4:	b082      	sub	sp, #8
 80144c6:	af00      	add	r7, sp, #0
 80144c8:	6078      	str	r0, [r7, #4]
 80144ca:	6039      	str	r1, [r7, #0]
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	6839      	ldr	r1, [r7, #0]
 80144d0:	4618      	mov	r0, r3
 80144d2:	f000 f887 	bl	80145e4 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	4618      	mov	r0, r3
 80144da:	3708      	adds	r7, #8
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}

080144e0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b082      	sub	sp, #8
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80144e8:	f7f2 fa27 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80144ec:	4603      	mov	r3, r0
  }
 80144ee:	4618      	mov	r0, r3
 80144f0:	3708      	adds	r7, #8
 80144f2:	46bd      	mov	sp, r7
 80144f4:	bd80      	pop	{r7, pc}

080144f6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80144f6:	b580      	push	{r7, lr}
 80144f8:	b082      	sub	sp, #8
 80144fa:	af00      	add	r7, sp, #0
 80144fc:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80144fe:	f7f2 fa14 	bl	800692a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8014502:	4603      	mov	r3, r0
  }
 8014504:	4618      	mov	r0, r3
 8014506:	3708      	adds	r7, #8
 8014508:	46bd      	mov	sp, r7
 801450a:	bd80      	pop	{r7, pc}

0801450c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 801450c:	b480      	push	{r7}
 801450e:	b083      	sub	sp, #12
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	330c      	adds	r3, #12
 8014518:	4618      	mov	r0, r3
 801451a:	370c      	adds	r7, #12
 801451c:	46bd      	mov	sp, r7
 801451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014522:	4770      	bx	lr

08014524 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8014524:	b480      	push	{r7}
 8014526:	b083      	sub	sp, #12
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	4618      	mov	r0, r3
 8014530:	370c      	adds	r7, #12
 8014532:	46bd      	mov	sp, r7
 8014534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014538:	4770      	bx	lr

0801453a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 801453a:	b480      	push	{r7}
 801453c:	b083      	sub	sp, #12
 801453e:	af00      	add	r7, sp, #0
 8014540:	6078      	str	r0, [r7, #4]
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	3308      	adds	r3, #8
 8014546:	4618      	mov	r0, r3
 8014548:	370c      	adds	r7, #12
 801454a:	46bd      	mov	sp, r7
 801454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014550:	4770      	bx	lr

08014552 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8014552:	b580      	push	{r7, lr}
 8014554:	b082      	sub	sp, #8
 8014556:	af00      	add	r7, sp, #0
 8014558:	6078      	str	r0, [r7, #4]
 801455a:	6039      	str	r1, [r7, #0]
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	6839      	ldr	r1, [r7, #0]
 8014560:	4618      	mov	r0, r3
 8014562:	f000 f853 	bl	801460c <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	4618      	mov	r0, r3
 801456a:	3708      	adds	r7, #8
 801456c:	46bd      	mov	sp, r7
 801456e:	bd80      	pop	{r7, pc}

08014570 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>:
 8014570:	b580      	push	{r7, lr}
 8014572:	b082      	sub	sp, #8
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
 8014578:	6039      	str	r1, [r7, #0]
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	6839      	ldr	r1, [r7, #0]
 801457e:	4618      	mov	r0, r3
 8014580:	f7fc f952 	bl	8010828 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	4618      	mov	r0, r3
 8014588:	3708      	adds	r7, #8
 801458a:	46bd      	mov	sp, r7
 801458c:	bd80      	pop	{r7, pc}

0801458e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801458e:	b590      	push	{r4, r7, lr}
 8014590:	b087      	sub	sp, #28
 8014592:	af00      	add	r7, sp, #0
 8014594:	60f8      	str	r0, [r7, #12]
 8014596:	60b9      	str	r1, [r7, #8]
 8014598:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	4618      	mov	r0, r3
 801459e:	f000 f844 	bl	801462a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 80145a2:	4604      	mov	r4, r0
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	3304      	adds	r3, #4
 80145a8:	687a      	ldr	r2, [r7, #4]
 80145aa:	68b9      	ldr	r1, [r7, #8]
 80145ac:	4618      	mov	r0, r3
 80145ae:	f000 f847 	bl	8014640 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>
 80145b2:	eef0 7a40 	vmov.f32	s15, s0
 80145b6:	edc7 7a05 	vstr	s15, [r7, #20]
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	3314      	adds	r3, #20
 80145be:	687a      	ldr	r2, [r7, #4]
 80145c0:	68b9      	ldr	r1, [r7, #8]
 80145c2:	4618      	mov	r0, r3
 80145c4:	f000 f851 	bl	801466a <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 80145c8:	4602      	mov	r2, r0
 80145ca:	f107 0314 	add.w	r3, r7, #20
 80145ce:	4619      	mov	r1, r3
 80145d0:	4620      	mov	r0, r4
 80145d2:	f7fa fdb1 	bl	800f138 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80145d6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80145da:	eeb0 0a67 	vmov.f32	s0, s15
 80145de:	371c      	adds	r7, #28
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd90      	pop	{r4, r7, pc}

080145e4 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b082      	sub	sp, #8
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
 80145ec:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	6839      	ldr	r1, [r7, #0]
 80145f2:	4618      	mov	r0, r3
 80145f4:	f000 f84a 	bl	801468c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	4618      	mov	r0, r3
 80145fc:	f000 f870 	bl	80146e0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 8014600:	bf00      	nop
  }
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	4618      	mov	r0, r3
 8014606:	3708      	adds	r7, #8
 8014608:	46bd      	mov	sp, r7
 801460a:	bd80      	pop	{r7, pc}

0801460c <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 801460c:	b580      	push	{r7, lr}
 801460e:	b082      	sub	sp, #8
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
 8014614:	6039      	str	r1, [r7, #0]
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	6839      	ldr	r1, [r7, #0]
 801461a:	4618      	mov	r0, r3
 801461c:	f000 f86c 	bl	80146f8 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	4618      	mov	r0, r3
 8014624:	3708      	adds	r7, #8
 8014626:	46bd      	mov	sp, r7
 8014628:	bd80      	pop	{r7, pc}

0801462a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 801462a:	b480      	push	{r7}
 801462c:	b083      	sub	sp, #12
 801462e:	af00      	add	r7, sp, #0
 8014630:	6078      	str	r0, [r7, #4]
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	4618      	mov	r0, r3
 8014636:	370c      	adds	r7, #12
 8014638:	46bd      	mov	sp, r7
 801463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801463e:	4770      	bx	lr

08014640 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014640:	b580      	push	{r7, lr}
 8014642:	b084      	sub	sp, #16
 8014644:	af00      	add	r7, sp, #0
 8014646:	60f8      	str	r0, [r7, #12]
 8014648:	60b9      	str	r1, [r7, #8]
 801464a:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	68ba      	ldr	r2, [r7, #8]
 8014650:	6879      	ldr	r1, [r7, #4]
 8014652:	4618      	mov	r0, r3
 8014654:	f7ff f85b 	bl	801370e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8014658:	4603      	mov	r3, r0
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	ee07 3a90 	vmov	s15, r3
  }
 8014660:	eeb0 0a67 	vmov.f32	s0, s15
 8014664:	3710      	adds	r7, #16
 8014666:	46bd      	mov	sp, r7
 8014668:	bd80      	pop	{r7, pc}

0801466a <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801466a:	b580      	push	{r7, lr}
 801466c:	b084      	sub	sp, #16
 801466e:	af00      	add	r7, sp, #0
 8014670:	60f8      	str	r0, [r7, #12]
 8014672:	60b9      	str	r1, [r7, #8]
 8014674:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	68ba      	ldr	r2, [r7, #8]
 801467a:	6879      	ldr	r1, [r7, #4]
 801467c:	4618      	mov	r0, r3
 801467e:	f7ff f846 	bl	801370e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8014682:	4603      	mov	r3, r0
  }
 8014684:	4618      	mov	r0, r3
 8014686:	3710      	adds	r7, #16
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 801468c:	b590      	push	{r4, r7, lr}
 801468e:	b083      	sub	sp, #12
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
 8014694:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8014696:	6878      	ldr	r0, [r7, #4]
 8014698:	f000 f860 	bl	801475c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	4618      	mov	r0, r3
 80146a0:	f000 f81e 	bl	80146e0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 80146a4:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	601a      	str	r2, [r3, #0]
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	1d1c      	adds	r4, r3, #4
 80146ae:	683b      	ldr	r3, [r7, #0]
 80146b0:	4618      	mov	r0, r3
 80146b2:	f000 f837 	bl	8014724 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 80146b6:	4603      	mov	r3, r0
 80146b8:	4619      	mov	r1, r3
 80146ba:	4620      	mov	r0, r4
 80146bc:	f7f2 f910 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	1d5c      	adds	r4, r3, #5
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	4618      	mov	r0, r3
 80146c8:	f000 f83a 	bl	8014740 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 80146cc:	4603      	mov	r3, r0
 80146ce:	4619      	mov	r1, r3
 80146d0:	4620      	mov	r0, r4
 80146d2:	f7f2 f8eb 	bl	80068ac <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	4618      	mov	r0, r3
 80146da:	370c      	adds	r7, #12
 80146dc:	46bd      	mov	sp, r7
 80146de:	bd90      	pop	{r4, r7, pc}

080146e0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>:
 80146e0:	b480      	push	{r7}
 80146e2:	b083      	sub	sp, #12
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	4618      	mov	r0, r3
 80146ee:	370c      	adds	r7, #12
 80146f0:	46bd      	mov	sp, r7
 80146f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f6:	4770      	bx	lr

080146f8 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80146f8:	b590      	push	{r4, r7, lr}
 80146fa:	b083      	sub	sp, #12
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
 8014700:	6039      	str	r1, [r7, #0]
 8014702:	6878      	ldr	r0, [r7, #4]
 8014704:	f000 f840 	bl	8014788 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8014708:	687c      	ldr	r4, [r7, #4]
 801470a:	6838      	ldr	r0, [r7, #0]
 801470c:	f000 f831 	bl	8014772 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>
 8014710:	4603      	mov	r3, r0
 8014712:	4619      	mov	r1, r3
 8014714:	4620      	mov	r0, r4
 8014716:	f000 f842 	bl	801479e <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	4618      	mov	r0, r3
 801471e:	370c      	adds	r7, #12
 8014720:	46bd      	mov	sp, r7
 8014722:	bd90      	pop	{r4, r7, pc}

08014724 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8014724:	b580      	push	{r7, lr}
 8014726:	b082      	sub	sp, #8
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	689b      	ldr	r3, [r3, #8]
 8014730:	4618      	mov	r0, r3
 8014732:	f7fe fecd 	bl	80134d0 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8014736:	4603      	mov	r3, r0
    }
 8014738:	4618      	mov	r0, r3
 801473a:	3708      	adds	r7, #8
 801473c:	46bd      	mov	sp, r7
 801473e:	bd80      	pop	{r7, pc}

08014740 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8014740:	b580      	push	{r7, lr}
 8014742:	b082      	sub	sp, #8
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	689b      	ldr	r3, [r3, #8]
 801474c:	4618      	mov	r0, r3
 801474e:	f7fe f97b 	bl	8012a48 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8014752:	4603      	mov	r3, r0
    }
 8014754:	4618      	mov	r0, r3
 8014756:	3708      	adds	r7, #8
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}

0801475c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801475c:	b480      	push	{r7}
 801475e:	b083      	sub	sp, #12
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	4618      	mov	r0, r3
 8014768:	370c      	adds	r7, #12
 801476a:	46bd      	mov	sp, r7
 801476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014770:	4770      	bx	lr

08014772 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>:
 8014772:	b480      	push	{r7}
 8014774:	b083      	sub	sp, #12
 8014776:	af00      	add	r7, sp, #0
 8014778:	6078      	str	r0, [r7, #4]
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	4618      	mov	r0, r3
 801477e:	370c      	adds	r7, #12
 8014780:	46bd      	mov	sp, r7
 8014782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014786:	4770      	bx	lr

08014788 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8014788:	b480      	push	{r7}
 801478a:	b083      	sub	sp, #12
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	4618      	mov	r0, r3
 8014794:	370c      	adds	r7, #12
 8014796:	46bd      	mov	sp, r7
 8014798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479c:	4770      	bx	lr

0801479e <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801479e:	b580      	push	{r7, lr}
 80147a0:	b082      	sub	sp, #8
 80147a2:	af00      	add	r7, sp, #0
 80147a4:	6078      	str	r0, [r7, #4]
 80147a6:	6039      	str	r1, [r7, #0]
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	6839      	ldr	r1, [r7, #0]
 80147ac:	4618      	mov	r0, r3
 80147ae:	f000 f805 	bl	80147bc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	4618      	mov	r0, r3
 80147b6:	3708      	adds	r7, #8
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}

080147bc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80147bc:	b580      	push	{r7, lr}
 80147be:	b082      	sub	sp, #8
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
 80147c4:	6039      	str	r1, [r7, #0]
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	6839      	ldr	r1, [r7, #0]
 80147ca:	4618      	mov	r0, r3
 80147cc:	f000 f805 	bl	80147da <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	4618      	mov	r0, r3
 80147d4:	3708      	adds	r7, #8
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}

080147da <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 80147da:	b5b0      	push	{r4, r5, r7, lr}
 80147dc:	b084      	sub	sp, #16
 80147de:	af00      	add	r7, sp, #0
 80147e0:	6078      	str	r0, [r7, #4]
 80147e2:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	4618      	mov	r0, r3
 80147e8:	f000 f834 	bl	8014854 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	1d1c      	adds	r4, r3, #4
 80147f0:	6838      	ldr	r0, [r7, #0]
 80147f2:	f7f2 f9aa 	bl	8006b4a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 80147f6:	4603      	mov	r3, r0
 80147f8:	60bb      	str	r3, [r7, #8]
 80147fa:	6838      	ldr	r0, [r7, #0]
 80147fc:	f7f1 fa33 	bl	8005c66 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8014800:	4603      	mov	r3, r0
 8014802:	60fb      	str	r3, [r7, #12]
 8014804:	f107 020c 	add.w	r2, r7, #12
 8014808:	f107 0308 	add.w	r3, r7, #8
 801480c:	4619      	mov	r1, r3
 801480e:	4620      	mov	r0, r4
 8014810:	f000 f82d 	bl	801486e <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	4619      	mov	r1, r3
 8014818:	2004      	movs	r0, #4
 801481a:	f7ec fb8f 	bl	8000f3c <_ZnwjPv>
 801481e:	4602      	mov	r2, r0
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	3304      	adds	r3, #4
 8014824:	4619      	mov	r1, r3
 8014826:	4610      	mov	r0, r2
 8014828:	f7fd f884 	bl	8011934 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	1d1c      	adds	r4, r3, #4
 8014830:	6838      	ldr	r0, [r7, #0]
 8014832:	f000 f835 	bl	80148a0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>
 8014836:	4605      	mov	r5, r0
 8014838:	6838      	ldr	r0, [r7, #0]
 801483a:	f000 f83d 	bl	80148b8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>
 801483e:	4603      	mov	r3, r0
 8014840:	461a      	mov	r2, r3
 8014842:	4629      	mov	r1, r5
 8014844:	4620      	mov	r0, r4
 8014846:	f000 f843 	bl	80148d0 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>
  }
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	4618      	mov	r0, r3
 801484e:	3710      	adds	r7, #16
 8014850:	46bd      	mov	sp, r7
 8014852:	bdb0      	pop	{r4, r5, r7, pc}

08014854 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  evaluator() {}
 8014854:	b580      	push	{r7, lr}
 8014856:	b082      	sub	sp, #8
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	4618      	mov	r0, r3
 8014860:	f000 f854 	bl	801490c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	4618      	mov	r0, r3
 8014868:	3708      	adds	r7, #8
 801486a:	46bd      	mov	sp, r7
 801486c:	bd80      	pop	{r7, pc}

0801486e <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 801486e:	b580      	push	{r7, lr}
 8014870:	b084      	sub	sp, #16
 8014872:	af00      	add	r7, sp, #0
 8014874:	60f8      	str	r0, [r7, #12]
 8014876:	60b9      	str	r1, [r7, #8]
 8014878:	607a      	str	r2, [r7, #4]
    {
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	4618      	mov	r0, r3
 801487e:	f7f0 f9f1 	bl	8004c64 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 8014882:	f7f0 f9ff 	bl	8004c84 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8014886:	68f8      	ldr	r0, [r7, #12]
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	6819      	ldr	r1, [r3, #0]
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	681a      	ldr	r2, [r3, #0]
 8014890:	2300      	movs	r3, #0
 8014892:	f000 f84d 	bl	8014930 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	4618      	mov	r0, r3
 801489a:	3710      	adds	r7, #16
 801489c:	46bd      	mov	sp, r7
 801489e:	bd80      	pop	{r7, pc}

080148a0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80148a0:	b480      	push	{r7}
 80148a2:	b083      	sub	sp, #12
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	4618      	mov	r0, r3
 80148ae:	370c      	adds	r7, #12
 80148b0:	46bd      	mov	sp, r7
 80148b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b6:	4770      	bx	lr

080148b8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80148b8:	b480      	push	{r7}
 80148ba:	b083      	sub	sp, #12
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	685b      	ldr	r3, [r3, #4]
 80148c4:	4618      	mov	r0, r3
 80148c6:	370c      	adds	r7, #12
 80148c8:	46bd      	mov	sp, r7
 80148ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ce:	4770      	bx	lr

080148d0 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b088      	sub	sp, #32
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	60f8      	str	r0, [r7, #12]
 80148d8:	60b9      	str	r1, [r7, #8]
 80148da:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80148dc:	f107 0314 	add.w	r3, r7, #20
 80148e0:	687a      	ldr	r2, [r7, #4]
 80148e2:	68b9      	ldr	r1, [r7, #8]
 80148e4:	4618      	mov	r0, r3
 80148e6:	f000 f837 	bl	8014958 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 80148ea:	f107 031c 	add.w	r3, r7, #28
 80148ee:	4618      	mov	r0, r3
 80148f0:	f7f2 fa81 	bl	8006df6 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80148f4:	f107 021c 	add.w	r2, r7, #28
 80148f8:	f107 0314 	add.w	r3, r7, #20
 80148fc:	4619      	mov	r1, r3
 80148fe:	68f8      	ldr	r0, [r7, #12]
 8014900:	f000 f841 	bl	8014986 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8014904:	bf00      	nop
 8014906:	3720      	adds	r7, #32
 8014908:	46bd      	mov	sp, r7
 801490a:	bd80      	pop	{r7, pc}

0801490c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  evaluator()
 801490c:	b580      	push	{r7, lr}
 801490e:	b082      	sub	sp, #8
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f7fd fe76 	bl	8012606 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	2200      	movs	r2, #0
 801491e:	2100      	movs	r1, #0
 8014920:	4618      	mov	r0, r3
 8014922:	f7f2 fb28 	bl	8006f76 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	4618      	mov	r0, r3
 801492a:	3708      	adds	r7, #8
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}

08014930 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8014930:	b580      	push	{r7, lr}
 8014932:	b086      	sub	sp, #24
 8014934:	af00      	add	r7, sp, #0
 8014936:	60f8      	str	r0, [r7, #12]
 8014938:	60b9      	str	r1, [r7, #8]
 801493a:	607a      	str	r2, [r7, #4]
 801493c:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 801493e:	2301      	movs	r3, #1
 8014940:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8014942:	2301      	movs	r3, #1
 8014944:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8014946:	687a      	ldr	r2, [r7, #4]
 8014948:	68b9      	ldr	r1, [r7, #8]
 801494a:	68f8      	ldr	r0, [r7, #12]
 801494c:	f000 f82c 	bl	80149a8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
    }
 8014950:	bf00      	nop
 8014952:	3718      	adds	r7, #24
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}

08014958 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8014958:	b590      	push	{r4, r7, lr}
 801495a:	b085      	sub	sp, #20
 801495c:	af00      	add	r7, sp, #0
 801495e:	60f8      	str	r0, [r7, #12]
 8014960:	60b9      	str	r1, [r7, #8]
 8014962:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8014964:	68b8      	ldr	r0, [r7, #8]
 8014966:	f7f1 f8f1 	bl	8005b4c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 801496a:	4604      	mov	r4, r0
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f7f0 fe1c 	bl	80055aa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8014972:	4603      	mov	r3, r0
 8014974:	461a      	mov	r2, r3
 8014976:	4621      	mov	r1, r4
 8014978:	68f8      	ldr	r0, [r7, #12]
 801497a:	f000 f86b 	bl	8014a54 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>
}
 801497e:	68f8      	ldr	r0, [r7, #12]
 8014980:	3714      	adds	r7, #20
 8014982:	46bd      	mov	sp, r7
 8014984:	bd90      	pop	{r4, r7, pc}

08014986 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8014986:	b580      	push	{r7, lr}
 8014988:	b086      	sub	sp, #24
 801498a:	af00      	add	r7, sp, #0
 801498c:	60f8      	str	r0, [r7, #12]
 801498e:	60b9      	str	r1, [r7, #8]
 8014990:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8014996:	687a      	ldr	r2, [r7, #4]
 8014998:	68b9      	ldr	r1, [r7, #8]
 801499a:	6978      	ldr	r0, [r7, #20]
 801499c:	f000 f888 	bl	8014ab0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 80149a0:	bf00      	nop
 80149a2:	3718      	adds	r7, #24
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}

080149a8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b086      	sub	sp, #24
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	60f8      	str	r0, [r7, #12]
 80149b0:	60b9      	str	r1, [r7, #8]
 80149b2:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	2b01      	cmp	r3, #1
 80149b8:	d108      	bne.n	80149cc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	2b03      	cmp	r3, #3
 80149be:	d105      	bne.n	80149cc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 80149c0:	68bb      	ldr	r3, [r7, #8]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	db02      	blt.n	80149cc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	da06      	bge.n	80149da <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x32>
 80149cc:	4b0c      	ldr	r3, [pc, #48]	; (8014a00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x58>)
 80149ce:	4a0d      	ldr	r2, [pc, #52]	; (8014a04 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x5c>)
 80149d0:	f240 1111 	movw	r1, #273	; 0x111
 80149d4:	480c      	ldr	r0, [pc, #48]	; (8014a08 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x60>)
 80149d6:	f009 f8f5 	bl	801dbc4 <__assert_func>
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	617b      	str	r3, [r7, #20]
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	613b      	str	r3, [r7, #16]
  }
 80149e2:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 80149e4:	68f8      	ldr	r0, [r7, #12]
 80149e6:	68bb      	ldr	r3, [r7, #8]
 80149e8:	687a      	ldr	r2, [r7, #4]
 80149ea:	fb02 f103 	mul.w	r1, r2, r3
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	68ba      	ldr	r2, [r7, #8]
 80149f2:	f000 f870 	bl	8014ad6 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>
    }
 80149f6:	bf00      	nop
 80149f8:	3718      	adds	r7, #24
 80149fa:	46bd      	mov	sp, r7
 80149fc:	bd80      	pop	{r7, pc}
 80149fe:	bf00      	nop
 8014a00:	080224bc 	.word	0x080224bc
 8014a04:	08029368 	.word	0x08029368
 8014a08:	080226d8 	.word	0x080226d8

08014a0c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b082      	sub	sp, #8
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	6878      	ldr	r0, [r7, #4]
 8014a16:	f000 f86b 	bl	8014af0 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	3708      	adds	r7, #8
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}

08014a24 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>:
class dense_product_base
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b082      	sub	sp, #8
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	f7ff ffed 	bl	8014a0c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	4618      	mov	r0, r3
 8014a36:	3708      	adds	r7, #8
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}

08014a3c <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b082      	sub	sp, #8
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f7ff ffed 	bl	8014a24 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	3708      	adds	r7, #8
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bd80      	pop	{r7, pc}

08014a54 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8014a54:	b590      	push	{r4, r7, lr}
 8014a56:	b085      	sub	sp, #20
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	60f8      	str	r0, [r7, #12]
 8014a5c:	60b9      	str	r1, [r7, #8]
 8014a5e:	607a      	str	r2, [r7, #4]
 8014a60:	68f8      	ldr	r0, [r7, #12]
 8014a62:	f7ff ffeb 	bl	8014a3c <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	68ba      	ldr	r2, [r7, #8]
 8014a6a:	601a      	str	r2, [r3, #0]
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	687a      	ldr	r2, [r7, #4]
 8014a70:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8014a72:	68bb      	ldr	r3, [r7, #8]
 8014a74:	4618      	mov	r0, r3
 8014a76:	f7f0 fb45 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014a7a:	4604      	mov	r4, r0
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f7f0 f989 	bl	8004d96 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8014a84:	4603      	mov	r3, r0
 8014a86:	429c      	cmp	r4, r3
 8014a88:	d005      	beq.n	8014a96 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 8014a8a:	4b06      	ldr	r3, [pc, #24]	; (8014aa4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 8014a8c:	4a06      	ldr	r2, [pc, #24]	; (8014aa8 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 8014a8e:	2160      	movs	r1, #96	; 0x60
 8014a90:	4806      	ldr	r0, [pc, #24]	; (8014aac <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 8014a92:	f009 f897 	bl	801dbc4 <__assert_func>
 8014a96:	bf00      	nop
    }
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	3714      	adds	r7, #20
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	bd90      	pop	{r4, r7, pc}
 8014aa2:	bf00      	nop
 8014aa4:	0801fcec 	.word	0x0801fcec
 8014aa8:	080293f4 	.word	0x080293f4
 8014aac:	0802003c 	.word	0x0802003c

08014ab0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b084      	sub	sp, #16
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	60f8      	str	r0, [r7, #12]
 8014ab8:	60b9      	str	r1, [r7, #8]
 8014aba:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8014abc:	68b9      	ldr	r1, [r7, #8]
 8014abe:	68f8      	ldr	r0, [r7, #12]
 8014ac0:	f000 f821 	bl	8014b06 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8014ac4:	687a      	ldr	r2, [r7, #4]
 8014ac6:	68b9      	ldr	r1, [r7, #8]
 8014ac8:	68f8      	ldr	r0, [r7, #12]
 8014aca:	f000 f84a 	bl	8014b62 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8014ace:	bf00      	nop
 8014ad0:	3710      	adds	r7, #16
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd80      	pop	{r7, pc}

08014ad6 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 8014ad6:	b480      	push	{r7}
 8014ad8:	b085      	sub	sp, #20
 8014ada:	af00      	add	r7, sp, #0
 8014adc:	60f8      	str	r0, [r7, #12]
 8014ade:	60b9      	str	r1, [r7, #8]
 8014ae0:	607a      	str	r2, [r7, #4]
 8014ae2:	603b      	str	r3, [r7, #0]
 8014ae4:	bf00      	nop
 8014ae6:	3714      	adds	r7, #20
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aee:	4770      	bx	lr

08014af0 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014af0:	b480      	push	{r7}
 8014af2:	b083      	sub	sp, #12
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
    }
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	4618      	mov	r0, r3
 8014afc:	370c      	adds	r7, #12
 8014afe:	46bd      	mov	sp, r7
 8014b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b04:	4770      	bx	lr

08014b06 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8014b06:	b480      	push	{r7}
 8014b08:	b083      	sub	sp, #12
 8014b0a:	af00      	add	r7, sp, #0
 8014b0c:	6078      	str	r0, [r7, #4]
 8014b0e:	6039      	str	r1, [r7, #0]
}
 8014b10:	bf00      	nop
 8014b12:	370c      	adds	r7, #12
 8014b14:	46bd      	mov	sp, r7
 8014b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b1a:	4770      	bx	lr

08014b1c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b082      	sub	sp, #8
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	6078      	str	r0, [r7, #4]
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	330c      	adds	r3, #12
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f7f2 fbbc 	bl	80072a6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	3308      	adds	r3, #8
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7fa f9ea 	bl	800ef0c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8014b38:	6878      	ldr	r0, [r7, #4]
 8014b3a:	f000 f859 	bl	8014bf0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	4618      	mov	r0, r3
 8014b42:	3708      	adds	r7, #8
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd80      	pop	{r7, pc}

08014b48 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b082      	sub	sp, #8
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	4618      	mov	r0, r3
 8014b54:	f7ff ffe2 	bl	8014b1c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	3708      	adds	r7, #8
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd80      	pop	{r7, pc}

08014b62 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8014b62:	b580      	push	{r7, lr}
 8014b64:	b090      	sub	sp, #64	; 0x40
 8014b66:	af02      	add	r7, sp, #8
 8014b68:	60f8      	str	r0, [r7, #12]
 8014b6a:	60b9      	str	r1, [r7, #8]
 8014b6c:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8014b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014b72:	68b9      	ldr	r1, [r7, #8]
 8014b74:	4618      	mov	r0, r3
 8014b76:	f000 f82c 	bl	8014bd2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8014b7a:	687a      	ldr	r2, [r7, #4]
 8014b7c:	68b9      	ldr	r1, [r7, #8]
 8014b7e:	68f8      	ldr	r0, [r7, #12]
 8014b80:	f000 f85e 	bl	8014c40 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8014b84:	f107 0320 	add.w	r3, r7, #32
 8014b88:	68f9      	ldr	r1, [r7, #12]
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	f7fc fed2 	bl	8011934 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8014b90:	68f8      	ldr	r0, [r7, #12]
 8014b92:	f000 f89f 	bl	8014cd4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>
 8014b96:	4603      	mov	r3, r0
 8014b98:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014b9c:	f107 0120 	add.w	r1, r7, #32
 8014ba0:	f107 0010 	add.w	r0, r7, #16
 8014ba4:	9300      	str	r3, [sp, #0]
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	f000 f89f 	bl	8014cea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8014bac:	f107 0310 	add.w	r3, r7, #16
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	f000 f8b4 	bl	8014d1e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 8014bb6:	f107 0320 	add.w	r3, r7, #32
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7fa f9a6 	bl	800ef0c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8014bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7ff ffbf 	bl	8014b48 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
}
 8014bca:	bf00      	nop
 8014bcc:	3738      	adds	r7, #56	; 0x38
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd80      	pop	{r7, pc}

08014bd2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014bd2:	b580      	push	{r7, lr}
 8014bd4:	b082      	sub	sp, #8
 8014bd6:	af00      	add	r7, sp, #0
 8014bd8:	6078      	str	r0, [r7, #4]
 8014bda:	6039      	str	r1, [r7, #0]
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	6839      	ldr	r1, [r7, #0]
 8014be0:	4618      	mov	r0, r3
 8014be2:	f000 f8a7 	bl	8014d34 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	4618      	mov	r0, r3
 8014bea:	3708      	adds	r7, #8
 8014bec:	46bd      	mov	sp, r7
 8014bee:	bd80      	pop	{r7, pc}

08014bf0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8014bf0:	b480      	push	{r7}
 8014bf2:	b083      	sub	sp, #12
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	370c      	adds	r7, #12
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c04:	4770      	bx	lr

08014c06 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8014c06:	b580      	push	{r7, lr}
 8014c08:	b082      	sub	sp, #8
 8014c0a:	af00      	add	r7, sp, #0
 8014c0c:	6078      	str	r0, [r7, #4]
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	4618      	mov	r0, r3
 8014c14:	f7f0 fa81 	bl	800511a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014c18:	4603      	mov	r3, r0
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	3708      	adds	r7, #8
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}

08014c22 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8014c22:	b580      	push	{r7, lr}
 8014c24:	b082      	sub	sp, #8
 8014c26:	af00      	add	r7, sp, #0
 8014c28:	6078      	str	r0, [r7, #4]
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	685b      	ldr	r3, [r3, #4]
 8014c2e:	4618      	mov	r0, r3
 8014c30:	f7f0 f8a6 	bl	8004d80 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8014c34:	4603      	mov	r3, r0
 8014c36:	4618      	mov	r0, r3
 8014c38:	3708      	adds	r7, #8
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bd80      	pop	{r7, pc}
	...

08014c40 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b086      	sub	sp, #24
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	60f8      	str	r0, [r7, #12]
 8014c48:	60b9      	str	r1, [r7, #8]
 8014c4a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8014c4c:	68b8      	ldr	r0, [r7, #8]
 8014c4e:	f7ff ffda 	bl	8014c06 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>
 8014c52:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8014c54:	68b8      	ldr	r0, [r7, #8]
 8014c56:	f7ff ffe4 	bl	8014c22 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>
 8014c5a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	4618      	mov	r0, r3
 8014c60:	f7f0 fa5b 	bl	800511a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014c64:	4602      	mov	r2, r0
 8014c66:	697b      	ldr	r3, [r7, #20]
 8014c68:	4293      	cmp	r3, r2
 8014c6a:	d107      	bne.n	8014c7c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f7f0 fa48 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014c74:	4602      	mov	r2, r0
 8014c76:	693b      	ldr	r3, [r7, #16]
 8014c78:	4293      	cmp	r3, r2
 8014c7a:	d001      	beq.n	8014c80 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8014c7c:	2301      	movs	r3, #1
 8014c7e:	e000      	b.n	8014c82 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8014c80:	2300      	movs	r3, #0
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d005      	beq.n	8014c92 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	693a      	ldr	r2, [r7, #16]
 8014c8a:	6979      	ldr	r1, [r7, #20]
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	f7ff fe8b 	bl	80149a8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	4618      	mov	r0, r3
 8014c96:	f7f0 fa40 	bl	800511a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014c9a:	4602      	mov	r2, r0
 8014c9c:	697b      	ldr	r3, [r7, #20]
 8014c9e:	4293      	cmp	r3, r2
 8014ca0:	d107      	bne.n	8014cb2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f7f0 fa2d 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014caa:	4602      	mov	r2, r0
 8014cac:	693b      	ldr	r3, [r7, #16]
 8014cae:	4293      	cmp	r3, r2
 8014cb0:	d006      	beq.n	8014cc0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8014cb2:	4b05      	ldr	r3, [pc, #20]	; (8014cc8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8014cb4:	4a05      	ldr	r2, [pc, #20]	; (8014ccc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8014cb6:	f240 21fd 	movw	r1, #765	; 0x2fd
 8014cba:	4805      	ldr	r0, [pc, #20]	; (8014cd0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8014cbc:	f008 ff82 	bl	801dbc4 <__assert_func>
}
 8014cc0:	bf00      	nop
 8014cc2:	3718      	adds	r7, #24
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}
 8014cc8:	080220a4 	.word	0x080220a4
 8014ccc:	0802951c 	.word	0x0802951c
 8014cd0:	080221b8 	.word	0x080221b8

08014cd4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8014cd4:	b480      	push	{r7}
 8014cd6:	b083      	sub	sp, #12
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	4618      	mov	r0, r3
 8014ce0:	370c      	adds	r7, #12
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce8:	4770      	bx	lr

08014cea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8014cea:	b480      	push	{r7}
 8014cec:	b085      	sub	sp, #20
 8014cee:	af00      	add	r7, sp, #0
 8014cf0:	60f8      	str	r0, [r7, #12]
 8014cf2:	60b9      	str	r1, [r7, #8]
 8014cf4:	607a      	str	r2, [r7, #4]
 8014cf6:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	68ba      	ldr	r2, [r7, #8]
 8014cfc:	601a      	str	r2, [r3, #0]
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	687a      	ldr	r2, [r7, #4]
 8014d02:	605a      	str	r2, [r3, #4]
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	683a      	ldr	r2, [r7, #0]
 8014d08:	609a      	str	r2, [r3, #8]
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	69ba      	ldr	r2, [r7, #24]
 8014d0e:	60da      	str	r2, [r3, #12]
  }
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	4618      	mov	r0, r3
 8014d14:	3714      	adds	r7, #20
 8014d16:	46bd      	mov	sp, r7
 8014d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1c:	4770      	bx	lr

08014d1e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8014d1e:	b580      	push	{r7, lr}
 8014d20:	b082      	sub	sp, #8
 8014d22:	af00      	add	r7, sp, #0
 8014d24:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8014d26:	6878      	ldr	r0, [r7, #4]
 8014d28:	f000 f839 	bl	8014d9e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 8014d2c:	bf00      	nop
 8014d2e:	3708      	adds	r7, #8
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}

08014d34 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b082      	sub	sp, #8
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
 8014d3c:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8014d3e:	6878      	ldr	r0, [r7, #4]
 8014d40:	f000 f854 	bl	8014dec <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8014d44:	6838      	ldr	r0, [r7, #0]
 8014d46:	f000 f839 	bl	8014dbc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 8014d4a:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8014d50:	6838      	ldr	r0, [r7, #0]
 8014d52:	f000 f83f 	bl	8014dd4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>
 8014d56:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	605a      	str	r2, [r3, #4]
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8014d66:	4619      	mov	r1, r3
 8014d68:	4610      	mov	r0, r2
 8014d6a:	f7fc fde3 	bl	8011934 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8014d78:	4619      	mov	r1, r3
 8014d7a:	4610      	mov	r0, r2
 8014d7c:	f7f2 fca2 	bl	80076c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8014d80:	6838      	ldr	r0, [r7, #0]
 8014d82:	f000 f81b 	bl	8014dbc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 8014d86:	4603      	mov	r3, r0
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f7f0 f9bb 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014d8e:	4602      	mov	r2, r0
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	611a      	str	r2, [r3, #16]
  }
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	4618      	mov	r0, r3
 8014d98:	3708      	adds	r7, #8
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bd80      	pop	{r7, pc}

08014d9e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8014d9e:	b580      	push	{r7, lr}
 8014da0:	b082      	sub	sp, #8
 8014da2:	af00      	add	r7, sp, #0
 8014da4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8014da6:	2100      	movs	r1, #0
 8014da8:	6878      	ldr	r0, [r7, #4]
 8014daa:	f000 f82a 	bl	8014e02 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014dae:	6878      	ldr	r0, [r7, #4]
 8014db0:	f000 f84a 	bl	8014e48 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 8014db4:	bf00      	nop
 8014db6:	3708      	adds	r7, #8
 8014db8:	46bd      	mov	sp, r7
 8014dba:	bd80      	pop	{r7, pc}

08014dbc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8014dbc:	b480      	push	{r7}
 8014dbe:	b083      	sub	sp, #12
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	6078      	str	r0, [r7, #4]
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	4618      	mov	r0, r3
 8014dca:	370c      	adds	r7, #12
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd2:	4770      	bx	lr

08014dd4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8014dd4:	b480      	push	{r7}
 8014dd6:	b083      	sub	sp, #12
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	685b      	ldr	r3, [r3, #4]
 8014de0:	4618      	mov	r0, r3
 8014de2:	370c      	adds	r7, #12
 8014de4:	46bd      	mov	sp, r7
 8014de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dea:	4770      	bx	lr

08014dec <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014dec:	b480      	push	{r7}
 8014dee:	b083      	sub	sp, #12
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	4618      	mov	r0, r3
 8014df8:	370c      	adds	r7, #12
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e00:	4770      	bx	lr

08014e02 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8014e02:	b5b0      	push	{r4, r5, r7, lr}
 8014e04:	b084      	sub	sp, #16
 8014e06:	af00      	add	r7, sp, #0
 8014e08:	6078      	str	r0, [r7, #4]
 8014e0a:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	689c      	ldr	r4, [r3, #8]
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	6839      	ldr	r1, [r7, #0]
 8014e16:	4618      	mov	r0, r3
 8014e18:	f000 f825 	bl	8014e66 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>
 8014e1c:	4605      	mov	r5, r0
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	685b      	ldr	r3, [r3, #4]
 8014e22:	6839      	ldr	r1, [r7, #0]
 8014e24:	4618      	mov	r0, r3
 8014e26:	f000 f82e 	bl	8014e86 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 8014e2a:	eef0 7a40 	vmov.f32	s15, s0
 8014e2e:	edc7 7a03 	vstr	s15, [r7, #12]
 8014e32:	f107 030c 	add.w	r3, r7, #12
 8014e36:	461a      	mov	r2, r3
 8014e38:	4629      	mov	r1, r5
 8014e3a:	4620      	mov	r0, r4
 8014e3c:	f7f3 fb4a 	bl	80084d4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8014e40:	bf00      	nop
 8014e42:	3710      	adds	r7, #16
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bdb0      	pop	{r4, r5, r7, pc}

08014e48 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8014e50:	2101      	movs	r1, #1
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f7ff ffd5 	bl	8014e02 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014e58:	6878      	ldr	r0, [r7, #4]
 8014e5a:	f000 f84d 	bl	8014ef8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 8014e5e:	bf00      	nop
 8014e60:	3708      	adds	r7, #8
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bd80      	pop	{r7, pc}

08014e66 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8014e66:	b480      	push	{r7}
 8014e68:	b083      	sub	sp, #12
 8014e6a:	af00      	add	r7, sp, #0
 8014e6c:	6078      	str	r0, [r7, #4]
 8014e6e:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	681a      	ldr	r2, [r3, #0]
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	009b      	lsls	r3, r3, #2
 8014e78:	4413      	add	r3, r2
  }
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	370c      	adds	r7, #12
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e84:	4770      	bx	lr

08014e86 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 8014e86:	b580      	push	{r7, lr}
 8014e88:	b0a4      	sub	sp, #144	; 0x90
 8014e8a:	af00      	add	r7, sp, #0
 8014e8c:	6078      	str	r0, [r7, #4]
 8014e8e:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 8014e90:	2300      	movs	r3, #0
 8014e92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 8014e96:	683b      	ldr	r3, [r7, #0]
 8014e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	6819      	ldr	r1, [r3, #0]
 8014ea0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014ea4:	2200      	movs	r2, #0
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	f000 f835 	bl	8014f16 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>
 8014eac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014eb0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014eb4:	4611      	mov	r1, r2
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f000 f840 	bl	8014f3c <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	6859      	ldr	r1, [r3, #4]
 8014ec0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8014ec4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014ec8:	4618      	mov	r0, r3
 8014eca:	f7f7 f94a 	bl	800c162 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 8014ece:	f107 030c 	add.w	r3, r7, #12
 8014ed2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8014ed6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8014eda:	4618      	mov	r0, r3
 8014edc:	f000 f83f 	bl	8014f5e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 8014ee0:	f107 030c 	add.w	r3, r7, #12
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f000 f868 	bl	8014fba <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>
 8014eea:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014eee:	eeb0 0a67 	vmov.f32	s0, s15
 8014ef2:	3790      	adds	r7, #144	; 0x90
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	bd80      	pop	{r7, pc}

08014ef8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b082      	sub	sp, #8
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8014f00:	2102      	movs	r1, #2
 8014f02:	6878      	ldr	r0, [r7, #4]
 8014f04:	f7ff ff7d 	bl	8014e02 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014f08:	6878      	ldr	r0, [r7, #4]
 8014f0a:	f000 f871 	bl	8014ff0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 8014f0e:	bf00      	nop
 8014f10:	3708      	adds	r7, #8
 8014f12:	46bd      	mov	sp, r7
 8014f14:	bd80      	pop	{r7, pc}

08014f16 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>:
ConstRowXpr row(Index i) const
 8014f16:	b580      	push	{r7, lr}
 8014f18:	b084      	sub	sp, #16
 8014f1a:	af00      	add	r7, sp, #0
 8014f1c:	60f8      	str	r0, [r7, #12]
 8014f1e:	60b9      	str	r1, [r7, #8]
 8014f20:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 8014f22:	68b8      	ldr	r0, [r7, #8]
 8014f24:	f7f0 fe12 	bl	8005b4c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8014f28:	4603      	mov	r3, r0
 8014f2a:	687a      	ldr	r2, [r7, #4]
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	68f8      	ldr	r0, [r7, #12]
 8014f30:	f000 f868 	bl	8015004 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>
}
 8014f34:	68f8      	ldr	r0, [r7, #12]
 8014f36:	3710      	adds	r7, #16
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd80      	pop	{r7, pc}

08014f3c <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b082      	sub	sp, #8
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 8014f46:	6838      	ldr	r0, [r7, #0]
 8014f48:	f000 f886 	bl	8015058 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>
 8014f4c:	4603      	mov	r3, r0
 8014f4e:	4619      	mov	r1, r3
 8014f50:	6878      	ldr	r0, [r7, #4]
 8014f52:	f000 f8a4 	bl	801509e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>
}
 8014f56:	6878      	ldr	r0, [r7, #4]
 8014f58:	3708      	adds	r7, #8
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bd80      	pop	{r7, pc}

08014f5e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8014f5e:	b5b0      	push	{r4, r5, r7, lr}
 8014f60:	b086      	sub	sp, #24
 8014f62:	af00      	add	r7, sp, #0
 8014f64:	60f8      	str	r0, [r7, #12]
 8014f66:	60b9      	str	r1, [r7, #8]
 8014f68:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8014f6a:	68b8      	ldr	r0, [r7, #8]
 8014f6c:	f000 f8ae 	bl	80150cc <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>
 8014f70:	4604      	mov	r4, r0
 8014f72:	6878      	ldr	r0, [r7, #4]
 8014f74:	f7f7 fec4 	bl	800cd00 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 8014f78:	4605      	mov	r5, r0
 8014f7a:	f107 0314 	add.w	r3, r7, #20
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f7f0 f9aa 	bl	80052d8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8014f84:	f107 0314 	add.w	r3, r7, #20
 8014f88:	462a      	mov	r2, r5
 8014f8a:	4621      	mov	r1, r4
 8014f8c:	68f8      	ldr	r0, [r7, #12]
 8014f8e:	f000 f8db 	bl	8015148 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 8014f92:	68f8      	ldr	r0, [r7, #12]
 8014f94:	3718      	adds	r7, #24
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bdb0      	pop	{r4, r5, r7, pc}

08014f9a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8014f9a:	b580      	push	{r7, lr}
 8014f9c:	b082      	sub	sp, #8
 8014f9e:	af00      	add	r7, sp, #0
 8014fa0:	6078      	str	r0, [r7, #4]
 8014fa2:	6878      	ldr	r0, [r7, #4]
 8014fa4:	f000 f92e 	bl	8015204 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	4618      	mov	r0, r3
 8014fac:	f000 f935 	bl	801521a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	3708      	adds	r7, #8
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bd80      	pop	{r7, pc}

08014fba <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8014fba:	b590      	push	{r4, r7, lr}
 8014fbc:	b085      	sub	sp, #20
 8014fbe:	af00      	add	r7, sp, #0
 8014fc0:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8014fc2:	6878      	ldr	r0, [r7, #4]
 8014fc4:	f000 f91e 	bl	8015204 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8014fc8:	4604      	mov	r4, r0
 8014fca:	f107 030c 	add.w	r3, r7, #12
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f7f0 fc79 	bl	80058c6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8014fd4:	f107 030c 	add.w	r3, r7, #12
 8014fd8:	4619      	mov	r1, r3
 8014fda:	4620      	mov	r0, r4
 8014fdc:	f000 f9c4 	bl	8015368 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8014fe0:	eef0 7a40 	vmov.f32	s15, s0
 8014fe4:	bf00      	nop
}
 8014fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8014fea:	3714      	adds	r7, #20
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd90      	pop	{r4, r7, pc}

08014ff0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8014ff0:	b480      	push	{r7}
 8014ff2:	b083      	sub	sp, #12
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
 8014ff8:	bf00      	nop
 8014ffa:	370c      	adds	r7, #12
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015002:	4770      	bx	lr

08015004 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8015004:	b580      	push	{r7, lr}
 8015006:	b084      	sub	sp, #16
 8015008:	af00      	add	r7, sp, #0
 801500a:	60f8      	str	r0, [r7, #12]
 801500c:	60b9      	str	r1, [r7, #8]
 801500e:	607a      	str	r2, [r7, #4]
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	687a      	ldr	r2, [r7, #4]
 8015014:	68b9      	ldr	r1, [r7, #8]
 8015016:	4618      	mov	r0, r3
 8015018:	f000 f9ec 	bl	80153f4 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	2b00      	cmp	r3, #0
 8015020:	db07      	blt.n	8015032 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x2e>
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	4618      	mov	r0, r3
 8015026:	f7f0 f878 	bl	800511a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 801502a:	4602      	mov	r2, r0
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	4293      	cmp	r3, r2
 8015030:	db05      	blt.n	801503e <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x3a>
 8015032:	4b06      	ldr	r3, [pc, #24]	; (801504c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x48>)
 8015034:	4a06      	ldr	r2, [pc, #24]	; (8015050 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x4c>)
 8015036:	2178      	movs	r1, #120	; 0x78
 8015038:	4806      	ldr	r0, [pc, #24]	; (8015054 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x50>)
 801503a:	f008 fdc3 	bl	801dbc4 <__assert_func>
 801503e:	bf00      	nop
    }
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	4618      	mov	r0, r3
 8015044:	3710      	adds	r7, #16
 8015046:	46bd      	mov	sp, r7
 8015048:	bd80      	pop	{r7, pc}
 801504a:	bf00      	nop
 801504c:	080245b0 	.word	0x080245b0
 8015050:	08029630 	.word	0x08029630
 8015054:	08024734 	.word	0x08024734

08015058 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8015058:	b480      	push	{r7}
 801505a:	b083      	sub	sp, #12
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	4618      	mov	r0, r3
 8015064:	370c      	adds	r7, #12
 8015066:	46bd      	mov	sp, r7
 8015068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506c:	4770      	bx	lr

0801506e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
 801506e:	b580      	push	{r7, lr}
 8015070:	b082      	sub	sp, #8
 8015072:	af00      	add	r7, sp, #0
 8015074:	6078      	str	r0, [r7, #4]
 8015076:	6878      	ldr	r0, [r7, #4]
 8015078:	f000 f9cd 	bl	8015416 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	4618      	mov	r0, r3
 8015080:	3708      	adds	r7, #8
 8015082:	46bd      	mov	sp, r7
 8015084:	bd80      	pop	{r7, pc}

08015086 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8015086:	b580      	push	{r7, lr}
 8015088:	b082      	sub	sp, #8
 801508a:	af00      	add	r7, sp, #0
 801508c:	6078      	str	r0, [r7, #4]
 801508e:	6878      	ldr	r0, [r7, #4]
 8015090:	f7ff ffed 	bl	801506e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	4618      	mov	r0, r3
 8015098:	3708      	adds	r7, #8
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}

0801509e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 801509e:	b5b0      	push	{r4, r5, r7, lr}
 80150a0:	b082      	sub	sp, #8
 80150a2:	af00      	add	r7, sp, #0
 80150a4:	6078      	str	r0, [r7, #4]
 80150a6:	6039      	str	r1, [r7, #0]
 80150a8:	6878      	ldr	r0, [r7, #4]
 80150aa:	f7ff ffec 	bl	8015086 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>
 80150ae:	687a      	ldr	r2, [r7, #4]
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	4614      	mov	r4, r2
 80150b4:	461d      	mov	r5, r3
 80150b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80150b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80150ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80150be:	e884 0003 	stmia.w	r4, {r0, r1}
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	4618      	mov	r0, r3
 80150c6:	3708      	adds	r7, #8
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bdb0      	pop	{r4, r5, r7, pc}

080150cc <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>:
 80150cc:	b480      	push	{r7}
 80150ce:	b083      	sub	sp, #12
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	4618      	mov	r0, r3
 80150d8:	370c      	adds	r7, #12
 80150da:	46bd      	mov	sp, r7
 80150dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e0:	4770      	bx	lr

080150e2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
 80150e2:	b580      	push	{r7, lr}
 80150e4:	b082      	sub	sp, #8
 80150e6:	af00      	add	r7, sp, #0
 80150e8:	6078      	str	r0, [r7, #4]
 80150ea:	6878      	ldr	r0, [r7, #4]
 80150ec:	f000 f99e 	bl	801542c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	4618      	mov	r0, r3
 80150f4:	3708      	adds	r7, #8
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}

080150fa <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80150fa:	b580      	push	{r7, lr}
 80150fc:	b082      	sub	sp, #8
 80150fe:	af00      	add	r7, sp, #0
 8015100:	6078      	str	r0, [r7, #4]
 8015102:	6878      	ldr	r0, [r7, #4]
 8015104:	f7ff ffed 	bl	80150e2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	4618      	mov	r0, r3
 801510c:	3708      	adds	r7, #8
 801510e:	46bd      	mov	sp, r7
 8015110:	bd80      	pop	{r7, pc}

08015112 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8015112:	b580      	push	{r7, lr}
 8015114:	b082      	sub	sp, #8
 8015116:	af00      	add	r7, sp, #0
 8015118:	6078      	str	r0, [r7, #4]
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	4618      	mov	r0, r3
 801511e:	f000 f990 	bl	8015442 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>
 8015122:	4603      	mov	r3, r0
 8015124:	4618      	mov	r0, r3
 8015126:	3708      	adds	r7, #8
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}

0801512c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 801512c:	b580      	push	{r7, lr}
 801512e:	b082      	sub	sp, #8
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	4618      	mov	r0, r3
 8015138:	f000 f98e 	bl	8015458 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>
 801513c:	4603      	mov	r3, r0
 801513e:	4618      	mov	r0, r3
 8015140:	3708      	adds	r7, #8
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}
	...

08015148 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8015148:	b5b0      	push	{r4, r5, r7, lr}
 801514a:	b084      	sub	sp, #16
 801514c:	af00      	add	r7, sp, #0
 801514e:	60f8      	str	r0, [r7, #12]
 8015150:	60b9      	str	r1, [r7, #8]
 8015152:	607a      	str	r2, [r7, #4]
 8015154:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8015156:	68f8      	ldr	r0, [r7, #12]
 8015158:	f7ff ffcf 	bl	80150fa <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 801515c:	68fa      	ldr	r2, [r7, #12]
 801515e:	68bb      	ldr	r3, [r7, #8]
 8015160:	4614      	mov	r4, r2
 8015162:	461d      	mov	r5, r3
 8015164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015168:	e895 0003 	ldmia.w	r5, {r0, r1}
 801516c:	e884 0003 	stmia.w	r4, {r0, r1}
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	f103 0218 	add.w	r2, r3, #24
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	4614      	mov	r4, r2
 801517a:	461d      	mov	r5, r3
 801517c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801517e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015180:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015184:	e884 0003 	stmia.w	r4, {r0, r1}
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	3330      	adds	r3, #48	; 0x30
 801518c:	6839      	ldr	r1, [r7, #0]
 801518e:	4618      	mov	r0, r3
 8015190:	f7f0 f92c 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8015194:	68b8      	ldr	r0, [r7, #8]
 8015196:	f7ff ffbc 	bl	8015112 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 801519a:	4604      	mov	r4, r0
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	4618      	mov	r0, r3
 80151a0:	f7f7 fdd1 	bl	800cd46 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 80151a4:	4603      	mov	r3, r0
 80151a6:	429c      	cmp	r4, r3
 80151a8:	d10a      	bne.n	80151c0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 80151aa:	68b8      	ldr	r0, [r7, #8]
 80151ac:	f7ff ffbe 	bl	801512c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 80151b0:	4604      	mov	r4, r0
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	4618      	mov	r0, r3
 80151b6:	f7f7 fdd1 	bl	800cd5c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 80151ba:	4603      	mov	r3, r0
 80151bc:	429c      	cmp	r4, r3
 80151be:	d005      	beq.n	80151cc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 80151c0:	4b05      	ldr	r3, [pc, #20]	; (80151d8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 80151c2:	4a06      	ldr	r2, [pc, #24]	; (80151dc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 80151c4:	2174      	movs	r1, #116	; 0x74
 80151c6:	4806      	ldr	r0, [pc, #24]	; (80151e0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 80151c8:	f008 fcfc 	bl	801dbc4 <__assert_func>
    }
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	4618      	mov	r0, r3
 80151d0:	3710      	adds	r7, #16
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bdb0      	pop	{r4, r5, r7, pc}
 80151d6:	bf00      	nop
 80151d8:	0801fa2c 	.word	0x0801fa2c
 80151dc:	0802970c 	.word	0x0802970c
 80151e0:	0801fc90 	.word	0x0801fc90

080151e4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b082      	sub	sp, #8
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	6878      	ldr	r0, [r7, #4]
 80151ee:	f000 f809 	bl	8015204 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 80151f2:	4603      	mov	r3, r0
 80151f4:	4618      	mov	r0, r3
 80151f6:	f000 f93a 	bl	801546e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>
 80151fa:	4603      	mov	r3, r0
 80151fc:	4618      	mov	r0, r3
 80151fe:	3708      	adds	r7, #8
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}

08015204 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8015204:	b480      	push	{r7}
 8015206:	b083      	sub	sp, #12
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	4618      	mov	r0, r3
 8015210:	370c      	adds	r7, #12
 8015212:	46bd      	mov	sp, r7
 8015214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015218:	4770      	bx	lr

0801521a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 801521a:	b580      	push	{r7, lr}
 801521c:	b082      	sub	sp, #8
 801521e:	af00      	add	r7, sp, #0
 8015220:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	4618      	mov	r0, r3
 8015226:	f7ff ff74 	bl	8015112 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 801522a:	4603      	mov	r3, r0
    }
 801522c:	4618      	mov	r0, r3
 801522e:	3708      	adds	r7, #8
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}

08015234 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 8015234:	b580      	push	{r7, lr}
 8015236:	b082      	sub	sp, #8
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
 801523c:	6878      	ldr	r0, [r7, #4]
 801523e:	f000 f948 	bl	80154d2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	4618      	mov	r0, r3
 8015246:	3708      	adds	r7, #8
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}

0801524c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 801524c:	b580      	push	{r7, lr}
 801524e:	b082      	sub	sp, #8
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	4618      	mov	r0, r3
 8015258:	f7ff ffec 	bl	8015234 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	4618      	mov	r0, r3
 8015260:	3708      	adds	r7, #8
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}

08015266 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8015266:	b580      	push	{r7, lr}
 8015268:	b082      	sub	sp, #8
 801526a:	af00      	add	r7, sp, #0
 801526c:	6078      	str	r0, [r7, #4]
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	4618      	mov	r0, r3
 8015272:	f7ff ffeb 	bl	801524c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	4618      	mov	r0, r3
 801527a:	3708      	adds	r7, #8
 801527c:	46bd      	mov	sp, r7
 801527e:	bd80      	pop	{r7, pc}

08015280 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<const T>
 8015280:	b580      	push	{r7, lr}
 8015282:	b082      	sub	sp, #8
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	4618      	mov	r0, r3
 801528c:	f7ff ffeb 	bl	8015266 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	4618      	mov	r0, r3
 8015294:	3708      	adds	r7, #8
 8015296:	46bd      	mov	sp, r7
 8015298:	bd80      	pop	{r7, pc}

0801529a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 801529a:	b580      	push	{r7, lr}
 801529c:	b082      	sub	sp, #8
 801529e:	af00      	add	r7, sp, #0
 80152a0:	6078      	str	r0, [r7, #4]
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	4618      	mov	r0, r3
 80152a6:	f7ff ffeb 	bl	8015280 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 80152aa:	6878      	ldr	r0, [r7, #4]
 80152ac:	f000 f906 	bl	80154bc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	4618      	mov	r0, r3
 80152b4:	3708      	adds	r7, #8
 80152b6:	46bd      	mov	sp, r7
 80152b8:	bd80      	pop	{r7, pc}

080152ba <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 80152ba:	b580      	push	{r7, lr}
 80152bc:	b082      	sub	sp, #8
 80152be:	af00      	add	r7, sp, #0
 80152c0:	6078      	str	r0, [r7, #4]
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	4618      	mov	r0, r3
 80152c6:	f7ff ffe8 	bl	801529a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	4618      	mov	r0, r3
 80152ce:	3708      	adds	r7, #8
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}

080152d4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator<const T>
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b082      	sub	sp, #8
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	4618      	mov	r0, r3
 80152e0:	f7ff ffeb 	bl	80152ba <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	4618      	mov	r0, r3
 80152e8:	3708      	adds	r7, #8
 80152ea:	46bd      	mov	sp, r7
 80152ec:	bd80      	pop	{r7, pc}

080152ee <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 80152ee:	b580      	push	{r7, lr}
 80152f0:	b082      	sub	sp, #8
 80152f2:	af00      	add	r7, sp, #0
 80152f4:	6078      	str	r0, [r7, #4]
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	330c      	adds	r3, #12
 80152fa:	4618      	mov	r0, r3
 80152fc:	f7f7 fdd6 	bl	800ceac <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	3304      	adds	r3, #4
 8015304:	4618      	mov	r0, r3
 8015306:	f7ff ffe5 	bl	80152d4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	4618      	mov	r0, r3
 801530e:	3708      	adds	r7, #8
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}

08015314 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8015314:	b580      	push	{r7, lr}
 8015316:	b082      	sub	sp, #8
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	4618      	mov	r0, r3
 8015320:	f7ff ffe5 	bl	80152ee <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 8015324:	6878      	ldr	r0, [r7, #4]
 8015326:	f000 f8be 	bl	80154a6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	4618      	mov	r0, r3
 801532e:	3708      	adds	r7, #8
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}

08015334 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8015334:	b580      	push	{r7, lr}
 8015336:	b082      	sub	sp, #8
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	4618      	mov	r0, r3
 8015340:	f7ff ffe8 	bl	8015314 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	4618      	mov	r0, r3
 8015348:	3708      	adds	r7, #8
 801534a:	46bd      	mov	sp, r7
 801534c:	bd80      	pop	{r7, pc}

0801534e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 801534e:	b580      	push	{r7, lr}
 8015350:	b082      	sub	sp, #8
 8015352:	af00      	add	r7, sp, #0
 8015354:	6078      	str	r0, [r7, #4]
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	4618      	mov	r0, r3
 801535a:	f7ff ffeb 	bl	8015334 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	4618      	mov	r0, r3
 8015362:	3708      	adds	r7, #8
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}

08015368 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8015368:	b580      	push	{r7, lr}
 801536a:	ed2d 8b02 	vpush	{d8}
 801536e:	b088      	sub	sp, #32
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8015376:	6878      	ldr	r0, [r7, #4]
 8015378:	f7ff fe0f 	bl	8014f9a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>
 801537c:	4603      	mov	r3, r0
 801537e:	2b00      	cmp	r3, #0
 8015380:	dd05      	ble.n	801538e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8015382:	6878      	ldr	r0, [r7, #4]
 8015384:	f7ff ff2e 	bl	80151e4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>
 8015388:	4603      	mov	r3, r0
 801538a:	2b00      	cmp	r3, #0
 801538c:	dc06      	bgt.n	801539c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 801538e:	4b16      	ldr	r3, [pc, #88]	; (80153e8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8015390:	4a16      	ldr	r2, [pc, #88]	; (80153ec <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8015392:	f240 119b 	movw	r1, #411	; 0x19b
 8015396:	4816      	ldr	r0, [pc, #88]	; (80153f0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8015398:	f008 fc14 	bl	801dbc4 <__assert_func>
 801539c:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801539e:	6878      	ldr	r0, [r7, #4]
 80153a0:	f7ff ff30 	bl	8015204 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 80153a4:	4602      	mov	r2, r0
 80153a6:	f107 030c 	add.w	r3, r7, #12
 80153aa:	4611      	mov	r1, r2
 80153ac:	4618      	mov	r0, r3
 80153ae:	f000 f86b 	bl	8015488 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80153b2:	6878      	ldr	r0, [r7, #4]
 80153b4:	f7ff ff26 	bl	8015204 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 80153b8:	4602      	mov	r2, r0
 80153ba:	f107 030c 	add.w	r3, r7, #12
 80153be:	6839      	ldr	r1, [r7, #0]
 80153c0:	4618      	mov	r0, r3
 80153c2:	f000 f891 	bl	80154e8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 80153c6:	eeb0 8a40 	vmov.f32	s16, s0
 80153ca:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80153cc:	f107 030c 	add.w	r3, r7, #12
 80153d0:	4618      	mov	r0, r3
 80153d2:	f7ff ffbc 	bl	801534e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80153d6:	eef0 7a48 	vmov.f32	s15, s16
}
 80153da:	eeb0 0a67 	vmov.f32	s0, s15
 80153de:	3720      	adds	r7, #32
 80153e0:	46bd      	mov	sp, r7
 80153e2:	ecbd 8b02 	vpop	{d8}
 80153e6:	bd80      	pop	{r7, pc}
 80153e8:	08024aac 	.word	0x08024aac
 80153ec:	08029954 	.word	0x08029954
 80153f0:	08024cb8 	.word	0x08024cb8

080153f4 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b084      	sub	sp, #16
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	60f8      	str	r0, [r7, #12]
 80153fc:	60b9      	str	r1, [r7, #8]
 80153fe:	607a      	str	r2, [r7, #4]
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	687a      	ldr	r2, [r7, #4]
 8015404:	68b9      	ldr	r1, [r7, #8]
 8015406:	4618      	mov	r0, r3
 8015408:	f000 f87f 	bl	801550a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	4618      	mov	r0, r3
 8015410:	3710      	adds	r7, #16
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}

08015416 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8015416:	b480      	push	{r7}
 8015418:	b083      	sub	sp, #12
 801541a:	af00      	add	r7, sp, #0
 801541c:	6078      	str	r0, [r7, #4]
    }
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	4618      	mov	r0, r3
 8015422:	370c      	adds	r7, #12
 8015424:	46bd      	mov	sp, r7
 8015426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542a:	4770      	bx	lr

0801542c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801542c:	b480      	push	{r7}
 801542e:	b083      	sub	sp, #12
 8015430:	af00      	add	r7, sp, #0
 8015432:	6078      	str	r0, [r7, #4]
    }
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	4618      	mov	r0, r3
 8015438:	370c      	adds	r7, #12
 801543a:	46bd      	mov	sp, r7
 801543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015440:	4770      	bx	lr

08015442 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8015442:	b580      	push	{r7, lr}
 8015444:	b082      	sub	sp, #8
 8015446:	af00      	add	r7, sp, #0
 8015448:	6078      	str	r0, [r7, #4]
 801544a:	f7f1 fa6e 	bl	800692a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 801544e:	4603      	mov	r3, r0
 8015450:	4618      	mov	r0, r3
 8015452:	3708      	adds	r7, #8
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}

08015458 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8015458:	b580      	push	{r7, lr}
 801545a:	b082      	sub	sp, #8
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
 8015460:	f7f1 fa6b 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8015464:	4603      	mov	r3, r0
 8015466:	4618      	mov	r0, r3
 8015468:	3708      	adds	r7, #8
 801546a:	46bd      	mov	sp, r7
 801546c:	bd80      	pop	{r7, pc}

0801546e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 801546e:	b580      	push	{r7, lr}
 8015470:	b082      	sub	sp, #8
 8015472:	af00      	add	r7, sp, #0
 8015474:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	4618      	mov	r0, r3
 801547a:	f7ff fe57 	bl	801512c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 801547e:	4603      	mov	r3, r0
    }
 8015480:	4618      	mov	r0, r3
 8015482:	3708      	adds	r7, #8
 8015484:	46bd      	mov	sp, r7
 8015486:	bd80      	pop	{r7, pc}

08015488 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8015488:	b580      	push	{r7, lr}
 801548a:	b082      	sub	sp, #8
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
 8015490:	6039      	str	r1, [r7, #0]
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	6839      	ldr	r1, [r7, #0]
 8015496:	4618      	mov	r0, r3
 8015498:	f000 f86d 	bl	8015576 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	4618      	mov	r0, r3
 80154a0:	3708      	adds	r7, #8
 80154a2:	46bd      	mov	sp, r7
 80154a4:	bd80      	pop	{r7, pc}

080154a6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80154a6:	b480      	push	{r7}
 80154a8:	b083      	sub	sp, #12
 80154aa:	af00      	add	r7, sp, #0
 80154ac:	6078      	str	r0, [r7, #4]
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	4618      	mov	r0, r3
 80154b2:	370c      	adds	r7, #12
 80154b4:	46bd      	mov	sp, r7
 80154b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ba:	4770      	bx	lr

080154bc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
 80154bc:	b480      	push	{r7}
 80154be:	b083      	sub	sp, #12
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	4618      	mov	r0, r3
 80154c8:	370c      	adds	r7, #12
 80154ca:	46bd      	mov	sp, r7
 80154cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d0:	4770      	bx	lr

080154d2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
 80154d2:	b480      	push	{r7}
 80154d4:	b083      	sub	sp, #12
 80154d6:	af00      	add	r7, sp, #0
 80154d8:	6078      	str	r0, [r7, #4]
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	4618      	mov	r0, r3
 80154de:	370c      	adds	r7, #12
 80154e0:	46bd      	mov	sp, r7
 80154e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e6:	4770      	bx	lr

080154e8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b084      	sub	sp, #16
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	60f8      	str	r0, [r7, #12]
 80154f0:	60b9      	str	r1, [r7, #8]
 80154f2:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80154f4:	68b9      	ldr	r1, [r7, #8]
 80154f6:	68f8      	ldr	r0, [r7, #12]
 80154f8:	f000 f84c 	bl	8015594 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 80154fc:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015500:	eeb0 0a67 	vmov.f32	s0, s15
 8015504:	3710      	adds	r7, #16
 8015506:	46bd      	mov	sp, r7
 8015508:	bd80      	pop	{r7, pc}

0801550a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 801550a:	b5b0      	push	{r4, r5, r7, lr}
 801550c:	b084      	sub	sp, #16
 801550e:	af00      	add	r7, sp, #0
 8015510:	60f8      	str	r0, [r7, #12]
 8015512:	60b9      	str	r1, [r7, #8]
 8015514:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8015516:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8015518:	68bb      	ldr	r3, [r7, #8]
 801551a:	4618      	mov	r0, r3
 801551c:	f7fd f866 	bl	80125ec <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8015520:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8015522:	68b8      	ldr	r0, [r7, #8]
 8015524:	f7fd fa90 	bl	8012a48 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8015528:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	fb02 f303 	mul.w	r3, r2, r3
 8015530:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8015532:	441d      	add	r5, r3
 8015534:	68bb      	ldr	r3, [r7, #8]
 8015536:	4618      	mov	r0, r3
 8015538:	f7ef fde4 	bl	8005104 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801553c:	4603      	mov	r3, r0
 801553e:	2201      	movs	r2, #1
 8015540:	4629      	mov	r1, r5
 8015542:	4620      	mov	r0, r4
 8015544:	f000 f856 	bl	80155f4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	68ba      	ldr	r2, [r7, #8]
 801554c:	609a      	str	r2, [r3, #8]
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	330c      	adds	r3, #12
 8015552:	6879      	ldr	r1, [r7, #4]
 8015554:	4618      	mov	r0, r3
 8015556:	f7f8 faab 	bl	800dab0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	3310      	adds	r3, #16
 801555e:	2100      	movs	r1, #0
 8015560:	4618      	mov	r0, r3
 8015562:	f7f8 fa31 	bl	800d9c8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8015566:	68f8      	ldr	r0, [r7, #12]
 8015568:	f000 f882 	bl	8015670 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>
    }
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	4618      	mov	r0, r3
 8015570:	3710      	adds	r7, #16
 8015572:	46bd      	mov	sp, r7
 8015574:	bdb0      	pop	{r4, r5, r7, pc}

08015576 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8015576:	b580      	push	{r7, lr}
 8015578:	b082      	sub	sp, #8
 801557a:	af00      	add	r7, sp, #0
 801557c:	6078      	str	r0, [r7, #4]
 801557e:	6039      	str	r1, [r7, #0]
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	6839      	ldr	r1, [r7, #0]
 8015584:	4618      	mov	r0, r3
 8015586:	f000 f883 	bl	8015690 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	4618      	mov	r0, r3
 801558e:	3708      	adds	r7, #8
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}

08015594 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8015594:	b580      	push	{r7, lr}
 8015596:	b084      	sub	sp, #16
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
 801559c:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801559e:	6839      	ldr	r1, [r7, #0]
 80155a0:	6878      	ldr	r0, [r7, #4]
 80155a2:	f000 f887 	bl	80156b4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 80155a6:	eef0 7a40 	vmov.f32	s15, s0
 80155aa:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80155ae:	6839      	ldr	r1, [r7, #0]
 80155b0:	6878      	ldr	r0, [r7, #4]
 80155b2:	f000 f890 	bl	80156d6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 80155b6:	eef0 7a40 	vmov.f32	s15, s0
 80155ba:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80155be:	f107 020c 	add.w	r2, r7, #12
 80155c2:	f107 0308 	add.w	r3, r7, #8
 80155c6:	4619      	mov	r1, r3
 80155c8:	6838      	ldr	r0, [r7, #0]
 80155ca:	f7f3 fd74 	bl	80090b6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80155ce:	eef0 7a40 	vmov.f32	s15, s0
  }
 80155d2:	eeb0 0a67 	vmov.f32	s0, s15
 80155d6:	3710      	adds	r7, #16
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}

080155dc <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
 80155dc:	b580      	push	{r7, lr}
 80155de:	b082      	sub	sp, #8
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
 80155e4:	6878      	ldr	r0, [r7, #4]
 80155e6:	f000 f89a 	bl	801571e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	4618      	mov	r0, r3
 80155ee:	3708      	adds	r7, #8
 80155f0:	46bd      	mov	sp, r7
 80155f2:	bd80      	pop	{r7, pc}

080155f4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b084      	sub	sp, #16
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	60f8      	str	r0, [r7, #12]
 80155fc:	60b9      	str	r1, [r7, #8]
 80155fe:	607a      	str	r2, [r7, #4]
 8015600:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8015602:	68f8      	ldr	r0, [r7, #12]
 8015604:	f7ff ffea 	bl	80155dc <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	68ba      	ldr	r2, [r7, #8]
 801560c:	601a      	str	r2, [r3, #0]
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	3304      	adds	r3, #4
 8015612:	6879      	ldr	r1, [r7, #4]
 8015614:	4618      	mov	r0, r3
 8015616:	f7f1 f963 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	3305      	adds	r3, #5
 801561e:	6839      	ldr	r1, [r7, #0]
 8015620:	4618      	mov	r0, r3
 8015622:	f7f1 f943 	bl	80068ac <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d011      	beq.n	8015650 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	2b00      	cmp	r3, #0
 8015630:	db08      	blt.n	8015644 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	2b01      	cmp	r3, #1
 8015636:	d105      	bne.n	8015644 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8015638:	683b      	ldr	r3, [r7, #0]
 801563a:	2b00      	cmp	r3, #0
 801563c:	db02      	blt.n	8015644 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	2b03      	cmp	r3, #3
 8015642:	d005      	beq.n	8015650 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 8015644:	4b07      	ldr	r3, [pc, #28]	; (8015664 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x70>)
 8015646:	4a08      	ldr	r2, [pc, #32]	; (8015668 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x74>)
 8015648:	21b0      	movs	r1, #176	; 0xb0
 801564a:	4808      	ldr	r0, [pc, #32]	; (801566c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x78>)
 801564c:	f008 faba 	bl	801dbc4 <__assert_func>
      checkSanity<Derived>();
 8015650:	2100      	movs	r1, #0
 8015652:	68f8      	ldr	r0, [r7, #12]
 8015654:	f000 f86e 	bl	8015734 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	4618      	mov	r0, r3
 801565c:	3710      	adds	r7, #16
 801565e:	46bd      	mov	sp, r7
 8015660:	bd80      	pop	{r7, pc}
 8015662:	bf00      	nop
 8015664:	08026150 	.word	0x08026150
 8015668:	08029b18 	.word	0x08029b18
 801566c:	08026300 	.word	0x08026300

08015670 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>:
    void init()
 8015670:	b580      	push	{r7, lr}
 8015672:	b082      	sub	sp, #8
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	689b      	ldr	r3, [r3, #8]
 801567c:	4618      	mov	r0, r3
 801567e:	f7fd f9e3 	bl	8012a48 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8015682:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	615a      	str	r2, [r3, #20]
    }
 8015688:	bf00      	nop
 801568a:	3708      	adds	r7, #8
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}

08015690 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8015690:	b580      	push	{r7, lr}
 8015692:	b082      	sub	sp, #8
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
 8015698:	6039      	str	r1, [r7, #0]
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	f000 f855 	bl	801574a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	6839      	ldr	r1, [r7, #0]
 80156a4:	4618      	mov	r0, r3
 80156a6:	f000 f85b 	bl	8015760 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	4618      	mov	r0, r3
 80156ae:	3708      	adds	r7, #8
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}

080156b4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b082      	sub	sp, #8
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
 80156bc:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80156be:	2200      	movs	r2, #0
 80156c0:	2100      	movs	r1, #0
 80156c2:	6878      	ldr	r0, [r7, #4]
 80156c4:	f000 f874 	bl	80157b0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80156c8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80156cc:	eeb0 0a67 	vmov.f32	s0, s15
 80156d0:	3708      	adds	r7, #8
 80156d2:	46bd      	mov	sp, r7
 80156d4:	bd80      	pop	{r7, pc}

080156d6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80156d6:	b580      	push	{r7, lr}
 80156d8:	b084      	sub	sp, #16
 80156da:	af00      	add	r7, sp, #0
 80156dc:	6078      	str	r0, [r7, #4]
 80156de:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80156e0:	6839      	ldr	r1, [r7, #0]
 80156e2:	6878      	ldr	r0, [r7, #4]
 80156e4:	f000 f877 	bl	80157d6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 80156e8:	eef0 7a40 	vmov.f32	s15, s0
 80156ec:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80156f0:	6839      	ldr	r1, [r7, #0]
 80156f2:	6878      	ldr	r0, [r7, #4]
 80156f4:	f000 f880 	bl	80157f8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 80156f8:	eef0 7a40 	vmov.f32	s15, s0
 80156fc:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015700:	f107 020c 	add.w	r2, r7, #12
 8015704:	f107 0308 	add.w	r3, r7, #8
 8015708:	4619      	mov	r1, r3
 801570a:	6838      	ldr	r0, [r7, #0]
 801570c:	f7f3 fcd3 	bl	80090b6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8015710:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015714:	eeb0 0a67 	vmov.f32	s0, s15
 8015718:	3710      	adds	r7, #16
 801571a:	46bd      	mov	sp, r7
 801571c:	bd80      	pop	{r7, pc}

0801571e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801571e:	b480      	push	{r7}
 8015720:	b083      	sub	sp, #12
 8015722:	af00      	add	r7, sp, #0
 8015724:	6078      	str	r0, [r7, #4]
    }
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	4618      	mov	r0, r3
 801572a:	370c      	adds	r7, #12
 801572c:	46bd      	mov	sp, r7
 801572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015732:	4770      	bx	lr

08015734 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8015734:	b480      	push	{r7}
 8015736:	b083      	sub	sp, #12
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
 801573c:	6039      	str	r1, [r7, #0]
    {}
 801573e:	bf00      	nop
 8015740:	370c      	adds	r7, #12
 8015742:	46bd      	mov	sp, r7
 8015744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015748:	4770      	bx	lr

0801574a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801574a:	b480      	push	{r7}
 801574c:	b083      	sub	sp, #12
 801574e:	af00      	add	r7, sp, #0
 8015750:	6078      	str	r0, [r7, #4]
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	4618      	mov	r0, r3
 8015756:	370c      	adds	r7, #12
 8015758:	46bd      	mov	sp, r7
 801575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575e:	4770      	bx	lr

08015760 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8015760:	b590      	push	{r4, r7, lr}
 8015762:	b083      	sub	sp, #12
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
 8015768:	6039      	str	r1, [r7, #0]
 801576a:	687c      	ldr	r4, [r7, #4]
 801576c:	6838      	ldr	r0, [r7, #0]
 801576e:	f000 f854 	bl	801581a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>
 8015772:	4603      	mov	r3, r0
 8015774:	4619      	mov	r1, r3
 8015776:	4620      	mov	r0, r4
 8015778:	f7ef fe38 	bl	80053ec <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	1d1c      	adds	r4, r3, #4
 8015780:	6838      	ldr	r0, [r7, #0]
 8015782:	f000 f856 	bl	8015832 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>
 8015786:	4603      	mov	r3, r0
 8015788:	4619      	mov	r1, r3
 801578a:	4620      	mov	r0, r4
 801578c:	f000 f868 	bl	8015860 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	f103 040c 	add.w	r4, r3, #12
 8015796:	6838      	ldr	r0, [r7, #0]
 8015798:	f000 f856 	bl	8015848 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>
 801579c:	4603      	mov	r3, r0
 801579e:	4619      	mov	r1, r3
 80157a0:	4620      	mov	r0, r4
 80157a2:	f7fa f995 	bl	800fad0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	4618      	mov	r0, r3
 80157aa:	370c      	adds	r7, #12
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd90      	pop	{r4, r7, pc}

080157b0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b084      	sub	sp, #16
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	60f8      	str	r0, [r7, #12]
 80157b8:	60b9      	str	r1, [r7, #8]
 80157ba:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	68ba      	ldr	r2, [r7, #8]
 80157c0:	6879      	ldr	r1, [r7, #4]
 80157c2:	4618      	mov	r0, r3
 80157c4:	f000 f85b 	bl	801587e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 80157c8:	eef0 7a40 	vmov.f32	s15, s0
 80157cc:	eeb0 0a67 	vmov.f32	s0, s15
 80157d0:	3710      	adds	r7, #16
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}

080157d6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80157d6:	b580      	push	{r7, lr}
 80157d8:	b082      	sub	sp, #8
 80157da:	af00      	add	r7, sp, #0
 80157dc:	6078      	str	r0, [r7, #4]
 80157de:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80157e0:	2201      	movs	r2, #1
 80157e2:	2100      	movs	r1, #0
 80157e4:	6878      	ldr	r0, [r7, #4]
 80157e6:	f7ff ffe3 	bl	80157b0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80157ea:	eef0 7a40 	vmov.f32	s15, s0
  }
 80157ee:	eeb0 0a67 	vmov.f32	s0, s15
 80157f2:	3708      	adds	r7, #8
 80157f4:	46bd      	mov	sp, r7
 80157f6:	bd80      	pop	{r7, pc}

080157f8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b082      	sub	sp, #8
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
 8015800:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8015802:	2202      	movs	r2, #2
 8015804:	2100      	movs	r1, #0
 8015806:	6878      	ldr	r0, [r7, #4]
 8015808:	f7ff ffd2 	bl	80157b0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 801580c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015810:	eeb0 0a67 	vmov.f32	s0, s15
 8015814:	3708      	adds	r7, #8
 8015816:	46bd      	mov	sp, r7
 8015818:	bd80      	pop	{r7, pc}

0801581a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 801581a:	b480      	push	{r7}
 801581c:	b083      	sub	sp, #12
 801581e:	af00      	add	r7, sp, #0
 8015820:	6078      	str	r0, [r7, #4]
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	3330      	adds	r3, #48	; 0x30
 8015826:	4618      	mov	r0, r3
 8015828:	370c      	adds	r7, #12
 801582a:	46bd      	mov	sp, r7
 801582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015830:	4770      	bx	lr

08015832 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8015832:	b480      	push	{r7}
 8015834:	b083      	sub	sp, #12
 8015836:	af00      	add	r7, sp, #0
 8015838:	6078      	str	r0, [r7, #4]
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	4618      	mov	r0, r3
 801583e:	370c      	adds	r7, #12
 8015840:	46bd      	mov	sp, r7
 8015842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015846:	4770      	bx	lr

08015848 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8015848:	b480      	push	{r7}
 801584a:	b083      	sub	sp, #12
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	3318      	adds	r3, #24
 8015854:	4618      	mov	r0, r3
 8015856:	370c      	adds	r7, #12
 8015858:	46bd      	mov	sp, r7
 801585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585e:	4770      	bx	lr

08015860 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8015860:	b580      	push	{r7, lr}
 8015862:	b082      	sub	sp, #8
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
 8015868:	6039      	str	r1, [r7, #0]
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	6839      	ldr	r1, [r7, #0]
 801586e:	4618      	mov	r0, r3
 8015870:	f000 f835 	bl	80158de <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	4618      	mov	r0, r3
 8015878:	3708      	adds	r7, #8
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}

0801587e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801587e:	b590      	push	{r4, r7, lr}
 8015880:	b087      	sub	sp, #28
 8015882:	af00      	add	r7, sp, #0
 8015884:	60f8      	str	r0, [r7, #12]
 8015886:	60b9      	str	r1, [r7, #8]
 8015888:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	4618      	mov	r0, r3
 801588e:	f000 f835 	bl	80158fc <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8015892:	4604      	mov	r4, r0
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	3304      	adds	r3, #4
 8015898:	687a      	ldr	r2, [r7, #4]
 801589a:	68b9      	ldr	r1, [r7, #8]
 801589c:	4618      	mov	r0, r3
 801589e:	f000 f838 	bl	8015912 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>
 80158a2:	eef0 7a40 	vmov.f32	s15, s0
 80158a6:	edc7 7a04 	vstr	s15, [r7, #16]
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	330c      	adds	r3, #12
 80158ae:	687a      	ldr	r2, [r7, #4]
 80158b0:	68b9      	ldr	r1, [r7, #8]
 80158b2:	4618      	mov	r0, r3
 80158b4:	f7fa fd4e 	bl	8010354 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 80158b8:	eef0 7a40 	vmov.f32	s15, s0
 80158bc:	edc7 7a05 	vstr	s15, [r7, #20]
 80158c0:	f107 0214 	add.w	r2, r7, #20
 80158c4:	f107 0310 	add.w	r3, r7, #16
 80158c8:	4619      	mov	r1, r3
 80158ca:	4620      	mov	r0, r4
 80158cc:	f7f9 fc34 	bl	800f138 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80158d0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80158d4:	eeb0 0a67 	vmov.f32	s0, s15
 80158d8:	371c      	adds	r7, #28
 80158da:	46bd      	mov	sp, r7
 80158dc:	bd90      	pop	{r4, r7, pc}

080158de <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 80158de:	b580      	push	{r7, lr}
 80158e0:	b082      	sub	sp, #8
 80158e2:	af00      	add	r7, sp, #0
 80158e4:	6078      	str	r0, [r7, #4]
 80158e6:	6039      	str	r1, [r7, #0]
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	6839      	ldr	r1, [r7, #0]
 80158ec:	4618      	mov	r0, r3
 80158ee:	f000 f823 	bl	8015938 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	4618      	mov	r0, r3
 80158f6:	3708      	adds	r7, #8
 80158f8:	46bd      	mov	sp, r7
 80158fa:	bd80      	pop	{r7, pc}

080158fc <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80158fc:	b480      	push	{r7}
 80158fe:	b083      	sub	sp, #12
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	4618      	mov	r0, r3
 8015908:	370c      	adds	r7, #12
 801590a:	46bd      	mov	sp, r7
 801590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015910:	4770      	bx	lr

08015912 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015912:	b580      	push	{r7, lr}
 8015914:	b084      	sub	sp, #16
 8015916:	af00      	add	r7, sp, #0
 8015918:	60f8      	str	r0, [r7, #12]
 801591a:	60b9      	str	r1, [r7, #8]
 801591c:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	68ba      	ldr	r2, [r7, #8]
 8015922:	6879      	ldr	r1, [r7, #4]
 8015924:	4618      	mov	r0, r3
 8015926:	f000 f81d 	bl	8015964 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>
 801592a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801592e:	eeb0 0a67 	vmov.f32	s0, s15
 8015932:	3710      	adds	r7, #16
 8015934:	46bd      	mov	sp, r7
 8015936:	bd80      	pop	{r7, pc}

08015938 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8015938:	b590      	push	{r4, r7, lr}
 801593a:	b083      	sub	sp, #12
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
 8015940:	6039      	str	r1, [r7, #0]
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f000 f83a 	bl	80159bc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8015948:	687c      	ldr	r4, [r7, #4]
 801594a:	6838      	ldr	r0, [r7, #0]
 801594c:	f000 f82b 	bl	80159a6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>
 8015950:	4603      	mov	r3, r0
 8015952:	4619      	mov	r1, r3
 8015954:	4620      	mov	r0, r4
 8015956:	f000 f83c 	bl	80159d2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	4618      	mov	r0, r3
 801595e:	370c      	adds	r7, #12
 8015960:	46bd      	mov	sp, r7
 8015962:	bd90      	pop	{r4, r7, pc}

08015964 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015964:	b5b0      	push	{r4, r5, r7, lr}
 8015966:	b084      	sub	sp, #16
 8015968:	af00      	add	r7, sp, #0
 801596a:	60f8      	str	r0, [r7, #12]
 801596c:	60b9      	str	r1, [r7, #8]
 801596e:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	681c      	ldr	r4, [r3, #0]
 8015974:	68f8      	ldr	r0, [r7, #12]
 8015976:	f000 f83b 	bl	80159f0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>
 801597a:	4602      	mov	r2, r0
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	fb03 f502 	mul.w	r5, r3, r2
 8015982:	68f8      	ldr	r0, [r7, #12]
 8015984:	f000 f83f 	bl	8015a06 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>
 8015988:	4602      	mov	r2, r0
 801598a:	68bb      	ldr	r3, [r7, #8]
 801598c:	fb02 f303 	mul.w	r3, r2, r3
 8015990:	442b      	add	r3, r5
 8015992:	009b      	lsls	r3, r3, #2
 8015994:	4423      	add	r3, r4
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	ee07 3a90 	vmov	s15, r3
  }
 801599c:	eeb0 0a67 	vmov.f32	s0, s15
 80159a0:	3710      	adds	r7, #16
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bdb0      	pop	{r4, r5, r7, pc}

080159a6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 80159a6:	b480      	push	{r7}
 80159a8:	b083      	sub	sp, #12
 80159aa:	af00      	add	r7, sp, #0
 80159ac:	6078      	str	r0, [r7, #4]
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	4618      	mov	r0, r3
 80159b2:	370c      	adds	r7, #12
 80159b4:	46bd      	mov	sp, r7
 80159b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ba:	4770      	bx	lr

080159bc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80159bc:	b480      	push	{r7}
 80159be:	b083      	sub	sp, #12
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	6078      	str	r0, [r7, #4]
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	4618      	mov	r0, r3
 80159c8:	370c      	adds	r7, #12
 80159ca:	46bd      	mov	sp, r7
 80159cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d0:	4770      	bx	lr

080159d2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80159d2:	b580      	push	{r7, lr}
 80159d4:	b082      	sub	sp, #8
 80159d6:	af00      	add	r7, sp, #0
 80159d8:	6078      	str	r0, [r7, #4]
 80159da:	6039      	str	r1, [r7, #0]
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	6839      	ldr	r1, [r7, #0]
 80159e0:	4618      	mov	r0, r3
 80159e2:	f000 f81b 	bl	8015a1c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	4618      	mov	r0, r3
 80159ea:	3708      	adds	r7, #8
 80159ec:	46bd      	mov	sp, r7
 80159ee:	bd80      	pop	{r7, pc}

080159f0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b082      	sub	sp, #8
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80159f8:	f7f0 ff9f 	bl	800693a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80159fc:	4603      	mov	r3, r0
  }
 80159fe:	4618      	mov	r0, r3
 8015a00:	3708      	adds	r7, #8
 8015a02:	46bd      	mov	sp, r7
 8015a04:	bd80      	pop	{r7, pc}

08015a06 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8015a06:	b580      	push	{r7, lr}
 8015a08:	b082      	sub	sp, #8
 8015a0a:	af00      	add	r7, sp, #0
 8015a0c:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8015a0e:	f7f0 ff8c 	bl	800692a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8015a12:	4603      	mov	r3, r0
  }
 8015a14:	4618      	mov	r0, r3
 8015a16:	3708      	adds	r7, #8
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd80      	pop	{r7, pc}

08015a1c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b082      	sub	sp, #8
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
 8015a24:	6039      	str	r1, [r7, #0]
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	6839      	ldr	r1, [r7, #0]
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f000 f805 	bl	8015a3a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>
  }
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	4618      	mov	r0, r3
 8015a34:	3708      	adds	r7, #8
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd80      	pop	{r7, pc}

08015a3a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8015a3a:	b580      	push	{r7, lr}
 8015a3c:	b082      	sub	sp, #8
 8015a3e:	af00      	add	r7, sp, #0
 8015a40:	6078      	str	r0, [r7, #4]
 8015a42:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	6839      	ldr	r1, [r7, #0]
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f000 f80a 	bl	8015a62 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8015a4e:	683b      	ldr	r3, [r7, #0]
 8015a50:	4618      	mov	r0, r3
 8015a52:	f000 f830 	bl	8015ab6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 8015a56:	bf00      	nop
  }
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	3708      	adds	r7, #8
 8015a5e:	46bd      	mov	sp, r7
 8015a60:	bd80      	pop	{r7, pc}

08015a62 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8015a62:	b590      	push	{r4, r7, lr}
 8015a64:	b083      	sub	sp, #12
 8015a66:	af00      	add	r7, sp, #0
 8015a68:	6078      	str	r0, [r7, #4]
 8015a6a:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8015a6c:	6878      	ldr	r0, [r7, #4]
 8015a6e:	f000 f84a 	bl	8015b06 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8015a72:	683b      	ldr	r3, [r7, #0]
 8015a74:	4618      	mov	r0, r3
 8015a76:	f000 f81e 	bl	8015ab6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 8015a7a:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	601a      	str	r2, [r3, #0]
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	1d1c      	adds	r4, r3, #4
 8015a84:	683b      	ldr	r3, [r7, #0]
 8015a86:	4618      	mov	r0, r3
 8015a88:	f000 f821 	bl	8015ace <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	4619      	mov	r1, r3
 8015a90:	4620      	mov	r0, r4
 8015a92:	f7f0 ff25 	bl	80068e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	1d5c      	adds	r4, r3, #5
 8015a9a:	683b      	ldr	r3, [r7, #0]
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f000 f824 	bl	8015aea <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	4619      	mov	r1, r3
 8015aa6:	4620      	mov	r0, r4
 8015aa8:	f7f0 ff00 	bl	80068ac <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	4618      	mov	r0, r3
 8015ab0:	370c      	adds	r7, #12
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd90      	pop	{r4, r7, pc}

08015ab6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8015ab6:	b480      	push	{r7}
 8015ab8:	b083      	sub	sp, #12
 8015aba:	af00      	add	r7, sp, #0
 8015abc:	6078      	str	r0, [r7, #4]
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	370c      	adds	r7, #12
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015acc:	4770      	bx	lr

08015ace <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8015ace:	b580      	push	{r7, lr}
 8015ad0:	b082      	sub	sp, #8
 8015ad2:	af00      	add	r7, sp, #0
 8015ad4:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	689b      	ldr	r3, [r3, #8]
 8015ada:	4618      	mov	r0, r3
 8015adc:	f7fd fcf8 	bl	80134d0 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8015ae0:	4603      	mov	r3, r0
    }
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	3708      	adds	r7, #8
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	bd80      	pop	{r7, pc}

08015aea <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8015aea:	b580      	push	{r7, lr}
 8015aec:	b082      	sub	sp, #8
 8015aee:	af00      	add	r7, sp, #0
 8015af0:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	689b      	ldr	r3, [r3, #8]
 8015af6:	4618      	mov	r0, r3
 8015af8:	f7fc ffa6 	bl	8012a48 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8015afc:	4603      	mov	r3, r0
    }
 8015afe:	4618      	mov	r0, r3
 8015b00:	3708      	adds	r7, #8
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}

08015b06 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015b06:	b480      	push	{r7}
 8015b08:	b083      	sub	sp, #12
 8015b0a:	af00      	add	r7, sp, #0
 8015b0c:	6078      	str	r0, [r7, #4]
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	4618      	mov	r0, r3
 8015b12:	370c      	adds	r7, #12
 8015b14:	46bd      	mov	sp, r7
 8015b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1a:	4770      	bx	lr

08015b1c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8015b1c:	b590      	push	{r4, r7, lr}
 8015b1e:	b083      	sub	sp, #12
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
 8015b24:	6039      	str	r1, [r7, #0]
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	2b01      	cmp	r3, #1
 8015b2a:	d141      	bne.n	8015bb0 <_Z41__static_initialization_and_destruction_0ii+0x94>
 8015b2c:	683b      	ldr	r3, [r7, #0]
 8015b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015b32:	4293      	cmp	r3, r2
 8015b34:	d13c      	bne.n	8015bb0 <_Z41__static_initialization_and_destruction_0ii+0x94>
static const symbolic::SymbolExpr<internal::symbolic_last_tag> last; // PLEASE use Eigen::last   instead of Eigen::placeholders::last
 8015b36:	4820      	ldr	r0, [pc, #128]	; (8015bb8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8015b38:	f7ee fa1b 	bl	8003f72 <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>

#ifndef EIGEN_PARSED_BY_DOXYGEN

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
template<int N>
static const internal::FixedInt<N> fix{};
 8015b3c:	481f      	ldr	r0, [pc, #124]	; (8015bbc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8015b3e:	f7ee fa23 	bl	8003f88 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>
static const symbolic::AddExpr<symbolic::SymbolExpr<internal::symbolic_last_tag>,symbolic::ValueExpr<Eigen::internal::FixedInt<1> > > lastp1(last+fix<1>());
 8015b42:	481e      	ldr	r0, [pc, #120]	; (8015bbc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8015b44:	f7ee fa2b 	bl	8003f9e <_ZNK5Eigen8internal8FixedIntILi1EEclEv>
 8015b48:	4621      	mov	r1, r4
 8015b4a:	481b      	ldr	r0, [pc, #108]	; (8015bb8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8015b4c:	f7ee fa32 	bl	8003fb4 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>

/** \var all
  * \ingroup Core_Module
  * Can be used as a parameter to DenseBase::operator()(const RowIndices&, const ColIndices&) to index all rows or columns
  */
static const Eigen::internal::all_t all; // PLEASE use Eigen::all instead of Eigen::placeholders::all
 8015b50:	481b      	ldr	r0, [pc, #108]	; (8015bc0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8015b52:	f7eb f9ff 	bl	8000f54 <_ZN5Eigen8internal5all_tC1Ev>
Matrix <float,3,3> A ;
 8015b56:	481b      	ldr	r0, [pc, #108]	; (8015bc4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8015b58:	f7ee fa51 	bl	8003ffe <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> P ;
 8015b5c:	481a      	ldr	r0, [pc, #104]	; (8015bc8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8015b5e:	f7ee fa4e 	bl	8003ffe <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> O ;
 8015b62:	481a      	ldr	r0, [pc, #104]	; (8015bcc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8015b64:	f7ee fa4b 	bl	8003ffe <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> I ;
 8015b68:	4819      	ldr	r0, [pc, #100]	; (8015bd0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8015b6a:	f7ee fa48 	bl	8003ffe <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,1,1> S ;
 8015b6e:	4819      	ldr	r0, [pc, #100]	; (8015bd4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8015b70:	f7ee fa54 	bl	800401c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> R ;
 8015b74:	4818      	ldr	r0, [pc, #96]	; (8015bd8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8015b76:	f7ee fa51 	bl	800401c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> D ;
 8015b7a:	4818      	ldr	r0, [pc, #96]	; (8015bdc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8015b7c:	f7ee fa4e 	bl	800401c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> Z ;
 8015b80:	4817      	ldr	r0, [pc, #92]	; (8015be0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8015b82:	f7ee fa4b 	bl	800401c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,3,1> K ;
 8015b86:	4817      	ldr	r0, [pc, #92]	; (8015be4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8015b88:	f7ee fa57 	bl	800403a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,1,3> C ;
 8015b8c:	4816      	ldr	r0, [pc, #88]	; (8015be8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8015b8e:	f7ee fa63 	bl	8004058 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>
Matrix <float,3,1> G ;
 8015b92:	4816      	ldr	r0, [pc, #88]	; (8015bec <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8015b94:	f7ee fa51 	bl	800403a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,3,3> Q ;
 8015b98:	4815      	ldr	r0, [pc, #84]	; (8015bf0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8015b9a:	f7ee fa30 	bl	8003ffe <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Vector3f X;
 8015b9e:	4815      	ldr	r0, [pc, #84]	; (8015bf4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8015ba0:	f7ee fa4b 	bl	800403a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f X1;
 8015ba4:	4814      	ldr	r0, [pc, #80]	; (8015bf8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8015ba6:	f7ee fa48 	bl	800403a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f B;
 8015baa:	4814      	ldr	r0, [pc, #80]	; (8015bfc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8015bac:	f7ee fa45 	bl	800403a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
}
 8015bb0:	bf00      	nop
 8015bb2:	370c      	adds	r7, #12
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	bd90      	pop	{r4, r7, pc}
 8015bb8:	2000021c 	.word	0x2000021c
 8015bbc:	20000788 	.word	0x20000788
 8015bc0:	20000220 	.word	0x20000220
 8015bc4:	20000568 	.word	0x20000568
 8015bc8:	2000058c 	.word	0x2000058c
 8015bcc:	200005b0 	.word	0x200005b0
 8015bd0:	200005d4 	.word	0x200005d4
 8015bd4:	200005f8 	.word	0x200005f8
 8015bd8:	200005fc 	.word	0x200005fc
 8015bdc:	20000600 	.word	0x20000600
 8015be0:	20000604 	.word	0x20000604
 8015be4:	20000608 	.word	0x20000608
 8015be8:	20000614 	.word	0x20000614
 8015bec:	20000620 	.word	0x20000620
 8015bf0:	2000062c 	.word	0x2000062c
 8015bf4:	20000650 	.word	0x20000650
 8015bf8:	2000065c 	.word	0x2000065c
 8015bfc:	20000668 	.word	0x20000668

08015c00 <_GLOBAL__sub_I_hi2c1>:
 8015c00:	b580      	push	{r7, lr}
 8015c02:	af00      	add	r7, sp, #0
 8015c04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015c08:	2001      	movs	r0, #1
 8015c0a:	f7ff ff87 	bl	8015b1c <_Z41__static_initialization_and_destruction_0ii>
 8015c0e:	bd80      	pop	{r7, pc}

08015c10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b082      	sub	sp, #8
 8015c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015c16:	2300      	movs	r3, #0
 8015c18:	607b      	str	r3, [r7, #4]
 8015c1a:	4b10      	ldr	r3, [pc, #64]	; (8015c5c <HAL_MspInit+0x4c>)
 8015c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c1e:	4a0f      	ldr	r2, [pc, #60]	; (8015c5c <HAL_MspInit+0x4c>)
 8015c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015c24:	6453      	str	r3, [r2, #68]	; 0x44
 8015c26:	4b0d      	ldr	r3, [pc, #52]	; (8015c5c <HAL_MspInit+0x4c>)
 8015c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015c2e:	607b      	str	r3, [r7, #4]
 8015c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8015c32:	2300      	movs	r3, #0
 8015c34:	603b      	str	r3, [r7, #0]
 8015c36:	4b09      	ldr	r3, [pc, #36]	; (8015c5c <HAL_MspInit+0x4c>)
 8015c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c3a:	4a08      	ldr	r2, [pc, #32]	; (8015c5c <HAL_MspInit+0x4c>)
 8015c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015c40:	6413      	str	r3, [r2, #64]	; 0x40
 8015c42:	4b06      	ldr	r3, [pc, #24]	; (8015c5c <HAL_MspInit+0x4c>)
 8015c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015c4a:	603b      	str	r3, [r7, #0]
 8015c4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8015c4e:	2007      	movs	r0, #7
 8015c50:	f000 fd14 	bl	801667c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8015c54:	bf00      	nop
 8015c56:	3708      	adds	r7, #8
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	bd80      	pop	{r7, pc}
 8015c5c:	40023800 	.word	0x40023800

08015c60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b08c      	sub	sp, #48	; 0x30
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015c68:	f107 031c 	add.w	r3, r7, #28
 8015c6c:	2200      	movs	r2, #0
 8015c6e:	601a      	str	r2, [r3, #0]
 8015c70:	605a      	str	r2, [r3, #4]
 8015c72:	609a      	str	r2, [r3, #8]
 8015c74:	60da      	str	r2, [r3, #12]
 8015c76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	4a52      	ldr	r2, [pc, #328]	; (8015dc8 <HAL_I2C_MspInit+0x168>)
 8015c7e:	4293      	cmp	r3, r2
 8015c80:	d13d      	bne.n	8015cfe <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015c82:	2300      	movs	r3, #0
 8015c84:	61bb      	str	r3, [r7, #24]
 8015c86:	4b51      	ldr	r3, [pc, #324]	; (8015dcc <HAL_I2C_MspInit+0x16c>)
 8015c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c8a:	4a50      	ldr	r2, [pc, #320]	; (8015dcc <HAL_I2C_MspInit+0x16c>)
 8015c8c:	f043 0302 	orr.w	r3, r3, #2
 8015c90:	6313      	str	r3, [r2, #48]	; 0x30
 8015c92:	4b4e      	ldr	r3, [pc, #312]	; (8015dcc <HAL_I2C_MspInit+0x16c>)
 8015c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c96:	f003 0302 	and.w	r3, r3, #2
 8015c9a:	61bb      	str	r3, [r7, #24]
 8015c9c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8015c9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8015ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015ca4:	2312      	movs	r3, #18
 8015ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015ca8:	2300      	movs	r3, #0
 8015caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015cac:	2303      	movs	r3, #3
 8015cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8015cb0:	2304      	movs	r3, #4
 8015cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015cb4:	f107 031c 	add.w	r3, r7, #28
 8015cb8:	4619      	mov	r1, r3
 8015cba:	4845      	ldr	r0, [pc, #276]	; (8015dd0 <HAL_I2C_MspInit+0x170>)
 8015cbc:	f001 f930 	bl	8016f20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	617b      	str	r3, [r7, #20]
 8015cc4:	4b41      	ldr	r3, [pc, #260]	; (8015dcc <HAL_I2C_MspInit+0x16c>)
 8015cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cc8:	4a40      	ldr	r2, [pc, #256]	; (8015dcc <HAL_I2C_MspInit+0x16c>)
 8015cca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015cce:	6413      	str	r3, [r2, #64]	; 0x40
 8015cd0:	4b3e      	ldr	r3, [pc, #248]	; (8015dcc <HAL_I2C_MspInit+0x16c>)
 8015cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015cd8:	617b      	str	r3, [r7, #20]
 8015cda:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8015cdc:	2200      	movs	r2, #0
 8015cde:	2100      	movs	r1, #0
 8015ce0:	201f      	movs	r0, #31
 8015ce2:	f000 fcd6 	bl	8016692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8015ce6:	201f      	movs	r0, #31
 8015ce8:	f000 fcef 	bl	80166ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8015cec:	2200      	movs	r2, #0
 8015cee:	2100      	movs	r1, #0
 8015cf0:	2020      	movs	r0, #32
 8015cf2:	f000 fcce 	bl	8016692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8015cf6:	2020      	movs	r0, #32
 8015cf8:	f000 fce7 	bl	80166ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8015cfc:	e060      	b.n	8015dc0 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	4a34      	ldr	r2, [pc, #208]	; (8015dd4 <HAL_I2C_MspInit+0x174>)
 8015d04:	4293      	cmp	r3, r2
 8015d06:	d15b      	bne.n	8015dc0 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015d08:	2300      	movs	r3, #0
 8015d0a:	613b      	str	r3, [r7, #16]
 8015d0c:	4b2f      	ldr	r3, [pc, #188]	; (8015dcc <HAL_I2C_MspInit+0x16c>)
 8015d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d10:	4a2e      	ldr	r2, [pc, #184]	; (8015dcc <HAL_I2C_MspInit+0x16c>)
 8015d12:	f043 0304 	orr.w	r3, r3, #4
 8015d16:	6313      	str	r3, [r2, #48]	; 0x30
 8015d18:	4b2c      	ldr	r3, [pc, #176]	; (8015dcc <HAL_I2C_MspInit+0x16c>)
 8015d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d1c:	f003 0304 	and.w	r3, r3, #4
 8015d20:	613b      	str	r3, [r7, #16]
 8015d22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015d24:	2300      	movs	r3, #0
 8015d26:	60fb      	str	r3, [r7, #12]
 8015d28:	4b28      	ldr	r3, [pc, #160]	; (8015dcc <HAL_I2C_MspInit+0x16c>)
 8015d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d2c:	4a27      	ldr	r2, [pc, #156]	; (8015dcc <HAL_I2C_MspInit+0x16c>)
 8015d2e:	f043 0301 	orr.w	r3, r3, #1
 8015d32:	6313      	str	r3, [r2, #48]	; 0x30
 8015d34:	4b25      	ldr	r3, [pc, #148]	; (8015dcc <HAL_I2C_MspInit+0x16c>)
 8015d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d38:	f003 0301 	and.w	r3, r3, #1
 8015d3c:	60fb      	str	r3, [r7, #12]
 8015d3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8015d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015d46:	2312      	movs	r3, #18
 8015d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015d4e:	2303      	movs	r3, #3
 8015d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8015d52:	2304      	movs	r3, #4
 8015d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015d56:	f107 031c 	add.w	r3, r7, #28
 8015d5a:	4619      	mov	r1, r3
 8015d5c:	481e      	ldr	r0, [pc, #120]	; (8015dd8 <HAL_I2C_MspInit+0x178>)
 8015d5e:	f001 f8df 	bl	8016f20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8015d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015d68:	2312      	movs	r3, #18
 8015d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015d70:	2303      	movs	r3, #3
 8015d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8015d74:	2304      	movs	r3, #4
 8015d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015d78:	f107 031c 	add.w	r3, r7, #28
 8015d7c:	4619      	mov	r1, r3
 8015d7e:	4817      	ldr	r0, [pc, #92]	; (8015ddc <HAL_I2C_MspInit+0x17c>)
 8015d80:	f001 f8ce 	bl	8016f20 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8015d84:	2300      	movs	r3, #0
 8015d86:	60bb      	str	r3, [r7, #8]
 8015d88:	4b10      	ldr	r3, [pc, #64]	; (8015dcc <HAL_I2C_MspInit+0x16c>)
 8015d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d8c:	4a0f      	ldr	r2, [pc, #60]	; (8015dcc <HAL_I2C_MspInit+0x16c>)
 8015d8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015d92:	6413      	str	r3, [r2, #64]	; 0x40
 8015d94:	4b0d      	ldr	r3, [pc, #52]	; (8015dcc <HAL_I2C_MspInit+0x16c>)
 8015d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015d9c:	60bb      	str	r3, [r7, #8]
 8015d9e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8015da0:	2200      	movs	r2, #0
 8015da2:	2100      	movs	r1, #0
 8015da4:	2048      	movs	r0, #72	; 0x48
 8015da6:	f000 fc74 	bl	8016692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8015daa:	2048      	movs	r0, #72	; 0x48
 8015dac:	f000 fc8d 	bl	80166ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8015db0:	2200      	movs	r2, #0
 8015db2:	2100      	movs	r1, #0
 8015db4:	2049      	movs	r0, #73	; 0x49
 8015db6:	f000 fc6c 	bl	8016692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8015dba:	2049      	movs	r0, #73	; 0x49
 8015dbc:	f000 fc85 	bl	80166ca <HAL_NVIC_EnableIRQ>
}
 8015dc0:	bf00      	nop
 8015dc2:	3730      	adds	r7, #48	; 0x30
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	bd80      	pop	{r7, pc}
 8015dc8:	40005400 	.word	0x40005400
 8015dcc:	40023800 	.word	0x40023800
 8015dd0:	40020400 	.word	0x40020400
 8015dd4:	40005c00 	.word	0x40005c00
 8015dd8:	40020800 	.word	0x40020800
 8015ddc:	40020000 	.word	0x40020000

08015de0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b086      	sub	sp, #24
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	4a26      	ldr	r2, [pc, #152]	; (8015e88 <HAL_TIM_Base_MspInit+0xa8>)
 8015dee:	4293      	cmp	r3, r2
 8015df0:	d10e      	bne.n	8015e10 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8015df2:	2300      	movs	r3, #0
 8015df4:	617b      	str	r3, [r7, #20]
 8015df6:	4b25      	ldr	r3, [pc, #148]	; (8015e8c <HAL_TIM_Base_MspInit+0xac>)
 8015df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015dfa:	4a24      	ldr	r2, [pc, #144]	; (8015e8c <HAL_TIM_Base_MspInit+0xac>)
 8015dfc:	f043 0304 	orr.w	r3, r3, #4
 8015e00:	6413      	str	r3, [r2, #64]	; 0x40
 8015e02:	4b22      	ldr	r3, [pc, #136]	; (8015e8c <HAL_TIM_Base_MspInit+0xac>)
 8015e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e06:	f003 0304 	and.w	r3, r3, #4
 8015e0a:	617b      	str	r3, [r7, #20]
 8015e0c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8015e0e:	e036      	b.n	8015e7e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM10)
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	4a1e      	ldr	r2, [pc, #120]	; (8015e90 <HAL_TIM_Base_MspInit+0xb0>)
 8015e16:	4293      	cmp	r3, r2
 8015e18:	d116      	bne.n	8015e48 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	613b      	str	r3, [r7, #16]
 8015e1e:	4b1b      	ldr	r3, [pc, #108]	; (8015e8c <HAL_TIM_Base_MspInit+0xac>)
 8015e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e22:	4a1a      	ldr	r2, [pc, #104]	; (8015e8c <HAL_TIM_Base_MspInit+0xac>)
 8015e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015e28:	6453      	str	r3, [r2, #68]	; 0x44
 8015e2a:	4b18      	ldr	r3, [pc, #96]	; (8015e8c <HAL_TIM_Base_MspInit+0xac>)
 8015e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015e32:	613b      	str	r3, [r7, #16]
 8015e34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8015e36:	2200      	movs	r2, #0
 8015e38:	2100      	movs	r1, #0
 8015e3a:	2019      	movs	r0, #25
 8015e3c:	f000 fc29 	bl	8016692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8015e40:	2019      	movs	r0, #25
 8015e42:	f000 fc42 	bl	80166ca <HAL_NVIC_EnableIRQ>
}
 8015e46:	e01a      	b.n	8015e7e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	4a11      	ldr	r2, [pc, #68]	; (8015e94 <HAL_TIM_Base_MspInit+0xb4>)
 8015e4e:	4293      	cmp	r3, r2
 8015e50:	d115      	bne.n	8015e7e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8015e52:	2300      	movs	r3, #0
 8015e54:	60fb      	str	r3, [r7, #12]
 8015e56:	4b0d      	ldr	r3, [pc, #52]	; (8015e8c <HAL_TIM_Base_MspInit+0xac>)
 8015e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e5a:	4a0c      	ldr	r2, [pc, #48]	; (8015e8c <HAL_TIM_Base_MspInit+0xac>)
 8015e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015e60:	6453      	str	r3, [r2, #68]	; 0x44
 8015e62:	4b0a      	ldr	r3, [pc, #40]	; (8015e8c <HAL_TIM_Base_MspInit+0xac>)
 8015e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015e6a:	60fb      	str	r3, [r7, #12]
 8015e6c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8015e6e:	2200      	movs	r2, #0
 8015e70:	2100      	movs	r1, #0
 8015e72:	201a      	movs	r0, #26
 8015e74:	f000 fc0d 	bl	8016692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8015e78:	201a      	movs	r0, #26
 8015e7a:	f000 fc26 	bl	80166ca <HAL_NVIC_EnableIRQ>
}
 8015e7e:	bf00      	nop
 8015e80:	3718      	adds	r7, #24
 8015e82:	46bd      	mov	sp, r7
 8015e84:	bd80      	pop	{r7, pc}
 8015e86:	bf00      	nop
 8015e88:	40000800 	.word	0x40000800
 8015e8c:	40023800 	.word	0x40023800
 8015e90:	40014400 	.word	0x40014400
 8015e94:	40014800 	.word	0x40014800

08015e98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b088      	sub	sp, #32
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015ea0:	f107 030c 	add.w	r3, r7, #12
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	601a      	str	r2, [r3, #0]
 8015ea8:	605a      	str	r2, [r3, #4]
 8015eaa:	609a      	str	r2, [r3, #8]
 8015eac:	60da      	str	r2, [r3, #12]
 8015eae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	4a12      	ldr	r2, [pc, #72]	; (8015f00 <HAL_TIM_MspPostInit+0x68>)
 8015eb6:	4293      	cmp	r3, r2
 8015eb8:	d11d      	bne.n	8015ef6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015eba:	2300      	movs	r3, #0
 8015ebc:	60bb      	str	r3, [r7, #8]
 8015ebe:	4b11      	ldr	r3, [pc, #68]	; (8015f04 <HAL_TIM_MspPostInit+0x6c>)
 8015ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ec2:	4a10      	ldr	r2, [pc, #64]	; (8015f04 <HAL_TIM_MspPostInit+0x6c>)
 8015ec4:	f043 0302 	orr.w	r3, r3, #2
 8015ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8015eca:	4b0e      	ldr	r3, [pc, #56]	; (8015f04 <HAL_TIM_MspPostInit+0x6c>)
 8015ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ece:	f003 0302 	and.w	r3, r3, #2
 8015ed2:	60bb      	str	r3, [r7, #8]
 8015ed4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 8015ed6:	2340      	movs	r3, #64	; 0x40
 8015ed8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015eda:	2302      	movs	r3, #2
 8015edc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015ede:	2300      	movs	r3, #0
 8015ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8015ee6:	2302      	movs	r3, #2
 8015ee8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 8015eea:	f107 030c 	add.w	r3, r7, #12
 8015eee:	4619      	mov	r1, r3
 8015ef0:	4805      	ldr	r0, [pc, #20]	; (8015f08 <HAL_TIM_MspPostInit+0x70>)
 8015ef2:	f001 f815 	bl	8016f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8015ef6:	bf00      	nop
 8015ef8:	3720      	adds	r7, #32
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bd80      	pop	{r7, pc}
 8015efe:	bf00      	nop
 8015f00:	40000800 	.word	0x40000800
 8015f04:	40023800 	.word	0x40023800
 8015f08:	40020400 	.word	0x40020400

08015f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b08a      	sub	sp, #40	; 0x28
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015f14:	f107 0314 	add.w	r3, r7, #20
 8015f18:	2200      	movs	r2, #0
 8015f1a:	601a      	str	r2, [r3, #0]
 8015f1c:	605a      	str	r2, [r3, #4]
 8015f1e:	609a      	str	r2, [r3, #8]
 8015f20:	60da      	str	r2, [r3, #12]
 8015f22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	4a4b      	ldr	r2, [pc, #300]	; (8016058 <HAL_UART_MspInit+0x14c>)
 8015f2a:	4293      	cmp	r3, r2
 8015f2c:	f040 8090 	bne.w	8016050 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8015f30:	2300      	movs	r3, #0
 8015f32:	613b      	str	r3, [r7, #16]
 8015f34:	4b49      	ldr	r3, [pc, #292]	; (801605c <HAL_UART_MspInit+0x150>)
 8015f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f38:	4a48      	ldr	r2, [pc, #288]	; (801605c <HAL_UART_MspInit+0x150>)
 8015f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8015f40:	4b46      	ldr	r3, [pc, #280]	; (801605c <HAL_UART_MspInit+0x150>)
 8015f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015f48:	613b      	str	r3, [r7, #16]
 8015f4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	60fb      	str	r3, [r7, #12]
 8015f50:	4b42      	ldr	r3, [pc, #264]	; (801605c <HAL_UART_MspInit+0x150>)
 8015f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f54:	4a41      	ldr	r2, [pc, #260]	; (801605c <HAL_UART_MspInit+0x150>)
 8015f56:	f043 0301 	orr.w	r3, r3, #1
 8015f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8015f5c:	4b3f      	ldr	r3, [pc, #252]	; (801605c <HAL_UART_MspInit+0x150>)
 8015f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f60:	f003 0301 	and.w	r3, r3, #1
 8015f64:	60fb      	str	r3, [r7, #12]
 8015f66:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8015f68:	230c      	movs	r3, #12
 8015f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015f6c:	2302      	movs	r3, #2
 8015f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f70:	2300      	movs	r3, #0
 8015f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015f74:	2303      	movs	r3, #3
 8015f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8015f78:	2307      	movs	r3, #7
 8015f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015f7c:	f107 0314 	add.w	r3, r7, #20
 8015f80:	4619      	mov	r1, r3
 8015f82:	4837      	ldr	r0, [pc, #220]	; (8016060 <HAL_UART_MspInit+0x154>)
 8015f84:	f000 ffcc 	bl	8016f20 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream7;
 8015f88:	4b36      	ldr	r3, [pc, #216]	; (8016064 <HAL_UART_MspInit+0x158>)
 8015f8a:	4a37      	ldr	r2, [pc, #220]	; (8016068 <HAL_UART_MspInit+0x15c>)
 8015f8c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 8015f8e:	4b35      	ldr	r3, [pc, #212]	; (8016064 <HAL_UART_MspInit+0x158>)
 8015f90:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8015f94:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8015f96:	4b33      	ldr	r3, [pc, #204]	; (8016064 <HAL_UART_MspInit+0x158>)
 8015f98:	2200      	movs	r2, #0
 8015f9a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015f9c:	4b31      	ldr	r3, [pc, #196]	; (8016064 <HAL_UART_MspInit+0x158>)
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8015fa2:	4b30      	ldr	r3, [pc, #192]	; (8016064 <HAL_UART_MspInit+0x158>)
 8015fa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015fa8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8015faa:	4b2e      	ldr	r3, [pc, #184]	; (8016064 <HAL_UART_MspInit+0x158>)
 8015fac:	2200      	movs	r2, #0
 8015fae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8015fb0:	4b2c      	ldr	r3, [pc, #176]	; (8016064 <HAL_UART_MspInit+0x158>)
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8015fb6:	4b2b      	ldr	r3, [pc, #172]	; (8016064 <HAL_UART_MspInit+0x158>)
 8015fb8:	2200      	movs	r2, #0
 8015fba:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8015fbc:	4b29      	ldr	r3, [pc, #164]	; (8016064 <HAL_UART_MspInit+0x158>)
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015fc2:	4b28      	ldr	r3, [pc, #160]	; (8016064 <HAL_UART_MspInit+0x158>)
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8015fc8:	4826      	ldr	r0, [pc, #152]	; (8016064 <HAL_UART_MspInit+0x158>)
 8015fca:	f000 fb99 	bl	8016700 <HAL_DMA_Init>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d001      	beq.n	8015fd8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8015fd4:	f7ed ffc8 	bl	8003f68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	4a22      	ldr	r2, [pc, #136]	; (8016064 <HAL_UART_MspInit+0x158>)
 8015fdc:	639a      	str	r2, [r3, #56]	; 0x38
 8015fde:	4a21      	ldr	r2, [pc, #132]	; (8016064 <HAL_UART_MspInit+0x158>)
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8015fe4:	4b21      	ldr	r3, [pc, #132]	; (801606c <HAL_UART_MspInit+0x160>)
 8015fe6:	4a22      	ldr	r2, [pc, #136]	; (8016070 <HAL_UART_MspInit+0x164>)
 8015fe8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8015fea:	4b20      	ldr	r3, [pc, #128]	; (801606c <HAL_UART_MspInit+0x160>)
 8015fec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015ff0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8015ff2:	4b1e      	ldr	r3, [pc, #120]	; (801606c <HAL_UART_MspInit+0x160>)
 8015ff4:	2240      	movs	r2, #64	; 0x40
 8015ff6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015ff8:	4b1c      	ldr	r3, [pc, #112]	; (801606c <HAL_UART_MspInit+0x160>)
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8015ffe:	4b1b      	ldr	r3, [pc, #108]	; (801606c <HAL_UART_MspInit+0x160>)
 8016000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016004:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8016006:	4b19      	ldr	r3, [pc, #100]	; (801606c <HAL_UART_MspInit+0x160>)
 8016008:	2200      	movs	r2, #0
 801600a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801600c:	4b17      	ldr	r3, [pc, #92]	; (801606c <HAL_UART_MspInit+0x160>)
 801600e:	2200      	movs	r2, #0
 8016010:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8016012:	4b16      	ldr	r3, [pc, #88]	; (801606c <HAL_UART_MspInit+0x160>)
 8016014:	2200      	movs	r2, #0
 8016016:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8016018:	4b14      	ldr	r3, [pc, #80]	; (801606c <HAL_UART_MspInit+0x160>)
 801601a:	2200      	movs	r2, #0
 801601c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801601e:	4b13      	ldr	r3, [pc, #76]	; (801606c <HAL_UART_MspInit+0x160>)
 8016020:	2200      	movs	r2, #0
 8016022:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8016024:	4811      	ldr	r0, [pc, #68]	; (801606c <HAL_UART_MspInit+0x160>)
 8016026:	f000 fb6b 	bl	8016700 <HAL_DMA_Init>
 801602a:	4603      	mov	r3, r0
 801602c:	2b00      	cmp	r3, #0
 801602e:	d001      	beq.n	8016034 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8016030:	f7ed ff9a 	bl	8003f68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	4a0d      	ldr	r2, [pc, #52]	; (801606c <HAL_UART_MspInit+0x160>)
 8016038:	635a      	str	r2, [r3, #52]	; 0x34
 801603a:	4a0c      	ldr	r2, [pc, #48]	; (801606c <HAL_UART_MspInit+0x160>)
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8016040:	2200      	movs	r2, #0
 8016042:	2100      	movs	r1, #0
 8016044:	2026      	movs	r0, #38	; 0x26
 8016046:	f000 fb24 	bl	8016692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 801604a:	2026      	movs	r0, #38	; 0x26
 801604c:	f000 fb3d 	bl	80166ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8016050:	bf00      	nop
 8016052:	3728      	adds	r7, #40	; 0x28
 8016054:	46bd      	mov	sp, r7
 8016056:	bd80      	pop	{r7, pc}
 8016058:	40004400 	.word	0x40004400
 801605c:	40023800 	.word	0x40023800
 8016060:	40020000 	.word	0x40020000
 8016064:	200003e8 	.word	0x200003e8
 8016068:	400260b8 	.word	0x400260b8
 801606c:	20000448 	.word	0x20000448
 8016070:	400260a0 	.word	0x400260a0

08016074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8016074:	b480      	push	{r7}
 8016076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8016078:	e7fe      	b.n	8016078 <NMI_Handler+0x4>

0801607a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801607a:	b480      	push	{r7}
 801607c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801607e:	e7fe      	b.n	801607e <HardFault_Handler+0x4>

08016080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8016080:	b480      	push	{r7}
 8016082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8016084:	e7fe      	b.n	8016084 <MemManage_Handler+0x4>

08016086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8016086:	b480      	push	{r7}
 8016088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801608a:	e7fe      	b.n	801608a <BusFault_Handler+0x4>

0801608c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801608c:	b480      	push	{r7}
 801608e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8016090:	e7fe      	b.n	8016090 <UsageFault_Handler+0x4>

08016092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8016092:	b480      	push	{r7}
 8016094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8016096:	bf00      	nop
 8016098:	46bd      	mov	sp, r7
 801609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801609e:	4770      	bx	lr

080160a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80160a0:	b480      	push	{r7}
 80160a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80160a4:	bf00      	nop
 80160a6:	46bd      	mov	sp, r7
 80160a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ac:	4770      	bx	lr

080160ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80160ae:	b480      	push	{r7}
 80160b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80160b2:	bf00      	nop
 80160b4:	46bd      	mov	sp, r7
 80160b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ba:	4770      	bx	lr

080160bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80160c0:	f000 f9c8 	bl	8016454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80160c4:	bf00      	nop
 80160c6:	bd80      	pop	{r7, pc}

080160c8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 80160cc:	2004      	movs	r0, #4
 80160ce:	f001 f8dd 	bl	801728c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80160d2:	bf00      	nop
 80160d4:	bd80      	pop	{r7, pc}
	...

080160d8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80160dc:	4802      	ldr	r0, [pc, #8]	; (80160e8 <DMA1_Stream6_IRQHandler+0x10>)
 80160de:	f000 fca7 	bl	8016a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80160e2:	bf00      	nop
 80160e4:	bd80      	pop	{r7, pc}
 80160e6:	bf00      	nop
 80160e8:	20000448 	.word	0x20000448

080160ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80160f0:	4802      	ldr	r0, [pc, #8]	; (80160fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80160f2:	f004 fdef 	bl	801acd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80160f6:	bf00      	nop
 80160f8:	bd80      	pop	{r7, pc}
 80160fa:	bf00      	nop
 80160fc:	20000314 	.word	0x20000314

08016100 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8016100:	b580      	push	{r7, lr}
 8016102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8016104:	4802      	ldr	r0, [pc, #8]	; (8016110 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8016106:	f004 fde5 	bl	801acd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 801610a:	bf00      	nop
 801610c:	bd80      	pop	{r7, pc}
 801610e:	bf00      	nop
 8016110:	2000035c 	.word	0x2000035c

08016114 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8016118:	4802      	ldr	r0, [pc, #8]	; (8016124 <I2C1_EV_IRQHandler+0x10>)
 801611a:	f001 fef7 	bl	8017f0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 801611e:	bf00      	nop
 8016120:	bd80      	pop	{r7, pc}
 8016122:	bf00      	nop
 8016124:	20000224 	.word	0x20000224

08016128 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 801612c:	4802      	ldr	r0, [pc, #8]	; (8016138 <I2C1_ER_IRQHandler+0x10>)
 801612e:	f002 f85e 	bl	80181ee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8016132:	bf00      	nop
 8016134:	bd80      	pop	{r7, pc}
 8016136:	bf00      	nop
 8016138:	20000224 	.word	0x20000224

0801613c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 801613c:	b580      	push	{r7, lr}
 801613e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8016140:	4802      	ldr	r0, [pc, #8]	; (801614c <USART2_IRQHandler+0x10>)
 8016142:	f005 fd13 	bl	801bb6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8016146:	bf00      	nop
 8016148:	bd80      	pop	{r7, pc}
 801614a:	bf00      	nop
 801614c:	200003a4 	.word	0x200003a4

08016150 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8016150:	b580      	push	{r7, lr}
 8016152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Stop_Pin);
 8016154:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8016158:	f001 f898 	bl	801728c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_EMER_Pin);
 801615c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8016160:	f001 f894 	bl	801728c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8016164:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8016168:	f001 f890 	bl	801728c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 801616c:	bf00      	nop
 801616e:	bd80      	pop	{r7, pc}

08016170 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8016170:	b580      	push	{r7, lr}
 8016172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8016174:	4802      	ldr	r0, [pc, #8]	; (8016180 <DMA1_Stream7_IRQHandler+0x10>)
 8016176:	f000 fc5b 	bl	8016a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 801617a:	bf00      	nop
 801617c:	bd80      	pop	{r7, pc}
 801617e:	bf00      	nop
 8016180:	200003e8 	.word	0x200003e8

08016184 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8016184:	b580      	push	{r7, lr}
 8016186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8016188:	4802      	ldr	r0, [pc, #8]	; (8016194 <I2C3_EV_IRQHandler+0x10>)
 801618a:	f001 febf 	bl	8017f0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 801618e:	bf00      	nop
 8016190:	bd80      	pop	{r7, pc}
 8016192:	bf00      	nop
 8016194:	20000278 	.word	0x20000278

08016198 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8016198:	b580      	push	{r7, lr}
 801619a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 801619c:	4802      	ldr	r0, [pc, #8]	; (80161a8 <I2C3_ER_IRQHandler+0x10>)
 801619e:	f002 f826 	bl	80181ee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80161a2:	bf00      	nop
 80161a4:	bd80      	pop	{r7, pc}
 80161a6:	bf00      	nop
 80161a8:	20000278 	.word	0x20000278

080161ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80161ac:	b480      	push	{r7}
 80161ae:	af00      	add	r7, sp, #0
	return 1;
 80161b0:	2301      	movs	r3, #1
}
 80161b2:	4618      	mov	r0, r3
 80161b4:	46bd      	mov	sp, r7
 80161b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ba:	4770      	bx	lr

080161bc <_kill>:

int _kill(int pid, int sig)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b082      	sub	sp, #8
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
 80161c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80161c6:	f007 fd1b 	bl	801dc00 <__errno>
 80161ca:	4603      	mov	r3, r0
 80161cc:	2216      	movs	r2, #22
 80161ce:	601a      	str	r2, [r3, #0]
	return -1;
 80161d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80161d4:	4618      	mov	r0, r3
 80161d6:	3708      	adds	r7, #8
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}

080161dc <_exit>:

void _exit (int status)
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b082      	sub	sp, #8
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80161e4:	f04f 31ff 	mov.w	r1, #4294967295
 80161e8:	6878      	ldr	r0, [r7, #4]
 80161ea:	f7ff ffe7 	bl	80161bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80161ee:	e7fe      	b.n	80161ee <_exit+0x12>

080161f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b086      	sub	sp, #24
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	60f8      	str	r0, [r7, #12]
 80161f8:	60b9      	str	r1, [r7, #8]
 80161fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80161fc:	2300      	movs	r3, #0
 80161fe:	617b      	str	r3, [r7, #20]
 8016200:	e00a      	b.n	8016218 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8016202:	f3af 8000 	nop.w
 8016206:	4601      	mov	r1, r0
 8016208:	68bb      	ldr	r3, [r7, #8]
 801620a:	1c5a      	adds	r2, r3, #1
 801620c:	60ba      	str	r2, [r7, #8]
 801620e:	b2ca      	uxtb	r2, r1
 8016210:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016212:	697b      	ldr	r3, [r7, #20]
 8016214:	3301      	adds	r3, #1
 8016216:	617b      	str	r3, [r7, #20]
 8016218:	697a      	ldr	r2, [r7, #20]
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	429a      	cmp	r2, r3
 801621e:	dbf0      	blt.n	8016202 <_read+0x12>
	}

return len;
 8016220:	687b      	ldr	r3, [r7, #4]
}
 8016222:	4618      	mov	r0, r3
 8016224:	3718      	adds	r7, #24
 8016226:	46bd      	mov	sp, r7
 8016228:	bd80      	pop	{r7, pc}

0801622a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801622a:	b580      	push	{r7, lr}
 801622c:	b086      	sub	sp, #24
 801622e:	af00      	add	r7, sp, #0
 8016230:	60f8      	str	r0, [r7, #12]
 8016232:	60b9      	str	r1, [r7, #8]
 8016234:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016236:	2300      	movs	r3, #0
 8016238:	617b      	str	r3, [r7, #20]
 801623a:	e009      	b.n	8016250 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801623c:	68bb      	ldr	r3, [r7, #8]
 801623e:	1c5a      	adds	r2, r3, #1
 8016240:	60ba      	str	r2, [r7, #8]
 8016242:	781b      	ldrb	r3, [r3, #0]
 8016244:	4618      	mov	r0, r3
 8016246:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801624a:	697b      	ldr	r3, [r7, #20]
 801624c:	3301      	adds	r3, #1
 801624e:	617b      	str	r3, [r7, #20]
 8016250:	697a      	ldr	r2, [r7, #20]
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	429a      	cmp	r2, r3
 8016256:	dbf1      	blt.n	801623c <_write+0x12>
	}
	return len;
 8016258:	687b      	ldr	r3, [r7, #4]
}
 801625a:	4618      	mov	r0, r3
 801625c:	3718      	adds	r7, #24
 801625e:	46bd      	mov	sp, r7
 8016260:	bd80      	pop	{r7, pc}

08016262 <_close>:

int _close(int file)
{
 8016262:	b480      	push	{r7}
 8016264:	b083      	sub	sp, #12
 8016266:	af00      	add	r7, sp, #0
 8016268:	6078      	str	r0, [r7, #4]
	return -1;
 801626a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801626e:	4618      	mov	r0, r3
 8016270:	370c      	adds	r7, #12
 8016272:	46bd      	mov	sp, r7
 8016274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016278:	4770      	bx	lr

0801627a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801627a:	b480      	push	{r7}
 801627c:	b083      	sub	sp, #12
 801627e:	af00      	add	r7, sp, #0
 8016280:	6078      	str	r0, [r7, #4]
 8016282:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8016284:	683b      	ldr	r3, [r7, #0]
 8016286:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801628a:	605a      	str	r2, [r3, #4]
	return 0;
 801628c:	2300      	movs	r3, #0
}
 801628e:	4618      	mov	r0, r3
 8016290:	370c      	adds	r7, #12
 8016292:	46bd      	mov	sp, r7
 8016294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016298:	4770      	bx	lr

0801629a <_isatty>:

int _isatty(int file)
{
 801629a:	b480      	push	{r7}
 801629c:	b083      	sub	sp, #12
 801629e:	af00      	add	r7, sp, #0
 80162a0:	6078      	str	r0, [r7, #4]
	return 1;
 80162a2:	2301      	movs	r3, #1
}
 80162a4:	4618      	mov	r0, r3
 80162a6:	370c      	adds	r7, #12
 80162a8:	46bd      	mov	sp, r7
 80162aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ae:	4770      	bx	lr

080162b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80162b0:	b480      	push	{r7}
 80162b2:	b085      	sub	sp, #20
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	60f8      	str	r0, [r7, #12]
 80162b8:	60b9      	str	r1, [r7, #8]
 80162ba:	607a      	str	r2, [r7, #4]
	return 0;
 80162bc:	2300      	movs	r3, #0
}
 80162be:	4618      	mov	r0, r3
 80162c0:	3714      	adds	r7, #20
 80162c2:	46bd      	mov	sp, r7
 80162c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c8:	4770      	bx	lr
	...

080162cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b086      	sub	sp, #24
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80162d4:	4a14      	ldr	r2, [pc, #80]	; (8016328 <_sbrk+0x5c>)
 80162d6:	4b15      	ldr	r3, [pc, #84]	; (801632c <_sbrk+0x60>)
 80162d8:	1ad3      	subs	r3, r2, r3
 80162da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80162dc:	697b      	ldr	r3, [r7, #20]
 80162de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80162e0:	4b13      	ldr	r3, [pc, #76]	; (8016330 <_sbrk+0x64>)
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d102      	bne.n	80162ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80162e8:	4b11      	ldr	r3, [pc, #68]	; (8016330 <_sbrk+0x64>)
 80162ea:	4a12      	ldr	r2, [pc, #72]	; (8016334 <_sbrk+0x68>)
 80162ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80162ee:	4b10      	ldr	r3, [pc, #64]	; (8016330 <_sbrk+0x64>)
 80162f0:	681a      	ldr	r2, [r3, #0]
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	4413      	add	r3, r2
 80162f6:	693a      	ldr	r2, [r7, #16]
 80162f8:	429a      	cmp	r2, r3
 80162fa:	d207      	bcs.n	801630c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80162fc:	f007 fc80 	bl	801dc00 <__errno>
 8016300:	4603      	mov	r3, r0
 8016302:	220c      	movs	r2, #12
 8016304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8016306:	f04f 33ff 	mov.w	r3, #4294967295
 801630a:	e009      	b.n	8016320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801630c:	4b08      	ldr	r3, [pc, #32]	; (8016330 <_sbrk+0x64>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8016312:	4b07      	ldr	r3, [pc, #28]	; (8016330 <_sbrk+0x64>)
 8016314:	681a      	ldr	r2, [r3, #0]
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	4413      	add	r3, r2
 801631a:	4a05      	ldr	r2, [pc, #20]	; (8016330 <_sbrk+0x64>)
 801631c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801631e:	68fb      	ldr	r3, [r7, #12]
}
 8016320:	4618      	mov	r0, r3
 8016322:	3718      	adds	r7, #24
 8016324:	46bd      	mov	sp, r7
 8016326:	bd80      	pop	{r7, pc}
 8016328:	20020000 	.word	0x20020000
 801632c:	00000400 	.word	0x00000400
 8016330:	2000078c 	.word	0x2000078c
 8016334:	200007a8 	.word	0x200007a8

08016338 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8016338:	b480      	push	{r7}
 801633a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801633c:	4b06      	ldr	r3, [pc, #24]	; (8016358 <SystemInit+0x20>)
 801633e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016342:	4a05      	ldr	r2, [pc, #20]	; (8016358 <SystemInit+0x20>)
 8016344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801634c:	bf00      	nop
 801634e:	46bd      	mov	sp, r7
 8016350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016354:	4770      	bx	lr
 8016356:	bf00      	nop
 8016358:	e000ed00 	.word	0xe000ed00

0801635c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 801635c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8016394 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8016360:	480d      	ldr	r0, [pc, #52]	; (8016398 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8016362:	490e      	ldr	r1, [pc, #56]	; (801639c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8016364:	4a0e      	ldr	r2, [pc, #56]	; (80163a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8016366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8016368:	e002      	b.n	8016370 <LoopCopyDataInit>

0801636a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801636a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801636c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801636e:	3304      	adds	r3, #4

08016370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8016370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8016372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8016374:	d3f9      	bcc.n	801636a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8016376:	4a0b      	ldr	r2, [pc, #44]	; (80163a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8016378:	4c0b      	ldr	r4, [pc, #44]	; (80163a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 801637a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801637c:	e001      	b.n	8016382 <LoopFillZerobss>

0801637e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801637e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8016380:	3204      	adds	r2, #4

08016382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8016382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8016384:	d3fb      	bcc.n	801637e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8016386:	f7ff ffd7 	bl	8016338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801638a:	f007 fc51 	bl	801dc30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801638e:	f7eb fb0f 	bl	80019b0 <main>
  bx  lr    
 8016392:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8016394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8016398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801639c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80163a0:	08029d58 	.word	0x08029d58
  ldr r2, =_sbss
 80163a4:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80163a8:	200007a4 	.word	0x200007a4

080163ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80163ac:	e7fe      	b.n	80163ac <ADC_IRQHandler>
	...

080163b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80163b4:	4b0e      	ldr	r3, [pc, #56]	; (80163f0 <HAL_Init+0x40>)
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	4a0d      	ldr	r2, [pc, #52]	; (80163f0 <HAL_Init+0x40>)
 80163ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80163be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80163c0:	4b0b      	ldr	r3, [pc, #44]	; (80163f0 <HAL_Init+0x40>)
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	4a0a      	ldr	r2, [pc, #40]	; (80163f0 <HAL_Init+0x40>)
 80163c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80163ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80163cc:	4b08      	ldr	r3, [pc, #32]	; (80163f0 <HAL_Init+0x40>)
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	4a07      	ldr	r2, [pc, #28]	; (80163f0 <HAL_Init+0x40>)
 80163d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80163d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80163d8:	2003      	movs	r0, #3
 80163da:	f000 f94f 	bl	801667c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80163de:	2000      	movs	r0, #0
 80163e0:	f000 f808 	bl	80163f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80163e4:	f7ff fc14 	bl	8015c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80163e8:	2300      	movs	r3, #0
}
 80163ea:	4618      	mov	r0, r3
 80163ec:	bd80      	pop	{r7, pc}
 80163ee:	bf00      	nop
 80163f0:	40023c00 	.word	0x40023c00

080163f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b082      	sub	sp, #8
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80163fc:	4b12      	ldr	r3, [pc, #72]	; (8016448 <HAL_InitTick+0x54>)
 80163fe:	681a      	ldr	r2, [r3, #0]
 8016400:	4b12      	ldr	r3, [pc, #72]	; (801644c <HAL_InitTick+0x58>)
 8016402:	781b      	ldrb	r3, [r3, #0]
 8016404:	4619      	mov	r1, r3
 8016406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801640a:	fbb3 f3f1 	udiv	r3, r3, r1
 801640e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016412:	4618      	mov	r0, r3
 8016414:	f000 f967 	bl	80166e6 <HAL_SYSTICK_Config>
 8016418:	4603      	mov	r3, r0
 801641a:	2b00      	cmp	r3, #0
 801641c:	d001      	beq.n	8016422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801641e:	2301      	movs	r3, #1
 8016420:	e00e      	b.n	8016440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	2b0f      	cmp	r3, #15
 8016426:	d80a      	bhi.n	801643e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8016428:	2200      	movs	r2, #0
 801642a:	6879      	ldr	r1, [r7, #4]
 801642c:	f04f 30ff 	mov.w	r0, #4294967295
 8016430:	f000 f92f 	bl	8016692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8016434:	4a06      	ldr	r2, [pc, #24]	; (8016450 <HAL_InitTick+0x5c>)
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801643a:	2300      	movs	r3, #0
 801643c:	e000      	b.n	8016440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801643e:	2301      	movs	r3, #1
}
 8016440:	4618      	mov	r0, r3
 8016442:	3708      	adds	r7, #8
 8016444:	46bd      	mov	sp, r7
 8016446:	bd80      	pop	{r7, pc}
 8016448:	2000018c 	.word	0x2000018c
 801644c:	20000194 	.word	0x20000194
 8016450:	20000190 	.word	0x20000190

08016454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8016454:	b480      	push	{r7}
 8016456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8016458:	4b06      	ldr	r3, [pc, #24]	; (8016474 <HAL_IncTick+0x20>)
 801645a:	781b      	ldrb	r3, [r3, #0]
 801645c:	461a      	mov	r2, r3
 801645e:	4b06      	ldr	r3, [pc, #24]	; (8016478 <HAL_IncTick+0x24>)
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	4413      	add	r3, r2
 8016464:	4a04      	ldr	r2, [pc, #16]	; (8016478 <HAL_IncTick+0x24>)
 8016466:	6013      	str	r3, [r2, #0]
}
 8016468:	bf00      	nop
 801646a:	46bd      	mov	sp, r7
 801646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016470:	4770      	bx	lr
 8016472:	bf00      	nop
 8016474:	20000194 	.word	0x20000194
 8016478:	20000790 	.word	0x20000790

0801647c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801647c:	b480      	push	{r7}
 801647e:	af00      	add	r7, sp, #0
  return uwTick;
 8016480:	4b03      	ldr	r3, [pc, #12]	; (8016490 <HAL_GetTick+0x14>)
 8016482:	681b      	ldr	r3, [r3, #0]
}
 8016484:	4618      	mov	r0, r3
 8016486:	46bd      	mov	sp, r7
 8016488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801648c:	4770      	bx	lr
 801648e:	bf00      	nop
 8016490:	20000790 	.word	0x20000790

08016494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b084      	sub	sp, #16
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801649c:	f7ff ffee 	bl	801647c <HAL_GetTick>
 80164a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164ac:	d005      	beq.n	80164ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80164ae:	4b0a      	ldr	r3, [pc, #40]	; (80164d8 <HAL_Delay+0x44>)
 80164b0:	781b      	ldrb	r3, [r3, #0]
 80164b2:	461a      	mov	r2, r3
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	4413      	add	r3, r2
 80164b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80164ba:	bf00      	nop
 80164bc:	f7ff ffde 	bl	801647c <HAL_GetTick>
 80164c0:	4602      	mov	r2, r0
 80164c2:	68bb      	ldr	r3, [r7, #8]
 80164c4:	1ad3      	subs	r3, r2, r3
 80164c6:	68fa      	ldr	r2, [r7, #12]
 80164c8:	429a      	cmp	r2, r3
 80164ca:	d8f7      	bhi.n	80164bc <HAL_Delay+0x28>
  {
  }
}
 80164cc:	bf00      	nop
 80164ce:	bf00      	nop
 80164d0:	3710      	adds	r7, #16
 80164d2:	46bd      	mov	sp, r7
 80164d4:	bd80      	pop	{r7, pc}
 80164d6:	bf00      	nop
 80164d8:	20000194 	.word	0x20000194

080164dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80164dc:	b480      	push	{r7}
 80164de:	b085      	sub	sp, #20
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	f003 0307 	and.w	r3, r3, #7
 80164ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80164ec:	4b0c      	ldr	r3, [pc, #48]	; (8016520 <__NVIC_SetPriorityGrouping+0x44>)
 80164ee:	68db      	ldr	r3, [r3, #12]
 80164f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80164f2:	68ba      	ldr	r2, [r7, #8]
 80164f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80164f8:	4013      	ands	r3, r2
 80164fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8016500:	68bb      	ldr	r3, [r7, #8]
 8016502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8016504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8016508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801650c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801650e:	4a04      	ldr	r2, [pc, #16]	; (8016520 <__NVIC_SetPriorityGrouping+0x44>)
 8016510:	68bb      	ldr	r3, [r7, #8]
 8016512:	60d3      	str	r3, [r2, #12]
}
 8016514:	bf00      	nop
 8016516:	3714      	adds	r7, #20
 8016518:	46bd      	mov	sp, r7
 801651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801651e:	4770      	bx	lr
 8016520:	e000ed00 	.word	0xe000ed00

08016524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8016524:	b480      	push	{r7}
 8016526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016528:	4b04      	ldr	r3, [pc, #16]	; (801653c <__NVIC_GetPriorityGrouping+0x18>)
 801652a:	68db      	ldr	r3, [r3, #12]
 801652c:	0a1b      	lsrs	r3, r3, #8
 801652e:	f003 0307 	and.w	r3, r3, #7
}
 8016532:	4618      	mov	r0, r3
 8016534:	46bd      	mov	sp, r7
 8016536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801653a:	4770      	bx	lr
 801653c:	e000ed00 	.word	0xe000ed00

08016540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016540:	b480      	push	{r7}
 8016542:	b083      	sub	sp, #12
 8016544:	af00      	add	r7, sp, #0
 8016546:	4603      	mov	r3, r0
 8016548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801654a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801654e:	2b00      	cmp	r3, #0
 8016550:	db0b      	blt.n	801656a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016552:	79fb      	ldrb	r3, [r7, #7]
 8016554:	f003 021f 	and.w	r2, r3, #31
 8016558:	4907      	ldr	r1, [pc, #28]	; (8016578 <__NVIC_EnableIRQ+0x38>)
 801655a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801655e:	095b      	lsrs	r3, r3, #5
 8016560:	2001      	movs	r0, #1
 8016562:	fa00 f202 	lsl.w	r2, r0, r2
 8016566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801656a:	bf00      	nop
 801656c:	370c      	adds	r7, #12
 801656e:	46bd      	mov	sp, r7
 8016570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016574:	4770      	bx	lr
 8016576:	bf00      	nop
 8016578:	e000e100 	.word	0xe000e100

0801657c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801657c:	b480      	push	{r7}
 801657e:	b083      	sub	sp, #12
 8016580:	af00      	add	r7, sp, #0
 8016582:	4603      	mov	r3, r0
 8016584:	6039      	str	r1, [r7, #0]
 8016586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801658c:	2b00      	cmp	r3, #0
 801658e:	db0a      	blt.n	80165a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016590:	683b      	ldr	r3, [r7, #0]
 8016592:	b2da      	uxtb	r2, r3
 8016594:	490c      	ldr	r1, [pc, #48]	; (80165c8 <__NVIC_SetPriority+0x4c>)
 8016596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801659a:	0112      	lsls	r2, r2, #4
 801659c:	b2d2      	uxtb	r2, r2
 801659e:	440b      	add	r3, r1
 80165a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80165a4:	e00a      	b.n	80165bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80165a6:	683b      	ldr	r3, [r7, #0]
 80165a8:	b2da      	uxtb	r2, r3
 80165aa:	4908      	ldr	r1, [pc, #32]	; (80165cc <__NVIC_SetPriority+0x50>)
 80165ac:	79fb      	ldrb	r3, [r7, #7]
 80165ae:	f003 030f 	and.w	r3, r3, #15
 80165b2:	3b04      	subs	r3, #4
 80165b4:	0112      	lsls	r2, r2, #4
 80165b6:	b2d2      	uxtb	r2, r2
 80165b8:	440b      	add	r3, r1
 80165ba:	761a      	strb	r2, [r3, #24]
}
 80165bc:	bf00      	nop
 80165be:	370c      	adds	r7, #12
 80165c0:	46bd      	mov	sp, r7
 80165c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c6:	4770      	bx	lr
 80165c8:	e000e100 	.word	0xe000e100
 80165cc:	e000ed00 	.word	0xe000ed00

080165d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80165d0:	b480      	push	{r7}
 80165d2:	b089      	sub	sp, #36	; 0x24
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	60f8      	str	r0, [r7, #12]
 80165d8:	60b9      	str	r1, [r7, #8]
 80165da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	f003 0307 	and.w	r3, r3, #7
 80165e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80165e4:	69fb      	ldr	r3, [r7, #28]
 80165e6:	f1c3 0307 	rsb	r3, r3, #7
 80165ea:	2b04      	cmp	r3, #4
 80165ec:	bf28      	it	cs
 80165ee:	2304      	movcs	r3, #4
 80165f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80165f2:	69fb      	ldr	r3, [r7, #28]
 80165f4:	3304      	adds	r3, #4
 80165f6:	2b06      	cmp	r3, #6
 80165f8:	d902      	bls.n	8016600 <NVIC_EncodePriority+0x30>
 80165fa:	69fb      	ldr	r3, [r7, #28]
 80165fc:	3b03      	subs	r3, #3
 80165fe:	e000      	b.n	8016602 <NVIC_EncodePriority+0x32>
 8016600:	2300      	movs	r3, #0
 8016602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016604:	f04f 32ff 	mov.w	r2, #4294967295
 8016608:	69bb      	ldr	r3, [r7, #24]
 801660a:	fa02 f303 	lsl.w	r3, r2, r3
 801660e:	43da      	mvns	r2, r3
 8016610:	68bb      	ldr	r3, [r7, #8]
 8016612:	401a      	ands	r2, r3
 8016614:	697b      	ldr	r3, [r7, #20]
 8016616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016618:	f04f 31ff 	mov.w	r1, #4294967295
 801661c:	697b      	ldr	r3, [r7, #20]
 801661e:	fa01 f303 	lsl.w	r3, r1, r3
 8016622:	43d9      	mvns	r1, r3
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016628:	4313      	orrs	r3, r2
         );
}
 801662a:	4618      	mov	r0, r3
 801662c:	3724      	adds	r7, #36	; 0x24
 801662e:	46bd      	mov	sp, r7
 8016630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016634:	4770      	bx	lr
	...

08016638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b082      	sub	sp, #8
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	3b01      	subs	r3, #1
 8016644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016648:	d301      	bcc.n	801664e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801664a:	2301      	movs	r3, #1
 801664c:	e00f      	b.n	801666e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801664e:	4a0a      	ldr	r2, [pc, #40]	; (8016678 <SysTick_Config+0x40>)
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	3b01      	subs	r3, #1
 8016654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8016656:	210f      	movs	r1, #15
 8016658:	f04f 30ff 	mov.w	r0, #4294967295
 801665c:	f7ff ff8e 	bl	801657c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8016660:	4b05      	ldr	r3, [pc, #20]	; (8016678 <SysTick_Config+0x40>)
 8016662:	2200      	movs	r2, #0
 8016664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8016666:	4b04      	ldr	r3, [pc, #16]	; (8016678 <SysTick_Config+0x40>)
 8016668:	2207      	movs	r2, #7
 801666a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801666c:	2300      	movs	r3, #0
}
 801666e:	4618      	mov	r0, r3
 8016670:	3708      	adds	r7, #8
 8016672:	46bd      	mov	sp, r7
 8016674:	bd80      	pop	{r7, pc}
 8016676:	bf00      	nop
 8016678:	e000e010 	.word	0xe000e010

0801667c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	b082      	sub	sp, #8
 8016680:	af00      	add	r7, sp, #0
 8016682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8016684:	6878      	ldr	r0, [r7, #4]
 8016686:	f7ff ff29 	bl	80164dc <__NVIC_SetPriorityGrouping>
}
 801668a:	bf00      	nop
 801668c:	3708      	adds	r7, #8
 801668e:	46bd      	mov	sp, r7
 8016690:	bd80      	pop	{r7, pc}

08016692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8016692:	b580      	push	{r7, lr}
 8016694:	b086      	sub	sp, #24
 8016696:	af00      	add	r7, sp, #0
 8016698:	4603      	mov	r3, r0
 801669a:	60b9      	str	r1, [r7, #8]
 801669c:	607a      	str	r2, [r7, #4]
 801669e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80166a0:	2300      	movs	r3, #0
 80166a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80166a4:	f7ff ff3e 	bl	8016524 <__NVIC_GetPriorityGrouping>
 80166a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80166aa:	687a      	ldr	r2, [r7, #4]
 80166ac:	68b9      	ldr	r1, [r7, #8]
 80166ae:	6978      	ldr	r0, [r7, #20]
 80166b0:	f7ff ff8e 	bl	80165d0 <NVIC_EncodePriority>
 80166b4:	4602      	mov	r2, r0
 80166b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80166ba:	4611      	mov	r1, r2
 80166bc:	4618      	mov	r0, r3
 80166be:	f7ff ff5d 	bl	801657c <__NVIC_SetPriority>
}
 80166c2:	bf00      	nop
 80166c4:	3718      	adds	r7, #24
 80166c6:	46bd      	mov	sp, r7
 80166c8:	bd80      	pop	{r7, pc}

080166ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80166ca:	b580      	push	{r7, lr}
 80166cc:	b082      	sub	sp, #8
 80166ce:	af00      	add	r7, sp, #0
 80166d0:	4603      	mov	r3, r0
 80166d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80166d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166d8:	4618      	mov	r0, r3
 80166da:	f7ff ff31 	bl	8016540 <__NVIC_EnableIRQ>
}
 80166de:	bf00      	nop
 80166e0:	3708      	adds	r7, #8
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bd80      	pop	{r7, pc}

080166e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80166e6:	b580      	push	{r7, lr}
 80166e8:	b082      	sub	sp, #8
 80166ea:	af00      	add	r7, sp, #0
 80166ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80166ee:	6878      	ldr	r0, [r7, #4]
 80166f0:	f7ff ffa2 	bl	8016638 <SysTick_Config>
 80166f4:	4603      	mov	r3, r0
}
 80166f6:	4618      	mov	r0, r3
 80166f8:	3708      	adds	r7, #8
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd80      	pop	{r7, pc}
	...

08016700 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b086      	sub	sp, #24
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8016708:	2300      	movs	r3, #0
 801670a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801670c:	f7ff feb6 	bl	801647c <HAL_GetTick>
 8016710:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	2b00      	cmp	r3, #0
 8016716:	d101      	bne.n	801671c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8016718:	2301      	movs	r3, #1
 801671a:	e099      	b.n	8016850 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	2202      	movs	r2, #2
 8016720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	2200      	movs	r2, #0
 8016728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	681a      	ldr	r2, [r3, #0]
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	f022 0201 	bic.w	r2, r2, #1
 801673a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801673c:	e00f      	b.n	801675e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801673e:	f7ff fe9d 	bl	801647c <HAL_GetTick>
 8016742:	4602      	mov	r2, r0
 8016744:	693b      	ldr	r3, [r7, #16]
 8016746:	1ad3      	subs	r3, r2, r3
 8016748:	2b05      	cmp	r3, #5
 801674a:	d908      	bls.n	801675e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	2220      	movs	r2, #32
 8016750:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	2203      	movs	r2, #3
 8016756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801675a:	2303      	movs	r3, #3
 801675c:	e078      	b.n	8016850 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	f003 0301 	and.w	r3, r3, #1
 8016768:	2b00      	cmp	r3, #0
 801676a:	d1e8      	bne.n	801673e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8016774:	697a      	ldr	r2, [r7, #20]
 8016776:	4b38      	ldr	r3, [pc, #224]	; (8016858 <HAL_DMA_Init+0x158>)
 8016778:	4013      	ands	r3, r2
 801677a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	685a      	ldr	r2, [r3, #4]
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	689b      	ldr	r3, [r3, #8]
 8016784:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801678a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	691b      	ldr	r3, [r3, #16]
 8016790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	699b      	ldr	r3, [r3, #24]
 801679c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80167a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	6a1b      	ldr	r3, [r3, #32]
 80167a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80167aa:	697a      	ldr	r2, [r7, #20]
 80167ac:	4313      	orrs	r3, r2
 80167ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167b4:	2b04      	cmp	r3, #4
 80167b6:	d107      	bne.n	80167c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167c0:	4313      	orrs	r3, r2
 80167c2:	697a      	ldr	r2, [r7, #20]
 80167c4:	4313      	orrs	r3, r2
 80167c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	697a      	ldr	r2, [r7, #20]
 80167ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	695b      	ldr	r3, [r3, #20]
 80167d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80167d8:	697b      	ldr	r3, [r7, #20]
 80167da:	f023 0307 	bic.w	r3, r3, #7
 80167de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167e4:	697a      	ldr	r2, [r7, #20]
 80167e6:	4313      	orrs	r3, r2
 80167e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167ee:	2b04      	cmp	r3, #4
 80167f0:	d117      	bne.n	8016822 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167f6:	697a      	ldr	r2, [r7, #20]
 80167f8:	4313      	orrs	r3, r2
 80167fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016800:	2b00      	cmp	r3, #0
 8016802:	d00e      	beq.n	8016822 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8016804:	6878      	ldr	r0, [r7, #4]
 8016806:	f000 fb0f 	bl	8016e28 <DMA_CheckFifoParam>
 801680a:	4603      	mov	r3, r0
 801680c:	2b00      	cmp	r3, #0
 801680e:	d008      	beq.n	8016822 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	2240      	movs	r2, #64	; 0x40
 8016814:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	2201      	movs	r2, #1
 801681a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801681e:	2301      	movs	r3, #1
 8016820:	e016      	b.n	8016850 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	697a      	ldr	r2, [r7, #20]
 8016828:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801682a:	6878      	ldr	r0, [r7, #4]
 801682c:	f000 fac6 	bl	8016dbc <DMA_CalcBaseAndBitshift>
 8016830:	4603      	mov	r3, r0
 8016832:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016838:	223f      	movs	r2, #63	; 0x3f
 801683a:	409a      	lsls	r2, r3
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	2200      	movs	r2, #0
 8016844:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	2201      	movs	r2, #1
 801684a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801684e:	2300      	movs	r3, #0
}
 8016850:	4618      	mov	r0, r3
 8016852:	3718      	adds	r7, #24
 8016854:	46bd      	mov	sp, r7
 8016856:	bd80      	pop	{r7, pc}
 8016858:	f010803f 	.word	0xf010803f

0801685c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801685c:	b580      	push	{r7, lr}
 801685e:	b086      	sub	sp, #24
 8016860:	af00      	add	r7, sp, #0
 8016862:	60f8      	str	r0, [r7, #12]
 8016864:	60b9      	str	r1, [r7, #8]
 8016866:	607a      	str	r2, [r7, #4]
 8016868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801686a:	2300      	movs	r3, #0
 801686c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016872:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801687a:	2b01      	cmp	r3, #1
 801687c:	d101      	bne.n	8016882 <HAL_DMA_Start_IT+0x26>
 801687e:	2302      	movs	r3, #2
 8016880:	e040      	b.n	8016904 <HAL_DMA_Start_IT+0xa8>
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	2201      	movs	r2, #1
 8016886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016890:	b2db      	uxtb	r3, r3
 8016892:	2b01      	cmp	r3, #1
 8016894:	d12f      	bne.n	80168f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	2202      	movs	r2, #2
 801689a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	2200      	movs	r2, #0
 80168a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80168a4:	683b      	ldr	r3, [r7, #0]
 80168a6:	687a      	ldr	r2, [r7, #4]
 80168a8:	68b9      	ldr	r1, [r7, #8]
 80168aa:	68f8      	ldr	r0, [r7, #12]
 80168ac:	f000 fa58 	bl	8016d60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80168b4:	223f      	movs	r2, #63	; 0x3f
 80168b6:	409a      	lsls	r2, r3
 80168b8:	693b      	ldr	r3, [r7, #16]
 80168ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	681a      	ldr	r2, [r3, #0]
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	f042 0216 	orr.w	r2, r2, #22
 80168ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d007      	beq.n	80168e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	681a      	ldr	r2, [r3, #0]
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	f042 0208 	orr.w	r2, r2, #8
 80168e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	681a      	ldr	r2, [r3, #0]
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	f042 0201 	orr.w	r2, r2, #1
 80168f2:	601a      	str	r2, [r3, #0]
 80168f4:	e005      	b.n	8016902 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	2200      	movs	r2, #0
 80168fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80168fe:	2302      	movs	r3, #2
 8016900:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8016902:	7dfb      	ldrb	r3, [r7, #23]
}
 8016904:	4618      	mov	r0, r3
 8016906:	3718      	adds	r7, #24
 8016908:	46bd      	mov	sp, r7
 801690a:	bd80      	pop	{r7, pc}

0801690c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b084      	sub	sp, #16
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016918:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801691a:	f7ff fdaf 	bl	801647c <HAL_GetTick>
 801691e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016926:	b2db      	uxtb	r3, r3
 8016928:	2b02      	cmp	r3, #2
 801692a:	d008      	beq.n	801693e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	2280      	movs	r2, #128	; 0x80
 8016930:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	2200      	movs	r2, #0
 8016936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801693a:	2301      	movs	r3, #1
 801693c:	e052      	b.n	80169e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	681a      	ldr	r2, [r3, #0]
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	f022 0216 	bic.w	r2, r2, #22
 801694c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	695a      	ldr	r2, [r3, #20]
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801695c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016962:	2b00      	cmp	r3, #0
 8016964:	d103      	bne.n	801696e <HAL_DMA_Abort+0x62>
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801696a:	2b00      	cmp	r3, #0
 801696c:	d007      	beq.n	801697e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	681a      	ldr	r2, [r3, #0]
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	f022 0208 	bic.w	r2, r2, #8
 801697c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	681a      	ldr	r2, [r3, #0]
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	f022 0201 	bic.w	r2, r2, #1
 801698c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801698e:	e013      	b.n	80169b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016990:	f7ff fd74 	bl	801647c <HAL_GetTick>
 8016994:	4602      	mov	r2, r0
 8016996:	68bb      	ldr	r3, [r7, #8]
 8016998:	1ad3      	subs	r3, r2, r3
 801699a:	2b05      	cmp	r3, #5
 801699c:	d90c      	bls.n	80169b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	2220      	movs	r2, #32
 80169a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	2203      	movs	r2, #3
 80169a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	2200      	movs	r2, #0
 80169b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80169b4:	2303      	movs	r3, #3
 80169b6:	e015      	b.n	80169e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	f003 0301 	and.w	r3, r3, #1
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d1e4      	bne.n	8016990 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80169ca:	223f      	movs	r2, #63	; 0x3f
 80169cc:	409a      	lsls	r2, r3
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	2201      	movs	r2, #1
 80169d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	2200      	movs	r2, #0
 80169de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80169e2:	2300      	movs	r3, #0
}
 80169e4:	4618      	mov	r0, r3
 80169e6:	3710      	adds	r7, #16
 80169e8:	46bd      	mov	sp, r7
 80169ea:	bd80      	pop	{r7, pc}

080169ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80169ec:	b480      	push	{r7}
 80169ee:	b083      	sub	sp, #12
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80169fa:	b2db      	uxtb	r3, r3
 80169fc:	2b02      	cmp	r3, #2
 80169fe:	d004      	beq.n	8016a0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	2280      	movs	r2, #128	; 0x80
 8016a04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8016a06:	2301      	movs	r3, #1
 8016a08:	e00c      	b.n	8016a24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	2205      	movs	r2, #5
 8016a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	681a      	ldr	r2, [r3, #0]
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	f022 0201 	bic.w	r2, r2, #1
 8016a20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8016a22:	2300      	movs	r3, #0
}
 8016a24:	4618      	mov	r0, r3
 8016a26:	370c      	adds	r7, #12
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a2e:	4770      	bx	lr

08016a30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b086      	sub	sp, #24
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8016a38:	2300      	movs	r3, #0
 8016a3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8016a3c:	4b8e      	ldr	r3, [pc, #568]	; (8016c78 <HAL_DMA_IRQHandler+0x248>)
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	4a8e      	ldr	r2, [pc, #568]	; (8016c7c <HAL_DMA_IRQHandler+0x24c>)
 8016a42:	fba2 2303 	umull	r2, r3, r2, r3
 8016a46:	0a9b      	lsrs	r3, r3, #10
 8016a48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016a4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8016a50:	693b      	ldr	r3, [r7, #16]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016a5a:	2208      	movs	r2, #8
 8016a5c:	409a      	lsls	r2, r3
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	4013      	ands	r3, r2
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d01a      	beq.n	8016a9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	f003 0304 	and.w	r3, r3, #4
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d013      	beq.n	8016a9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	681a      	ldr	r2, [r3, #0]
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	f022 0204 	bic.w	r2, r2, #4
 8016a82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016a88:	2208      	movs	r2, #8
 8016a8a:	409a      	lsls	r2, r3
 8016a8c:	693b      	ldr	r3, [r7, #16]
 8016a8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016a94:	f043 0201 	orr.w	r2, r3, #1
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016aa0:	2201      	movs	r2, #1
 8016aa2:	409a      	lsls	r2, r3
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	4013      	ands	r3, r2
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d012      	beq.n	8016ad2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	695b      	ldr	r3, [r3, #20]
 8016ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d00b      	beq.n	8016ad2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016abe:	2201      	movs	r2, #1
 8016ac0:	409a      	lsls	r2, r3
 8016ac2:	693b      	ldr	r3, [r7, #16]
 8016ac4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016aca:	f043 0202 	orr.w	r2, r3, #2
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ad6:	2204      	movs	r2, #4
 8016ad8:	409a      	lsls	r2, r3
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	4013      	ands	r3, r2
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d012      	beq.n	8016b08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	f003 0302 	and.w	r3, r3, #2
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d00b      	beq.n	8016b08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016af4:	2204      	movs	r2, #4
 8016af6:	409a      	lsls	r2, r3
 8016af8:	693b      	ldr	r3, [r7, #16]
 8016afa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016b00:	f043 0204 	orr.w	r2, r3, #4
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b0c:	2210      	movs	r2, #16
 8016b0e:	409a      	lsls	r2, r3
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	4013      	ands	r3, r2
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d043      	beq.n	8016ba0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	f003 0308 	and.w	r3, r3, #8
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d03c      	beq.n	8016ba0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b2a:	2210      	movs	r2, #16
 8016b2c:	409a      	lsls	r2, r3
 8016b2e:	693b      	ldr	r3, [r7, #16]
 8016b30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d018      	beq.n	8016b72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d108      	bne.n	8016b60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d024      	beq.n	8016ba0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b5a:	6878      	ldr	r0, [r7, #4]
 8016b5c:	4798      	blx	r3
 8016b5e:	e01f      	b.n	8016ba0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d01b      	beq.n	8016ba0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016b6c:	6878      	ldr	r0, [r7, #4]
 8016b6e:	4798      	blx	r3
 8016b70:	e016      	b.n	8016ba0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d107      	bne.n	8016b90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	681a      	ldr	r2, [r3, #0]
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	f022 0208 	bic.w	r2, r2, #8
 8016b8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d003      	beq.n	8016ba0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b9c:	6878      	ldr	r0, [r7, #4]
 8016b9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ba4:	2220      	movs	r2, #32
 8016ba6:	409a      	lsls	r2, r3
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	4013      	ands	r3, r2
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	f000 808f 	beq.w	8016cd0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	f003 0310 	and.w	r3, r3, #16
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	f000 8087 	beq.w	8016cd0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016bc6:	2220      	movs	r2, #32
 8016bc8:	409a      	lsls	r2, r3
 8016bca:	693b      	ldr	r3, [r7, #16]
 8016bcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016bd4:	b2db      	uxtb	r3, r3
 8016bd6:	2b05      	cmp	r3, #5
 8016bd8:	d136      	bne.n	8016c48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	681a      	ldr	r2, [r3, #0]
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	f022 0216 	bic.w	r2, r2, #22
 8016be8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	695a      	ldr	r2, [r3, #20]
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016bf8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d103      	bne.n	8016c0a <HAL_DMA_IRQHandler+0x1da>
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d007      	beq.n	8016c1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	681a      	ldr	r2, [r3, #0]
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	f022 0208 	bic.w	r2, r2, #8
 8016c18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016c1e:	223f      	movs	r2, #63	; 0x3f
 8016c20:	409a      	lsls	r2, r3
 8016c22:	693b      	ldr	r3, [r7, #16]
 8016c24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	2201      	movs	r2, #1
 8016c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	2200      	movs	r2, #0
 8016c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d07e      	beq.n	8016d3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c42:	6878      	ldr	r0, [r7, #4]
 8016c44:	4798      	blx	r3
        }
        return;
 8016c46:	e079      	b.n	8016d3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d01d      	beq.n	8016c92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d10d      	bne.n	8016c80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d031      	beq.n	8016cd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016c70:	6878      	ldr	r0, [r7, #4]
 8016c72:	4798      	blx	r3
 8016c74:	e02c      	b.n	8016cd0 <HAL_DMA_IRQHandler+0x2a0>
 8016c76:	bf00      	nop
 8016c78:	2000018c 	.word	0x2000018c
 8016c7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d023      	beq.n	8016cd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c8c:	6878      	ldr	r0, [r7, #4]
 8016c8e:	4798      	blx	r3
 8016c90:	e01e      	b.n	8016cd0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d10f      	bne.n	8016cc0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	681a      	ldr	r2, [r3, #0]
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	f022 0210 	bic.w	r2, r2, #16
 8016cae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	2201      	movs	r2, #1
 8016cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	2200      	movs	r2, #0
 8016cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d003      	beq.n	8016cd0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ccc:	6878      	ldr	r0, [r7, #4]
 8016cce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d032      	beq.n	8016d3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016cdc:	f003 0301 	and.w	r3, r3, #1
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d022      	beq.n	8016d2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	2205      	movs	r2, #5
 8016ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	681a      	ldr	r2, [r3, #0]
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	f022 0201 	bic.w	r2, r2, #1
 8016cfa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8016cfc:	68bb      	ldr	r3, [r7, #8]
 8016cfe:	3301      	adds	r3, #1
 8016d00:	60bb      	str	r3, [r7, #8]
 8016d02:	697a      	ldr	r2, [r7, #20]
 8016d04:	429a      	cmp	r2, r3
 8016d06:	d307      	bcc.n	8016d18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	f003 0301 	and.w	r3, r3, #1
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d1f2      	bne.n	8016cfc <HAL_DMA_IRQHandler+0x2cc>
 8016d16:	e000      	b.n	8016d1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8016d18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	2201      	movs	r2, #1
 8016d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	2200      	movs	r2, #0
 8016d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d005      	beq.n	8016d3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016d36:	6878      	ldr	r0, [r7, #4]
 8016d38:	4798      	blx	r3
 8016d3a:	e000      	b.n	8016d3e <HAL_DMA_IRQHandler+0x30e>
        return;
 8016d3c:	bf00      	nop
    }
  }
}
 8016d3e:	3718      	adds	r7, #24
 8016d40:	46bd      	mov	sp, r7
 8016d42:	bd80      	pop	{r7, pc}

08016d44 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8016d44:	b480      	push	{r7}
 8016d46:	b083      	sub	sp, #12
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016d52:	b2db      	uxtb	r3, r3
}
 8016d54:	4618      	mov	r0, r3
 8016d56:	370c      	adds	r7, #12
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d5e:	4770      	bx	lr

08016d60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016d60:	b480      	push	{r7}
 8016d62:	b085      	sub	sp, #20
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	60f8      	str	r0, [r7, #12]
 8016d68:	60b9      	str	r1, [r7, #8]
 8016d6a:	607a      	str	r2, [r7, #4]
 8016d6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	681a      	ldr	r2, [r3, #0]
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8016d7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	683a      	ldr	r2, [r7, #0]
 8016d84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	689b      	ldr	r3, [r3, #8]
 8016d8a:	2b40      	cmp	r3, #64	; 0x40
 8016d8c:	d108      	bne.n	8016da0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	687a      	ldr	r2, [r7, #4]
 8016d94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	68ba      	ldr	r2, [r7, #8]
 8016d9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8016d9e:	e007      	b.n	8016db0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	68ba      	ldr	r2, [r7, #8]
 8016da6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	687a      	ldr	r2, [r7, #4]
 8016dae:	60da      	str	r2, [r3, #12]
}
 8016db0:	bf00      	nop
 8016db2:	3714      	adds	r7, #20
 8016db4:	46bd      	mov	sp, r7
 8016db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dba:	4770      	bx	lr

08016dbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8016dbc:	b480      	push	{r7}
 8016dbe:	b085      	sub	sp, #20
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	b2db      	uxtb	r3, r3
 8016dca:	3b10      	subs	r3, #16
 8016dcc:	4a14      	ldr	r2, [pc, #80]	; (8016e20 <DMA_CalcBaseAndBitshift+0x64>)
 8016dce:	fba2 2303 	umull	r2, r3, r2, r3
 8016dd2:	091b      	lsrs	r3, r3, #4
 8016dd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8016dd6:	4a13      	ldr	r2, [pc, #76]	; (8016e24 <DMA_CalcBaseAndBitshift+0x68>)
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	4413      	add	r3, r2
 8016ddc:	781b      	ldrb	r3, [r3, #0]
 8016dde:	461a      	mov	r2, r3
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	2b03      	cmp	r3, #3
 8016de8:	d909      	bls.n	8016dfe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8016df2:	f023 0303 	bic.w	r3, r3, #3
 8016df6:	1d1a      	adds	r2, r3, #4
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	659a      	str	r2, [r3, #88]	; 0x58
 8016dfc:	e007      	b.n	8016e0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8016e06:	f023 0303 	bic.w	r3, r3, #3
 8016e0a:	687a      	ldr	r2, [r7, #4]
 8016e0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8016e12:	4618      	mov	r0, r3
 8016e14:	3714      	adds	r7, #20
 8016e16:	46bd      	mov	sp, r7
 8016e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1c:	4770      	bx	lr
 8016e1e:	bf00      	nop
 8016e20:	aaaaaaab 	.word	0xaaaaaaab
 8016e24:	08029c34 	.word	0x08029c34

08016e28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8016e28:	b480      	push	{r7}
 8016e2a:	b085      	sub	sp, #20
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016e30:	2300      	movs	r3, #0
 8016e32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	699b      	ldr	r3, [r3, #24]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d11f      	bne.n	8016e82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8016e42:	68bb      	ldr	r3, [r7, #8]
 8016e44:	2b03      	cmp	r3, #3
 8016e46:	d856      	bhi.n	8016ef6 <DMA_CheckFifoParam+0xce>
 8016e48:	a201      	add	r2, pc, #4	; (adr r2, 8016e50 <DMA_CheckFifoParam+0x28>)
 8016e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e4e:	bf00      	nop
 8016e50:	08016e61 	.word	0x08016e61
 8016e54:	08016e73 	.word	0x08016e73
 8016e58:	08016e61 	.word	0x08016e61
 8016e5c:	08016ef7 	.word	0x08016ef7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d046      	beq.n	8016efa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8016e6c:	2301      	movs	r3, #1
 8016e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016e70:	e043      	b.n	8016efa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8016e7a:	d140      	bne.n	8016efe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8016e7c:	2301      	movs	r3, #1
 8016e7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016e80:	e03d      	b.n	8016efe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	699b      	ldr	r3, [r3, #24]
 8016e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016e8a:	d121      	bne.n	8016ed0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8016e8c:	68bb      	ldr	r3, [r7, #8]
 8016e8e:	2b03      	cmp	r3, #3
 8016e90:	d837      	bhi.n	8016f02 <DMA_CheckFifoParam+0xda>
 8016e92:	a201      	add	r2, pc, #4	; (adr r2, 8016e98 <DMA_CheckFifoParam+0x70>)
 8016e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e98:	08016ea9 	.word	0x08016ea9
 8016e9c:	08016eaf 	.word	0x08016eaf
 8016ea0:	08016ea9 	.word	0x08016ea9
 8016ea4:	08016ec1 	.word	0x08016ec1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8016ea8:	2301      	movs	r3, #1
 8016eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8016eac:	e030      	b.n	8016f10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016eb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d025      	beq.n	8016f06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8016eba:	2301      	movs	r3, #1
 8016ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016ebe:	e022      	b.n	8016f06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ec4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8016ec8:	d11f      	bne.n	8016f0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8016eca:	2301      	movs	r3, #1
 8016ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8016ece:	e01c      	b.n	8016f0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8016ed0:	68bb      	ldr	r3, [r7, #8]
 8016ed2:	2b02      	cmp	r3, #2
 8016ed4:	d903      	bls.n	8016ede <DMA_CheckFifoParam+0xb6>
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	2b03      	cmp	r3, #3
 8016eda:	d003      	beq.n	8016ee4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8016edc:	e018      	b.n	8016f10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8016ede:	2301      	movs	r3, #1
 8016ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8016ee2:	e015      	b.n	8016f10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d00e      	beq.n	8016f0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8016ef0:	2301      	movs	r3, #1
 8016ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8016ef4:	e00b      	b.n	8016f0e <DMA_CheckFifoParam+0xe6>
      break;
 8016ef6:	bf00      	nop
 8016ef8:	e00a      	b.n	8016f10 <DMA_CheckFifoParam+0xe8>
      break;
 8016efa:	bf00      	nop
 8016efc:	e008      	b.n	8016f10 <DMA_CheckFifoParam+0xe8>
      break;
 8016efe:	bf00      	nop
 8016f00:	e006      	b.n	8016f10 <DMA_CheckFifoParam+0xe8>
      break;
 8016f02:	bf00      	nop
 8016f04:	e004      	b.n	8016f10 <DMA_CheckFifoParam+0xe8>
      break;
 8016f06:	bf00      	nop
 8016f08:	e002      	b.n	8016f10 <DMA_CheckFifoParam+0xe8>
      break;   
 8016f0a:	bf00      	nop
 8016f0c:	e000      	b.n	8016f10 <DMA_CheckFifoParam+0xe8>
      break;
 8016f0e:	bf00      	nop
    }
  } 
  
  return status; 
 8016f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f12:	4618      	mov	r0, r3
 8016f14:	3714      	adds	r7, #20
 8016f16:	46bd      	mov	sp, r7
 8016f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f1c:	4770      	bx	lr
 8016f1e:	bf00      	nop

08016f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8016f20:	b480      	push	{r7}
 8016f22:	b089      	sub	sp, #36	; 0x24
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
 8016f28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8016f2e:	2300      	movs	r3, #0
 8016f30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8016f32:	2300      	movs	r3, #0
 8016f34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016f36:	2300      	movs	r3, #0
 8016f38:	61fb      	str	r3, [r7, #28]
 8016f3a:	e159      	b.n	80171f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8016f3c:	2201      	movs	r2, #1
 8016f3e:	69fb      	ldr	r3, [r7, #28]
 8016f40:	fa02 f303 	lsl.w	r3, r2, r3
 8016f44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8016f46:	683b      	ldr	r3, [r7, #0]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	697a      	ldr	r2, [r7, #20]
 8016f4c:	4013      	ands	r3, r2
 8016f4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8016f50:	693a      	ldr	r2, [r7, #16]
 8016f52:	697b      	ldr	r3, [r7, #20]
 8016f54:	429a      	cmp	r2, r3
 8016f56:	f040 8148 	bne.w	80171ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016f5a:	683b      	ldr	r3, [r7, #0]
 8016f5c:	685b      	ldr	r3, [r3, #4]
 8016f5e:	f003 0303 	and.w	r3, r3, #3
 8016f62:	2b01      	cmp	r3, #1
 8016f64:	d005      	beq.n	8016f72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016f66:	683b      	ldr	r3, [r7, #0]
 8016f68:	685b      	ldr	r3, [r3, #4]
 8016f6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016f6e:	2b02      	cmp	r3, #2
 8016f70:	d130      	bne.n	8016fd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	689b      	ldr	r3, [r3, #8]
 8016f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016f78:	69fb      	ldr	r3, [r7, #28]
 8016f7a:	005b      	lsls	r3, r3, #1
 8016f7c:	2203      	movs	r2, #3
 8016f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8016f82:	43db      	mvns	r3, r3
 8016f84:	69ba      	ldr	r2, [r7, #24]
 8016f86:	4013      	ands	r3, r2
 8016f88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8016f8a:	683b      	ldr	r3, [r7, #0]
 8016f8c:	68da      	ldr	r2, [r3, #12]
 8016f8e:	69fb      	ldr	r3, [r7, #28]
 8016f90:	005b      	lsls	r3, r3, #1
 8016f92:	fa02 f303 	lsl.w	r3, r2, r3
 8016f96:	69ba      	ldr	r2, [r7, #24]
 8016f98:	4313      	orrs	r3, r2
 8016f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	69ba      	ldr	r2, [r7, #24]
 8016fa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	685b      	ldr	r3, [r3, #4]
 8016fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016fa8:	2201      	movs	r2, #1
 8016faa:	69fb      	ldr	r3, [r7, #28]
 8016fac:	fa02 f303 	lsl.w	r3, r2, r3
 8016fb0:	43db      	mvns	r3, r3
 8016fb2:	69ba      	ldr	r2, [r7, #24]
 8016fb4:	4013      	ands	r3, r2
 8016fb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8016fb8:	683b      	ldr	r3, [r7, #0]
 8016fba:	685b      	ldr	r3, [r3, #4]
 8016fbc:	091b      	lsrs	r3, r3, #4
 8016fbe:	f003 0201 	and.w	r2, r3, #1
 8016fc2:	69fb      	ldr	r3, [r7, #28]
 8016fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8016fc8:	69ba      	ldr	r2, [r7, #24]
 8016fca:	4313      	orrs	r3, r2
 8016fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	69ba      	ldr	r2, [r7, #24]
 8016fd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8016fd4:	683b      	ldr	r3, [r7, #0]
 8016fd6:	685b      	ldr	r3, [r3, #4]
 8016fd8:	f003 0303 	and.w	r3, r3, #3
 8016fdc:	2b03      	cmp	r3, #3
 8016fde:	d017      	beq.n	8017010 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	68db      	ldr	r3, [r3, #12]
 8016fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8016fe6:	69fb      	ldr	r3, [r7, #28]
 8016fe8:	005b      	lsls	r3, r3, #1
 8016fea:	2203      	movs	r2, #3
 8016fec:	fa02 f303 	lsl.w	r3, r2, r3
 8016ff0:	43db      	mvns	r3, r3
 8016ff2:	69ba      	ldr	r2, [r7, #24]
 8016ff4:	4013      	ands	r3, r2
 8016ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8016ff8:	683b      	ldr	r3, [r7, #0]
 8016ffa:	689a      	ldr	r2, [r3, #8]
 8016ffc:	69fb      	ldr	r3, [r7, #28]
 8016ffe:	005b      	lsls	r3, r3, #1
 8017000:	fa02 f303 	lsl.w	r3, r2, r3
 8017004:	69ba      	ldr	r2, [r7, #24]
 8017006:	4313      	orrs	r3, r2
 8017008:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	69ba      	ldr	r2, [r7, #24]
 801700e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8017010:	683b      	ldr	r3, [r7, #0]
 8017012:	685b      	ldr	r3, [r3, #4]
 8017014:	f003 0303 	and.w	r3, r3, #3
 8017018:	2b02      	cmp	r3, #2
 801701a:	d123      	bne.n	8017064 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801701c:	69fb      	ldr	r3, [r7, #28]
 801701e:	08da      	lsrs	r2, r3, #3
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	3208      	adds	r2, #8
 8017024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017028:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801702a:	69fb      	ldr	r3, [r7, #28]
 801702c:	f003 0307 	and.w	r3, r3, #7
 8017030:	009b      	lsls	r3, r3, #2
 8017032:	220f      	movs	r2, #15
 8017034:	fa02 f303 	lsl.w	r3, r2, r3
 8017038:	43db      	mvns	r3, r3
 801703a:	69ba      	ldr	r2, [r7, #24]
 801703c:	4013      	ands	r3, r2
 801703e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8017040:	683b      	ldr	r3, [r7, #0]
 8017042:	691a      	ldr	r2, [r3, #16]
 8017044:	69fb      	ldr	r3, [r7, #28]
 8017046:	f003 0307 	and.w	r3, r3, #7
 801704a:	009b      	lsls	r3, r3, #2
 801704c:	fa02 f303 	lsl.w	r3, r2, r3
 8017050:	69ba      	ldr	r2, [r7, #24]
 8017052:	4313      	orrs	r3, r2
 8017054:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8017056:	69fb      	ldr	r3, [r7, #28]
 8017058:	08da      	lsrs	r2, r3, #3
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	3208      	adds	r2, #8
 801705e:	69b9      	ldr	r1, [r7, #24]
 8017060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801706a:	69fb      	ldr	r3, [r7, #28]
 801706c:	005b      	lsls	r3, r3, #1
 801706e:	2203      	movs	r2, #3
 8017070:	fa02 f303 	lsl.w	r3, r2, r3
 8017074:	43db      	mvns	r3, r3
 8017076:	69ba      	ldr	r2, [r7, #24]
 8017078:	4013      	ands	r3, r2
 801707a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801707c:	683b      	ldr	r3, [r7, #0]
 801707e:	685b      	ldr	r3, [r3, #4]
 8017080:	f003 0203 	and.w	r2, r3, #3
 8017084:	69fb      	ldr	r3, [r7, #28]
 8017086:	005b      	lsls	r3, r3, #1
 8017088:	fa02 f303 	lsl.w	r3, r2, r3
 801708c:	69ba      	ldr	r2, [r7, #24]
 801708e:	4313      	orrs	r3, r2
 8017090:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	69ba      	ldr	r2, [r7, #24]
 8017096:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	685b      	ldr	r3, [r3, #4]
 801709c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	f000 80a2 	beq.w	80171ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80170a6:	2300      	movs	r3, #0
 80170a8:	60fb      	str	r3, [r7, #12]
 80170aa:	4b57      	ldr	r3, [pc, #348]	; (8017208 <HAL_GPIO_Init+0x2e8>)
 80170ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170ae:	4a56      	ldr	r2, [pc, #344]	; (8017208 <HAL_GPIO_Init+0x2e8>)
 80170b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80170b4:	6453      	str	r3, [r2, #68]	; 0x44
 80170b6:	4b54      	ldr	r3, [pc, #336]	; (8017208 <HAL_GPIO_Init+0x2e8>)
 80170b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80170be:	60fb      	str	r3, [r7, #12]
 80170c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80170c2:	4a52      	ldr	r2, [pc, #328]	; (801720c <HAL_GPIO_Init+0x2ec>)
 80170c4:	69fb      	ldr	r3, [r7, #28]
 80170c6:	089b      	lsrs	r3, r3, #2
 80170c8:	3302      	adds	r3, #2
 80170ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80170ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80170d0:	69fb      	ldr	r3, [r7, #28]
 80170d2:	f003 0303 	and.w	r3, r3, #3
 80170d6:	009b      	lsls	r3, r3, #2
 80170d8:	220f      	movs	r2, #15
 80170da:	fa02 f303 	lsl.w	r3, r2, r3
 80170de:	43db      	mvns	r3, r3
 80170e0:	69ba      	ldr	r2, [r7, #24]
 80170e2:	4013      	ands	r3, r2
 80170e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	4a49      	ldr	r2, [pc, #292]	; (8017210 <HAL_GPIO_Init+0x2f0>)
 80170ea:	4293      	cmp	r3, r2
 80170ec:	d019      	beq.n	8017122 <HAL_GPIO_Init+0x202>
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	4a48      	ldr	r2, [pc, #288]	; (8017214 <HAL_GPIO_Init+0x2f4>)
 80170f2:	4293      	cmp	r3, r2
 80170f4:	d013      	beq.n	801711e <HAL_GPIO_Init+0x1fe>
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	4a47      	ldr	r2, [pc, #284]	; (8017218 <HAL_GPIO_Init+0x2f8>)
 80170fa:	4293      	cmp	r3, r2
 80170fc:	d00d      	beq.n	801711a <HAL_GPIO_Init+0x1fa>
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	4a46      	ldr	r2, [pc, #280]	; (801721c <HAL_GPIO_Init+0x2fc>)
 8017102:	4293      	cmp	r3, r2
 8017104:	d007      	beq.n	8017116 <HAL_GPIO_Init+0x1f6>
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	4a45      	ldr	r2, [pc, #276]	; (8017220 <HAL_GPIO_Init+0x300>)
 801710a:	4293      	cmp	r3, r2
 801710c:	d101      	bne.n	8017112 <HAL_GPIO_Init+0x1f2>
 801710e:	2304      	movs	r3, #4
 8017110:	e008      	b.n	8017124 <HAL_GPIO_Init+0x204>
 8017112:	2307      	movs	r3, #7
 8017114:	e006      	b.n	8017124 <HAL_GPIO_Init+0x204>
 8017116:	2303      	movs	r3, #3
 8017118:	e004      	b.n	8017124 <HAL_GPIO_Init+0x204>
 801711a:	2302      	movs	r3, #2
 801711c:	e002      	b.n	8017124 <HAL_GPIO_Init+0x204>
 801711e:	2301      	movs	r3, #1
 8017120:	e000      	b.n	8017124 <HAL_GPIO_Init+0x204>
 8017122:	2300      	movs	r3, #0
 8017124:	69fa      	ldr	r2, [r7, #28]
 8017126:	f002 0203 	and.w	r2, r2, #3
 801712a:	0092      	lsls	r2, r2, #2
 801712c:	4093      	lsls	r3, r2
 801712e:	69ba      	ldr	r2, [r7, #24]
 8017130:	4313      	orrs	r3, r2
 8017132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8017134:	4935      	ldr	r1, [pc, #212]	; (801720c <HAL_GPIO_Init+0x2ec>)
 8017136:	69fb      	ldr	r3, [r7, #28]
 8017138:	089b      	lsrs	r3, r3, #2
 801713a:	3302      	adds	r3, #2
 801713c:	69ba      	ldr	r2, [r7, #24]
 801713e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8017142:	4b38      	ldr	r3, [pc, #224]	; (8017224 <HAL_GPIO_Init+0x304>)
 8017144:	689b      	ldr	r3, [r3, #8]
 8017146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017148:	693b      	ldr	r3, [r7, #16]
 801714a:	43db      	mvns	r3, r3
 801714c:	69ba      	ldr	r2, [r7, #24]
 801714e:	4013      	ands	r3, r2
 8017150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8017152:	683b      	ldr	r3, [r7, #0]
 8017154:	685b      	ldr	r3, [r3, #4]
 8017156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801715a:	2b00      	cmp	r3, #0
 801715c:	d003      	beq.n	8017166 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801715e:	69ba      	ldr	r2, [r7, #24]
 8017160:	693b      	ldr	r3, [r7, #16]
 8017162:	4313      	orrs	r3, r2
 8017164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8017166:	4a2f      	ldr	r2, [pc, #188]	; (8017224 <HAL_GPIO_Init+0x304>)
 8017168:	69bb      	ldr	r3, [r7, #24]
 801716a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801716c:	4b2d      	ldr	r3, [pc, #180]	; (8017224 <HAL_GPIO_Init+0x304>)
 801716e:	68db      	ldr	r3, [r3, #12]
 8017170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017172:	693b      	ldr	r3, [r7, #16]
 8017174:	43db      	mvns	r3, r3
 8017176:	69ba      	ldr	r2, [r7, #24]
 8017178:	4013      	ands	r3, r2
 801717a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801717c:	683b      	ldr	r3, [r7, #0]
 801717e:	685b      	ldr	r3, [r3, #4]
 8017180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017184:	2b00      	cmp	r3, #0
 8017186:	d003      	beq.n	8017190 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8017188:	69ba      	ldr	r2, [r7, #24]
 801718a:	693b      	ldr	r3, [r7, #16]
 801718c:	4313      	orrs	r3, r2
 801718e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8017190:	4a24      	ldr	r2, [pc, #144]	; (8017224 <HAL_GPIO_Init+0x304>)
 8017192:	69bb      	ldr	r3, [r7, #24]
 8017194:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8017196:	4b23      	ldr	r3, [pc, #140]	; (8017224 <HAL_GPIO_Init+0x304>)
 8017198:	685b      	ldr	r3, [r3, #4]
 801719a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801719c:	693b      	ldr	r3, [r7, #16]
 801719e:	43db      	mvns	r3, r3
 80171a0:	69ba      	ldr	r2, [r7, #24]
 80171a2:	4013      	ands	r3, r2
 80171a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80171a6:	683b      	ldr	r3, [r7, #0]
 80171a8:	685b      	ldr	r3, [r3, #4]
 80171aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d003      	beq.n	80171ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80171b2:	69ba      	ldr	r2, [r7, #24]
 80171b4:	693b      	ldr	r3, [r7, #16]
 80171b6:	4313      	orrs	r3, r2
 80171b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80171ba:	4a1a      	ldr	r2, [pc, #104]	; (8017224 <HAL_GPIO_Init+0x304>)
 80171bc:	69bb      	ldr	r3, [r7, #24]
 80171be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80171c0:	4b18      	ldr	r3, [pc, #96]	; (8017224 <HAL_GPIO_Init+0x304>)
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80171c6:	693b      	ldr	r3, [r7, #16]
 80171c8:	43db      	mvns	r3, r3
 80171ca:	69ba      	ldr	r2, [r7, #24]
 80171cc:	4013      	ands	r3, r2
 80171ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80171d0:	683b      	ldr	r3, [r7, #0]
 80171d2:	685b      	ldr	r3, [r3, #4]
 80171d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d003      	beq.n	80171e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80171dc:	69ba      	ldr	r2, [r7, #24]
 80171de:	693b      	ldr	r3, [r7, #16]
 80171e0:	4313      	orrs	r3, r2
 80171e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80171e4:	4a0f      	ldr	r2, [pc, #60]	; (8017224 <HAL_GPIO_Init+0x304>)
 80171e6:	69bb      	ldr	r3, [r7, #24]
 80171e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80171ea:	69fb      	ldr	r3, [r7, #28]
 80171ec:	3301      	adds	r3, #1
 80171ee:	61fb      	str	r3, [r7, #28]
 80171f0:	69fb      	ldr	r3, [r7, #28]
 80171f2:	2b0f      	cmp	r3, #15
 80171f4:	f67f aea2 	bls.w	8016f3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80171f8:	bf00      	nop
 80171fa:	bf00      	nop
 80171fc:	3724      	adds	r7, #36	; 0x24
 80171fe:	46bd      	mov	sp, r7
 8017200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017204:	4770      	bx	lr
 8017206:	bf00      	nop
 8017208:	40023800 	.word	0x40023800
 801720c:	40013800 	.word	0x40013800
 8017210:	40020000 	.word	0x40020000
 8017214:	40020400 	.word	0x40020400
 8017218:	40020800 	.word	0x40020800
 801721c:	40020c00 	.word	0x40020c00
 8017220:	40021000 	.word	0x40021000
 8017224:	40013c00 	.word	0x40013c00

08017228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017228:	b480      	push	{r7}
 801722a:	b085      	sub	sp, #20
 801722c:	af00      	add	r7, sp, #0
 801722e:	6078      	str	r0, [r7, #4]
 8017230:	460b      	mov	r3, r1
 8017232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	691a      	ldr	r2, [r3, #16]
 8017238:	887b      	ldrh	r3, [r7, #2]
 801723a:	4013      	ands	r3, r2
 801723c:	2b00      	cmp	r3, #0
 801723e:	d002      	beq.n	8017246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8017240:	2301      	movs	r3, #1
 8017242:	73fb      	strb	r3, [r7, #15]
 8017244:	e001      	b.n	801724a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8017246:	2300      	movs	r3, #0
 8017248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801724a:	7bfb      	ldrb	r3, [r7, #15]
}
 801724c:	4618      	mov	r0, r3
 801724e:	3714      	adds	r7, #20
 8017250:	46bd      	mov	sp, r7
 8017252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017256:	4770      	bx	lr

08017258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8017258:	b480      	push	{r7}
 801725a:	b083      	sub	sp, #12
 801725c:	af00      	add	r7, sp, #0
 801725e:	6078      	str	r0, [r7, #4]
 8017260:	460b      	mov	r3, r1
 8017262:	807b      	strh	r3, [r7, #2]
 8017264:	4613      	mov	r3, r2
 8017266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8017268:	787b      	ldrb	r3, [r7, #1]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d003      	beq.n	8017276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801726e:	887a      	ldrh	r2, [r7, #2]
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8017274:	e003      	b.n	801727e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8017276:	887b      	ldrh	r3, [r7, #2]
 8017278:	041a      	lsls	r2, r3, #16
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	619a      	str	r2, [r3, #24]
}
 801727e:	bf00      	nop
 8017280:	370c      	adds	r7, #12
 8017282:	46bd      	mov	sp, r7
 8017284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017288:	4770      	bx	lr
	...

0801728c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b082      	sub	sp, #8
 8017290:	af00      	add	r7, sp, #0
 8017292:	4603      	mov	r3, r0
 8017294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8017296:	4b08      	ldr	r3, [pc, #32]	; (80172b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017298:	695a      	ldr	r2, [r3, #20]
 801729a:	88fb      	ldrh	r3, [r7, #6]
 801729c:	4013      	ands	r3, r2
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d006      	beq.n	80172b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80172a2:	4a05      	ldr	r2, [pc, #20]	; (80172b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80172a4:	88fb      	ldrh	r3, [r7, #6]
 80172a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80172a8:	88fb      	ldrh	r3, [r7, #6]
 80172aa:	4618      	mov	r0, r3
 80172ac:	f7ec fd94 	bl	8003dd8 <HAL_GPIO_EXTI_Callback>
  }
}
 80172b0:	bf00      	nop
 80172b2:	3708      	adds	r7, #8
 80172b4:	46bd      	mov	sp, r7
 80172b6:	bd80      	pop	{r7, pc}
 80172b8:	40013c00 	.word	0x40013c00

080172bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b084      	sub	sp, #16
 80172c0:	af00      	add	r7, sp, #0
 80172c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d101      	bne.n	80172ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80172ca:	2301      	movs	r3, #1
 80172cc:	e12b      	b.n	8017526 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80172d4:	b2db      	uxtb	r3, r3
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d106      	bne.n	80172e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	2200      	movs	r2, #0
 80172de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80172e2:	6878      	ldr	r0, [r7, #4]
 80172e4:	f7fe fcbc 	bl	8015c60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2224      	movs	r2, #36	; 0x24
 80172ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	681a      	ldr	r2, [r3, #0]
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	f022 0201 	bic.w	r2, r2, #1
 80172fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	681a      	ldr	r2, [r3, #0]
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801730e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	681a      	ldr	r2, [r3, #0]
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801731e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8017320:	f003 fa9a 	bl	801a858 <HAL_RCC_GetPCLK1Freq>
 8017324:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	685b      	ldr	r3, [r3, #4]
 801732a:	4a81      	ldr	r2, [pc, #516]	; (8017530 <HAL_I2C_Init+0x274>)
 801732c:	4293      	cmp	r3, r2
 801732e:	d807      	bhi.n	8017340 <HAL_I2C_Init+0x84>
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	4a80      	ldr	r2, [pc, #512]	; (8017534 <HAL_I2C_Init+0x278>)
 8017334:	4293      	cmp	r3, r2
 8017336:	bf94      	ite	ls
 8017338:	2301      	movls	r3, #1
 801733a:	2300      	movhi	r3, #0
 801733c:	b2db      	uxtb	r3, r3
 801733e:	e006      	b.n	801734e <HAL_I2C_Init+0x92>
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	4a7d      	ldr	r2, [pc, #500]	; (8017538 <HAL_I2C_Init+0x27c>)
 8017344:	4293      	cmp	r3, r2
 8017346:	bf94      	ite	ls
 8017348:	2301      	movls	r3, #1
 801734a:	2300      	movhi	r3, #0
 801734c:	b2db      	uxtb	r3, r3
 801734e:	2b00      	cmp	r3, #0
 8017350:	d001      	beq.n	8017356 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8017352:	2301      	movs	r3, #1
 8017354:	e0e7      	b.n	8017526 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	4a78      	ldr	r2, [pc, #480]	; (801753c <HAL_I2C_Init+0x280>)
 801735a:	fba2 2303 	umull	r2, r3, r2, r3
 801735e:	0c9b      	lsrs	r3, r3, #18
 8017360:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	685b      	ldr	r3, [r3, #4]
 8017368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	68ba      	ldr	r2, [r7, #8]
 8017372:	430a      	orrs	r2, r1
 8017374:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	6a1b      	ldr	r3, [r3, #32]
 801737c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	685b      	ldr	r3, [r3, #4]
 8017384:	4a6a      	ldr	r2, [pc, #424]	; (8017530 <HAL_I2C_Init+0x274>)
 8017386:	4293      	cmp	r3, r2
 8017388:	d802      	bhi.n	8017390 <HAL_I2C_Init+0xd4>
 801738a:	68bb      	ldr	r3, [r7, #8]
 801738c:	3301      	adds	r3, #1
 801738e:	e009      	b.n	80173a4 <HAL_I2C_Init+0xe8>
 8017390:	68bb      	ldr	r3, [r7, #8]
 8017392:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8017396:	fb02 f303 	mul.w	r3, r2, r3
 801739a:	4a69      	ldr	r2, [pc, #420]	; (8017540 <HAL_I2C_Init+0x284>)
 801739c:	fba2 2303 	umull	r2, r3, r2, r3
 80173a0:	099b      	lsrs	r3, r3, #6
 80173a2:	3301      	adds	r3, #1
 80173a4:	687a      	ldr	r2, [r7, #4]
 80173a6:	6812      	ldr	r2, [r2, #0]
 80173a8:	430b      	orrs	r3, r1
 80173aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	69db      	ldr	r3, [r3, #28]
 80173b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80173b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	685b      	ldr	r3, [r3, #4]
 80173be:	495c      	ldr	r1, [pc, #368]	; (8017530 <HAL_I2C_Init+0x274>)
 80173c0:	428b      	cmp	r3, r1
 80173c2:	d819      	bhi.n	80173f8 <HAL_I2C_Init+0x13c>
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	1e59      	subs	r1, r3, #1
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	685b      	ldr	r3, [r3, #4]
 80173cc:	005b      	lsls	r3, r3, #1
 80173ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80173d2:	1c59      	adds	r1, r3, #1
 80173d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80173d8:	400b      	ands	r3, r1
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d00a      	beq.n	80173f4 <HAL_I2C_Init+0x138>
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	1e59      	subs	r1, r3, #1
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	685b      	ldr	r3, [r3, #4]
 80173e6:	005b      	lsls	r3, r3, #1
 80173e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80173ec:	3301      	adds	r3, #1
 80173ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80173f2:	e051      	b.n	8017498 <HAL_I2C_Init+0x1dc>
 80173f4:	2304      	movs	r3, #4
 80173f6:	e04f      	b.n	8017498 <HAL_I2C_Init+0x1dc>
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	689b      	ldr	r3, [r3, #8]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d111      	bne.n	8017424 <HAL_I2C_Init+0x168>
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	1e58      	subs	r0, r3, #1
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	6859      	ldr	r1, [r3, #4]
 8017408:	460b      	mov	r3, r1
 801740a:	005b      	lsls	r3, r3, #1
 801740c:	440b      	add	r3, r1
 801740e:	fbb0 f3f3 	udiv	r3, r0, r3
 8017412:	3301      	adds	r3, #1
 8017414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017418:	2b00      	cmp	r3, #0
 801741a:	bf0c      	ite	eq
 801741c:	2301      	moveq	r3, #1
 801741e:	2300      	movne	r3, #0
 8017420:	b2db      	uxtb	r3, r3
 8017422:	e012      	b.n	801744a <HAL_I2C_Init+0x18e>
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	1e58      	subs	r0, r3, #1
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	6859      	ldr	r1, [r3, #4]
 801742c:	460b      	mov	r3, r1
 801742e:	009b      	lsls	r3, r3, #2
 8017430:	440b      	add	r3, r1
 8017432:	0099      	lsls	r1, r3, #2
 8017434:	440b      	add	r3, r1
 8017436:	fbb0 f3f3 	udiv	r3, r0, r3
 801743a:	3301      	adds	r3, #1
 801743c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017440:	2b00      	cmp	r3, #0
 8017442:	bf0c      	ite	eq
 8017444:	2301      	moveq	r3, #1
 8017446:	2300      	movne	r3, #0
 8017448:	b2db      	uxtb	r3, r3
 801744a:	2b00      	cmp	r3, #0
 801744c:	d001      	beq.n	8017452 <HAL_I2C_Init+0x196>
 801744e:	2301      	movs	r3, #1
 8017450:	e022      	b.n	8017498 <HAL_I2C_Init+0x1dc>
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	689b      	ldr	r3, [r3, #8]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d10e      	bne.n	8017478 <HAL_I2C_Init+0x1bc>
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	1e58      	subs	r0, r3, #1
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	6859      	ldr	r1, [r3, #4]
 8017462:	460b      	mov	r3, r1
 8017464:	005b      	lsls	r3, r3, #1
 8017466:	440b      	add	r3, r1
 8017468:	fbb0 f3f3 	udiv	r3, r0, r3
 801746c:	3301      	adds	r3, #1
 801746e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017476:	e00f      	b.n	8017498 <HAL_I2C_Init+0x1dc>
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	1e58      	subs	r0, r3, #1
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	6859      	ldr	r1, [r3, #4]
 8017480:	460b      	mov	r3, r1
 8017482:	009b      	lsls	r3, r3, #2
 8017484:	440b      	add	r3, r1
 8017486:	0099      	lsls	r1, r3, #2
 8017488:	440b      	add	r3, r1
 801748a:	fbb0 f3f3 	udiv	r3, r0, r3
 801748e:	3301      	adds	r3, #1
 8017490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017498:	6879      	ldr	r1, [r7, #4]
 801749a:	6809      	ldr	r1, [r1, #0]
 801749c:	4313      	orrs	r3, r2
 801749e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	69da      	ldr	r2, [r3, #28]
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	6a1b      	ldr	r3, [r3, #32]
 80174b2:	431a      	orrs	r2, r3
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	430a      	orrs	r2, r1
 80174ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	689b      	ldr	r3, [r3, #8]
 80174c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80174c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80174ca:	687a      	ldr	r2, [r7, #4]
 80174cc:	6911      	ldr	r1, [r2, #16]
 80174ce:	687a      	ldr	r2, [r7, #4]
 80174d0:	68d2      	ldr	r2, [r2, #12]
 80174d2:	4311      	orrs	r1, r2
 80174d4:	687a      	ldr	r2, [r7, #4]
 80174d6:	6812      	ldr	r2, [r2, #0]
 80174d8:	430b      	orrs	r3, r1
 80174da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	68db      	ldr	r3, [r3, #12]
 80174e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	695a      	ldr	r2, [r3, #20]
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	699b      	ldr	r3, [r3, #24]
 80174ee:	431a      	orrs	r2, r3
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	430a      	orrs	r2, r1
 80174f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	681a      	ldr	r2, [r3, #0]
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	f042 0201 	orr.w	r2, r2, #1
 8017506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	2200      	movs	r2, #0
 801750c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	2220      	movs	r2, #32
 8017512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	2200      	movs	r2, #0
 801751a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	2200      	movs	r2, #0
 8017520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8017524:	2300      	movs	r3, #0
}
 8017526:	4618      	mov	r0, r3
 8017528:	3710      	adds	r7, #16
 801752a:	46bd      	mov	sp, r7
 801752c:	bd80      	pop	{r7, pc}
 801752e:	bf00      	nop
 8017530:	000186a0 	.word	0x000186a0
 8017534:	001e847f 	.word	0x001e847f
 8017538:	003d08ff 	.word	0x003d08ff
 801753c:	431bde83 	.word	0x431bde83
 8017540:	10624dd3 	.word	0x10624dd3

08017544 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b088      	sub	sp, #32
 8017548:	af02      	add	r7, sp, #8
 801754a:	60f8      	str	r0, [r7, #12]
 801754c:	4608      	mov	r0, r1
 801754e:	4611      	mov	r1, r2
 8017550:	461a      	mov	r2, r3
 8017552:	4603      	mov	r3, r0
 8017554:	817b      	strh	r3, [r7, #10]
 8017556:	460b      	mov	r3, r1
 8017558:	813b      	strh	r3, [r7, #8]
 801755a:	4613      	mov	r3, r2
 801755c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801755e:	f7fe ff8d 	bl	801647c <HAL_GetTick>
 8017562:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801756a:	b2db      	uxtb	r3, r3
 801756c:	2b20      	cmp	r3, #32
 801756e:	f040 80d9 	bne.w	8017724 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017572:	697b      	ldr	r3, [r7, #20]
 8017574:	9300      	str	r3, [sp, #0]
 8017576:	2319      	movs	r3, #25
 8017578:	2201      	movs	r2, #1
 801757a:	496d      	ldr	r1, [pc, #436]	; (8017730 <HAL_I2C_Mem_Write+0x1ec>)
 801757c:	68f8      	ldr	r0, [r7, #12]
 801757e:	f002 fad1 	bl	8019b24 <I2C_WaitOnFlagUntilTimeout>
 8017582:	4603      	mov	r3, r0
 8017584:	2b00      	cmp	r3, #0
 8017586:	d001      	beq.n	801758c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8017588:	2302      	movs	r3, #2
 801758a:	e0cc      	b.n	8017726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017592:	2b01      	cmp	r3, #1
 8017594:	d101      	bne.n	801759a <HAL_I2C_Mem_Write+0x56>
 8017596:	2302      	movs	r3, #2
 8017598:	e0c5      	b.n	8017726 <HAL_I2C_Mem_Write+0x1e2>
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	2201      	movs	r2, #1
 801759e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	f003 0301 	and.w	r3, r3, #1
 80175ac:	2b01      	cmp	r3, #1
 80175ae:	d007      	beq.n	80175c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	681a      	ldr	r2, [r3, #0]
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	f042 0201 	orr.w	r2, r2, #1
 80175be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	681a      	ldr	r2, [r3, #0]
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80175ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	2221      	movs	r2, #33	; 0x21
 80175d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	2240      	movs	r2, #64	; 0x40
 80175dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	2200      	movs	r2, #0
 80175e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	6a3a      	ldr	r2, [r7, #32]
 80175ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80175f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80175f6:	b29a      	uxth	r2, r3
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	4a4d      	ldr	r2, [pc, #308]	; (8017734 <HAL_I2C_Mem_Write+0x1f0>)
 8017600:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8017602:	88f8      	ldrh	r0, [r7, #6]
 8017604:	893a      	ldrh	r2, [r7, #8]
 8017606:	8979      	ldrh	r1, [r7, #10]
 8017608:	697b      	ldr	r3, [r7, #20]
 801760a:	9301      	str	r3, [sp, #4]
 801760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801760e:	9300      	str	r3, [sp, #0]
 8017610:	4603      	mov	r3, r0
 8017612:	68f8      	ldr	r0, [r7, #12]
 8017614:	f002 f860 	bl	80196d8 <I2C_RequestMemoryWrite>
 8017618:	4603      	mov	r3, r0
 801761a:	2b00      	cmp	r3, #0
 801761c:	d052      	beq.n	80176c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 801761e:	2301      	movs	r3, #1
 8017620:	e081      	b.n	8017726 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017622:	697a      	ldr	r2, [r7, #20]
 8017624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017626:	68f8      	ldr	r0, [r7, #12]
 8017628:	f002 fb52 	bl	8019cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 801762c:	4603      	mov	r3, r0
 801762e:	2b00      	cmp	r3, #0
 8017630:	d00d      	beq.n	801764e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017636:	2b04      	cmp	r3, #4
 8017638:	d107      	bne.n	801764a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	681a      	ldr	r2, [r3, #0]
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017648:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801764a:	2301      	movs	r3, #1
 801764c:	e06b      	b.n	8017726 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017652:	781a      	ldrb	r2, [r3, #0]
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801765e:	1c5a      	adds	r2, r3, #1
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017668:	3b01      	subs	r3, #1
 801766a:	b29a      	uxth	r2, r3
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017674:	b29b      	uxth	r3, r3
 8017676:	3b01      	subs	r3, #1
 8017678:	b29a      	uxth	r2, r3
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	695b      	ldr	r3, [r3, #20]
 8017684:	f003 0304 	and.w	r3, r3, #4
 8017688:	2b04      	cmp	r3, #4
 801768a:	d11b      	bne.n	80176c4 <HAL_I2C_Mem_Write+0x180>
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017690:	2b00      	cmp	r3, #0
 8017692:	d017      	beq.n	80176c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017698:	781a      	ldrb	r2, [r3, #0]
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176a4:	1c5a      	adds	r2, r3, #1
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176ae:	3b01      	subs	r3, #1
 80176b0:	b29a      	uxth	r2, r3
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80176ba:	b29b      	uxth	r3, r3
 80176bc:	3b01      	subs	r3, #1
 80176be:	b29a      	uxth	r2, r3
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d1aa      	bne.n	8017622 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80176cc:	697a      	ldr	r2, [r7, #20]
 80176ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80176d0:	68f8      	ldr	r0, [r7, #12]
 80176d2:	f002 fb3e 	bl	8019d52 <I2C_WaitOnBTFFlagUntilTimeout>
 80176d6:	4603      	mov	r3, r0
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d00d      	beq.n	80176f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176e0:	2b04      	cmp	r3, #4
 80176e2:	d107      	bne.n	80176f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	681a      	ldr	r2, [r3, #0]
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80176f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80176f4:	2301      	movs	r3, #1
 80176f6:	e016      	b.n	8017726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	681a      	ldr	r2, [r3, #0]
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	2220      	movs	r2, #32
 801770c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017710:	68fb      	ldr	r3, [r7, #12]
 8017712:	2200      	movs	r2, #0
 8017714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	2200      	movs	r2, #0
 801771c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8017720:	2300      	movs	r3, #0
 8017722:	e000      	b.n	8017726 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8017724:	2302      	movs	r3, #2
  }
}
 8017726:	4618      	mov	r0, r3
 8017728:	3718      	adds	r7, #24
 801772a:	46bd      	mov	sp, r7
 801772c:	bd80      	pop	{r7, pc}
 801772e:	bf00      	nop
 8017730:	00100002 	.word	0x00100002
 8017734:	ffff0000 	.word	0xffff0000

08017738 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017738:	b580      	push	{r7, lr}
 801773a:	b08c      	sub	sp, #48	; 0x30
 801773c:	af02      	add	r7, sp, #8
 801773e:	60f8      	str	r0, [r7, #12]
 8017740:	4608      	mov	r0, r1
 8017742:	4611      	mov	r1, r2
 8017744:	461a      	mov	r2, r3
 8017746:	4603      	mov	r3, r0
 8017748:	817b      	strh	r3, [r7, #10]
 801774a:	460b      	mov	r3, r1
 801774c:	813b      	strh	r3, [r7, #8]
 801774e:	4613      	mov	r3, r2
 8017750:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8017752:	f7fe fe93 	bl	801647c <HAL_GetTick>
 8017756:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017758:	68fb      	ldr	r3, [r7, #12]
 801775a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801775e:	b2db      	uxtb	r3, r3
 8017760:	2b20      	cmp	r3, #32
 8017762:	f040 8208 	bne.w	8017b76 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017768:	9300      	str	r3, [sp, #0]
 801776a:	2319      	movs	r3, #25
 801776c:	2201      	movs	r2, #1
 801776e:	497b      	ldr	r1, [pc, #492]	; (801795c <HAL_I2C_Mem_Read+0x224>)
 8017770:	68f8      	ldr	r0, [r7, #12]
 8017772:	f002 f9d7 	bl	8019b24 <I2C_WaitOnFlagUntilTimeout>
 8017776:	4603      	mov	r3, r0
 8017778:	2b00      	cmp	r3, #0
 801777a:	d001      	beq.n	8017780 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 801777c:	2302      	movs	r3, #2
 801777e:	e1fb      	b.n	8017b78 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017786:	2b01      	cmp	r3, #1
 8017788:	d101      	bne.n	801778e <HAL_I2C_Mem_Read+0x56>
 801778a:	2302      	movs	r3, #2
 801778c:	e1f4      	b.n	8017b78 <HAL_I2C_Mem_Read+0x440>
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	2201      	movs	r2, #1
 8017792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	f003 0301 	and.w	r3, r3, #1
 80177a0:	2b01      	cmp	r3, #1
 80177a2:	d007      	beq.n	80177b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	681a      	ldr	r2, [r3, #0]
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	f042 0201 	orr.w	r2, r2, #1
 80177b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	681a      	ldr	r2, [r3, #0]
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80177c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	2222      	movs	r2, #34	; 0x22
 80177c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	2240      	movs	r2, #64	; 0x40
 80177d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	2200      	movs	r2, #0
 80177d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80177de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80177e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80177ea:	b29a      	uxth	r2, r3
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	4a5b      	ldr	r2, [pc, #364]	; (8017960 <HAL_I2C_Mem_Read+0x228>)
 80177f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80177f6:	88f8      	ldrh	r0, [r7, #6]
 80177f8:	893a      	ldrh	r2, [r7, #8]
 80177fa:	8979      	ldrh	r1, [r7, #10]
 80177fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177fe:	9301      	str	r3, [sp, #4]
 8017800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017802:	9300      	str	r3, [sp, #0]
 8017804:	4603      	mov	r3, r0
 8017806:	68f8      	ldr	r0, [r7, #12]
 8017808:	f001 fffc 	bl	8019804 <I2C_RequestMemoryRead>
 801780c:	4603      	mov	r3, r0
 801780e:	2b00      	cmp	r3, #0
 8017810:	d001      	beq.n	8017816 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8017812:	2301      	movs	r3, #1
 8017814:	e1b0      	b.n	8017b78 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801781a:	2b00      	cmp	r3, #0
 801781c:	d113      	bne.n	8017846 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801781e:	2300      	movs	r3, #0
 8017820:	623b      	str	r3, [r7, #32]
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	695b      	ldr	r3, [r3, #20]
 8017828:	623b      	str	r3, [r7, #32]
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	699b      	ldr	r3, [r3, #24]
 8017830:	623b      	str	r3, [r7, #32]
 8017832:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	681a      	ldr	r2, [r3, #0]
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017842:	601a      	str	r2, [r3, #0]
 8017844:	e184      	b.n	8017b50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801784a:	2b01      	cmp	r3, #1
 801784c:	d11b      	bne.n	8017886 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	681a      	ldr	r2, [r3, #0]
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801785c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801785e:	2300      	movs	r3, #0
 8017860:	61fb      	str	r3, [r7, #28]
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	695b      	ldr	r3, [r3, #20]
 8017868:	61fb      	str	r3, [r7, #28]
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	699b      	ldr	r3, [r3, #24]
 8017870:	61fb      	str	r3, [r7, #28]
 8017872:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	681a      	ldr	r2, [r3, #0]
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017882:	601a      	str	r2, [r3, #0]
 8017884:	e164      	b.n	8017b50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801788a:	2b02      	cmp	r3, #2
 801788c:	d11b      	bne.n	80178c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	681a      	ldr	r2, [r3, #0]
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801789c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	681a      	ldr	r2, [r3, #0]
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80178ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80178ae:	2300      	movs	r3, #0
 80178b0:	61bb      	str	r3, [r7, #24]
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	695b      	ldr	r3, [r3, #20]
 80178b8:	61bb      	str	r3, [r7, #24]
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	699b      	ldr	r3, [r3, #24]
 80178c0:	61bb      	str	r3, [r7, #24]
 80178c2:	69bb      	ldr	r3, [r7, #24]
 80178c4:	e144      	b.n	8017b50 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80178c6:	2300      	movs	r3, #0
 80178c8:	617b      	str	r3, [r7, #20]
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	695b      	ldr	r3, [r3, #20]
 80178d0:	617b      	str	r3, [r7, #20]
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	699b      	ldr	r3, [r3, #24]
 80178d8:	617b      	str	r3, [r7, #20]
 80178da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80178dc:	e138      	b.n	8017b50 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80178e2:	2b03      	cmp	r3, #3
 80178e4:	f200 80f1 	bhi.w	8017aca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80178ec:	2b01      	cmp	r3, #1
 80178ee:	d123      	bne.n	8017938 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80178f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80178f4:	68f8      	ldr	r0, [r7, #12]
 80178f6:	f002 fa9f 	bl	8019e38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80178fa:	4603      	mov	r3, r0
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d001      	beq.n	8017904 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8017900:	2301      	movs	r3, #1
 8017902:	e139      	b.n	8017b78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	691a      	ldr	r2, [r3, #16]
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801790e:	b2d2      	uxtb	r2, r2
 8017910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017916:	1c5a      	adds	r2, r3, #1
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017920:	3b01      	subs	r3, #1
 8017922:	b29a      	uxth	r2, r3
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801792c:	b29b      	uxth	r3, r3
 801792e:	3b01      	subs	r3, #1
 8017930:	b29a      	uxth	r2, r3
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017936:	e10b      	b.n	8017b50 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801793c:	2b02      	cmp	r3, #2
 801793e:	d14e      	bne.n	80179de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017942:	9300      	str	r3, [sp, #0]
 8017944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017946:	2200      	movs	r2, #0
 8017948:	4906      	ldr	r1, [pc, #24]	; (8017964 <HAL_I2C_Mem_Read+0x22c>)
 801794a:	68f8      	ldr	r0, [r7, #12]
 801794c:	f002 f8ea 	bl	8019b24 <I2C_WaitOnFlagUntilTimeout>
 8017950:	4603      	mov	r3, r0
 8017952:	2b00      	cmp	r3, #0
 8017954:	d008      	beq.n	8017968 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8017956:	2301      	movs	r3, #1
 8017958:	e10e      	b.n	8017b78 <HAL_I2C_Mem_Read+0x440>
 801795a:	bf00      	nop
 801795c:	00100002 	.word	0x00100002
 8017960:	ffff0000 	.word	0xffff0000
 8017964:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	681a      	ldr	r2, [r3, #0]
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017976:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	691a      	ldr	r2, [r3, #16]
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017982:	b2d2      	uxtb	r2, r2
 8017984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801798a:	1c5a      	adds	r2, r3, #1
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017994:	3b01      	subs	r3, #1
 8017996:	b29a      	uxth	r2, r3
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80179a0:	b29b      	uxth	r3, r3
 80179a2:	3b01      	subs	r3, #1
 80179a4:	b29a      	uxth	r2, r3
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	691a      	ldr	r2, [r3, #16]
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179b4:	b2d2      	uxtb	r2, r2
 80179b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179bc:	1c5a      	adds	r2, r3, #1
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80179c6:	3b01      	subs	r3, #1
 80179c8:	b29a      	uxth	r2, r3
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80179d2:	b29b      	uxth	r3, r3
 80179d4:	3b01      	subs	r3, #1
 80179d6:	b29a      	uxth	r2, r3
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80179dc:	e0b8      	b.n	8017b50 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80179de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179e0:	9300      	str	r3, [sp, #0]
 80179e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179e4:	2200      	movs	r2, #0
 80179e6:	4966      	ldr	r1, [pc, #408]	; (8017b80 <HAL_I2C_Mem_Read+0x448>)
 80179e8:	68f8      	ldr	r0, [r7, #12]
 80179ea:	f002 f89b 	bl	8019b24 <I2C_WaitOnFlagUntilTimeout>
 80179ee:	4603      	mov	r3, r0
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d001      	beq.n	80179f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80179f4:	2301      	movs	r3, #1
 80179f6:	e0bf      	b.n	8017b78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	681a      	ldr	r2, [r3, #0]
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	691a      	ldr	r2, [r3, #16]
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a12:	b2d2      	uxtb	r2, r2
 8017a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a1a:	1c5a      	adds	r2, r3, #1
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017a24:	3b01      	subs	r3, #1
 8017a26:	b29a      	uxth	r2, r3
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017a30:	b29b      	uxth	r3, r3
 8017a32:	3b01      	subs	r3, #1
 8017a34:	b29a      	uxth	r2, r3
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a3c:	9300      	str	r3, [sp, #0]
 8017a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a40:	2200      	movs	r2, #0
 8017a42:	494f      	ldr	r1, [pc, #316]	; (8017b80 <HAL_I2C_Mem_Read+0x448>)
 8017a44:	68f8      	ldr	r0, [r7, #12]
 8017a46:	f002 f86d 	bl	8019b24 <I2C_WaitOnFlagUntilTimeout>
 8017a4a:	4603      	mov	r3, r0
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d001      	beq.n	8017a54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8017a50:	2301      	movs	r3, #1
 8017a52:	e091      	b.n	8017b78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	681a      	ldr	r2, [r3, #0]
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017a62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	691a      	ldr	r2, [r3, #16]
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a6e:	b2d2      	uxtb	r2, r2
 8017a70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a76:	1c5a      	adds	r2, r3, #1
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017a80:	3b01      	subs	r3, #1
 8017a82:	b29a      	uxth	r2, r3
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017a8c:	b29b      	uxth	r3, r3
 8017a8e:	3b01      	subs	r3, #1
 8017a90:	b29a      	uxth	r2, r3
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	691a      	ldr	r2, [r3, #16]
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017aa0:	b2d2      	uxtb	r2, r2
 8017aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017aa8:	1c5a      	adds	r2, r3, #1
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017ab2:	3b01      	subs	r3, #1
 8017ab4:	b29a      	uxth	r2, r3
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017abe:	b29b      	uxth	r3, r3
 8017ac0:	3b01      	subs	r3, #1
 8017ac2:	b29a      	uxth	r2, r3
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017ac8:	e042      	b.n	8017b50 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017acc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017ace:	68f8      	ldr	r0, [r7, #12]
 8017ad0:	f002 f9b2 	bl	8019e38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8017ad4:	4603      	mov	r3, r0
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d001      	beq.n	8017ade <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8017ada:	2301      	movs	r3, #1
 8017adc:	e04c      	b.n	8017b78 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	691a      	ldr	r2, [r3, #16]
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ae8:	b2d2      	uxtb	r2, r2
 8017aea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017af0:	1c5a      	adds	r2, r3, #1
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017afa:	3b01      	subs	r3, #1
 8017afc:	b29a      	uxth	r2, r3
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017b06:	b29b      	uxth	r3, r3
 8017b08:	3b01      	subs	r3, #1
 8017b0a:	b29a      	uxth	r2, r3
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	695b      	ldr	r3, [r3, #20]
 8017b16:	f003 0304 	and.w	r3, r3, #4
 8017b1a:	2b04      	cmp	r3, #4
 8017b1c:	d118      	bne.n	8017b50 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	691a      	ldr	r2, [r3, #16]
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b28:	b2d2      	uxtb	r2, r2
 8017b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b30:	1c5a      	adds	r2, r3, #1
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b3a:	3b01      	subs	r3, #1
 8017b3c:	b29a      	uxth	r2, r3
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017b42:	68fb      	ldr	r3, [r7, #12]
 8017b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017b46:	b29b      	uxth	r3, r3
 8017b48:	3b01      	subs	r3, #1
 8017b4a:	b29a      	uxth	r2, r3
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	f47f aec2 	bne.w	80178de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	2220      	movs	r2, #32
 8017b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	2200      	movs	r2, #0
 8017b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8017b72:	2300      	movs	r3, #0
 8017b74:	e000      	b.n	8017b78 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8017b76:	2302      	movs	r3, #2
  }
}
 8017b78:	4618      	mov	r0, r3
 8017b7a:	3728      	adds	r7, #40	; 0x28
 8017b7c:	46bd      	mov	sp, r7
 8017b7e:	bd80      	pop	{r7, pc}
 8017b80:	00010004 	.word	0x00010004

08017b84 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8017b84:	b480      	push	{r7}
 8017b86:	b087      	sub	sp, #28
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	60f8      	str	r0, [r7, #12]
 8017b8c:	607a      	str	r2, [r7, #4]
 8017b8e:	461a      	mov	r2, r3
 8017b90:	460b      	mov	r3, r1
 8017b92:	817b      	strh	r3, [r7, #10]
 8017b94:	4613      	mov	r3, r2
 8017b96:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8017b98:	2300      	movs	r3, #0
 8017b9a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017ba6:	b2db      	uxtb	r3, r3
 8017ba8:	2b20      	cmp	r3, #32
 8017baa:	f040 80a6 	bne.w	8017cfa <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017bbc:	d005      	beq.n	8017bca <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8017bbe:	6a3b      	ldr	r3, [r7, #32]
 8017bc0:	2b08      	cmp	r3, #8
 8017bc2:	d002      	beq.n	8017bca <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8017bc4:	6a3b      	ldr	r3, [r7, #32]
 8017bc6:	2b01      	cmp	r3, #1
 8017bc8:	d130      	bne.n	8017c2c <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8017bca:	4b4f      	ldr	r3, [pc, #316]	; (8017d08 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	08db      	lsrs	r3, r3, #3
 8017bd0:	4a4e      	ldr	r2, [pc, #312]	; (8017d0c <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8017bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8017bd6:	0a1a      	lsrs	r2, r3, #8
 8017bd8:	4613      	mov	r3, r2
 8017bda:	009b      	lsls	r3, r3, #2
 8017bdc:	4413      	add	r3, r2
 8017bde:	009a      	lsls	r2, r3, #2
 8017be0:	4413      	add	r3, r2
 8017be2:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8017be4:	693b      	ldr	r3, [r7, #16]
 8017be6:	3b01      	subs	r3, #1
 8017be8:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8017bea:	693b      	ldr	r3, [r7, #16]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d116      	bne.n	8017c1e <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	2220      	movs	r2, #32
 8017bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	2200      	movs	r2, #0
 8017c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c0a:	f043 0220 	orr.w	r2, r3, #32
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	2200      	movs	r2, #0
 8017c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8017c1a:	2301      	movs	r3, #1
 8017c1c:	e06e      	b.n	8017cfc <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	699b      	ldr	r3, [r3, #24]
 8017c24:	f003 0302 	and.w	r3, r3, #2
 8017c28:	2b02      	cmp	r3, #2
 8017c2a:	d0db      	beq.n	8017be4 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017c32:	2b01      	cmp	r3, #1
 8017c34:	d101      	bne.n	8017c3a <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8017c36:	2302      	movs	r3, #2
 8017c38:	e060      	b.n	8017cfc <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	2201      	movs	r2, #1
 8017c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	f003 0301 	and.w	r3, r3, #1
 8017c4c:	2b01      	cmp	r3, #1
 8017c4e:	d007      	beq.n	8017c60 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	681a      	ldr	r2, [r3, #0]
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	f042 0201 	orr.w	r2, r2, #1
 8017c5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	681a      	ldr	r2, [r3, #0]
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017c6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	2221      	movs	r2, #33	; 0x21
 8017c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	2210      	movs	r2, #16
 8017c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	2200      	movs	r2, #0
 8017c84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	687a      	ldr	r2, [r7, #4]
 8017c8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	893a      	ldrh	r2, [r7, #8]
 8017c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017c96:	b29a      	uxth	r2, r3
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	6a3a      	ldr	r2, [r7, #32]
 8017ca0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8017ca2:	897a      	ldrh	r2, [r7, #10]
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017cac:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8017cae:	697b      	ldr	r3, [r7, #20]
 8017cb0:	2b11      	cmp	r3, #17
 8017cb2:	d10c      	bne.n	8017cce <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8017cb4:	6a3b      	ldr	r3, [r7, #32]
 8017cb6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017cba:	d003      	beq.n	8017cc4 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8017cbc:	6a3b      	ldr	r3, [r7, #32]
 8017cbe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017cc2:	d101      	bne.n	8017cc8 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8017cc4:	2301      	movs	r3, #1
 8017cc6:	e000      	b.n	8017cca <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 8017cc8:	2300      	movs	r3, #0
 8017cca:	2b01      	cmp	r3, #1
 8017ccc:	d107      	bne.n	8017cde <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	681a      	ldr	r2, [r3, #0]
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017cdc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	2200      	movs	r2, #0
 8017ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	685a      	ldr	r2, [r3, #4]
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8017cf4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	e000      	b.n	8017cfc <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8017cfa:	2302      	movs	r3, #2
  }
}
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	371c      	adds	r7, #28
 8017d00:	46bd      	mov	sp, r7
 8017d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d06:	4770      	bx	lr
 8017d08:	2000018c 	.word	0x2000018c
 8017d0c:	14f8b589 	.word	0x14f8b589

08017d10 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8017d10:	b480      	push	{r7}
 8017d12:	b089      	sub	sp, #36	; 0x24
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	60f8      	str	r0, [r7, #12]
 8017d18:	607a      	str	r2, [r7, #4]
 8017d1a:	461a      	mov	r2, r3
 8017d1c:	460b      	mov	r3, r1
 8017d1e:	817b      	strh	r3, [r7, #10]
 8017d20:	4613      	mov	r3, r2
 8017d22:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8017d24:	2300      	movs	r3, #0
 8017d26:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8017d28:	2300      	movs	r3, #0
 8017d2a:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017d2c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8017d30:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017d38:	b2db      	uxtb	r3, r3
 8017d3a:	2b20      	cmp	r3, #32
 8017d3c:	f040 80da 	bne.w	8017ef4 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017d4e:	d005      	beq.n	8017d5c <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8017d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d52:	2b08      	cmp	r3, #8
 8017d54:	d002      	beq.n	8017d5c <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8017d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d58:	2b01      	cmp	r3, #1
 8017d5a:	d130      	bne.n	8017dbe <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8017d5c:	4b69      	ldr	r3, [pc, #420]	; (8017f04 <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	08db      	lsrs	r3, r3, #3
 8017d62:	4a69      	ldr	r2, [pc, #420]	; (8017f08 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8017d64:	fba2 2303 	umull	r2, r3, r2, r3
 8017d68:	0a1a      	lsrs	r2, r3, #8
 8017d6a:	4613      	mov	r3, r2
 8017d6c:	009b      	lsls	r3, r3, #2
 8017d6e:	4413      	add	r3, r2
 8017d70:	009a      	lsls	r2, r3, #2
 8017d72:	4413      	add	r3, r2
 8017d74:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8017d76:	697b      	ldr	r3, [r7, #20]
 8017d78:	3b01      	subs	r3, #1
 8017d7a:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8017d7c:	697b      	ldr	r3, [r7, #20]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d116      	bne.n	8017db0 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	2200      	movs	r2, #0
 8017d86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	2220      	movs	r2, #32
 8017d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	2200      	movs	r2, #0
 8017d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d9c:	f043 0220 	orr.w	r2, r3, #32
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	2200      	movs	r2, #0
 8017da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8017dac:	2301      	movs	r3, #1
 8017dae:	e0a2      	b.n	8017ef6 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	699b      	ldr	r3, [r3, #24]
 8017db6:	f003 0302 	and.w	r3, r3, #2
 8017dba:	2b02      	cmp	r3, #2
 8017dbc:	d0db      	beq.n	8017d76 <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017dc4:	2b01      	cmp	r3, #1
 8017dc6:	d101      	bne.n	8017dcc <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 8017dc8:	2302      	movs	r3, #2
 8017dca:	e094      	b.n	8017ef6 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	2201      	movs	r2, #1
 8017dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	f003 0301 	and.w	r3, r3, #1
 8017dde:	2b01      	cmp	r3, #1
 8017de0:	d007      	beq.n	8017df2 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	681a      	ldr	r2, [r3, #0]
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	f042 0201 	orr.w	r2, r2, #1
 8017df0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	681a      	ldr	r2, [r3, #0]
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017e00:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	2222      	movs	r2, #34	; 0x22
 8017e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	2210      	movs	r2, #16
 8017e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	2200      	movs	r2, #0
 8017e16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	687a      	ldr	r2, [r7, #4]
 8017e1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017e1e:	68fb      	ldr	r3, [r7, #12]
 8017e20:	893a      	ldrh	r2, [r7, #8]
 8017e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017e28:	b29a      	uxth	r2, r3
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017e32:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8017e34:	897a      	ldrh	r2, [r7, #10]
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e3e:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017e44:	b29b      	uxth	r3, r3
 8017e46:	2b02      	cmp	r3, #2
 8017e48:	d126      	bne.n	8017e98 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 8017e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e4c:	2b20      	cmp	r3, #32
 8017e4e:	d002      	beq.n	8017e56 <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8017e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e52:	2b10      	cmp	r3, #16
 8017e54:	d120      	bne.n	8017e98 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8017e56:	69bb      	ldr	r3, [r7, #24]
 8017e58:	2b12      	cmp	r3, #18
 8017e5a:	d114      	bne.n	8017e86 <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	681a      	ldr	r2, [r3, #0]
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017e6a:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	681a      	ldr	r2, [r3, #0]
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017e7a:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8017e7c:	69fb      	ldr	r3, [r7, #28]
 8017e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017e82:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8017e84:	e010      	b.n	8017ea8 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	681a      	ldr	r2, [r3, #0]
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017e94:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8017e96:	e007      	b.n	8017ea8 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	681a      	ldr	r2, [r3, #0]
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017ea6:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8017ea8:	69bb      	ldr	r3, [r7, #24]
 8017eaa:	2b12      	cmp	r3, #18
 8017eac:	d10c      	bne.n	8017ec8 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 8017eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017eb4:	d003      	beq.n	8017ebe <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 8017eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017ebc:	d101      	bne.n	8017ec2 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 8017ebe:	2301      	movs	r3, #1
 8017ec0:	e000      	b.n	8017ec4 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	2b01      	cmp	r3, #1
 8017ec6:	d107      	bne.n	8017ed8 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	681a      	ldr	r2, [r3, #0]
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017ed6:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	2200      	movs	r2, #0
 8017edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	6859      	ldr	r1, [r3, #4]
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	69fa      	ldr	r2, [r7, #28]
 8017eec:	430a      	orrs	r2, r1
 8017eee:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	e000      	b.n	8017ef6 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8017ef4:	2302      	movs	r3, #2
  }
}
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	3724      	adds	r7, #36	; 0x24
 8017efa:	46bd      	mov	sp, r7
 8017efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f00:	4770      	bx	lr
 8017f02:	bf00      	nop
 8017f04:	2000018c 	.word	0x2000018c
 8017f08:	14f8b589 	.word	0x14f8b589

08017f0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8017f0c:	b580      	push	{r7, lr}
 8017f0e:	b088      	sub	sp, #32
 8017f10:	af00      	add	r7, sp, #0
 8017f12:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8017f14:	2300      	movs	r3, #0
 8017f16:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	685b      	ldr	r3, [r3, #4]
 8017f1e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f24:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017f2c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017f34:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8017f36:	7bfb      	ldrb	r3, [r7, #15]
 8017f38:	2b10      	cmp	r3, #16
 8017f3a:	d003      	beq.n	8017f44 <HAL_I2C_EV_IRQHandler+0x38>
 8017f3c:	7bfb      	ldrb	r3, [r7, #15]
 8017f3e:	2b40      	cmp	r3, #64	; 0x40
 8017f40:	f040 80c1 	bne.w	80180c6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	699b      	ldr	r3, [r3, #24]
 8017f4a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	695b      	ldr	r3, [r3, #20]
 8017f52:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8017f54:	69fb      	ldr	r3, [r7, #28]
 8017f56:	f003 0301 	and.w	r3, r3, #1
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d10d      	bne.n	8017f7a <HAL_I2C_EV_IRQHandler+0x6e>
 8017f5e:	693b      	ldr	r3, [r7, #16]
 8017f60:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017f64:	d003      	beq.n	8017f6e <HAL_I2C_EV_IRQHandler+0x62>
 8017f66:	693b      	ldr	r3, [r7, #16]
 8017f68:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017f6c:	d101      	bne.n	8017f72 <HAL_I2C_EV_IRQHandler+0x66>
 8017f6e:	2301      	movs	r3, #1
 8017f70:	e000      	b.n	8017f74 <HAL_I2C_EV_IRQHandler+0x68>
 8017f72:	2300      	movs	r3, #0
 8017f74:	2b01      	cmp	r3, #1
 8017f76:	f000 8132 	beq.w	80181de <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017f7a:	69fb      	ldr	r3, [r7, #28]
 8017f7c:	f003 0301 	and.w	r3, r3, #1
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d00c      	beq.n	8017f9e <HAL_I2C_EV_IRQHandler+0x92>
 8017f84:	697b      	ldr	r3, [r7, #20]
 8017f86:	0a5b      	lsrs	r3, r3, #9
 8017f88:	f003 0301 	and.w	r3, r3, #1
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d006      	beq.n	8017f9e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8017f90:	6878      	ldr	r0, [r7, #4]
 8017f92:	f001 ffd6 	bl	8019f42 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8017f96:	6878      	ldr	r0, [r7, #4]
 8017f98:	f000 fd83 	bl	8018aa2 <I2C_Master_SB>
 8017f9c:	e092      	b.n	80180c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017f9e:	69fb      	ldr	r3, [r7, #28]
 8017fa0:	08db      	lsrs	r3, r3, #3
 8017fa2:	f003 0301 	and.w	r3, r3, #1
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d009      	beq.n	8017fbe <HAL_I2C_EV_IRQHandler+0xb2>
 8017faa:	697b      	ldr	r3, [r7, #20]
 8017fac:	0a5b      	lsrs	r3, r3, #9
 8017fae:	f003 0301 	and.w	r3, r3, #1
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d003      	beq.n	8017fbe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8017fb6:	6878      	ldr	r0, [r7, #4]
 8017fb8:	f000 fdf9 	bl	8018bae <I2C_Master_ADD10>
 8017fbc:	e082      	b.n	80180c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017fbe:	69fb      	ldr	r3, [r7, #28]
 8017fc0:	085b      	lsrs	r3, r3, #1
 8017fc2:	f003 0301 	and.w	r3, r3, #1
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d009      	beq.n	8017fde <HAL_I2C_EV_IRQHandler+0xd2>
 8017fca:	697b      	ldr	r3, [r7, #20]
 8017fcc:	0a5b      	lsrs	r3, r3, #9
 8017fce:	f003 0301 	and.w	r3, r3, #1
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d003      	beq.n	8017fde <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8017fd6:	6878      	ldr	r0, [r7, #4]
 8017fd8:	f000 fe13 	bl	8018c02 <I2C_Master_ADDR>
 8017fdc:	e072      	b.n	80180c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8017fde:	69bb      	ldr	r3, [r7, #24]
 8017fe0:	089b      	lsrs	r3, r3, #2
 8017fe2:	f003 0301 	and.w	r3, r3, #1
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d03b      	beq.n	8018062 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	685b      	ldr	r3, [r3, #4]
 8017ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017ff8:	f000 80f3 	beq.w	80181e2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017ffc:	69fb      	ldr	r3, [r7, #28]
 8017ffe:	09db      	lsrs	r3, r3, #7
 8018000:	f003 0301 	and.w	r3, r3, #1
 8018004:	2b00      	cmp	r3, #0
 8018006:	d00f      	beq.n	8018028 <HAL_I2C_EV_IRQHandler+0x11c>
 8018008:	697b      	ldr	r3, [r7, #20]
 801800a:	0a9b      	lsrs	r3, r3, #10
 801800c:	f003 0301 	and.w	r3, r3, #1
 8018010:	2b00      	cmp	r3, #0
 8018012:	d009      	beq.n	8018028 <HAL_I2C_EV_IRQHandler+0x11c>
 8018014:	69fb      	ldr	r3, [r7, #28]
 8018016:	089b      	lsrs	r3, r3, #2
 8018018:	f003 0301 	and.w	r3, r3, #1
 801801c:	2b00      	cmp	r3, #0
 801801e:	d103      	bne.n	8018028 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8018020:	6878      	ldr	r0, [r7, #4]
 8018022:	f000 f9f3 	bl	801840c <I2C_MasterTransmit_TXE>
 8018026:	e04d      	b.n	80180c4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018028:	69fb      	ldr	r3, [r7, #28]
 801802a:	089b      	lsrs	r3, r3, #2
 801802c:	f003 0301 	and.w	r3, r3, #1
 8018030:	2b00      	cmp	r3, #0
 8018032:	f000 80d6 	beq.w	80181e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8018036:	697b      	ldr	r3, [r7, #20]
 8018038:	0a5b      	lsrs	r3, r3, #9
 801803a:	f003 0301 	and.w	r3, r3, #1
 801803e:	2b00      	cmp	r3, #0
 8018040:	f000 80cf 	beq.w	80181e2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8018044:	7bbb      	ldrb	r3, [r7, #14]
 8018046:	2b21      	cmp	r3, #33	; 0x21
 8018048:	d103      	bne.n	8018052 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 801804a:	6878      	ldr	r0, [r7, #4]
 801804c:	f000 fa7a 	bl	8018544 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018050:	e0c7      	b.n	80181e2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8018052:	7bfb      	ldrb	r3, [r7, #15]
 8018054:	2b40      	cmp	r3, #64	; 0x40
 8018056:	f040 80c4 	bne.w	80181e2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 801805a:	6878      	ldr	r0, [r7, #4]
 801805c:	f000 fae8 	bl	8018630 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018060:	e0bf      	b.n	80181e2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	685b      	ldr	r3, [r3, #4]
 8018068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801806c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018070:	f000 80b7 	beq.w	80181e2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018074:	69fb      	ldr	r3, [r7, #28]
 8018076:	099b      	lsrs	r3, r3, #6
 8018078:	f003 0301 	and.w	r3, r3, #1
 801807c:	2b00      	cmp	r3, #0
 801807e:	d00f      	beq.n	80180a0 <HAL_I2C_EV_IRQHandler+0x194>
 8018080:	697b      	ldr	r3, [r7, #20]
 8018082:	0a9b      	lsrs	r3, r3, #10
 8018084:	f003 0301 	and.w	r3, r3, #1
 8018088:	2b00      	cmp	r3, #0
 801808a:	d009      	beq.n	80180a0 <HAL_I2C_EV_IRQHandler+0x194>
 801808c:	69fb      	ldr	r3, [r7, #28]
 801808e:	089b      	lsrs	r3, r3, #2
 8018090:	f003 0301 	and.w	r3, r3, #1
 8018094:	2b00      	cmp	r3, #0
 8018096:	d103      	bne.n	80180a0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8018098:	6878      	ldr	r0, [r7, #4]
 801809a:	f000 fb5d 	bl	8018758 <I2C_MasterReceive_RXNE>
 801809e:	e011      	b.n	80180c4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80180a0:	69fb      	ldr	r3, [r7, #28]
 80180a2:	089b      	lsrs	r3, r3, #2
 80180a4:	f003 0301 	and.w	r3, r3, #1
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	f000 809a 	beq.w	80181e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80180ae:	697b      	ldr	r3, [r7, #20]
 80180b0:	0a5b      	lsrs	r3, r3, #9
 80180b2:	f003 0301 	and.w	r3, r3, #1
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	f000 8093 	beq.w	80181e2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80180bc:	6878      	ldr	r0, [r7, #4]
 80180be:	f000 fc06 	bl	80188ce <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80180c2:	e08e      	b.n	80181e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80180c4:	e08d      	b.n	80181e2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d004      	beq.n	80180d8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	695b      	ldr	r3, [r3, #20]
 80180d4:	61fb      	str	r3, [r7, #28]
 80180d6:	e007      	b.n	80180e8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	699b      	ldr	r3, [r3, #24]
 80180de:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	695b      	ldr	r3, [r3, #20]
 80180e6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80180e8:	69fb      	ldr	r3, [r7, #28]
 80180ea:	085b      	lsrs	r3, r3, #1
 80180ec:	f003 0301 	and.w	r3, r3, #1
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d012      	beq.n	801811a <HAL_I2C_EV_IRQHandler+0x20e>
 80180f4:	697b      	ldr	r3, [r7, #20]
 80180f6:	0a5b      	lsrs	r3, r3, #9
 80180f8:	f003 0301 	and.w	r3, r3, #1
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d00c      	beq.n	801811a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018104:	2b00      	cmp	r3, #0
 8018106:	d003      	beq.n	8018110 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	699b      	ldr	r3, [r3, #24]
 801810e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8018110:	69b9      	ldr	r1, [r7, #24]
 8018112:	6878      	ldr	r0, [r7, #4]
 8018114:	f000 ffc4 	bl	80190a0 <I2C_Slave_ADDR>
 8018118:	e066      	b.n	80181e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801811a:	69fb      	ldr	r3, [r7, #28]
 801811c:	091b      	lsrs	r3, r3, #4
 801811e:	f003 0301 	and.w	r3, r3, #1
 8018122:	2b00      	cmp	r3, #0
 8018124:	d009      	beq.n	801813a <HAL_I2C_EV_IRQHandler+0x22e>
 8018126:	697b      	ldr	r3, [r7, #20]
 8018128:	0a5b      	lsrs	r3, r3, #9
 801812a:	f003 0301 	and.w	r3, r3, #1
 801812e:	2b00      	cmp	r3, #0
 8018130:	d003      	beq.n	801813a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8018132:	6878      	ldr	r0, [r7, #4]
 8018134:	f000 fffe 	bl	8019134 <I2C_Slave_STOPF>
 8018138:	e056      	b.n	80181e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801813a:	7bbb      	ldrb	r3, [r7, #14]
 801813c:	2b21      	cmp	r3, #33	; 0x21
 801813e:	d002      	beq.n	8018146 <HAL_I2C_EV_IRQHandler+0x23a>
 8018140:	7bbb      	ldrb	r3, [r7, #14]
 8018142:	2b29      	cmp	r3, #41	; 0x29
 8018144:	d125      	bne.n	8018192 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018146:	69fb      	ldr	r3, [r7, #28]
 8018148:	09db      	lsrs	r3, r3, #7
 801814a:	f003 0301 	and.w	r3, r3, #1
 801814e:	2b00      	cmp	r3, #0
 8018150:	d00f      	beq.n	8018172 <HAL_I2C_EV_IRQHandler+0x266>
 8018152:	697b      	ldr	r3, [r7, #20]
 8018154:	0a9b      	lsrs	r3, r3, #10
 8018156:	f003 0301 	and.w	r3, r3, #1
 801815a:	2b00      	cmp	r3, #0
 801815c:	d009      	beq.n	8018172 <HAL_I2C_EV_IRQHandler+0x266>
 801815e:	69fb      	ldr	r3, [r7, #28]
 8018160:	089b      	lsrs	r3, r3, #2
 8018162:	f003 0301 	and.w	r3, r3, #1
 8018166:	2b00      	cmp	r3, #0
 8018168:	d103      	bne.n	8018172 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 801816a:	6878      	ldr	r0, [r7, #4]
 801816c:	f000 feda 	bl	8018f24 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018170:	e039      	b.n	80181e6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018172:	69fb      	ldr	r3, [r7, #28]
 8018174:	089b      	lsrs	r3, r3, #2
 8018176:	f003 0301 	and.w	r3, r3, #1
 801817a:	2b00      	cmp	r3, #0
 801817c:	d033      	beq.n	80181e6 <HAL_I2C_EV_IRQHandler+0x2da>
 801817e:	697b      	ldr	r3, [r7, #20]
 8018180:	0a5b      	lsrs	r3, r3, #9
 8018182:	f003 0301 	and.w	r3, r3, #1
 8018186:	2b00      	cmp	r3, #0
 8018188:	d02d      	beq.n	80181e6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 801818a:	6878      	ldr	r0, [r7, #4]
 801818c:	f000 ff07 	bl	8018f9e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018190:	e029      	b.n	80181e6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018192:	69fb      	ldr	r3, [r7, #28]
 8018194:	099b      	lsrs	r3, r3, #6
 8018196:	f003 0301 	and.w	r3, r3, #1
 801819a:	2b00      	cmp	r3, #0
 801819c:	d00f      	beq.n	80181be <HAL_I2C_EV_IRQHandler+0x2b2>
 801819e:	697b      	ldr	r3, [r7, #20]
 80181a0:	0a9b      	lsrs	r3, r3, #10
 80181a2:	f003 0301 	and.w	r3, r3, #1
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d009      	beq.n	80181be <HAL_I2C_EV_IRQHandler+0x2b2>
 80181aa:	69fb      	ldr	r3, [r7, #28]
 80181ac:	089b      	lsrs	r3, r3, #2
 80181ae:	f003 0301 	and.w	r3, r3, #1
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d103      	bne.n	80181be <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80181b6:	6878      	ldr	r0, [r7, #4]
 80181b8:	f000 ff12 	bl	8018fe0 <I2C_SlaveReceive_RXNE>
 80181bc:	e014      	b.n	80181e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80181be:	69fb      	ldr	r3, [r7, #28]
 80181c0:	089b      	lsrs	r3, r3, #2
 80181c2:	f003 0301 	and.w	r3, r3, #1
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d00e      	beq.n	80181e8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80181ca:	697b      	ldr	r3, [r7, #20]
 80181cc:	0a5b      	lsrs	r3, r3, #9
 80181ce:	f003 0301 	and.w	r3, r3, #1
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d008      	beq.n	80181e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80181d6:	6878      	ldr	r0, [r7, #4]
 80181d8:	f000 ff40 	bl	801905c <I2C_SlaveReceive_BTF>
 80181dc:	e004      	b.n	80181e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80181de:	bf00      	nop
 80181e0:	e002      	b.n	80181e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80181e2:	bf00      	nop
 80181e4:	e000      	b.n	80181e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80181e6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80181e8:	3720      	adds	r7, #32
 80181ea:	46bd      	mov	sp, r7
 80181ec:	bd80      	pop	{r7, pc}

080181ee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80181ee:	b580      	push	{r7, lr}
 80181f0:	b08a      	sub	sp, #40	; 0x28
 80181f2:	af00      	add	r7, sp, #0
 80181f4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	695b      	ldr	r3, [r3, #20]
 80181fc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	685b      	ldr	r3, [r3, #4]
 8018204:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8018206:	2300      	movs	r3, #0
 8018208:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018210:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8018212:	6a3b      	ldr	r3, [r7, #32]
 8018214:	0a1b      	lsrs	r3, r3, #8
 8018216:	f003 0301 	and.w	r3, r3, #1
 801821a:	2b00      	cmp	r3, #0
 801821c:	d00e      	beq.n	801823c <HAL_I2C_ER_IRQHandler+0x4e>
 801821e:	69fb      	ldr	r3, [r7, #28]
 8018220:	0a1b      	lsrs	r3, r3, #8
 8018222:	f003 0301 	and.w	r3, r3, #1
 8018226:	2b00      	cmp	r3, #0
 8018228:	d008      	beq.n	801823c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 801822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801822c:	f043 0301 	orr.w	r3, r3, #1
 8018230:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801823a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801823c:	6a3b      	ldr	r3, [r7, #32]
 801823e:	0a5b      	lsrs	r3, r3, #9
 8018240:	f003 0301 	and.w	r3, r3, #1
 8018244:	2b00      	cmp	r3, #0
 8018246:	d00e      	beq.n	8018266 <HAL_I2C_ER_IRQHandler+0x78>
 8018248:	69fb      	ldr	r3, [r7, #28]
 801824a:	0a1b      	lsrs	r3, r3, #8
 801824c:	f003 0301 	and.w	r3, r3, #1
 8018250:	2b00      	cmp	r3, #0
 8018252:	d008      	beq.n	8018266 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8018254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018256:	f043 0302 	orr.w	r3, r3, #2
 801825a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8018264:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8018266:	6a3b      	ldr	r3, [r7, #32]
 8018268:	0a9b      	lsrs	r3, r3, #10
 801826a:	f003 0301 	and.w	r3, r3, #1
 801826e:	2b00      	cmp	r3, #0
 8018270:	d03f      	beq.n	80182f2 <HAL_I2C_ER_IRQHandler+0x104>
 8018272:	69fb      	ldr	r3, [r7, #28]
 8018274:	0a1b      	lsrs	r3, r3, #8
 8018276:	f003 0301 	and.w	r3, r3, #1
 801827a:	2b00      	cmp	r3, #0
 801827c:	d039      	beq.n	80182f2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801827e:	7efb      	ldrb	r3, [r7, #27]
 8018280:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018286:	b29b      	uxth	r3, r3
 8018288:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018290:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018296:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8018298:	7ebb      	ldrb	r3, [r7, #26]
 801829a:	2b20      	cmp	r3, #32
 801829c:	d112      	bne.n	80182c4 <HAL_I2C_ER_IRQHandler+0xd6>
 801829e:	697b      	ldr	r3, [r7, #20]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d10f      	bne.n	80182c4 <HAL_I2C_ER_IRQHandler+0xd6>
 80182a4:	7cfb      	ldrb	r3, [r7, #19]
 80182a6:	2b21      	cmp	r3, #33	; 0x21
 80182a8:	d008      	beq.n	80182bc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80182aa:	7cfb      	ldrb	r3, [r7, #19]
 80182ac:	2b29      	cmp	r3, #41	; 0x29
 80182ae:	d005      	beq.n	80182bc <HAL_I2C_ER_IRQHandler+0xce>
 80182b0:	7cfb      	ldrb	r3, [r7, #19]
 80182b2:	2b28      	cmp	r3, #40	; 0x28
 80182b4:	d106      	bne.n	80182c4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80182b6:	68fb      	ldr	r3, [r7, #12]
 80182b8:	2b21      	cmp	r3, #33	; 0x21
 80182ba:	d103      	bne.n	80182c4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80182bc:	6878      	ldr	r0, [r7, #4]
 80182be:	f001 f869 	bl	8019394 <I2C_Slave_AF>
 80182c2:	e016      	b.n	80182f2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80182cc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80182ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182d0:	f043 0304 	orr.w	r3, r3, #4
 80182d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80182d6:	7efb      	ldrb	r3, [r7, #27]
 80182d8:	2b10      	cmp	r3, #16
 80182da:	d002      	beq.n	80182e2 <HAL_I2C_ER_IRQHandler+0xf4>
 80182dc:	7efb      	ldrb	r3, [r7, #27]
 80182de:	2b40      	cmp	r3, #64	; 0x40
 80182e0:	d107      	bne.n	80182f2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	681a      	ldr	r2, [r3, #0]
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80182f0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80182f2:	6a3b      	ldr	r3, [r7, #32]
 80182f4:	0adb      	lsrs	r3, r3, #11
 80182f6:	f003 0301 	and.w	r3, r3, #1
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d00e      	beq.n	801831c <HAL_I2C_ER_IRQHandler+0x12e>
 80182fe:	69fb      	ldr	r3, [r7, #28]
 8018300:	0a1b      	lsrs	r3, r3, #8
 8018302:	f003 0301 	and.w	r3, r3, #1
 8018306:	2b00      	cmp	r3, #0
 8018308:	d008      	beq.n	801831c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 801830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801830c:	f043 0308 	orr.w	r3, r3, #8
 8018310:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 801831a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 801831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801831e:	2b00      	cmp	r3, #0
 8018320:	d008      	beq.n	8018334 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018328:	431a      	orrs	r2, r3
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 801832e:	6878      	ldr	r0, [r7, #4]
 8018330:	f001 f8a0 	bl	8019474 <I2C_ITError>
  }
}
 8018334:	bf00      	nop
 8018336:	3728      	adds	r7, #40	; 0x28
 8018338:	46bd      	mov	sp, r7
 801833a:	bd80      	pop	{r7, pc}

0801833c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801833c:	b480      	push	{r7}
 801833e:	b083      	sub	sp, #12
 8018340:	af00      	add	r7, sp, #0
 8018342:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8018344:	bf00      	nop
 8018346:	370c      	adds	r7, #12
 8018348:	46bd      	mov	sp, r7
 801834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801834e:	4770      	bx	lr

08018350 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018350:	b480      	push	{r7}
 8018352:	b083      	sub	sp, #12
 8018354:	af00      	add	r7, sp, #0
 8018356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8018358:	bf00      	nop
 801835a:	370c      	adds	r7, #12
 801835c:	46bd      	mov	sp, r7
 801835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018362:	4770      	bx	lr

08018364 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018364:	b480      	push	{r7}
 8018366:	b083      	sub	sp, #12
 8018368:	af00      	add	r7, sp, #0
 801836a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801836c:	bf00      	nop
 801836e:	370c      	adds	r7, #12
 8018370:	46bd      	mov	sp, r7
 8018372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018376:	4770      	bx	lr

08018378 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018378:	b480      	push	{r7}
 801837a:	b083      	sub	sp, #12
 801837c:	af00      	add	r7, sp, #0
 801837e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8018380:	bf00      	nop
 8018382:	370c      	adds	r7, #12
 8018384:	46bd      	mov	sp, r7
 8018386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801838a:	4770      	bx	lr

0801838c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801838c:	b480      	push	{r7}
 801838e:	b083      	sub	sp, #12
 8018390:	af00      	add	r7, sp, #0
 8018392:	6078      	str	r0, [r7, #4]
 8018394:	460b      	mov	r3, r1
 8018396:	70fb      	strb	r3, [r7, #3]
 8018398:	4613      	mov	r3, r2
 801839a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801839c:	bf00      	nop
 801839e:	370c      	adds	r7, #12
 80183a0:	46bd      	mov	sp, r7
 80183a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183a6:	4770      	bx	lr

080183a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80183a8:	b480      	push	{r7}
 80183aa:	b083      	sub	sp, #12
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80183b0:	bf00      	nop
 80183b2:	370c      	adds	r7, #12
 80183b4:	46bd      	mov	sp, r7
 80183b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ba:	4770      	bx	lr

080183bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80183bc:	b480      	push	{r7}
 80183be:	b083      	sub	sp, #12
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80183c4:	bf00      	nop
 80183c6:	370c      	adds	r7, #12
 80183c8:	46bd      	mov	sp, r7
 80183ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ce:	4770      	bx	lr

080183d0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80183d0:	b480      	push	{r7}
 80183d2:	b083      	sub	sp, #12
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80183d8:	bf00      	nop
 80183da:	370c      	adds	r7, #12
 80183dc:	46bd      	mov	sp, r7
 80183de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e2:	4770      	bx	lr

080183e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80183e4:	b480      	push	{r7}
 80183e6:	b083      	sub	sp, #12
 80183e8:	af00      	add	r7, sp, #0
 80183ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80183ec:	bf00      	nop
 80183ee:	370c      	adds	r7, #12
 80183f0:	46bd      	mov	sp, r7
 80183f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f6:	4770      	bx	lr

080183f8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80183f8:	b480      	push	{r7}
 80183fa:	b083      	sub	sp, #12
 80183fc:	af00      	add	r7, sp, #0
 80183fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8018400:	bf00      	nop
 8018402:	370c      	adds	r7, #12
 8018404:	46bd      	mov	sp, r7
 8018406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801840a:	4770      	bx	lr

0801840c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b084      	sub	sp, #16
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801841a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018422:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018428:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801842e:	2b00      	cmp	r3, #0
 8018430:	d150      	bne.n	80184d4 <I2C_MasterTransmit_TXE+0xc8>
 8018432:	7bfb      	ldrb	r3, [r7, #15]
 8018434:	2b21      	cmp	r3, #33	; 0x21
 8018436:	d14d      	bne.n	80184d4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018438:	68bb      	ldr	r3, [r7, #8]
 801843a:	2b08      	cmp	r3, #8
 801843c:	d01d      	beq.n	801847a <I2C_MasterTransmit_TXE+0x6e>
 801843e:	68bb      	ldr	r3, [r7, #8]
 8018440:	2b20      	cmp	r3, #32
 8018442:	d01a      	beq.n	801847a <I2C_MasterTransmit_TXE+0x6e>
 8018444:	68bb      	ldr	r3, [r7, #8]
 8018446:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801844a:	d016      	beq.n	801847a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	685a      	ldr	r2, [r3, #4]
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801845a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	2211      	movs	r2, #17
 8018460:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	2200      	movs	r2, #0
 8018466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	2220      	movs	r2, #32
 801846e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8018472:	6878      	ldr	r0, [r7, #4]
 8018474:	f7ff ff62 	bl	801833c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018478:	e060      	b.n	801853c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	685a      	ldr	r2, [r3, #4]
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018488:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	681a      	ldr	r2, [r3, #0]
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018498:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	2200      	movs	r2, #0
 801849e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	2220      	movs	r2, #32
 80184a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80184ae:	b2db      	uxtb	r3, r3
 80184b0:	2b40      	cmp	r3, #64	; 0x40
 80184b2:	d107      	bne.n	80184c4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	2200      	movs	r2, #0
 80184b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80184bc:	6878      	ldr	r0, [r7, #4]
 80184be:	f7ff ff7d 	bl	80183bc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80184c2:	e03b      	b.n	801853c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	2200      	movs	r2, #0
 80184c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80184cc:	6878      	ldr	r0, [r7, #4]
 80184ce:	f7ff ff35 	bl	801833c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80184d2:	e033      	b.n	801853c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80184d4:	7bfb      	ldrb	r3, [r7, #15]
 80184d6:	2b21      	cmp	r3, #33	; 0x21
 80184d8:	d005      	beq.n	80184e6 <I2C_MasterTransmit_TXE+0xda>
 80184da:	7bbb      	ldrb	r3, [r7, #14]
 80184dc:	2b40      	cmp	r3, #64	; 0x40
 80184de:	d12d      	bne.n	801853c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80184e0:	7bfb      	ldrb	r3, [r7, #15]
 80184e2:	2b22      	cmp	r3, #34	; 0x22
 80184e4:	d12a      	bne.n	801853c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80184ea:	b29b      	uxth	r3, r3
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d108      	bne.n	8018502 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	685a      	ldr	r2, [r3, #4]
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80184fe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8018500:	e01c      	b.n	801853c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018508:	b2db      	uxtb	r3, r3
 801850a:	2b40      	cmp	r3, #64	; 0x40
 801850c:	d103      	bne.n	8018516 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 801850e:	6878      	ldr	r0, [r7, #4]
 8018510:	f000 f88e 	bl	8018630 <I2C_MemoryTransmit_TXE_BTF>
}
 8018514:	e012      	b.n	801853c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801851a:	781a      	ldrb	r2, [r3, #0]
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018526:	1c5a      	adds	r2, r3, #1
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018530:	b29b      	uxth	r3, r3
 8018532:	3b01      	subs	r3, #1
 8018534:	b29a      	uxth	r2, r3
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801853a:	e7ff      	b.n	801853c <I2C_MasterTransmit_TXE+0x130>
 801853c:	bf00      	nop
 801853e:	3710      	adds	r7, #16
 8018540:	46bd      	mov	sp, r7
 8018542:	bd80      	pop	{r7, pc}

08018544 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8018544:	b580      	push	{r7, lr}
 8018546:	b084      	sub	sp, #16
 8018548:	af00      	add	r7, sp, #0
 801854a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018550:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018558:	b2db      	uxtb	r3, r3
 801855a:	2b21      	cmp	r3, #33	; 0x21
 801855c:	d164      	bne.n	8018628 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018562:	b29b      	uxth	r3, r3
 8018564:	2b00      	cmp	r3, #0
 8018566:	d012      	beq.n	801858e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801856c:	781a      	ldrb	r2, [r3, #0]
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018578:	1c5a      	adds	r2, r3, #1
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018582:	b29b      	uxth	r3, r3
 8018584:	3b01      	subs	r3, #1
 8018586:	b29a      	uxth	r2, r3
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 801858c:	e04c      	b.n	8018628 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801858e:	68fb      	ldr	r3, [r7, #12]
 8018590:	2b08      	cmp	r3, #8
 8018592:	d01d      	beq.n	80185d0 <I2C_MasterTransmit_BTF+0x8c>
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	2b20      	cmp	r3, #32
 8018598:	d01a      	beq.n	80185d0 <I2C_MasterTransmit_BTF+0x8c>
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80185a0:	d016      	beq.n	80185d0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	681b      	ldr	r3, [r3, #0]
 80185a6:	685a      	ldr	r2, [r3, #4]
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80185b0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	2211      	movs	r2, #17
 80185b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	2200      	movs	r2, #0
 80185bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	2220      	movs	r2, #32
 80185c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80185c8:	6878      	ldr	r0, [r7, #4]
 80185ca:	f7ff feb7 	bl	801833c <HAL_I2C_MasterTxCpltCallback>
}
 80185ce:	e02b      	b.n	8018628 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	685a      	ldr	r2, [r3, #4]
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80185de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	681a      	ldr	r2, [r3, #0]
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80185ee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	2200      	movs	r2, #0
 80185f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	2220      	movs	r2, #32
 80185fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018604:	b2db      	uxtb	r3, r3
 8018606:	2b40      	cmp	r3, #64	; 0x40
 8018608:	d107      	bne.n	801861a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	2200      	movs	r2, #0
 801860e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8018612:	6878      	ldr	r0, [r7, #4]
 8018614:	f7ff fed2 	bl	80183bc <HAL_I2C_MemTxCpltCallback>
}
 8018618:	e006      	b.n	8018628 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	2200      	movs	r2, #0
 801861e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8018622:	6878      	ldr	r0, [r7, #4]
 8018624:	f7ff fe8a 	bl	801833c <HAL_I2C_MasterTxCpltCallback>
}
 8018628:	bf00      	nop
 801862a:	3710      	adds	r7, #16
 801862c:	46bd      	mov	sp, r7
 801862e:	bd80      	pop	{r7, pc}

08018630 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8018630:	b580      	push	{r7, lr}
 8018632:	b084      	sub	sp, #16
 8018634:	af00      	add	r7, sp, #0
 8018636:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801863e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018644:	2b00      	cmp	r3, #0
 8018646:	d11d      	bne.n	8018684 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801864c:	2b01      	cmp	r3, #1
 801864e:	d10b      	bne.n	8018668 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018654:	b2da      	uxtb	r2, r3
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018660:	1c9a      	adds	r2, r3, #2
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8018666:	e073      	b.n	8018750 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801866c:	b29b      	uxth	r3, r3
 801866e:	121b      	asrs	r3, r3, #8
 8018670:	b2da      	uxtb	r2, r3
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801867c:	1c5a      	adds	r2, r3, #1
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018682:	e065      	b.n	8018750 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018688:	2b01      	cmp	r3, #1
 801868a:	d10b      	bne.n	80186a4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018690:	b2da      	uxtb	r2, r3
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801869c:	1c5a      	adds	r2, r3, #1
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80186a2:	e055      	b.n	8018750 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80186a8:	2b02      	cmp	r3, #2
 80186aa:	d151      	bne.n	8018750 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80186ac:	7bfb      	ldrb	r3, [r7, #15]
 80186ae:	2b22      	cmp	r3, #34	; 0x22
 80186b0:	d10d      	bne.n	80186ce <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	681a      	ldr	r2, [r3, #0]
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80186c0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80186c6:	1c5a      	adds	r2, r3, #1
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	651a      	str	r2, [r3, #80]	; 0x50
}
 80186cc:	e040      	b.n	8018750 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80186d2:	b29b      	uxth	r3, r3
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d015      	beq.n	8018704 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80186d8:	7bfb      	ldrb	r3, [r7, #15]
 80186da:	2b21      	cmp	r3, #33	; 0x21
 80186dc:	d112      	bne.n	8018704 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186e2:	781a      	ldrb	r2, [r3, #0]
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186ee:	1c5a      	adds	r2, r3, #1
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80186f8:	b29b      	uxth	r3, r3
 80186fa:	3b01      	subs	r3, #1
 80186fc:	b29a      	uxth	r2, r3
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018702:	e025      	b.n	8018750 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018708:	b29b      	uxth	r3, r3
 801870a:	2b00      	cmp	r3, #0
 801870c:	d120      	bne.n	8018750 <I2C_MemoryTransmit_TXE_BTF+0x120>
 801870e:	7bfb      	ldrb	r3, [r7, #15]
 8018710:	2b21      	cmp	r3, #33	; 0x21
 8018712:	d11d      	bne.n	8018750 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	685a      	ldr	r2, [r3, #4]
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018722:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	681a      	ldr	r2, [r3, #0]
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018732:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	2200      	movs	r2, #0
 8018738:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	2220      	movs	r2, #32
 801873e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	2200      	movs	r2, #0
 8018746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 801874a:	6878      	ldr	r0, [r7, #4]
 801874c:	f7ff fe36 	bl	80183bc <HAL_I2C_MemTxCpltCallback>
}
 8018750:	bf00      	nop
 8018752:	3710      	adds	r7, #16
 8018754:	46bd      	mov	sp, r7
 8018756:	bd80      	pop	{r7, pc}

08018758 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8018758:	b580      	push	{r7, lr}
 801875a:	b084      	sub	sp, #16
 801875c:	af00      	add	r7, sp, #0
 801875e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018766:	b2db      	uxtb	r3, r3
 8018768:	2b22      	cmp	r3, #34	; 0x22
 801876a:	f040 80ac 	bne.w	80188c6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018772:	b29b      	uxth	r3, r3
 8018774:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	2b03      	cmp	r3, #3
 801877a:	d921      	bls.n	80187c0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	691a      	ldr	r2, [r3, #16]
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018786:	b2d2      	uxtb	r2, r2
 8018788:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801878e:	1c5a      	adds	r2, r3, #1
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018798:	b29b      	uxth	r3, r3
 801879a:	3b01      	subs	r3, #1
 801879c:	b29a      	uxth	r2, r3
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187a6:	b29b      	uxth	r3, r3
 80187a8:	2b03      	cmp	r3, #3
 80187aa:	f040 808c 	bne.w	80188c6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	685a      	ldr	r2, [r3, #4]
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80187bc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80187be:	e082      	b.n	80188c6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187c4:	2b02      	cmp	r3, #2
 80187c6:	d075      	beq.n	80188b4 <I2C_MasterReceive_RXNE+0x15c>
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	2b01      	cmp	r3, #1
 80187cc:	d002      	beq.n	80187d4 <I2C_MasterReceive_RXNE+0x7c>
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d16f      	bne.n	80188b4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80187d4:	6878      	ldr	r0, [r7, #4]
 80187d6:	f001 fafd 	bl	8019dd4 <I2C_WaitOnSTOPRequestThroughIT>
 80187da:	4603      	mov	r3, r0
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d142      	bne.n	8018866 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	681a      	ldr	r2, [r3, #0]
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80187ee:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	685a      	ldr	r2, [r3, #4]
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80187fe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	691a      	ldr	r2, [r3, #16]
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801880a:	b2d2      	uxtb	r2, r2
 801880c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018812:	1c5a      	adds	r2, r3, #1
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801881c:	b29b      	uxth	r3, r3
 801881e:	3b01      	subs	r3, #1
 8018820:	b29a      	uxth	r2, r3
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	2220      	movs	r2, #32
 801882a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018834:	b2db      	uxtb	r3, r3
 8018836:	2b40      	cmp	r3, #64	; 0x40
 8018838:	d10a      	bne.n	8018850 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	2200      	movs	r2, #0
 801883e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	2200      	movs	r2, #0
 8018846:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8018848:	6878      	ldr	r0, [r7, #4]
 801884a:	f7ff fdc1 	bl	80183d0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801884e:	e03a      	b.n	80188c6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	2200      	movs	r2, #0
 8018854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	2212      	movs	r2, #18
 801885c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 801885e:	6878      	ldr	r0, [r7, #4]
 8018860:	f7ff fd76 	bl	8018350 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018864:	e02f      	b.n	80188c6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	685a      	ldr	r2, [r3, #4]
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018874:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	691a      	ldr	r2, [r3, #16]
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018880:	b2d2      	uxtb	r2, r2
 8018882:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018888:	1c5a      	adds	r2, r3, #1
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018892:	b29b      	uxth	r3, r3
 8018894:	3b01      	subs	r3, #1
 8018896:	b29a      	uxth	r2, r3
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	2220      	movs	r2, #32
 80188a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	2200      	movs	r2, #0
 80188a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80188ac:	6878      	ldr	r0, [r7, #4]
 80188ae:	f7ff fd99 	bl	80183e4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80188b2:	e008      	b.n	80188c6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	685a      	ldr	r2, [r3, #4]
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80188c2:	605a      	str	r2, [r3, #4]
}
 80188c4:	e7ff      	b.n	80188c6 <I2C_MasterReceive_RXNE+0x16e>
 80188c6:	bf00      	nop
 80188c8:	3710      	adds	r7, #16
 80188ca:	46bd      	mov	sp, r7
 80188cc:	bd80      	pop	{r7, pc}

080188ce <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80188ce:	b580      	push	{r7, lr}
 80188d0:	b084      	sub	sp, #16
 80188d2:	af00      	add	r7, sp, #0
 80188d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188da:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80188e0:	b29b      	uxth	r3, r3
 80188e2:	2b04      	cmp	r3, #4
 80188e4:	d11b      	bne.n	801891e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	685a      	ldr	r2, [r3, #4]
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80188f4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	691a      	ldr	r2, [r3, #16]
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018900:	b2d2      	uxtb	r2, r2
 8018902:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018908:	1c5a      	adds	r2, r3, #1
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018912:	b29b      	uxth	r3, r3
 8018914:	3b01      	subs	r3, #1
 8018916:	b29a      	uxth	r2, r3
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801891c:	e0bd      	b.n	8018a9a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018922:	b29b      	uxth	r3, r3
 8018924:	2b03      	cmp	r3, #3
 8018926:	d129      	bne.n	801897c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	685a      	ldr	r2, [r3, #4]
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018936:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	2b04      	cmp	r3, #4
 801893c:	d00a      	beq.n	8018954 <I2C_MasterReceive_BTF+0x86>
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	2b02      	cmp	r3, #2
 8018942:	d007      	beq.n	8018954 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	681a      	ldr	r2, [r3, #0]
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018952:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	691a      	ldr	r2, [r3, #16]
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801895e:	b2d2      	uxtb	r2, r2
 8018960:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018966:	1c5a      	adds	r2, r3, #1
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018970:	b29b      	uxth	r3, r3
 8018972:	3b01      	subs	r3, #1
 8018974:	b29a      	uxth	r2, r3
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801897a:	e08e      	b.n	8018a9a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018980:	b29b      	uxth	r3, r3
 8018982:	2b02      	cmp	r3, #2
 8018984:	d176      	bne.n	8018a74 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	2b01      	cmp	r3, #1
 801898a:	d002      	beq.n	8018992 <I2C_MasterReceive_BTF+0xc4>
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	2b10      	cmp	r3, #16
 8018990:	d108      	bne.n	80189a4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	681a      	ldr	r2, [r3, #0]
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80189a0:	601a      	str	r2, [r3, #0]
 80189a2:	e019      	b.n	80189d8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	2b04      	cmp	r3, #4
 80189a8:	d002      	beq.n	80189b0 <I2C_MasterReceive_BTF+0xe2>
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	2b02      	cmp	r3, #2
 80189ae:	d108      	bne.n	80189c2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	681a      	ldr	r2, [r3, #0]
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80189be:	601a      	str	r2, [r3, #0]
 80189c0:	e00a      	b.n	80189d8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80189c2:	68fb      	ldr	r3, [r7, #12]
 80189c4:	2b10      	cmp	r3, #16
 80189c6:	d007      	beq.n	80189d8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	681a      	ldr	r2, [r3, #0]
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80189d6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	691a      	ldr	r2, [r3, #16]
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189e2:	b2d2      	uxtb	r2, r2
 80189e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189ea:	1c5a      	adds	r2, r3, #1
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80189f4:	b29b      	uxth	r3, r3
 80189f6:	3b01      	subs	r3, #1
 80189f8:	b29a      	uxth	r2, r3
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	691a      	ldr	r2, [r3, #16]
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a08:	b2d2      	uxtb	r2, r2
 8018a0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a10:	1c5a      	adds	r2, r3, #1
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a1a:	b29b      	uxth	r3, r3
 8018a1c:	3b01      	subs	r3, #1
 8018a1e:	b29a      	uxth	r2, r3
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	685a      	ldr	r2, [r3, #4]
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8018a32:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	2220      	movs	r2, #32
 8018a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018a42:	b2db      	uxtb	r3, r3
 8018a44:	2b40      	cmp	r3, #64	; 0x40
 8018a46:	d10a      	bne.n	8018a5e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	2200      	movs	r2, #0
 8018a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	2200      	movs	r2, #0
 8018a54:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8018a56:	6878      	ldr	r0, [r7, #4]
 8018a58:	f7ff fcba 	bl	80183d0 <HAL_I2C_MemRxCpltCallback>
}
 8018a5c:	e01d      	b.n	8018a9a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	2200      	movs	r2, #0
 8018a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	2212      	movs	r2, #18
 8018a6a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8018a6c:	6878      	ldr	r0, [r7, #4]
 8018a6e:	f7ff fc6f 	bl	8018350 <HAL_I2C_MasterRxCpltCallback>
}
 8018a72:	e012      	b.n	8018a9a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	691a      	ldr	r2, [r3, #16]
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a7e:	b2d2      	uxtb	r2, r2
 8018a80:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a86:	1c5a      	adds	r2, r3, #1
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a90:	b29b      	uxth	r3, r3
 8018a92:	3b01      	subs	r3, #1
 8018a94:	b29a      	uxth	r2, r3
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018a9a:	bf00      	nop
 8018a9c:	3710      	adds	r7, #16
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	bd80      	pop	{r7, pc}

08018aa2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8018aa2:	b480      	push	{r7}
 8018aa4:	b083      	sub	sp, #12
 8018aa6:	af00      	add	r7, sp, #0
 8018aa8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018ab0:	b2db      	uxtb	r3, r3
 8018ab2:	2b40      	cmp	r3, #64	; 0x40
 8018ab4:	d117      	bne.n	8018ae6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d109      	bne.n	8018ad2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ac2:	b2db      	uxtb	r3, r3
 8018ac4:	461a      	mov	r2, r3
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018ace:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8018ad0:	e067      	b.n	8018ba2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ad6:	b2db      	uxtb	r3, r3
 8018ad8:	f043 0301 	orr.w	r3, r3, #1
 8018adc:	b2da      	uxtb	r2, r3
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	611a      	str	r2, [r3, #16]
}
 8018ae4:	e05d      	b.n	8018ba2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	691b      	ldr	r3, [r3, #16]
 8018aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018aee:	d133      	bne.n	8018b58 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018af6:	b2db      	uxtb	r3, r3
 8018af8:	2b21      	cmp	r3, #33	; 0x21
 8018afa:	d109      	bne.n	8018b10 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b00:	b2db      	uxtb	r3, r3
 8018b02:	461a      	mov	r2, r3
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018b0c:	611a      	str	r2, [r3, #16]
 8018b0e:	e008      	b.n	8018b22 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b14:	b2db      	uxtb	r3, r3
 8018b16:	f043 0301 	orr.w	r3, r3, #1
 8018b1a:	b2da      	uxtb	r2, r3
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d004      	beq.n	8018b34 <I2C_Master_SB+0x92>
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d108      	bne.n	8018b46 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d032      	beq.n	8018ba2 <I2C_Master_SB+0x100>
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d02d      	beq.n	8018ba2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	685a      	ldr	r2, [r3, #4]
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018b54:	605a      	str	r2, [r3, #4]
}
 8018b56:	e024      	b.n	8018ba2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d10e      	bne.n	8018b7e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b64:	b29b      	uxth	r3, r3
 8018b66:	11db      	asrs	r3, r3, #7
 8018b68:	b2db      	uxtb	r3, r3
 8018b6a:	f003 0306 	and.w	r3, r3, #6
 8018b6e:	b2db      	uxtb	r3, r3
 8018b70:	f063 030f 	orn	r3, r3, #15
 8018b74:	b2da      	uxtb	r2, r3
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	611a      	str	r2, [r3, #16]
}
 8018b7c:	e011      	b.n	8018ba2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b82:	2b01      	cmp	r3, #1
 8018b84:	d10d      	bne.n	8018ba2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b8a:	b29b      	uxth	r3, r3
 8018b8c:	11db      	asrs	r3, r3, #7
 8018b8e:	b2db      	uxtb	r3, r3
 8018b90:	f003 0306 	and.w	r3, r3, #6
 8018b94:	b2db      	uxtb	r3, r3
 8018b96:	f063 030e 	orn	r3, r3, #14
 8018b9a:	b2da      	uxtb	r2, r3
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	611a      	str	r2, [r3, #16]
}
 8018ba2:	bf00      	nop
 8018ba4:	370c      	adds	r7, #12
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bac:	4770      	bx	lr

08018bae <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8018bae:	b480      	push	{r7}
 8018bb0:	b083      	sub	sp, #12
 8018bb2:	af00      	add	r7, sp, #0
 8018bb4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018bba:	b2da      	uxtb	r2, r3
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d004      	beq.n	8018bd4 <I2C_Master_ADD10+0x26>
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d108      	bne.n	8018be6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d00c      	beq.n	8018bf6 <I2C_Master_ADD10+0x48>
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d007      	beq.n	8018bf6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	685a      	ldr	r2, [r3, #4]
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018bf4:	605a      	str	r2, [r3, #4]
  }
}
 8018bf6:	bf00      	nop
 8018bf8:	370c      	adds	r7, #12
 8018bfa:	46bd      	mov	sp, r7
 8018bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c00:	4770      	bx	lr

08018c02 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8018c02:	b480      	push	{r7}
 8018c04:	b091      	sub	sp, #68	; 0x44
 8018c06:	af00      	add	r7, sp, #0
 8018c08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018c10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c18:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c1e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018c26:	b2db      	uxtb	r3, r3
 8018c28:	2b22      	cmp	r3, #34	; 0x22
 8018c2a:	f040 8169 	bne.w	8018f00 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d10f      	bne.n	8018c56 <I2C_Master_ADDR+0x54>
 8018c36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018c3a:	2b40      	cmp	r3, #64	; 0x40
 8018c3c:	d10b      	bne.n	8018c56 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018c3e:	2300      	movs	r3, #0
 8018c40:	633b      	str	r3, [r7, #48]	; 0x30
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	695b      	ldr	r3, [r3, #20]
 8018c48:	633b      	str	r3, [r7, #48]	; 0x30
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	699b      	ldr	r3, [r3, #24]
 8018c50:	633b      	str	r3, [r7, #48]	; 0x30
 8018c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c54:	e160      	b.n	8018f18 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d11d      	bne.n	8018c9a <I2C_Master_ADDR+0x98>
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	691b      	ldr	r3, [r3, #16]
 8018c62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8018c66:	d118      	bne.n	8018c9a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018c68:	2300      	movs	r3, #0
 8018c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	695b      	ldr	r3, [r3, #20]
 8018c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	699b      	ldr	r3, [r3, #24]
 8018c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	681a      	ldr	r2, [r3, #0]
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018c8c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c92:	1c5a      	adds	r2, r3, #1
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	651a      	str	r2, [r3, #80]	; 0x50
 8018c98:	e13e      	b.n	8018f18 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c9e:	b29b      	uxth	r3, r3
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d113      	bne.n	8018ccc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	695b      	ldr	r3, [r3, #20]
 8018cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	699b      	ldr	r3, [r3, #24]
 8018cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8018cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	681a      	ldr	r2, [r3, #0]
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018cc8:	601a      	str	r2, [r3, #0]
 8018cca:	e115      	b.n	8018ef8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cd0:	b29b      	uxth	r3, r3
 8018cd2:	2b01      	cmp	r3, #1
 8018cd4:	f040 808a 	bne.w	8018dec <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8018cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018cde:	d137      	bne.n	8018d50 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	681b      	ldr	r3, [r3, #0]
 8018ce4:	681a      	ldr	r2, [r3, #0]
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018cee:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	685b      	ldr	r3, [r3, #4]
 8018cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018cfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018cfe:	d113      	bne.n	8018d28 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	681a      	ldr	r2, [r3, #0]
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018d0e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018d10:	2300      	movs	r3, #0
 8018d12:	627b      	str	r3, [r7, #36]	; 0x24
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	695b      	ldr	r3, [r3, #20]
 8018d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	699b      	ldr	r3, [r3, #24]
 8018d22:	627b      	str	r3, [r7, #36]	; 0x24
 8018d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d26:	e0e7      	b.n	8018ef8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018d28:	2300      	movs	r3, #0
 8018d2a:	623b      	str	r3, [r7, #32]
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	695b      	ldr	r3, [r3, #20]
 8018d32:	623b      	str	r3, [r7, #32]
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	699b      	ldr	r3, [r3, #24]
 8018d3a:	623b      	str	r3, [r7, #32]
 8018d3c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	681a      	ldr	r2, [r3, #0]
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018d4c:	601a      	str	r2, [r3, #0]
 8018d4e:	e0d3      	b.n	8018ef8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8018d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d52:	2b08      	cmp	r3, #8
 8018d54:	d02e      	beq.n	8018db4 <I2C_Master_ADDR+0x1b2>
 8018d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d58:	2b20      	cmp	r3, #32
 8018d5a:	d02b      	beq.n	8018db4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8018d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018d5e:	2b12      	cmp	r3, #18
 8018d60:	d102      	bne.n	8018d68 <I2C_Master_ADDR+0x166>
 8018d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d64:	2b01      	cmp	r3, #1
 8018d66:	d125      	bne.n	8018db4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8018d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d6a:	2b04      	cmp	r3, #4
 8018d6c:	d00e      	beq.n	8018d8c <I2C_Master_ADDR+0x18a>
 8018d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d70:	2b02      	cmp	r3, #2
 8018d72:	d00b      	beq.n	8018d8c <I2C_Master_ADDR+0x18a>
 8018d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d76:	2b10      	cmp	r3, #16
 8018d78:	d008      	beq.n	8018d8c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	681b      	ldr	r3, [r3, #0]
 8018d7e:	681a      	ldr	r2, [r3, #0]
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018d88:	601a      	str	r2, [r3, #0]
 8018d8a:	e007      	b.n	8018d9c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	681b      	ldr	r3, [r3, #0]
 8018d90:	681a      	ldr	r2, [r3, #0]
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018d9a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	61fb      	str	r3, [r7, #28]
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	695b      	ldr	r3, [r3, #20]
 8018da6:	61fb      	str	r3, [r7, #28]
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	699b      	ldr	r3, [r3, #24]
 8018dae:	61fb      	str	r3, [r7, #28]
 8018db0:	69fb      	ldr	r3, [r7, #28]
 8018db2:	e0a1      	b.n	8018ef8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	681a      	ldr	r2, [r3, #0]
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018dc2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	61bb      	str	r3, [r7, #24]
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	695b      	ldr	r3, [r3, #20]
 8018dce:	61bb      	str	r3, [r7, #24]
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	699b      	ldr	r3, [r3, #24]
 8018dd6:	61bb      	str	r3, [r7, #24]
 8018dd8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	681a      	ldr	r2, [r3, #0]
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018de8:	601a      	str	r2, [r3, #0]
 8018dea:	e085      	b.n	8018ef8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018df0:	b29b      	uxth	r3, r3
 8018df2:	2b02      	cmp	r3, #2
 8018df4:	d14d      	bne.n	8018e92 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8018df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018df8:	2b04      	cmp	r3, #4
 8018dfa:	d016      	beq.n	8018e2a <I2C_Master_ADDR+0x228>
 8018dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dfe:	2b02      	cmp	r3, #2
 8018e00:	d013      	beq.n	8018e2a <I2C_Master_ADDR+0x228>
 8018e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e04:	2b10      	cmp	r3, #16
 8018e06:	d010      	beq.n	8018e2a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	681a      	ldr	r2, [r3, #0]
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018e16:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	681a      	ldr	r2, [r3, #0]
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018e26:	601a      	str	r2, [r3, #0]
 8018e28:	e007      	b.n	8018e3a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	681a      	ldr	r2, [r3, #0]
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018e38:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	685b      	ldr	r3, [r3, #4]
 8018e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018e48:	d117      	bne.n	8018e7a <I2C_Master_ADDR+0x278>
 8018e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018e50:	d00b      	beq.n	8018e6a <I2C_Master_ADDR+0x268>
 8018e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e54:	2b01      	cmp	r3, #1
 8018e56:	d008      	beq.n	8018e6a <I2C_Master_ADDR+0x268>
 8018e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e5a:	2b08      	cmp	r3, #8
 8018e5c:	d005      	beq.n	8018e6a <I2C_Master_ADDR+0x268>
 8018e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e60:	2b10      	cmp	r3, #16
 8018e62:	d002      	beq.n	8018e6a <I2C_Master_ADDR+0x268>
 8018e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e66:	2b20      	cmp	r3, #32
 8018e68:	d107      	bne.n	8018e7a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	685a      	ldr	r2, [r3, #4]
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018e78:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018e7a:	2300      	movs	r3, #0
 8018e7c:	617b      	str	r3, [r7, #20]
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	695b      	ldr	r3, [r3, #20]
 8018e84:	617b      	str	r3, [r7, #20]
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	699b      	ldr	r3, [r3, #24]
 8018e8c:	617b      	str	r3, [r7, #20]
 8018e8e:	697b      	ldr	r3, [r7, #20]
 8018e90:	e032      	b.n	8018ef8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	681a      	ldr	r2, [r3, #0]
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018ea0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	685b      	ldr	r3, [r3, #4]
 8018ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018eb0:	d117      	bne.n	8018ee2 <I2C_Master_ADDR+0x2e0>
 8018eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018eb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018eb8:	d00b      	beq.n	8018ed2 <I2C_Master_ADDR+0x2d0>
 8018eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ebc:	2b01      	cmp	r3, #1
 8018ebe:	d008      	beq.n	8018ed2 <I2C_Master_ADDR+0x2d0>
 8018ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ec2:	2b08      	cmp	r3, #8
 8018ec4:	d005      	beq.n	8018ed2 <I2C_Master_ADDR+0x2d0>
 8018ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ec8:	2b10      	cmp	r3, #16
 8018eca:	d002      	beq.n	8018ed2 <I2C_Master_ADDR+0x2d0>
 8018ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ece:	2b20      	cmp	r3, #32
 8018ed0:	d107      	bne.n	8018ee2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	685a      	ldr	r2, [r3, #4]
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018ee0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018ee2:	2300      	movs	r3, #0
 8018ee4:	613b      	str	r3, [r7, #16]
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	695b      	ldr	r3, [r3, #20]
 8018eec:	613b      	str	r3, [r7, #16]
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	699b      	ldr	r3, [r3, #24]
 8018ef4:	613b      	str	r3, [r7, #16]
 8018ef6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	2200      	movs	r2, #0
 8018efc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8018efe:	e00b      	b.n	8018f18 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018f00:	2300      	movs	r3, #0
 8018f02:	60fb      	str	r3, [r7, #12]
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	695b      	ldr	r3, [r3, #20]
 8018f0a:	60fb      	str	r3, [r7, #12]
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	699b      	ldr	r3, [r3, #24]
 8018f12:	60fb      	str	r3, [r7, #12]
 8018f14:	68fb      	ldr	r3, [r7, #12]
}
 8018f16:	e7ff      	b.n	8018f18 <I2C_Master_ADDR+0x316>
 8018f18:	bf00      	nop
 8018f1a:	3744      	adds	r7, #68	; 0x44
 8018f1c:	46bd      	mov	sp, r7
 8018f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f22:	4770      	bx	lr

08018f24 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b084      	sub	sp, #16
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018f32:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f38:	b29b      	uxth	r3, r3
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d02b      	beq.n	8018f96 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f42:	781a      	ldrb	r2, [r3, #0]
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f4e:	1c5a      	adds	r2, r3, #1
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f58:	b29b      	uxth	r3, r3
 8018f5a:	3b01      	subs	r3, #1
 8018f5c:	b29a      	uxth	r2, r3
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f66:	b29b      	uxth	r3, r3
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d114      	bne.n	8018f96 <I2C_SlaveTransmit_TXE+0x72>
 8018f6c:	7bfb      	ldrb	r3, [r7, #15]
 8018f6e:	2b29      	cmp	r3, #41	; 0x29
 8018f70:	d111      	bne.n	8018f96 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	685a      	ldr	r2, [r3, #4]
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018f80:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	2221      	movs	r2, #33	; 0x21
 8018f86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	2228      	movs	r2, #40	; 0x28
 8018f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8018f90:	6878      	ldr	r0, [r7, #4]
 8018f92:	f7ff f9e7 	bl	8018364 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8018f96:	bf00      	nop
 8018f98:	3710      	adds	r7, #16
 8018f9a:	46bd      	mov	sp, r7
 8018f9c:	bd80      	pop	{r7, pc}

08018f9e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8018f9e:	b480      	push	{r7}
 8018fa0:	b083      	sub	sp, #12
 8018fa2:	af00      	add	r7, sp, #0
 8018fa4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018faa:	b29b      	uxth	r3, r3
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d011      	beq.n	8018fd4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fb4:	781a      	ldrb	r2, [r3, #0]
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fc0:	1c5a      	adds	r2, r3, #1
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018fca:	b29b      	uxth	r3, r3
 8018fcc:	3b01      	subs	r3, #1
 8018fce:	b29a      	uxth	r2, r3
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8018fd4:	bf00      	nop
 8018fd6:	370c      	adds	r7, #12
 8018fd8:	46bd      	mov	sp, r7
 8018fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fde:	4770      	bx	lr

08018fe0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b084      	sub	sp, #16
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018fee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ff4:	b29b      	uxth	r3, r3
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d02c      	beq.n	8019054 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	691a      	ldr	r2, [r3, #16]
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019004:	b2d2      	uxtb	r2, r2
 8019006:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801900c:	1c5a      	adds	r2, r3, #1
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019016:	b29b      	uxth	r3, r3
 8019018:	3b01      	subs	r3, #1
 801901a:	b29a      	uxth	r2, r3
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019024:	b29b      	uxth	r3, r3
 8019026:	2b00      	cmp	r3, #0
 8019028:	d114      	bne.n	8019054 <I2C_SlaveReceive_RXNE+0x74>
 801902a:	7bfb      	ldrb	r3, [r7, #15]
 801902c:	2b2a      	cmp	r3, #42	; 0x2a
 801902e:	d111      	bne.n	8019054 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	685a      	ldr	r2, [r3, #4]
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801903e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	2222      	movs	r2, #34	; 0x22
 8019044:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	2228      	movs	r2, #40	; 0x28
 801904a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801904e:	6878      	ldr	r0, [r7, #4]
 8019050:	f7ff f992 	bl	8018378 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8019054:	bf00      	nop
 8019056:	3710      	adds	r7, #16
 8019058:	46bd      	mov	sp, r7
 801905a:	bd80      	pop	{r7, pc}

0801905c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801905c:	b480      	push	{r7}
 801905e:	b083      	sub	sp, #12
 8019060:	af00      	add	r7, sp, #0
 8019062:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019068:	b29b      	uxth	r3, r3
 801906a:	2b00      	cmp	r3, #0
 801906c:	d012      	beq.n	8019094 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	691a      	ldr	r2, [r3, #16]
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019078:	b2d2      	uxtb	r2, r2
 801907a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019080:	1c5a      	adds	r2, r3, #1
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801908a:	b29b      	uxth	r3, r3
 801908c:	3b01      	subs	r3, #1
 801908e:	b29a      	uxth	r2, r3
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8019094:	bf00      	nop
 8019096:	370c      	adds	r7, #12
 8019098:	46bd      	mov	sp, r7
 801909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801909e:	4770      	bx	lr

080190a0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80190a0:	b580      	push	{r7, lr}
 80190a2:	b084      	sub	sp, #16
 80190a4:	af00      	add	r7, sp, #0
 80190a6:	6078      	str	r0, [r7, #4]
 80190a8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80190aa:	2300      	movs	r3, #0
 80190ac:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80190b4:	b2db      	uxtb	r3, r3
 80190b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80190ba:	2b28      	cmp	r3, #40	; 0x28
 80190bc:	d127      	bne.n	801910e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	685a      	ldr	r2, [r3, #4]
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80190cc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80190ce:	683b      	ldr	r3, [r7, #0]
 80190d0:	089b      	lsrs	r3, r3, #2
 80190d2:	f003 0301 	and.w	r3, r3, #1
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d101      	bne.n	80190de <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80190da:	2301      	movs	r3, #1
 80190dc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80190de:	683b      	ldr	r3, [r7, #0]
 80190e0:	09db      	lsrs	r3, r3, #7
 80190e2:	f003 0301 	and.w	r3, r3, #1
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d103      	bne.n	80190f2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	68db      	ldr	r3, [r3, #12]
 80190ee:	81bb      	strh	r3, [r7, #12]
 80190f0:	e002      	b.n	80190f8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	699b      	ldr	r3, [r3, #24]
 80190f6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	2200      	movs	r2, #0
 80190fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8019100:	89ba      	ldrh	r2, [r7, #12]
 8019102:	7bfb      	ldrb	r3, [r7, #15]
 8019104:	4619      	mov	r1, r3
 8019106:	6878      	ldr	r0, [r7, #4]
 8019108:	f7ff f940 	bl	801838c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801910c:	e00e      	b.n	801912c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801910e:	2300      	movs	r3, #0
 8019110:	60bb      	str	r3, [r7, #8]
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	681b      	ldr	r3, [r3, #0]
 8019116:	695b      	ldr	r3, [r3, #20]
 8019118:	60bb      	str	r3, [r7, #8]
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	699b      	ldr	r3, [r3, #24]
 8019120:	60bb      	str	r3, [r7, #8]
 8019122:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	2200      	movs	r2, #0
 8019128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 801912c:	bf00      	nop
 801912e:	3710      	adds	r7, #16
 8019130:	46bd      	mov	sp, r7
 8019132:	bd80      	pop	{r7, pc}

08019134 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8019134:	b580      	push	{r7, lr}
 8019136:	b084      	sub	sp, #16
 8019138:	af00      	add	r7, sp, #0
 801913a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019142:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	681b      	ldr	r3, [r3, #0]
 8019148:	685a      	ldr	r2, [r3, #4]
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8019152:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8019154:	2300      	movs	r3, #0
 8019156:	60bb      	str	r3, [r7, #8]
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	695b      	ldr	r3, [r3, #20]
 801915e:	60bb      	str	r3, [r7, #8]
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	681a      	ldr	r2, [r3, #0]
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	f042 0201 	orr.w	r2, r2, #1
 801916e:	601a      	str	r2, [r3, #0]
 8019170:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	681a      	ldr	r2, [r3, #0]
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019180:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	685b      	ldr	r3, [r3, #4]
 8019188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801918c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019190:	d172      	bne.n	8019278 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8019192:	7bfb      	ldrb	r3, [r7, #15]
 8019194:	2b22      	cmp	r3, #34	; 0x22
 8019196:	d002      	beq.n	801919e <I2C_Slave_STOPF+0x6a>
 8019198:	7bfb      	ldrb	r3, [r7, #15]
 801919a:	2b2a      	cmp	r3, #42	; 0x2a
 801919c:	d135      	bne.n	801920a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	685b      	ldr	r3, [r3, #4]
 80191a6:	b29a      	uxth	r2, r3
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80191b0:	b29b      	uxth	r3, r3
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d005      	beq.n	80191c2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191ba:	f043 0204 	orr.w	r2, r3, #4
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	685a      	ldr	r2, [r3, #4]
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80191d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80191d6:	4618      	mov	r0, r3
 80191d8:	f7fd fdb4 	bl	8016d44 <HAL_DMA_GetState>
 80191dc:	4603      	mov	r3, r0
 80191de:	2b01      	cmp	r3, #1
 80191e0:	d049      	beq.n	8019276 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80191e6:	4a69      	ldr	r2, [pc, #420]	; (801938c <I2C_Slave_STOPF+0x258>)
 80191e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80191ee:	4618      	mov	r0, r3
 80191f0:	f7fd fbfc 	bl	80169ec <HAL_DMA_Abort_IT>
 80191f4:	4603      	mov	r3, r0
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d03d      	beq.n	8019276 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80191fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019200:	687a      	ldr	r2, [r7, #4]
 8019202:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8019204:	4610      	mov	r0, r2
 8019206:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8019208:	e035      	b.n	8019276 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	685b      	ldr	r3, [r3, #4]
 8019212:	b29a      	uxth	r2, r3
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801921c:	b29b      	uxth	r3, r3
 801921e:	2b00      	cmp	r3, #0
 8019220:	d005      	beq.n	801922e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019226:	f043 0204 	orr.w	r2, r3, #4
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	685a      	ldr	r2, [r3, #4]
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801923c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019242:	4618      	mov	r0, r3
 8019244:	f7fd fd7e 	bl	8016d44 <HAL_DMA_GetState>
 8019248:	4603      	mov	r3, r0
 801924a:	2b01      	cmp	r3, #1
 801924c:	d014      	beq.n	8019278 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019252:	4a4e      	ldr	r2, [pc, #312]	; (801938c <I2C_Slave_STOPF+0x258>)
 8019254:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801925a:	4618      	mov	r0, r3
 801925c:	f7fd fbc6 	bl	80169ec <HAL_DMA_Abort_IT>
 8019260:	4603      	mov	r3, r0
 8019262:	2b00      	cmp	r3, #0
 8019264:	d008      	beq.n	8019278 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801926a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801926c:	687a      	ldr	r2, [r7, #4]
 801926e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8019270:	4610      	mov	r0, r2
 8019272:	4798      	blx	r3
 8019274:	e000      	b.n	8019278 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8019276:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801927c:	b29b      	uxth	r3, r3
 801927e:	2b00      	cmp	r3, #0
 8019280:	d03e      	beq.n	8019300 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	695b      	ldr	r3, [r3, #20]
 8019288:	f003 0304 	and.w	r3, r3, #4
 801928c:	2b04      	cmp	r3, #4
 801928e:	d112      	bne.n	80192b6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	691a      	ldr	r2, [r3, #16]
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801929a:	b2d2      	uxtb	r2, r2
 801929c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192a2:	1c5a      	adds	r2, r3, #1
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192ac:	b29b      	uxth	r3, r3
 80192ae:	3b01      	subs	r3, #1
 80192b0:	b29a      	uxth	r2, r3
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	695b      	ldr	r3, [r3, #20]
 80192bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80192c0:	2b40      	cmp	r3, #64	; 0x40
 80192c2:	d112      	bne.n	80192ea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	691a      	ldr	r2, [r3, #16]
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192ce:	b2d2      	uxtb	r2, r2
 80192d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192d6:	1c5a      	adds	r2, r3, #1
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192e0:	b29b      	uxth	r3, r3
 80192e2:	3b01      	subs	r3, #1
 80192e4:	b29a      	uxth	r2, r3
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192ee:	b29b      	uxth	r3, r3
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d005      	beq.n	8019300 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192f8:	f043 0204 	orr.w	r2, r3, #4
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019304:	2b00      	cmp	r3, #0
 8019306:	d003      	beq.n	8019310 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8019308:	6878      	ldr	r0, [r7, #4]
 801930a:	f000 f8b3 	bl	8019474 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801930e:	e039      	b.n	8019384 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8019310:	7bfb      	ldrb	r3, [r7, #15]
 8019312:	2b2a      	cmp	r3, #42	; 0x2a
 8019314:	d109      	bne.n	801932a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	2200      	movs	r2, #0
 801931a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	2228      	movs	r2, #40	; 0x28
 8019320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8019324:	6878      	ldr	r0, [r7, #4]
 8019326:	f7ff f827 	bl	8018378 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019330:	b2db      	uxtb	r3, r3
 8019332:	2b28      	cmp	r3, #40	; 0x28
 8019334:	d111      	bne.n	801935a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	4a15      	ldr	r2, [pc, #84]	; (8019390 <I2C_Slave_STOPF+0x25c>)
 801933a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	2200      	movs	r2, #0
 8019340:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	2220      	movs	r2, #32
 8019346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	2200      	movs	r2, #0
 801934e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8019352:	6878      	ldr	r0, [r7, #4]
 8019354:	f7ff f828 	bl	80183a8 <HAL_I2C_ListenCpltCallback>
}
 8019358:	e014      	b.n	8019384 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801935e:	2b22      	cmp	r3, #34	; 0x22
 8019360:	d002      	beq.n	8019368 <I2C_Slave_STOPF+0x234>
 8019362:	7bfb      	ldrb	r3, [r7, #15]
 8019364:	2b22      	cmp	r3, #34	; 0x22
 8019366:	d10d      	bne.n	8019384 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	2200      	movs	r2, #0
 801936c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	2220      	movs	r2, #32
 8019372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	2200      	movs	r2, #0
 801937a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801937e:	6878      	ldr	r0, [r7, #4]
 8019380:	f7fe fffa 	bl	8018378 <HAL_I2C_SlaveRxCpltCallback>
}
 8019384:	bf00      	nop
 8019386:	3710      	adds	r7, #16
 8019388:	46bd      	mov	sp, r7
 801938a:	bd80      	pop	{r7, pc}
 801938c:	080199d5 	.word	0x080199d5
 8019390:	ffff0000 	.word	0xffff0000

08019394 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8019394:	b580      	push	{r7, lr}
 8019396:	b084      	sub	sp, #16
 8019398:	af00      	add	r7, sp, #0
 801939a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80193a2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193a8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80193aa:	68bb      	ldr	r3, [r7, #8]
 80193ac:	2b08      	cmp	r3, #8
 80193ae:	d002      	beq.n	80193b6 <I2C_Slave_AF+0x22>
 80193b0:	68bb      	ldr	r3, [r7, #8]
 80193b2:	2b20      	cmp	r3, #32
 80193b4:	d129      	bne.n	801940a <I2C_Slave_AF+0x76>
 80193b6:	7bfb      	ldrb	r3, [r7, #15]
 80193b8:	2b28      	cmp	r3, #40	; 0x28
 80193ba:	d126      	bne.n	801940a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	4a2c      	ldr	r2, [pc, #176]	; (8019470 <I2C_Slave_AF+0xdc>)
 80193c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	685a      	ldr	r2, [r3, #4]
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80193d0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80193da:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	681a      	ldr	r2, [r3, #0]
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80193ea:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	2200      	movs	r2, #0
 80193f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	2220      	movs	r2, #32
 80193f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	2200      	movs	r2, #0
 80193fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8019402:	6878      	ldr	r0, [r7, #4]
 8019404:	f7fe ffd0 	bl	80183a8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8019408:	e02e      	b.n	8019468 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801940a:	7bfb      	ldrb	r3, [r7, #15]
 801940c:	2b21      	cmp	r3, #33	; 0x21
 801940e:	d126      	bne.n	801945e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	4a17      	ldr	r2, [pc, #92]	; (8019470 <I2C_Slave_AF+0xdc>)
 8019414:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	2221      	movs	r2, #33	; 0x21
 801941a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	2220      	movs	r2, #32
 8019420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	2200      	movs	r2, #0
 8019428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	685a      	ldr	r2, [r3, #4]
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801943a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019444:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	681a      	ldr	r2, [r3, #0]
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019454:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8019456:	6878      	ldr	r0, [r7, #4]
 8019458:	f7fe ff84 	bl	8018364 <HAL_I2C_SlaveTxCpltCallback>
}
 801945c:	e004      	b.n	8019468 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019466:	615a      	str	r2, [r3, #20]
}
 8019468:	bf00      	nop
 801946a:	3710      	adds	r7, #16
 801946c:	46bd      	mov	sp, r7
 801946e:	bd80      	pop	{r7, pc}
 8019470:	ffff0000 	.word	0xffff0000

08019474 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8019474:	b580      	push	{r7, lr}
 8019476:	b084      	sub	sp, #16
 8019478:	af00      	add	r7, sp, #0
 801947a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019482:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801948a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801948c:	7bbb      	ldrb	r3, [r7, #14]
 801948e:	2b10      	cmp	r3, #16
 8019490:	d002      	beq.n	8019498 <I2C_ITError+0x24>
 8019492:	7bbb      	ldrb	r3, [r7, #14]
 8019494:	2b40      	cmp	r3, #64	; 0x40
 8019496:	d10a      	bne.n	80194ae <I2C_ITError+0x3a>
 8019498:	7bfb      	ldrb	r3, [r7, #15]
 801949a:	2b22      	cmp	r3, #34	; 0x22
 801949c:	d107      	bne.n	80194ae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	681a      	ldr	r2, [r3, #0]
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80194ac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80194ae:	7bfb      	ldrb	r3, [r7, #15]
 80194b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80194b4:	2b28      	cmp	r3, #40	; 0x28
 80194b6:	d107      	bne.n	80194c8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	2200      	movs	r2, #0
 80194bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	2228      	movs	r2, #40	; 0x28
 80194c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80194c6:	e015      	b.n	80194f4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	685b      	ldr	r3, [r3, #4]
 80194ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80194d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80194d6:	d00a      	beq.n	80194ee <I2C_ITError+0x7a>
 80194d8:	7bfb      	ldrb	r3, [r7, #15]
 80194da:	2b60      	cmp	r3, #96	; 0x60
 80194dc:	d007      	beq.n	80194ee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	2220      	movs	r2, #32
 80194e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	2200      	movs	r2, #0
 80194ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	2200      	movs	r2, #0
 80194f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	685b      	ldr	r3, [r3, #4]
 80194fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80194fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019502:	d162      	bne.n	80195ca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	685a      	ldr	r2, [r3, #4]
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019512:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801951c:	b2db      	uxtb	r3, r3
 801951e:	2b01      	cmp	r3, #1
 8019520:	d020      	beq.n	8019564 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019526:	4a6a      	ldr	r2, [pc, #424]	; (80196d0 <I2C_ITError+0x25c>)
 8019528:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801952e:	4618      	mov	r0, r3
 8019530:	f7fd fa5c 	bl	80169ec <HAL_DMA_Abort_IT>
 8019534:	4603      	mov	r3, r0
 8019536:	2b00      	cmp	r3, #0
 8019538:	f000 8089 	beq.w	801964e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	681a      	ldr	r2, [r3, #0]
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	f022 0201 	bic.w	r2, r2, #1
 801954a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	2220      	movs	r2, #32
 8019550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801955a:	687a      	ldr	r2, [r7, #4]
 801955c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801955e:	4610      	mov	r0, r2
 8019560:	4798      	blx	r3
 8019562:	e074      	b.n	801964e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019568:	4a59      	ldr	r2, [pc, #356]	; (80196d0 <I2C_ITError+0x25c>)
 801956a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019570:	4618      	mov	r0, r3
 8019572:	f7fd fa3b 	bl	80169ec <HAL_DMA_Abort_IT>
 8019576:	4603      	mov	r3, r0
 8019578:	2b00      	cmp	r3, #0
 801957a:	d068      	beq.n	801964e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	695b      	ldr	r3, [r3, #20]
 8019582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019586:	2b40      	cmp	r3, #64	; 0x40
 8019588:	d10b      	bne.n	80195a2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	691a      	ldr	r2, [r3, #16]
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019594:	b2d2      	uxtb	r2, r2
 8019596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801959c:	1c5a      	adds	r2, r3, #1
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	681a      	ldr	r2, [r3, #0]
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	f022 0201 	bic.w	r2, r2, #1
 80195b0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	2220      	movs	r2, #32
 80195b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80195be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80195c0:	687a      	ldr	r2, [r7, #4]
 80195c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80195c4:	4610      	mov	r0, r2
 80195c6:	4798      	blx	r3
 80195c8:	e041      	b.n	801964e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80195d0:	b2db      	uxtb	r3, r3
 80195d2:	2b60      	cmp	r3, #96	; 0x60
 80195d4:	d125      	bne.n	8019622 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	2220      	movs	r2, #32
 80195da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	2200      	movs	r2, #0
 80195e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	695b      	ldr	r3, [r3, #20]
 80195ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80195ee:	2b40      	cmp	r3, #64	; 0x40
 80195f0:	d10b      	bne.n	801960a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	691a      	ldr	r2, [r3, #16]
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195fc:	b2d2      	uxtb	r2, r2
 80195fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019604:	1c5a      	adds	r2, r3, #1
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	681a      	ldr	r2, [r3, #0]
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	f022 0201 	bic.w	r2, r2, #1
 8019618:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801961a:	6878      	ldr	r0, [r7, #4]
 801961c:	f7fe feec 	bl	80183f8 <HAL_I2C_AbortCpltCallback>
 8019620:	e015      	b.n	801964e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	695b      	ldr	r3, [r3, #20]
 8019628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801962c:	2b40      	cmp	r3, #64	; 0x40
 801962e:	d10b      	bne.n	8019648 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	691a      	ldr	r2, [r3, #16]
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801963a:	b2d2      	uxtb	r2, r2
 801963c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019642:	1c5a      	adds	r2, r3, #1
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8019648:	6878      	ldr	r0, [r7, #4]
 801964a:	f7fe fecb 	bl	80183e4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019652:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8019654:	68bb      	ldr	r3, [r7, #8]
 8019656:	f003 0301 	and.w	r3, r3, #1
 801965a:	2b00      	cmp	r3, #0
 801965c:	d10e      	bne.n	801967c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801965e:	68bb      	ldr	r3, [r7, #8]
 8019660:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8019664:	2b00      	cmp	r3, #0
 8019666:	d109      	bne.n	801967c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8019668:	68bb      	ldr	r3, [r7, #8]
 801966a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801966e:	2b00      	cmp	r3, #0
 8019670:	d104      	bne.n	801967c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8019672:	68bb      	ldr	r3, [r7, #8]
 8019674:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8019678:	2b00      	cmp	r3, #0
 801967a:	d007      	beq.n	801968c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	685a      	ldr	r2, [r3, #4]
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801968a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019692:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019698:	f003 0304 	and.w	r3, r3, #4
 801969c:	2b04      	cmp	r3, #4
 801969e:	d113      	bne.n	80196c8 <I2C_ITError+0x254>
 80196a0:	7bfb      	ldrb	r3, [r7, #15]
 80196a2:	2b28      	cmp	r3, #40	; 0x28
 80196a4:	d110      	bne.n	80196c8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	4a0a      	ldr	r2, [pc, #40]	; (80196d4 <I2C_ITError+0x260>)
 80196aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	2200      	movs	r2, #0
 80196b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	2220      	movs	r2, #32
 80196b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	2200      	movs	r2, #0
 80196be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80196c2:	6878      	ldr	r0, [r7, #4]
 80196c4:	f7fe fe70 	bl	80183a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80196c8:	bf00      	nop
 80196ca:	3710      	adds	r7, #16
 80196cc:	46bd      	mov	sp, r7
 80196ce:	bd80      	pop	{r7, pc}
 80196d0:	080199d5 	.word	0x080199d5
 80196d4:	ffff0000 	.word	0xffff0000

080196d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80196d8:	b580      	push	{r7, lr}
 80196da:	b088      	sub	sp, #32
 80196dc:	af02      	add	r7, sp, #8
 80196de:	60f8      	str	r0, [r7, #12]
 80196e0:	4608      	mov	r0, r1
 80196e2:	4611      	mov	r1, r2
 80196e4:	461a      	mov	r2, r3
 80196e6:	4603      	mov	r3, r0
 80196e8:	817b      	strh	r3, [r7, #10]
 80196ea:	460b      	mov	r3, r1
 80196ec:	813b      	strh	r3, [r7, #8]
 80196ee:	4613      	mov	r3, r2
 80196f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	681a      	ldr	r2, [r3, #0]
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019700:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019704:	9300      	str	r3, [sp, #0]
 8019706:	6a3b      	ldr	r3, [r7, #32]
 8019708:	2200      	movs	r2, #0
 801970a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801970e:	68f8      	ldr	r0, [r7, #12]
 8019710:	f000 fa08 	bl	8019b24 <I2C_WaitOnFlagUntilTimeout>
 8019714:	4603      	mov	r3, r0
 8019716:	2b00      	cmp	r3, #0
 8019718:	d00d      	beq.n	8019736 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019728:	d103      	bne.n	8019732 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019730:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019732:	2303      	movs	r3, #3
 8019734:	e05f      	b.n	80197f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8019736:	897b      	ldrh	r3, [r7, #10]
 8019738:	b2db      	uxtb	r3, r3
 801973a:	461a      	mov	r2, r3
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8019744:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019748:	6a3a      	ldr	r2, [r7, #32]
 801974a:	492d      	ldr	r1, [pc, #180]	; (8019800 <I2C_RequestMemoryWrite+0x128>)
 801974c:	68f8      	ldr	r0, [r7, #12]
 801974e:	f000 fa40 	bl	8019bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019752:	4603      	mov	r3, r0
 8019754:	2b00      	cmp	r3, #0
 8019756:	d001      	beq.n	801975c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8019758:	2301      	movs	r3, #1
 801975a:	e04c      	b.n	80197f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801975c:	2300      	movs	r3, #0
 801975e:	617b      	str	r3, [r7, #20]
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	695b      	ldr	r3, [r3, #20]
 8019766:	617b      	str	r3, [r7, #20]
 8019768:	68fb      	ldr	r3, [r7, #12]
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	699b      	ldr	r3, [r3, #24]
 801976e:	617b      	str	r3, [r7, #20]
 8019770:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019774:	6a39      	ldr	r1, [r7, #32]
 8019776:	68f8      	ldr	r0, [r7, #12]
 8019778:	f000 faaa 	bl	8019cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 801977c:	4603      	mov	r3, r0
 801977e:	2b00      	cmp	r3, #0
 8019780:	d00d      	beq.n	801979e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019786:	2b04      	cmp	r3, #4
 8019788:	d107      	bne.n	801979a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801978a:	68fb      	ldr	r3, [r7, #12]
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	681a      	ldr	r2, [r3, #0]
 8019790:	68fb      	ldr	r3, [r7, #12]
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019798:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801979a:	2301      	movs	r3, #1
 801979c:	e02b      	b.n	80197f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801979e:	88fb      	ldrh	r3, [r7, #6]
 80197a0:	2b01      	cmp	r3, #1
 80197a2:	d105      	bne.n	80197b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80197a4:	893b      	ldrh	r3, [r7, #8]
 80197a6:	b2da      	uxtb	r2, r3
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	611a      	str	r2, [r3, #16]
 80197ae:	e021      	b.n	80197f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80197b0:	893b      	ldrh	r3, [r7, #8]
 80197b2:	0a1b      	lsrs	r3, r3, #8
 80197b4:	b29b      	uxth	r3, r3
 80197b6:	b2da      	uxtb	r2, r3
 80197b8:	68fb      	ldr	r3, [r7, #12]
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80197be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197c0:	6a39      	ldr	r1, [r7, #32]
 80197c2:	68f8      	ldr	r0, [r7, #12]
 80197c4:	f000 fa84 	bl	8019cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80197c8:	4603      	mov	r3, r0
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d00d      	beq.n	80197ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197d2:	2b04      	cmp	r3, #4
 80197d4:	d107      	bne.n	80197e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	681a      	ldr	r2, [r3, #0]
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80197e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80197e6:	2301      	movs	r3, #1
 80197e8:	e005      	b.n	80197f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80197ea:	893b      	ldrh	r3, [r7, #8]
 80197ec:	b2da      	uxtb	r2, r3
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80197f4:	2300      	movs	r3, #0
}
 80197f6:	4618      	mov	r0, r3
 80197f8:	3718      	adds	r7, #24
 80197fa:	46bd      	mov	sp, r7
 80197fc:	bd80      	pop	{r7, pc}
 80197fe:	bf00      	nop
 8019800:	00010002 	.word	0x00010002

08019804 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8019804:	b580      	push	{r7, lr}
 8019806:	b088      	sub	sp, #32
 8019808:	af02      	add	r7, sp, #8
 801980a:	60f8      	str	r0, [r7, #12]
 801980c:	4608      	mov	r0, r1
 801980e:	4611      	mov	r1, r2
 8019810:	461a      	mov	r2, r3
 8019812:	4603      	mov	r3, r0
 8019814:	817b      	strh	r3, [r7, #10]
 8019816:	460b      	mov	r3, r1
 8019818:	813b      	strh	r3, [r7, #8]
 801981a:	4613      	mov	r3, r2
 801981c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801981e:	68fb      	ldr	r3, [r7, #12]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	681a      	ldr	r2, [r3, #0]
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801982c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801982e:	68fb      	ldr	r3, [r7, #12]
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	681a      	ldr	r2, [r3, #0]
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801983c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019840:	9300      	str	r3, [sp, #0]
 8019842:	6a3b      	ldr	r3, [r7, #32]
 8019844:	2200      	movs	r2, #0
 8019846:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801984a:	68f8      	ldr	r0, [r7, #12]
 801984c:	f000 f96a 	bl	8019b24 <I2C_WaitOnFlagUntilTimeout>
 8019850:	4603      	mov	r3, r0
 8019852:	2b00      	cmp	r3, #0
 8019854:	d00d      	beq.n	8019872 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019864:	d103      	bne.n	801986e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	f44f 7200 	mov.w	r2, #512	; 0x200
 801986c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801986e:	2303      	movs	r3, #3
 8019870:	e0aa      	b.n	80199c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8019872:	897b      	ldrh	r3, [r7, #10]
 8019874:	b2db      	uxtb	r3, r3
 8019876:	461a      	mov	r2, r3
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8019880:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019884:	6a3a      	ldr	r2, [r7, #32]
 8019886:	4952      	ldr	r1, [pc, #328]	; (80199d0 <I2C_RequestMemoryRead+0x1cc>)
 8019888:	68f8      	ldr	r0, [r7, #12]
 801988a:	f000 f9a2 	bl	8019bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801988e:	4603      	mov	r3, r0
 8019890:	2b00      	cmp	r3, #0
 8019892:	d001      	beq.n	8019898 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8019894:	2301      	movs	r3, #1
 8019896:	e097      	b.n	80199c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019898:	2300      	movs	r3, #0
 801989a:	617b      	str	r3, [r7, #20]
 801989c:	68fb      	ldr	r3, [r7, #12]
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	695b      	ldr	r3, [r3, #20]
 80198a2:	617b      	str	r3, [r7, #20]
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	699b      	ldr	r3, [r3, #24]
 80198aa:	617b      	str	r3, [r7, #20]
 80198ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80198ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198b0:	6a39      	ldr	r1, [r7, #32]
 80198b2:	68f8      	ldr	r0, [r7, #12]
 80198b4:	f000 fa0c 	bl	8019cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80198b8:	4603      	mov	r3, r0
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d00d      	beq.n	80198da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198c2:	2b04      	cmp	r3, #4
 80198c4:	d107      	bne.n	80198d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80198c6:	68fb      	ldr	r3, [r7, #12]
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	681a      	ldr	r2, [r3, #0]
 80198cc:	68fb      	ldr	r3, [r7, #12]
 80198ce:	681b      	ldr	r3, [r3, #0]
 80198d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80198d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80198d6:	2301      	movs	r3, #1
 80198d8:	e076      	b.n	80199c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80198da:	88fb      	ldrh	r3, [r7, #6]
 80198dc:	2b01      	cmp	r3, #1
 80198de:	d105      	bne.n	80198ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80198e0:	893b      	ldrh	r3, [r7, #8]
 80198e2:	b2da      	uxtb	r2, r3
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	611a      	str	r2, [r3, #16]
 80198ea:	e021      	b.n	8019930 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80198ec:	893b      	ldrh	r3, [r7, #8]
 80198ee:	0a1b      	lsrs	r3, r3, #8
 80198f0:	b29b      	uxth	r3, r3
 80198f2:	b2da      	uxtb	r2, r3
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	681b      	ldr	r3, [r3, #0]
 80198f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80198fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198fc:	6a39      	ldr	r1, [r7, #32]
 80198fe:	68f8      	ldr	r0, [r7, #12]
 8019900:	f000 f9e6 	bl	8019cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8019904:	4603      	mov	r3, r0
 8019906:	2b00      	cmp	r3, #0
 8019908:	d00d      	beq.n	8019926 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801990a:	68fb      	ldr	r3, [r7, #12]
 801990c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801990e:	2b04      	cmp	r3, #4
 8019910:	d107      	bne.n	8019922 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019912:	68fb      	ldr	r3, [r7, #12]
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	681a      	ldr	r2, [r3, #0]
 8019918:	68fb      	ldr	r3, [r7, #12]
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019920:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8019922:	2301      	movs	r3, #1
 8019924:	e050      	b.n	80199c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019926:	893b      	ldrh	r3, [r7, #8]
 8019928:	b2da      	uxtb	r2, r3
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019932:	6a39      	ldr	r1, [r7, #32]
 8019934:	68f8      	ldr	r0, [r7, #12]
 8019936:	f000 f9cb 	bl	8019cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 801993a:	4603      	mov	r3, r0
 801993c:	2b00      	cmp	r3, #0
 801993e:	d00d      	beq.n	801995c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019940:	68fb      	ldr	r3, [r7, #12]
 8019942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019944:	2b04      	cmp	r3, #4
 8019946:	d107      	bne.n	8019958 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	681a      	ldr	r2, [r3, #0]
 801994e:	68fb      	ldr	r3, [r7, #12]
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019956:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8019958:	2301      	movs	r3, #1
 801995a:	e035      	b.n	80199c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	681a      	ldr	r2, [r3, #0]
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801996a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801996e:	9300      	str	r3, [sp, #0]
 8019970:	6a3b      	ldr	r3, [r7, #32]
 8019972:	2200      	movs	r2, #0
 8019974:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019978:	68f8      	ldr	r0, [r7, #12]
 801997a:	f000 f8d3 	bl	8019b24 <I2C_WaitOnFlagUntilTimeout>
 801997e:	4603      	mov	r3, r0
 8019980:	2b00      	cmp	r3, #0
 8019982:	d00d      	beq.n	80199a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801998e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019992:	d103      	bne.n	801999c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	f44f 7200 	mov.w	r2, #512	; 0x200
 801999a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801999c:	2303      	movs	r3, #3
 801999e:	e013      	b.n	80199c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80199a0:	897b      	ldrh	r3, [r7, #10]
 80199a2:	b2db      	uxtb	r3, r3
 80199a4:	f043 0301 	orr.w	r3, r3, #1
 80199a8:	b2da      	uxtb	r2, r3
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80199b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199b2:	6a3a      	ldr	r2, [r7, #32]
 80199b4:	4906      	ldr	r1, [pc, #24]	; (80199d0 <I2C_RequestMemoryRead+0x1cc>)
 80199b6:	68f8      	ldr	r0, [r7, #12]
 80199b8:	f000 f90b 	bl	8019bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80199bc:	4603      	mov	r3, r0
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d001      	beq.n	80199c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80199c2:	2301      	movs	r3, #1
 80199c4:	e000      	b.n	80199c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80199c6:	2300      	movs	r3, #0
}
 80199c8:	4618      	mov	r0, r3
 80199ca:	3718      	adds	r7, #24
 80199cc:	46bd      	mov	sp, r7
 80199ce:	bd80      	pop	{r7, pc}
 80199d0:	00010002 	.word	0x00010002

080199d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80199d4:	b580      	push	{r7, lr}
 80199d6:	b086      	sub	sp, #24
 80199d8:	af00      	add	r7, sp, #0
 80199da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80199dc:	2300      	movs	r3, #0
 80199de:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80199e4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80199e6:	697b      	ldr	r3, [r7, #20]
 80199e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80199ec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80199ee:	4b4b      	ldr	r3, [pc, #300]	; (8019b1c <I2C_DMAAbort+0x148>)
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	08db      	lsrs	r3, r3, #3
 80199f4:	4a4a      	ldr	r2, [pc, #296]	; (8019b20 <I2C_DMAAbort+0x14c>)
 80199f6:	fba2 2303 	umull	r2, r3, r2, r3
 80199fa:	0a1a      	lsrs	r2, r3, #8
 80199fc:	4613      	mov	r3, r2
 80199fe:	009b      	lsls	r3, r3, #2
 8019a00:	4413      	add	r3, r2
 8019a02:	00da      	lsls	r2, r3, #3
 8019a04:	1ad3      	subs	r3, r2, r3
 8019a06:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d106      	bne.n	8019a1c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019a0e:	697b      	ldr	r3, [r7, #20]
 8019a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a12:	f043 0220 	orr.w	r2, r3, #32
 8019a16:	697b      	ldr	r3, [r7, #20]
 8019a18:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8019a1a:	e00a      	b.n	8019a32 <I2C_DMAAbort+0x5e>
    }
    count--;
 8019a1c:	68fb      	ldr	r3, [r7, #12]
 8019a1e:	3b01      	subs	r3, #1
 8019a20:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8019a22:	697b      	ldr	r3, [r7, #20]
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019a30:	d0ea      	beq.n	8019a08 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8019a32:	697b      	ldr	r3, [r7, #20]
 8019a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d003      	beq.n	8019a42 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8019a3a:	697b      	ldr	r3, [r7, #20]
 8019a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a3e:	2200      	movs	r2, #0
 8019a40:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8019a42:	697b      	ldr	r3, [r7, #20]
 8019a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	d003      	beq.n	8019a52 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8019a4a:	697b      	ldr	r3, [r7, #20]
 8019a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a4e:	2200      	movs	r2, #0
 8019a50:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019a52:	697b      	ldr	r3, [r7, #20]
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	681a      	ldr	r2, [r3, #0]
 8019a58:	697b      	ldr	r3, [r7, #20]
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019a60:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8019a62:	697b      	ldr	r3, [r7, #20]
 8019a64:	2200      	movs	r2, #0
 8019a66:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8019a68:	697b      	ldr	r3, [r7, #20]
 8019a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d003      	beq.n	8019a78 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8019a70:	697b      	ldr	r3, [r7, #20]
 8019a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a74:	2200      	movs	r2, #0
 8019a76:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8019a78:	697b      	ldr	r3, [r7, #20]
 8019a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	d003      	beq.n	8019a88 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8019a80:	697b      	ldr	r3, [r7, #20]
 8019a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a84:	2200      	movs	r2, #0
 8019a86:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8019a88:	697b      	ldr	r3, [r7, #20]
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	681a      	ldr	r2, [r3, #0]
 8019a8e:	697b      	ldr	r3, [r7, #20]
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	f022 0201 	bic.w	r2, r2, #1
 8019a96:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8019a98:	697b      	ldr	r3, [r7, #20]
 8019a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019a9e:	b2db      	uxtb	r3, r3
 8019aa0:	2b60      	cmp	r3, #96	; 0x60
 8019aa2:	d10e      	bne.n	8019ac2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8019aa4:	697b      	ldr	r3, [r7, #20]
 8019aa6:	2220      	movs	r2, #32
 8019aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019aac:	697b      	ldr	r3, [r7, #20]
 8019aae:	2200      	movs	r2, #0
 8019ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8019ab4:	697b      	ldr	r3, [r7, #20]
 8019ab6:	2200      	movs	r2, #0
 8019ab8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8019aba:	6978      	ldr	r0, [r7, #20]
 8019abc:	f7fe fc9c 	bl	80183f8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019ac0:	e027      	b.n	8019b12 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8019ac2:	7cfb      	ldrb	r3, [r7, #19]
 8019ac4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019ac8:	2b28      	cmp	r3, #40	; 0x28
 8019aca:	d117      	bne.n	8019afc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8019acc:	697b      	ldr	r3, [r7, #20]
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	681a      	ldr	r2, [r3, #0]
 8019ad2:	697b      	ldr	r3, [r7, #20]
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	f042 0201 	orr.w	r2, r2, #1
 8019ada:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019adc:	697b      	ldr	r3, [r7, #20]
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	681a      	ldr	r2, [r3, #0]
 8019ae2:	697b      	ldr	r3, [r7, #20]
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019aea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8019aec:	697b      	ldr	r3, [r7, #20]
 8019aee:	2200      	movs	r2, #0
 8019af0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019af2:	697b      	ldr	r3, [r7, #20]
 8019af4:	2228      	movs	r2, #40	; 0x28
 8019af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8019afa:	e007      	b.n	8019b0c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8019afc:	697b      	ldr	r3, [r7, #20]
 8019afe:	2220      	movs	r2, #32
 8019b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019b04:	697b      	ldr	r3, [r7, #20]
 8019b06:	2200      	movs	r2, #0
 8019b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8019b0c:	6978      	ldr	r0, [r7, #20]
 8019b0e:	f7fe fc69 	bl	80183e4 <HAL_I2C_ErrorCallback>
}
 8019b12:	bf00      	nop
 8019b14:	3718      	adds	r7, #24
 8019b16:	46bd      	mov	sp, r7
 8019b18:	bd80      	pop	{r7, pc}
 8019b1a:	bf00      	nop
 8019b1c:	2000018c 	.word	0x2000018c
 8019b20:	14f8b589 	.word	0x14f8b589

08019b24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8019b24:	b580      	push	{r7, lr}
 8019b26:	b084      	sub	sp, #16
 8019b28:	af00      	add	r7, sp, #0
 8019b2a:	60f8      	str	r0, [r7, #12]
 8019b2c:	60b9      	str	r1, [r7, #8]
 8019b2e:	603b      	str	r3, [r7, #0]
 8019b30:	4613      	mov	r3, r2
 8019b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019b34:	e025      	b.n	8019b82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019b36:	683b      	ldr	r3, [r7, #0]
 8019b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b3c:	d021      	beq.n	8019b82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019b3e:	f7fc fc9d 	bl	801647c <HAL_GetTick>
 8019b42:	4602      	mov	r2, r0
 8019b44:	69bb      	ldr	r3, [r7, #24]
 8019b46:	1ad3      	subs	r3, r2, r3
 8019b48:	683a      	ldr	r2, [r7, #0]
 8019b4a:	429a      	cmp	r2, r3
 8019b4c:	d302      	bcc.n	8019b54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8019b4e:	683b      	ldr	r3, [r7, #0]
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d116      	bne.n	8019b82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	2200      	movs	r2, #0
 8019b58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8019b5a:	68fb      	ldr	r3, [r7, #12]
 8019b5c:	2220      	movs	r2, #32
 8019b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8019b62:	68fb      	ldr	r3, [r7, #12]
 8019b64:	2200      	movs	r2, #0
 8019b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8019b6a:	68fb      	ldr	r3, [r7, #12]
 8019b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b6e:	f043 0220 	orr.w	r2, r3, #32
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	2200      	movs	r2, #0
 8019b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019b7e:	2301      	movs	r3, #1
 8019b80:	e023      	b.n	8019bca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019b82:	68bb      	ldr	r3, [r7, #8]
 8019b84:	0c1b      	lsrs	r3, r3, #16
 8019b86:	b2db      	uxtb	r3, r3
 8019b88:	2b01      	cmp	r3, #1
 8019b8a:	d10d      	bne.n	8019ba8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8019b8c:	68fb      	ldr	r3, [r7, #12]
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	695b      	ldr	r3, [r3, #20]
 8019b92:	43da      	mvns	r2, r3
 8019b94:	68bb      	ldr	r3, [r7, #8]
 8019b96:	4013      	ands	r3, r2
 8019b98:	b29b      	uxth	r3, r3
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	bf0c      	ite	eq
 8019b9e:	2301      	moveq	r3, #1
 8019ba0:	2300      	movne	r3, #0
 8019ba2:	b2db      	uxtb	r3, r3
 8019ba4:	461a      	mov	r2, r3
 8019ba6:	e00c      	b.n	8019bc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	699b      	ldr	r3, [r3, #24]
 8019bae:	43da      	mvns	r2, r3
 8019bb0:	68bb      	ldr	r3, [r7, #8]
 8019bb2:	4013      	ands	r3, r2
 8019bb4:	b29b      	uxth	r3, r3
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	bf0c      	ite	eq
 8019bba:	2301      	moveq	r3, #1
 8019bbc:	2300      	movne	r3, #0
 8019bbe:	b2db      	uxtb	r3, r3
 8019bc0:	461a      	mov	r2, r3
 8019bc2:	79fb      	ldrb	r3, [r7, #7]
 8019bc4:	429a      	cmp	r2, r3
 8019bc6:	d0b6      	beq.n	8019b36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8019bc8:	2300      	movs	r3, #0
}
 8019bca:	4618      	mov	r0, r3
 8019bcc:	3710      	adds	r7, #16
 8019bce:	46bd      	mov	sp, r7
 8019bd0:	bd80      	pop	{r7, pc}

08019bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8019bd2:	b580      	push	{r7, lr}
 8019bd4:	b084      	sub	sp, #16
 8019bd6:	af00      	add	r7, sp, #0
 8019bd8:	60f8      	str	r0, [r7, #12]
 8019bda:	60b9      	str	r1, [r7, #8]
 8019bdc:	607a      	str	r2, [r7, #4]
 8019bde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8019be0:	e051      	b.n	8019c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019be2:	68fb      	ldr	r3, [r7, #12]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	695b      	ldr	r3, [r3, #20]
 8019be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019bf0:	d123      	bne.n	8019c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019bf2:	68fb      	ldr	r3, [r7, #12]
 8019bf4:	681b      	ldr	r3, [r3, #0]
 8019bf6:	681a      	ldr	r2, [r3, #0]
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019c00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019c0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	2200      	movs	r2, #0
 8019c10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	2220      	movs	r2, #32
 8019c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	2200      	movs	r2, #0
 8019c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c26:	f043 0204 	orr.w	r2, r3, #4
 8019c2a:	68fb      	ldr	r3, [r7, #12]
 8019c2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	2200      	movs	r2, #0
 8019c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019c36:	2301      	movs	r3, #1
 8019c38:	e046      	b.n	8019cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c40:	d021      	beq.n	8019c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019c42:	f7fc fc1b 	bl	801647c <HAL_GetTick>
 8019c46:	4602      	mov	r2, r0
 8019c48:	683b      	ldr	r3, [r7, #0]
 8019c4a:	1ad3      	subs	r3, r2, r3
 8019c4c:	687a      	ldr	r2, [r7, #4]
 8019c4e:	429a      	cmp	r2, r3
 8019c50:	d302      	bcc.n	8019c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d116      	bne.n	8019c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	2200      	movs	r2, #0
 8019c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019c5e:	68fb      	ldr	r3, [r7, #12]
 8019c60:	2220      	movs	r2, #32
 8019c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019c66:	68fb      	ldr	r3, [r7, #12]
 8019c68:	2200      	movs	r2, #0
 8019c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c72:	f043 0220 	orr.w	r2, r3, #32
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	2200      	movs	r2, #0
 8019c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019c82:	2301      	movs	r3, #1
 8019c84:	e020      	b.n	8019cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8019c86:	68bb      	ldr	r3, [r7, #8]
 8019c88:	0c1b      	lsrs	r3, r3, #16
 8019c8a:	b2db      	uxtb	r3, r3
 8019c8c:	2b01      	cmp	r3, #1
 8019c8e:	d10c      	bne.n	8019caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	695b      	ldr	r3, [r3, #20]
 8019c96:	43da      	mvns	r2, r3
 8019c98:	68bb      	ldr	r3, [r7, #8]
 8019c9a:	4013      	ands	r3, r2
 8019c9c:	b29b      	uxth	r3, r3
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	bf14      	ite	ne
 8019ca2:	2301      	movne	r3, #1
 8019ca4:	2300      	moveq	r3, #0
 8019ca6:	b2db      	uxtb	r3, r3
 8019ca8:	e00b      	b.n	8019cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8019caa:	68fb      	ldr	r3, [r7, #12]
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	699b      	ldr	r3, [r3, #24]
 8019cb0:	43da      	mvns	r2, r3
 8019cb2:	68bb      	ldr	r3, [r7, #8]
 8019cb4:	4013      	ands	r3, r2
 8019cb6:	b29b      	uxth	r3, r3
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	bf14      	ite	ne
 8019cbc:	2301      	movne	r3, #1
 8019cbe:	2300      	moveq	r3, #0
 8019cc0:	b2db      	uxtb	r3, r3
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d18d      	bne.n	8019be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8019cc6:	2300      	movs	r3, #0
}
 8019cc8:	4618      	mov	r0, r3
 8019cca:	3710      	adds	r7, #16
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	bd80      	pop	{r7, pc}

08019cd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019cd0:	b580      	push	{r7, lr}
 8019cd2:	b084      	sub	sp, #16
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	60f8      	str	r0, [r7, #12]
 8019cd8:	60b9      	str	r1, [r7, #8]
 8019cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8019cdc:	e02d      	b.n	8019d3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8019cde:	68f8      	ldr	r0, [r7, #12]
 8019ce0:	f000 f900 	bl	8019ee4 <I2C_IsAcknowledgeFailed>
 8019ce4:	4603      	mov	r3, r0
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d001      	beq.n	8019cee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8019cea:	2301      	movs	r3, #1
 8019cec:	e02d      	b.n	8019d4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019cee:	68bb      	ldr	r3, [r7, #8]
 8019cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019cf4:	d021      	beq.n	8019d3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019cf6:	f7fc fbc1 	bl	801647c <HAL_GetTick>
 8019cfa:	4602      	mov	r2, r0
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	1ad3      	subs	r3, r2, r3
 8019d00:	68ba      	ldr	r2, [r7, #8]
 8019d02:	429a      	cmp	r2, r3
 8019d04:	d302      	bcc.n	8019d0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8019d06:	68bb      	ldr	r3, [r7, #8]
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d116      	bne.n	8019d3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	2200      	movs	r2, #0
 8019d10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019d12:	68fb      	ldr	r3, [r7, #12]
 8019d14:	2220      	movs	r2, #32
 8019d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	2200      	movs	r2, #0
 8019d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d26:	f043 0220 	orr.w	r2, r3, #32
 8019d2a:	68fb      	ldr	r3, [r7, #12]
 8019d2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	2200      	movs	r2, #0
 8019d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019d36:	2301      	movs	r3, #1
 8019d38:	e007      	b.n	8019d4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	695b      	ldr	r3, [r3, #20]
 8019d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019d44:	2b80      	cmp	r3, #128	; 0x80
 8019d46:	d1ca      	bne.n	8019cde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8019d48:	2300      	movs	r3, #0
}
 8019d4a:	4618      	mov	r0, r3
 8019d4c:	3710      	adds	r7, #16
 8019d4e:	46bd      	mov	sp, r7
 8019d50:	bd80      	pop	{r7, pc}

08019d52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019d52:	b580      	push	{r7, lr}
 8019d54:	b084      	sub	sp, #16
 8019d56:	af00      	add	r7, sp, #0
 8019d58:	60f8      	str	r0, [r7, #12]
 8019d5a:	60b9      	str	r1, [r7, #8]
 8019d5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8019d5e:	e02d      	b.n	8019dbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8019d60:	68f8      	ldr	r0, [r7, #12]
 8019d62:	f000 f8bf 	bl	8019ee4 <I2C_IsAcknowledgeFailed>
 8019d66:	4603      	mov	r3, r0
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d001      	beq.n	8019d70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8019d6c:	2301      	movs	r3, #1
 8019d6e:	e02d      	b.n	8019dcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019d70:	68bb      	ldr	r3, [r7, #8]
 8019d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d76:	d021      	beq.n	8019dbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019d78:	f7fc fb80 	bl	801647c <HAL_GetTick>
 8019d7c:	4602      	mov	r2, r0
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	1ad3      	subs	r3, r2, r3
 8019d82:	68ba      	ldr	r2, [r7, #8]
 8019d84:	429a      	cmp	r2, r3
 8019d86:	d302      	bcc.n	8019d8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8019d88:	68bb      	ldr	r3, [r7, #8]
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d116      	bne.n	8019dbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	2200      	movs	r2, #0
 8019d92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	2220      	movs	r2, #32
 8019d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	2200      	movs	r2, #0
 8019da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019da8:	f043 0220 	orr.w	r2, r3, #32
 8019dac:	68fb      	ldr	r3, [r7, #12]
 8019dae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	2200      	movs	r2, #0
 8019db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019db8:	2301      	movs	r3, #1
 8019dba:	e007      	b.n	8019dcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	695b      	ldr	r3, [r3, #20]
 8019dc2:	f003 0304 	and.w	r3, r3, #4
 8019dc6:	2b04      	cmp	r3, #4
 8019dc8:	d1ca      	bne.n	8019d60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8019dca:	2300      	movs	r3, #0
}
 8019dcc:	4618      	mov	r0, r3
 8019dce:	3710      	adds	r7, #16
 8019dd0:	46bd      	mov	sp, r7
 8019dd2:	bd80      	pop	{r7, pc}

08019dd4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8019dd4:	b480      	push	{r7}
 8019dd6:	b085      	sub	sp, #20
 8019dd8:	af00      	add	r7, sp, #0
 8019dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019ddc:	2300      	movs	r3, #0
 8019dde:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8019de0:	4b13      	ldr	r3, [pc, #76]	; (8019e30 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	08db      	lsrs	r3, r3, #3
 8019de6:	4a13      	ldr	r2, [pc, #76]	; (8019e34 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8019de8:	fba2 2303 	umull	r2, r3, r2, r3
 8019dec:	0a1a      	lsrs	r2, r3, #8
 8019dee:	4613      	mov	r3, r2
 8019df0:	009b      	lsls	r3, r3, #2
 8019df2:	4413      	add	r3, r2
 8019df4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8019df6:	68fb      	ldr	r3, [r7, #12]
 8019df8:	3b01      	subs	r3, #1
 8019dfa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8019dfc:	68fb      	ldr	r3, [r7, #12]
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d107      	bne.n	8019e12 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019e06:	f043 0220 	orr.w	r2, r3, #32
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8019e0e:	2301      	movs	r3, #1
 8019e10:	e008      	b.n	8019e24 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019e20:	d0e9      	beq.n	8019df6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8019e22:	2300      	movs	r3, #0
}
 8019e24:	4618      	mov	r0, r3
 8019e26:	3714      	adds	r7, #20
 8019e28:	46bd      	mov	sp, r7
 8019e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e2e:	4770      	bx	lr
 8019e30:	2000018c 	.word	0x2000018c
 8019e34:	14f8b589 	.word	0x14f8b589

08019e38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019e38:	b580      	push	{r7, lr}
 8019e3a:	b084      	sub	sp, #16
 8019e3c:	af00      	add	r7, sp, #0
 8019e3e:	60f8      	str	r0, [r7, #12]
 8019e40:	60b9      	str	r1, [r7, #8]
 8019e42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8019e44:	e042      	b.n	8019ecc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	695b      	ldr	r3, [r3, #20]
 8019e4c:	f003 0310 	and.w	r3, r3, #16
 8019e50:	2b10      	cmp	r3, #16
 8019e52:	d119      	bne.n	8019e88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019e54:	68fb      	ldr	r3, [r7, #12]
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	f06f 0210 	mvn.w	r2, #16
 8019e5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8019e5e:	68fb      	ldr	r3, [r7, #12]
 8019e60:	2200      	movs	r2, #0
 8019e62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	2220      	movs	r2, #32
 8019e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	2200      	movs	r2, #0
 8019e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019e7c:	68fb      	ldr	r3, [r7, #12]
 8019e7e:	2200      	movs	r2, #0
 8019e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019e84:	2301      	movs	r3, #1
 8019e86:	e029      	b.n	8019edc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019e88:	f7fc faf8 	bl	801647c <HAL_GetTick>
 8019e8c:	4602      	mov	r2, r0
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	1ad3      	subs	r3, r2, r3
 8019e92:	68ba      	ldr	r2, [r7, #8]
 8019e94:	429a      	cmp	r2, r3
 8019e96:	d302      	bcc.n	8019e9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8019e98:	68bb      	ldr	r3, [r7, #8]
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d116      	bne.n	8019ecc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8019e9e:	68fb      	ldr	r3, [r7, #12]
 8019ea0:	2200      	movs	r2, #0
 8019ea2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	2220      	movs	r2, #32
 8019ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	2200      	movs	r2, #0
 8019eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019eb4:	68fb      	ldr	r3, [r7, #12]
 8019eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019eb8:	f043 0220 	orr.w	r2, r3, #32
 8019ebc:	68fb      	ldr	r3, [r7, #12]
 8019ebe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	2200      	movs	r2, #0
 8019ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019ec8:	2301      	movs	r3, #1
 8019eca:	e007      	b.n	8019edc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	695b      	ldr	r3, [r3, #20]
 8019ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019ed6:	2b40      	cmp	r3, #64	; 0x40
 8019ed8:	d1b5      	bne.n	8019e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8019eda:	2300      	movs	r3, #0
}
 8019edc:	4618      	mov	r0, r3
 8019ede:	3710      	adds	r7, #16
 8019ee0:	46bd      	mov	sp, r7
 8019ee2:	bd80      	pop	{r7, pc}

08019ee4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8019ee4:	b480      	push	{r7}
 8019ee6:	b083      	sub	sp, #12
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	695b      	ldr	r3, [r3, #20]
 8019ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019efa:	d11b      	bne.n	8019f34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019f04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	2200      	movs	r2, #0
 8019f0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	2220      	movs	r2, #32
 8019f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	2200      	movs	r2, #0
 8019f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f20:	f043 0204 	orr.w	r2, r3, #4
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	2200      	movs	r2, #0
 8019f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8019f30:	2301      	movs	r3, #1
 8019f32:	e000      	b.n	8019f36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8019f34:	2300      	movs	r3, #0
}
 8019f36:	4618      	mov	r0, r3
 8019f38:	370c      	adds	r7, #12
 8019f3a:	46bd      	mov	sp, r7
 8019f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f40:	4770      	bx	lr

08019f42 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8019f42:	b480      	push	{r7}
 8019f44:	b083      	sub	sp, #12
 8019f46:	af00      	add	r7, sp, #0
 8019f48:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f4e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8019f52:	d103      	bne.n	8019f5c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	2201      	movs	r2, #1
 8019f58:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8019f5a:	e007      	b.n	8019f6c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f60:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8019f64:	d102      	bne.n	8019f6c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	2208      	movs	r2, #8
 8019f6a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8019f6c:	bf00      	nop
 8019f6e:	370c      	adds	r7, #12
 8019f70:	46bd      	mov	sp, r7
 8019f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f76:	4770      	bx	lr

08019f78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8019f78:	b580      	push	{r7, lr}
 8019f7a:	b086      	sub	sp, #24
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d101      	bne.n	8019f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8019f86:	2301      	movs	r3, #1
 8019f88:	e267      	b.n	801a45a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	f003 0301 	and.w	r3, r3, #1
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d075      	beq.n	801a082 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8019f96:	4b88      	ldr	r3, [pc, #544]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 8019f98:	689b      	ldr	r3, [r3, #8]
 8019f9a:	f003 030c 	and.w	r3, r3, #12
 8019f9e:	2b04      	cmp	r3, #4
 8019fa0:	d00c      	beq.n	8019fbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8019fa2:	4b85      	ldr	r3, [pc, #532]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 8019fa4:	689b      	ldr	r3, [r3, #8]
 8019fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8019faa:	2b08      	cmp	r3, #8
 8019fac:	d112      	bne.n	8019fd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8019fae:	4b82      	ldr	r3, [pc, #520]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 8019fb0:	685b      	ldr	r3, [r3, #4]
 8019fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8019fba:	d10b      	bne.n	8019fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019fbc:	4b7e      	ldr	r3, [pc, #504]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d05b      	beq.n	801a080 <HAL_RCC_OscConfig+0x108>
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	685b      	ldr	r3, [r3, #4]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d157      	bne.n	801a080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8019fd0:	2301      	movs	r3, #1
 8019fd2:	e242      	b.n	801a45a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	685b      	ldr	r3, [r3, #4]
 8019fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019fdc:	d106      	bne.n	8019fec <HAL_RCC_OscConfig+0x74>
 8019fde:	4b76      	ldr	r3, [pc, #472]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	4a75      	ldr	r2, [pc, #468]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 8019fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019fe8:	6013      	str	r3, [r2, #0]
 8019fea:	e01d      	b.n	801a028 <HAL_RCC_OscConfig+0xb0>
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	685b      	ldr	r3, [r3, #4]
 8019ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8019ff4:	d10c      	bne.n	801a010 <HAL_RCC_OscConfig+0x98>
 8019ff6:	4b70      	ldr	r3, [pc, #448]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	4a6f      	ldr	r2, [pc, #444]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 8019ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801a000:	6013      	str	r3, [r2, #0]
 801a002:	4b6d      	ldr	r3, [pc, #436]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	4a6c      	ldr	r2, [pc, #432]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a00c:	6013      	str	r3, [r2, #0]
 801a00e:	e00b      	b.n	801a028 <HAL_RCC_OscConfig+0xb0>
 801a010:	4b69      	ldr	r3, [pc, #420]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a012:	681b      	ldr	r3, [r3, #0]
 801a014:	4a68      	ldr	r2, [pc, #416]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a01a:	6013      	str	r3, [r2, #0]
 801a01c:	4b66      	ldr	r3, [pc, #408]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	4a65      	ldr	r2, [pc, #404]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801a026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	685b      	ldr	r3, [r3, #4]
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d013      	beq.n	801a058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a030:	f7fc fa24 	bl	801647c <HAL_GetTick>
 801a034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a036:	e008      	b.n	801a04a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a038:	f7fc fa20 	bl	801647c <HAL_GetTick>
 801a03c:	4602      	mov	r2, r0
 801a03e:	693b      	ldr	r3, [r7, #16]
 801a040:	1ad3      	subs	r3, r2, r3
 801a042:	2b64      	cmp	r3, #100	; 0x64
 801a044:	d901      	bls.n	801a04a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801a046:	2303      	movs	r3, #3
 801a048:	e207      	b.n	801a45a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a04a:	4b5b      	ldr	r3, [pc, #364]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a052:	2b00      	cmp	r3, #0
 801a054:	d0f0      	beq.n	801a038 <HAL_RCC_OscConfig+0xc0>
 801a056:	e014      	b.n	801a082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a058:	f7fc fa10 	bl	801647c <HAL_GetTick>
 801a05c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801a05e:	e008      	b.n	801a072 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a060:	f7fc fa0c 	bl	801647c <HAL_GetTick>
 801a064:	4602      	mov	r2, r0
 801a066:	693b      	ldr	r3, [r7, #16]
 801a068:	1ad3      	subs	r3, r2, r3
 801a06a:	2b64      	cmp	r3, #100	; 0x64
 801a06c:	d901      	bls.n	801a072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801a06e:	2303      	movs	r3, #3
 801a070:	e1f3      	b.n	801a45a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801a072:	4b51      	ldr	r3, [pc, #324]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d1f0      	bne.n	801a060 <HAL_RCC_OscConfig+0xe8>
 801a07e:	e000      	b.n	801a082 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	f003 0302 	and.w	r3, r3, #2
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d063      	beq.n	801a156 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801a08e:	4b4a      	ldr	r3, [pc, #296]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a090:	689b      	ldr	r3, [r3, #8]
 801a092:	f003 030c 	and.w	r3, r3, #12
 801a096:	2b00      	cmp	r3, #0
 801a098:	d00b      	beq.n	801a0b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801a09a:	4b47      	ldr	r3, [pc, #284]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a09c:	689b      	ldr	r3, [r3, #8]
 801a09e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801a0a2:	2b08      	cmp	r3, #8
 801a0a4:	d11c      	bne.n	801a0e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801a0a6:	4b44      	ldr	r3, [pc, #272]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a0a8:	685b      	ldr	r3, [r3, #4]
 801a0aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d116      	bne.n	801a0e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801a0b2:	4b41      	ldr	r3, [pc, #260]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	f003 0302 	and.w	r3, r3, #2
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d005      	beq.n	801a0ca <HAL_RCC_OscConfig+0x152>
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	68db      	ldr	r3, [r3, #12]
 801a0c2:	2b01      	cmp	r3, #1
 801a0c4:	d001      	beq.n	801a0ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801a0c6:	2301      	movs	r3, #1
 801a0c8:	e1c7      	b.n	801a45a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a0ca:	4b3b      	ldr	r3, [pc, #236]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	691b      	ldr	r3, [r3, #16]
 801a0d6:	00db      	lsls	r3, r3, #3
 801a0d8:	4937      	ldr	r1, [pc, #220]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a0da:	4313      	orrs	r3, r2
 801a0dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801a0de:	e03a      	b.n	801a156 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	68db      	ldr	r3, [r3, #12]
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	d020      	beq.n	801a12a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801a0e8:	4b34      	ldr	r3, [pc, #208]	; (801a1bc <HAL_RCC_OscConfig+0x244>)
 801a0ea:	2201      	movs	r2, #1
 801a0ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a0ee:	f7fc f9c5 	bl	801647c <HAL_GetTick>
 801a0f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a0f4:	e008      	b.n	801a108 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a0f6:	f7fc f9c1 	bl	801647c <HAL_GetTick>
 801a0fa:	4602      	mov	r2, r0
 801a0fc:	693b      	ldr	r3, [r7, #16]
 801a0fe:	1ad3      	subs	r3, r2, r3
 801a100:	2b02      	cmp	r3, #2
 801a102:	d901      	bls.n	801a108 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801a104:	2303      	movs	r3, #3
 801a106:	e1a8      	b.n	801a45a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a108:	4b2b      	ldr	r3, [pc, #172]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	f003 0302 	and.w	r3, r3, #2
 801a110:	2b00      	cmp	r3, #0
 801a112:	d0f0      	beq.n	801a0f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a114:	4b28      	ldr	r3, [pc, #160]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	691b      	ldr	r3, [r3, #16]
 801a120:	00db      	lsls	r3, r3, #3
 801a122:	4925      	ldr	r1, [pc, #148]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a124:	4313      	orrs	r3, r2
 801a126:	600b      	str	r3, [r1, #0]
 801a128:	e015      	b.n	801a156 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801a12a:	4b24      	ldr	r3, [pc, #144]	; (801a1bc <HAL_RCC_OscConfig+0x244>)
 801a12c:	2200      	movs	r2, #0
 801a12e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a130:	f7fc f9a4 	bl	801647c <HAL_GetTick>
 801a134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801a136:	e008      	b.n	801a14a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a138:	f7fc f9a0 	bl	801647c <HAL_GetTick>
 801a13c:	4602      	mov	r2, r0
 801a13e:	693b      	ldr	r3, [r7, #16]
 801a140:	1ad3      	subs	r3, r2, r3
 801a142:	2b02      	cmp	r3, #2
 801a144:	d901      	bls.n	801a14a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801a146:	2303      	movs	r3, #3
 801a148:	e187      	b.n	801a45a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801a14a:	4b1b      	ldr	r3, [pc, #108]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	f003 0302 	and.w	r3, r3, #2
 801a152:	2b00      	cmp	r3, #0
 801a154:	d1f0      	bne.n	801a138 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	f003 0308 	and.w	r3, r3, #8
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d036      	beq.n	801a1d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	695b      	ldr	r3, [r3, #20]
 801a166:	2b00      	cmp	r3, #0
 801a168:	d016      	beq.n	801a198 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801a16a:	4b15      	ldr	r3, [pc, #84]	; (801a1c0 <HAL_RCC_OscConfig+0x248>)
 801a16c:	2201      	movs	r2, #1
 801a16e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a170:	f7fc f984 	bl	801647c <HAL_GetTick>
 801a174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a176:	e008      	b.n	801a18a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a178:	f7fc f980 	bl	801647c <HAL_GetTick>
 801a17c:	4602      	mov	r2, r0
 801a17e:	693b      	ldr	r3, [r7, #16]
 801a180:	1ad3      	subs	r3, r2, r3
 801a182:	2b02      	cmp	r3, #2
 801a184:	d901      	bls.n	801a18a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801a186:	2303      	movs	r3, #3
 801a188:	e167      	b.n	801a45a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a18a:	4b0b      	ldr	r3, [pc, #44]	; (801a1b8 <HAL_RCC_OscConfig+0x240>)
 801a18c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a18e:	f003 0302 	and.w	r3, r3, #2
 801a192:	2b00      	cmp	r3, #0
 801a194:	d0f0      	beq.n	801a178 <HAL_RCC_OscConfig+0x200>
 801a196:	e01b      	b.n	801a1d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801a198:	4b09      	ldr	r3, [pc, #36]	; (801a1c0 <HAL_RCC_OscConfig+0x248>)
 801a19a:	2200      	movs	r2, #0
 801a19c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a19e:	f7fc f96d 	bl	801647c <HAL_GetTick>
 801a1a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a1a4:	e00e      	b.n	801a1c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a1a6:	f7fc f969 	bl	801647c <HAL_GetTick>
 801a1aa:	4602      	mov	r2, r0
 801a1ac:	693b      	ldr	r3, [r7, #16]
 801a1ae:	1ad3      	subs	r3, r2, r3
 801a1b0:	2b02      	cmp	r3, #2
 801a1b2:	d907      	bls.n	801a1c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801a1b4:	2303      	movs	r3, #3
 801a1b6:	e150      	b.n	801a45a <HAL_RCC_OscConfig+0x4e2>
 801a1b8:	40023800 	.word	0x40023800
 801a1bc:	42470000 	.word	0x42470000
 801a1c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a1c4:	4b88      	ldr	r3, [pc, #544]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a1c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a1c8:	f003 0302 	and.w	r3, r3, #2
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d1ea      	bne.n	801a1a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	f003 0304 	and.w	r3, r3, #4
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	f000 8097 	beq.w	801a30c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801a1de:	2300      	movs	r3, #0
 801a1e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801a1e2:	4b81      	ldr	r3, [pc, #516]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d10f      	bne.n	801a20e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	60bb      	str	r3, [r7, #8]
 801a1f2:	4b7d      	ldr	r3, [pc, #500]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1f6:	4a7c      	ldr	r2, [pc, #496]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a1f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a1fc:	6413      	str	r3, [r2, #64]	; 0x40
 801a1fe:	4b7a      	ldr	r3, [pc, #488]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a206:	60bb      	str	r3, [r7, #8]
 801a208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801a20a:	2301      	movs	r3, #1
 801a20c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a20e:	4b77      	ldr	r3, [pc, #476]	; (801a3ec <HAL_RCC_OscConfig+0x474>)
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a216:	2b00      	cmp	r3, #0
 801a218:	d118      	bne.n	801a24c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801a21a:	4b74      	ldr	r3, [pc, #464]	; (801a3ec <HAL_RCC_OscConfig+0x474>)
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	4a73      	ldr	r2, [pc, #460]	; (801a3ec <HAL_RCC_OscConfig+0x474>)
 801a220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801a226:	f7fc f929 	bl	801647c <HAL_GetTick>
 801a22a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a22c:	e008      	b.n	801a240 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a22e:	f7fc f925 	bl	801647c <HAL_GetTick>
 801a232:	4602      	mov	r2, r0
 801a234:	693b      	ldr	r3, [r7, #16]
 801a236:	1ad3      	subs	r3, r2, r3
 801a238:	2b02      	cmp	r3, #2
 801a23a:	d901      	bls.n	801a240 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801a23c:	2303      	movs	r3, #3
 801a23e:	e10c      	b.n	801a45a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a240:	4b6a      	ldr	r3, [pc, #424]	; (801a3ec <HAL_RCC_OscConfig+0x474>)
 801a242:	681b      	ldr	r3, [r3, #0]
 801a244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d0f0      	beq.n	801a22e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	689b      	ldr	r3, [r3, #8]
 801a250:	2b01      	cmp	r3, #1
 801a252:	d106      	bne.n	801a262 <HAL_RCC_OscConfig+0x2ea>
 801a254:	4b64      	ldr	r3, [pc, #400]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a258:	4a63      	ldr	r2, [pc, #396]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a25a:	f043 0301 	orr.w	r3, r3, #1
 801a25e:	6713      	str	r3, [r2, #112]	; 0x70
 801a260:	e01c      	b.n	801a29c <HAL_RCC_OscConfig+0x324>
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	689b      	ldr	r3, [r3, #8]
 801a266:	2b05      	cmp	r3, #5
 801a268:	d10c      	bne.n	801a284 <HAL_RCC_OscConfig+0x30c>
 801a26a:	4b5f      	ldr	r3, [pc, #380]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a26c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a26e:	4a5e      	ldr	r2, [pc, #376]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a270:	f043 0304 	orr.w	r3, r3, #4
 801a274:	6713      	str	r3, [r2, #112]	; 0x70
 801a276:	4b5c      	ldr	r3, [pc, #368]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a27a:	4a5b      	ldr	r2, [pc, #364]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a27c:	f043 0301 	orr.w	r3, r3, #1
 801a280:	6713      	str	r3, [r2, #112]	; 0x70
 801a282:	e00b      	b.n	801a29c <HAL_RCC_OscConfig+0x324>
 801a284:	4b58      	ldr	r3, [pc, #352]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a288:	4a57      	ldr	r2, [pc, #348]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a28a:	f023 0301 	bic.w	r3, r3, #1
 801a28e:	6713      	str	r3, [r2, #112]	; 0x70
 801a290:	4b55      	ldr	r3, [pc, #340]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a294:	4a54      	ldr	r2, [pc, #336]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a296:	f023 0304 	bic.w	r3, r3, #4
 801a29a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	689b      	ldr	r3, [r3, #8]
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	d015      	beq.n	801a2d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a2a4:	f7fc f8ea 	bl	801647c <HAL_GetTick>
 801a2a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a2aa:	e00a      	b.n	801a2c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a2ac:	f7fc f8e6 	bl	801647c <HAL_GetTick>
 801a2b0:	4602      	mov	r2, r0
 801a2b2:	693b      	ldr	r3, [r7, #16]
 801a2b4:	1ad3      	subs	r3, r2, r3
 801a2b6:	f241 3288 	movw	r2, #5000	; 0x1388
 801a2ba:	4293      	cmp	r3, r2
 801a2bc:	d901      	bls.n	801a2c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801a2be:	2303      	movs	r3, #3
 801a2c0:	e0cb      	b.n	801a45a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a2c2:	4b49      	ldr	r3, [pc, #292]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a2c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a2c6:	f003 0302 	and.w	r3, r3, #2
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	d0ee      	beq.n	801a2ac <HAL_RCC_OscConfig+0x334>
 801a2ce:	e014      	b.n	801a2fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a2d0:	f7fc f8d4 	bl	801647c <HAL_GetTick>
 801a2d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a2d6:	e00a      	b.n	801a2ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a2d8:	f7fc f8d0 	bl	801647c <HAL_GetTick>
 801a2dc:	4602      	mov	r2, r0
 801a2de:	693b      	ldr	r3, [r7, #16]
 801a2e0:	1ad3      	subs	r3, r2, r3
 801a2e2:	f241 3288 	movw	r2, #5000	; 0x1388
 801a2e6:	4293      	cmp	r3, r2
 801a2e8:	d901      	bls.n	801a2ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801a2ea:	2303      	movs	r3, #3
 801a2ec:	e0b5      	b.n	801a45a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a2ee:	4b3e      	ldr	r3, [pc, #248]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a2f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a2f2:	f003 0302 	and.w	r3, r3, #2
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d1ee      	bne.n	801a2d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801a2fa:	7dfb      	ldrb	r3, [r7, #23]
 801a2fc:	2b01      	cmp	r3, #1
 801a2fe:	d105      	bne.n	801a30c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801a300:	4b39      	ldr	r3, [pc, #228]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a304:	4a38      	ldr	r2, [pc, #224]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801a30a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	699b      	ldr	r3, [r3, #24]
 801a310:	2b00      	cmp	r3, #0
 801a312:	f000 80a1 	beq.w	801a458 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801a316:	4b34      	ldr	r3, [pc, #208]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a318:	689b      	ldr	r3, [r3, #8]
 801a31a:	f003 030c 	and.w	r3, r3, #12
 801a31e:	2b08      	cmp	r3, #8
 801a320:	d05c      	beq.n	801a3dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	699b      	ldr	r3, [r3, #24]
 801a326:	2b02      	cmp	r3, #2
 801a328:	d141      	bne.n	801a3ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a32a:	4b31      	ldr	r3, [pc, #196]	; (801a3f0 <HAL_RCC_OscConfig+0x478>)
 801a32c:	2200      	movs	r2, #0
 801a32e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a330:	f7fc f8a4 	bl	801647c <HAL_GetTick>
 801a334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a336:	e008      	b.n	801a34a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a338:	f7fc f8a0 	bl	801647c <HAL_GetTick>
 801a33c:	4602      	mov	r2, r0
 801a33e:	693b      	ldr	r3, [r7, #16]
 801a340:	1ad3      	subs	r3, r2, r3
 801a342:	2b02      	cmp	r3, #2
 801a344:	d901      	bls.n	801a34a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801a346:	2303      	movs	r3, #3
 801a348:	e087      	b.n	801a45a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a34a:	4b27      	ldr	r3, [pc, #156]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a352:	2b00      	cmp	r3, #0
 801a354:	d1f0      	bne.n	801a338 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	69da      	ldr	r2, [r3, #28]
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	6a1b      	ldr	r3, [r3, #32]
 801a35e:	431a      	orrs	r2, r3
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a364:	019b      	lsls	r3, r3, #6
 801a366:	431a      	orrs	r2, r3
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a36c:	085b      	lsrs	r3, r3, #1
 801a36e:	3b01      	subs	r3, #1
 801a370:	041b      	lsls	r3, r3, #16
 801a372:	431a      	orrs	r2, r3
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a378:	061b      	lsls	r3, r3, #24
 801a37a:	491b      	ldr	r1, [pc, #108]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a37c:	4313      	orrs	r3, r2
 801a37e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801a380:	4b1b      	ldr	r3, [pc, #108]	; (801a3f0 <HAL_RCC_OscConfig+0x478>)
 801a382:	2201      	movs	r2, #1
 801a384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a386:	f7fc f879 	bl	801647c <HAL_GetTick>
 801a38a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a38c:	e008      	b.n	801a3a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a38e:	f7fc f875 	bl	801647c <HAL_GetTick>
 801a392:	4602      	mov	r2, r0
 801a394:	693b      	ldr	r3, [r7, #16]
 801a396:	1ad3      	subs	r3, r2, r3
 801a398:	2b02      	cmp	r3, #2
 801a39a:	d901      	bls.n	801a3a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801a39c:	2303      	movs	r3, #3
 801a39e:	e05c      	b.n	801a45a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a3a0:	4b11      	ldr	r3, [pc, #68]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d0f0      	beq.n	801a38e <HAL_RCC_OscConfig+0x416>
 801a3ac:	e054      	b.n	801a458 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a3ae:	4b10      	ldr	r3, [pc, #64]	; (801a3f0 <HAL_RCC_OscConfig+0x478>)
 801a3b0:	2200      	movs	r2, #0
 801a3b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a3b4:	f7fc f862 	bl	801647c <HAL_GetTick>
 801a3b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a3ba:	e008      	b.n	801a3ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a3bc:	f7fc f85e 	bl	801647c <HAL_GetTick>
 801a3c0:	4602      	mov	r2, r0
 801a3c2:	693b      	ldr	r3, [r7, #16]
 801a3c4:	1ad3      	subs	r3, r2, r3
 801a3c6:	2b02      	cmp	r3, #2
 801a3c8:	d901      	bls.n	801a3ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801a3ca:	2303      	movs	r3, #3
 801a3cc:	e045      	b.n	801a45a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a3ce:	4b06      	ldr	r3, [pc, #24]	; (801a3e8 <HAL_RCC_OscConfig+0x470>)
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d1f0      	bne.n	801a3bc <HAL_RCC_OscConfig+0x444>
 801a3da:	e03d      	b.n	801a458 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	699b      	ldr	r3, [r3, #24]
 801a3e0:	2b01      	cmp	r3, #1
 801a3e2:	d107      	bne.n	801a3f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801a3e4:	2301      	movs	r3, #1
 801a3e6:	e038      	b.n	801a45a <HAL_RCC_OscConfig+0x4e2>
 801a3e8:	40023800 	.word	0x40023800
 801a3ec:	40007000 	.word	0x40007000
 801a3f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801a3f4:	4b1b      	ldr	r3, [pc, #108]	; (801a464 <HAL_RCC_OscConfig+0x4ec>)
 801a3f6:	685b      	ldr	r3, [r3, #4]
 801a3f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	699b      	ldr	r3, [r3, #24]
 801a3fe:	2b01      	cmp	r3, #1
 801a400:	d028      	beq.n	801a454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a40c:	429a      	cmp	r2, r3
 801a40e:	d121      	bne.n	801a454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a41a:	429a      	cmp	r2, r3
 801a41c:	d11a      	bne.n	801a454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801a41e:	68fa      	ldr	r2, [r7, #12]
 801a420:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801a424:	4013      	ands	r3, r2
 801a426:	687a      	ldr	r2, [r7, #4]
 801a428:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801a42a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801a42c:	4293      	cmp	r3, r2
 801a42e:	d111      	bne.n	801a454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a43a:	085b      	lsrs	r3, r3, #1
 801a43c:	3b01      	subs	r3, #1
 801a43e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801a440:	429a      	cmp	r2, r3
 801a442:	d107      	bne.n	801a454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a44e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801a450:	429a      	cmp	r2, r3
 801a452:	d001      	beq.n	801a458 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801a454:	2301      	movs	r3, #1
 801a456:	e000      	b.n	801a45a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 801a458:	2300      	movs	r3, #0
}
 801a45a:	4618      	mov	r0, r3
 801a45c:	3718      	adds	r7, #24
 801a45e:	46bd      	mov	sp, r7
 801a460:	bd80      	pop	{r7, pc}
 801a462:	bf00      	nop
 801a464:	40023800 	.word	0x40023800

0801a468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801a468:	b580      	push	{r7, lr}
 801a46a:	b084      	sub	sp, #16
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	6078      	str	r0, [r7, #4]
 801a470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	2b00      	cmp	r3, #0
 801a476:	d101      	bne.n	801a47c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801a478:	2301      	movs	r3, #1
 801a47a:	e0cc      	b.n	801a616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801a47c:	4b68      	ldr	r3, [pc, #416]	; (801a620 <HAL_RCC_ClockConfig+0x1b8>)
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	f003 0307 	and.w	r3, r3, #7
 801a484:	683a      	ldr	r2, [r7, #0]
 801a486:	429a      	cmp	r2, r3
 801a488:	d90c      	bls.n	801a4a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a48a:	4b65      	ldr	r3, [pc, #404]	; (801a620 <HAL_RCC_ClockConfig+0x1b8>)
 801a48c:	683a      	ldr	r2, [r7, #0]
 801a48e:	b2d2      	uxtb	r2, r2
 801a490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a492:	4b63      	ldr	r3, [pc, #396]	; (801a620 <HAL_RCC_ClockConfig+0x1b8>)
 801a494:	681b      	ldr	r3, [r3, #0]
 801a496:	f003 0307 	and.w	r3, r3, #7
 801a49a:	683a      	ldr	r2, [r7, #0]
 801a49c:	429a      	cmp	r2, r3
 801a49e:	d001      	beq.n	801a4a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801a4a0:	2301      	movs	r3, #1
 801a4a2:	e0b8      	b.n	801a616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	f003 0302 	and.w	r3, r3, #2
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	d020      	beq.n	801a4f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	f003 0304 	and.w	r3, r3, #4
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d005      	beq.n	801a4c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801a4bc:	4b59      	ldr	r3, [pc, #356]	; (801a624 <HAL_RCC_ClockConfig+0x1bc>)
 801a4be:	689b      	ldr	r3, [r3, #8]
 801a4c0:	4a58      	ldr	r2, [pc, #352]	; (801a624 <HAL_RCC_ClockConfig+0x1bc>)
 801a4c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801a4c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	f003 0308 	and.w	r3, r3, #8
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d005      	beq.n	801a4e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801a4d4:	4b53      	ldr	r3, [pc, #332]	; (801a624 <HAL_RCC_ClockConfig+0x1bc>)
 801a4d6:	689b      	ldr	r3, [r3, #8]
 801a4d8:	4a52      	ldr	r2, [pc, #328]	; (801a624 <HAL_RCC_ClockConfig+0x1bc>)
 801a4da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801a4de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801a4e0:	4b50      	ldr	r3, [pc, #320]	; (801a624 <HAL_RCC_ClockConfig+0x1bc>)
 801a4e2:	689b      	ldr	r3, [r3, #8]
 801a4e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	689b      	ldr	r3, [r3, #8]
 801a4ec:	494d      	ldr	r1, [pc, #308]	; (801a624 <HAL_RCC_ClockConfig+0x1bc>)
 801a4ee:	4313      	orrs	r3, r2
 801a4f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	f003 0301 	and.w	r3, r3, #1
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d044      	beq.n	801a588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	685b      	ldr	r3, [r3, #4]
 801a502:	2b01      	cmp	r3, #1
 801a504:	d107      	bne.n	801a516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a506:	4b47      	ldr	r3, [pc, #284]	; (801a624 <HAL_RCC_ClockConfig+0x1bc>)
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d119      	bne.n	801a546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a512:	2301      	movs	r3, #1
 801a514:	e07f      	b.n	801a616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	685b      	ldr	r3, [r3, #4]
 801a51a:	2b02      	cmp	r3, #2
 801a51c:	d003      	beq.n	801a526 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a522:	2b03      	cmp	r3, #3
 801a524:	d107      	bne.n	801a536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a526:	4b3f      	ldr	r3, [pc, #252]	; (801a624 <HAL_RCC_ClockConfig+0x1bc>)
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d109      	bne.n	801a546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a532:	2301      	movs	r3, #1
 801a534:	e06f      	b.n	801a616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a536:	4b3b      	ldr	r3, [pc, #236]	; (801a624 <HAL_RCC_ClockConfig+0x1bc>)
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	f003 0302 	and.w	r3, r3, #2
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d101      	bne.n	801a546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a542:	2301      	movs	r3, #1
 801a544:	e067      	b.n	801a616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801a546:	4b37      	ldr	r3, [pc, #220]	; (801a624 <HAL_RCC_ClockConfig+0x1bc>)
 801a548:	689b      	ldr	r3, [r3, #8]
 801a54a:	f023 0203 	bic.w	r2, r3, #3
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	685b      	ldr	r3, [r3, #4]
 801a552:	4934      	ldr	r1, [pc, #208]	; (801a624 <HAL_RCC_ClockConfig+0x1bc>)
 801a554:	4313      	orrs	r3, r2
 801a556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801a558:	f7fb ff90 	bl	801647c <HAL_GetTick>
 801a55c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a55e:	e00a      	b.n	801a576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a560:	f7fb ff8c 	bl	801647c <HAL_GetTick>
 801a564:	4602      	mov	r2, r0
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	1ad3      	subs	r3, r2, r3
 801a56a:	f241 3288 	movw	r2, #5000	; 0x1388
 801a56e:	4293      	cmp	r3, r2
 801a570:	d901      	bls.n	801a576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801a572:	2303      	movs	r3, #3
 801a574:	e04f      	b.n	801a616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a576:	4b2b      	ldr	r3, [pc, #172]	; (801a624 <HAL_RCC_ClockConfig+0x1bc>)
 801a578:	689b      	ldr	r3, [r3, #8]
 801a57a:	f003 020c 	and.w	r2, r3, #12
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	685b      	ldr	r3, [r3, #4]
 801a582:	009b      	lsls	r3, r3, #2
 801a584:	429a      	cmp	r2, r3
 801a586:	d1eb      	bne.n	801a560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801a588:	4b25      	ldr	r3, [pc, #148]	; (801a620 <HAL_RCC_ClockConfig+0x1b8>)
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	f003 0307 	and.w	r3, r3, #7
 801a590:	683a      	ldr	r2, [r7, #0]
 801a592:	429a      	cmp	r2, r3
 801a594:	d20c      	bcs.n	801a5b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a596:	4b22      	ldr	r3, [pc, #136]	; (801a620 <HAL_RCC_ClockConfig+0x1b8>)
 801a598:	683a      	ldr	r2, [r7, #0]
 801a59a:	b2d2      	uxtb	r2, r2
 801a59c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a59e:	4b20      	ldr	r3, [pc, #128]	; (801a620 <HAL_RCC_ClockConfig+0x1b8>)
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	f003 0307 	and.w	r3, r3, #7
 801a5a6:	683a      	ldr	r2, [r7, #0]
 801a5a8:	429a      	cmp	r2, r3
 801a5aa:	d001      	beq.n	801a5b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801a5ac:	2301      	movs	r3, #1
 801a5ae:	e032      	b.n	801a616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	f003 0304 	and.w	r3, r3, #4
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	d008      	beq.n	801a5ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801a5bc:	4b19      	ldr	r3, [pc, #100]	; (801a624 <HAL_RCC_ClockConfig+0x1bc>)
 801a5be:	689b      	ldr	r3, [r3, #8]
 801a5c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	68db      	ldr	r3, [r3, #12]
 801a5c8:	4916      	ldr	r1, [pc, #88]	; (801a624 <HAL_RCC_ClockConfig+0x1bc>)
 801a5ca:	4313      	orrs	r3, r2
 801a5cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	f003 0308 	and.w	r3, r3, #8
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d009      	beq.n	801a5ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801a5da:	4b12      	ldr	r3, [pc, #72]	; (801a624 <HAL_RCC_ClockConfig+0x1bc>)
 801a5dc:	689b      	ldr	r3, [r3, #8]
 801a5de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	691b      	ldr	r3, [r3, #16]
 801a5e6:	00db      	lsls	r3, r3, #3
 801a5e8:	490e      	ldr	r1, [pc, #56]	; (801a624 <HAL_RCC_ClockConfig+0x1bc>)
 801a5ea:	4313      	orrs	r3, r2
 801a5ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a5ee:	f000 f821 	bl	801a634 <HAL_RCC_GetSysClockFreq>
 801a5f2:	4602      	mov	r2, r0
 801a5f4:	4b0b      	ldr	r3, [pc, #44]	; (801a624 <HAL_RCC_ClockConfig+0x1bc>)
 801a5f6:	689b      	ldr	r3, [r3, #8]
 801a5f8:	091b      	lsrs	r3, r3, #4
 801a5fa:	f003 030f 	and.w	r3, r3, #15
 801a5fe:	490a      	ldr	r1, [pc, #40]	; (801a628 <HAL_RCC_ClockConfig+0x1c0>)
 801a600:	5ccb      	ldrb	r3, [r1, r3]
 801a602:	fa22 f303 	lsr.w	r3, r2, r3
 801a606:	4a09      	ldr	r2, [pc, #36]	; (801a62c <HAL_RCC_ClockConfig+0x1c4>)
 801a608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801a60a:	4b09      	ldr	r3, [pc, #36]	; (801a630 <HAL_RCC_ClockConfig+0x1c8>)
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	4618      	mov	r0, r3
 801a610:	f7fb fef0 	bl	80163f4 <HAL_InitTick>

  return HAL_OK;
 801a614:	2300      	movs	r3, #0
}
 801a616:	4618      	mov	r0, r3
 801a618:	3710      	adds	r7, #16
 801a61a:	46bd      	mov	sp, r7
 801a61c:	bd80      	pop	{r7, pc}
 801a61e:	bf00      	nop
 801a620:	40023c00 	.word	0x40023c00
 801a624:	40023800 	.word	0x40023800
 801a628:	08029c1c 	.word	0x08029c1c
 801a62c:	2000018c 	.word	0x2000018c
 801a630:	20000190 	.word	0x20000190

0801a634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801a634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a638:	b094      	sub	sp, #80	; 0x50
 801a63a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801a63c:	2300      	movs	r3, #0
 801a63e:	647b      	str	r3, [r7, #68]	; 0x44
 801a640:	2300      	movs	r3, #0
 801a642:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a644:	2300      	movs	r3, #0
 801a646:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 801a648:	2300      	movs	r3, #0
 801a64a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801a64c:	4b79      	ldr	r3, [pc, #484]	; (801a834 <HAL_RCC_GetSysClockFreq+0x200>)
 801a64e:	689b      	ldr	r3, [r3, #8]
 801a650:	f003 030c 	and.w	r3, r3, #12
 801a654:	2b08      	cmp	r3, #8
 801a656:	d00d      	beq.n	801a674 <HAL_RCC_GetSysClockFreq+0x40>
 801a658:	2b08      	cmp	r3, #8
 801a65a:	f200 80e1 	bhi.w	801a820 <HAL_RCC_GetSysClockFreq+0x1ec>
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d002      	beq.n	801a668 <HAL_RCC_GetSysClockFreq+0x34>
 801a662:	2b04      	cmp	r3, #4
 801a664:	d003      	beq.n	801a66e <HAL_RCC_GetSysClockFreq+0x3a>
 801a666:	e0db      	b.n	801a820 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801a668:	4b73      	ldr	r3, [pc, #460]	; (801a838 <HAL_RCC_GetSysClockFreq+0x204>)
 801a66a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 801a66c:	e0db      	b.n	801a826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801a66e:	4b73      	ldr	r3, [pc, #460]	; (801a83c <HAL_RCC_GetSysClockFreq+0x208>)
 801a670:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a672:	e0d8      	b.n	801a826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801a674:	4b6f      	ldr	r3, [pc, #444]	; (801a834 <HAL_RCC_GetSysClockFreq+0x200>)
 801a676:	685b      	ldr	r3, [r3, #4]
 801a678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a67c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801a67e:	4b6d      	ldr	r3, [pc, #436]	; (801a834 <HAL_RCC_GetSysClockFreq+0x200>)
 801a680:	685b      	ldr	r3, [r3, #4]
 801a682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a686:	2b00      	cmp	r3, #0
 801a688:	d063      	beq.n	801a752 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801a68a:	4b6a      	ldr	r3, [pc, #424]	; (801a834 <HAL_RCC_GetSysClockFreq+0x200>)
 801a68c:	685b      	ldr	r3, [r3, #4]
 801a68e:	099b      	lsrs	r3, r3, #6
 801a690:	2200      	movs	r2, #0
 801a692:	63bb      	str	r3, [r7, #56]	; 0x38
 801a694:	63fa      	str	r2, [r7, #60]	; 0x3c
 801a696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a69c:	633b      	str	r3, [r7, #48]	; 0x30
 801a69e:	2300      	movs	r3, #0
 801a6a0:	637b      	str	r3, [r7, #52]	; 0x34
 801a6a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801a6a6:	4622      	mov	r2, r4
 801a6a8:	462b      	mov	r3, r5
 801a6aa:	f04f 0000 	mov.w	r0, #0
 801a6ae:	f04f 0100 	mov.w	r1, #0
 801a6b2:	0159      	lsls	r1, r3, #5
 801a6b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801a6b8:	0150      	lsls	r0, r2, #5
 801a6ba:	4602      	mov	r2, r0
 801a6bc:	460b      	mov	r3, r1
 801a6be:	4621      	mov	r1, r4
 801a6c0:	1a51      	subs	r1, r2, r1
 801a6c2:	6139      	str	r1, [r7, #16]
 801a6c4:	4629      	mov	r1, r5
 801a6c6:	eb63 0301 	sbc.w	r3, r3, r1
 801a6ca:	617b      	str	r3, [r7, #20]
 801a6cc:	f04f 0200 	mov.w	r2, #0
 801a6d0:	f04f 0300 	mov.w	r3, #0
 801a6d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801a6d8:	4659      	mov	r1, fp
 801a6da:	018b      	lsls	r3, r1, #6
 801a6dc:	4651      	mov	r1, sl
 801a6de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801a6e2:	4651      	mov	r1, sl
 801a6e4:	018a      	lsls	r2, r1, #6
 801a6e6:	4651      	mov	r1, sl
 801a6e8:	ebb2 0801 	subs.w	r8, r2, r1
 801a6ec:	4659      	mov	r1, fp
 801a6ee:	eb63 0901 	sbc.w	r9, r3, r1
 801a6f2:	f04f 0200 	mov.w	r2, #0
 801a6f6:	f04f 0300 	mov.w	r3, #0
 801a6fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801a6fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801a702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801a706:	4690      	mov	r8, r2
 801a708:	4699      	mov	r9, r3
 801a70a:	4623      	mov	r3, r4
 801a70c:	eb18 0303 	adds.w	r3, r8, r3
 801a710:	60bb      	str	r3, [r7, #8]
 801a712:	462b      	mov	r3, r5
 801a714:	eb49 0303 	adc.w	r3, r9, r3
 801a718:	60fb      	str	r3, [r7, #12]
 801a71a:	f04f 0200 	mov.w	r2, #0
 801a71e:	f04f 0300 	mov.w	r3, #0
 801a722:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801a726:	4629      	mov	r1, r5
 801a728:	024b      	lsls	r3, r1, #9
 801a72a:	4621      	mov	r1, r4
 801a72c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801a730:	4621      	mov	r1, r4
 801a732:	024a      	lsls	r2, r1, #9
 801a734:	4610      	mov	r0, r2
 801a736:	4619      	mov	r1, r3
 801a738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a73a:	2200      	movs	r2, #0
 801a73c:	62bb      	str	r3, [r7, #40]	; 0x28
 801a73e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801a744:	f7e6 fa58 	bl	8000bf8 <__aeabi_uldivmod>
 801a748:	4602      	mov	r2, r0
 801a74a:	460b      	mov	r3, r1
 801a74c:	4613      	mov	r3, r2
 801a74e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a750:	e058      	b.n	801a804 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801a752:	4b38      	ldr	r3, [pc, #224]	; (801a834 <HAL_RCC_GetSysClockFreq+0x200>)
 801a754:	685b      	ldr	r3, [r3, #4]
 801a756:	099b      	lsrs	r3, r3, #6
 801a758:	2200      	movs	r2, #0
 801a75a:	4618      	mov	r0, r3
 801a75c:	4611      	mov	r1, r2
 801a75e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801a762:	623b      	str	r3, [r7, #32]
 801a764:	2300      	movs	r3, #0
 801a766:	627b      	str	r3, [r7, #36]	; 0x24
 801a768:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801a76c:	4642      	mov	r2, r8
 801a76e:	464b      	mov	r3, r9
 801a770:	f04f 0000 	mov.w	r0, #0
 801a774:	f04f 0100 	mov.w	r1, #0
 801a778:	0159      	lsls	r1, r3, #5
 801a77a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801a77e:	0150      	lsls	r0, r2, #5
 801a780:	4602      	mov	r2, r0
 801a782:	460b      	mov	r3, r1
 801a784:	4641      	mov	r1, r8
 801a786:	ebb2 0a01 	subs.w	sl, r2, r1
 801a78a:	4649      	mov	r1, r9
 801a78c:	eb63 0b01 	sbc.w	fp, r3, r1
 801a790:	f04f 0200 	mov.w	r2, #0
 801a794:	f04f 0300 	mov.w	r3, #0
 801a798:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801a79c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801a7a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801a7a4:	ebb2 040a 	subs.w	r4, r2, sl
 801a7a8:	eb63 050b 	sbc.w	r5, r3, fp
 801a7ac:	f04f 0200 	mov.w	r2, #0
 801a7b0:	f04f 0300 	mov.w	r3, #0
 801a7b4:	00eb      	lsls	r3, r5, #3
 801a7b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801a7ba:	00e2      	lsls	r2, r4, #3
 801a7bc:	4614      	mov	r4, r2
 801a7be:	461d      	mov	r5, r3
 801a7c0:	4643      	mov	r3, r8
 801a7c2:	18e3      	adds	r3, r4, r3
 801a7c4:	603b      	str	r3, [r7, #0]
 801a7c6:	464b      	mov	r3, r9
 801a7c8:	eb45 0303 	adc.w	r3, r5, r3
 801a7cc:	607b      	str	r3, [r7, #4]
 801a7ce:	f04f 0200 	mov.w	r2, #0
 801a7d2:	f04f 0300 	mov.w	r3, #0
 801a7d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 801a7da:	4629      	mov	r1, r5
 801a7dc:	028b      	lsls	r3, r1, #10
 801a7de:	4621      	mov	r1, r4
 801a7e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801a7e4:	4621      	mov	r1, r4
 801a7e6:	028a      	lsls	r2, r1, #10
 801a7e8:	4610      	mov	r0, r2
 801a7ea:	4619      	mov	r1, r3
 801a7ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a7ee:	2200      	movs	r2, #0
 801a7f0:	61bb      	str	r3, [r7, #24]
 801a7f2:	61fa      	str	r2, [r7, #28]
 801a7f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a7f8:	f7e6 f9fe 	bl	8000bf8 <__aeabi_uldivmod>
 801a7fc:	4602      	mov	r2, r0
 801a7fe:	460b      	mov	r3, r1
 801a800:	4613      	mov	r3, r2
 801a802:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801a804:	4b0b      	ldr	r3, [pc, #44]	; (801a834 <HAL_RCC_GetSysClockFreq+0x200>)
 801a806:	685b      	ldr	r3, [r3, #4]
 801a808:	0c1b      	lsrs	r3, r3, #16
 801a80a:	f003 0303 	and.w	r3, r3, #3
 801a80e:	3301      	adds	r3, #1
 801a810:	005b      	lsls	r3, r3, #1
 801a812:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 801a814:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a818:	fbb2 f3f3 	udiv	r3, r2, r3
 801a81c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a81e:	e002      	b.n	801a826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801a820:	4b05      	ldr	r3, [pc, #20]	; (801a838 <HAL_RCC_GetSysClockFreq+0x204>)
 801a822:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a824:	bf00      	nop
    }
  }
  return sysclockfreq;
 801a826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801a828:	4618      	mov	r0, r3
 801a82a:	3750      	adds	r7, #80	; 0x50
 801a82c:	46bd      	mov	sp, r7
 801a82e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a832:	bf00      	nop
 801a834:	40023800 	.word	0x40023800
 801a838:	00f42400 	.word	0x00f42400
 801a83c:	007a1200 	.word	0x007a1200

0801a840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801a840:	b480      	push	{r7}
 801a842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801a844:	4b03      	ldr	r3, [pc, #12]	; (801a854 <HAL_RCC_GetHCLKFreq+0x14>)
 801a846:	681b      	ldr	r3, [r3, #0]
}
 801a848:	4618      	mov	r0, r3
 801a84a:	46bd      	mov	sp, r7
 801a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a850:	4770      	bx	lr
 801a852:	bf00      	nop
 801a854:	2000018c 	.word	0x2000018c

0801a858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801a858:	b580      	push	{r7, lr}
 801a85a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801a85c:	f7ff fff0 	bl	801a840 <HAL_RCC_GetHCLKFreq>
 801a860:	4602      	mov	r2, r0
 801a862:	4b05      	ldr	r3, [pc, #20]	; (801a878 <HAL_RCC_GetPCLK1Freq+0x20>)
 801a864:	689b      	ldr	r3, [r3, #8]
 801a866:	0a9b      	lsrs	r3, r3, #10
 801a868:	f003 0307 	and.w	r3, r3, #7
 801a86c:	4903      	ldr	r1, [pc, #12]	; (801a87c <HAL_RCC_GetPCLK1Freq+0x24>)
 801a86e:	5ccb      	ldrb	r3, [r1, r3]
 801a870:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a874:	4618      	mov	r0, r3
 801a876:	bd80      	pop	{r7, pc}
 801a878:	40023800 	.word	0x40023800
 801a87c:	08029c2c 	.word	0x08029c2c

0801a880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801a880:	b580      	push	{r7, lr}
 801a882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801a884:	f7ff ffdc 	bl	801a840 <HAL_RCC_GetHCLKFreq>
 801a888:	4602      	mov	r2, r0
 801a88a:	4b05      	ldr	r3, [pc, #20]	; (801a8a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 801a88c:	689b      	ldr	r3, [r3, #8]
 801a88e:	0b5b      	lsrs	r3, r3, #13
 801a890:	f003 0307 	and.w	r3, r3, #7
 801a894:	4903      	ldr	r1, [pc, #12]	; (801a8a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 801a896:	5ccb      	ldrb	r3, [r1, r3]
 801a898:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a89c:	4618      	mov	r0, r3
 801a89e:	bd80      	pop	{r7, pc}
 801a8a0:	40023800 	.word	0x40023800
 801a8a4:	08029c2c 	.word	0x08029c2c

0801a8a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801a8a8:	b580      	push	{r7, lr}
 801a8aa:	b082      	sub	sp, #8
 801a8ac:	af00      	add	r7, sp, #0
 801a8ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d101      	bne.n	801a8ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801a8b6:	2301      	movs	r3, #1
 801a8b8:	e041      	b.n	801a93e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a8c0:	b2db      	uxtb	r3, r3
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d106      	bne.n	801a8d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	2200      	movs	r2, #0
 801a8ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801a8ce:	6878      	ldr	r0, [r7, #4]
 801a8d0:	f7fb fa86 	bl	8015de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	2202      	movs	r2, #2
 801a8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	681a      	ldr	r2, [r3, #0]
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	3304      	adds	r3, #4
 801a8e4:	4619      	mov	r1, r3
 801a8e6:	4610      	mov	r0, r2
 801a8e8:	f000 fcae 	bl	801b248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	2201      	movs	r2, #1
 801a8f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	2201      	movs	r2, #1
 801a8f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	2201      	movs	r2, #1
 801a900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	2201      	movs	r2, #1
 801a908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	2201      	movs	r2, #1
 801a910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	2201      	movs	r2, #1
 801a918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	2201      	movs	r2, #1
 801a920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	2201      	movs	r2, #1
 801a928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	2201      	movs	r2, #1
 801a930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	2201      	movs	r2, #1
 801a938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a93c:	2300      	movs	r3, #0
}
 801a93e:	4618      	mov	r0, r3
 801a940:	3708      	adds	r7, #8
 801a942:	46bd      	mov	sp, r7
 801a944:	bd80      	pop	{r7, pc}
	...

0801a948 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801a948:	b480      	push	{r7}
 801a94a:	b085      	sub	sp, #20
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a956:	b2db      	uxtb	r3, r3
 801a958:	2b01      	cmp	r3, #1
 801a95a:	d001      	beq.n	801a960 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801a95c:	2301      	movs	r3, #1
 801a95e:	e03c      	b.n	801a9da <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	2202      	movs	r2, #2
 801a964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	4a1e      	ldr	r2, [pc, #120]	; (801a9e8 <HAL_TIM_Base_Start+0xa0>)
 801a96e:	4293      	cmp	r3, r2
 801a970:	d018      	beq.n	801a9a4 <HAL_TIM_Base_Start+0x5c>
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a97a:	d013      	beq.n	801a9a4 <HAL_TIM_Base_Start+0x5c>
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	4a1a      	ldr	r2, [pc, #104]	; (801a9ec <HAL_TIM_Base_Start+0xa4>)
 801a982:	4293      	cmp	r3, r2
 801a984:	d00e      	beq.n	801a9a4 <HAL_TIM_Base_Start+0x5c>
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	4a19      	ldr	r2, [pc, #100]	; (801a9f0 <HAL_TIM_Base_Start+0xa8>)
 801a98c:	4293      	cmp	r3, r2
 801a98e:	d009      	beq.n	801a9a4 <HAL_TIM_Base_Start+0x5c>
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	4a17      	ldr	r2, [pc, #92]	; (801a9f4 <HAL_TIM_Base_Start+0xac>)
 801a996:	4293      	cmp	r3, r2
 801a998:	d004      	beq.n	801a9a4 <HAL_TIM_Base_Start+0x5c>
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	4a16      	ldr	r2, [pc, #88]	; (801a9f8 <HAL_TIM_Base_Start+0xb0>)
 801a9a0:	4293      	cmp	r3, r2
 801a9a2:	d111      	bne.n	801a9c8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	689b      	ldr	r3, [r3, #8]
 801a9aa:	f003 0307 	and.w	r3, r3, #7
 801a9ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	2b06      	cmp	r3, #6
 801a9b4:	d010      	beq.n	801a9d8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	681a      	ldr	r2, [r3, #0]
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	681b      	ldr	r3, [r3, #0]
 801a9c0:	f042 0201 	orr.w	r2, r2, #1
 801a9c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a9c6:	e007      	b.n	801a9d8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	681a      	ldr	r2, [r3, #0]
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	681b      	ldr	r3, [r3, #0]
 801a9d2:	f042 0201 	orr.w	r2, r2, #1
 801a9d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a9d8:	2300      	movs	r3, #0
}
 801a9da:	4618      	mov	r0, r3
 801a9dc:	3714      	adds	r7, #20
 801a9de:	46bd      	mov	sp, r7
 801a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9e4:	4770      	bx	lr
 801a9e6:	bf00      	nop
 801a9e8:	40010000 	.word	0x40010000
 801a9ec:	40000400 	.word	0x40000400
 801a9f0:	40000800 	.word	0x40000800
 801a9f4:	40000c00 	.word	0x40000c00
 801a9f8:	40014000 	.word	0x40014000

0801a9fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801a9fc:	b480      	push	{r7}
 801a9fe:	b085      	sub	sp, #20
 801aa00:	af00      	add	r7, sp, #0
 801aa02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801aa0a:	b2db      	uxtb	r3, r3
 801aa0c:	2b01      	cmp	r3, #1
 801aa0e:	d001      	beq.n	801aa14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801aa10:	2301      	movs	r3, #1
 801aa12:	e044      	b.n	801aa9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	2202      	movs	r2, #2
 801aa18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	68da      	ldr	r2, [r3, #12]
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	681b      	ldr	r3, [r3, #0]
 801aa26:	f042 0201 	orr.w	r2, r2, #1
 801aa2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	4a1e      	ldr	r2, [pc, #120]	; (801aaac <HAL_TIM_Base_Start_IT+0xb0>)
 801aa32:	4293      	cmp	r3, r2
 801aa34:	d018      	beq.n	801aa68 <HAL_TIM_Base_Start_IT+0x6c>
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801aa3e:	d013      	beq.n	801aa68 <HAL_TIM_Base_Start_IT+0x6c>
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	681b      	ldr	r3, [r3, #0]
 801aa44:	4a1a      	ldr	r2, [pc, #104]	; (801aab0 <HAL_TIM_Base_Start_IT+0xb4>)
 801aa46:	4293      	cmp	r3, r2
 801aa48:	d00e      	beq.n	801aa68 <HAL_TIM_Base_Start_IT+0x6c>
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	4a19      	ldr	r2, [pc, #100]	; (801aab4 <HAL_TIM_Base_Start_IT+0xb8>)
 801aa50:	4293      	cmp	r3, r2
 801aa52:	d009      	beq.n	801aa68 <HAL_TIM_Base_Start_IT+0x6c>
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	681b      	ldr	r3, [r3, #0]
 801aa58:	4a17      	ldr	r2, [pc, #92]	; (801aab8 <HAL_TIM_Base_Start_IT+0xbc>)
 801aa5a:	4293      	cmp	r3, r2
 801aa5c:	d004      	beq.n	801aa68 <HAL_TIM_Base_Start_IT+0x6c>
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	681b      	ldr	r3, [r3, #0]
 801aa62:	4a16      	ldr	r2, [pc, #88]	; (801aabc <HAL_TIM_Base_Start_IT+0xc0>)
 801aa64:	4293      	cmp	r3, r2
 801aa66:	d111      	bne.n	801aa8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	689b      	ldr	r3, [r3, #8]
 801aa6e:	f003 0307 	and.w	r3, r3, #7
 801aa72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801aa74:	68fb      	ldr	r3, [r7, #12]
 801aa76:	2b06      	cmp	r3, #6
 801aa78:	d010      	beq.n	801aa9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	681a      	ldr	r2, [r3, #0]
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	f042 0201 	orr.w	r2, r2, #1
 801aa88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801aa8a:	e007      	b.n	801aa9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	681b      	ldr	r3, [r3, #0]
 801aa90:	681a      	ldr	r2, [r3, #0]
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	f042 0201 	orr.w	r2, r2, #1
 801aa9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801aa9c:	2300      	movs	r3, #0
}
 801aa9e:	4618      	mov	r0, r3
 801aaa0:	3714      	adds	r7, #20
 801aaa2:	46bd      	mov	sp, r7
 801aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaa8:	4770      	bx	lr
 801aaaa:	bf00      	nop
 801aaac:	40010000 	.word	0x40010000
 801aab0:	40000400 	.word	0x40000400
 801aab4:	40000800 	.word	0x40000800
 801aab8:	40000c00 	.word	0x40000c00
 801aabc:	40014000 	.word	0x40014000

0801aac0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801aac0:	b580      	push	{r7, lr}
 801aac2:	b082      	sub	sp, #8
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d101      	bne.n	801aad2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801aace:	2301      	movs	r3, #1
 801aad0:	e041      	b.n	801ab56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801aad8:	b2db      	uxtb	r3, r3
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d106      	bne.n	801aaec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	2200      	movs	r2, #0
 801aae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801aae6:	6878      	ldr	r0, [r7, #4]
 801aae8:	f000 f839 	bl	801ab5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	2202      	movs	r2, #2
 801aaf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	681a      	ldr	r2, [r3, #0]
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	3304      	adds	r3, #4
 801aafc:	4619      	mov	r1, r3
 801aafe:	4610      	mov	r0, r2
 801ab00:	f000 fba2 	bl	801b248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	2201      	movs	r2, #1
 801ab08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	2201      	movs	r2, #1
 801ab10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	2201      	movs	r2, #1
 801ab18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	2201      	movs	r2, #1
 801ab20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	2201      	movs	r2, #1
 801ab28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	2201      	movs	r2, #1
 801ab30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	2201      	movs	r2, #1
 801ab38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	2201      	movs	r2, #1
 801ab40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	2201      	movs	r2, #1
 801ab48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	2201      	movs	r2, #1
 801ab50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ab54:	2300      	movs	r3, #0
}
 801ab56:	4618      	mov	r0, r3
 801ab58:	3708      	adds	r7, #8
 801ab5a:	46bd      	mov	sp, r7
 801ab5c:	bd80      	pop	{r7, pc}

0801ab5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801ab5e:	b480      	push	{r7}
 801ab60:	b083      	sub	sp, #12
 801ab62:	af00      	add	r7, sp, #0
 801ab64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801ab66:	bf00      	nop
 801ab68:	370c      	adds	r7, #12
 801ab6a:	46bd      	mov	sp, r7
 801ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab70:	4770      	bx	lr
	...

0801ab74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ab74:	b580      	push	{r7, lr}
 801ab76:	b084      	sub	sp, #16
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
 801ab7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801ab7e:	683b      	ldr	r3, [r7, #0]
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d109      	bne.n	801ab98 <HAL_TIM_PWM_Start+0x24>
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ab8a:	b2db      	uxtb	r3, r3
 801ab8c:	2b01      	cmp	r3, #1
 801ab8e:	bf14      	ite	ne
 801ab90:	2301      	movne	r3, #1
 801ab92:	2300      	moveq	r3, #0
 801ab94:	b2db      	uxtb	r3, r3
 801ab96:	e022      	b.n	801abde <HAL_TIM_PWM_Start+0x6a>
 801ab98:	683b      	ldr	r3, [r7, #0]
 801ab9a:	2b04      	cmp	r3, #4
 801ab9c:	d109      	bne.n	801abb2 <HAL_TIM_PWM_Start+0x3e>
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801aba4:	b2db      	uxtb	r3, r3
 801aba6:	2b01      	cmp	r3, #1
 801aba8:	bf14      	ite	ne
 801abaa:	2301      	movne	r3, #1
 801abac:	2300      	moveq	r3, #0
 801abae:	b2db      	uxtb	r3, r3
 801abb0:	e015      	b.n	801abde <HAL_TIM_PWM_Start+0x6a>
 801abb2:	683b      	ldr	r3, [r7, #0]
 801abb4:	2b08      	cmp	r3, #8
 801abb6:	d109      	bne.n	801abcc <HAL_TIM_PWM_Start+0x58>
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801abbe:	b2db      	uxtb	r3, r3
 801abc0:	2b01      	cmp	r3, #1
 801abc2:	bf14      	ite	ne
 801abc4:	2301      	movne	r3, #1
 801abc6:	2300      	moveq	r3, #0
 801abc8:	b2db      	uxtb	r3, r3
 801abca:	e008      	b.n	801abde <HAL_TIM_PWM_Start+0x6a>
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801abd2:	b2db      	uxtb	r3, r3
 801abd4:	2b01      	cmp	r3, #1
 801abd6:	bf14      	ite	ne
 801abd8:	2301      	movne	r3, #1
 801abda:	2300      	moveq	r3, #0
 801abdc:	b2db      	uxtb	r3, r3
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d001      	beq.n	801abe6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801abe2:	2301      	movs	r3, #1
 801abe4:	e068      	b.n	801acb8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801abe6:	683b      	ldr	r3, [r7, #0]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d104      	bne.n	801abf6 <HAL_TIM_PWM_Start+0x82>
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	2202      	movs	r2, #2
 801abf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801abf4:	e013      	b.n	801ac1e <HAL_TIM_PWM_Start+0xaa>
 801abf6:	683b      	ldr	r3, [r7, #0]
 801abf8:	2b04      	cmp	r3, #4
 801abfa:	d104      	bne.n	801ac06 <HAL_TIM_PWM_Start+0x92>
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	2202      	movs	r2, #2
 801ac00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ac04:	e00b      	b.n	801ac1e <HAL_TIM_PWM_Start+0xaa>
 801ac06:	683b      	ldr	r3, [r7, #0]
 801ac08:	2b08      	cmp	r3, #8
 801ac0a:	d104      	bne.n	801ac16 <HAL_TIM_PWM_Start+0xa2>
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	2202      	movs	r2, #2
 801ac10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ac14:	e003      	b.n	801ac1e <HAL_TIM_PWM_Start+0xaa>
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	2202      	movs	r2, #2
 801ac1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	2201      	movs	r2, #1
 801ac24:	6839      	ldr	r1, [r7, #0]
 801ac26:	4618      	mov	r0, r3
 801ac28:	f000 fdb4 	bl	801b794 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	4a23      	ldr	r2, [pc, #140]	; (801acc0 <HAL_TIM_PWM_Start+0x14c>)
 801ac32:	4293      	cmp	r3, r2
 801ac34:	d107      	bne.n	801ac46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ac44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	4a1d      	ldr	r2, [pc, #116]	; (801acc0 <HAL_TIM_PWM_Start+0x14c>)
 801ac4c:	4293      	cmp	r3, r2
 801ac4e:	d018      	beq.n	801ac82 <HAL_TIM_PWM_Start+0x10e>
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ac58:	d013      	beq.n	801ac82 <HAL_TIM_PWM_Start+0x10e>
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	4a19      	ldr	r2, [pc, #100]	; (801acc4 <HAL_TIM_PWM_Start+0x150>)
 801ac60:	4293      	cmp	r3, r2
 801ac62:	d00e      	beq.n	801ac82 <HAL_TIM_PWM_Start+0x10e>
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	4a17      	ldr	r2, [pc, #92]	; (801acc8 <HAL_TIM_PWM_Start+0x154>)
 801ac6a:	4293      	cmp	r3, r2
 801ac6c:	d009      	beq.n	801ac82 <HAL_TIM_PWM_Start+0x10e>
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	4a16      	ldr	r2, [pc, #88]	; (801accc <HAL_TIM_PWM_Start+0x158>)
 801ac74:	4293      	cmp	r3, r2
 801ac76:	d004      	beq.n	801ac82 <HAL_TIM_PWM_Start+0x10e>
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	4a14      	ldr	r2, [pc, #80]	; (801acd0 <HAL_TIM_PWM_Start+0x15c>)
 801ac7e:	4293      	cmp	r3, r2
 801ac80:	d111      	bne.n	801aca6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	681b      	ldr	r3, [r3, #0]
 801ac86:	689b      	ldr	r3, [r3, #8]
 801ac88:	f003 0307 	and.w	r3, r3, #7
 801ac8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ac8e:	68fb      	ldr	r3, [r7, #12]
 801ac90:	2b06      	cmp	r3, #6
 801ac92:	d010      	beq.n	801acb6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	681a      	ldr	r2, [r3, #0]
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	f042 0201 	orr.w	r2, r2, #1
 801aca2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801aca4:	e007      	b.n	801acb6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	681a      	ldr	r2, [r3, #0]
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	f042 0201 	orr.w	r2, r2, #1
 801acb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801acb6:	2300      	movs	r3, #0
}
 801acb8:	4618      	mov	r0, r3
 801acba:	3710      	adds	r7, #16
 801acbc:	46bd      	mov	sp, r7
 801acbe:	bd80      	pop	{r7, pc}
 801acc0:	40010000 	.word	0x40010000
 801acc4:	40000400 	.word	0x40000400
 801acc8:	40000800 	.word	0x40000800
 801accc:	40000c00 	.word	0x40000c00
 801acd0:	40014000 	.word	0x40014000

0801acd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801acd4:	b580      	push	{r7, lr}
 801acd6:	b082      	sub	sp, #8
 801acd8:	af00      	add	r7, sp, #0
 801acda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	691b      	ldr	r3, [r3, #16]
 801ace2:	f003 0302 	and.w	r3, r3, #2
 801ace6:	2b02      	cmp	r3, #2
 801ace8:	d122      	bne.n	801ad30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	68db      	ldr	r3, [r3, #12]
 801acf0:	f003 0302 	and.w	r3, r3, #2
 801acf4:	2b02      	cmp	r3, #2
 801acf6:	d11b      	bne.n	801ad30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	f06f 0202 	mvn.w	r2, #2
 801ad00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	2201      	movs	r2, #1
 801ad06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	699b      	ldr	r3, [r3, #24]
 801ad0e:	f003 0303 	and.w	r3, r3, #3
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d003      	beq.n	801ad1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801ad16:	6878      	ldr	r0, [r7, #4]
 801ad18:	f000 fa77 	bl	801b20a <HAL_TIM_IC_CaptureCallback>
 801ad1c:	e005      	b.n	801ad2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801ad1e:	6878      	ldr	r0, [r7, #4]
 801ad20:	f000 fa69 	bl	801b1f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ad24:	6878      	ldr	r0, [r7, #4]
 801ad26:	f000 fa7a 	bl	801b21e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	2200      	movs	r2, #0
 801ad2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	691b      	ldr	r3, [r3, #16]
 801ad36:	f003 0304 	and.w	r3, r3, #4
 801ad3a:	2b04      	cmp	r3, #4
 801ad3c:	d122      	bne.n	801ad84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	68db      	ldr	r3, [r3, #12]
 801ad44:	f003 0304 	and.w	r3, r3, #4
 801ad48:	2b04      	cmp	r3, #4
 801ad4a:	d11b      	bne.n	801ad84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	f06f 0204 	mvn.w	r2, #4
 801ad54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	2202      	movs	r2, #2
 801ad5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	699b      	ldr	r3, [r3, #24]
 801ad62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d003      	beq.n	801ad72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ad6a:	6878      	ldr	r0, [r7, #4]
 801ad6c:	f000 fa4d 	bl	801b20a <HAL_TIM_IC_CaptureCallback>
 801ad70:	e005      	b.n	801ad7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ad72:	6878      	ldr	r0, [r7, #4]
 801ad74:	f000 fa3f 	bl	801b1f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ad78:	6878      	ldr	r0, [r7, #4]
 801ad7a:	f000 fa50 	bl	801b21e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	2200      	movs	r2, #0
 801ad82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	681b      	ldr	r3, [r3, #0]
 801ad88:	691b      	ldr	r3, [r3, #16]
 801ad8a:	f003 0308 	and.w	r3, r3, #8
 801ad8e:	2b08      	cmp	r3, #8
 801ad90:	d122      	bne.n	801add8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	68db      	ldr	r3, [r3, #12]
 801ad98:	f003 0308 	and.w	r3, r3, #8
 801ad9c:	2b08      	cmp	r3, #8
 801ad9e:	d11b      	bne.n	801add8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	f06f 0208 	mvn.w	r2, #8
 801ada8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	2204      	movs	r2, #4
 801adae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	69db      	ldr	r3, [r3, #28]
 801adb6:	f003 0303 	and.w	r3, r3, #3
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d003      	beq.n	801adc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801adbe:	6878      	ldr	r0, [r7, #4]
 801adc0:	f000 fa23 	bl	801b20a <HAL_TIM_IC_CaptureCallback>
 801adc4:	e005      	b.n	801add2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801adc6:	6878      	ldr	r0, [r7, #4]
 801adc8:	f000 fa15 	bl	801b1f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801adcc:	6878      	ldr	r0, [r7, #4]
 801adce:	f000 fa26 	bl	801b21e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	2200      	movs	r2, #0
 801add6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	691b      	ldr	r3, [r3, #16]
 801adde:	f003 0310 	and.w	r3, r3, #16
 801ade2:	2b10      	cmp	r3, #16
 801ade4:	d122      	bne.n	801ae2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	68db      	ldr	r3, [r3, #12]
 801adec:	f003 0310 	and.w	r3, r3, #16
 801adf0:	2b10      	cmp	r3, #16
 801adf2:	d11b      	bne.n	801ae2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	f06f 0210 	mvn.w	r2, #16
 801adfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	2208      	movs	r2, #8
 801ae02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	69db      	ldr	r3, [r3, #28]
 801ae0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d003      	beq.n	801ae1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ae12:	6878      	ldr	r0, [r7, #4]
 801ae14:	f000 f9f9 	bl	801b20a <HAL_TIM_IC_CaptureCallback>
 801ae18:	e005      	b.n	801ae26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ae1a:	6878      	ldr	r0, [r7, #4]
 801ae1c:	f000 f9eb 	bl	801b1f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ae20:	6878      	ldr	r0, [r7, #4]
 801ae22:	f000 f9fc 	bl	801b21e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	2200      	movs	r2, #0
 801ae2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	691b      	ldr	r3, [r3, #16]
 801ae32:	f003 0301 	and.w	r3, r3, #1
 801ae36:	2b01      	cmp	r3, #1
 801ae38:	d10e      	bne.n	801ae58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	68db      	ldr	r3, [r3, #12]
 801ae40:	f003 0301 	and.w	r3, r3, #1
 801ae44:	2b01      	cmp	r3, #1
 801ae46:	d107      	bne.n	801ae58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	681b      	ldr	r3, [r3, #0]
 801ae4c:	f06f 0201 	mvn.w	r2, #1
 801ae50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801ae52:	6878      	ldr	r0, [r7, #4]
 801ae54:	f7e9 f85e 	bl	8003f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	691b      	ldr	r3, [r3, #16]
 801ae5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ae62:	2b80      	cmp	r3, #128	; 0x80
 801ae64:	d10e      	bne.n	801ae84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	681b      	ldr	r3, [r3, #0]
 801ae6a:	68db      	ldr	r3, [r3, #12]
 801ae6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ae70:	2b80      	cmp	r3, #128	; 0x80
 801ae72:	d107      	bne.n	801ae84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801ae7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801ae7e:	6878      	ldr	r0, [r7, #4]
 801ae80:	f000 fd26 	bl	801b8d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	681b      	ldr	r3, [r3, #0]
 801ae88:	691b      	ldr	r3, [r3, #16]
 801ae8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ae8e:	2b40      	cmp	r3, #64	; 0x40
 801ae90:	d10e      	bne.n	801aeb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	68db      	ldr	r3, [r3, #12]
 801ae98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ae9c:	2b40      	cmp	r3, #64	; 0x40
 801ae9e:	d107      	bne.n	801aeb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801aea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801aeaa:	6878      	ldr	r0, [r7, #4]
 801aeac:	f000 f9c1 	bl	801b232 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	691b      	ldr	r3, [r3, #16]
 801aeb6:	f003 0320 	and.w	r3, r3, #32
 801aeba:	2b20      	cmp	r3, #32
 801aebc:	d10e      	bne.n	801aedc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	68db      	ldr	r3, [r3, #12]
 801aec4:	f003 0320 	and.w	r3, r3, #32
 801aec8:	2b20      	cmp	r3, #32
 801aeca:	d107      	bne.n	801aedc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	f06f 0220 	mvn.w	r2, #32
 801aed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801aed6:	6878      	ldr	r0, [r7, #4]
 801aed8:	f000 fcf0 	bl	801b8bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801aedc:	bf00      	nop
 801aede:	3708      	adds	r7, #8
 801aee0:	46bd      	mov	sp, r7
 801aee2:	bd80      	pop	{r7, pc}

0801aee4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801aee4:	b580      	push	{r7, lr}
 801aee6:	b086      	sub	sp, #24
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	60f8      	str	r0, [r7, #12]
 801aeec:	60b9      	str	r1, [r7, #8]
 801aeee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801aef0:	2300      	movs	r3, #0
 801aef2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801aef4:	68fb      	ldr	r3, [r7, #12]
 801aef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801aefa:	2b01      	cmp	r3, #1
 801aefc:	d101      	bne.n	801af02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801aefe:	2302      	movs	r3, #2
 801af00:	e0ae      	b.n	801b060 <HAL_TIM_PWM_ConfigChannel+0x17c>
 801af02:	68fb      	ldr	r3, [r7, #12]
 801af04:	2201      	movs	r2, #1
 801af06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	2b0c      	cmp	r3, #12
 801af0e:	f200 809f 	bhi.w	801b050 <HAL_TIM_PWM_ConfigChannel+0x16c>
 801af12:	a201      	add	r2, pc, #4	; (adr r2, 801af18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801af14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af18:	0801af4d 	.word	0x0801af4d
 801af1c:	0801b051 	.word	0x0801b051
 801af20:	0801b051 	.word	0x0801b051
 801af24:	0801b051 	.word	0x0801b051
 801af28:	0801af8d 	.word	0x0801af8d
 801af2c:	0801b051 	.word	0x0801b051
 801af30:	0801b051 	.word	0x0801b051
 801af34:	0801b051 	.word	0x0801b051
 801af38:	0801afcf 	.word	0x0801afcf
 801af3c:	0801b051 	.word	0x0801b051
 801af40:	0801b051 	.word	0x0801b051
 801af44:	0801b051 	.word	0x0801b051
 801af48:	0801b00f 	.word	0x0801b00f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801af4c:	68fb      	ldr	r3, [r7, #12]
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	68b9      	ldr	r1, [r7, #8]
 801af52:	4618      	mov	r0, r3
 801af54:	f000 f9f8 	bl	801b348 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	699a      	ldr	r2, [r3, #24]
 801af5e:	68fb      	ldr	r3, [r7, #12]
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	f042 0208 	orr.w	r2, r2, #8
 801af66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801af68:	68fb      	ldr	r3, [r7, #12]
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	699a      	ldr	r2, [r3, #24]
 801af6e:	68fb      	ldr	r3, [r7, #12]
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	f022 0204 	bic.w	r2, r2, #4
 801af76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801af78:	68fb      	ldr	r3, [r7, #12]
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	6999      	ldr	r1, [r3, #24]
 801af7e:	68bb      	ldr	r3, [r7, #8]
 801af80:	691a      	ldr	r2, [r3, #16]
 801af82:	68fb      	ldr	r3, [r7, #12]
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	430a      	orrs	r2, r1
 801af88:	619a      	str	r2, [r3, #24]
      break;
 801af8a:	e064      	b.n	801b056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	68b9      	ldr	r1, [r7, #8]
 801af92:	4618      	mov	r0, r3
 801af94:	f000 fa3e 	bl	801b414 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801af98:	68fb      	ldr	r3, [r7, #12]
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	699a      	ldr	r2, [r3, #24]
 801af9e:	68fb      	ldr	r3, [r7, #12]
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801afa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801afa8:	68fb      	ldr	r3, [r7, #12]
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	699a      	ldr	r2, [r3, #24]
 801afae:	68fb      	ldr	r3, [r7, #12]
 801afb0:	681b      	ldr	r3, [r3, #0]
 801afb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801afb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	6999      	ldr	r1, [r3, #24]
 801afbe:	68bb      	ldr	r3, [r7, #8]
 801afc0:	691b      	ldr	r3, [r3, #16]
 801afc2:	021a      	lsls	r2, r3, #8
 801afc4:	68fb      	ldr	r3, [r7, #12]
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	430a      	orrs	r2, r1
 801afca:	619a      	str	r2, [r3, #24]
      break;
 801afcc:	e043      	b.n	801b056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	68b9      	ldr	r1, [r7, #8]
 801afd4:	4618      	mov	r0, r3
 801afd6:	f000 fa89 	bl	801b4ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801afda:	68fb      	ldr	r3, [r7, #12]
 801afdc:	681b      	ldr	r3, [r3, #0]
 801afde:	69da      	ldr	r2, [r3, #28]
 801afe0:	68fb      	ldr	r3, [r7, #12]
 801afe2:	681b      	ldr	r3, [r3, #0]
 801afe4:	f042 0208 	orr.w	r2, r2, #8
 801afe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801afea:	68fb      	ldr	r3, [r7, #12]
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	69da      	ldr	r2, [r3, #28]
 801aff0:	68fb      	ldr	r3, [r7, #12]
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	f022 0204 	bic.w	r2, r2, #4
 801aff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801affa:	68fb      	ldr	r3, [r7, #12]
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	69d9      	ldr	r1, [r3, #28]
 801b000:	68bb      	ldr	r3, [r7, #8]
 801b002:	691a      	ldr	r2, [r3, #16]
 801b004:	68fb      	ldr	r3, [r7, #12]
 801b006:	681b      	ldr	r3, [r3, #0]
 801b008:	430a      	orrs	r2, r1
 801b00a:	61da      	str	r2, [r3, #28]
      break;
 801b00c:	e023      	b.n	801b056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801b00e:	68fb      	ldr	r3, [r7, #12]
 801b010:	681b      	ldr	r3, [r3, #0]
 801b012:	68b9      	ldr	r1, [r7, #8]
 801b014:	4618      	mov	r0, r3
 801b016:	f000 fad3 	bl	801b5c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801b01a:	68fb      	ldr	r3, [r7, #12]
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	69da      	ldr	r2, [r3, #28]
 801b020:	68fb      	ldr	r3, [r7, #12]
 801b022:	681b      	ldr	r3, [r3, #0]
 801b024:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	681b      	ldr	r3, [r3, #0]
 801b02e:	69da      	ldr	r2, [r3, #28]
 801b030:	68fb      	ldr	r3, [r7, #12]
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	69d9      	ldr	r1, [r3, #28]
 801b040:	68bb      	ldr	r3, [r7, #8]
 801b042:	691b      	ldr	r3, [r3, #16]
 801b044:	021a      	lsls	r2, r3, #8
 801b046:	68fb      	ldr	r3, [r7, #12]
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	430a      	orrs	r2, r1
 801b04c:	61da      	str	r2, [r3, #28]
      break;
 801b04e:	e002      	b.n	801b056 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801b050:	2301      	movs	r3, #1
 801b052:	75fb      	strb	r3, [r7, #23]
      break;
 801b054:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801b056:	68fb      	ldr	r3, [r7, #12]
 801b058:	2200      	movs	r2, #0
 801b05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b05e:	7dfb      	ldrb	r3, [r7, #23]
}
 801b060:	4618      	mov	r0, r3
 801b062:	3718      	adds	r7, #24
 801b064:	46bd      	mov	sp, r7
 801b066:	bd80      	pop	{r7, pc}

0801b068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801b068:	b580      	push	{r7, lr}
 801b06a:	b084      	sub	sp, #16
 801b06c:	af00      	add	r7, sp, #0
 801b06e:	6078      	str	r0, [r7, #4]
 801b070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b072:	2300      	movs	r3, #0
 801b074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b07c:	2b01      	cmp	r3, #1
 801b07e:	d101      	bne.n	801b084 <HAL_TIM_ConfigClockSource+0x1c>
 801b080:	2302      	movs	r3, #2
 801b082:	e0b4      	b.n	801b1ee <HAL_TIM_ConfigClockSource+0x186>
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	2201      	movs	r2, #1
 801b088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	2202      	movs	r2, #2
 801b090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	681b      	ldr	r3, [r3, #0]
 801b098:	689b      	ldr	r3, [r3, #8]
 801b09a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801b09c:	68bb      	ldr	r3, [r7, #8]
 801b09e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801b0a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b0a4:	68bb      	ldr	r3, [r7, #8]
 801b0a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b0aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	68ba      	ldr	r2, [r7, #8]
 801b0b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801b0b4:	683b      	ldr	r3, [r7, #0]
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b0bc:	d03e      	beq.n	801b13c <HAL_TIM_ConfigClockSource+0xd4>
 801b0be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b0c2:	f200 8087 	bhi.w	801b1d4 <HAL_TIM_ConfigClockSource+0x16c>
 801b0c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b0ca:	f000 8086 	beq.w	801b1da <HAL_TIM_ConfigClockSource+0x172>
 801b0ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b0d2:	d87f      	bhi.n	801b1d4 <HAL_TIM_ConfigClockSource+0x16c>
 801b0d4:	2b70      	cmp	r3, #112	; 0x70
 801b0d6:	d01a      	beq.n	801b10e <HAL_TIM_ConfigClockSource+0xa6>
 801b0d8:	2b70      	cmp	r3, #112	; 0x70
 801b0da:	d87b      	bhi.n	801b1d4 <HAL_TIM_ConfigClockSource+0x16c>
 801b0dc:	2b60      	cmp	r3, #96	; 0x60
 801b0de:	d050      	beq.n	801b182 <HAL_TIM_ConfigClockSource+0x11a>
 801b0e0:	2b60      	cmp	r3, #96	; 0x60
 801b0e2:	d877      	bhi.n	801b1d4 <HAL_TIM_ConfigClockSource+0x16c>
 801b0e4:	2b50      	cmp	r3, #80	; 0x50
 801b0e6:	d03c      	beq.n	801b162 <HAL_TIM_ConfigClockSource+0xfa>
 801b0e8:	2b50      	cmp	r3, #80	; 0x50
 801b0ea:	d873      	bhi.n	801b1d4 <HAL_TIM_ConfigClockSource+0x16c>
 801b0ec:	2b40      	cmp	r3, #64	; 0x40
 801b0ee:	d058      	beq.n	801b1a2 <HAL_TIM_ConfigClockSource+0x13a>
 801b0f0:	2b40      	cmp	r3, #64	; 0x40
 801b0f2:	d86f      	bhi.n	801b1d4 <HAL_TIM_ConfigClockSource+0x16c>
 801b0f4:	2b30      	cmp	r3, #48	; 0x30
 801b0f6:	d064      	beq.n	801b1c2 <HAL_TIM_ConfigClockSource+0x15a>
 801b0f8:	2b30      	cmp	r3, #48	; 0x30
 801b0fa:	d86b      	bhi.n	801b1d4 <HAL_TIM_ConfigClockSource+0x16c>
 801b0fc:	2b20      	cmp	r3, #32
 801b0fe:	d060      	beq.n	801b1c2 <HAL_TIM_ConfigClockSource+0x15a>
 801b100:	2b20      	cmp	r3, #32
 801b102:	d867      	bhi.n	801b1d4 <HAL_TIM_ConfigClockSource+0x16c>
 801b104:	2b00      	cmp	r3, #0
 801b106:	d05c      	beq.n	801b1c2 <HAL_TIM_ConfigClockSource+0x15a>
 801b108:	2b10      	cmp	r3, #16
 801b10a:	d05a      	beq.n	801b1c2 <HAL_TIM_ConfigClockSource+0x15a>
 801b10c:	e062      	b.n	801b1d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	6818      	ldr	r0, [r3, #0]
 801b112:	683b      	ldr	r3, [r7, #0]
 801b114:	6899      	ldr	r1, [r3, #8]
 801b116:	683b      	ldr	r3, [r7, #0]
 801b118:	685a      	ldr	r2, [r3, #4]
 801b11a:	683b      	ldr	r3, [r7, #0]
 801b11c:	68db      	ldr	r3, [r3, #12]
 801b11e:	f000 fb19 	bl	801b754 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	681b      	ldr	r3, [r3, #0]
 801b126:	689b      	ldr	r3, [r3, #8]
 801b128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801b12a:	68bb      	ldr	r3, [r7, #8]
 801b12c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801b130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	68ba      	ldr	r2, [r7, #8]
 801b138:	609a      	str	r2, [r3, #8]
      break;
 801b13a:	e04f      	b.n	801b1dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	6818      	ldr	r0, [r3, #0]
 801b140:	683b      	ldr	r3, [r7, #0]
 801b142:	6899      	ldr	r1, [r3, #8]
 801b144:	683b      	ldr	r3, [r7, #0]
 801b146:	685a      	ldr	r2, [r3, #4]
 801b148:	683b      	ldr	r3, [r7, #0]
 801b14a:	68db      	ldr	r3, [r3, #12]
 801b14c:	f000 fb02 	bl	801b754 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	681b      	ldr	r3, [r3, #0]
 801b154:	689a      	ldr	r2, [r3, #8]
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801b15e:	609a      	str	r2, [r3, #8]
      break;
 801b160:	e03c      	b.n	801b1dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	6818      	ldr	r0, [r3, #0]
 801b166:	683b      	ldr	r3, [r7, #0]
 801b168:	6859      	ldr	r1, [r3, #4]
 801b16a:	683b      	ldr	r3, [r7, #0]
 801b16c:	68db      	ldr	r3, [r3, #12]
 801b16e:	461a      	mov	r2, r3
 801b170:	f000 fa76 	bl	801b660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	681b      	ldr	r3, [r3, #0]
 801b178:	2150      	movs	r1, #80	; 0x50
 801b17a:	4618      	mov	r0, r3
 801b17c:	f000 facf 	bl	801b71e <TIM_ITRx_SetConfig>
      break;
 801b180:	e02c      	b.n	801b1dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	6818      	ldr	r0, [r3, #0]
 801b186:	683b      	ldr	r3, [r7, #0]
 801b188:	6859      	ldr	r1, [r3, #4]
 801b18a:	683b      	ldr	r3, [r7, #0]
 801b18c:	68db      	ldr	r3, [r3, #12]
 801b18e:	461a      	mov	r2, r3
 801b190:	f000 fa95 	bl	801b6be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	681b      	ldr	r3, [r3, #0]
 801b198:	2160      	movs	r1, #96	; 0x60
 801b19a:	4618      	mov	r0, r3
 801b19c:	f000 fabf 	bl	801b71e <TIM_ITRx_SetConfig>
      break;
 801b1a0:	e01c      	b.n	801b1dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	6818      	ldr	r0, [r3, #0]
 801b1a6:	683b      	ldr	r3, [r7, #0]
 801b1a8:	6859      	ldr	r1, [r3, #4]
 801b1aa:	683b      	ldr	r3, [r7, #0]
 801b1ac:	68db      	ldr	r3, [r3, #12]
 801b1ae:	461a      	mov	r2, r3
 801b1b0:	f000 fa56 	bl	801b660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	681b      	ldr	r3, [r3, #0]
 801b1b8:	2140      	movs	r1, #64	; 0x40
 801b1ba:	4618      	mov	r0, r3
 801b1bc:	f000 faaf 	bl	801b71e <TIM_ITRx_SetConfig>
      break;
 801b1c0:	e00c      	b.n	801b1dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	681a      	ldr	r2, [r3, #0]
 801b1c6:	683b      	ldr	r3, [r7, #0]
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	4619      	mov	r1, r3
 801b1cc:	4610      	mov	r0, r2
 801b1ce:	f000 faa6 	bl	801b71e <TIM_ITRx_SetConfig>
      break;
 801b1d2:	e003      	b.n	801b1dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801b1d4:	2301      	movs	r3, #1
 801b1d6:	73fb      	strb	r3, [r7, #15]
      break;
 801b1d8:	e000      	b.n	801b1dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 801b1da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	2201      	movs	r2, #1
 801b1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	2200      	movs	r2, #0
 801b1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 801b1ee:	4618      	mov	r0, r3
 801b1f0:	3710      	adds	r7, #16
 801b1f2:	46bd      	mov	sp, r7
 801b1f4:	bd80      	pop	{r7, pc}

0801b1f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b1f6:	b480      	push	{r7}
 801b1f8:	b083      	sub	sp, #12
 801b1fa:	af00      	add	r7, sp, #0
 801b1fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801b1fe:	bf00      	nop
 801b200:	370c      	adds	r7, #12
 801b202:	46bd      	mov	sp, r7
 801b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b208:	4770      	bx	lr

0801b20a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801b20a:	b480      	push	{r7}
 801b20c:	b083      	sub	sp, #12
 801b20e:	af00      	add	r7, sp, #0
 801b210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801b212:	bf00      	nop
 801b214:	370c      	adds	r7, #12
 801b216:	46bd      	mov	sp, r7
 801b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b21c:	4770      	bx	lr

0801b21e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801b21e:	b480      	push	{r7}
 801b220:	b083      	sub	sp, #12
 801b222:	af00      	add	r7, sp, #0
 801b224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801b226:	bf00      	nop
 801b228:	370c      	adds	r7, #12
 801b22a:	46bd      	mov	sp, r7
 801b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b230:	4770      	bx	lr

0801b232 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801b232:	b480      	push	{r7}
 801b234:	b083      	sub	sp, #12
 801b236:	af00      	add	r7, sp, #0
 801b238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801b23a:	bf00      	nop
 801b23c:	370c      	adds	r7, #12
 801b23e:	46bd      	mov	sp, r7
 801b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b244:	4770      	bx	lr
	...

0801b248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801b248:	b480      	push	{r7}
 801b24a:	b085      	sub	sp, #20
 801b24c:	af00      	add	r7, sp, #0
 801b24e:	6078      	str	r0, [r7, #4]
 801b250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	4a34      	ldr	r2, [pc, #208]	; (801b32c <TIM_Base_SetConfig+0xe4>)
 801b25c:	4293      	cmp	r3, r2
 801b25e:	d00f      	beq.n	801b280 <TIM_Base_SetConfig+0x38>
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b266:	d00b      	beq.n	801b280 <TIM_Base_SetConfig+0x38>
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	4a31      	ldr	r2, [pc, #196]	; (801b330 <TIM_Base_SetConfig+0xe8>)
 801b26c:	4293      	cmp	r3, r2
 801b26e:	d007      	beq.n	801b280 <TIM_Base_SetConfig+0x38>
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	4a30      	ldr	r2, [pc, #192]	; (801b334 <TIM_Base_SetConfig+0xec>)
 801b274:	4293      	cmp	r3, r2
 801b276:	d003      	beq.n	801b280 <TIM_Base_SetConfig+0x38>
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	4a2f      	ldr	r2, [pc, #188]	; (801b338 <TIM_Base_SetConfig+0xf0>)
 801b27c:	4293      	cmp	r3, r2
 801b27e:	d108      	bne.n	801b292 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b280:	68fb      	ldr	r3, [r7, #12]
 801b282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b288:	683b      	ldr	r3, [r7, #0]
 801b28a:	685b      	ldr	r3, [r3, #4]
 801b28c:	68fa      	ldr	r2, [r7, #12]
 801b28e:	4313      	orrs	r3, r2
 801b290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	4a25      	ldr	r2, [pc, #148]	; (801b32c <TIM_Base_SetConfig+0xe4>)
 801b296:	4293      	cmp	r3, r2
 801b298:	d01b      	beq.n	801b2d2 <TIM_Base_SetConfig+0x8a>
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b2a0:	d017      	beq.n	801b2d2 <TIM_Base_SetConfig+0x8a>
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	4a22      	ldr	r2, [pc, #136]	; (801b330 <TIM_Base_SetConfig+0xe8>)
 801b2a6:	4293      	cmp	r3, r2
 801b2a8:	d013      	beq.n	801b2d2 <TIM_Base_SetConfig+0x8a>
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	4a21      	ldr	r2, [pc, #132]	; (801b334 <TIM_Base_SetConfig+0xec>)
 801b2ae:	4293      	cmp	r3, r2
 801b2b0:	d00f      	beq.n	801b2d2 <TIM_Base_SetConfig+0x8a>
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	4a20      	ldr	r2, [pc, #128]	; (801b338 <TIM_Base_SetConfig+0xf0>)
 801b2b6:	4293      	cmp	r3, r2
 801b2b8:	d00b      	beq.n	801b2d2 <TIM_Base_SetConfig+0x8a>
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	4a1f      	ldr	r2, [pc, #124]	; (801b33c <TIM_Base_SetConfig+0xf4>)
 801b2be:	4293      	cmp	r3, r2
 801b2c0:	d007      	beq.n	801b2d2 <TIM_Base_SetConfig+0x8a>
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	4a1e      	ldr	r2, [pc, #120]	; (801b340 <TIM_Base_SetConfig+0xf8>)
 801b2c6:	4293      	cmp	r3, r2
 801b2c8:	d003      	beq.n	801b2d2 <TIM_Base_SetConfig+0x8a>
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	4a1d      	ldr	r2, [pc, #116]	; (801b344 <TIM_Base_SetConfig+0xfc>)
 801b2ce:	4293      	cmp	r3, r2
 801b2d0:	d108      	bne.n	801b2e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b2d2:	68fb      	ldr	r3, [r7, #12]
 801b2d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b2d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b2da:	683b      	ldr	r3, [r7, #0]
 801b2dc:	68db      	ldr	r3, [r3, #12]
 801b2de:	68fa      	ldr	r2, [r7, #12]
 801b2e0:	4313      	orrs	r3, r2
 801b2e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b2e4:	68fb      	ldr	r3, [r7, #12]
 801b2e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801b2ea:	683b      	ldr	r3, [r7, #0]
 801b2ec:	695b      	ldr	r3, [r3, #20]
 801b2ee:	4313      	orrs	r3, r2
 801b2f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	68fa      	ldr	r2, [r7, #12]
 801b2f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b2f8:	683b      	ldr	r3, [r7, #0]
 801b2fa:	689a      	ldr	r2, [r3, #8]
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b300:	683b      	ldr	r3, [r7, #0]
 801b302:	681a      	ldr	r2, [r3, #0]
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	4a08      	ldr	r2, [pc, #32]	; (801b32c <TIM_Base_SetConfig+0xe4>)
 801b30c:	4293      	cmp	r3, r2
 801b30e:	d103      	bne.n	801b318 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801b310:	683b      	ldr	r3, [r7, #0]
 801b312:	691a      	ldr	r2, [r3, #16]
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	2201      	movs	r2, #1
 801b31c:	615a      	str	r2, [r3, #20]
}
 801b31e:	bf00      	nop
 801b320:	3714      	adds	r7, #20
 801b322:	46bd      	mov	sp, r7
 801b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b328:	4770      	bx	lr
 801b32a:	bf00      	nop
 801b32c:	40010000 	.word	0x40010000
 801b330:	40000400 	.word	0x40000400
 801b334:	40000800 	.word	0x40000800
 801b338:	40000c00 	.word	0x40000c00
 801b33c:	40014000 	.word	0x40014000
 801b340:	40014400 	.word	0x40014400
 801b344:	40014800 	.word	0x40014800

0801b348 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b348:	b480      	push	{r7}
 801b34a:	b087      	sub	sp, #28
 801b34c:	af00      	add	r7, sp, #0
 801b34e:	6078      	str	r0, [r7, #4]
 801b350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	6a1b      	ldr	r3, [r3, #32]
 801b356:	f023 0201 	bic.w	r2, r3, #1
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	6a1b      	ldr	r3, [r3, #32]
 801b362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	685b      	ldr	r3, [r3, #4]
 801b368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	699b      	ldr	r3, [r3, #24]
 801b36e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801b370:	68fb      	ldr	r3, [r7, #12]
 801b372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801b378:	68fb      	ldr	r3, [r7, #12]
 801b37a:	f023 0303 	bic.w	r3, r3, #3
 801b37e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b380:	683b      	ldr	r3, [r7, #0]
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	68fa      	ldr	r2, [r7, #12]
 801b386:	4313      	orrs	r3, r2
 801b388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801b38a:	697b      	ldr	r3, [r7, #20]
 801b38c:	f023 0302 	bic.w	r3, r3, #2
 801b390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801b392:	683b      	ldr	r3, [r7, #0]
 801b394:	689b      	ldr	r3, [r3, #8]
 801b396:	697a      	ldr	r2, [r7, #20]
 801b398:	4313      	orrs	r3, r2
 801b39a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	4a1c      	ldr	r2, [pc, #112]	; (801b410 <TIM_OC1_SetConfig+0xc8>)
 801b3a0:	4293      	cmp	r3, r2
 801b3a2:	d10c      	bne.n	801b3be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801b3a4:	697b      	ldr	r3, [r7, #20]
 801b3a6:	f023 0308 	bic.w	r3, r3, #8
 801b3aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801b3ac:	683b      	ldr	r3, [r7, #0]
 801b3ae:	68db      	ldr	r3, [r3, #12]
 801b3b0:	697a      	ldr	r2, [r7, #20]
 801b3b2:	4313      	orrs	r3, r2
 801b3b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801b3b6:	697b      	ldr	r3, [r7, #20]
 801b3b8:	f023 0304 	bic.w	r3, r3, #4
 801b3bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	4a13      	ldr	r2, [pc, #76]	; (801b410 <TIM_OC1_SetConfig+0xc8>)
 801b3c2:	4293      	cmp	r3, r2
 801b3c4:	d111      	bne.n	801b3ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801b3c6:	693b      	ldr	r3, [r7, #16]
 801b3c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b3cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801b3ce:	693b      	ldr	r3, [r7, #16]
 801b3d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b3d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801b3d6:	683b      	ldr	r3, [r7, #0]
 801b3d8:	695b      	ldr	r3, [r3, #20]
 801b3da:	693a      	ldr	r2, [r7, #16]
 801b3dc:	4313      	orrs	r3, r2
 801b3de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801b3e0:	683b      	ldr	r3, [r7, #0]
 801b3e2:	699b      	ldr	r3, [r3, #24]
 801b3e4:	693a      	ldr	r2, [r7, #16]
 801b3e6:	4313      	orrs	r3, r2
 801b3e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	693a      	ldr	r2, [r7, #16]
 801b3ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	68fa      	ldr	r2, [r7, #12]
 801b3f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801b3f6:	683b      	ldr	r3, [r7, #0]
 801b3f8:	685a      	ldr	r2, [r3, #4]
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	697a      	ldr	r2, [r7, #20]
 801b402:	621a      	str	r2, [r3, #32]
}
 801b404:	bf00      	nop
 801b406:	371c      	adds	r7, #28
 801b408:	46bd      	mov	sp, r7
 801b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b40e:	4770      	bx	lr
 801b410:	40010000 	.word	0x40010000

0801b414 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b414:	b480      	push	{r7}
 801b416:	b087      	sub	sp, #28
 801b418:	af00      	add	r7, sp, #0
 801b41a:	6078      	str	r0, [r7, #4]
 801b41c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	6a1b      	ldr	r3, [r3, #32]
 801b422:	f023 0210 	bic.w	r2, r3, #16
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	6a1b      	ldr	r3, [r3, #32]
 801b42e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	685b      	ldr	r3, [r3, #4]
 801b434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	699b      	ldr	r3, [r3, #24]
 801b43a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801b43c:	68fb      	ldr	r3, [r7, #12]
 801b43e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801b444:	68fb      	ldr	r3, [r7, #12]
 801b446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b44a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b44c:	683b      	ldr	r3, [r7, #0]
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	021b      	lsls	r3, r3, #8
 801b452:	68fa      	ldr	r2, [r7, #12]
 801b454:	4313      	orrs	r3, r2
 801b456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801b458:	697b      	ldr	r3, [r7, #20]
 801b45a:	f023 0320 	bic.w	r3, r3, #32
 801b45e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801b460:	683b      	ldr	r3, [r7, #0]
 801b462:	689b      	ldr	r3, [r3, #8]
 801b464:	011b      	lsls	r3, r3, #4
 801b466:	697a      	ldr	r2, [r7, #20]
 801b468:	4313      	orrs	r3, r2
 801b46a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	4a1e      	ldr	r2, [pc, #120]	; (801b4e8 <TIM_OC2_SetConfig+0xd4>)
 801b470:	4293      	cmp	r3, r2
 801b472:	d10d      	bne.n	801b490 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801b474:	697b      	ldr	r3, [r7, #20]
 801b476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b47a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801b47c:	683b      	ldr	r3, [r7, #0]
 801b47e:	68db      	ldr	r3, [r3, #12]
 801b480:	011b      	lsls	r3, r3, #4
 801b482:	697a      	ldr	r2, [r7, #20]
 801b484:	4313      	orrs	r3, r2
 801b486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801b488:	697b      	ldr	r3, [r7, #20]
 801b48a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b48e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	4a15      	ldr	r2, [pc, #84]	; (801b4e8 <TIM_OC2_SetConfig+0xd4>)
 801b494:	4293      	cmp	r3, r2
 801b496:	d113      	bne.n	801b4c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801b498:	693b      	ldr	r3, [r7, #16]
 801b49a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b49e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801b4a0:	693b      	ldr	r3, [r7, #16]
 801b4a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b4a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801b4a8:	683b      	ldr	r3, [r7, #0]
 801b4aa:	695b      	ldr	r3, [r3, #20]
 801b4ac:	009b      	lsls	r3, r3, #2
 801b4ae:	693a      	ldr	r2, [r7, #16]
 801b4b0:	4313      	orrs	r3, r2
 801b4b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801b4b4:	683b      	ldr	r3, [r7, #0]
 801b4b6:	699b      	ldr	r3, [r3, #24]
 801b4b8:	009b      	lsls	r3, r3, #2
 801b4ba:	693a      	ldr	r2, [r7, #16]
 801b4bc:	4313      	orrs	r3, r2
 801b4be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	693a      	ldr	r2, [r7, #16]
 801b4c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	68fa      	ldr	r2, [r7, #12]
 801b4ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801b4cc:	683b      	ldr	r3, [r7, #0]
 801b4ce:	685a      	ldr	r2, [r3, #4]
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	697a      	ldr	r2, [r7, #20]
 801b4d8:	621a      	str	r2, [r3, #32]
}
 801b4da:	bf00      	nop
 801b4dc:	371c      	adds	r7, #28
 801b4de:	46bd      	mov	sp, r7
 801b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4e4:	4770      	bx	lr
 801b4e6:	bf00      	nop
 801b4e8:	40010000 	.word	0x40010000

0801b4ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b4ec:	b480      	push	{r7}
 801b4ee:	b087      	sub	sp, #28
 801b4f0:	af00      	add	r7, sp, #0
 801b4f2:	6078      	str	r0, [r7, #4]
 801b4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	6a1b      	ldr	r3, [r3, #32]
 801b4fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	6a1b      	ldr	r3, [r3, #32]
 801b506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	685b      	ldr	r3, [r3, #4]
 801b50c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	69db      	ldr	r3, [r3, #28]
 801b512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801b514:	68fb      	ldr	r3, [r7, #12]
 801b516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b51a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801b51c:	68fb      	ldr	r3, [r7, #12]
 801b51e:	f023 0303 	bic.w	r3, r3, #3
 801b522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b524:	683b      	ldr	r3, [r7, #0]
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	68fa      	ldr	r2, [r7, #12]
 801b52a:	4313      	orrs	r3, r2
 801b52c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801b52e:	697b      	ldr	r3, [r7, #20]
 801b530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801b536:	683b      	ldr	r3, [r7, #0]
 801b538:	689b      	ldr	r3, [r3, #8]
 801b53a:	021b      	lsls	r3, r3, #8
 801b53c:	697a      	ldr	r2, [r7, #20]
 801b53e:	4313      	orrs	r3, r2
 801b540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	4a1d      	ldr	r2, [pc, #116]	; (801b5bc <TIM_OC3_SetConfig+0xd0>)
 801b546:	4293      	cmp	r3, r2
 801b548:	d10d      	bne.n	801b566 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801b54a:	697b      	ldr	r3, [r7, #20]
 801b54c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801b552:	683b      	ldr	r3, [r7, #0]
 801b554:	68db      	ldr	r3, [r3, #12]
 801b556:	021b      	lsls	r3, r3, #8
 801b558:	697a      	ldr	r2, [r7, #20]
 801b55a:	4313      	orrs	r3, r2
 801b55c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801b55e:	697b      	ldr	r3, [r7, #20]
 801b560:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	4a14      	ldr	r2, [pc, #80]	; (801b5bc <TIM_OC3_SetConfig+0xd0>)
 801b56a:	4293      	cmp	r3, r2
 801b56c:	d113      	bne.n	801b596 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801b56e:	693b      	ldr	r3, [r7, #16]
 801b570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801b576:	693b      	ldr	r3, [r7, #16]
 801b578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b57c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801b57e:	683b      	ldr	r3, [r7, #0]
 801b580:	695b      	ldr	r3, [r3, #20]
 801b582:	011b      	lsls	r3, r3, #4
 801b584:	693a      	ldr	r2, [r7, #16]
 801b586:	4313      	orrs	r3, r2
 801b588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801b58a:	683b      	ldr	r3, [r7, #0]
 801b58c:	699b      	ldr	r3, [r3, #24]
 801b58e:	011b      	lsls	r3, r3, #4
 801b590:	693a      	ldr	r2, [r7, #16]
 801b592:	4313      	orrs	r3, r2
 801b594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	693a      	ldr	r2, [r7, #16]
 801b59a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	68fa      	ldr	r2, [r7, #12]
 801b5a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801b5a2:	683b      	ldr	r3, [r7, #0]
 801b5a4:	685a      	ldr	r2, [r3, #4]
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	697a      	ldr	r2, [r7, #20]
 801b5ae:	621a      	str	r2, [r3, #32]
}
 801b5b0:	bf00      	nop
 801b5b2:	371c      	adds	r7, #28
 801b5b4:	46bd      	mov	sp, r7
 801b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ba:	4770      	bx	lr
 801b5bc:	40010000 	.word	0x40010000

0801b5c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b5c0:	b480      	push	{r7}
 801b5c2:	b087      	sub	sp, #28
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	6078      	str	r0, [r7, #4]
 801b5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	6a1b      	ldr	r3, [r3, #32]
 801b5ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	6a1b      	ldr	r3, [r3, #32]
 801b5da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	685b      	ldr	r3, [r3, #4]
 801b5e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	69db      	ldr	r3, [r3, #28]
 801b5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801b5e8:	68fb      	ldr	r3, [r7, #12]
 801b5ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b5ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b5f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b5f8:	683b      	ldr	r3, [r7, #0]
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	021b      	lsls	r3, r3, #8
 801b5fe:	68fa      	ldr	r2, [r7, #12]
 801b600:	4313      	orrs	r3, r2
 801b602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801b604:	693b      	ldr	r3, [r7, #16]
 801b606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b60a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801b60c:	683b      	ldr	r3, [r7, #0]
 801b60e:	689b      	ldr	r3, [r3, #8]
 801b610:	031b      	lsls	r3, r3, #12
 801b612:	693a      	ldr	r2, [r7, #16]
 801b614:	4313      	orrs	r3, r2
 801b616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	4a10      	ldr	r2, [pc, #64]	; (801b65c <TIM_OC4_SetConfig+0x9c>)
 801b61c:	4293      	cmp	r3, r2
 801b61e:	d109      	bne.n	801b634 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801b620:	697b      	ldr	r3, [r7, #20]
 801b622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801b626:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801b628:	683b      	ldr	r3, [r7, #0]
 801b62a:	695b      	ldr	r3, [r3, #20]
 801b62c:	019b      	lsls	r3, r3, #6
 801b62e:	697a      	ldr	r2, [r7, #20]
 801b630:	4313      	orrs	r3, r2
 801b632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	697a      	ldr	r2, [r7, #20]
 801b638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	68fa      	ldr	r2, [r7, #12]
 801b63e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801b640:	683b      	ldr	r3, [r7, #0]
 801b642:	685a      	ldr	r2, [r3, #4]
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	693a      	ldr	r2, [r7, #16]
 801b64c:	621a      	str	r2, [r3, #32]
}
 801b64e:	bf00      	nop
 801b650:	371c      	adds	r7, #28
 801b652:	46bd      	mov	sp, r7
 801b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b658:	4770      	bx	lr
 801b65a:	bf00      	nop
 801b65c:	40010000 	.word	0x40010000

0801b660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b660:	b480      	push	{r7}
 801b662:	b087      	sub	sp, #28
 801b664:	af00      	add	r7, sp, #0
 801b666:	60f8      	str	r0, [r7, #12]
 801b668:	60b9      	str	r1, [r7, #8]
 801b66a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801b66c:	68fb      	ldr	r3, [r7, #12]
 801b66e:	6a1b      	ldr	r3, [r3, #32]
 801b670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b672:	68fb      	ldr	r3, [r7, #12]
 801b674:	6a1b      	ldr	r3, [r3, #32]
 801b676:	f023 0201 	bic.w	r2, r3, #1
 801b67a:	68fb      	ldr	r3, [r7, #12]
 801b67c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b67e:	68fb      	ldr	r3, [r7, #12]
 801b680:	699b      	ldr	r3, [r3, #24]
 801b682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801b684:	693b      	ldr	r3, [r7, #16]
 801b686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b68a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	011b      	lsls	r3, r3, #4
 801b690:	693a      	ldr	r2, [r7, #16]
 801b692:	4313      	orrs	r3, r2
 801b694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801b696:	697b      	ldr	r3, [r7, #20]
 801b698:	f023 030a 	bic.w	r3, r3, #10
 801b69c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801b69e:	697a      	ldr	r2, [r7, #20]
 801b6a0:	68bb      	ldr	r3, [r7, #8]
 801b6a2:	4313      	orrs	r3, r2
 801b6a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	693a      	ldr	r2, [r7, #16]
 801b6aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b6ac:	68fb      	ldr	r3, [r7, #12]
 801b6ae:	697a      	ldr	r2, [r7, #20]
 801b6b0:	621a      	str	r2, [r3, #32]
}
 801b6b2:	bf00      	nop
 801b6b4:	371c      	adds	r7, #28
 801b6b6:	46bd      	mov	sp, r7
 801b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6bc:	4770      	bx	lr

0801b6be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b6be:	b480      	push	{r7}
 801b6c0:	b087      	sub	sp, #28
 801b6c2:	af00      	add	r7, sp, #0
 801b6c4:	60f8      	str	r0, [r7, #12]
 801b6c6:	60b9      	str	r1, [r7, #8]
 801b6c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b6ca:	68fb      	ldr	r3, [r7, #12]
 801b6cc:	6a1b      	ldr	r3, [r3, #32]
 801b6ce:	f023 0210 	bic.w	r2, r3, #16
 801b6d2:	68fb      	ldr	r3, [r7, #12]
 801b6d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b6d6:	68fb      	ldr	r3, [r7, #12]
 801b6d8:	699b      	ldr	r3, [r3, #24]
 801b6da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b6dc:	68fb      	ldr	r3, [r7, #12]
 801b6de:	6a1b      	ldr	r3, [r3, #32]
 801b6e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801b6e2:	697b      	ldr	r3, [r7, #20]
 801b6e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b6e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	031b      	lsls	r3, r3, #12
 801b6ee:	697a      	ldr	r2, [r7, #20]
 801b6f0:	4313      	orrs	r3, r2
 801b6f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801b6f4:	693b      	ldr	r3, [r7, #16]
 801b6f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801b6fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801b6fc:	68bb      	ldr	r3, [r7, #8]
 801b6fe:	011b      	lsls	r3, r3, #4
 801b700:	693a      	ldr	r2, [r7, #16]
 801b702:	4313      	orrs	r3, r2
 801b704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801b706:	68fb      	ldr	r3, [r7, #12]
 801b708:	697a      	ldr	r2, [r7, #20]
 801b70a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	693a      	ldr	r2, [r7, #16]
 801b710:	621a      	str	r2, [r3, #32]
}
 801b712:	bf00      	nop
 801b714:	371c      	adds	r7, #28
 801b716:	46bd      	mov	sp, r7
 801b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b71c:	4770      	bx	lr

0801b71e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801b71e:	b480      	push	{r7}
 801b720:	b085      	sub	sp, #20
 801b722:	af00      	add	r7, sp, #0
 801b724:	6078      	str	r0, [r7, #4]
 801b726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	689b      	ldr	r3, [r3, #8]
 801b72c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801b72e:	68fb      	ldr	r3, [r7, #12]
 801b730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801b736:	683a      	ldr	r2, [r7, #0]
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	4313      	orrs	r3, r2
 801b73c:	f043 0307 	orr.w	r3, r3, #7
 801b740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	68fa      	ldr	r2, [r7, #12]
 801b746:	609a      	str	r2, [r3, #8]
}
 801b748:	bf00      	nop
 801b74a:	3714      	adds	r7, #20
 801b74c:	46bd      	mov	sp, r7
 801b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b752:	4770      	bx	lr

0801b754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801b754:	b480      	push	{r7}
 801b756:	b087      	sub	sp, #28
 801b758:	af00      	add	r7, sp, #0
 801b75a:	60f8      	str	r0, [r7, #12]
 801b75c:	60b9      	str	r1, [r7, #8]
 801b75e:	607a      	str	r2, [r7, #4]
 801b760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801b762:	68fb      	ldr	r3, [r7, #12]
 801b764:	689b      	ldr	r3, [r3, #8]
 801b766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b768:	697b      	ldr	r3, [r7, #20]
 801b76a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b76e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801b770:	683b      	ldr	r3, [r7, #0]
 801b772:	021a      	lsls	r2, r3, #8
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	431a      	orrs	r2, r3
 801b778:	68bb      	ldr	r3, [r7, #8]
 801b77a:	4313      	orrs	r3, r2
 801b77c:	697a      	ldr	r2, [r7, #20]
 801b77e:	4313      	orrs	r3, r2
 801b780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b782:	68fb      	ldr	r3, [r7, #12]
 801b784:	697a      	ldr	r2, [r7, #20]
 801b786:	609a      	str	r2, [r3, #8]
}
 801b788:	bf00      	nop
 801b78a:	371c      	adds	r7, #28
 801b78c:	46bd      	mov	sp, r7
 801b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b792:	4770      	bx	lr

0801b794 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801b794:	b480      	push	{r7}
 801b796:	b087      	sub	sp, #28
 801b798:	af00      	add	r7, sp, #0
 801b79a:	60f8      	str	r0, [r7, #12]
 801b79c:	60b9      	str	r1, [r7, #8]
 801b79e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801b7a0:	68bb      	ldr	r3, [r7, #8]
 801b7a2:	f003 031f 	and.w	r3, r3, #31
 801b7a6:	2201      	movs	r2, #1
 801b7a8:	fa02 f303 	lsl.w	r3, r2, r3
 801b7ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801b7ae:	68fb      	ldr	r3, [r7, #12]
 801b7b0:	6a1a      	ldr	r2, [r3, #32]
 801b7b2:	697b      	ldr	r3, [r7, #20]
 801b7b4:	43db      	mvns	r3, r3
 801b7b6:	401a      	ands	r2, r3
 801b7b8:	68fb      	ldr	r3, [r7, #12]
 801b7ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	6a1a      	ldr	r2, [r3, #32]
 801b7c0:	68bb      	ldr	r3, [r7, #8]
 801b7c2:	f003 031f 	and.w	r3, r3, #31
 801b7c6:	6879      	ldr	r1, [r7, #4]
 801b7c8:	fa01 f303 	lsl.w	r3, r1, r3
 801b7cc:	431a      	orrs	r2, r3
 801b7ce:	68fb      	ldr	r3, [r7, #12]
 801b7d0:	621a      	str	r2, [r3, #32]
}
 801b7d2:	bf00      	nop
 801b7d4:	371c      	adds	r7, #28
 801b7d6:	46bd      	mov	sp, r7
 801b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7dc:	4770      	bx	lr
	...

0801b7e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801b7e0:	b480      	push	{r7}
 801b7e2:	b085      	sub	sp, #20
 801b7e4:	af00      	add	r7, sp, #0
 801b7e6:	6078      	str	r0, [r7, #4]
 801b7e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b7f0:	2b01      	cmp	r3, #1
 801b7f2:	d101      	bne.n	801b7f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801b7f4:	2302      	movs	r3, #2
 801b7f6:	e050      	b.n	801b89a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	2201      	movs	r2, #1
 801b7fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b800:	687b      	ldr	r3, [r7, #4]
 801b802:	2202      	movs	r2, #2
 801b804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	681b      	ldr	r3, [r3, #0]
 801b80c:	685b      	ldr	r3, [r3, #4]
 801b80e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	681b      	ldr	r3, [r3, #0]
 801b814:	689b      	ldr	r3, [r3, #8]
 801b816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801b818:	68fb      	ldr	r3, [r7, #12]
 801b81a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b81e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801b820:	683b      	ldr	r3, [r7, #0]
 801b822:	681b      	ldr	r3, [r3, #0]
 801b824:	68fa      	ldr	r2, [r7, #12]
 801b826:	4313      	orrs	r3, r2
 801b828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	68fa      	ldr	r2, [r7, #12]
 801b830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	681b      	ldr	r3, [r3, #0]
 801b836:	4a1c      	ldr	r2, [pc, #112]	; (801b8a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801b838:	4293      	cmp	r3, r2
 801b83a:	d018      	beq.n	801b86e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b844:	d013      	beq.n	801b86e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	681b      	ldr	r3, [r3, #0]
 801b84a:	4a18      	ldr	r2, [pc, #96]	; (801b8ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801b84c:	4293      	cmp	r3, r2
 801b84e:	d00e      	beq.n	801b86e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	4a16      	ldr	r2, [pc, #88]	; (801b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801b856:	4293      	cmp	r3, r2
 801b858:	d009      	beq.n	801b86e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	4a15      	ldr	r2, [pc, #84]	; (801b8b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801b860:	4293      	cmp	r3, r2
 801b862:	d004      	beq.n	801b86e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	4a13      	ldr	r2, [pc, #76]	; (801b8b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801b86a:	4293      	cmp	r3, r2
 801b86c:	d10c      	bne.n	801b888 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801b86e:	68bb      	ldr	r3, [r7, #8]
 801b870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801b876:	683b      	ldr	r3, [r7, #0]
 801b878:	685b      	ldr	r3, [r3, #4]
 801b87a:	68ba      	ldr	r2, [r7, #8]
 801b87c:	4313      	orrs	r3, r2
 801b87e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	68ba      	ldr	r2, [r7, #8]
 801b886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	2201      	movs	r2, #1
 801b88c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	2200      	movs	r2, #0
 801b894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b898:	2300      	movs	r3, #0
}
 801b89a:	4618      	mov	r0, r3
 801b89c:	3714      	adds	r7, #20
 801b89e:	46bd      	mov	sp, r7
 801b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8a4:	4770      	bx	lr
 801b8a6:	bf00      	nop
 801b8a8:	40010000 	.word	0x40010000
 801b8ac:	40000400 	.word	0x40000400
 801b8b0:	40000800 	.word	0x40000800
 801b8b4:	40000c00 	.word	0x40000c00
 801b8b8:	40014000 	.word	0x40014000

0801b8bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801b8bc:	b480      	push	{r7}
 801b8be:	b083      	sub	sp, #12
 801b8c0:	af00      	add	r7, sp, #0
 801b8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801b8c4:	bf00      	nop
 801b8c6:	370c      	adds	r7, #12
 801b8c8:	46bd      	mov	sp, r7
 801b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ce:	4770      	bx	lr

0801b8d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801b8d0:	b480      	push	{r7}
 801b8d2:	b083      	sub	sp, #12
 801b8d4:	af00      	add	r7, sp, #0
 801b8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801b8d8:	bf00      	nop
 801b8da:	370c      	adds	r7, #12
 801b8dc:	46bd      	mov	sp, r7
 801b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8e2:	4770      	bx	lr

0801b8e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b8e4:	b580      	push	{r7, lr}
 801b8e6:	b082      	sub	sp, #8
 801b8e8:	af00      	add	r7, sp, #0
 801b8ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d101      	bne.n	801b8f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b8f2:	2301      	movs	r3, #1
 801b8f4:	e03f      	b.n	801b976 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b8fc:	b2db      	uxtb	r3, r3
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d106      	bne.n	801b910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	2200      	movs	r2, #0
 801b906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801b90a:	6878      	ldr	r0, [r7, #4]
 801b90c:	f7fa fafe 	bl	8015f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	2224      	movs	r2, #36	; 0x24
 801b914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	68da      	ldr	r2, [r3, #12]
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801b926:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801b928:	6878      	ldr	r0, [r7, #4]
 801b92a:	f000 ff9b 	bl	801c864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	681b      	ldr	r3, [r3, #0]
 801b932:	691a      	ldr	r2, [r3, #16]
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801b93c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	695a      	ldr	r2, [r3, #20]
 801b944:	687b      	ldr	r3, [r7, #4]
 801b946:	681b      	ldr	r3, [r3, #0]
 801b948:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801b94c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	68da      	ldr	r2, [r3, #12]
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801b95c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	2200      	movs	r2, #0
 801b962:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	2220      	movs	r2, #32
 801b968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	2220      	movs	r2, #32
 801b970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801b974:	2300      	movs	r3, #0
}
 801b976:	4618      	mov	r0, r3
 801b978:	3708      	adds	r7, #8
 801b97a:	46bd      	mov	sp, r7
 801b97c:	bd80      	pop	{r7, pc}

0801b97e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b97e:	b580      	push	{r7, lr}
 801b980:	b08a      	sub	sp, #40	; 0x28
 801b982:	af02      	add	r7, sp, #8
 801b984:	60f8      	str	r0, [r7, #12]
 801b986:	60b9      	str	r1, [r7, #8]
 801b988:	603b      	str	r3, [r7, #0]
 801b98a:	4613      	mov	r3, r2
 801b98c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801b98e:	2300      	movs	r3, #0
 801b990:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801b992:	68fb      	ldr	r3, [r7, #12]
 801b994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b998:	b2db      	uxtb	r3, r3
 801b99a:	2b20      	cmp	r3, #32
 801b99c:	d17c      	bne.n	801ba98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801b99e:	68bb      	ldr	r3, [r7, #8]
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d002      	beq.n	801b9aa <HAL_UART_Transmit+0x2c>
 801b9a4:	88fb      	ldrh	r3, [r7, #6]
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d101      	bne.n	801b9ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801b9aa:	2301      	movs	r3, #1
 801b9ac:	e075      	b.n	801ba9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801b9ae:	68fb      	ldr	r3, [r7, #12]
 801b9b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b9b4:	2b01      	cmp	r3, #1
 801b9b6:	d101      	bne.n	801b9bc <HAL_UART_Transmit+0x3e>
 801b9b8:	2302      	movs	r3, #2
 801b9ba:	e06e      	b.n	801ba9a <HAL_UART_Transmit+0x11c>
 801b9bc:	68fb      	ldr	r3, [r7, #12]
 801b9be:	2201      	movs	r2, #1
 801b9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b9c4:	68fb      	ldr	r3, [r7, #12]
 801b9c6:	2200      	movs	r2, #0
 801b9c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801b9ca:	68fb      	ldr	r3, [r7, #12]
 801b9cc:	2221      	movs	r2, #33	; 0x21
 801b9ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801b9d2:	f7fa fd53 	bl	801647c <HAL_GetTick>
 801b9d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801b9d8:	68fb      	ldr	r3, [r7, #12]
 801b9da:	88fa      	ldrh	r2, [r7, #6]
 801b9dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801b9de:	68fb      	ldr	r3, [r7, #12]
 801b9e0:	88fa      	ldrh	r2, [r7, #6]
 801b9e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b9e4:	68fb      	ldr	r3, [r7, #12]
 801b9e6:	689b      	ldr	r3, [r3, #8]
 801b9e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b9ec:	d108      	bne.n	801ba00 <HAL_UART_Transmit+0x82>
 801b9ee:	68fb      	ldr	r3, [r7, #12]
 801b9f0:	691b      	ldr	r3, [r3, #16]
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	d104      	bne.n	801ba00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801b9f6:	2300      	movs	r3, #0
 801b9f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801b9fa:	68bb      	ldr	r3, [r7, #8]
 801b9fc:	61bb      	str	r3, [r7, #24]
 801b9fe:	e003      	b.n	801ba08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801ba00:	68bb      	ldr	r3, [r7, #8]
 801ba02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801ba04:	2300      	movs	r3, #0
 801ba06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801ba08:	68fb      	ldr	r3, [r7, #12]
 801ba0a:	2200      	movs	r2, #0
 801ba0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 801ba10:	e02a      	b.n	801ba68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801ba12:	683b      	ldr	r3, [r7, #0]
 801ba14:	9300      	str	r3, [sp, #0]
 801ba16:	697b      	ldr	r3, [r7, #20]
 801ba18:	2200      	movs	r2, #0
 801ba1a:	2180      	movs	r1, #128	; 0x80
 801ba1c:	68f8      	ldr	r0, [r7, #12]
 801ba1e:	f000 fc53 	bl	801c2c8 <UART_WaitOnFlagUntilTimeout>
 801ba22:	4603      	mov	r3, r0
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	d001      	beq.n	801ba2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801ba28:	2303      	movs	r3, #3
 801ba2a:	e036      	b.n	801ba9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801ba2c:	69fb      	ldr	r3, [r7, #28]
 801ba2e:	2b00      	cmp	r3, #0
 801ba30:	d10b      	bne.n	801ba4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801ba32:	69bb      	ldr	r3, [r7, #24]
 801ba34:	881b      	ldrh	r3, [r3, #0]
 801ba36:	461a      	mov	r2, r3
 801ba38:	68fb      	ldr	r3, [r7, #12]
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801ba40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801ba42:	69bb      	ldr	r3, [r7, #24]
 801ba44:	3302      	adds	r3, #2
 801ba46:	61bb      	str	r3, [r7, #24]
 801ba48:	e007      	b.n	801ba5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801ba4a:	69fb      	ldr	r3, [r7, #28]
 801ba4c:	781a      	ldrb	r2, [r3, #0]
 801ba4e:	68fb      	ldr	r3, [r7, #12]
 801ba50:	681b      	ldr	r3, [r3, #0]
 801ba52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801ba54:	69fb      	ldr	r3, [r7, #28]
 801ba56:	3301      	adds	r3, #1
 801ba58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801ba5a:	68fb      	ldr	r3, [r7, #12]
 801ba5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801ba5e:	b29b      	uxth	r3, r3
 801ba60:	3b01      	subs	r3, #1
 801ba62:	b29a      	uxth	r2, r3
 801ba64:	68fb      	ldr	r3, [r7, #12]
 801ba66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801ba68:	68fb      	ldr	r3, [r7, #12]
 801ba6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801ba6c:	b29b      	uxth	r3, r3
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d1cf      	bne.n	801ba12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801ba72:	683b      	ldr	r3, [r7, #0]
 801ba74:	9300      	str	r3, [sp, #0]
 801ba76:	697b      	ldr	r3, [r7, #20]
 801ba78:	2200      	movs	r2, #0
 801ba7a:	2140      	movs	r1, #64	; 0x40
 801ba7c:	68f8      	ldr	r0, [r7, #12]
 801ba7e:	f000 fc23 	bl	801c2c8 <UART_WaitOnFlagUntilTimeout>
 801ba82:	4603      	mov	r3, r0
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d001      	beq.n	801ba8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801ba88:	2303      	movs	r3, #3
 801ba8a:	e006      	b.n	801ba9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801ba8c:	68fb      	ldr	r3, [r7, #12]
 801ba8e:	2220      	movs	r2, #32
 801ba90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801ba94:	2300      	movs	r3, #0
 801ba96:	e000      	b.n	801ba9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801ba98:	2302      	movs	r3, #2
  }
}
 801ba9a:	4618      	mov	r0, r3
 801ba9c:	3720      	adds	r7, #32
 801ba9e:	46bd      	mov	sp, r7
 801baa0:	bd80      	pop	{r7, pc}

0801baa2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801baa2:	b580      	push	{r7, lr}
 801baa4:	b08c      	sub	sp, #48	; 0x30
 801baa6:	af00      	add	r7, sp, #0
 801baa8:	60f8      	str	r0, [r7, #12]
 801baaa:	60b9      	str	r1, [r7, #8]
 801baac:	4613      	mov	r3, r2
 801baae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801bab6:	b2db      	uxtb	r3, r3
 801bab8:	2b20      	cmp	r3, #32
 801baba:	d152      	bne.n	801bb62 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 801babc:	68bb      	ldr	r3, [r7, #8]
 801babe:	2b00      	cmp	r3, #0
 801bac0:	d002      	beq.n	801bac8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 801bac2:	88fb      	ldrh	r3, [r7, #6]
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d101      	bne.n	801bacc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 801bac8:	2301      	movs	r3, #1
 801baca:	e04b      	b.n	801bb64 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801bad2:	2b01      	cmp	r3, #1
 801bad4:	d101      	bne.n	801bada <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 801bad6:	2302      	movs	r3, #2
 801bad8:	e044      	b.n	801bb64 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 801bada:	68fb      	ldr	r3, [r7, #12]
 801badc:	2201      	movs	r2, #1
 801bade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801bae2:	68fb      	ldr	r3, [r7, #12]
 801bae4:	2201      	movs	r2, #1
 801bae6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801bae8:	88fb      	ldrh	r3, [r7, #6]
 801baea:	461a      	mov	r2, r3
 801baec:	68b9      	ldr	r1, [r7, #8]
 801baee:	68f8      	ldr	r0, [r7, #12]
 801baf0:	f000 fc58 	bl	801c3a4 <UART_Start_Receive_DMA>
 801baf4:	4603      	mov	r3, r0
 801baf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801bafa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d12c      	bne.n	801bb5c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bb02:	68fb      	ldr	r3, [r7, #12]
 801bb04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb06:	2b01      	cmp	r3, #1
 801bb08:	d125      	bne.n	801bb56 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 801bb0a:	2300      	movs	r3, #0
 801bb0c:	613b      	str	r3, [r7, #16]
 801bb0e:	68fb      	ldr	r3, [r7, #12]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	681b      	ldr	r3, [r3, #0]
 801bb14:	613b      	str	r3, [r7, #16]
 801bb16:	68fb      	ldr	r3, [r7, #12]
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	685b      	ldr	r3, [r3, #4]
 801bb1c:	613b      	str	r3, [r7, #16]
 801bb1e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bb20:	68fb      	ldr	r3, [r7, #12]
 801bb22:	681b      	ldr	r3, [r3, #0]
 801bb24:	330c      	adds	r3, #12
 801bb26:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb28:	69bb      	ldr	r3, [r7, #24]
 801bb2a:	e853 3f00 	ldrex	r3, [r3]
 801bb2e:	617b      	str	r3, [r7, #20]
   return(result);
 801bb30:	697b      	ldr	r3, [r7, #20]
 801bb32:	f043 0310 	orr.w	r3, r3, #16
 801bb36:	62bb      	str	r3, [r7, #40]	; 0x28
 801bb38:	68fb      	ldr	r3, [r7, #12]
 801bb3a:	681b      	ldr	r3, [r3, #0]
 801bb3c:	330c      	adds	r3, #12
 801bb3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bb40:	627a      	str	r2, [r7, #36]	; 0x24
 801bb42:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb44:	6a39      	ldr	r1, [r7, #32]
 801bb46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bb48:	e841 2300 	strex	r3, r2, [r1]
 801bb4c:	61fb      	str	r3, [r7, #28]
   return(result);
 801bb4e:	69fb      	ldr	r3, [r7, #28]
 801bb50:	2b00      	cmp	r3, #0
 801bb52:	d1e5      	bne.n	801bb20 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 801bb54:	e002      	b.n	801bb5c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801bb56:	2301      	movs	r3, #1
 801bb58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801bb5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801bb60:	e000      	b.n	801bb64 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 801bb62:	2302      	movs	r3, #2
  }
}
 801bb64:	4618      	mov	r0, r3
 801bb66:	3730      	adds	r7, #48	; 0x30
 801bb68:	46bd      	mov	sp, r7
 801bb6a:	bd80      	pop	{r7, pc}

0801bb6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801bb6c:	b580      	push	{r7, lr}
 801bb6e:	b0ba      	sub	sp, #232	; 0xe8
 801bb70:	af00      	add	r7, sp, #0
 801bb72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	681b      	ldr	r3, [r3, #0]
 801bb78:	681b      	ldr	r3, [r3, #0]
 801bb7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	68db      	ldr	r3, [r3, #12]
 801bb84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	695b      	ldr	r3, [r3, #20]
 801bb8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801bb92:	2300      	movs	r3, #0
 801bb94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801bb98:	2300      	movs	r3, #0
 801bb9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801bb9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bba2:	f003 030f 	and.w	r3, r3, #15
 801bba6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801bbaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d10f      	bne.n	801bbd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801bbb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbb6:	f003 0320 	and.w	r3, r3, #32
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d009      	beq.n	801bbd2 <HAL_UART_IRQHandler+0x66>
 801bbbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bbc2:	f003 0320 	and.w	r3, r3, #32
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d003      	beq.n	801bbd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801bbca:	6878      	ldr	r0, [r7, #4]
 801bbcc:	f000 fd8f 	bl	801c6ee <UART_Receive_IT>
      return;
 801bbd0:	e256      	b.n	801c080 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801bbd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	f000 80de 	beq.w	801bd98 <HAL_UART_IRQHandler+0x22c>
 801bbdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bbe0:	f003 0301 	and.w	r3, r3, #1
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d106      	bne.n	801bbf6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801bbe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bbec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	f000 80d1 	beq.w	801bd98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801bbf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbfa:	f003 0301 	and.w	r3, r3, #1
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d00b      	beq.n	801bc1a <HAL_UART_IRQHandler+0xae>
 801bc02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bc06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d005      	beq.n	801bc1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc12:	f043 0201 	orr.w	r2, r3, #1
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bc1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc1e:	f003 0304 	and.w	r3, r3, #4
 801bc22:	2b00      	cmp	r3, #0
 801bc24:	d00b      	beq.n	801bc3e <HAL_UART_IRQHandler+0xd2>
 801bc26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bc2a:	f003 0301 	and.w	r3, r3, #1
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d005      	beq.n	801bc3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc36:	f043 0202 	orr.w	r2, r3, #2
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bc3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc42:	f003 0302 	and.w	r3, r3, #2
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d00b      	beq.n	801bc62 <HAL_UART_IRQHandler+0xf6>
 801bc4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bc4e:	f003 0301 	and.w	r3, r3, #1
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d005      	beq.n	801bc62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc5a:	f043 0204 	orr.w	r2, r3, #4
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801bc62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc66:	f003 0308 	and.w	r3, r3, #8
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d011      	beq.n	801bc92 <HAL_UART_IRQHandler+0x126>
 801bc6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bc72:	f003 0320 	and.w	r3, r3, #32
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d105      	bne.n	801bc86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801bc7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bc7e:	f003 0301 	and.w	r3, r3, #1
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d005      	beq.n	801bc92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc8a:	f043 0208 	orr.w	r2, r3, #8
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	f000 81ed 	beq.w	801c076 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801bc9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bca0:	f003 0320 	and.w	r3, r3, #32
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	d008      	beq.n	801bcba <HAL_UART_IRQHandler+0x14e>
 801bca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bcac:	f003 0320 	and.w	r3, r3, #32
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	d002      	beq.n	801bcba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801bcb4:	6878      	ldr	r0, [r7, #4]
 801bcb6:	f000 fd1a 	bl	801c6ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	681b      	ldr	r3, [r3, #0]
 801bcbe:	695b      	ldr	r3, [r3, #20]
 801bcc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bcc4:	2b40      	cmp	r3, #64	; 0x40
 801bcc6:	bf0c      	ite	eq
 801bcc8:	2301      	moveq	r3, #1
 801bcca:	2300      	movne	r3, #0
 801bccc:	b2db      	uxtb	r3, r3
 801bcce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bcd6:	f003 0308 	and.w	r3, r3, #8
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	d103      	bne.n	801bce6 <HAL_UART_IRQHandler+0x17a>
 801bcde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d04f      	beq.n	801bd86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801bce6:	6878      	ldr	r0, [r7, #4]
 801bce8:	f000 fc22 	bl	801c530 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	695b      	ldr	r3, [r3, #20]
 801bcf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bcf6:	2b40      	cmp	r3, #64	; 0x40
 801bcf8:	d141      	bne.n	801bd7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	681b      	ldr	r3, [r3, #0]
 801bcfe:	3314      	adds	r3, #20
 801bd00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bd08:	e853 3f00 	ldrex	r3, [r3]
 801bd0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801bd10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bd14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801bd18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	3314      	adds	r3, #20
 801bd22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801bd26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801bd2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801bd32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801bd36:	e841 2300 	strex	r3, r2, [r1]
 801bd3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801bd3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d1d9      	bne.n	801bcfa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d013      	beq.n	801bd76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd52:	4a7d      	ldr	r2, [pc, #500]	; (801bf48 <HAL_UART_IRQHandler+0x3dc>)
 801bd54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd5a:	4618      	mov	r0, r3
 801bd5c:	f7fa fe46 	bl	80169ec <HAL_DMA_Abort_IT>
 801bd60:	4603      	mov	r3, r0
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	d016      	beq.n	801bd94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bd6c:	687a      	ldr	r2, [r7, #4]
 801bd6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801bd70:	4610      	mov	r0, r2
 801bd72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bd74:	e00e      	b.n	801bd94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801bd76:	6878      	ldr	r0, [r7, #4]
 801bd78:	f000 f9a4 	bl	801c0c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bd7c:	e00a      	b.n	801bd94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801bd7e:	6878      	ldr	r0, [r7, #4]
 801bd80:	f000 f9a0 	bl	801c0c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bd84:	e006      	b.n	801bd94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801bd86:	6878      	ldr	r0, [r7, #4]
 801bd88:	f000 f99c 	bl	801c0c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	2200      	movs	r2, #0
 801bd90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801bd92:	e170      	b.n	801c076 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bd94:	bf00      	nop
    return;
 801bd96:	e16e      	b.n	801c076 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd9c:	2b01      	cmp	r3, #1
 801bd9e:	f040 814a 	bne.w	801c036 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801bda2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bda6:	f003 0310 	and.w	r3, r3, #16
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	f000 8143 	beq.w	801c036 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801bdb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bdb4:	f003 0310 	and.w	r3, r3, #16
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	f000 813c 	beq.w	801c036 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801bdbe:	2300      	movs	r3, #0
 801bdc0:	60bb      	str	r3, [r7, #8]
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	681b      	ldr	r3, [r3, #0]
 801bdc6:	681b      	ldr	r3, [r3, #0]
 801bdc8:	60bb      	str	r3, [r7, #8]
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	681b      	ldr	r3, [r3, #0]
 801bdce:	685b      	ldr	r3, [r3, #4]
 801bdd0:	60bb      	str	r3, [r7, #8]
 801bdd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	695b      	ldr	r3, [r3, #20]
 801bdda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bdde:	2b40      	cmp	r3, #64	; 0x40
 801bde0:	f040 80b4 	bne.w	801bf4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bde8:	681b      	ldr	r3, [r3, #0]
 801bdea:	685b      	ldr	r3, [r3, #4]
 801bdec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801bdf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	f000 8140 	beq.w	801c07a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801bdfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801be02:	429a      	cmp	r2, r3
 801be04:	f080 8139 	bcs.w	801c07a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801be0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801be14:	69db      	ldr	r3, [r3, #28]
 801be16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801be1a:	f000 8088 	beq.w	801bf2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	681b      	ldr	r3, [r3, #0]
 801be22:	330c      	adds	r3, #12
 801be24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801be2c:	e853 3f00 	ldrex	r3, [r3]
 801be30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801be34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801be38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801be3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	330c      	adds	r3, #12
 801be46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801be4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801be4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801be56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801be5a:	e841 2300 	strex	r3, r2, [r1]
 801be5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801be62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801be66:	2b00      	cmp	r3, #0
 801be68:	d1d9      	bne.n	801be1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	681b      	ldr	r3, [r3, #0]
 801be6e:	3314      	adds	r3, #20
 801be70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801be74:	e853 3f00 	ldrex	r3, [r3]
 801be78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801be7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801be7c:	f023 0301 	bic.w	r3, r3, #1
 801be80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	681b      	ldr	r3, [r3, #0]
 801be88:	3314      	adds	r3, #20
 801be8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801be8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801be92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801be96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801be9a:	e841 2300 	strex	r3, r2, [r1]
 801be9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801bea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d1e1      	bne.n	801be6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	681b      	ldr	r3, [r3, #0]
 801beaa:	3314      	adds	r3, #20
 801beac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801beae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801beb0:	e853 3f00 	ldrex	r3, [r3]
 801beb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801beb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801beb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801bebc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	681b      	ldr	r3, [r3, #0]
 801bec4:	3314      	adds	r3, #20
 801bec6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801beca:	66fa      	str	r2, [r7, #108]	; 0x6c
 801becc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bece:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801bed0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801bed2:	e841 2300 	strex	r3, r2, [r1]
 801bed6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801bed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d1e3      	bne.n	801bea6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	2220      	movs	r2, #32
 801bee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	2200      	movs	r2, #0
 801beea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	681b      	ldr	r3, [r3, #0]
 801bef0:	330c      	adds	r3, #12
 801bef2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bef6:	e853 3f00 	ldrex	r3, [r3]
 801befa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801befc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801befe:	f023 0310 	bic.w	r3, r3, #16
 801bf02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	681b      	ldr	r3, [r3, #0]
 801bf0a:	330c      	adds	r3, #12
 801bf0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801bf10:	65ba      	str	r2, [r7, #88]	; 0x58
 801bf12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bf14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801bf16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bf18:	e841 2300 	strex	r3, r2, [r1]
 801bf1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801bf1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	d1e3      	bne.n	801beec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf28:	4618      	mov	r0, r3
 801bf2a:	f7fa fcef 	bl	801690c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801bf36:	b29b      	uxth	r3, r3
 801bf38:	1ad3      	subs	r3, r2, r3
 801bf3a:	b29b      	uxth	r3, r3
 801bf3c:	4619      	mov	r1, r3
 801bf3e:	6878      	ldr	r0, [r7, #4]
 801bf40:	f7e5 f814 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801bf44:	e099      	b.n	801c07a <HAL_UART_IRQHandler+0x50e>
 801bf46:	bf00      	nop
 801bf48:	0801c5f7 	.word	0x0801c5f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801bf54:	b29b      	uxth	r3, r3
 801bf56:	1ad3      	subs	r3, r2, r3
 801bf58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801bf60:	b29b      	uxth	r3, r3
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	f000 808b 	beq.w	801c07e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801bf68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	f000 8086 	beq.w	801c07e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	681b      	ldr	r3, [r3, #0]
 801bf76:	330c      	adds	r3, #12
 801bf78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bf7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf7c:	e853 3f00 	ldrex	r3, [r3]
 801bf80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801bf82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801bf88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	681b      	ldr	r3, [r3, #0]
 801bf90:	330c      	adds	r3, #12
 801bf92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801bf96:	647a      	str	r2, [r7, #68]	; 0x44
 801bf98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bf9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801bf9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bf9e:	e841 2300 	strex	r3, r2, [r1]
 801bfa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801bfa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bfa6:	2b00      	cmp	r3, #0
 801bfa8:	d1e3      	bne.n	801bf72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	3314      	adds	r3, #20
 801bfb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfb4:	e853 3f00 	ldrex	r3, [r3]
 801bfb8:	623b      	str	r3, [r7, #32]
   return(result);
 801bfba:	6a3b      	ldr	r3, [r7, #32]
 801bfbc:	f023 0301 	bic.w	r3, r3, #1
 801bfc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	681b      	ldr	r3, [r3, #0]
 801bfc8:	3314      	adds	r3, #20
 801bfca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801bfce:	633a      	str	r2, [r7, #48]	; 0x30
 801bfd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bfd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bfd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bfd6:	e841 2300 	strex	r3, r2, [r1]
 801bfda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801bfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	d1e3      	bne.n	801bfaa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	2220      	movs	r2, #32
 801bfe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	2200      	movs	r2, #0
 801bfee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	681b      	ldr	r3, [r3, #0]
 801bff4:	330c      	adds	r3, #12
 801bff6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bff8:	693b      	ldr	r3, [r7, #16]
 801bffa:	e853 3f00 	ldrex	r3, [r3]
 801bffe:	60fb      	str	r3, [r7, #12]
   return(result);
 801c000:	68fb      	ldr	r3, [r7, #12]
 801c002:	f023 0310 	bic.w	r3, r3, #16
 801c006:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	681b      	ldr	r3, [r3, #0]
 801c00e:	330c      	adds	r3, #12
 801c010:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801c014:	61fa      	str	r2, [r7, #28]
 801c016:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c018:	69b9      	ldr	r1, [r7, #24]
 801c01a:	69fa      	ldr	r2, [r7, #28]
 801c01c:	e841 2300 	strex	r3, r2, [r1]
 801c020:	617b      	str	r3, [r7, #20]
   return(result);
 801c022:	697b      	ldr	r3, [r7, #20]
 801c024:	2b00      	cmp	r3, #0
 801c026:	d1e3      	bne.n	801bff0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801c028:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c02c:	4619      	mov	r1, r3
 801c02e:	6878      	ldr	r0, [r7, #4]
 801c030:	f7e4 ff9c 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801c034:	e023      	b.n	801c07e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801c036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c03a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d009      	beq.n	801c056 <HAL_UART_IRQHandler+0x4ea>
 801c042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d003      	beq.n	801c056 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801c04e:	6878      	ldr	r0, [r7, #4]
 801c050:	f000 fae5 	bl	801c61e <UART_Transmit_IT>
    return;
 801c054:	e014      	b.n	801c080 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801c056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c05a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d00e      	beq.n	801c080 <HAL_UART_IRQHandler+0x514>
 801c062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d008      	beq.n	801c080 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801c06e:	6878      	ldr	r0, [r7, #4]
 801c070:	f000 fb25 	bl	801c6be <UART_EndTransmit_IT>
    return;
 801c074:	e004      	b.n	801c080 <HAL_UART_IRQHandler+0x514>
    return;
 801c076:	bf00      	nop
 801c078:	e002      	b.n	801c080 <HAL_UART_IRQHandler+0x514>
      return;
 801c07a:	bf00      	nop
 801c07c:	e000      	b.n	801c080 <HAL_UART_IRQHandler+0x514>
      return;
 801c07e:	bf00      	nop
  }
}
 801c080:	37e8      	adds	r7, #232	; 0xe8
 801c082:	46bd      	mov	sp, r7
 801c084:	bd80      	pop	{r7, pc}
 801c086:	bf00      	nop

0801c088 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801c088:	b480      	push	{r7}
 801c08a:	b083      	sub	sp, #12
 801c08c:	af00      	add	r7, sp, #0
 801c08e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801c090:	bf00      	nop
 801c092:	370c      	adds	r7, #12
 801c094:	46bd      	mov	sp, r7
 801c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c09a:	4770      	bx	lr

0801c09c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801c09c:	b480      	push	{r7}
 801c09e:	b083      	sub	sp, #12
 801c0a0:	af00      	add	r7, sp, #0
 801c0a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 801c0a4:	bf00      	nop
 801c0a6:	370c      	adds	r7, #12
 801c0a8:	46bd      	mov	sp, r7
 801c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0ae:	4770      	bx	lr

0801c0b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801c0b0:	b480      	push	{r7}
 801c0b2:	b083      	sub	sp, #12
 801c0b4:	af00      	add	r7, sp, #0
 801c0b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801c0b8:	bf00      	nop
 801c0ba:	370c      	adds	r7, #12
 801c0bc:	46bd      	mov	sp, r7
 801c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0c2:	4770      	bx	lr

0801c0c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801c0c4:	b480      	push	{r7}
 801c0c6:	b083      	sub	sp, #12
 801c0c8:	af00      	add	r7, sp, #0
 801c0ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801c0cc:	bf00      	nop
 801c0ce:	370c      	adds	r7, #12
 801c0d0:	46bd      	mov	sp, r7
 801c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0d6:	4770      	bx	lr

0801c0d8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801c0d8:	b580      	push	{r7, lr}
 801c0da:	b09c      	sub	sp, #112	; 0x70
 801c0dc:	af00      	add	r7, sp, #0
 801c0de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c0e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	681b      	ldr	r3, [r3, #0]
 801c0ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d172      	bne.n	801c1da <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801c0f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0f6:	2200      	movs	r2, #0
 801c0f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c0fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	330c      	adds	r3, #12
 801c100:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c104:	e853 3f00 	ldrex	r3, [r3]
 801c108:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c10a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c10c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c110:	66bb      	str	r3, [r7, #104]	; 0x68
 801c112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	330c      	adds	r3, #12
 801c118:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c11a:	65ba      	str	r2, [r7, #88]	; 0x58
 801c11c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c11e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c120:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c122:	e841 2300 	strex	r3, r2, [r1]
 801c126:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	d1e5      	bne.n	801c0fa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c12e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c130:	681b      	ldr	r3, [r3, #0]
 801c132:	3314      	adds	r3, #20
 801c134:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c138:	e853 3f00 	ldrex	r3, [r3]
 801c13c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c140:	f023 0301 	bic.w	r3, r3, #1
 801c144:	667b      	str	r3, [r7, #100]	; 0x64
 801c146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c148:	681b      	ldr	r3, [r3, #0]
 801c14a:	3314      	adds	r3, #20
 801c14c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c14e:	647a      	str	r2, [r7, #68]	; 0x44
 801c150:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c152:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c154:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c156:	e841 2300 	strex	r3, r2, [r1]
 801c15a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c15c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d1e5      	bne.n	801c12e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	3314      	adds	r3, #20
 801c168:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c16c:	e853 3f00 	ldrex	r3, [r3]
 801c170:	623b      	str	r3, [r7, #32]
   return(result);
 801c172:	6a3b      	ldr	r3, [r7, #32]
 801c174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c178:	663b      	str	r3, [r7, #96]	; 0x60
 801c17a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	3314      	adds	r3, #20
 801c180:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c182:	633a      	str	r2, [r7, #48]	; 0x30
 801c184:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c186:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c18a:	e841 2300 	strex	r3, r2, [r1]
 801c18e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c192:	2b00      	cmp	r3, #0
 801c194:	d1e5      	bne.n	801c162 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801c196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c198:	2220      	movs	r2, #32
 801c19a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c19e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1a2:	2b01      	cmp	r3, #1
 801c1a4:	d119      	bne.n	801c1da <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c1a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c1a8:	681b      	ldr	r3, [r3, #0]
 801c1aa:	330c      	adds	r3, #12
 801c1ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c1ae:	693b      	ldr	r3, [r7, #16]
 801c1b0:	e853 3f00 	ldrex	r3, [r3]
 801c1b4:	60fb      	str	r3, [r7, #12]
   return(result);
 801c1b6:	68fb      	ldr	r3, [r7, #12]
 801c1b8:	f023 0310 	bic.w	r3, r3, #16
 801c1bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c1be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	330c      	adds	r3, #12
 801c1c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c1c6:	61fa      	str	r2, [r7, #28]
 801c1c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c1ca:	69b9      	ldr	r1, [r7, #24]
 801c1cc:	69fa      	ldr	r2, [r7, #28]
 801c1ce:	e841 2300 	strex	r3, r2, [r1]
 801c1d2:	617b      	str	r3, [r7, #20]
   return(result);
 801c1d4:	697b      	ldr	r3, [r7, #20]
 801c1d6:	2b00      	cmp	r3, #0
 801c1d8:	d1e5      	bne.n	801c1a6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c1da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1de:	2b01      	cmp	r3, #1
 801c1e0:	d106      	bne.n	801c1f0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c1e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c1e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c1e6:	4619      	mov	r1, r3
 801c1e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c1ea:	f7e4 febf 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c1ee:	e002      	b.n	801c1f6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801c1f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c1f2:	f7ff ff53 	bl	801c09c <HAL_UART_RxCpltCallback>
}
 801c1f6:	bf00      	nop
 801c1f8:	3770      	adds	r7, #112	; 0x70
 801c1fa:	46bd      	mov	sp, r7
 801c1fc:	bd80      	pop	{r7, pc}

0801c1fe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c1fe:	b580      	push	{r7, lr}
 801c200:	b084      	sub	sp, #16
 801c202:	af00      	add	r7, sp, #0
 801c204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c20a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c20c:	68fb      	ldr	r3, [r7, #12]
 801c20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c210:	2b01      	cmp	r3, #1
 801c212:	d108      	bne.n	801c226 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801c214:	68fb      	ldr	r3, [r7, #12]
 801c216:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c218:	085b      	lsrs	r3, r3, #1
 801c21a:	b29b      	uxth	r3, r3
 801c21c:	4619      	mov	r1, r3
 801c21e:	68f8      	ldr	r0, [r7, #12]
 801c220:	f7e4 fea4 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c224:	e002      	b.n	801c22c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 801c226:	68f8      	ldr	r0, [r7, #12]
 801c228:	f7ff ff42 	bl	801c0b0 <HAL_UART_RxHalfCpltCallback>
}
 801c22c:	bf00      	nop
 801c22e:	3710      	adds	r7, #16
 801c230:	46bd      	mov	sp, r7
 801c232:	bd80      	pop	{r7, pc}

0801c234 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801c234:	b580      	push	{r7, lr}
 801c236:	b084      	sub	sp, #16
 801c238:	af00      	add	r7, sp, #0
 801c23a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801c23c:	2300      	movs	r3, #0
 801c23e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c244:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801c246:	68bb      	ldr	r3, [r7, #8]
 801c248:	681b      	ldr	r3, [r3, #0]
 801c24a:	695b      	ldr	r3, [r3, #20]
 801c24c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c250:	2b80      	cmp	r3, #128	; 0x80
 801c252:	bf0c      	ite	eq
 801c254:	2301      	moveq	r3, #1
 801c256:	2300      	movne	r3, #0
 801c258:	b2db      	uxtb	r3, r3
 801c25a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801c25c:	68bb      	ldr	r3, [r7, #8]
 801c25e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c262:	b2db      	uxtb	r3, r3
 801c264:	2b21      	cmp	r3, #33	; 0x21
 801c266:	d108      	bne.n	801c27a <UART_DMAError+0x46>
 801c268:	68fb      	ldr	r3, [r7, #12]
 801c26a:	2b00      	cmp	r3, #0
 801c26c:	d005      	beq.n	801c27a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801c26e:	68bb      	ldr	r3, [r7, #8]
 801c270:	2200      	movs	r2, #0
 801c272:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801c274:	68b8      	ldr	r0, [r7, #8]
 801c276:	f000 f933 	bl	801c4e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801c27a:	68bb      	ldr	r3, [r7, #8]
 801c27c:	681b      	ldr	r3, [r3, #0]
 801c27e:	695b      	ldr	r3, [r3, #20]
 801c280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c284:	2b40      	cmp	r3, #64	; 0x40
 801c286:	bf0c      	ite	eq
 801c288:	2301      	moveq	r3, #1
 801c28a:	2300      	movne	r3, #0
 801c28c:	b2db      	uxtb	r3, r3
 801c28e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801c290:	68bb      	ldr	r3, [r7, #8]
 801c292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c296:	b2db      	uxtb	r3, r3
 801c298:	2b22      	cmp	r3, #34	; 0x22
 801c29a:	d108      	bne.n	801c2ae <UART_DMAError+0x7a>
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	d005      	beq.n	801c2ae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801c2a2:	68bb      	ldr	r3, [r7, #8]
 801c2a4:	2200      	movs	r2, #0
 801c2a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801c2a8:	68b8      	ldr	r0, [r7, #8]
 801c2aa:	f000 f941 	bl	801c530 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801c2ae:	68bb      	ldr	r3, [r7, #8]
 801c2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c2b2:	f043 0210 	orr.w	r2, r3, #16
 801c2b6:	68bb      	ldr	r3, [r7, #8]
 801c2b8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c2ba:	68b8      	ldr	r0, [r7, #8]
 801c2bc:	f7ff ff02 	bl	801c0c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c2c0:	bf00      	nop
 801c2c2:	3710      	adds	r7, #16
 801c2c4:	46bd      	mov	sp, r7
 801c2c6:	bd80      	pop	{r7, pc}

0801c2c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801c2c8:	b580      	push	{r7, lr}
 801c2ca:	b090      	sub	sp, #64	; 0x40
 801c2cc:	af00      	add	r7, sp, #0
 801c2ce:	60f8      	str	r0, [r7, #12]
 801c2d0:	60b9      	str	r1, [r7, #8]
 801c2d2:	603b      	str	r3, [r7, #0]
 801c2d4:	4613      	mov	r3, r2
 801c2d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c2d8:	e050      	b.n	801c37c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c2da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2e0:	d04c      	beq.n	801c37c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801c2e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	d007      	beq.n	801c2f8 <UART_WaitOnFlagUntilTimeout+0x30>
 801c2e8:	f7fa f8c8 	bl	801647c <HAL_GetTick>
 801c2ec:	4602      	mov	r2, r0
 801c2ee:	683b      	ldr	r3, [r7, #0]
 801c2f0:	1ad3      	subs	r3, r2, r3
 801c2f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c2f4:	429a      	cmp	r2, r3
 801c2f6:	d241      	bcs.n	801c37c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c2f8:	68fb      	ldr	r3, [r7, #12]
 801c2fa:	681b      	ldr	r3, [r3, #0]
 801c2fc:	330c      	adds	r3, #12
 801c2fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c302:	e853 3f00 	ldrex	r3, [r3]
 801c306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c30a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c30e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c310:	68fb      	ldr	r3, [r7, #12]
 801c312:	681b      	ldr	r3, [r3, #0]
 801c314:	330c      	adds	r3, #12
 801c316:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c318:	637a      	str	r2, [r7, #52]	; 0x34
 801c31a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c31c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c31e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c320:	e841 2300 	strex	r3, r2, [r1]
 801c324:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c328:	2b00      	cmp	r3, #0
 801c32a:	d1e5      	bne.n	801c2f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c32c:	68fb      	ldr	r3, [r7, #12]
 801c32e:	681b      	ldr	r3, [r3, #0]
 801c330:	3314      	adds	r3, #20
 801c332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c334:	697b      	ldr	r3, [r7, #20]
 801c336:	e853 3f00 	ldrex	r3, [r3]
 801c33a:	613b      	str	r3, [r7, #16]
   return(result);
 801c33c:	693b      	ldr	r3, [r7, #16]
 801c33e:	f023 0301 	bic.w	r3, r3, #1
 801c342:	63bb      	str	r3, [r7, #56]	; 0x38
 801c344:	68fb      	ldr	r3, [r7, #12]
 801c346:	681b      	ldr	r3, [r3, #0]
 801c348:	3314      	adds	r3, #20
 801c34a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c34c:	623a      	str	r2, [r7, #32]
 801c34e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c350:	69f9      	ldr	r1, [r7, #28]
 801c352:	6a3a      	ldr	r2, [r7, #32]
 801c354:	e841 2300 	strex	r3, r2, [r1]
 801c358:	61bb      	str	r3, [r7, #24]
   return(result);
 801c35a:	69bb      	ldr	r3, [r7, #24]
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	d1e5      	bne.n	801c32c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 801c360:	68fb      	ldr	r3, [r7, #12]
 801c362:	2220      	movs	r2, #32
 801c364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801c368:	68fb      	ldr	r3, [r7, #12]
 801c36a:	2220      	movs	r2, #32
 801c36c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801c370:	68fb      	ldr	r3, [r7, #12]
 801c372:	2200      	movs	r2, #0
 801c374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801c378:	2303      	movs	r3, #3
 801c37a:	e00f      	b.n	801c39c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c37c:	68fb      	ldr	r3, [r7, #12]
 801c37e:	681b      	ldr	r3, [r3, #0]
 801c380:	681a      	ldr	r2, [r3, #0]
 801c382:	68bb      	ldr	r3, [r7, #8]
 801c384:	4013      	ands	r3, r2
 801c386:	68ba      	ldr	r2, [r7, #8]
 801c388:	429a      	cmp	r2, r3
 801c38a:	bf0c      	ite	eq
 801c38c:	2301      	moveq	r3, #1
 801c38e:	2300      	movne	r3, #0
 801c390:	b2db      	uxtb	r3, r3
 801c392:	461a      	mov	r2, r3
 801c394:	79fb      	ldrb	r3, [r7, #7]
 801c396:	429a      	cmp	r2, r3
 801c398:	d09f      	beq.n	801c2da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801c39a:	2300      	movs	r3, #0
}
 801c39c:	4618      	mov	r0, r3
 801c39e:	3740      	adds	r7, #64	; 0x40
 801c3a0:	46bd      	mov	sp, r7
 801c3a2:	bd80      	pop	{r7, pc}

0801c3a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c3a4:	b580      	push	{r7, lr}
 801c3a6:	b098      	sub	sp, #96	; 0x60
 801c3a8:	af00      	add	r7, sp, #0
 801c3aa:	60f8      	str	r0, [r7, #12]
 801c3ac:	60b9      	str	r1, [r7, #8]
 801c3ae:	4613      	mov	r3, r2
 801c3b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801c3b2:	68ba      	ldr	r2, [r7, #8]
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801c3b8:	68fb      	ldr	r3, [r7, #12]
 801c3ba:	88fa      	ldrh	r2, [r7, #6]
 801c3bc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c3be:	68fb      	ldr	r3, [r7, #12]
 801c3c0:	2200      	movs	r2, #0
 801c3c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c3c4:	68fb      	ldr	r3, [r7, #12]
 801c3c6:	2222      	movs	r2, #34	; 0x22
 801c3c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801c3cc:	68fb      	ldr	r3, [r7, #12]
 801c3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3d0:	4a40      	ldr	r2, [pc, #256]	; (801c4d4 <UART_Start_Receive_DMA+0x130>)
 801c3d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801c3d4:	68fb      	ldr	r3, [r7, #12]
 801c3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3d8:	4a3f      	ldr	r2, [pc, #252]	; (801c4d8 <UART_Start_Receive_DMA+0x134>)
 801c3da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 801c3dc:	68fb      	ldr	r3, [r7, #12]
 801c3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3e0:	4a3e      	ldr	r2, [pc, #248]	; (801c4dc <UART_Start_Receive_DMA+0x138>)
 801c3e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 801c3e4:	68fb      	ldr	r3, [r7, #12]
 801c3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3e8:	2200      	movs	r2, #0
 801c3ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 801c3ec:	f107 0308 	add.w	r3, r7, #8
 801c3f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801c3f2:	68fb      	ldr	r3, [r7, #12]
 801c3f4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c3f6:	68fb      	ldr	r3, [r7, #12]
 801c3f8:	681b      	ldr	r3, [r3, #0]
 801c3fa:	3304      	adds	r3, #4
 801c3fc:	4619      	mov	r1, r3
 801c3fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c400:	681a      	ldr	r2, [r3, #0]
 801c402:	88fb      	ldrh	r3, [r7, #6]
 801c404:	f7fa fa2a 	bl	801685c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801c408:	2300      	movs	r3, #0
 801c40a:	613b      	str	r3, [r7, #16]
 801c40c:	68fb      	ldr	r3, [r7, #12]
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	681b      	ldr	r3, [r3, #0]
 801c412:	613b      	str	r3, [r7, #16]
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	681b      	ldr	r3, [r3, #0]
 801c418:	685b      	ldr	r3, [r3, #4]
 801c41a:	613b      	str	r3, [r7, #16]
 801c41c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801c41e:	68fb      	ldr	r3, [r7, #12]
 801c420:	2200      	movs	r2, #0
 801c422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	691b      	ldr	r3, [r3, #16]
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d019      	beq.n	801c462 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c42e:	68fb      	ldr	r3, [r7, #12]
 801c430:	681b      	ldr	r3, [r3, #0]
 801c432:	330c      	adds	r3, #12
 801c434:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c438:	e853 3f00 	ldrex	r3, [r3]
 801c43c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c444:	65bb      	str	r3, [r7, #88]	; 0x58
 801c446:	68fb      	ldr	r3, [r7, #12]
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	330c      	adds	r3, #12
 801c44c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c44e:	64fa      	str	r2, [r7, #76]	; 0x4c
 801c450:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c452:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801c454:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c456:	e841 2300 	strex	r3, r2, [r1]
 801c45a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801c45c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c45e:	2b00      	cmp	r3, #0
 801c460:	d1e5      	bne.n	801c42e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c462:	68fb      	ldr	r3, [r7, #12]
 801c464:	681b      	ldr	r3, [r3, #0]
 801c466:	3314      	adds	r3, #20
 801c468:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c46c:	e853 3f00 	ldrex	r3, [r3]
 801c470:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c474:	f043 0301 	orr.w	r3, r3, #1
 801c478:	657b      	str	r3, [r7, #84]	; 0x54
 801c47a:	68fb      	ldr	r3, [r7, #12]
 801c47c:	681b      	ldr	r3, [r3, #0]
 801c47e:	3314      	adds	r3, #20
 801c480:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c482:	63ba      	str	r2, [r7, #56]	; 0x38
 801c484:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c486:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c48a:	e841 2300 	strex	r3, r2, [r1]
 801c48e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c492:	2b00      	cmp	r3, #0
 801c494:	d1e5      	bne.n	801c462 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c496:	68fb      	ldr	r3, [r7, #12]
 801c498:	681b      	ldr	r3, [r3, #0]
 801c49a:	3314      	adds	r3, #20
 801c49c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c49e:	69bb      	ldr	r3, [r7, #24]
 801c4a0:	e853 3f00 	ldrex	r3, [r3]
 801c4a4:	617b      	str	r3, [r7, #20]
   return(result);
 801c4a6:	697b      	ldr	r3, [r7, #20]
 801c4a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c4ac:	653b      	str	r3, [r7, #80]	; 0x50
 801c4ae:	68fb      	ldr	r3, [r7, #12]
 801c4b0:	681b      	ldr	r3, [r3, #0]
 801c4b2:	3314      	adds	r3, #20
 801c4b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c4b6:	627a      	str	r2, [r7, #36]	; 0x24
 801c4b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c4ba:	6a39      	ldr	r1, [r7, #32]
 801c4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c4be:	e841 2300 	strex	r3, r2, [r1]
 801c4c2:	61fb      	str	r3, [r7, #28]
   return(result);
 801c4c4:	69fb      	ldr	r3, [r7, #28]
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	d1e5      	bne.n	801c496 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 801c4ca:	2300      	movs	r3, #0
}
 801c4cc:	4618      	mov	r0, r3
 801c4ce:	3760      	adds	r7, #96	; 0x60
 801c4d0:	46bd      	mov	sp, r7
 801c4d2:	bd80      	pop	{r7, pc}
 801c4d4:	0801c0d9 	.word	0x0801c0d9
 801c4d8:	0801c1ff 	.word	0x0801c1ff
 801c4dc:	0801c235 	.word	0x0801c235

0801c4e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801c4e0:	b480      	push	{r7}
 801c4e2:	b089      	sub	sp, #36	; 0x24
 801c4e4:	af00      	add	r7, sp, #0
 801c4e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	330c      	adds	r3, #12
 801c4ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4f0:	68fb      	ldr	r3, [r7, #12]
 801c4f2:	e853 3f00 	ldrex	r3, [r3]
 801c4f6:	60bb      	str	r3, [r7, #8]
   return(result);
 801c4f8:	68bb      	ldr	r3, [r7, #8]
 801c4fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801c4fe:	61fb      	str	r3, [r7, #28]
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	330c      	adds	r3, #12
 801c506:	69fa      	ldr	r2, [r7, #28]
 801c508:	61ba      	str	r2, [r7, #24]
 801c50a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c50c:	6979      	ldr	r1, [r7, #20]
 801c50e:	69ba      	ldr	r2, [r7, #24]
 801c510:	e841 2300 	strex	r3, r2, [r1]
 801c514:	613b      	str	r3, [r7, #16]
   return(result);
 801c516:	693b      	ldr	r3, [r7, #16]
 801c518:	2b00      	cmp	r3, #0
 801c51a:	d1e5      	bne.n	801c4e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	2220      	movs	r2, #32
 801c520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801c524:	bf00      	nop
 801c526:	3724      	adds	r7, #36	; 0x24
 801c528:	46bd      	mov	sp, r7
 801c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c52e:	4770      	bx	lr

0801c530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c530:	b480      	push	{r7}
 801c532:	b095      	sub	sp, #84	; 0x54
 801c534:	af00      	add	r7, sp, #0
 801c536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	681b      	ldr	r3, [r3, #0]
 801c53c:	330c      	adds	r3, #12
 801c53e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c542:	e853 3f00 	ldrex	r3, [r3]
 801c546:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c54a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c54e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	681b      	ldr	r3, [r3, #0]
 801c554:	330c      	adds	r3, #12
 801c556:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c558:	643a      	str	r2, [r7, #64]	; 0x40
 801c55a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c55c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c55e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c560:	e841 2300 	strex	r3, r2, [r1]
 801c564:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c568:	2b00      	cmp	r3, #0
 801c56a:	d1e5      	bne.n	801c538 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c56c:	687b      	ldr	r3, [r7, #4]
 801c56e:	681b      	ldr	r3, [r3, #0]
 801c570:	3314      	adds	r3, #20
 801c572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c574:	6a3b      	ldr	r3, [r7, #32]
 801c576:	e853 3f00 	ldrex	r3, [r3]
 801c57a:	61fb      	str	r3, [r7, #28]
   return(result);
 801c57c:	69fb      	ldr	r3, [r7, #28]
 801c57e:	f023 0301 	bic.w	r3, r3, #1
 801c582:	64bb      	str	r3, [r7, #72]	; 0x48
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	681b      	ldr	r3, [r3, #0]
 801c588:	3314      	adds	r3, #20
 801c58a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c58c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c58e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c594:	e841 2300 	strex	r3, r2, [r1]
 801c598:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d1e5      	bne.n	801c56c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c5a4:	2b01      	cmp	r3, #1
 801c5a6:	d119      	bne.n	801c5dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	681b      	ldr	r3, [r3, #0]
 801c5ac:	330c      	adds	r3, #12
 801c5ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	e853 3f00 	ldrex	r3, [r3]
 801c5b6:	60bb      	str	r3, [r7, #8]
   return(result);
 801c5b8:	68bb      	ldr	r3, [r7, #8]
 801c5ba:	f023 0310 	bic.w	r3, r3, #16
 801c5be:	647b      	str	r3, [r7, #68]	; 0x44
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	681b      	ldr	r3, [r3, #0]
 801c5c4:	330c      	adds	r3, #12
 801c5c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c5c8:	61ba      	str	r2, [r7, #24]
 801c5ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c5cc:	6979      	ldr	r1, [r7, #20]
 801c5ce:	69ba      	ldr	r2, [r7, #24]
 801c5d0:	e841 2300 	strex	r3, r2, [r1]
 801c5d4:	613b      	str	r3, [r7, #16]
   return(result);
 801c5d6:	693b      	ldr	r3, [r7, #16]
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d1e5      	bne.n	801c5a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	2220      	movs	r2, #32
 801c5e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c5e4:	687b      	ldr	r3, [r7, #4]
 801c5e6:	2200      	movs	r2, #0
 801c5e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 801c5ea:	bf00      	nop
 801c5ec:	3754      	adds	r7, #84	; 0x54
 801c5ee:	46bd      	mov	sp, r7
 801c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5f4:	4770      	bx	lr

0801c5f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c5f6:	b580      	push	{r7, lr}
 801c5f8:	b084      	sub	sp, #16
 801c5fa:	af00      	add	r7, sp, #0
 801c5fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c602:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801c604:	68fb      	ldr	r3, [r7, #12]
 801c606:	2200      	movs	r2, #0
 801c608:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801c60a:	68fb      	ldr	r3, [r7, #12]
 801c60c:	2200      	movs	r2, #0
 801c60e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c610:	68f8      	ldr	r0, [r7, #12]
 801c612:	f7ff fd57 	bl	801c0c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c616:	bf00      	nop
 801c618:	3710      	adds	r7, #16
 801c61a:	46bd      	mov	sp, r7
 801c61c:	bd80      	pop	{r7, pc}

0801c61e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801c61e:	b480      	push	{r7}
 801c620:	b085      	sub	sp, #20
 801c622:	af00      	add	r7, sp, #0
 801c624:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c62c:	b2db      	uxtb	r3, r3
 801c62e:	2b21      	cmp	r3, #33	; 0x21
 801c630:	d13e      	bne.n	801c6b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c632:	687b      	ldr	r3, [r7, #4]
 801c634:	689b      	ldr	r3, [r3, #8]
 801c636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c63a:	d114      	bne.n	801c666 <UART_Transmit_IT+0x48>
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	691b      	ldr	r3, [r3, #16]
 801c640:	2b00      	cmp	r3, #0
 801c642:	d110      	bne.n	801c666 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	6a1b      	ldr	r3, [r3, #32]
 801c648:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	881b      	ldrh	r3, [r3, #0]
 801c64e:	461a      	mov	r2, r3
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	681b      	ldr	r3, [r3, #0]
 801c654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801c658:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	6a1b      	ldr	r3, [r3, #32]
 801c65e:	1c9a      	adds	r2, r3, #2
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	621a      	str	r2, [r3, #32]
 801c664:	e008      	b.n	801c678 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	6a1b      	ldr	r3, [r3, #32]
 801c66a:	1c59      	adds	r1, r3, #1
 801c66c:	687a      	ldr	r2, [r7, #4]
 801c66e:	6211      	str	r1, [r2, #32]
 801c670:	781a      	ldrb	r2, [r3, #0]
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	681b      	ldr	r3, [r3, #0]
 801c676:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801c67c:	b29b      	uxth	r3, r3
 801c67e:	3b01      	subs	r3, #1
 801c680:	b29b      	uxth	r3, r3
 801c682:	687a      	ldr	r2, [r7, #4]
 801c684:	4619      	mov	r1, r3
 801c686:	84d1      	strh	r1, [r2, #38]	; 0x26
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d10f      	bne.n	801c6ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	681b      	ldr	r3, [r3, #0]
 801c690:	68da      	ldr	r2, [r3, #12]
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c69a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	68da      	ldr	r2, [r3, #12]
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c6aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801c6ac:	2300      	movs	r3, #0
 801c6ae:	e000      	b.n	801c6b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801c6b0:	2302      	movs	r3, #2
  }
}
 801c6b2:	4618      	mov	r0, r3
 801c6b4:	3714      	adds	r7, #20
 801c6b6:	46bd      	mov	sp, r7
 801c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6bc:	4770      	bx	lr

0801c6be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c6be:	b580      	push	{r7, lr}
 801c6c0:	b082      	sub	sp, #8
 801c6c2:	af00      	add	r7, sp, #0
 801c6c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801c6c6:	687b      	ldr	r3, [r7, #4]
 801c6c8:	681b      	ldr	r3, [r3, #0]
 801c6ca:	68da      	ldr	r2, [r3, #12]
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	681b      	ldr	r3, [r3, #0]
 801c6d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c6d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	2220      	movs	r2, #32
 801c6da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801c6de:	6878      	ldr	r0, [r7, #4]
 801c6e0:	f7ff fcd2 	bl	801c088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801c6e4:	2300      	movs	r3, #0
}
 801c6e6:	4618      	mov	r0, r3
 801c6e8:	3708      	adds	r7, #8
 801c6ea:	46bd      	mov	sp, r7
 801c6ec:	bd80      	pop	{r7, pc}

0801c6ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801c6ee:	b580      	push	{r7, lr}
 801c6f0:	b08c      	sub	sp, #48	; 0x30
 801c6f2:	af00      	add	r7, sp, #0
 801c6f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c6fc:	b2db      	uxtb	r3, r3
 801c6fe:	2b22      	cmp	r3, #34	; 0x22
 801c700:	f040 80ab 	bne.w	801c85a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	689b      	ldr	r3, [r3, #8]
 801c708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c70c:	d117      	bne.n	801c73e <UART_Receive_IT+0x50>
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	691b      	ldr	r3, [r3, #16]
 801c712:	2b00      	cmp	r3, #0
 801c714:	d113      	bne.n	801c73e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801c716:	2300      	movs	r3, #0
 801c718:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c71e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801c720:	687b      	ldr	r3, [r7, #4]
 801c722:	681b      	ldr	r3, [r3, #0]
 801c724:	685b      	ldr	r3, [r3, #4]
 801c726:	b29b      	uxth	r3, r3
 801c728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c72c:	b29a      	uxth	r2, r3
 801c72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c730:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c736:	1c9a      	adds	r2, r3, #2
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	629a      	str	r2, [r3, #40]	; 0x28
 801c73c:	e026      	b.n	801c78c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c742:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801c744:	2300      	movs	r3, #0
 801c746:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	689b      	ldr	r3, [r3, #8]
 801c74c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c750:	d007      	beq.n	801c762 <UART_Receive_IT+0x74>
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	689b      	ldr	r3, [r3, #8]
 801c756:	2b00      	cmp	r3, #0
 801c758:	d10a      	bne.n	801c770 <UART_Receive_IT+0x82>
 801c75a:	687b      	ldr	r3, [r7, #4]
 801c75c:	691b      	ldr	r3, [r3, #16]
 801c75e:	2b00      	cmp	r3, #0
 801c760:	d106      	bne.n	801c770 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	681b      	ldr	r3, [r3, #0]
 801c766:	685b      	ldr	r3, [r3, #4]
 801c768:	b2da      	uxtb	r2, r3
 801c76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c76c:	701a      	strb	r2, [r3, #0]
 801c76e:	e008      	b.n	801c782 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	685b      	ldr	r3, [r3, #4]
 801c776:	b2db      	uxtb	r3, r3
 801c778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c77c:	b2da      	uxtb	r2, r3
 801c77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c780:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c786:	1c5a      	adds	r2, r3, #1
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c790:	b29b      	uxth	r3, r3
 801c792:	3b01      	subs	r3, #1
 801c794:	b29b      	uxth	r3, r3
 801c796:	687a      	ldr	r2, [r7, #4]
 801c798:	4619      	mov	r1, r3
 801c79a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d15a      	bne.n	801c856 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	68da      	ldr	r2, [r3, #12]
 801c7a6:	687b      	ldr	r3, [r7, #4]
 801c7a8:	681b      	ldr	r3, [r3, #0]
 801c7aa:	f022 0220 	bic.w	r2, r2, #32
 801c7ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	681b      	ldr	r3, [r3, #0]
 801c7b4:	68da      	ldr	r2, [r3, #12]
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	681b      	ldr	r3, [r3, #0]
 801c7ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801c7be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801c7c0:	687b      	ldr	r3, [r7, #4]
 801c7c2:	681b      	ldr	r3, [r3, #0]
 801c7c4:	695a      	ldr	r2, [r3, #20]
 801c7c6:	687b      	ldr	r3, [r7, #4]
 801c7c8:	681b      	ldr	r3, [r3, #0]
 801c7ca:	f022 0201 	bic.w	r2, r2, #1
 801c7ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	2220      	movs	r2, #32
 801c7d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c7d8:	687b      	ldr	r3, [r7, #4]
 801c7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7dc:	2b01      	cmp	r3, #1
 801c7de:	d135      	bne.n	801c84c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	2200      	movs	r2, #0
 801c7e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	681b      	ldr	r3, [r3, #0]
 801c7ea:	330c      	adds	r3, #12
 801c7ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c7ee:	697b      	ldr	r3, [r7, #20]
 801c7f0:	e853 3f00 	ldrex	r3, [r3]
 801c7f4:	613b      	str	r3, [r7, #16]
   return(result);
 801c7f6:	693b      	ldr	r3, [r7, #16]
 801c7f8:	f023 0310 	bic.w	r3, r3, #16
 801c7fc:	627b      	str	r3, [r7, #36]	; 0x24
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	681b      	ldr	r3, [r3, #0]
 801c802:	330c      	adds	r3, #12
 801c804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c806:	623a      	str	r2, [r7, #32]
 801c808:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c80a:	69f9      	ldr	r1, [r7, #28]
 801c80c:	6a3a      	ldr	r2, [r7, #32]
 801c80e:	e841 2300 	strex	r3, r2, [r1]
 801c812:	61bb      	str	r3, [r7, #24]
   return(result);
 801c814:	69bb      	ldr	r3, [r7, #24]
 801c816:	2b00      	cmp	r3, #0
 801c818:	d1e5      	bne.n	801c7e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	681b      	ldr	r3, [r3, #0]
 801c81e:	681b      	ldr	r3, [r3, #0]
 801c820:	f003 0310 	and.w	r3, r3, #16
 801c824:	2b10      	cmp	r3, #16
 801c826:	d10a      	bne.n	801c83e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801c828:	2300      	movs	r3, #0
 801c82a:	60fb      	str	r3, [r7, #12]
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	60fb      	str	r3, [r7, #12]
 801c834:	687b      	ldr	r3, [r7, #4]
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	685b      	ldr	r3, [r3, #4]
 801c83a:	60fb      	str	r3, [r7, #12]
 801c83c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c842:	4619      	mov	r1, r3
 801c844:	6878      	ldr	r0, [r7, #4]
 801c846:	f7e4 fb91 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
 801c84a:	e002      	b.n	801c852 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801c84c:	6878      	ldr	r0, [r7, #4]
 801c84e:	f7ff fc25 	bl	801c09c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801c852:	2300      	movs	r3, #0
 801c854:	e002      	b.n	801c85c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801c856:	2300      	movs	r3, #0
 801c858:	e000      	b.n	801c85c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801c85a:	2302      	movs	r3, #2
  }
}
 801c85c:	4618      	mov	r0, r3
 801c85e:	3730      	adds	r7, #48	; 0x30
 801c860:	46bd      	mov	sp, r7
 801c862:	bd80      	pop	{r7, pc}

0801c864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801c864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c868:	b0c0      	sub	sp, #256	; 0x100
 801c86a:	af00      	add	r7, sp, #0
 801c86c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801c870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c874:	681b      	ldr	r3, [r3, #0]
 801c876:	691b      	ldr	r3, [r3, #16]
 801c878:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801c87c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c880:	68d9      	ldr	r1, [r3, #12]
 801c882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c886:	681a      	ldr	r2, [r3, #0]
 801c888:	ea40 0301 	orr.w	r3, r0, r1
 801c88c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801c88e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c892:	689a      	ldr	r2, [r3, #8]
 801c894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c898:	691b      	ldr	r3, [r3, #16]
 801c89a:	431a      	orrs	r2, r3
 801c89c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8a0:	695b      	ldr	r3, [r3, #20]
 801c8a2:	431a      	orrs	r2, r3
 801c8a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8a8:	69db      	ldr	r3, [r3, #28]
 801c8aa:	4313      	orrs	r3, r2
 801c8ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801c8b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	68db      	ldr	r3, [r3, #12]
 801c8b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801c8bc:	f021 010c 	bic.w	r1, r1, #12
 801c8c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8c4:	681a      	ldr	r2, [r3, #0]
 801c8c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801c8ca:	430b      	orrs	r3, r1
 801c8cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801c8ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8d2:	681b      	ldr	r3, [r3, #0]
 801c8d4:	695b      	ldr	r3, [r3, #20]
 801c8d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801c8da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8de:	6999      	ldr	r1, [r3, #24]
 801c8e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8e4:	681a      	ldr	r2, [r3, #0]
 801c8e6:	ea40 0301 	orr.w	r3, r0, r1
 801c8ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801c8ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8f0:	681a      	ldr	r2, [r3, #0]
 801c8f2:	4b8f      	ldr	r3, [pc, #572]	; (801cb30 <UART_SetConfig+0x2cc>)
 801c8f4:	429a      	cmp	r2, r3
 801c8f6:	d005      	beq.n	801c904 <UART_SetConfig+0xa0>
 801c8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8fc:	681a      	ldr	r2, [r3, #0]
 801c8fe:	4b8d      	ldr	r3, [pc, #564]	; (801cb34 <UART_SetConfig+0x2d0>)
 801c900:	429a      	cmp	r2, r3
 801c902:	d104      	bne.n	801c90e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801c904:	f7fd ffbc 	bl	801a880 <HAL_RCC_GetPCLK2Freq>
 801c908:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801c90c:	e003      	b.n	801c916 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801c90e:	f7fd ffa3 	bl	801a858 <HAL_RCC_GetPCLK1Freq>
 801c912:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801c916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c91a:	69db      	ldr	r3, [r3, #28]
 801c91c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c920:	f040 810c 	bne.w	801cb3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801c924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c928:	2200      	movs	r2, #0
 801c92a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801c92e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801c932:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801c936:	4622      	mov	r2, r4
 801c938:	462b      	mov	r3, r5
 801c93a:	1891      	adds	r1, r2, r2
 801c93c:	65b9      	str	r1, [r7, #88]	; 0x58
 801c93e:	415b      	adcs	r3, r3
 801c940:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c942:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801c946:	4621      	mov	r1, r4
 801c948:	eb12 0801 	adds.w	r8, r2, r1
 801c94c:	4629      	mov	r1, r5
 801c94e:	eb43 0901 	adc.w	r9, r3, r1
 801c952:	f04f 0200 	mov.w	r2, #0
 801c956:	f04f 0300 	mov.w	r3, #0
 801c95a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801c95e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801c962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801c966:	4690      	mov	r8, r2
 801c968:	4699      	mov	r9, r3
 801c96a:	4623      	mov	r3, r4
 801c96c:	eb18 0303 	adds.w	r3, r8, r3
 801c970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801c974:	462b      	mov	r3, r5
 801c976:	eb49 0303 	adc.w	r3, r9, r3
 801c97a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801c97e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c982:	685b      	ldr	r3, [r3, #4]
 801c984:	2200      	movs	r2, #0
 801c986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801c98a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c98e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801c992:	460b      	mov	r3, r1
 801c994:	18db      	adds	r3, r3, r3
 801c996:	653b      	str	r3, [r7, #80]	; 0x50
 801c998:	4613      	mov	r3, r2
 801c99a:	eb42 0303 	adc.w	r3, r2, r3
 801c99e:	657b      	str	r3, [r7, #84]	; 0x54
 801c9a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801c9a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801c9a8:	f7e4 f926 	bl	8000bf8 <__aeabi_uldivmod>
 801c9ac:	4602      	mov	r2, r0
 801c9ae:	460b      	mov	r3, r1
 801c9b0:	4b61      	ldr	r3, [pc, #388]	; (801cb38 <UART_SetConfig+0x2d4>)
 801c9b2:	fba3 2302 	umull	r2, r3, r3, r2
 801c9b6:	095b      	lsrs	r3, r3, #5
 801c9b8:	011c      	lsls	r4, r3, #4
 801c9ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c9be:	2200      	movs	r2, #0
 801c9c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c9c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801c9c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801c9cc:	4642      	mov	r2, r8
 801c9ce:	464b      	mov	r3, r9
 801c9d0:	1891      	adds	r1, r2, r2
 801c9d2:	64b9      	str	r1, [r7, #72]	; 0x48
 801c9d4:	415b      	adcs	r3, r3
 801c9d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c9d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801c9dc:	4641      	mov	r1, r8
 801c9de:	eb12 0a01 	adds.w	sl, r2, r1
 801c9e2:	4649      	mov	r1, r9
 801c9e4:	eb43 0b01 	adc.w	fp, r3, r1
 801c9e8:	f04f 0200 	mov.w	r2, #0
 801c9ec:	f04f 0300 	mov.w	r3, #0
 801c9f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801c9f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801c9f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801c9fc:	4692      	mov	sl, r2
 801c9fe:	469b      	mov	fp, r3
 801ca00:	4643      	mov	r3, r8
 801ca02:	eb1a 0303 	adds.w	r3, sl, r3
 801ca06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801ca0a:	464b      	mov	r3, r9
 801ca0c:	eb4b 0303 	adc.w	r3, fp, r3
 801ca10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801ca14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ca18:	685b      	ldr	r3, [r3, #4]
 801ca1a:	2200      	movs	r2, #0
 801ca1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801ca20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801ca24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801ca28:	460b      	mov	r3, r1
 801ca2a:	18db      	adds	r3, r3, r3
 801ca2c:	643b      	str	r3, [r7, #64]	; 0x40
 801ca2e:	4613      	mov	r3, r2
 801ca30:	eb42 0303 	adc.w	r3, r2, r3
 801ca34:	647b      	str	r3, [r7, #68]	; 0x44
 801ca36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801ca3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801ca3e:	f7e4 f8db 	bl	8000bf8 <__aeabi_uldivmod>
 801ca42:	4602      	mov	r2, r0
 801ca44:	460b      	mov	r3, r1
 801ca46:	4611      	mov	r1, r2
 801ca48:	4b3b      	ldr	r3, [pc, #236]	; (801cb38 <UART_SetConfig+0x2d4>)
 801ca4a:	fba3 2301 	umull	r2, r3, r3, r1
 801ca4e:	095b      	lsrs	r3, r3, #5
 801ca50:	2264      	movs	r2, #100	; 0x64
 801ca52:	fb02 f303 	mul.w	r3, r2, r3
 801ca56:	1acb      	subs	r3, r1, r3
 801ca58:	00db      	lsls	r3, r3, #3
 801ca5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801ca5e:	4b36      	ldr	r3, [pc, #216]	; (801cb38 <UART_SetConfig+0x2d4>)
 801ca60:	fba3 2302 	umull	r2, r3, r3, r2
 801ca64:	095b      	lsrs	r3, r3, #5
 801ca66:	005b      	lsls	r3, r3, #1
 801ca68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801ca6c:	441c      	add	r4, r3
 801ca6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ca72:	2200      	movs	r2, #0
 801ca74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801ca78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801ca7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801ca80:	4642      	mov	r2, r8
 801ca82:	464b      	mov	r3, r9
 801ca84:	1891      	adds	r1, r2, r2
 801ca86:	63b9      	str	r1, [r7, #56]	; 0x38
 801ca88:	415b      	adcs	r3, r3
 801ca8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ca8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801ca90:	4641      	mov	r1, r8
 801ca92:	1851      	adds	r1, r2, r1
 801ca94:	6339      	str	r1, [r7, #48]	; 0x30
 801ca96:	4649      	mov	r1, r9
 801ca98:	414b      	adcs	r3, r1
 801ca9a:	637b      	str	r3, [r7, #52]	; 0x34
 801ca9c:	f04f 0200 	mov.w	r2, #0
 801caa0:	f04f 0300 	mov.w	r3, #0
 801caa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801caa8:	4659      	mov	r1, fp
 801caaa:	00cb      	lsls	r3, r1, #3
 801caac:	4651      	mov	r1, sl
 801caae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cab2:	4651      	mov	r1, sl
 801cab4:	00ca      	lsls	r2, r1, #3
 801cab6:	4610      	mov	r0, r2
 801cab8:	4619      	mov	r1, r3
 801caba:	4603      	mov	r3, r0
 801cabc:	4642      	mov	r2, r8
 801cabe:	189b      	adds	r3, r3, r2
 801cac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801cac4:	464b      	mov	r3, r9
 801cac6:	460a      	mov	r2, r1
 801cac8:	eb42 0303 	adc.w	r3, r2, r3
 801cacc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801cad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cad4:	685b      	ldr	r3, [r3, #4]
 801cad6:	2200      	movs	r2, #0
 801cad8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801cadc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801cae0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801cae4:	460b      	mov	r3, r1
 801cae6:	18db      	adds	r3, r3, r3
 801cae8:	62bb      	str	r3, [r7, #40]	; 0x28
 801caea:	4613      	mov	r3, r2
 801caec:	eb42 0303 	adc.w	r3, r2, r3
 801caf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801caf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801caf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801cafa:	f7e4 f87d 	bl	8000bf8 <__aeabi_uldivmod>
 801cafe:	4602      	mov	r2, r0
 801cb00:	460b      	mov	r3, r1
 801cb02:	4b0d      	ldr	r3, [pc, #52]	; (801cb38 <UART_SetConfig+0x2d4>)
 801cb04:	fba3 1302 	umull	r1, r3, r3, r2
 801cb08:	095b      	lsrs	r3, r3, #5
 801cb0a:	2164      	movs	r1, #100	; 0x64
 801cb0c:	fb01 f303 	mul.w	r3, r1, r3
 801cb10:	1ad3      	subs	r3, r2, r3
 801cb12:	00db      	lsls	r3, r3, #3
 801cb14:	3332      	adds	r3, #50	; 0x32
 801cb16:	4a08      	ldr	r2, [pc, #32]	; (801cb38 <UART_SetConfig+0x2d4>)
 801cb18:	fba2 2303 	umull	r2, r3, r2, r3
 801cb1c:	095b      	lsrs	r3, r3, #5
 801cb1e:	f003 0207 	and.w	r2, r3, #7
 801cb22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb26:	681b      	ldr	r3, [r3, #0]
 801cb28:	4422      	add	r2, r4
 801cb2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801cb2c:	e105      	b.n	801cd3a <UART_SetConfig+0x4d6>
 801cb2e:	bf00      	nop
 801cb30:	40011000 	.word	0x40011000
 801cb34:	40011400 	.word	0x40011400
 801cb38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801cb3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cb40:	2200      	movs	r2, #0
 801cb42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801cb46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801cb4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801cb4e:	4642      	mov	r2, r8
 801cb50:	464b      	mov	r3, r9
 801cb52:	1891      	adds	r1, r2, r2
 801cb54:	6239      	str	r1, [r7, #32]
 801cb56:	415b      	adcs	r3, r3
 801cb58:	627b      	str	r3, [r7, #36]	; 0x24
 801cb5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801cb5e:	4641      	mov	r1, r8
 801cb60:	1854      	adds	r4, r2, r1
 801cb62:	4649      	mov	r1, r9
 801cb64:	eb43 0501 	adc.w	r5, r3, r1
 801cb68:	f04f 0200 	mov.w	r2, #0
 801cb6c:	f04f 0300 	mov.w	r3, #0
 801cb70:	00eb      	lsls	r3, r5, #3
 801cb72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801cb76:	00e2      	lsls	r2, r4, #3
 801cb78:	4614      	mov	r4, r2
 801cb7a:	461d      	mov	r5, r3
 801cb7c:	4643      	mov	r3, r8
 801cb7e:	18e3      	adds	r3, r4, r3
 801cb80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801cb84:	464b      	mov	r3, r9
 801cb86:	eb45 0303 	adc.w	r3, r5, r3
 801cb8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801cb8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb92:	685b      	ldr	r3, [r3, #4]
 801cb94:	2200      	movs	r2, #0
 801cb96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801cb9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801cb9e:	f04f 0200 	mov.w	r2, #0
 801cba2:	f04f 0300 	mov.w	r3, #0
 801cba6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801cbaa:	4629      	mov	r1, r5
 801cbac:	008b      	lsls	r3, r1, #2
 801cbae:	4621      	mov	r1, r4
 801cbb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801cbb4:	4621      	mov	r1, r4
 801cbb6:	008a      	lsls	r2, r1, #2
 801cbb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801cbbc:	f7e4 f81c 	bl	8000bf8 <__aeabi_uldivmod>
 801cbc0:	4602      	mov	r2, r0
 801cbc2:	460b      	mov	r3, r1
 801cbc4:	4b60      	ldr	r3, [pc, #384]	; (801cd48 <UART_SetConfig+0x4e4>)
 801cbc6:	fba3 2302 	umull	r2, r3, r3, r2
 801cbca:	095b      	lsrs	r3, r3, #5
 801cbcc:	011c      	lsls	r4, r3, #4
 801cbce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cbd2:	2200      	movs	r2, #0
 801cbd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801cbd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801cbdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801cbe0:	4642      	mov	r2, r8
 801cbe2:	464b      	mov	r3, r9
 801cbe4:	1891      	adds	r1, r2, r2
 801cbe6:	61b9      	str	r1, [r7, #24]
 801cbe8:	415b      	adcs	r3, r3
 801cbea:	61fb      	str	r3, [r7, #28]
 801cbec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801cbf0:	4641      	mov	r1, r8
 801cbf2:	1851      	adds	r1, r2, r1
 801cbf4:	6139      	str	r1, [r7, #16]
 801cbf6:	4649      	mov	r1, r9
 801cbf8:	414b      	adcs	r3, r1
 801cbfa:	617b      	str	r3, [r7, #20]
 801cbfc:	f04f 0200 	mov.w	r2, #0
 801cc00:	f04f 0300 	mov.w	r3, #0
 801cc04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801cc08:	4659      	mov	r1, fp
 801cc0a:	00cb      	lsls	r3, r1, #3
 801cc0c:	4651      	mov	r1, sl
 801cc0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cc12:	4651      	mov	r1, sl
 801cc14:	00ca      	lsls	r2, r1, #3
 801cc16:	4610      	mov	r0, r2
 801cc18:	4619      	mov	r1, r3
 801cc1a:	4603      	mov	r3, r0
 801cc1c:	4642      	mov	r2, r8
 801cc1e:	189b      	adds	r3, r3, r2
 801cc20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801cc24:	464b      	mov	r3, r9
 801cc26:	460a      	mov	r2, r1
 801cc28:	eb42 0303 	adc.w	r3, r2, r3
 801cc2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801cc30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cc34:	685b      	ldr	r3, [r3, #4]
 801cc36:	2200      	movs	r2, #0
 801cc38:	67bb      	str	r3, [r7, #120]	; 0x78
 801cc3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801cc3c:	f04f 0200 	mov.w	r2, #0
 801cc40:	f04f 0300 	mov.w	r3, #0
 801cc44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801cc48:	4649      	mov	r1, r9
 801cc4a:	008b      	lsls	r3, r1, #2
 801cc4c:	4641      	mov	r1, r8
 801cc4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801cc52:	4641      	mov	r1, r8
 801cc54:	008a      	lsls	r2, r1, #2
 801cc56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801cc5a:	f7e3 ffcd 	bl	8000bf8 <__aeabi_uldivmod>
 801cc5e:	4602      	mov	r2, r0
 801cc60:	460b      	mov	r3, r1
 801cc62:	4b39      	ldr	r3, [pc, #228]	; (801cd48 <UART_SetConfig+0x4e4>)
 801cc64:	fba3 1302 	umull	r1, r3, r3, r2
 801cc68:	095b      	lsrs	r3, r3, #5
 801cc6a:	2164      	movs	r1, #100	; 0x64
 801cc6c:	fb01 f303 	mul.w	r3, r1, r3
 801cc70:	1ad3      	subs	r3, r2, r3
 801cc72:	011b      	lsls	r3, r3, #4
 801cc74:	3332      	adds	r3, #50	; 0x32
 801cc76:	4a34      	ldr	r2, [pc, #208]	; (801cd48 <UART_SetConfig+0x4e4>)
 801cc78:	fba2 2303 	umull	r2, r3, r2, r3
 801cc7c:	095b      	lsrs	r3, r3, #5
 801cc7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cc82:	441c      	add	r4, r3
 801cc84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cc88:	2200      	movs	r2, #0
 801cc8a:	673b      	str	r3, [r7, #112]	; 0x70
 801cc8c:	677a      	str	r2, [r7, #116]	; 0x74
 801cc8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801cc92:	4642      	mov	r2, r8
 801cc94:	464b      	mov	r3, r9
 801cc96:	1891      	adds	r1, r2, r2
 801cc98:	60b9      	str	r1, [r7, #8]
 801cc9a:	415b      	adcs	r3, r3
 801cc9c:	60fb      	str	r3, [r7, #12]
 801cc9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cca2:	4641      	mov	r1, r8
 801cca4:	1851      	adds	r1, r2, r1
 801cca6:	6039      	str	r1, [r7, #0]
 801cca8:	4649      	mov	r1, r9
 801ccaa:	414b      	adcs	r3, r1
 801ccac:	607b      	str	r3, [r7, #4]
 801ccae:	f04f 0200 	mov.w	r2, #0
 801ccb2:	f04f 0300 	mov.w	r3, #0
 801ccb6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801ccba:	4659      	mov	r1, fp
 801ccbc:	00cb      	lsls	r3, r1, #3
 801ccbe:	4651      	mov	r1, sl
 801ccc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801ccc4:	4651      	mov	r1, sl
 801ccc6:	00ca      	lsls	r2, r1, #3
 801ccc8:	4610      	mov	r0, r2
 801ccca:	4619      	mov	r1, r3
 801cccc:	4603      	mov	r3, r0
 801ccce:	4642      	mov	r2, r8
 801ccd0:	189b      	adds	r3, r3, r2
 801ccd2:	66bb      	str	r3, [r7, #104]	; 0x68
 801ccd4:	464b      	mov	r3, r9
 801ccd6:	460a      	mov	r2, r1
 801ccd8:	eb42 0303 	adc.w	r3, r2, r3
 801ccdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 801ccde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cce2:	685b      	ldr	r3, [r3, #4]
 801cce4:	2200      	movs	r2, #0
 801cce6:	663b      	str	r3, [r7, #96]	; 0x60
 801cce8:	667a      	str	r2, [r7, #100]	; 0x64
 801ccea:	f04f 0200 	mov.w	r2, #0
 801ccee:	f04f 0300 	mov.w	r3, #0
 801ccf2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801ccf6:	4649      	mov	r1, r9
 801ccf8:	008b      	lsls	r3, r1, #2
 801ccfa:	4641      	mov	r1, r8
 801ccfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801cd00:	4641      	mov	r1, r8
 801cd02:	008a      	lsls	r2, r1, #2
 801cd04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801cd08:	f7e3 ff76 	bl	8000bf8 <__aeabi_uldivmod>
 801cd0c:	4602      	mov	r2, r0
 801cd0e:	460b      	mov	r3, r1
 801cd10:	4b0d      	ldr	r3, [pc, #52]	; (801cd48 <UART_SetConfig+0x4e4>)
 801cd12:	fba3 1302 	umull	r1, r3, r3, r2
 801cd16:	095b      	lsrs	r3, r3, #5
 801cd18:	2164      	movs	r1, #100	; 0x64
 801cd1a:	fb01 f303 	mul.w	r3, r1, r3
 801cd1e:	1ad3      	subs	r3, r2, r3
 801cd20:	011b      	lsls	r3, r3, #4
 801cd22:	3332      	adds	r3, #50	; 0x32
 801cd24:	4a08      	ldr	r2, [pc, #32]	; (801cd48 <UART_SetConfig+0x4e4>)
 801cd26:	fba2 2303 	umull	r2, r3, r2, r3
 801cd2a:	095b      	lsrs	r3, r3, #5
 801cd2c:	f003 020f 	and.w	r2, r3, #15
 801cd30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cd34:	681b      	ldr	r3, [r3, #0]
 801cd36:	4422      	add	r2, r4
 801cd38:	609a      	str	r2, [r3, #8]
}
 801cd3a:	bf00      	nop
 801cd3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801cd40:	46bd      	mov	sp, r7
 801cd42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801cd46:	bf00      	nop
 801cd48:	51eb851f 	.word	0x51eb851f

0801cd4c <pow>:
 801cd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd4e:	ed2d 8b02 	vpush	{d8}
 801cd52:	eeb0 8a40 	vmov.f32	s16, s0
 801cd56:	eef0 8a60 	vmov.f32	s17, s1
 801cd5a:	ec55 4b11 	vmov	r4, r5, d1
 801cd5e:	f000 f883 	bl	801ce68 <__ieee754_pow>
 801cd62:	4622      	mov	r2, r4
 801cd64:	462b      	mov	r3, r5
 801cd66:	4620      	mov	r0, r4
 801cd68:	4629      	mov	r1, r5
 801cd6a:	ec57 6b10 	vmov	r6, r7, d0
 801cd6e:	f7e3 fedd 	bl	8000b2c <__aeabi_dcmpun>
 801cd72:	2800      	cmp	r0, #0
 801cd74:	d13b      	bne.n	801cdee <pow+0xa2>
 801cd76:	ec51 0b18 	vmov	r0, r1, d8
 801cd7a:	2200      	movs	r2, #0
 801cd7c:	2300      	movs	r3, #0
 801cd7e:	f7e3 fea3 	bl	8000ac8 <__aeabi_dcmpeq>
 801cd82:	b1b8      	cbz	r0, 801cdb4 <pow+0x68>
 801cd84:	2200      	movs	r2, #0
 801cd86:	2300      	movs	r3, #0
 801cd88:	4620      	mov	r0, r4
 801cd8a:	4629      	mov	r1, r5
 801cd8c:	f7e3 fe9c 	bl	8000ac8 <__aeabi_dcmpeq>
 801cd90:	2800      	cmp	r0, #0
 801cd92:	d146      	bne.n	801ce22 <pow+0xd6>
 801cd94:	ec45 4b10 	vmov	d0, r4, r5
 801cd98:	f000 fe82 	bl	801daa0 <finite>
 801cd9c:	b338      	cbz	r0, 801cdee <pow+0xa2>
 801cd9e:	2200      	movs	r2, #0
 801cda0:	2300      	movs	r3, #0
 801cda2:	4620      	mov	r0, r4
 801cda4:	4629      	mov	r1, r5
 801cda6:	f7e3 fe99 	bl	8000adc <__aeabi_dcmplt>
 801cdaa:	b300      	cbz	r0, 801cdee <pow+0xa2>
 801cdac:	f000 ff28 	bl	801dc00 <__errno>
 801cdb0:	2322      	movs	r3, #34	; 0x22
 801cdb2:	e01b      	b.n	801cdec <pow+0xa0>
 801cdb4:	ec47 6b10 	vmov	d0, r6, r7
 801cdb8:	f000 fe72 	bl	801daa0 <finite>
 801cdbc:	b9e0      	cbnz	r0, 801cdf8 <pow+0xac>
 801cdbe:	eeb0 0a48 	vmov.f32	s0, s16
 801cdc2:	eef0 0a68 	vmov.f32	s1, s17
 801cdc6:	f000 fe6b 	bl	801daa0 <finite>
 801cdca:	b1a8      	cbz	r0, 801cdf8 <pow+0xac>
 801cdcc:	ec45 4b10 	vmov	d0, r4, r5
 801cdd0:	f000 fe66 	bl	801daa0 <finite>
 801cdd4:	b180      	cbz	r0, 801cdf8 <pow+0xac>
 801cdd6:	4632      	mov	r2, r6
 801cdd8:	463b      	mov	r3, r7
 801cdda:	4630      	mov	r0, r6
 801cddc:	4639      	mov	r1, r7
 801cdde:	f7e3 fea5 	bl	8000b2c <__aeabi_dcmpun>
 801cde2:	2800      	cmp	r0, #0
 801cde4:	d0e2      	beq.n	801cdac <pow+0x60>
 801cde6:	f000 ff0b 	bl	801dc00 <__errno>
 801cdea:	2321      	movs	r3, #33	; 0x21
 801cdec:	6003      	str	r3, [r0, #0]
 801cdee:	ecbd 8b02 	vpop	{d8}
 801cdf2:	ec47 6b10 	vmov	d0, r6, r7
 801cdf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cdf8:	2200      	movs	r2, #0
 801cdfa:	2300      	movs	r3, #0
 801cdfc:	4630      	mov	r0, r6
 801cdfe:	4639      	mov	r1, r7
 801ce00:	f7e3 fe62 	bl	8000ac8 <__aeabi_dcmpeq>
 801ce04:	2800      	cmp	r0, #0
 801ce06:	d0f2      	beq.n	801cdee <pow+0xa2>
 801ce08:	eeb0 0a48 	vmov.f32	s0, s16
 801ce0c:	eef0 0a68 	vmov.f32	s1, s17
 801ce10:	f000 fe46 	bl	801daa0 <finite>
 801ce14:	2800      	cmp	r0, #0
 801ce16:	d0ea      	beq.n	801cdee <pow+0xa2>
 801ce18:	ec45 4b10 	vmov	d0, r4, r5
 801ce1c:	f000 fe40 	bl	801daa0 <finite>
 801ce20:	e7c3      	b.n	801cdaa <pow+0x5e>
 801ce22:	4f01      	ldr	r7, [pc, #4]	; (801ce28 <pow+0xdc>)
 801ce24:	2600      	movs	r6, #0
 801ce26:	e7e2      	b.n	801cdee <pow+0xa2>
 801ce28:	3ff00000 	.word	0x3ff00000

0801ce2c <sqrtf>:
 801ce2c:	b508      	push	{r3, lr}
 801ce2e:	ed2d 8b02 	vpush	{d8}
 801ce32:	eeb0 8a40 	vmov.f32	s16, s0
 801ce36:	f000 fdf7 	bl	801da28 <__ieee754_sqrtf>
 801ce3a:	eeb4 8a48 	vcmp.f32	s16, s16
 801ce3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce42:	d60c      	bvs.n	801ce5e <sqrtf+0x32>
 801ce44:	eddf 8a07 	vldr	s17, [pc, #28]	; 801ce64 <sqrtf+0x38>
 801ce48:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801ce4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce50:	d505      	bpl.n	801ce5e <sqrtf+0x32>
 801ce52:	f000 fed5 	bl	801dc00 <__errno>
 801ce56:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801ce5a:	2321      	movs	r3, #33	; 0x21
 801ce5c:	6003      	str	r3, [r0, #0]
 801ce5e:	ecbd 8b02 	vpop	{d8}
 801ce62:	bd08      	pop	{r3, pc}
 801ce64:	00000000 	.word	0x00000000

0801ce68 <__ieee754_pow>:
 801ce68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce6c:	ed2d 8b06 	vpush	{d8-d10}
 801ce70:	b089      	sub	sp, #36	; 0x24
 801ce72:	ed8d 1b00 	vstr	d1, [sp]
 801ce76:	e9dd 2900 	ldrd	r2, r9, [sp]
 801ce7a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801ce7e:	ea58 0102 	orrs.w	r1, r8, r2
 801ce82:	ec57 6b10 	vmov	r6, r7, d0
 801ce86:	d115      	bne.n	801ceb4 <__ieee754_pow+0x4c>
 801ce88:	19b3      	adds	r3, r6, r6
 801ce8a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801ce8e:	4152      	adcs	r2, r2
 801ce90:	4299      	cmp	r1, r3
 801ce92:	4b89      	ldr	r3, [pc, #548]	; (801d0b8 <__ieee754_pow+0x250>)
 801ce94:	4193      	sbcs	r3, r2
 801ce96:	f080 84d2 	bcs.w	801d83e <__ieee754_pow+0x9d6>
 801ce9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ce9e:	4630      	mov	r0, r6
 801cea0:	4639      	mov	r1, r7
 801cea2:	f7e3 f9f3 	bl	800028c <__adddf3>
 801cea6:	ec41 0b10 	vmov	d0, r0, r1
 801ceaa:	b009      	add	sp, #36	; 0x24
 801ceac:	ecbd 8b06 	vpop	{d8-d10}
 801ceb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ceb4:	4b81      	ldr	r3, [pc, #516]	; (801d0bc <__ieee754_pow+0x254>)
 801ceb6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801ceba:	429c      	cmp	r4, r3
 801cebc:	ee10 aa10 	vmov	sl, s0
 801cec0:	463d      	mov	r5, r7
 801cec2:	dc06      	bgt.n	801ced2 <__ieee754_pow+0x6a>
 801cec4:	d101      	bne.n	801ceca <__ieee754_pow+0x62>
 801cec6:	2e00      	cmp	r6, #0
 801cec8:	d1e7      	bne.n	801ce9a <__ieee754_pow+0x32>
 801ceca:	4598      	cmp	r8, r3
 801cecc:	dc01      	bgt.n	801ced2 <__ieee754_pow+0x6a>
 801cece:	d10f      	bne.n	801cef0 <__ieee754_pow+0x88>
 801ced0:	b172      	cbz	r2, 801cef0 <__ieee754_pow+0x88>
 801ced2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801ced6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801ceda:	ea55 050a 	orrs.w	r5, r5, sl
 801cede:	d1dc      	bne.n	801ce9a <__ieee754_pow+0x32>
 801cee0:	e9dd 3200 	ldrd	r3, r2, [sp]
 801cee4:	18db      	adds	r3, r3, r3
 801cee6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801ceea:	4152      	adcs	r2, r2
 801ceec:	429d      	cmp	r5, r3
 801ceee:	e7d0      	b.n	801ce92 <__ieee754_pow+0x2a>
 801cef0:	2d00      	cmp	r5, #0
 801cef2:	da3b      	bge.n	801cf6c <__ieee754_pow+0x104>
 801cef4:	4b72      	ldr	r3, [pc, #456]	; (801d0c0 <__ieee754_pow+0x258>)
 801cef6:	4598      	cmp	r8, r3
 801cef8:	dc51      	bgt.n	801cf9e <__ieee754_pow+0x136>
 801cefa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801cefe:	4598      	cmp	r8, r3
 801cf00:	f340 84ac 	ble.w	801d85c <__ieee754_pow+0x9f4>
 801cf04:	ea4f 5328 	mov.w	r3, r8, asr #20
 801cf08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801cf0c:	2b14      	cmp	r3, #20
 801cf0e:	dd0f      	ble.n	801cf30 <__ieee754_pow+0xc8>
 801cf10:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801cf14:	fa22 f103 	lsr.w	r1, r2, r3
 801cf18:	fa01 f303 	lsl.w	r3, r1, r3
 801cf1c:	4293      	cmp	r3, r2
 801cf1e:	f040 849d 	bne.w	801d85c <__ieee754_pow+0x9f4>
 801cf22:	f001 0101 	and.w	r1, r1, #1
 801cf26:	f1c1 0302 	rsb	r3, r1, #2
 801cf2a:	9304      	str	r3, [sp, #16]
 801cf2c:	b182      	cbz	r2, 801cf50 <__ieee754_pow+0xe8>
 801cf2e:	e05f      	b.n	801cff0 <__ieee754_pow+0x188>
 801cf30:	2a00      	cmp	r2, #0
 801cf32:	d15b      	bne.n	801cfec <__ieee754_pow+0x184>
 801cf34:	f1c3 0314 	rsb	r3, r3, #20
 801cf38:	fa48 f103 	asr.w	r1, r8, r3
 801cf3c:	fa01 f303 	lsl.w	r3, r1, r3
 801cf40:	4543      	cmp	r3, r8
 801cf42:	f040 8488 	bne.w	801d856 <__ieee754_pow+0x9ee>
 801cf46:	f001 0101 	and.w	r1, r1, #1
 801cf4a:	f1c1 0302 	rsb	r3, r1, #2
 801cf4e:	9304      	str	r3, [sp, #16]
 801cf50:	4b5c      	ldr	r3, [pc, #368]	; (801d0c4 <__ieee754_pow+0x25c>)
 801cf52:	4598      	cmp	r8, r3
 801cf54:	d132      	bne.n	801cfbc <__ieee754_pow+0x154>
 801cf56:	f1b9 0f00 	cmp.w	r9, #0
 801cf5a:	f280 8478 	bge.w	801d84e <__ieee754_pow+0x9e6>
 801cf5e:	4959      	ldr	r1, [pc, #356]	; (801d0c4 <__ieee754_pow+0x25c>)
 801cf60:	4632      	mov	r2, r6
 801cf62:	463b      	mov	r3, r7
 801cf64:	2000      	movs	r0, #0
 801cf66:	f7e3 fc71 	bl	800084c <__aeabi_ddiv>
 801cf6a:	e79c      	b.n	801cea6 <__ieee754_pow+0x3e>
 801cf6c:	2300      	movs	r3, #0
 801cf6e:	9304      	str	r3, [sp, #16]
 801cf70:	2a00      	cmp	r2, #0
 801cf72:	d13d      	bne.n	801cff0 <__ieee754_pow+0x188>
 801cf74:	4b51      	ldr	r3, [pc, #324]	; (801d0bc <__ieee754_pow+0x254>)
 801cf76:	4598      	cmp	r8, r3
 801cf78:	d1ea      	bne.n	801cf50 <__ieee754_pow+0xe8>
 801cf7a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801cf7e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801cf82:	ea53 030a 	orrs.w	r3, r3, sl
 801cf86:	f000 845a 	beq.w	801d83e <__ieee754_pow+0x9d6>
 801cf8a:	4b4f      	ldr	r3, [pc, #316]	; (801d0c8 <__ieee754_pow+0x260>)
 801cf8c:	429c      	cmp	r4, r3
 801cf8e:	dd08      	ble.n	801cfa2 <__ieee754_pow+0x13a>
 801cf90:	f1b9 0f00 	cmp.w	r9, #0
 801cf94:	f2c0 8457 	blt.w	801d846 <__ieee754_pow+0x9de>
 801cf98:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cf9c:	e783      	b.n	801cea6 <__ieee754_pow+0x3e>
 801cf9e:	2302      	movs	r3, #2
 801cfa0:	e7e5      	b.n	801cf6e <__ieee754_pow+0x106>
 801cfa2:	f1b9 0f00 	cmp.w	r9, #0
 801cfa6:	f04f 0000 	mov.w	r0, #0
 801cfaa:	f04f 0100 	mov.w	r1, #0
 801cfae:	f6bf af7a 	bge.w	801cea6 <__ieee754_pow+0x3e>
 801cfb2:	e9dd 0300 	ldrd	r0, r3, [sp]
 801cfb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801cfba:	e774      	b.n	801cea6 <__ieee754_pow+0x3e>
 801cfbc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801cfc0:	d106      	bne.n	801cfd0 <__ieee754_pow+0x168>
 801cfc2:	4632      	mov	r2, r6
 801cfc4:	463b      	mov	r3, r7
 801cfc6:	4630      	mov	r0, r6
 801cfc8:	4639      	mov	r1, r7
 801cfca:	f7e3 fb15 	bl	80005f8 <__aeabi_dmul>
 801cfce:	e76a      	b.n	801cea6 <__ieee754_pow+0x3e>
 801cfd0:	4b3e      	ldr	r3, [pc, #248]	; (801d0cc <__ieee754_pow+0x264>)
 801cfd2:	4599      	cmp	r9, r3
 801cfd4:	d10c      	bne.n	801cff0 <__ieee754_pow+0x188>
 801cfd6:	2d00      	cmp	r5, #0
 801cfd8:	db0a      	blt.n	801cff0 <__ieee754_pow+0x188>
 801cfda:	ec47 6b10 	vmov	d0, r6, r7
 801cfde:	b009      	add	sp, #36	; 0x24
 801cfe0:	ecbd 8b06 	vpop	{d8-d10}
 801cfe4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfe8:	f000 bc6c 	b.w	801d8c4 <__ieee754_sqrt>
 801cfec:	2300      	movs	r3, #0
 801cfee:	9304      	str	r3, [sp, #16]
 801cff0:	ec47 6b10 	vmov	d0, r6, r7
 801cff4:	f000 fd4b 	bl	801da8e <fabs>
 801cff8:	ec51 0b10 	vmov	r0, r1, d0
 801cffc:	f1ba 0f00 	cmp.w	sl, #0
 801d000:	d129      	bne.n	801d056 <__ieee754_pow+0x1ee>
 801d002:	b124      	cbz	r4, 801d00e <__ieee754_pow+0x1a6>
 801d004:	4b2f      	ldr	r3, [pc, #188]	; (801d0c4 <__ieee754_pow+0x25c>)
 801d006:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801d00a:	429a      	cmp	r2, r3
 801d00c:	d123      	bne.n	801d056 <__ieee754_pow+0x1ee>
 801d00e:	f1b9 0f00 	cmp.w	r9, #0
 801d012:	da05      	bge.n	801d020 <__ieee754_pow+0x1b8>
 801d014:	4602      	mov	r2, r0
 801d016:	460b      	mov	r3, r1
 801d018:	2000      	movs	r0, #0
 801d01a:	492a      	ldr	r1, [pc, #168]	; (801d0c4 <__ieee754_pow+0x25c>)
 801d01c:	f7e3 fc16 	bl	800084c <__aeabi_ddiv>
 801d020:	2d00      	cmp	r5, #0
 801d022:	f6bf af40 	bge.w	801cea6 <__ieee754_pow+0x3e>
 801d026:	9b04      	ldr	r3, [sp, #16]
 801d028:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801d02c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801d030:	4323      	orrs	r3, r4
 801d032:	d108      	bne.n	801d046 <__ieee754_pow+0x1de>
 801d034:	4602      	mov	r2, r0
 801d036:	460b      	mov	r3, r1
 801d038:	4610      	mov	r0, r2
 801d03a:	4619      	mov	r1, r3
 801d03c:	f7e3 f924 	bl	8000288 <__aeabi_dsub>
 801d040:	4602      	mov	r2, r0
 801d042:	460b      	mov	r3, r1
 801d044:	e78f      	b.n	801cf66 <__ieee754_pow+0xfe>
 801d046:	9b04      	ldr	r3, [sp, #16]
 801d048:	2b01      	cmp	r3, #1
 801d04a:	f47f af2c 	bne.w	801cea6 <__ieee754_pow+0x3e>
 801d04e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d052:	4619      	mov	r1, r3
 801d054:	e727      	b.n	801cea6 <__ieee754_pow+0x3e>
 801d056:	0feb      	lsrs	r3, r5, #31
 801d058:	3b01      	subs	r3, #1
 801d05a:	9306      	str	r3, [sp, #24]
 801d05c:	9a06      	ldr	r2, [sp, #24]
 801d05e:	9b04      	ldr	r3, [sp, #16]
 801d060:	4313      	orrs	r3, r2
 801d062:	d102      	bne.n	801d06a <__ieee754_pow+0x202>
 801d064:	4632      	mov	r2, r6
 801d066:	463b      	mov	r3, r7
 801d068:	e7e6      	b.n	801d038 <__ieee754_pow+0x1d0>
 801d06a:	4b19      	ldr	r3, [pc, #100]	; (801d0d0 <__ieee754_pow+0x268>)
 801d06c:	4598      	cmp	r8, r3
 801d06e:	f340 80fb 	ble.w	801d268 <__ieee754_pow+0x400>
 801d072:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801d076:	4598      	cmp	r8, r3
 801d078:	4b13      	ldr	r3, [pc, #76]	; (801d0c8 <__ieee754_pow+0x260>)
 801d07a:	dd0c      	ble.n	801d096 <__ieee754_pow+0x22e>
 801d07c:	429c      	cmp	r4, r3
 801d07e:	dc0f      	bgt.n	801d0a0 <__ieee754_pow+0x238>
 801d080:	f1b9 0f00 	cmp.w	r9, #0
 801d084:	da0f      	bge.n	801d0a6 <__ieee754_pow+0x23e>
 801d086:	2000      	movs	r0, #0
 801d088:	b009      	add	sp, #36	; 0x24
 801d08a:	ecbd 8b06 	vpop	{d8-d10}
 801d08e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d092:	f000 bcf3 	b.w	801da7c <__math_oflow>
 801d096:	429c      	cmp	r4, r3
 801d098:	dbf2      	blt.n	801d080 <__ieee754_pow+0x218>
 801d09a:	4b0a      	ldr	r3, [pc, #40]	; (801d0c4 <__ieee754_pow+0x25c>)
 801d09c:	429c      	cmp	r4, r3
 801d09e:	dd19      	ble.n	801d0d4 <__ieee754_pow+0x26c>
 801d0a0:	f1b9 0f00 	cmp.w	r9, #0
 801d0a4:	dcef      	bgt.n	801d086 <__ieee754_pow+0x21e>
 801d0a6:	2000      	movs	r0, #0
 801d0a8:	b009      	add	sp, #36	; 0x24
 801d0aa:	ecbd 8b06 	vpop	{d8-d10}
 801d0ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0b2:	f000 bcda 	b.w	801da6a <__math_uflow>
 801d0b6:	bf00      	nop
 801d0b8:	fff00000 	.word	0xfff00000
 801d0bc:	7ff00000 	.word	0x7ff00000
 801d0c0:	433fffff 	.word	0x433fffff
 801d0c4:	3ff00000 	.word	0x3ff00000
 801d0c8:	3fefffff 	.word	0x3fefffff
 801d0cc:	3fe00000 	.word	0x3fe00000
 801d0d0:	41e00000 	.word	0x41e00000
 801d0d4:	4b60      	ldr	r3, [pc, #384]	; (801d258 <__ieee754_pow+0x3f0>)
 801d0d6:	2200      	movs	r2, #0
 801d0d8:	f7e3 f8d6 	bl	8000288 <__aeabi_dsub>
 801d0dc:	a354      	add	r3, pc, #336	; (adr r3, 801d230 <__ieee754_pow+0x3c8>)
 801d0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0e2:	4604      	mov	r4, r0
 801d0e4:	460d      	mov	r5, r1
 801d0e6:	f7e3 fa87 	bl	80005f8 <__aeabi_dmul>
 801d0ea:	a353      	add	r3, pc, #332	; (adr r3, 801d238 <__ieee754_pow+0x3d0>)
 801d0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0f0:	4606      	mov	r6, r0
 801d0f2:	460f      	mov	r7, r1
 801d0f4:	4620      	mov	r0, r4
 801d0f6:	4629      	mov	r1, r5
 801d0f8:	f7e3 fa7e 	bl	80005f8 <__aeabi_dmul>
 801d0fc:	4b57      	ldr	r3, [pc, #348]	; (801d25c <__ieee754_pow+0x3f4>)
 801d0fe:	4682      	mov	sl, r0
 801d100:	468b      	mov	fp, r1
 801d102:	2200      	movs	r2, #0
 801d104:	4620      	mov	r0, r4
 801d106:	4629      	mov	r1, r5
 801d108:	f7e3 fa76 	bl	80005f8 <__aeabi_dmul>
 801d10c:	4602      	mov	r2, r0
 801d10e:	460b      	mov	r3, r1
 801d110:	a14b      	add	r1, pc, #300	; (adr r1, 801d240 <__ieee754_pow+0x3d8>)
 801d112:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d116:	f7e3 f8b7 	bl	8000288 <__aeabi_dsub>
 801d11a:	4622      	mov	r2, r4
 801d11c:	462b      	mov	r3, r5
 801d11e:	f7e3 fa6b 	bl	80005f8 <__aeabi_dmul>
 801d122:	4602      	mov	r2, r0
 801d124:	460b      	mov	r3, r1
 801d126:	2000      	movs	r0, #0
 801d128:	494d      	ldr	r1, [pc, #308]	; (801d260 <__ieee754_pow+0x3f8>)
 801d12a:	f7e3 f8ad 	bl	8000288 <__aeabi_dsub>
 801d12e:	4622      	mov	r2, r4
 801d130:	4680      	mov	r8, r0
 801d132:	4689      	mov	r9, r1
 801d134:	462b      	mov	r3, r5
 801d136:	4620      	mov	r0, r4
 801d138:	4629      	mov	r1, r5
 801d13a:	f7e3 fa5d 	bl	80005f8 <__aeabi_dmul>
 801d13e:	4602      	mov	r2, r0
 801d140:	460b      	mov	r3, r1
 801d142:	4640      	mov	r0, r8
 801d144:	4649      	mov	r1, r9
 801d146:	f7e3 fa57 	bl	80005f8 <__aeabi_dmul>
 801d14a:	a33f      	add	r3, pc, #252	; (adr r3, 801d248 <__ieee754_pow+0x3e0>)
 801d14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d150:	f7e3 fa52 	bl	80005f8 <__aeabi_dmul>
 801d154:	4602      	mov	r2, r0
 801d156:	460b      	mov	r3, r1
 801d158:	4650      	mov	r0, sl
 801d15a:	4659      	mov	r1, fp
 801d15c:	f7e3 f894 	bl	8000288 <__aeabi_dsub>
 801d160:	4602      	mov	r2, r0
 801d162:	460b      	mov	r3, r1
 801d164:	4680      	mov	r8, r0
 801d166:	4689      	mov	r9, r1
 801d168:	4630      	mov	r0, r6
 801d16a:	4639      	mov	r1, r7
 801d16c:	f7e3 f88e 	bl	800028c <__adddf3>
 801d170:	2000      	movs	r0, #0
 801d172:	4632      	mov	r2, r6
 801d174:	463b      	mov	r3, r7
 801d176:	4604      	mov	r4, r0
 801d178:	460d      	mov	r5, r1
 801d17a:	f7e3 f885 	bl	8000288 <__aeabi_dsub>
 801d17e:	4602      	mov	r2, r0
 801d180:	460b      	mov	r3, r1
 801d182:	4640      	mov	r0, r8
 801d184:	4649      	mov	r1, r9
 801d186:	f7e3 f87f 	bl	8000288 <__aeabi_dsub>
 801d18a:	9b04      	ldr	r3, [sp, #16]
 801d18c:	9a06      	ldr	r2, [sp, #24]
 801d18e:	3b01      	subs	r3, #1
 801d190:	4313      	orrs	r3, r2
 801d192:	4682      	mov	sl, r0
 801d194:	468b      	mov	fp, r1
 801d196:	f040 81e7 	bne.w	801d568 <__ieee754_pow+0x700>
 801d19a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801d250 <__ieee754_pow+0x3e8>
 801d19e:	eeb0 8a47 	vmov.f32	s16, s14
 801d1a2:	eef0 8a67 	vmov.f32	s17, s15
 801d1a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 801d1aa:	2600      	movs	r6, #0
 801d1ac:	4632      	mov	r2, r6
 801d1ae:	463b      	mov	r3, r7
 801d1b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d1b4:	f7e3 f868 	bl	8000288 <__aeabi_dsub>
 801d1b8:	4622      	mov	r2, r4
 801d1ba:	462b      	mov	r3, r5
 801d1bc:	f7e3 fa1c 	bl	80005f8 <__aeabi_dmul>
 801d1c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d1c4:	4680      	mov	r8, r0
 801d1c6:	4689      	mov	r9, r1
 801d1c8:	4650      	mov	r0, sl
 801d1ca:	4659      	mov	r1, fp
 801d1cc:	f7e3 fa14 	bl	80005f8 <__aeabi_dmul>
 801d1d0:	4602      	mov	r2, r0
 801d1d2:	460b      	mov	r3, r1
 801d1d4:	4640      	mov	r0, r8
 801d1d6:	4649      	mov	r1, r9
 801d1d8:	f7e3 f858 	bl	800028c <__adddf3>
 801d1dc:	4632      	mov	r2, r6
 801d1de:	463b      	mov	r3, r7
 801d1e0:	4680      	mov	r8, r0
 801d1e2:	4689      	mov	r9, r1
 801d1e4:	4620      	mov	r0, r4
 801d1e6:	4629      	mov	r1, r5
 801d1e8:	f7e3 fa06 	bl	80005f8 <__aeabi_dmul>
 801d1ec:	460b      	mov	r3, r1
 801d1ee:	4604      	mov	r4, r0
 801d1f0:	460d      	mov	r5, r1
 801d1f2:	4602      	mov	r2, r0
 801d1f4:	4649      	mov	r1, r9
 801d1f6:	4640      	mov	r0, r8
 801d1f8:	f7e3 f848 	bl	800028c <__adddf3>
 801d1fc:	4b19      	ldr	r3, [pc, #100]	; (801d264 <__ieee754_pow+0x3fc>)
 801d1fe:	4299      	cmp	r1, r3
 801d200:	ec45 4b19 	vmov	d9, r4, r5
 801d204:	4606      	mov	r6, r0
 801d206:	460f      	mov	r7, r1
 801d208:	468b      	mov	fp, r1
 801d20a:	f340 82f1 	ble.w	801d7f0 <__ieee754_pow+0x988>
 801d20e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801d212:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801d216:	4303      	orrs	r3, r0
 801d218:	f000 81e4 	beq.w	801d5e4 <__ieee754_pow+0x77c>
 801d21c:	ec51 0b18 	vmov	r0, r1, d8
 801d220:	2200      	movs	r2, #0
 801d222:	2300      	movs	r3, #0
 801d224:	f7e3 fc5a 	bl	8000adc <__aeabi_dcmplt>
 801d228:	3800      	subs	r0, #0
 801d22a:	bf18      	it	ne
 801d22c:	2001      	movne	r0, #1
 801d22e:	e72b      	b.n	801d088 <__ieee754_pow+0x220>
 801d230:	60000000 	.word	0x60000000
 801d234:	3ff71547 	.word	0x3ff71547
 801d238:	f85ddf44 	.word	0xf85ddf44
 801d23c:	3e54ae0b 	.word	0x3e54ae0b
 801d240:	55555555 	.word	0x55555555
 801d244:	3fd55555 	.word	0x3fd55555
 801d248:	652b82fe 	.word	0x652b82fe
 801d24c:	3ff71547 	.word	0x3ff71547
 801d250:	00000000 	.word	0x00000000
 801d254:	bff00000 	.word	0xbff00000
 801d258:	3ff00000 	.word	0x3ff00000
 801d25c:	3fd00000 	.word	0x3fd00000
 801d260:	3fe00000 	.word	0x3fe00000
 801d264:	408fffff 	.word	0x408fffff
 801d268:	4bd5      	ldr	r3, [pc, #852]	; (801d5c0 <__ieee754_pow+0x758>)
 801d26a:	402b      	ands	r3, r5
 801d26c:	2200      	movs	r2, #0
 801d26e:	b92b      	cbnz	r3, 801d27c <__ieee754_pow+0x414>
 801d270:	4bd4      	ldr	r3, [pc, #848]	; (801d5c4 <__ieee754_pow+0x75c>)
 801d272:	f7e3 f9c1 	bl	80005f8 <__aeabi_dmul>
 801d276:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801d27a:	460c      	mov	r4, r1
 801d27c:	1523      	asrs	r3, r4, #20
 801d27e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d282:	4413      	add	r3, r2
 801d284:	9305      	str	r3, [sp, #20]
 801d286:	4bd0      	ldr	r3, [pc, #832]	; (801d5c8 <__ieee754_pow+0x760>)
 801d288:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801d28c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801d290:	429c      	cmp	r4, r3
 801d292:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d296:	dd08      	ble.n	801d2aa <__ieee754_pow+0x442>
 801d298:	4bcc      	ldr	r3, [pc, #816]	; (801d5cc <__ieee754_pow+0x764>)
 801d29a:	429c      	cmp	r4, r3
 801d29c:	f340 8162 	ble.w	801d564 <__ieee754_pow+0x6fc>
 801d2a0:	9b05      	ldr	r3, [sp, #20]
 801d2a2:	3301      	adds	r3, #1
 801d2a4:	9305      	str	r3, [sp, #20]
 801d2a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801d2aa:	2400      	movs	r4, #0
 801d2ac:	00e3      	lsls	r3, r4, #3
 801d2ae:	9307      	str	r3, [sp, #28]
 801d2b0:	4bc7      	ldr	r3, [pc, #796]	; (801d5d0 <__ieee754_pow+0x768>)
 801d2b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d2b6:	ed93 7b00 	vldr	d7, [r3]
 801d2ba:	4629      	mov	r1, r5
 801d2bc:	ec53 2b17 	vmov	r2, r3, d7
 801d2c0:	eeb0 9a47 	vmov.f32	s18, s14
 801d2c4:	eef0 9a67 	vmov.f32	s19, s15
 801d2c8:	4682      	mov	sl, r0
 801d2ca:	f7e2 ffdd 	bl	8000288 <__aeabi_dsub>
 801d2ce:	4652      	mov	r2, sl
 801d2d0:	4606      	mov	r6, r0
 801d2d2:	460f      	mov	r7, r1
 801d2d4:	462b      	mov	r3, r5
 801d2d6:	ec51 0b19 	vmov	r0, r1, d9
 801d2da:	f7e2 ffd7 	bl	800028c <__adddf3>
 801d2de:	4602      	mov	r2, r0
 801d2e0:	460b      	mov	r3, r1
 801d2e2:	2000      	movs	r0, #0
 801d2e4:	49bb      	ldr	r1, [pc, #748]	; (801d5d4 <__ieee754_pow+0x76c>)
 801d2e6:	f7e3 fab1 	bl	800084c <__aeabi_ddiv>
 801d2ea:	ec41 0b1a 	vmov	d10, r0, r1
 801d2ee:	4602      	mov	r2, r0
 801d2f0:	460b      	mov	r3, r1
 801d2f2:	4630      	mov	r0, r6
 801d2f4:	4639      	mov	r1, r7
 801d2f6:	f7e3 f97f 	bl	80005f8 <__aeabi_dmul>
 801d2fa:	2300      	movs	r3, #0
 801d2fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d300:	9302      	str	r3, [sp, #8]
 801d302:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d306:	46ab      	mov	fp, r5
 801d308:	106d      	asrs	r5, r5, #1
 801d30a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801d30e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801d312:	ec41 0b18 	vmov	d8, r0, r1
 801d316:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801d31a:	2200      	movs	r2, #0
 801d31c:	4640      	mov	r0, r8
 801d31e:	4649      	mov	r1, r9
 801d320:	4614      	mov	r4, r2
 801d322:	461d      	mov	r5, r3
 801d324:	f7e3 f968 	bl	80005f8 <__aeabi_dmul>
 801d328:	4602      	mov	r2, r0
 801d32a:	460b      	mov	r3, r1
 801d32c:	4630      	mov	r0, r6
 801d32e:	4639      	mov	r1, r7
 801d330:	f7e2 ffaa 	bl	8000288 <__aeabi_dsub>
 801d334:	ec53 2b19 	vmov	r2, r3, d9
 801d338:	4606      	mov	r6, r0
 801d33a:	460f      	mov	r7, r1
 801d33c:	4620      	mov	r0, r4
 801d33e:	4629      	mov	r1, r5
 801d340:	f7e2 ffa2 	bl	8000288 <__aeabi_dsub>
 801d344:	4602      	mov	r2, r0
 801d346:	460b      	mov	r3, r1
 801d348:	4650      	mov	r0, sl
 801d34a:	4659      	mov	r1, fp
 801d34c:	f7e2 ff9c 	bl	8000288 <__aeabi_dsub>
 801d350:	4642      	mov	r2, r8
 801d352:	464b      	mov	r3, r9
 801d354:	f7e3 f950 	bl	80005f8 <__aeabi_dmul>
 801d358:	4602      	mov	r2, r0
 801d35a:	460b      	mov	r3, r1
 801d35c:	4630      	mov	r0, r6
 801d35e:	4639      	mov	r1, r7
 801d360:	f7e2 ff92 	bl	8000288 <__aeabi_dsub>
 801d364:	ec53 2b1a 	vmov	r2, r3, d10
 801d368:	f7e3 f946 	bl	80005f8 <__aeabi_dmul>
 801d36c:	ec53 2b18 	vmov	r2, r3, d8
 801d370:	ec41 0b19 	vmov	d9, r0, r1
 801d374:	ec51 0b18 	vmov	r0, r1, d8
 801d378:	f7e3 f93e 	bl	80005f8 <__aeabi_dmul>
 801d37c:	a37c      	add	r3, pc, #496	; (adr r3, 801d570 <__ieee754_pow+0x708>)
 801d37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d382:	4604      	mov	r4, r0
 801d384:	460d      	mov	r5, r1
 801d386:	f7e3 f937 	bl	80005f8 <__aeabi_dmul>
 801d38a:	a37b      	add	r3, pc, #492	; (adr r3, 801d578 <__ieee754_pow+0x710>)
 801d38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d390:	f7e2 ff7c 	bl	800028c <__adddf3>
 801d394:	4622      	mov	r2, r4
 801d396:	462b      	mov	r3, r5
 801d398:	f7e3 f92e 	bl	80005f8 <__aeabi_dmul>
 801d39c:	a378      	add	r3, pc, #480	; (adr r3, 801d580 <__ieee754_pow+0x718>)
 801d39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3a2:	f7e2 ff73 	bl	800028c <__adddf3>
 801d3a6:	4622      	mov	r2, r4
 801d3a8:	462b      	mov	r3, r5
 801d3aa:	f7e3 f925 	bl	80005f8 <__aeabi_dmul>
 801d3ae:	a376      	add	r3, pc, #472	; (adr r3, 801d588 <__ieee754_pow+0x720>)
 801d3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3b4:	f7e2 ff6a 	bl	800028c <__adddf3>
 801d3b8:	4622      	mov	r2, r4
 801d3ba:	462b      	mov	r3, r5
 801d3bc:	f7e3 f91c 	bl	80005f8 <__aeabi_dmul>
 801d3c0:	a373      	add	r3, pc, #460	; (adr r3, 801d590 <__ieee754_pow+0x728>)
 801d3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3c6:	f7e2 ff61 	bl	800028c <__adddf3>
 801d3ca:	4622      	mov	r2, r4
 801d3cc:	462b      	mov	r3, r5
 801d3ce:	f7e3 f913 	bl	80005f8 <__aeabi_dmul>
 801d3d2:	a371      	add	r3, pc, #452	; (adr r3, 801d598 <__ieee754_pow+0x730>)
 801d3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3d8:	f7e2 ff58 	bl	800028c <__adddf3>
 801d3dc:	4622      	mov	r2, r4
 801d3de:	4606      	mov	r6, r0
 801d3e0:	460f      	mov	r7, r1
 801d3e2:	462b      	mov	r3, r5
 801d3e4:	4620      	mov	r0, r4
 801d3e6:	4629      	mov	r1, r5
 801d3e8:	f7e3 f906 	bl	80005f8 <__aeabi_dmul>
 801d3ec:	4602      	mov	r2, r0
 801d3ee:	460b      	mov	r3, r1
 801d3f0:	4630      	mov	r0, r6
 801d3f2:	4639      	mov	r1, r7
 801d3f4:	f7e3 f900 	bl	80005f8 <__aeabi_dmul>
 801d3f8:	4642      	mov	r2, r8
 801d3fa:	4604      	mov	r4, r0
 801d3fc:	460d      	mov	r5, r1
 801d3fe:	464b      	mov	r3, r9
 801d400:	ec51 0b18 	vmov	r0, r1, d8
 801d404:	f7e2 ff42 	bl	800028c <__adddf3>
 801d408:	ec53 2b19 	vmov	r2, r3, d9
 801d40c:	f7e3 f8f4 	bl	80005f8 <__aeabi_dmul>
 801d410:	4622      	mov	r2, r4
 801d412:	462b      	mov	r3, r5
 801d414:	f7e2 ff3a 	bl	800028c <__adddf3>
 801d418:	4642      	mov	r2, r8
 801d41a:	4682      	mov	sl, r0
 801d41c:	468b      	mov	fp, r1
 801d41e:	464b      	mov	r3, r9
 801d420:	4640      	mov	r0, r8
 801d422:	4649      	mov	r1, r9
 801d424:	f7e3 f8e8 	bl	80005f8 <__aeabi_dmul>
 801d428:	4b6b      	ldr	r3, [pc, #428]	; (801d5d8 <__ieee754_pow+0x770>)
 801d42a:	2200      	movs	r2, #0
 801d42c:	4606      	mov	r6, r0
 801d42e:	460f      	mov	r7, r1
 801d430:	f7e2 ff2c 	bl	800028c <__adddf3>
 801d434:	4652      	mov	r2, sl
 801d436:	465b      	mov	r3, fp
 801d438:	f7e2 ff28 	bl	800028c <__adddf3>
 801d43c:	2000      	movs	r0, #0
 801d43e:	4604      	mov	r4, r0
 801d440:	460d      	mov	r5, r1
 801d442:	4602      	mov	r2, r0
 801d444:	460b      	mov	r3, r1
 801d446:	4640      	mov	r0, r8
 801d448:	4649      	mov	r1, r9
 801d44a:	f7e3 f8d5 	bl	80005f8 <__aeabi_dmul>
 801d44e:	4b62      	ldr	r3, [pc, #392]	; (801d5d8 <__ieee754_pow+0x770>)
 801d450:	4680      	mov	r8, r0
 801d452:	4689      	mov	r9, r1
 801d454:	2200      	movs	r2, #0
 801d456:	4620      	mov	r0, r4
 801d458:	4629      	mov	r1, r5
 801d45a:	f7e2 ff15 	bl	8000288 <__aeabi_dsub>
 801d45e:	4632      	mov	r2, r6
 801d460:	463b      	mov	r3, r7
 801d462:	f7e2 ff11 	bl	8000288 <__aeabi_dsub>
 801d466:	4602      	mov	r2, r0
 801d468:	460b      	mov	r3, r1
 801d46a:	4650      	mov	r0, sl
 801d46c:	4659      	mov	r1, fp
 801d46e:	f7e2 ff0b 	bl	8000288 <__aeabi_dsub>
 801d472:	ec53 2b18 	vmov	r2, r3, d8
 801d476:	f7e3 f8bf 	bl	80005f8 <__aeabi_dmul>
 801d47a:	4622      	mov	r2, r4
 801d47c:	4606      	mov	r6, r0
 801d47e:	460f      	mov	r7, r1
 801d480:	462b      	mov	r3, r5
 801d482:	ec51 0b19 	vmov	r0, r1, d9
 801d486:	f7e3 f8b7 	bl	80005f8 <__aeabi_dmul>
 801d48a:	4602      	mov	r2, r0
 801d48c:	460b      	mov	r3, r1
 801d48e:	4630      	mov	r0, r6
 801d490:	4639      	mov	r1, r7
 801d492:	f7e2 fefb 	bl	800028c <__adddf3>
 801d496:	4606      	mov	r6, r0
 801d498:	460f      	mov	r7, r1
 801d49a:	4602      	mov	r2, r0
 801d49c:	460b      	mov	r3, r1
 801d49e:	4640      	mov	r0, r8
 801d4a0:	4649      	mov	r1, r9
 801d4a2:	f7e2 fef3 	bl	800028c <__adddf3>
 801d4a6:	a33e      	add	r3, pc, #248	; (adr r3, 801d5a0 <__ieee754_pow+0x738>)
 801d4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4ac:	2000      	movs	r0, #0
 801d4ae:	4604      	mov	r4, r0
 801d4b0:	460d      	mov	r5, r1
 801d4b2:	f7e3 f8a1 	bl	80005f8 <__aeabi_dmul>
 801d4b6:	4642      	mov	r2, r8
 801d4b8:	ec41 0b18 	vmov	d8, r0, r1
 801d4bc:	464b      	mov	r3, r9
 801d4be:	4620      	mov	r0, r4
 801d4c0:	4629      	mov	r1, r5
 801d4c2:	f7e2 fee1 	bl	8000288 <__aeabi_dsub>
 801d4c6:	4602      	mov	r2, r0
 801d4c8:	460b      	mov	r3, r1
 801d4ca:	4630      	mov	r0, r6
 801d4cc:	4639      	mov	r1, r7
 801d4ce:	f7e2 fedb 	bl	8000288 <__aeabi_dsub>
 801d4d2:	a335      	add	r3, pc, #212	; (adr r3, 801d5a8 <__ieee754_pow+0x740>)
 801d4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4d8:	f7e3 f88e 	bl	80005f8 <__aeabi_dmul>
 801d4dc:	a334      	add	r3, pc, #208	; (adr r3, 801d5b0 <__ieee754_pow+0x748>)
 801d4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4e2:	4606      	mov	r6, r0
 801d4e4:	460f      	mov	r7, r1
 801d4e6:	4620      	mov	r0, r4
 801d4e8:	4629      	mov	r1, r5
 801d4ea:	f7e3 f885 	bl	80005f8 <__aeabi_dmul>
 801d4ee:	4602      	mov	r2, r0
 801d4f0:	460b      	mov	r3, r1
 801d4f2:	4630      	mov	r0, r6
 801d4f4:	4639      	mov	r1, r7
 801d4f6:	f7e2 fec9 	bl	800028c <__adddf3>
 801d4fa:	9a07      	ldr	r2, [sp, #28]
 801d4fc:	4b37      	ldr	r3, [pc, #220]	; (801d5dc <__ieee754_pow+0x774>)
 801d4fe:	4413      	add	r3, r2
 801d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d504:	f7e2 fec2 	bl	800028c <__adddf3>
 801d508:	4682      	mov	sl, r0
 801d50a:	9805      	ldr	r0, [sp, #20]
 801d50c:	468b      	mov	fp, r1
 801d50e:	f7e3 f809 	bl	8000524 <__aeabi_i2d>
 801d512:	9a07      	ldr	r2, [sp, #28]
 801d514:	4b32      	ldr	r3, [pc, #200]	; (801d5e0 <__ieee754_pow+0x778>)
 801d516:	4413      	add	r3, r2
 801d518:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d51c:	4606      	mov	r6, r0
 801d51e:	460f      	mov	r7, r1
 801d520:	4652      	mov	r2, sl
 801d522:	465b      	mov	r3, fp
 801d524:	ec51 0b18 	vmov	r0, r1, d8
 801d528:	f7e2 feb0 	bl	800028c <__adddf3>
 801d52c:	4642      	mov	r2, r8
 801d52e:	464b      	mov	r3, r9
 801d530:	f7e2 feac 	bl	800028c <__adddf3>
 801d534:	4632      	mov	r2, r6
 801d536:	463b      	mov	r3, r7
 801d538:	f7e2 fea8 	bl	800028c <__adddf3>
 801d53c:	2000      	movs	r0, #0
 801d53e:	4632      	mov	r2, r6
 801d540:	463b      	mov	r3, r7
 801d542:	4604      	mov	r4, r0
 801d544:	460d      	mov	r5, r1
 801d546:	f7e2 fe9f 	bl	8000288 <__aeabi_dsub>
 801d54a:	4642      	mov	r2, r8
 801d54c:	464b      	mov	r3, r9
 801d54e:	f7e2 fe9b 	bl	8000288 <__aeabi_dsub>
 801d552:	ec53 2b18 	vmov	r2, r3, d8
 801d556:	f7e2 fe97 	bl	8000288 <__aeabi_dsub>
 801d55a:	4602      	mov	r2, r0
 801d55c:	460b      	mov	r3, r1
 801d55e:	4650      	mov	r0, sl
 801d560:	4659      	mov	r1, fp
 801d562:	e610      	b.n	801d186 <__ieee754_pow+0x31e>
 801d564:	2401      	movs	r4, #1
 801d566:	e6a1      	b.n	801d2ac <__ieee754_pow+0x444>
 801d568:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801d5b8 <__ieee754_pow+0x750>
 801d56c:	e617      	b.n	801d19e <__ieee754_pow+0x336>
 801d56e:	bf00      	nop
 801d570:	4a454eef 	.word	0x4a454eef
 801d574:	3fca7e28 	.word	0x3fca7e28
 801d578:	93c9db65 	.word	0x93c9db65
 801d57c:	3fcd864a 	.word	0x3fcd864a
 801d580:	a91d4101 	.word	0xa91d4101
 801d584:	3fd17460 	.word	0x3fd17460
 801d588:	518f264d 	.word	0x518f264d
 801d58c:	3fd55555 	.word	0x3fd55555
 801d590:	db6fabff 	.word	0xdb6fabff
 801d594:	3fdb6db6 	.word	0x3fdb6db6
 801d598:	33333303 	.word	0x33333303
 801d59c:	3fe33333 	.word	0x3fe33333
 801d5a0:	e0000000 	.word	0xe0000000
 801d5a4:	3feec709 	.word	0x3feec709
 801d5a8:	dc3a03fd 	.word	0xdc3a03fd
 801d5ac:	3feec709 	.word	0x3feec709
 801d5b0:	145b01f5 	.word	0x145b01f5
 801d5b4:	be3e2fe0 	.word	0xbe3e2fe0
 801d5b8:	00000000 	.word	0x00000000
 801d5bc:	3ff00000 	.word	0x3ff00000
 801d5c0:	7ff00000 	.word	0x7ff00000
 801d5c4:	43400000 	.word	0x43400000
 801d5c8:	0003988e 	.word	0x0003988e
 801d5cc:	000bb679 	.word	0x000bb679
 801d5d0:	08029c40 	.word	0x08029c40
 801d5d4:	3ff00000 	.word	0x3ff00000
 801d5d8:	40080000 	.word	0x40080000
 801d5dc:	08029c60 	.word	0x08029c60
 801d5e0:	08029c50 	.word	0x08029c50
 801d5e4:	a3b5      	add	r3, pc, #724	; (adr r3, 801d8bc <__ieee754_pow+0xa54>)
 801d5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5ea:	4640      	mov	r0, r8
 801d5ec:	4649      	mov	r1, r9
 801d5ee:	f7e2 fe4d 	bl	800028c <__adddf3>
 801d5f2:	4622      	mov	r2, r4
 801d5f4:	ec41 0b1a 	vmov	d10, r0, r1
 801d5f8:	462b      	mov	r3, r5
 801d5fa:	4630      	mov	r0, r6
 801d5fc:	4639      	mov	r1, r7
 801d5fe:	f7e2 fe43 	bl	8000288 <__aeabi_dsub>
 801d602:	4602      	mov	r2, r0
 801d604:	460b      	mov	r3, r1
 801d606:	ec51 0b1a 	vmov	r0, r1, d10
 801d60a:	f7e3 fa85 	bl	8000b18 <__aeabi_dcmpgt>
 801d60e:	2800      	cmp	r0, #0
 801d610:	f47f ae04 	bne.w	801d21c <__ieee754_pow+0x3b4>
 801d614:	4aa4      	ldr	r2, [pc, #656]	; (801d8a8 <__ieee754_pow+0xa40>)
 801d616:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d61a:	4293      	cmp	r3, r2
 801d61c:	f340 8108 	ble.w	801d830 <__ieee754_pow+0x9c8>
 801d620:	151b      	asrs	r3, r3, #20
 801d622:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801d626:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801d62a:	fa4a f303 	asr.w	r3, sl, r3
 801d62e:	445b      	add	r3, fp
 801d630:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801d634:	4e9d      	ldr	r6, [pc, #628]	; (801d8ac <__ieee754_pow+0xa44>)
 801d636:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801d63a:	4116      	asrs	r6, r2
 801d63c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801d640:	2000      	movs	r0, #0
 801d642:	ea23 0106 	bic.w	r1, r3, r6
 801d646:	f1c2 0214 	rsb	r2, r2, #20
 801d64a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801d64e:	fa4a fa02 	asr.w	sl, sl, r2
 801d652:	f1bb 0f00 	cmp.w	fp, #0
 801d656:	4602      	mov	r2, r0
 801d658:	460b      	mov	r3, r1
 801d65a:	4620      	mov	r0, r4
 801d65c:	4629      	mov	r1, r5
 801d65e:	bfb8      	it	lt
 801d660:	f1ca 0a00 	rsblt	sl, sl, #0
 801d664:	f7e2 fe10 	bl	8000288 <__aeabi_dsub>
 801d668:	ec41 0b19 	vmov	d9, r0, r1
 801d66c:	4642      	mov	r2, r8
 801d66e:	464b      	mov	r3, r9
 801d670:	ec51 0b19 	vmov	r0, r1, d9
 801d674:	f7e2 fe0a 	bl	800028c <__adddf3>
 801d678:	a37b      	add	r3, pc, #492	; (adr r3, 801d868 <__ieee754_pow+0xa00>)
 801d67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d67e:	2000      	movs	r0, #0
 801d680:	4604      	mov	r4, r0
 801d682:	460d      	mov	r5, r1
 801d684:	f7e2 ffb8 	bl	80005f8 <__aeabi_dmul>
 801d688:	ec53 2b19 	vmov	r2, r3, d9
 801d68c:	4606      	mov	r6, r0
 801d68e:	460f      	mov	r7, r1
 801d690:	4620      	mov	r0, r4
 801d692:	4629      	mov	r1, r5
 801d694:	f7e2 fdf8 	bl	8000288 <__aeabi_dsub>
 801d698:	4602      	mov	r2, r0
 801d69a:	460b      	mov	r3, r1
 801d69c:	4640      	mov	r0, r8
 801d69e:	4649      	mov	r1, r9
 801d6a0:	f7e2 fdf2 	bl	8000288 <__aeabi_dsub>
 801d6a4:	a372      	add	r3, pc, #456	; (adr r3, 801d870 <__ieee754_pow+0xa08>)
 801d6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6aa:	f7e2 ffa5 	bl	80005f8 <__aeabi_dmul>
 801d6ae:	a372      	add	r3, pc, #456	; (adr r3, 801d878 <__ieee754_pow+0xa10>)
 801d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6b4:	4680      	mov	r8, r0
 801d6b6:	4689      	mov	r9, r1
 801d6b8:	4620      	mov	r0, r4
 801d6ba:	4629      	mov	r1, r5
 801d6bc:	f7e2 ff9c 	bl	80005f8 <__aeabi_dmul>
 801d6c0:	4602      	mov	r2, r0
 801d6c2:	460b      	mov	r3, r1
 801d6c4:	4640      	mov	r0, r8
 801d6c6:	4649      	mov	r1, r9
 801d6c8:	f7e2 fde0 	bl	800028c <__adddf3>
 801d6cc:	4604      	mov	r4, r0
 801d6ce:	460d      	mov	r5, r1
 801d6d0:	4602      	mov	r2, r0
 801d6d2:	460b      	mov	r3, r1
 801d6d4:	4630      	mov	r0, r6
 801d6d6:	4639      	mov	r1, r7
 801d6d8:	f7e2 fdd8 	bl	800028c <__adddf3>
 801d6dc:	4632      	mov	r2, r6
 801d6de:	463b      	mov	r3, r7
 801d6e0:	4680      	mov	r8, r0
 801d6e2:	4689      	mov	r9, r1
 801d6e4:	f7e2 fdd0 	bl	8000288 <__aeabi_dsub>
 801d6e8:	4602      	mov	r2, r0
 801d6ea:	460b      	mov	r3, r1
 801d6ec:	4620      	mov	r0, r4
 801d6ee:	4629      	mov	r1, r5
 801d6f0:	f7e2 fdca 	bl	8000288 <__aeabi_dsub>
 801d6f4:	4642      	mov	r2, r8
 801d6f6:	4606      	mov	r6, r0
 801d6f8:	460f      	mov	r7, r1
 801d6fa:	464b      	mov	r3, r9
 801d6fc:	4640      	mov	r0, r8
 801d6fe:	4649      	mov	r1, r9
 801d700:	f7e2 ff7a 	bl	80005f8 <__aeabi_dmul>
 801d704:	a35e      	add	r3, pc, #376	; (adr r3, 801d880 <__ieee754_pow+0xa18>)
 801d706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d70a:	4604      	mov	r4, r0
 801d70c:	460d      	mov	r5, r1
 801d70e:	f7e2 ff73 	bl	80005f8 <__aeabi_dmul>
 801d712:	a35d      	add	r3, pc, #372	; (adr r3, 801d888 <__ieee754_pow+0xa20>)
 801d714:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d718:	f7e2 fdb6 	bl	8000288 <__aeabi_dsub>
 801d71c:	4622      	mov	r2, r4
 801d71e:	462b      	mov	r3, r5
 801d720:	f7e2 ff6a 	bl	80005f8 <__aeabi_dmul>
 801d724:	a35a      	add	r3, pc, #360	; (adr r3, 801d890 <__ieee754_pow+0xa28>)
 801d726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d72a:	f7e2 fdaf 	bl	800028c <__adddf3>
 801d72e:	4622      	mov	r2, r4
 801d730:	462b      	mov	r3, r5
 801d732:	f7e2 ff61 	bl	80005f8 <__aeabi_dmul>
 801d736:	a358      	add	r3, pc, #352	; (adr r3, 801d898 <__ieee754_pow+0xa30>)
 801d738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d73c:	f7e2 fda4 	bl	8000288 <__aeabi_dsub>
 801d740:	4622      	mov	r2, r4
 801d742:	462b      	mov	r3, r5
 801d744:	f7e2 ff58 	bl	80005f8 <__aeabi_dmul>
 801d748:	a355      	add	r3, pc, #340	; (adr r3, 801d8a0 <__ieee754_pow+0xa38>)
 801d74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d74e:	f7e2 fd9d 	bl	800028c <__adddf3>
 801d752:	4622      	mov	r2, r4
 801d754:	462b      	mov	r3, r5
 801d756:	f7e2 ff4f 	bl	80005f8 <__aeabi_dmul>
 801d75a:	4602      	mov	r2, r0
 801d75c:	460b      	mov	r3, r1
 801d75e:	4640      	mov	r0, r8
 801d760:	4649      	mov	r1, r9
 801d762:	f7e2 fd91 	bl	8000288 <__aeabi_dsub>
 801d766:	4604      	mov	r4, r0
 801d768:	460d      	mov	r5, r1
 801d76a:	4602      	mov	r2, r0
 801d76c:	460b      	mov	r3, r1
 801d76e:	4640      	mov	r0, r8
 801d770:	4649      	mov	r1, r9
 801d772:	f7e2 ff41 	bl	80005f8 <__aeabi_dmul>
 801d776:	2200      	movs	r2, #0
 801d778:	ec41 0b19 	vmov	d9, r0, r1
 801d77c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d780:	4620      	mov	r0, r4
 801d782:	4629      	mov	r1, r5
 801d784:	f7e2 fd80 	bl	8000288 <__aeabi_dsub>
 801d788:	4602      	mov	r2, r0
 801d78a:	460b      	mov	r3, r1
 801d78c:	ec51 0b19 	vmov	r0, r1, d9
 801d790:	f7e3 f85c 	bl	800084c <__aeabi_ddiv>
 801d794:	4632      	mov	r2, r6
 801d796:	4604      	mov	r4, r0
 801d798:	460d      	mov	r5, r1
 801d79a:	463b      	mov	r3, r7
 801d79c:	4640      	mov	r0, r8
 801d79e:	4649      	mov	r1, r9
 801d7a0:	f7e2 ff2a 	bl	80005f8 <__aeabi_dmul>
 801d7a4:	4632      	mov	r2, r6
 801d7a6:	463b      	mov	r3, r7
 801d7a8:	f7e2 fd70 	bl	800028c <__adddf3>
 801d7ac:	4602      	mov	r2, r0
 801d7ae:	460b      	mov	r3, r1
 801d7b0:	4620      	mov	r0, r4
 801d7b2:	4629      	mov	r1, r5
 801d7b4:	f7e2 fd68 	bl	8000288 <__aeabi_dsub>
 801d7b8:	4642      	mov	r2, r8
 801d7ba:	464b      	mov	r3, r9
 801d7bc:	f7e2 fd64 	bl	8000288 <__aeabi_dsub>
 801d7c0:	460b      	mov	r3, r1
 801d7c2:	4602      	mov	r2, r0
 801d7c4:	493a      	ldr	r1, [pc, #232]	; (801d8b0 <__ieee754_pow+0xa48>)
 801d7c6:	2000      	movs	r0, #0
 801d7c8:	f7e2 fd5e 	bl	8000288 <__aeabi_dsub>
 801d7cc:	ec41 0b10 	vmov	d0, r0, r1
 801d7d0:	ee10 3a90 	vmov	r3, s1
 801d7d4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801d7d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d7dc:	da2b      	bge.n	801d836 <__ieee754_pow+0x9ce>
 801d7de:	4650      	mov	r0, sl
 801d7e0:	f000 f96a 	bl	801dab8 <scalbn>
 801d7e4:	ec51 0b10 	vmov	r0, r1, d0
 801d7e8:	ec53 2b18 	vmov	r2, r3, d8
 801d7ec:	f7ff bbed 	b.w	801cfca <__ieee754_pow+0x162>
 801d7f0:	4b30      	ldr	r3, [pc, #192]	; (801d8b4 <__ieee754_pow+0xa4c>)
 801d7f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801d7f6:	429e      	cmp	r6, r3
 801d7f8:	f77f af0c 	ble.w	801d614 <__ieee754_pow+0x7ac>
 801d7fc:	4b2e      	ldr	r3, [pc, #184]	; (801d8b8 <__ieee754_pow+0xa50>)
 801d7fe:	440b      	add	r3, r1
 801d800:	4303      	orrs	r3, r0
 801d802:	d009      	beq.n	801d818 <__ieee754_pow+0x9b0>
 801d804:	ec51 0b18 	vmov	r0, r1, d8
 801d808:	2200      	movs	r2, #0
 801d80a:	2300      	movs	r3, #0
 801d80c:	f7e3 f966 	bl	8000adc <__aeabi_dcmplt>
 801d810:	3800      	subs	r0, #0
 801d812:	bf18      	it	ne
 801d814:	2001      	movne	r0, #1
 801d816:	e447      	b.n	801d0a8 <__ieee754_pow+0x240>
 801d818:	4622      	mov	r2, r4
 801d81a:	462b      	mov	r3, r5
 801d81c:	f7e2 fd34 	bl	8000288 <__aeabi_dsub>
 801d820:	4642      	mov	r2, r8
 801d822:	464b      	mov	r3, r9
 801d824:	f7e3 f96e 	bl	8000b04 <__aeabi_dcmpge>
 801d828:	2800      	cmp	r0, #0
 801d82a:	f43f aef3 	beq.w	801d614 <__ieee754_pow+0x7ac>
 801d82e:	e7e9      	b.n	801d804 <__ieee754_pow+0x99c>
 801d830:	f04f 0a00 	mov.w	sl, #0
 801d834:	e71a      	b.n	801d66c <__ieee754_pow+0x804>
 801d836:	ec51 0b10 	vmov	r0, r1, d0
 801d83a:	4619      	mov	r1, r3
 801d83c:	e7d4      	b.n	801d7e8 <__ieee754_pow+0x980>
 801d83e:	491c      	ldr	r1, [pc, #112]	; (801d8b0 <__ieee754_pow+0xa48>)
 801d840:	2000      	movs	r0, #0
 801d842:	f7ff bb30 	b.w	801cea6 <__ieee754_pow+0x3e>
 801d846:	2000      	movs	r0, #0
 801d848:	2100      	movs	r1, #0
 801d84a:	f7ff bb2c 	b.w	801cea6 <__ieee754_pow+0x3e>
 801d84e:	4630      	mov	r0, r6
 801d850:	4639      	mov	r1, r7
 801d852:	f7ff bb28 	b.w	801cea6 <__ieee754_pow+0x3e>
 801d856:	9204      	str	r2, [sp, #16]
 801d858:	f7ff bb7a 	b.w	801cf50 <__ieee754_pow+0xe8>
 801d85c:	2300      	movs	r3, #0
 801d85e:	f7ff bb64 	b.w	801cf2a <__ieee754_pow+0xc2>
 801d862:	bf00      	nop
 801d864:	f3af 8000 	nop.w
 801d868:	00000000 	.word	0x00000000
 801d86c:	3fe62e43 	.word	0x3fe62e43
 801d870:	fefa39ef 	.word	0xfefa39ef
 801d874:	3fe62e42 	.word	0x3fe62e42
 801d878:	0ca86c39 	.word	0x0ca86c39
 801d87c:	be205c61 	.word	0xbe205c61
 801d880:	72bea4d0 	.word	0x72bea4d0
 801d884:	3e663769 	.word	0x3e663769
 801d888:	c5d26bf1 	.word	0xc5d26bf1
 801d88c:	3ebbbd41 	.word	0x3ebbbd41
 801d890:	af25de2c 	.word	0xaf25de2c
 801d894:	3f11566a 	.word	0x3f11566a
 801d898:	16bebd93 	.word	0x16bebd93
 801d89c:	3f66c16c 	.word	0x3f66c16c
 801d8a0:	5555553e 	.word	0x5555553e
 801d8a4:	3fc55555 	.word	0x3fc55555
 801d8a8:	3fe00000 	.word	0x3fe00000
 801d8ac:	000fffff 	.word	0x000fffff
 801d8b0:	3ff00000 	.word	0x3ff00000
 801d8b4:	4090cbff 	.word	0x4090cbff
 801d8b8:	3f6f3400 	.word	0x3f6f3400
 801d8bc:	652b82fe 	.word	0x652b82fe
 801d8c0:	3c971547 	.word	0x3c971547

0801d8c4 <__ieee754_sqrt>:
 801d8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8c8:	ec55 4b10 	vmov	r4, r5, d0
 801d8cc:	4e55      	ldr	r6, [pc, #340]	; (801da24 <__ieee754_sqrt+0x160>)
 801d8ce:	43ae      	bics	r6, r5
 801d8d0:	ee10 0a10 	vmov	r0, s0
 801d8d4:	ee10 3a10 	vmov	r3, s0
 801d8d8:	462a      	mov	r2, r5
 801d8da:	4629      	mov	r1, r5
 801d8dc:	d110      	bne.n	801d900 <__ieee754_sqrt+0x3c>
 801d8de:	ee10 2a10 	vmov	r2, s0
 801d8e2:	462b      	mov	r3, r5
 801d8e4:	f7e2 fe88 	bl	80005f8 <__aeabi_dmul>
 801d8e8:	4602      	mov	r2, r0
 801d8ea:	460b      	mov	r3, r1
 801d8ec:	4620      	mov	r0, r4
 801d8ee:	4629      	mov	r1, r5
 801d8f0:	f7e2 fccc 	bl	800028c <__adddf3>
 801d8f4:	4604      	mov	r4, r0
 801d8f6:	460d      	mov	r5, r1
 801d8f8:	ec45 4b10 	vmov	d0, r4, r5
 801d8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d900:	2d00      	cmp	r5, #0
 801d902:	dc10      	bgt.n	801d926 <__ieee754_sqrt+0x62>
 801d904:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d908:	4330      	orrs	r0, r6
 801d90a:	d0f5      	beq.n	801d8f8 <__ieee754_sqrt+0x34>
 801d90c:	b15d      	cbz	r5, 801d926 <__ieee754_sqrt+0x62>
 801d90e:	ee10 2a10 	vmov	r2, s0
 801d912:	462b      	mov	r3, r5
 801d914:	ee10 0a10 	vmov	r0, s0
 801d918:	f7e2 fcb6 	bl	8000288 <__aeabi_dsub>
 801d91c:	4602      	mov	r2, r0
 801d91e:	460b      	mov	r3, r1
 801d920:	f7e2 ff94 	bl	800084c <__aeabi_ddiv>
 801d924:	e7e6      	b.n	801d8f4 <__ieee754_sqrt+0x30>
 801d926:	1512      	asrs	r2, r2, #20
 801d928:	d074      	beq.n	801da14 <__ieee754_sqrt+0x150>
 801d92a:	07d4      	lsls	r4, r2, #31
 801d92c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801d930:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801d934:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801d938:	bf5e      	ittt	pl
 801d93a:	0fda      	lsrpl	r2, r3, #31
 801d93c:	005b      	lslpl	r3, r3, #1
 801d93e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801d942:	2400      	movs	r4, #0
 801d944:	0fda      	lsrs	r2, r3, #31
 801d946:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801d94a:	107f      	asrs	r7, r7, #1
 801d94c:	005b      	lsls	r3, r3, #1
 801d94e:	2516      	movs	r5, #22
 801d950:	4620      	mov	r0, r4
 801d952:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801d956:	1886      	adds	r6, r0, r2
 801d958:	428e      	cmp	r6, r1
 801d95a:	bfde      	ittt	le
 801d95c:	1b89      	suble	r1, r1, r6
 801d95e:	18b0      	addle	r0, r6, r2
 801d960:	18a4      	addle	r4, r4, r2
 801d962:	0049      	lsls	r1, r1, #1
 801d964:	3d01      	subs	r5, #1
 801d966:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801d96a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801d96e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d972:	d1f0      	bne.n	801d956 <__ieee754_sqrt+0x92>
 801d974:	462a      	mov	r2, r5
 801d976:	f04f 0e20 	mov.w	lr, #32
 801d97a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801d97e:	4281      	cmp	r1, r0
 801d980:	eb06 0c05 	add.w	ip, r6, r5
 801d984:	dc02      	bgt.n	801d98c <__ieee754_sqrt+0xc8>
 801d986:	d113      	bne.n	801d9b0 <__ieee754_sqrt+0xec>
 801d988:	459c      	cmp	ip, r3
 801d98a:	d811      	bhi.n	801d9b0 <__ieee754_sqrt+0xec>
 801d98c:	f1bc 0f00 	cmp.w	ip, #0
 801d990:	eb0c 0506 	add.w	r5, ip, r6
 801d994:	da43      	bge.n	801da1e <__ieee754_sqrt+0x15a>
 801d996:	2d00      	cmp	r5, #0
 801d998:	db41      	blt.n	801da1e <__ieee754_sqrt+0x15a>
 801d99a:	f100 0801 	add.w	r8, r0, #1
 801d99e:	1a09      	subs	r1, r1, r0
 801d9a0:	459c      	cmp	ip, r3
 801d9a2:	bf88      	it	hi
 801d9a4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801d9a8:	eba3 030c 	sub.w	r3, r3, ip
 801d9ac:	4432      	add	r2, r6
 801d9ae:	4640      	mov	r0, r8
 801d9b0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801d9b4:	f1be 0e01 	subs.w	lr, lr, #1
 801d9b8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801d9bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d9c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d9c4:	d1db      	bne.n	801d97e <__ieee754_sqrt+0xba>
 801d9c6:	430b      	orrs	r3, r1
 801d9c8:	d006      	beq.n	801d9d8 <__ieee754_sqrt+0x114>
 801d9ca:	1c50      	adds	r0, r2, #1
 801d9cc:	bf13      	iteet	ne
 801d9ce:	3201      	addne	r2, #1
 801d9d0:	3401      	addeq	r4, #1
 801d9d2:	4672      	moveq	r2, lr
 801d9d4:	f022 0201 	bicne.w	r2, r2, #1
 801d9d8:	1063      	asrs	r3, r4, #1
 801d9da:	0852      	lsrs	r2, r2, #1
 801d9dc:	07e1      	lsls	r1, r4, #31
 801d9de:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801d9e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801d9e6:	bf48      	it	mi
 801d9e8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801d9ec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801d9f0:	4614      	mov	r4, r2
 801d9f2:	e781      	b.n	801d8f8 <__ieee754_sqrt+0x34>
 801d9f4:	0ad9      	lsrs	r1, r3, #11
 801d9f6:	3815      	subs	r0, #21
 801d9f8:	055b      	lsls	r3, r3, #21
 801d9fa:	2900      	cmp	r1, #0
 801d9fc:	d0fa      	beq.n	801d9f4 <__ieee754_sqrt+0x130>
 801d9fe:	02cd      	lsls	r5, r1, #11
 801da00:	d50a      	bpl.n	801da18 <__ieee754_sqrt+0x154>
 801da02:	f1c2 0420 	rsb	r4, r2, #32
 801da06:	fa23 f404 	lsr.w	r4, r3, r4
 801da0a:	1e55      	subs	r5, r2, #1
 801da0c:	4093      	lsls	r3, r2
 801da0e:	4321      	orrs	r1, r4
 801da10:	1b42      	subs	r2, r0, r5
 801da12:	e78a      	b.n	801d92a <__ieee754_sqrt+0x66>
 801da14:	4610      	mov	r0, r2
 801da16:	e7f0      	b.n	801d9fa <__ieee754_sqrt+0x136>
 801da18:	0049      	lsls	r1, r1, #1
 801da1a:	3201      	adds	r2, #1
 801da1c:	e7ef      	b.n	801d9fe <__ieee754_sqrt+0x13a>
 801da1e:	4680      	mov	r8, r0
 801da20:	e7bd      	b.n	801d99e <__ieee754_sqrt+0xda>
 801da22:	bf00      	nop
 801da24:	7ff00000 	.word	0x7ff00000

0801da28 <__ieee754_sqrtf>:
 801da28:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801da2c:	4770      	bx	lr

0801da2e <with_errno>:
 801da2e:	b570      	push	{r4, r5, r6, lr}
 801da30:	4604      	mov	r4, r0
 801da32:	460d      	mov	r5, r1
 801da34:	4616      	mov	r6, r2
 801da36:	f000 f8e3 	bl	801dc00 <__errno>
 801da3a:	4629      	mov	r1, r5
 801da3c:	6006      	str	r6, [r0, #0]
 801da3e:	4620      	mov	r0, r4
 801da40:	bd70      	pop	{r4, r5, r6, pc}

0801da42 <xflow>:
 801da42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801da44:	4614      	mov	r4, r2
 801da46:	461d      	mov	r5, r3
 801da48:	b108      	cbz	r0, 801da4e <xflow+0xc>
 801da4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801da4e:	e9cd 2300 	strd	r2, r3, [sp]
 801da52:	e9dd 2300 	ldrd	r2, r3, [sp]
 801da56:	4620      	mov	r0, r4
 801da58:	4629      	mov	r1, r5
 801da5a:	f7e2 fdcd 	bl	80005f8 <__aeabi_dmul>
 801da5e:	2222      	movs	r2, #34	; 0x22
 801da60:	b003      	add	sp, #12
 801da62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801da66:	f7ff bfe2 	b.w	801da2e <with_errno>

0801da6a <__math_uflow>:
 801da6a:	b508      	push	{r3, lr}
 801da6c:	2200      	movs	r2, #0
 801da6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801da72:	f7ff ffe6 	bl	801da42 <xflow>
 801da76:	ec41 0b10 	vmov	d0, r0, r1
 801da7a:	bd08      	pop	{r3, pc}

0801da7c <__math_oflow>:
 801da7c:	b508      	push	{r3, lr}
 801da7e:	2200      	movs	r2, #0
 801da80:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801da84:	f7ff ffdd 	bl	801da42 <xflow>
 801da88:	ec41 0b10 	vmov	d0, r0, r1
 801da8c:	bd08      	pop	{r3, pc}

0801da8e <fabs>:
 801da8e:	ec51 0b10 	vmov	r0, r1, d0
 801da92:	ee10 2a10 	vmov	r2, s0
 801da96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801da9a:	ec43 2b10 	vmov	d0, r2, r3
 801da9e:	4770      	bx	lr

0801daa0 <finite>:
 801daa0:	b082      	sub	sp, #8
 801daa2:	ed8d 0b00 	vstr	d0, [sp]
 801daa6:	9801      	ldr	r0, [sp, #4]
 801daa8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801daac:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801dab0:	0fc0      	lsrs	r0, r0, #31
 801dab2:	b002      	add	sp, #8
 801dab4:	4770      	bx	lr
	...

0801dab8 <scalbn>:
 801dab8:	b570      	push	{r4, r5, r6, lr}
 801daba:	ec55 4b10 	vmov	r4, r5, d0
 801dabe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801dac2:	4606      	mov	r6, r0
 801dac4:	462b      	mov	r3, r5
 801dac6:	b99a      	cbnz	r2, 801daf0 <scalbn+0x38>
 801dac8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801dacc:	4323      	orrs	r3, r4
 801dace:	d036      	beq.n	801db3e <scalbn+0x86>
 801dad0:	4b39      	ldr	r3, [pc, #228]	; (801dbb8 <scalbn+0x100>)
 801dad2:	4629      	mov	r1, r5
 801dad4:	ee10 0a10 	vmov	r0, s0
 801dad8:	2200      	movs	r2, #0
 801dada:	f7e2 fd8d 	bl	80005f8 <__aeabi_dmul>
 801dade:	4b37      	ldr	r3, [pc, #220]	; (801dbbc <scalbn+0x104>)
 801dae0:	429e      	cmp	r6, r3
 801dae2:	4604      	mov	r4, r0
 801dae4:	460d      	mov	r5, r1
 801dae6:	da10      	bge.n	801db0a <scalbn+0x52>
 801dae8:	a32b      	add	r3, pc, #172	; (adr r3, 801db98 <scalbn+0xe0>)
 801daea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801daee:	e03a      	b.n	801db66 <scalbn+0xae>
 801daf0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801daf4:	428a      	cmp	r2, r1
 801daf6:	d10c      	bne.n	801db12 <scalbn+0x5a>
 801daf8:	ee10 2a10 	vmov	r2, s0
 801dafc:	4620      	mov	r0, r4
 801dafe:	4629      	mov	r1, r5
 801db00:	f7e2 fbc4 	bl	800028c <__adddf3>
 801db04:	4604      	mov	r4, r0
 801db06:	460d      	mov	r5, r1
 801db08:	e019      	b.n	801db3e <scalbn+0x86>
 801db0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801db0e:	460b      	mov	r3, r1
 801db10:	3a36      	subs	r2, #54	; 0x36
 801db12:	4432      	add	r2, r6
 801db14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801db18:	428a      	cmp	r2, r1
 801db1a:	dd08      	ble.n	801db2e <scalbn+0x76>
 801db1c:	2d00      	cmp	r5, #0
 801db1e:	a120      	add	r1, pc, #128	; (adr r1, 801dba0 <scalbn+0xe8>)
 801db20:	e9d1 0100 	ldrd	r0, r1, [r1]
 801db24:	da1c      	bge.n	801db60 <scalbn+0xa8>
 801db26:	a120      	add	r1, pc, #128	; (adr r1, 801dba8 <scalbn+0xf0>)
 801db28:	e9d1 0100 	ldrd	r0, r1, [r1]
 801db2c:	e018      	b.n	801db60 <scalbn+0xa8>
 801db2e:	2a00      	cmp	r2, #0
 801db30:	dd08      	ble.n	801db44 <scalbn+0x8c>
 801db32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801db36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801db3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801db3e:	ec45 4b10 	vmov	d0, r4, r5
 801db42:	bd70      	pop	{r4, r5, r6, pc}
 801db44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801db48:	da19      	bge.n	801db7e <scalbn+0xc6>
 801db4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801db4e:	429e      	cmp	r6, r3
 801db50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801db54:	dd0a      	ble.n	801db6c <scalbn+0xb4>
 801db56:	a112      	add	r1, pc, #72	; (adr r1, 801dba0 <scalbn+0xe8>)
 801db58:	e9d1 0100 	ldrd	r0, r1, [r1]
 801db5c:	2b00      	cmp	r3, #0
 801db5e:	d1e2      	bne.n	801db26 <scalbn+0x6e>
 801db60:	a30f      	add	r3, pc, #60	; (adr r3, 801dba0 <scalbn+0xe8>)
 801db62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db66:	f7e2 fd47 	bl	80005f8 <__aeabi_dmul>
 801db6a:	e7cb      	b.n	801db04 <scalbn+0x4c>
 801db6c:	a10a      	add	r1, pc, #40	; (adr r1, 801db98 <scalbn+0xe0>)
 801db6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801db72:	2b00      	cmp	r3, #0
 801db74:	d0b8      	beq.n	801dae8 <scalbn+0x30>
 801db76:	a10e      	add	r1, pc, #56	; (adr r1, 801dbb0 <scalbn+0xf8>)
 801db78:	e9d1 0100 	ldrd	r0, r1, [r1]
 801db7c:	e7b4      	b.n	801dae8 <scalbn+0x30>
 801db7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801db82:	3236      	adds	r2, #54	; 0x36
 801db84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801db88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801db8c:	4620      	mov	r0, r4
 801db8e:	4b0c      	ldr	r3, [pc, #48]	; (801dbc0 <scalbn+0x108>)
 801db90:	2200      	movs	r2, #0
 801db92:	e7e8      	b.n	801db66 <scalbn+0xae>
 801db94:	f3af 8000 	nop.w
 801db98:	c2f8f359 	.word	0xc2f8f359
 801db9c:	01a56e1f 	.word	0x01a56e1f
 801dba0:	8800759c 	.word	0x8800759c
 801dba4:	7e37e43c 	.word	0x7e37e43c
 801dba8:	8800759c 	.word	0x8800759c
 801dbac:	fe37e43c 	.word	0xfe37e43c
 801dbb0:	c2f8f359 	.word	0xc2f8f359
 801dbb4:	81a56e1f 	.word	0x81a56e1f
 801dbb8:	43500000 	.word	0x43500000
 801dbbc:	ffff3cb0 	.word	0xffff3cb0
 801dbc0:	3c900000 	.word	0x3c900000

0801dbc4 <__assert_func>:
 801dbc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dbc6:	4614      	mov	r4, r2
 801dbc8:	461a      	mov	r2, r3
 801dbca:	4b09      	ldr	r3, [pc, #36]	; (801dbf0 <__assert_func+0x2c>)
 801dbcc:	681b      	ldr	r3, [r3, #0]
 801dbce:	4605      	mov	r5, r0
 801dbd0:	68d8      	ldr	r0, [r3, #12]
 801dbd2:	b14c      	cbz	r4, 801dbe8 <__assert_func+0x24>
 801dbd4:	4b07      	ldr	r3, [pc, #28]	; (801dbf4 <__assert_func+0x30>)
 801dbd6:	9100      	str	r1, [sp, #0]
 801dbd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dbdc:	4906      	ldr	r1, [pc, #24]	; (801dbf8 <__assert_func+0x34>)
 801dbde:	462b      	mov	r3, r5
 801dbe0:	f000 f814 	bl	801dc0c <fiprintf>
 801dbe4:	f000 fc0c 	bl	801e400 <abort>
 801dbe8:	4b04      	ldr	r3, [pc, #16]	; (801dbfc <__assert_func+0x38>)
 801dbea:	461c      	mov	r4, r3
 801dbec:	e7f3      	b.n	801dbd6 <__assert_func+0x12>
 801dbee:	bf00      	nop
 801dbf0:	20000198 	.word	0x20000198
 801dbf4:	08029c70 	.word	0x08029c70
 801dbf8:	08029c7d 	.word	0x08029c7d
 801dbfc:	08029cab 	.word	0x08029cab

0801dc00 <__errno>:
 801dc00:	4b01      	ldr	r3, [pc, #4]	; (801dc08 <__errno+0x8>)
 801dc02:	6818      	ldr	r0, [r3, #0]
 801dc04:	4770      	bx	lr
 801dc06:	bf00      	nop
 801dc08:	20000198 	.word	0x20000198

0801dc0c <fiprintf>:
 801dc0c:	b40e      	push	{r1, r2, r3}
 801dc0e:	b503      	push	{r0, r1, lr}
 801dc10:	4601      	mov	r1, r0
 801dc12:	ab03      	add	r3, sp, #12
 801dc14:	4805      	ldr	r0, [pc, #20]	; (801dc2c <fiprintf+0x20>)
 801dc16:	f853 2b04 	ldr.w	r2, [r3], #4
 801dc1a:	6800      	ldr	r0, [r0, #0]
 801dc1c:	9301      	str	r3, [sp, #4]
 801dc1e:	f000 f86b 	bl	801dcf8 <_vfiprintf_r>
 801dc22:	b002      	add	sp, #8
 801dc24:	f85d eb04 	ldr.w	lr, [sp], #4
 801dc28:	b003      	add	sp, #12
 801dc2a:	4770      	bx	lr
 801dc2c:	20000198 	.word	0x20000198

0801dc30 <__libc_init_array>:
 801dc30:	b570      	push	{r4, r5, r6, lr}
 801dc32:	4d0d      	ldr	r5, [pc, #52]	; (801dc68 <__libc_init_array+0x38>)
 801dc34:	4c0d      	ldr	r4, [pc, #52]	; (801dc6c <__libc_init_array+0x3c>)
 801dc36:	1b64      	subs	r4, r4, r5
 801dc38:	10a4      	asrs	r4, r4, #2
 801dc3a:	2600      	movs	r6, #0
 801dc3c:	42a6      	cmp	r6, r4
 801dc3e:	d109      	bne.n	801dc54 <__libc_init_array+0x24>
 801dc40:	4d0b      	ldr	r5, [pc, #44]	; (801dc70 <__libc_init_array+0x40>)
 801dc42:	4c0c      	ldr	r4, [pc, #48]	; (801dc74 <__libc_init_array+0x44>)
 801dc44:	f000 fff0 	bl	801ec28 <_init>
 801dc48:	1b64      	subs	r4, r4, r5
 801dc4a:	10a4      	asrs	r4, r4, #2
 801dc4c:	2600      	movs	r6, #0
 801dc4e:	42a6      	cmp	r6, r4
 801dc50:	d105      	bne.n	801dc5e <__libc_init_array+0x2e>
 801dc52:	bd70      	pop	{r4, r5, r6, pc}
 801dc54:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc58:	4798      	blx	r3
 801dc5a:	3601      	adds	r6, #1
 801dc5c:	e7ee      	b.n	801dc3c <__libc_init_array+0xc>
 801dc5e:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc62:	4798      	blx	r3
 801dc64:	3601      	adds	r6, #1
 801dc66:	e7f2      	b.n	801dc4e <__libc_init_array+0x1e>
 801dc68:	08029d4c 	.word	0x08029d4c
 801dc6c:	08029d4c 	.word	0x08029d4c
 801dc70:	08029d4c 	.word	0x08029d4c
 801dc74:	08029d54 	.word	0x08029d54

0801dc78 <memcpy>:
 801dc78:	440a      	add	r2, r1
 801dc7a:	4291      	cmp	r1, r2
 801dc7c:	f100 33ff 	add.w	r3, r0, #4294967295
 801dc80:	d100      	bne.n	801dc84 <memcpy+0xc>
 801dc82:	4770      	bx	lr
 801dc84:	b510      	push	{r4, lr}
 801dc86:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dc8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dc8e:	4291      	cmp	r1, r2
 801dc90:	d1f9      	bne.n	801dc86 <memcpy+0xe>
 801dc92:	bd10      	pop	{r4, pc}

0801dc94 <memset>:
 801dc94:	4402      	add	r2, r0
 801dc96:	4603      	mov	r3, r0
 801dc98:	4293      	cmp	r3, r2
 801dc9a:	d100      	bne.n	801dc9e <memset+0xa>
 801dc9c:	4770      	bx	lr
 801dc9e:	f803 1b01 	strb.w	r1, [r3], #1
 801dca2:	e7f9      	b.n	801dc98 <memset+0x4>

0801dca4 <__sfputc_r>:
 801dca4:	6893      	ldr	r3, [r2, #8]
 801dca6:	3b01      	subs	r3, #1
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	b410      	push	{r4}
 801dcac:	6093      	str	r3, [r2, #8]
 801dcae:	da08      	bge.n	801dcc2 <__sfputc_r+0x1e>
 801dcb0:	6994      	ldr	r4, [r2, #24]
 801dcb2:	42a3      	cmp	r3, r4
 801dcb4:	db01      	blt.n	801dcba <__sfputc_r+0x16>
 801dcb6:	290a      	cmp	r1, #10
 801dcb8:	d103      	bne.n	801dcc2 <__sfputc_r+0x1e>
 801dcba:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dcbe:	f000 badf 	b.w	801e280 <__swbuf_r>
 801dcc2:	6813      	ldr	r3, [r2, #0]
 801dcc4:	1c58      	adds	r0, r3, #1
 801dcc6:	6010      	str	r0, [r2, #0]
 801dcc8:	7019      	strb	r1, [r3, #0]
 801dcca:	4608      	mov	r0, r1
 801dccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dcd0:	4770      	bx	lr

0801dcd2 <__sfputs_r>:
 801dcd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcd4:	4606      	mov	r6, r0
 801dcd6:	460f      	mov	r7, r1
 801dcd8:	4614      	mov	r4, r2
 801dcda:	18d5      	adds	r5, r2, r3
 801dcdc:	42ac      	cmp	r4, r5
 801dcde:	d101      	bne.n	801dce4 <__sfputs_r+0x12>
 801dce0:	2000      	movs	r0, #0
 801dce2:	e007      	b.n	801dcf4 <__sfputs_r+0x22>
 801dce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dce8:	463a      	mov	r2, r7
 801dcea:	4630      	mov	r0, r6
 801dcec:	f7ff ffda 	bl	801dca4 <__sfputc_r>
 801dcf0:	1c43      	adds	r3, r0, #1
 801dcf2:	d1f3      	bne.n	801dcdc <__sfputs_r+0xa>
 801dcf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dcf8 <_vfiprintf_r>:
 801dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcfc:	460d      	mov	r5, r1
 801dcfe:	b09d      	sub	sp, #116	; 0x74
 801dd00:	4614      	mov	r4, r2
 801dd02:	4698      	mov	r8, r3
 801dd04:	4606      	mov	r6, r0
 801dd06:	b118      	cbz	r0, 801dd10 <_vfiprintf_r+0x18>
 801dd08:	6983      	ldr	r3, [r0, #24]
 801dd0a:	b90b      	cbnz	r3, 801dd10 <_vfiprintf_r+0x18>
 801dd0c:	f000 fc9a 	bl	801e644 <__sinit>
 801dd10:	4b89      	ldr	r3, [pc, #548]	; (801df38 <_vfiprintf_r+0x240>)
 801dd12:	429d      	cmp	r5, r3
 801dd14:	d11b      	bne.n	801dd4e <_vfiprintf_r+0x56>
 801dd16:	6875      	ldr	r5, [r6, #4]
 801dd18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dd1a:	07d9      	lsls	r1, r3, #31
 801dd1c:	d405      	bmi.n	801dd2a <_vfiprintf_r+0x32>
 801dd1e:	89ab      	ldrh	r3, [r5, #12]
 801dd20:	059a      	lsls	r2, r3, #22
 801dd22:	d402      	bmi.n	801dd2a <_vfiprintf_r+0x32>
 801dd24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dd26:	f000 fd2b 	bl	801e780 <__retarget_lock_acquire_recursive>
 801dd2a:	89ab      	ldrh	r3, [r5, #12]
 801dd2c:	071b      	lsls	r3, r3, #28
 801dd2e:	d501      	bpl.n	801dd34 <_vfiprintf_r+0x3c>
 801dd30:	692b      	ldr	r3, [r5, #16]
 801dd32:	b9eb      	cbnz	r3, 801dd70 <_vfiprintf_r+0x78>
 801dd34:	4629      	mov	r1, r5
 801dd36:	4630      	mov	r0, r6
 801dd38:	f000 faf4 	bl	801e324 <__swsetup_r>
 801dd3c:	b1c0      	cbz	r0, 801dd70 <_vfiprintf_r+0x78>
 801dd3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dd40:	07dc      	lsls	r4, r3, #31
 801dd42:	d50e      	bpl.n	801dd62 <_vfiprintf_r+0x6a>
 801dd44:	f04f 30ff 	mov.w	r0, #4294967295
 801dd48:	b01d      	add	sp, #116	; 0x74
 801dd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd4e:	4b7b      	ldr	r3, [pc, #492]	; (801df3c <_vfiprintf_r+0x244>)
 801dd50:	429d      	cmp	r5, r3
 801dd52:	d101      	bne.n	801dd58 <_vfiprintf_r+0x60>
 801dd54:	68b5      	ldr	r5, [r6, #8]
 801dd56:	e7df      	b.n	801dd18 <_vfiprintf_r+0x20>
 801dd58:	4b79      	ldr	r3, [pc, #484]	; (801df40 <_vfiprintf_r+0x248>)
 801dd5a:	429d      	cmp	r5, r3
 801dd5c:	bf08      	it	eq
 801dd5e:	68f5      	ldreq	r5, [r6, #12]
 801dd60:	e7da      	b.n	801dd18 <_vfiprintf_r+0x20>
 801dd62:	89ab      	ldrh	r3, [r5, #12]
 801dd64:	0598      	lsls	r0, r3, #22
 801dd66:	d4ed      	bmi.n	801dd44 <_vfiprintf_r+0x4c>
 801dd68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dd6a:	f000 fd0a 	bl	801e782 <__retarget_lock_release_recursive>
 801dd6e:	e7e9      	b.n	801dd44 <_vfiprintf_r+0x4c>
 801dd70:	2300      	movs	r3, #0
 801dd72:	9309      	str	r3, [sp, #36]	; 0x24
 801dd74:	2320      	movs	r3, #32
 801dd76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dd7a:	f8cd 800c 	str.w	r8, [sp, #12]
 801dd7e:	2330      	movs	r3, #48	; 0x30
 801dd80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801df44 <_vfiprintf_r+0x24c>
 801dd84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dd88:	f04f 0901 	mov.w	r9, #1
 801dd8c:	4623      	mov	r3, r4
 801dd8e:	469a      	mov	sl, r3
 801dd90:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dd94:	b10a      	cbz	r2, 801dd9a <_vfiprintf_r+0xa2>
 801dd96:	2a25      	cmp	r2, #37	; 0x25
 801dd98:	d1f9      	bne.n	801dd8e <_vfiprintf_r+0x96>
 801dd9a:	ebba 0b04 	subs.w	fp, sl, r4
 801dd9e:	d00b      	beq.n	801ddb8 <_vfiprintf_r+0xc0>
 801dda0:	465b      	mov	r3, fp
 801dda2:	4622      	mov	r2, r4
 801dda4:	4629      	mov	r1, r5
 801dda6:	4630      	mov	r0, r6
 801dda8:	f7ff ff93 	bl	801dcd2 <__sfputs_r>
 801ddac:	3001      	adds	r0, #1
 801ddae:	f000 80aa 	beq.w	801df06 <_vfiprintf_r+0x20e>
 801ddb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ddb4:	445a      	add	r2, fp
 801ddb6:	9209      	str	r2, [sp, #36]	; 0x24
 801ddb8:	f89a 3000 	ldrb.w	r3, [sl]
 801ddbc:	2b00      	cmp	r3, #0
 801ddbe:	f000 80a2 	beq.w	801df06 <_vfiprintf_r+0x20e>
 801ddc2:	2300      	movs	r3, #0
 801ddc4:	f04f 32ff 	mov.w	r2, #4294967295
 801ddc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ddcc:	f10a 0a01 	add.w	sl, sl, #1
 801ddd0:	9304      	str	r3, [sp, #16]
 801ddd2:	9307      	str	r3, [sp, #28]
 801ddd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ddd8:	931a      	str	r3, [sp, #104]	; 0x68
 801ddda:	4654      	mov	r4, sl
 801dddc:	2205      	movs	r2, #5
 801ddde:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dde2:	4858      	ldr	r0, [pc, #352]	; (801df44 <_vfiprintf_r+0x24c>)
 801dde4:	f7e2 f9fc 	bl	80001e0 <memchr>
 801dde8:	9a04      	ldr	r2, [sp, #16]
 801ddea:	b9d8      	cbnz	r0, 801de24 <_vfiprintf_r+0x12c>
 801ddec:	06d1      	lsls	r1, r2, #27
 801ddee:	bf44      	itt	mi
 801ddf0:	2320      	movmi	r3, #32
 801ddf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ddf6:	0713      	lsls	r3, r2, #28
 801ddf8:	bf44      	itt	mi
 801ddfa:	232b      	movmi	r3, #43	; 0x2b
 801ddfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801de00:	f89a 3000 	ldrb.w	r3, [sl]
 801de04:	2b2a      	cmp	r3, #42	; 0x2a
 801de06:	d015      	beq.n	801de34 <_vfiprintf_r+0x13c>
 801de08:	9a07      	ldr	r2, [sp, #28]
 801de0a:	4654      	mov	r4, sl
 801de0c:	2000      	movs	r0, #0
 801de0e:	f04f 0c0a 	mov.w	ip, #10
 801de12:	4621      	mov	r1, r4
 801de14:	f811 3b01 	ldrb.w	r3, [r1], #1
 801de18:	3b30      	subs	r3, #48	; 0x30
 801de1a:	2b09      	cmp	r3, #9
 801de1c:	d94e      	bls.n	801debc <_vfiprintf_r+0x1c4>
 801de1e:	b1b0      	cbz	r0, 801de4e <_vfiprintf_r+0x156>
 801de20:	9207      	str	r2, [sp, #28]
 801de22:	e014      	b.n	801de4e <_vfiprintf_r+0x156>
 801de24:	eba0 0308 	sub.w	r3, r0, r8
 801de28:	fa09 f303 	lsl.w	r3, r9, r3
 801de2c:	4313      	orrs	r3, r2
 801de2e:	9304      	str	r3, [sp, #16]
 801de30:	46a2      	mov	sl, r4
 801de32:	e7d2      	b.n	801ddda <_vfiprintf_r+0xe2>
 801de34:	9b03      	ldr	r3, [sp, #12]
 801de36:	1d19      	adds	r1, r3, #4
 801de38:	681b      	ldr	r3, [r3, #0]
 801de3a:	9103      	str	r1, [sp, #12]
 801de3c:	2b00      	cmp	r3, #0
 801de3e:	bfbb      	ittet	lt
 801de40:	425b      	neglt	r3, r3
 801de42:	f042 0202 	orrlt.w	r2, r2, #2
 801de46:	9307      	strge	r3, [sp, #28]
 801de48:	9307      	strlt	r3, [sp, #28]
 801de4a:	bfb8      	it	lt
 801de4c:	9204      	strlt	r2, [sp, #16]
 801de4e:	7823      	ldrb	r3, [r4, #0]
 801de50:	2b2e      	cmp	r3, #46	; 0x2e
 801de52:	d10c      	bne.n	801de6e <_vfiprintf_r+0x176>
 801de54:	7863      	ldrb	r3, [r4, #1]
 801de56:	2b2a      	cmp	r3, #42	; 0x2a
 801de58:	d135      	bne.n	801dec6 <_vfiprintf_r+0x1ce>
 801de5a:	9b03      	ldr	r3, [sp, #12]
 801de5c:	1d1a      	adds	r2, r3, #4
 801de5e:	681b      	ldr	r3, [r3, #0]
 801de60:	9203      	str	r2, [sp, #12]
 801de62:	2b00      	cmp	r3, #0
 801de64:	bfb8      	it	lt
 801de66:	f04f 33ff 	movlt.w	r3, #4294967295
 801de6a:	3402      	adds	r4, #2
 801de6c:	9305      	str	r3, [sp, #20]
 801de6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801df54 <_vfiprintf_r+0x25c>
 801de72:	7821      	ldrb	r1, [r4, #0]
 801de74:	2203      	movs	r2, #3
 801de76:	4650      	mov	r0, sl
 801de78:	f7e2 f9b2 	bl	80001e0 <memchr>
 801de7c:	b140      	cbz	r0, 801de90 <_vfiprintf_r+0x198>
 801de7e:	2340      	movs	r3, #64	; 0x40
 801de80:	eba0 000a 	sub.w	r0, r0, sl
 801de84:	fa03 f000 	lsl.w	r0, r3, r0
 801de88:	9b04      	ldr	r3, [sp, #16]
 801de8a:	4303      	orrs	r3, r0
 801de8c:	3401      	adds	r4, #1
 801de8e:	9304      	str	r3, [sp, #16]
 801de90:	f814 1b01 	ldrb.w	r1, [r4], #1
 801de94:	482c      	ldr	r0, [pc, #176]	; (801df48 <_vfiprintf_r+0x250>)
 801de96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801de9a:	2206      	movs	r2, #6
 801de9c:	f7e2 f9a0 	bl	80001e0 <memchr>
 801dea0:	2800      	cmp	r0, #0
 801dea2:	d03f      	beq.n	801df24 <_vfiprintf_r+0x22c>
 801dea4:	4b29      	ldr	r3, [pc, #164]	; (801df4c <_vfiprintf_r+0x254>)
 801dea6:	bb1b      	cbnz	r3, 801def0 <_vfiprintf_r+0x1f8>
 801dea8:	9b03      	ldr	r3, [sp, #12]
 801deaa:	3307      	adds	r3, #7
 801deac:	f023 0307 	bic.w	r3, r3, #7
 801deb0:	3308      	adds	r3, #8
 801deb2:	9303      	str	r3, [sp, #12]
 801deb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801deb6:	443b      	add	r3, r7
 801deb8:	9309      	str	r3, [sp, #36]	; 0x24
 801deba:	e767      	b.n	801dd8c <_vfiprintf_r+0x94>
 801debc:	fb0c 3202 	mla	r2, ip, r2, r3
 801dec0:	460c      	mov	r4, r1
 801dec2:	2001      	movs	r0, #1
 801dec4:	e7a5      	b.n	801de12 <_vfiprintf_r+0x11a>
 801dec6:	2300      	movs	r3, #0
 801dec8:	3401      	adds	r4, #1
 801deca:	9305      	str	r3, [sp, #20]
 801decc:	4619      	mov	r1, r3
 801dece:	f04f 0c0a 	mov.w	ip, #10
 801ded2:	4620      	mov	r0, r4
 801ded4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ded8:	3a30      	subs	r2, #48	; 0x30
 801deda:	2a09      	cmp	r2, #9
 801dedc:	d903      	bls.n	801dee6 <_vfiprintf_r+0x1ee>
 801dede:	2b00      	cmp	r3, #0
 801dee0:	d0c5      	beq.n	801de6e <_vfiprintf_r+0x176>
 801dee2:	9105      	str	r1, [sp, #20]
 801dee4:	e7c3      	b.n	801de6e <_vfiprintf_r+0x176>
 801dee6:	fb0c 2101 	mla	r1, ip, r1, r2
 801deea:	4604      	mov	r4, r0
 801deec:	2301      	movs	r3, #1
 801deee:	e7f0      	b.n	801ded2 <_vfiprintf_r+0x1da>
 801def0:	ab03      	add	r3, sp, #12
 801def2:	9300      	str	r3, [sp, #0]
 801def4:	462a      	mov	r2, r5
 801def6:	4b16      	ldr	r3, [pc, #88]	; (801df50 <_vfiprintf_r+0x258>)
 801def8:	a904      	add	r1, sp, #16
 801defa:	4630      	mov	r0, r6
 801defc:	f3af 8000 	nop.w
 801df00:	4607      	mov	r7, r0
 801df02:	1c78      	adds	r0, r7, #1
 801df04:	d1d6      	bne.n	801deb4 <_vfiprintf_r+0x1bc>
 801df06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801df08:	07d9      	lsls	r1, r3, #31
 801df0a:	d405      	bmi.n	801df18 <_vfiprintf_r+0x220>
 801df0c:	89ab      	ldrh	r3, [r5, #12]
 801df0e:	059a      	lsls	r2, r3, #22
 801df10:	d402      	bmi.n	801df18 <_vfiprintf_r+0x220>
 801df12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801df14:	f000 fc35 	bl	801e782 <__retarget_lock_release_recursive>
 801df18:	89ab      	ldrh	r3, [r5, #12]
 801df1a:	065b      	lsls	r3, r3, #25
 801df1c:	f53f af12 	bmi.w	801dd44 <_vfiprintf_r+0x4c>
 801df20:	9809      	ldr	r0, [sp, #36]	; 0x24
 801df22:	e711      	b.n	801dd48 <_vfiprintf_r+0x50>
 801df24:	ab03      	add	r3, sp, #12
 801df26:	9300      	str	r3, [sp, #0]
 801df28:	462a      	mov	r2, r5
 801df2a:	4b09      	ldr	r3, [pc, #36]	; (801df50 <_vfiprintf_r+0x258>)
 801df2c:	a904      	add	r1, sp, #16
 801df2e:	4630      	mov	r0, r6
 801df30:	f000 f880 	bl	801e034 <_printf_i>
 801df34:	e7e4      	b.n	801df00 <_vfiprintf_r+0x208>
 801df36:	bf00      	nop
 801df38:	08029d04 	.word	0x08029d04
 801df3c:	08029d24 	.word	0x08029d24
 801df40:	08029ce4 	.word	0x08029ce4
 801df44:	08029cb0 	.word	0x08029cb0
 801df48:	08029cba 	.word	0x08029cba
 801df4c:	00000000 	.word	0x00000000
 801df50:	0801dcd3 	.word	0x0801dcd3
 801df54:	08029cb6 	.word	0x08029cb6

0801df58 <_printf_common>:
 801df58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df5c:	4616      	mov	r6, r2
 801df5e:	4699      	mov	r9, r3
 801df60:	688a      	ldr	r2, [r1, #8]
 801df62:	690b      	ldr	r3, [r1, #16]
 801df64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801df68:	4293      	cmp	r3, r2
 801df6a:	bfb8      	it	lt
 801df6c:	4613      	movlt	r3, r2
 801df6e:	6033      	str	r3, [r6, #0]
 801df70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801df74:	4607      	mov	r7, r0
 801df76:	460c      	mov	r4, r1
 801df78:	b10a      	cbz	r2, 801df7e <_printf_common+0x26>
 801df7a:	3301      	adds	r3, #1
 801df7c:	6033      	str	r3, [r6, #0]
 801df7e:	6823      	ldr	r3, [r4, #0]
 801df80:	0699      	lsls	r1, r3, #26
 801df82:	bf42      	ittt	mi
 801df84:	6833      	ldrmi	r3, [r6, #0]
 801df86:	3302      	addmi	r3, #2
 801df88:	6033      	strmi	r3, [r6, #0]
 801df8a:	6825      	ldr	r5, [r4, #0]
 801df8c:	f015 0506 	ands.w	r5, r5, #6
 801df90:	d106      	bne.n	801dfa0 <_printf_common+0x48>
 801df92:	f104 0a19 	add.w	sl, r4, #25
 801df96:	68e3      	ldr	r3, [r4, #12]
 801df98:	6832      	ldr	r2, [r6, #0]
 801df9a:	1a9b      	subs	r3, r3, r2
 801df9c:	42ab      	cmp	r3, r5
 801df9e:	dc26      	bgt.n	801dfee <_printf_common+0x96>
 801dfa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801dfa4:	1e13      	subs	r3, r2, #0
 801dfa6:	6822      	ldr	r2, [r4, #0]
 801dfa8:	bf18      	it	ne
 801dfaa:	2301      	movne	r3, #1
 801dfac:	0692      	lsls	r2, r2, #26
 801dfae:	d42b      	bmi.n	801e008 <_printf_common+0xb0>
 801dfb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801dfb4:	4649      	mov	r1, r9
 801dfb6:	4638      	mov	r0, r7
 801dfb8:	47c0      	blx	r8
 801dfba:	3001      	adds	r0, #1
 801dfbc:	d01e      	beq.n	801dffc <_printf_common+0xa4>
 801dfbe:	6823      	ldr	r3, [r4, #0]
 801dfc0:	68e5      	ldr	r5, [r4, #12]
 801dfc2:	6832      	ldr	r2, [r6, #0]
 801dfc4:	f003 0306 	and.w	r3, r3, #6
 801dfc8:	2b04      	cmp	r3, #4
 801dfca:	bf08      	it	eq
 801dfcc:	1aad      	subeq	r5, r5, r2
 801dfce:	68a3      	ldr	r3, [r4, #8]
 801dfd0:	6922      	ldr	r2, [r4, #16]
 801dfd2:	bf0c      	ite	eq
 801dfd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dfd8:	2500      	movne	r5, #0
 801dfda:	4293      	cmp	r3, r2
 801dfdc:	bfc4      	itt	gt
 801dfde:	1a9b      	subgt	r3, r3, r2
 801dfe0:	18ed      	addgt	r5, r5, r3
 801dfe2:	2600      	movs	r6, #0
 801dfe4:	341a      	adds	r4, #26
 801dfe6:	42b5      	cmp	r5, r6
 801dfe8:	d11a      	bne.n	801e020 <_printf_common+0xc8>
 801dfea:	2000      	movs	r0, #0
 801dfec:	e008      	b.n	801e000 <_printf_common+0xa8>
 801dfee:	2301      	movs	r3, #1
 801dff0:	4652      	mov	r2, sl
 801dff2:	4649      	mov	r1, r9
 801dff4:	4638      	mov	r0, r7
 801dff6:	47c0      	blx	r8
 801dff8:	3001      	adds	r0, #1
 801dffa:	d103      	bne.n	801e004 <_printf_common+0xac>
 801dffc:	f04f 30ff 	mov.w	r0, #4294967295
 801e000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e004:	3501      	adds	r5, #1
 801e006:	e7c6      	b.n	801df96 <_printf_common+0x3e>
 801e008:	18e1      	adds	r1, r4, r3
 801e00a:	1c5a      	adds	r2, r3, #1
 801e00c:	2030      	movs	r0, #48	; 0x30
 801e00e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e012:	4422      	add	r2, r4
 801e014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e01c:	3302      	adds	r3, #2
 801e01e:	e7c7      	b.n	801dfb0 <_printf_common+0x58>
 801e020:	2301      	movs	r3, #1
 801e022:	4622      	mov	r2, r4
 801e024:	4649      	mov	r1, r9
 801e026:	4638      	mov	r0, r7
 801e028:	47c0      	blx	r8
 801e02a:	3001      	adds	r0, #1
 801e02c:	d0e6      	beq.n	801dffc <_printf_common+0xa4>
 801e02e:	3601      	adds	r6, #1
 801e030:	e7d9      	b.n	801dfe6 <_printf_common+0x8e>
	...

0801e034 <_printf_i>:
 801e034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e038:	7e0f      	ldrb	r7, [r1, #24]
 801e03a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e03c:	2f78      	cmp	r7, #120	; 0x78
 801e03e:	4691      	mov	r9, r2
 801e040:	4680      	mov	r8, r0
 801e042:	460c      	mov	r4, r1
 801e044:	469a      	mov	sl, r3
 801e046:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e04a:	d807      	bhi.n	801e05c <_printf_i+0x28>
 801e04c:	2f62      	cmp	r7, #98	; 0x62
 801e04e:	d80a      	bhi.n	801e066 <_printf_i+0x32>
 801e050:	2f00      	cmp	r7, #0
 801e052:	f000 80d8 	beq.w	801e206 <_printf_i+0x1d2>
 801e056:	2f58      	cmp	r7, #88	; 0x58
 801e058:	f000 80a3 	beq.w	801e1a2 <_printf_i+0x16e>
 801e05c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e064:	e03a      	b.n	801e0dc <_printf_i+0xa8>
 801e066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e06a:	2b15      	cmp	r3, #21
 801e06c:	d8f6      	bhi.n	801e05c <_printf_i+0x28>
 801e06e:	a101      	add	r1, pc, #4	; (adr r1, 801e074 <_printf_i+0x40>)
 801e070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e074:	0801e0cd 	.word	0x0801e0cd
 801e078:	0801e0e1 	.word	0x0801e0e1
 801e07c:	0801e05d 	.word	0x0801e05d
 801e080:	0801e05d 	.word	0x0801e05d
 801e084:	0801e05d 	.word	0x0801e05d
 801e088:	0801e05d 	.word	0x0801e05d
 801e08c:	0801e0e1 	.word	0x0801e0e1
 801e090:	0801e05d 	.word	0x0801e05d
 801e094:	0801e05d 	.word	0x0801e05d
 801e098:	0801e05d 	.word	0x0801e05d
 801e09c:	0801e05d 	.word	0x0801e05d
 801e0a0:	0801e1ed 	.word	0x0801e1ed
 801e0a4:	0801e111 	.word	0x0801e111
 801e0a8:	0801e1cf 	.word	0x0801e1cf
 801e0ac:	0801e05d 	.word	0x0801e05d
 801e0b0:	0801e05d 	.word	0x0801e05d
 801e0b4:	0801e20f 	.word	0x0801e20f
 801e0b8:	0801e05d 	.word	0x0801e05d
 801e0bc:	0801e111 	.word	0x0801e111
 801e0c0:	0801e05d 	.word	0x0801e05d
 801e0c4:	0801e05d 	.word	0x0801e05d
 801e0c8:	0801e1d7 	.word	0x0801e1d7
 801e0cc:	682b      	ldr	r3, [r5, #0]
 801e0ce:	1d1a      	adds	r2, r3, #4
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	602a      	str	r2, [r5, #0]
 801e0d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e0d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e0dc:	2301      	movs	r3, #1
 801e0de:	e0a3      	b.n	801e228 <_printf_i+0x1f4>
 801e0e0:	6820      	ldr	r0, [r4, #0]
 801e0e2:	6829      	ldr	r1, [r5, #0]
 801e0e4:	0606      	lsls	r6, r0, #24
 801e0e6:	f101 0304 	add.w	r3, r1, #4
 801e0ea:	d50a      	bpl.n	801e102 <_printf_i+0xce>
 801e0ec:	680e      	ldr	r6, [r1, #0]
 801e0ee:	602b      	str	r3, [r5, #0]
 801e0f0:	2e00      	cmp	r6, #0
 801e0f2:	da03      	bge.n	801e0fc <_printf_i+0xc8>
 801e0f4:	232d      	movs	r3, #45	; 0x2d
 801e0f6:	4276      	negs	r6, r6
 801e0f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e0fc:	485e      	ldr	r0, [pc, #376]	; (801e278 <_printf_i+0x244>)
 801e0fe:	230a      	movs	r3, #10
 801e100:	e019      	b.n	801e136 <_printf_i+0x102>
 801e102:	680e      	ldr	r6, [r1, #0]
 801e104:	602b      	str	r3, [r5, #0]
 801e106:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e10a:	bf18      	it	ne
 801e10c:	b236      	sxthne	r6, r6
 801e10e:	e7ef      	b.n	801e0f0 <_printf_i+0xbc>
 801e110:	682b      	ldr	r3, [r5, #0]
 801e112:	6820      	ldr	r0, [r4, #0]
 801e114:	1d19      	adds	r1, r3, #4
 801e116:	6029      	str	r1, [r5, #0]
 801e118:	0601      	lsls	r1, r0, #24
 801e11a:	d501      	bpl.n	801e120 <_printf_i+0xec>
 801e11c:	681e      	ldr	r6, [r3, #0]
 801e11e:	e002      	b.n	801e126 <_printf_i+0xf2>
 801e120:	0646      	lsls	r6, r0, #25
 801e122:	d5fb      	bpl.n	801e11c <_printf_i+0xe8>
 801e124:	881e      	ldrh	r6, [r3, #0]
 801e126:	4854      	ldr	r0, [pc, #336]	; (801e278 <_printf_i+0x244>)
 801e128:	2f6f      	cmp	r7, #111	; 0x6f
 801e12a:	bf0c      	ite	eq
 801e12c:	2308      	moveq	r3, #8
 801e12e:	230a      	movne	r3, #10
 801e130:	2100      	movs	r1, #0
 801e132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e136:	6865      	ldr	r5, [r4, #4]
 801e138:	60a5      	str	r5, [r4, #8]
 801e13a:	2d00      	cmp	r5, #0
 801e13c:	bfa2      	ittt	ge
 801e13e:	6821      	ldrge	r1, [r4, #0]
 801e140:	f021 0104 	bicge.w	r1, r1, #4
 801e144:	6021      	strge	r1, [r4, #0]
 801e146:	b90e      	cbnz	r6, 801e14c <_printf_i+0x118>
 801e148:	2d00      	cmp	r5, #0
 801e14a:	d04d      	beq.n	801e1e8 <_printf_i+0x1b4>
 801e14c:	4615      	mov	r5, r2
 801e14e:	fbb6 f1f3 	udiv	r1, r6, r3
 801e152:	fb03 6711 	mls	r7, r3, r1, r6
 801e156:	5dc7      	ldrb	r7, [r0, r7]
 801e158:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e15c:	4637      	mov	r7, r6
 801e15e:	42bb      	cmp	r3, r7
 801e160:	460e      	mov	r6, r1
 801e162:	d9f4      	bls.n	801e14e <_printf_i+0x11a>
 801e164:	2b08      	cmp	r3, #8
 801e166:	d10b      	bne.n	801e180 <_printf_i+0x14c>
 801e168:	6823      	ldr	r3, [r4, #0]
 801e16a:	07de      	lsls	r6, r3, #31
 801e16c:	d508      	bpl.n	801e180 <_printf_i+0x14c>
 801e16e:	6923      	ldr	r3, [r4, #16]
 801e170:	6861      	ldr	r1, [r4, #4]
 801e172:	4299      	cmp	r1, r3
 801e174:	bfde      	ittt	le
 801e176:	2330      	movle	r3, #48	; 0x30
 801e178:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e17c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e180:	1b52      	subs	r2, r2, r5
 801e182:	6122      	str	r2, [r4, #16]
 801e184:	f8cd a000 	str.w	sl, [sp]
 801e188:	464b      	mov	r3, r9
 801e18a:	aa03      	add	r2, sp, #12
 801e18c:	4621      	mov	r1, r4
 801e18e:	4640      	mov	r0, r8
 801e190:	f7ff fee2 	bl	801df58 <_printf_common>
 801e194:	3001      	adds	r0, #1
 801e196:	d14c      	bne.n	801e232 <_printf_i+0x1fe>
 801e198:	f04f 30ff 	mov.w	r0, #4294967295
 801e19c:	b004      	add	sp, #16
 801e19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1a2:	4835      	ldr	r0, [pc, #212]	; (801e278 <_printf_i+0x244>)
 801e1a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e1a8:	6829      	ldr	r1, [r5, #0]
 801e1aa:	6823      	ldr	r3, [r4, #0]
 801e1ac:	f851 6b04 	ldr.w	r6, [r1], #4
 801e1b0:	6029      	str	r1, [r5, #0]
 801e1b2:	061d      	lsls	r5, r3, #24
 801e1b4:	d514      	bpl.n	801e1e0 <_printf_i+0x1ac>
 801e1b6:	07df      	lsls	r7, r3, #31
 801e1b8:	bf44      	itt	mi
 801e1ba:	f043 0320 	orrmi.w	r3, r3, #32
 801e1be:	6023      	strmi	r3, [r4, #0]
 801e1c0:	b91e      	cbnz	r6, 801e1ca <_printf_i+0x196>
 801e1c2:	6823      	ldr	r3, [r4, #0]
 801e1c4:	f023 0320 	bic.w	r3, r3, #32
 801e1c8:	6023      	str	r3, [r4, #0]
 801e1ca:	2310      	movs	r3, #16
 801e1cc:	e7b0      	b.n	801e130 <_printf_i+0xfc>
 801e1ce:	6823      	ldr	r3, [r4, #0]
 801e1d0:	f043 0320 	orr.w	r3, r3, #32
 801e1d4:	6023      	str	r3, [r4, #0]
 801e1d6:	2378      	movs	r3, #120	; 0x78
 801e1d8:	4828      	ldr	r0, [pc, #160]	; (801e27c <_printf_i+0x248>)
 801e1da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e1de:	e7e3      	b.n	801e1a8 <_printf_i+0x174>
 801e1e0:	0659      	lsls	r1, r3, #25
 801e1e2:	bf48      	it	mi
 801e1e4:	b2b6      	uxthmi	r6, r6
 801e1e6:	e7e6      	b.n	801e1b6 <_printf_i+0x182>
 801e1e8:	4615      	mov	r5, r2
 801e1ea:	e7bb      	b.n	801e164 <_printf_i+0x130>
 801e1ec:	682b      	ldr	r3, [r5, #0]
 801e1ee:	6826      	ldr	r6, [r4, #0]
 801e1f0:	6961      	ldr	r1, [r4, #20]
 801e1f2:	1d18      	adds	r0, r3, #4
 801e1f4:	6028      	str	r0, [r5, #0]
 801e1f6:	0635      	lsls	r5, r6, #24
 801e1f8:	681b      	ldr	r3, [r3, #0]
 801e1fa:	d501      	bpl.n	801e200 <_printf_i+0x1cc>
 801e1fc:	6019      	str	r1, [r3, #0]
 801e1fe:	e002      	b.n	801e206 <_printf_i+0x1d2>
 801e200:	0670      	lsls	r0, r6, #25
 801e202:	d5fb      	bpl.n	801e1fc <_printf_i+0x1c8>
 801e204:	8019      	strh	r1, [r3, #0]
 801e206:	2300      	movs	r3, #0
 801e208:	6123      	str	r3, [r4, #16]
 801e20a:	4615      	mov	r5, r2
 801e20c:	e7ba      	b.n	801e184 <_printf_i+0x150>
 801e20e:	682b      	ldr	r3, [r5, #0]
 801e210:	1d1a      	adds	r2, r3, #4
 801e212:	602a      	str	r2, [r5, #0]
 801e214:	681d      	ldr	r5, [r3, #0]
 801e216:	6862      	ldr	r2, [r4, #4]
 801e218:	2100      	movs	r1, #0
 801e21a:	4628      	mov	r0, r5
 801e21c:	f7e1 ffe0 	bl	80001e0 <memchr>
 801e220:	b108      	cbz	r0, 801e226 <_printf_i+0x1f2>
 801e222:	1b40      	subs	r0, r0, r5
 801e224:	6060      	str	r0, [r4, #4]
 801e226:	6863      	ldr	r3, [r4, #4]
 801e228:	6123      	str	r3, [r4, #16]
 801e22a:	2300      	movs	r3, #0
 801e22c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e230:	e7a8      	b.n	801e184 <_printf_i+0x150>
 801e232:	6923      	ldr	r3, [r4, #16]
 801e234:	462a      	mov	r2, r5
 801e236:	4649      	mov	r1, r9
 801e238:	4640      	mov	r0, r8
 801e23a:	47d0      	blx	sl
 801e23c:	3001      	adds	r0, #1
 801e23e:	d0ab      	beq.n	801e198 <_printf_i+0x164>
 801e240:	6823      	ldr	r3, [r4, #0]
 801e242:	079b      	lsls	r3, r3, #30
 801e244:	d413      	bmi.n	801e26e <_printf_i+0x23a>
 801e246:	68e0      	ldr	r0, [r4, #12]
 801e248:	9b03      	ldr	r3, [sp, #12]
 801e24a:	4298      	cmp	r0, r3
 801e24c:	bfb8      	it	lt
 801e24e:	4618      	movlt	r0, r3
 801e250:	e7a4      	b.n	801e19c <_printf_i+0x168>
 801e252:	2301      	movs	r3, #1
 801e254:	4632      	mov	r2, r6
 801e256:	4649      	mov	r1, r9
 801e258:	4640      	mov	r0, r8
 801e25a:	47d0      	blx	sl
 801e25c:	3001      	adds	r0, #1
 801e25e:	d09b      	beq.n	801e198 <_printf_i+0x164>
 801e260:	3501      	adds	r5, #1
 801e262:	68e3      	ldr	r3, [r4, #12]
 801e264:	9903      	ldr	r1, [sp, #12]
 801e266:	1a5b      	subs	r3, r3, r1
 801e268:	42ab      	cmp	r3, r5
 801e26a:	dcf2      	bgt.n	801e252 <_printf_i+0x21e>
 801e26c:	e7eb      	b.n	801e246 <_printf_i+0x212>
 801e26e:	2500      	movs	r5, #0
 801e270:	f104 0619 	add.w	r6, r4, #25
 801e274:	e7f5      	b.n	801e262 <_printf_i+0x22e>
 801e276:	bf00      	nop
 801e278:	08029cc1 	.word	0x08029cc1
 801e27c:	08029cd2 	.word	0x08029cd2

0801e280 <__swbuf_r>:
 801e280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e282:	460e      	mov	r6, r1
 801e284:	4614      	mov	r4, r2
 801e286:	4605      	mov	r5, r0
 801e288:	b118      	cbz	r0, 801e292 <__swbuf_r+0x12>
 801e28a:	6983      	ldr	r3, [r0, #24]
 801e28c:	b90b      	cbnz	r3, 801e292 <__swbuf_r+0x12>
 801e28e:	f000 f9d9 	bl	801e644 <__sinit>
 801e292:	4b21      	ldr	r3, [pc, #132]	; (801e318 <__swbuf_r+0x98>)
 801e294:	429c      	cmp	r4, r3
 801e296:	d12b      	bne.n	801e2f0 <__swbuf_r+0x70>
 801e298:	686c      	ldr	r4, [r5, #4]
 801e29a:	69a3      	ldr	r3, [r4, #24]
 801e29c:	60a3      	str	r3, [r4, #8]
 801e29e:	89a3      	ldrh	r3, [r4, #12]
 801e2a0:	071a      	lsls	r2, r3, #28
 801e2a2:	d52f      	bpl.n	801e304 <__swbuf_r+0x84>
 801e2a4:	6923      	ldr	r3, [r4, #16]
 801e2a6:	b36b      	cbz	r3, 801e304 <__swbuf_r+0x84>
 801e2a8:	6923      	ldr	r3, [r4, #16]
 801e2aa:	6820      	ldr	r0, [r4, #0]
 801e2ac:	1ac0      	subs	r0, r0, r3
 801e2ae:	6963      	ldr	r3, [r4, #20]
 801e2b0:	b2f6      	uxtb	r6, r6
 801e2b2:	4283      	cmp	r3, r0
 801e2b4:	4637      	mov	r7, r6
 801e2b6:	dc04      	bgt.n	801e2c2 <__swbuf_r+0x42>
 801e2b8:	4621      	mov	r1, r4
 801e2ba:	4628      	mov	r0, r5
 801e2bc:	f000 f92e 	bl	801e51c <_fflush_r>
 801e2c0:	bb30      	cbnz	r0, 801e310 <__swbuf_r+0x90>
 801e2c2:	68a3      	ldr	r3, [r4, #8]
 801e2c4:	3b01      	subs	r3, #1
 801e2c6:	60a3      	str	r3, [r4, #8]
 801e2c8:	6823      	ldr	r3, [r4, #0]
 801e2ca:	1c5a      	adds	r2, r3, #1
 801e2cc:	6022      	str	r2, [r4, #0]
 801e2ce:	701e      	strb	r6, [r3, #0]
 801e2d0:	6963      	ldr	r3, [r4, #20]
 801e2d2:	3001      	adds	r0, #1
 801e2d4:	4283      	cmp	r3, r0
 801e2d6:	d004      	beq.n	801e2e2 <__swbuf_r+0x62>
 801e2d8:	89a3      	ldrh	r3, [r4, #12]
 801e2da:	07db      	lsls	r3, r3, #31
 801e2dc:	d506      	bpl.n	801e2ec <__swbuf_r+0x6c>
 801e2de:	2e0a      	cmp	r6, #10
 801e2e0:	d104      	bne.n	801e2ec <__swbuf_r+0x6c>
 801e2e2:	4621      	mov	r1, r4
 801e2e4:	4628      	mov	r0, r5
 801e2e6:	f000 f919 	bl	801e51c <_fflush_r>
 801e2ea:	b988      	cbnz	r0, 801e310 <__swbuf_r+0x90>
 801e2ec:	4638      	mov	r0, r7
 801e2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e2f0:	4b0a      	ldr	r3, [pc, #40]	; (801e31c <__swbuf_r+0x9c>)
 801e2f2:	429c      	cmp	r4, r3
 801e2f4:	d101      	bne.n	801e2fa <__swbuf_r+0x7a>
 801e2f6:	68ac      	ldr	r4, [r5, #8]
 801e2f8:	e7cf      	b.n	801e29a <__swbuf_r+0x1a>
 801e2fa:	4b09      	ldr	r3, [pc, #36]	; (801e320 <__swbuf_r+0xa0>)
 801e2fc:	429c      	cmp	r4, r3
 801e2fe:	bf08      	it	eq
 801e300:	68ec      	ldreq	r4, [r5, #12]
 801e302:	e7ca      	b.n	801e29a <__swbuf_r+0x1a>
 801e304:	4621      	mov	r1, r4
 801e306:	4628      	mov	r0, r5
 801e308:	f000 f80c 	bl	801e324 <__swsetup_r>
 801e30c:	2800      	cmp	r0, #0
 801e30e:	d0cb      	beq.n	801e2a8 <__swbuf_r+0x28>
 801e310:	f04f 37ff 	mov.w	r7, #4294967295
 801e314:	e7ea      	b.n	801e2ec <__swbuf_r+0x6c>
 801e316:	bf00      	nop
 801e318:	08029d04 	.word	0x08029d04
 801e31c:	08029d24 	.word	0x08029d24
 801e320:	08029ce4 	.word	0x08029ce4

0801e324 <__swsetup_r>:
 801e324:	4b32      	ldr	r3, [pc, #200]	; (801e3f0 <__swsetup_r+0xcc>)
 801e326:	b570      	push	{r4, r5, r6, lr}
 801e328:	681d      	ldr	r5, [r3, #0]
 801e32a:	4606      	mov	r6, r0
 801e32c:	460c      	mov	r4, r1
 801e32e:	b125      	cbz	r5, 801e33a <__swsetup_r+0x16>
 801e330:	69ab      	ldr	r3, [r5, #24]
 801e332:	b913      	cbnz	r3, 801e33a <__swsetup_r+0x16>
 801e334:	4628      	mov	r0, r5
 801e336:	f000 f985 	bl	801e644 <__sinit>
 801e33a:	4b2e      	ldr	r3, [pc, #184]	; (801e3f4 <__swsetup_r+0xd0>)
 801e33c:	429c      	cmp	r4, r3
 801e33e:	d10f      	bne.n	801e360 <__swsetup_r+0x3c>
 801e340:	686c      	ldr	r4, [r5, #4]
 801e342:	89a3      	ldrh	r3, [r4, #12]
 801e344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e348:	0719      	lsls	r1, r3, #28
 801e34a:	d42c      	bmi.n	801e3a6 <__swsetup_r+0x82>
 801e34c:	06dd      	lsls	r5, r3, #27
 801e34e:	d411      	bmi.n	801e374 <__swsetup_r+0x50>
 801e350:	2309      	movs	r3, #9
 801e352:	6033      	str	r3, [r6, #0]
 801e354:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e358:	81a3      	strh	r3, [r4, #12]
 801e35a:	f04f 30ff 	mov.w	r0, #4294967295
 801e35e:	e03e      	b.n	801e3de <__swsetup_r+0xba>
 801e360:	4b25      	ldr	r3, [pc, #148]	; (801e3f8 <__swsetup_r+0xd4>)
 801e362:	429c      	cmp	r4, r3
 801e364:	d101      	bne.n	801e36a <__swsetup_r+0x46>
 801e366:	68ac      	ldr	r4, [r5, #8]
 801e368:	e7eb      	b.n	801e342 <__swsetup_r+0x1e>
 801e36a:	4b24      	ldr	r3, [pc, #144]	; (801e3fc <__swsetup_r+0xd8>)
 801e36c:	429c      	cmp	r4, r3
 801e36e:	bf08      	it	eq
 801e370:	68ec      	ldreq	r4, [r5, #12]
 801e372:	e7e6      	b.n	801e342 <__swsetup_r+0x1e>
 801e374:	0758      	lsls	r0, r3, #29
 801e376:	d512      	bpl.n	801e39e <__swsetup_r+0x7a>
 801e378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e37a:	b141      	cbz	r1, 801e38e <__swsetup_r+0x6a>
 801e37c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e380:	4299      	cmp	r1, r3
 801e382:	d002      	beq.n	801e38a <__swsetup_r+0x66>
 801e384:	4630      	mov	r0, r6
 801e386:	f000 fa63 	bl	801e850 <_free_r>
 801e38a:	2300      	movs	r3, #0
 801e38c:	6363      	str	r3, [r4, #52]	; 0x34
 801e38e:	89a3      	ldrh	r3, [r4, #12]
 801e390:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e394:	81a3      	strh	r3, [r4, #12]
 801e396:	2300      	movs	r3, #0
 801e398:	6063      	str	r3, [r4, #4]
 801e39a:	6923      	ldr	r3, [r4, #16]
 801e39c:	6023      	str	r3, [r4, #0]
 801e39e:	89a3      	ldrh	r3, [r4, #12]
 801e3a0:	f043 0308 	orr.w	r3, r3, #8
 801e3a4:	81a3      	strh	r3, [r4, #12]
 801e3a6:	6923      	ldr	r3, [r4, #16]
 801e3a8:	b94b      	cbnz	r3, 801e3be <__swsetup_r+0x9a>
 801e3aa:	89a3      	ldrh	r3, [r4, #12]
 801e3ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e3b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e3b4:	d003      	beq.n	801e3be <__swsetup_r+0x9a>
 801e3b6:	4621      	mov	r1, r4
 801e3b8:	4630      	mov	r0, r6
 801e3ba:	f000 fa09 	bl	801e7d0 <__smakebuf_r>
 801e3be:	89a0      	ldrh	r0, [r4, #12]
 801e3c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e3c4:	f010 0301 	ands.w	r3, r0, #1
 801e3c8:	d00a      	beq.n	801e3e0 <__swsetup_r+0xbc>
 801e3ca:	2300      	movs	r3, #0
 801e3cc:	60a3      	str	r3, [r4, #8]
 801e3ce:	6963      	ldr	r3, [r4, #20]
 801e3d0:	425b      	negs	r3, r3
 801e3d2:	61a3      	str	r3, [r4, #24]
 801e3d4:	6923      	ldr	r3, [r4, #16]
 801e3d6:	b943      	cbnz	r3, 801e3ea <__swsetup_r+0xc6>
 801e3d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e3dc:	d1ba      	bne.n	801e354 <__swsetup_r+0x30>
 801e3de:	bd70      	pop	{r4, r5, r6, pc}
 801e3e0:	0781      	lsls	r1, r0, #30
 801e3e2:	bf58      	it	pl
 801e3e4:	6963      	ldrpl	r3, [r4, #20]
 801e3e6:	60a3      	str	r3, [r4, #8]
 801e3e8:	e7f4      	b.n	801e3d4 <__swsetup_r+0xb0>
 801e3ea:	2000      	movs	r0, #0
 801e3ec:	e7f7      	b.n	801e3de <__swsetup_r+0xba>
 801e3ee:	bf00      	nop
 801e3f0:	20000198 	.word	0x20000198
 801e3f4:	08029d04 	.word	0x08029d04
 801e3f8:	08029d24 	.word	0x08029d24
 801e3fc:	08029ce4 	.word	0x08029ce4

0801e400 <abort>:
 801e400:	b508      	push	{r3, lr}
 801e402:	2006      	movs	r0, #6
 801e404:	f000 fb3c 	bl	801ea80 <raise>
 801e408:	2001      	movs	r0, #1
 801e40a:	f7f7 fee7 	bl	80161dc <_exit>
	...

0801e410 <__sflush_r>:
 801e410:	898a      	ldrh	r2, [r1, #12]
 801e412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e416:	4605      	mov	r5, r0
 801e418:	0710      	lsls	r0, r2, #28
 801e41a:	460c      	mov	r4, r1
 801e41c:	d458      	bmi.n	801e4d0 <__sflush_r+0xc0>
 801e41e:	684b      	ldr	r3, [r1, #4]
 801e420:	2b00      	cmp	r3, #0
 801e422:	dc05      	bgt.n	801e430 <__sflush_r+0x20>
 801e424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e426:	2b00      	cmp	r3, #0
 801e428:	dc02      	bgt.n	801e430 <__sflush_r+0x20>
 801e42a:	2000      	movs	r0, #0
 801e42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e432:	2e00      	cmp	r6, #0
 801e434:	d0f9      	beq.n	801e42a <__sflush_r+0x1a>
 801e436:	2300      	movs	r3, #0
 801e438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e43c:	682f      	ldr	r7, [r5, #0]
 801e43e:	602b      	str	r3, [r5, #0]
 801e440:	d032      	beq.n	801e4a8 <__sflush_r+0x98>
 801e442:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e444:	89a3      	ldrh	r3, [r4, #12]
 801e446:	075a      	lsls	r2, r3, #29
 801e448:	d505      	bpl.n	801e456 <__sflush_r+0x46>
 801e44a:	6863      	ldr	r3, [r4, #4]
 801e44c:	1ac0      	subs	r0, r0, r3
 801e44e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e450:	b10b      	cbz	r3, 801e456 <__sflush_r+0x46>
 801e452:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e454:	1ac0      	subs	r0, r0, r3
 801e456:	2300      	movs	r3, #0
 801e458:	4602      	mov	r2, r0
 801e45a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e45c:	6a21      	ldr	r1, [r4, #32]
 801e45e:	4628      	mov	r0, r5
 801e460:	47b0      	blx	r6
 801e462:	1c43      	adds	r3, r0, #1
 801e464:	89a3      	ldrh	r3, [r4, #12]
 801e466:	d106      	bne.n	801e476 <__sflush_r+0x66>
 801e468:	6829      	ldr	r1, [r5, #0]
 801e46a:	291d      	cmp	r1, #29
 801e46c:	d82c      	bhi.n	801e4c8 <__sflush_r+0xb8>
 801e46e:	4a2a      	ldr	r2, [pc, #168]	; (801e518 <__sflush_r+0x108>)
 801e470:	40ca      	lsrs	r2, r1
 801e472:	07d6      	lsls	r6, r2, #31
 801e474:	d528      	bpl.n	801e4c8 <__sflush_r+0xb8>
 801e476:	2200      	movs	r2, #0
 801e478:	6062      	str	r2, [r4, #4]
 801e47a:	04d9      	lsls	r1, r3, #19
 801e47c:	6922      	ldr	r2, [r4, #16]
 801e47e:	6022      	str	r2, [r4, #0]
 801e480:	d504      	bpl.n	801e48c <__sflush_r+0x7c>
 801e482:	1c42      	adds	r2, r0, #1
 801e484:	d101      	bne.n	801e48a <__sflush_r+0x7a>
 801e486:	682b      	ldr	r3, [r5, #0]
 801e488:	b903      	cbnz	r3, 801e48c <__sflush_r+0x7c>
 801e48a:	6560      	str	r0, [r4, #84]	; 0x54
 801e48c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e48e:	602f      	str	r7, [r5, #0]
 801e490:	2900      	cmp	r1, #0
 801e492:	d0ca      	beq.n	801e42a <__sflush_r+0x1a>
 801e494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e498:	4299      	cmp	r1, r3
 801e49a:	d002      	beq.n	801e4a2 <__sflush_r+0x92>
 801e49c:	4628      	mov	r0, r5
 801e49e:	f000 f9d7 	bl	801e850 <_free_r>
 801e4a2:	2000      	movs	r0, #0
 801e4a4:	6360      	str	r0, [r4, #52]	; 0x34
 801e4a6:	e7c1      	b.n	801e42c <__sflush_r+0x1c>
 801e4a8:	6a21      	ldr	r1, [r4, #32]
 801e4aa:	2301      	movs	r3, #1
 801e4ac:	4628      	mov	r0, r5
 801e4ae:	47b0      	blx	r6
 801e4b0:	1c41      	adds	r1, r0, #1
 801e4b2:	d1c7      	bne.n	801e444 <__sflush_r+0x34>
 801e4b4:	682b      	ldr	r3, [r5, #0]
 801e4b6:	2b00      	cmp	r3, #0
 801e4b8:	d0c4      	beq.n	801e444 <__sflush_r+0x34>
 801e4ba:	2b1d      	cmp	r3, #29
 801e4bc:	d001      	beq.n	801e4c2 <__sflush_r+0xb2>
 801e4be:	2b16      	cmp	r3, #22
 801e4c0:	d101      	bne.n	801e4c6 <__sflush_r+0xb6>
 801e4c2:	602f      	str	r7, [r5, #0]
 801e4c4:	e7b1      	b.n	801e42a <__sflush_r+0x1a>
 801e4c6:	89a3      	ldrh	r3, [r4, #12]
 801e4c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e4cc:	81a3      	strh	r3, [r4, #12]
 801e4ce:	e7ad      	b.n	801e42c <__sflush_r+0x1c>
 801e4d0:	690f      	ldr	r7, [r1, #16]
 801e4d2:	2f00      	cmp	r7, #0
 801e4d4:	d0a9      	beq.n	801e42a <__sflush_r+0x1a>
 801e4d6:	0793      	lsls	r3, r2, #30
 801e4d8:	680e      	ldr	r6, [r1, #0]
 801e4da:	bf08      	it	eq
 801e4dc:	694b      	ldreq	r3, [r1, #20]
 801e4de:	600f      	str	r7, [r1, #0]
 801e4e0:	bf18      	it	ne
 801e4e2:	2300      	movne	r3, #0
 801e4e4:	eba6 0807 	sub.w	r8, r6, r7
 801e4e8:	608b      	str	r3, [r1, #8]
 801e4ea:	f1b8 0f00 	cmp.w	r8, #0
 801e4ee:	dd9c      	ble.n	801e42a <__sflush_r+0x1a>
 801e4f0:	6a21      	ldr	r1, [r4, #32]
 801e4f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e4f4:	4643      	mov	r3, r8
 801e4f6:	463a      	mov	r2, r7
 801e4f8:	4628      	mov	r0, r5
 801e4fa:	47b0      	blx	r6
 801e4fc:	2800      	cmp	r0, #0
 801e4fe:	dc06      	bgt.n	801e50e <__sflush_r+0xfe>
 801e500:	89a3      	ldrh	r3, [r4, #12]
 801e502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e506:	81a3      	strh	r3, [r4, #12]
 801e508:	f04f 30ff 	mov.w	r0, #4294967295
 801e50c:	e78e      	b.n	801e42c <__sflush_r+0x1c>
 801e50e:	4407      	add	r7, r0
 801e510:	eba8 0800 	sub.w	r8, r8, r0
 801e514:	e7e9      	b.n	801e4ea <__sflush_r+0xda>
 801e516:	bf00      	nop
 801e518:	20400001 	.word	0x20400001

0801e51c <_fflush_r>:
 801e51c:	b538      	push	{r3, r4, r5, lr}
 801e51e:	690b      	ldr	r3, [r1, #16]
 801e520:	4605      	mov	r5, r0
 801e522:	460c      	mov	r4, r1
 801e524:	b913      	cbnz	r3, 801e52c <_fflush_r+0x10>
 801e526:	2500      	movs	r5, #0
 801e528:	4628      	mov	r0, r5
 801e52a:	bd38      	pop	{r3, r4, r5, pc}
 801e52c:	b118      	cbz	r0, 801e536 <_fflush_r+0x1a>
 801e52e:	6983      	ldr	r3, [r0, #24]
 801e530:	b90b      	cbnz	r3, 801e536 <_fflush_r+0x1a>
 801e532:	f000 f887 	bl	801e644 <__sinit>
 801e536:	4b14      	ldr	r3, [pc, #80]	; (801e588 <_fflush_r+0x6c>)
 801e538:	429c      	cmp	r4, r3
 801e53a:	d11b      	bne.n	801e574 <_fflush_r+0x58>
 801e53c:	686c      	ldr	r4, [r5, #4]
 801e53e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e542:	2b00      	cmp	r3, #0
 801e544:	d0ef      	beq.n	801e526 <_fflush_r+0xa>
 801e546:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e548:	07d0      	lsls	r0, r2, #31
 801e54a:	d404      	bmi.n	801e556 <_fflush_r+0x3a>
 801e54c:	0599      	lsls	r1, r3, #22
 801e54e:	d402      	bmi.n	801e556 <_fflush_r+0x3a>
 801e550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e552:	f000 f915 	bl	801e780 <__retarget_lock_acquire_recursive>
 801e556:	4628      	mov	r0, r5
 801e558:	4621      	mov	r1, r4
 801e55a:	f7ff ff59 	bl	801e410 <__sflush_r>
 801e55e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e560:	07da      	lsls	r2, r3, #31
 801e562:	4605      	mov	r5, r0
 801e564:	d4e0      	bmi.n	801e528 <_fflush_r+0xc>
 801e566:	89a3      	ldrh	r3, [r4, #12]
 801e568:	059b      	lsls	r3, r3, #22
 801e56a:	d4dd      	bmi.n	801e528 <_fflush_r+0xc>
 801e56c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e56e:	f000 f908 	bl	801e782 <__retarget_lock_release_recursive>
 801e572:	e7d9      	b.n	801e528 <_fflush_r+0xc>
 801e574:	4b05      	ldr	r3, [pc, #20]	; (801e58c <_fflush_r+0x70>)
 801e576:	429c      	cmp	r4, r3
 801e578:	d101      	bne.n	801e57e <_fflush_r+0x62>
 801e57a:	68ac      	ldr	r4, [r5, #8]
 801e57c:	e7df      	b.n	801e53e <_fflush_r+0x22>
 801e57e:	4b04      	ldr	r3, [pc, #16]	; (801e590 <_fflush_r+0x74>)
 801e580:	429c      	cmp	r4, r3
 801e582:	bf08      	it	eq
 801e584:	68ec      	ldreq	r4, [r5, #12]
 801e586:	e7da      	b.n	801e53e <_fflush_r+0x22>
 801e588:	08029d04 	.word	0x08029d04
 801e58c:	08029d24 	.word	0x08029d24
 801e590:	08029ce4 	.word	0x08029ce4

0801e594 <std>:
 801e594:	2300      	movs	r3, #0
 801e596:	b510      	push	{r4, lr}
 801e598:	4604      	mov	r4, r0
 801e59a:	e9c0 3300 	strd	r3, r3, [r0]
 801e59e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e5a2:	6083      	str	r3, [r0, #8]
 801e5a4:	8181      	strh	r1, [r0, #12]
 801e5a6:	6643      	str	r3, [r0, #100]	; 0x64
 801e5a8:	81c2      	strh	r2, [r0, #14]
 801e5aa:	6183      	str	r3, [r0, #24]
 801e5ac:	4619      	mov	r1, r3
 801e5ae:	2208      	movs	r2, #8
 801e5b0:	305c      	adds	r0, #92	; 0x5c
 801e5b2:	f7ff fb6f 	bl	801dc94 <memset>
 801e5b6:	4b05      	ldr	r3, [pc, #20]	; (801e5cc <std+0x38>)
 801e5b8:	6263      	str	r3, [r4, #36]	; 0x24
 801e5ba:	4b05      	ldr	r3, [pc, #20]	; (801e5d0 <std+0x3c>)
 801e5bc:	62a3      	str	r3, [r4, #40]	; 0x28
 801e5be:	4b05      	ldr	r3, [pc, #20]	; (801e5d4 <std+0x40>)
 801e5c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e5c2:	4b05      	ldr	r3, [pc, #20]	; (801e5d8 <std+0x44>)
 801e5c4:	6224      	str	r4, [r4, #32]
 801e5c6:	6323      	str	r3, [r4, #48]	; 0x30
 801e5c8:	bd10      	pop	{r4, pc}
 801e5ca:	bf00      	nop
 801e5cc:	0801eab9 	.word	0x0801eab9
 801e5d0:	0801eadb 	.word	0x0801eadb
 801e5d4:	0801eb13 	.word	0x0801eb13
 801e5d8:	0801eb37 	.word	0x0801eb37

0801e5dc <_cleanup_r>:
 801e5dc:	4901      	ldr	r1, [pc, #4]	; (801e5e4 <_cleanup_r+0x8>)
 801e5de:	f000 b8af 	b.w	801e740 <_fwalk_reent>
 801e5e2:	bf00      	nop
 801e5e4:	0801e51d 	.word	0x0801e51d

0801e5e8 <__sfmoreglue>:
 801e5e8:	b570      	push	{r4, r5, r6, lr}
 801e5ea:	2268      	movs	r2, #104	; 0x68
 801e5ec:	1e4d      	subs	r5, r1, #1
 801e5ee:	4355      	muls	r5, r2
 801e5f0:	460e      	mov	r6, r1
 801e5f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e5f6:	f000 f997 	bl	801e928 <_malloc_r>
 801e5fa:	4604      	mov	r4, r0
 801e5fc:	b140      	cbz	r0, 801e610 <__sfmoreglue+0x28>
 801e5fe:	2100      	movs	r1, #0
 801e600:	e9c0 1600 	strd	r1, r6, [r0]
 801e604:	300c      	adds	r0, #12
 801e606:	60a0      	str	r0, [r4, #8]
 801e608:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e60c:	f7ff fb42 	bl	801dc94 <memset>
 801e610:	4620      	mov	r0, r4
 801e612:	bd70      	pop	{r4, r5, r6, pc}

0801e614 <__sfp_lock_acquire>:
 801e614:	4801      	ldr	r0, [pc, #4]	; (801e61c <__sfp_lock_acquire+0x8>)
 801e616:	f000 b8b3 	b.w	801e780 <__retarget_lock_acquire_recursive>
 801e61a:	bf00      	nop
 801e61c:	20000795 	.word	0x20000795

0801e620 <__sfp_lock_release>:
 801e620:	4801      	ldr	r0, [pc, #4]	; (801e628 <__sfp_lock_release+0x8>)
 801e622:	f000 b8ae 	b.w	801e782 <__retarget_lock_release_recursive>
 801e626:	bf00      	nop
 801e628:	20000795 	.word	0x20000795

0801e62c <__sinit_lock_acquire>:
 801e62c:	4801      	ldr	r0, [pc, #4]	; (801e634 <__sinit_lock_acquire+0x8>)
 801e62e:	f000 b8a7 	b.w	801e780 <__retarget_lock_acquire_recursive>
 801e632:	bf00      	nop
 801e634:	20000796 	.word	0x20000796

0801e638 <__sinit_lock_release>:
 801e638:	4801      	ldr	r0, [pc, #4]	; (801e640 <__sinit_lock_release+0x8>)
 801e63a:	f000 b8a2 	b.w	801e782 <__retarget_lock_release_recursive>
 801e63e:	bf00      	nop
 801e640:	20000796 	.word	0x20000796

0801e644 <__sinit>:
 801e644:	b510      	push	{r4, lr}
 801e646:	4604      	mov	r4, r0
 801e648:	f7ff fff0 	bl	801e62c <__sinit_lock_acquire>
 801e64c:	69a3      	ldr	r3, [r4, #24]
 801e64e:	b11b      	cbz	r3, 801e658 <__sinit+0x14>
 801e650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e654:	f7ff bff0 	b.w	801e638 <__sinit_lock_release>
 801e658:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e65c:	6523      	str	r3, [r4, #80]	; 0x50
 801e65e:	4b13      	ldr	r3, [pc, #76]	; (801e6ac <__sinit+0x68>)
 801e660:	4a13      	ldr	r2, [pc, #76]	; (801e6b0 <__sinit+0x6c>)
 801e662:	681b      	ldr	r3, [r3, #0]
 801e664:	62a2      	str	r2, [r4, #40]	; 0x28
 801e666:	42a3      	cmp	r3, r4
 801e668:	bf04      	itt	eq
 801e66a:	2301      	moveq	r3, #1
 801e66c:	61a3      	streq	r3, [r4, #24]
 801e66e:	4620      	mov	r0, r4
 801e670:	f000 f820 	bl	801e6b4 <__sfp>
 801e674:	6060      	str	r0, [r4, #4]
 801e676:	4620      	mov	r0, r4
 801e678:	f000 f81c 	bl	801e6b4 <__sfp>
 801e67c:	60a0      	str	r0, [r4, #8]
 801e67e:	4620      	mov	r0, r4
 801e680:	f000 f818 	bl	801e6b4 <__sfp>
 801e684:	2200      	movs	r2, #0
 801e686:	60e0      	str	r0, [r4, #12]
 801e688:	2104      	movs	r1, #4
 801e68a:	6860      	ldr	r0, [r4, #4]
 801e68c:	f7ff ff82 	bl	801e594 <std>
 801e690:	68a0      	ldr	r0, [r4, #8]
 801e692:	2201      	movs	r2, #1
 801e694:	2109      	movs	r1, #9
 801e696:	f7ff ff7d 	bl	801e594 <std>
 801e69a:	68e0      	ldr	r0, [r4, #12]
 801e69c:	2202      	movs	r2, #2
 801e69e:	2112      	movs	r1, #18
 801e6a0:	f7ff ff78 	bl	801e594 <std>
 801e6a4:	2301      	movs	r3, #1
 801e6a6:	61a3      	str	r3, [r4, #24]
 801e6a8:	e7d2      	b.n	801e650 <__sinit+0xc>
 801e6aa:	bf00      	nop
 801e6ac:	08029cac 	.word	0x08029cac
 801e6b0:	0801e5dd 	.word	0x0801e5dd

0801e6b4 <__sfp>:
 801e6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6b6:	4607      	mov	r7, r0
 801e6b8:	f7ff ffac 	bl	801e614 <__sfp_lock_acquire>
 801e6bc:	4b1e      	ldr	r3, [pc, #120]	; (801e738 <__sfp+0x84>)
 801e6be:	681e      	ldr	r6, [r3, #0]
 801e6c0:	69b3      	ldr	r3, [r6, #24]
 801e6c2:	b913      	cbnz	r3, 801e6ca <__sfp+0x16>
 801e6c4:	4630      	mov	r0, r6
 801e6c6:	f7ff ffbd 	bl	801e644 <__sinit>
 801e6ca:	3648      	adds	r6, #72	; 0x48
 801e6cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e6d0:	3b01      	subs	r3, #1
 801e6d2:	d503      	bpl.n	801e6dc <__sfp+0x28>
 801e6d4:	6833      	ldr	r3, [r6, #0]
 801e6d6:	b30b      	cbz	r3, 801e71c <__sfp+0x68>
 801e6d8:	6836      	ldr	r6, [r6, #0]
 801e6da:	e7f7      	b.n	801e6cc <__sfp+0x18>
 801e6dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e6e0:	b9d5      	cbnz	r5, 801e718 <__sfp+0x64>
 801e6e2:	4b16      	ldr	r3, [pc, #88]	; (801e73c <__sfp+0x88>)
 801e6e4:	60e3      	str	r3, [r4, #12]
 801e6e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e6ea:	6665      	str	r5, [r4, #100]	; 0x64
 801e6ec:	f000 f847 	bl	801e77e <__retarget_lock_init_recursive>
 801e6f0:	f7ff ff96 	bl	801e620 <__sfp_lock_release>
 801e6f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e6f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e6fc:	6025      	str	r5, [r4, #0]
 801e6fe:	61a5      	str	r5, [r4, #24]
 801e700:	2208      	movs	r2, #8
 801e702:	4629      	mov	r1, r5
 801e704:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e708:	f7ff fac4 	bl	801dc94 <memset>
 801e70c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e714:	4620      	mov	r0, r4
 801e716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e718:	3468      	adds	r4, #104	; 0x68
 801e71a:	e7d9      	b.n	801e6d0 <__sfp+0x1c>
 801e71c:	2104      	movs	r1, #4
 801e71e:	4638      	mov	r0, r7
 801e720:	f7ff ff62 	bl	801e5e8 <__sfmoreglue>
 801e724:	4604      	mov	r4, r0
 801e726:	6030      	str	r0, [r6, #0]
 801e728:	2800      	cmp	r0, #0
 801e72a:	d1d5      	bne.n	801e6d8 <__sfp+0x24>
 801e72c:	f7ff ff78 	bl	801e620 <__sfp_lock_release>
 801e730:	230c      	movs	r3, #12
 801e732:	603b      	str	r3, [r7, #0]
 801e734:	e7ee      	b.n	801e714 <__sfp+0x60>
 801e736:	bf00      	nop
 801e738:	08029cac 	.word	0x08029cac
 801e73c:	ffff0001 	.word	0xffff0001

0801e740 <_fwalk_reent>:
 801e740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e744:	4606      	mov	r6, r0
 801e746:	4688      	mov	r8, r1
 801e748:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e74c:	2700      	movs	r7, #0
 801e74e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e752:	f1b9 0901 	subs.w	r9, r9, #1
 801e756:	d505      	bpl.n	801e764 <_fwalk_reent+0x24>
 801e758:	6824      	ldr	r4, [r4, #0]
 801e75a:	2c00      	cmp	r4, #0
 801e75c:	d1f7      	bne.n	801e74e <_fwalk_reent+0xe>
 801e75e:	4638      	mov	r0, r7
 801e760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e764:	89ab      	ldrh	r3, [r5, #12]
 801e766:	2b01      	cmp	r3, #1
 801e768:	d907      	bls.n	801e77a <_fwalk_reent+0x3a>
 801e76a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e76e:	3301      	adds	r3, #1
 801e770:	d003      	beq.n	801e77a <_fwalk_reent+0x3a>
 801e772:	4629      	mov	r1, r5
 801e774:	4630      	mov	r0, r6
 801e776:	47c0      	blx	r8
 801e778:	4307      	orrs	r7, r0
 801e77a:	3568      	adds	r5, #104	; 0x68
 801e77c:	e7e9      	b.n	801e752 <_fwalk_reent+0x12>

0801e77e <__retarget_lock_init_recursive>:
 801e77e:	4770      	bx	lr

0801e780 <__retarget_lock_acquire_recursive>:
 801e780:	4770      	bx	lr

0801e782 <__retarget_lock_release_recursive>:
 801e782:	4770      	bx	lr

0801e784 <__swhatbuf_r>:
 801e784:	b570      	push	{r4, r5, r6, lr}
 801e786:	460e      	mov	r6, r1
 801e788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e78c:	2900      	cmp	r1, #0
 801e78e:	b096      	sub	sp, #88	; 0x58
 801e790:	4614      	mov	r4, r2
 801e792:	461d      	mov	r5, r3
 801e794:	da08      	bge.n	801e7a8 <__swhatbuf_r+0x24>
 801e796:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e79a:	2200      	movs	r2, #0
 801e79c:	602a      	str	r2, [r5, #0]
 801e79e:	061a      	lsls	r2, r3, #24
 801e7a0:	d410      	bmi.n	801e7c4 <__swhatbuf_r+0x40>
 801e7a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e7a6:	e00e      	b.n	801e7c6 <__swhatbuf_r+0x42>
 801e7a8:	466a      	mov	r2, sp
 801e7aa:	f000 f9eb 	bl	801eb84 <_fstat_r>
 801e7ae:	2800      	cmp	r0, #0
 801e7b0:	dbf1      	blt.n	801e796 <__swhatbuf_r+0x12>
 801e7b2:	9a01      	ldr	r2, [sp, #4]
 801e7b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e7b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e7bc:	425a      	negs	r2, r3
 801e7be:	415a      	adcs	r2, r3
 801e7c0:	602a      	str	r2, [r5, #0]
 801e7c2:	e7ee      	b.n	801e7a2 <__swhatbuf_r+0x1e>
 801e7c4:	2340      	movs	r3, #64	; 0x40
 801e7c6:	2000      	movs	r0, #0
 801e7c8:	6023      	str	r3, [r4, #0]
 801e7ca:	b016      	add	sp, #88	; 0x58
 801e7cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e7d0 <__smakebuf_r>:
 801e7d0:	898b      	ldrh	r3, [r1, #12]
 801e7d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e7d4:	079d      	lsls	r5, r3, #30
 801e7d6:	4606      	mov	r6, r0
 801e7d8:	460c      	mov	r4, r1
 801e7da:	d507      	bpl.n	801e7ec <__smakebuf_r+0x1c>
 801e7dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e7e0:	6023      	str	r3, [r4, #0]
 801e7e2:	6123      	str	r3, [r4, #16]
 801e7e4:	2301      	movs	r3, #1
 801e7e6:	6163      	str	r3, [r4, #20]
 801e7e8:	b002      	add	sp, #8
 801e7ea:	bd70      	pop	{r4, r5, r6, pc}
 801e7ec:	ab01      	add	r3, sp, #4
 801e7ee:	466a      	mov	r2, sp
 801e7f0:	f7ff ffc8 	bl	801e784 <__swhatbuf_r>
 801e7f4:	9900      	ldr	r1, [sp, #0]
 801e7f6:	4605      	mov	r5, r0
 801e7f8:	4630      	mov	r0, r6
 801e7fa:	f000 f895 	bl	801e928 <_malloc_r>
 801e7fe:	b948      	cbnz	r0, 801e814 <__smakebuf_r+0x44>
 801e800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e804:	059a      	lsls	r2, r3, #22
 801e806:	d4ef      	bmi.n	801e7e8 <__smakebuf_r+0x18>
 801e808:	f023 0303 	bic.w	r3, r3, #3
 801e80c:	f043 0302 	orr.w	r3, r3, #2
 801e810:	81a3      	strh	r3, [r4, #12]
 801e812:	e7e3      	b.n	801e7dc <__smakebuf_r+0xc>
 801e814:	4b0d      	ldr	r3, [pc, #52]	; (801e84c <__smakebuf_r+0x7c>)
 801e816:	62b3      	str	r3, [r6, #40]	; 0x28
 801e818:	89a3      	ldrh	r3, [r4, #12]
 801e81a:	6020      	str	r0, [r4, #0]
 801e81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e820:	81a3      	strh	r3, [r4, #12]
 801e822:	9b00      	ldr	r3, [sp, #0]
 801e824:	6163      	str	r3, [r4, #20]
 801e826:	9b01      	ldr	r3, [sp, #4]
 801e828:	6120      	str	r0, [r4, #16]
 801e82a:	b15b      	cbz	r3, 801e844 <__smakebuf_r+0x74>
 801e82c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e830:	4630      	mov	r0, r6
 801e832:	f000 f9b9 	bl	801eba8 <_isatty_r>
 801e836:	b128      	cbz	r0, 801e844 <__smakebuf_r+0x74>
 801e838:	89a3      	ldrh	r3, [r4, #12]
 801e83a:	f023 0303 	bic.w	r3, r3, #3
 801e83e:	f043 0301 	orr.w	r3, r3, #1
 801e842:	81a3      	strh	r3, [r4, #12]
 801e844:	89a0      	ldrh	r0, [r4, #12]
 801e846:	4305      	orrs	r5, r0
 801e848:	81a5      	strh	r5, [r4, #12]
 801e84a:	e7cd      	b.n	801e7e8 <__smakebuf_r+0x18>
 801e84c:	0801e5dd 	.word	0x0801e5dd

0801e850 <_free_r>:
 801e850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e852:	2900      	cmp	r1, #0
 801e854:	d044      	beq.n	801e8e0 <_free_r+0x90>
 801e856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e85a:	9001      	str	r0, [sp, #4]
 801e85c:	2b00      	cmp	r3, #0
 801e85e:	f1a1 0404 	sub.w	r4, r1, #4
 801e862:	bfb8      	it	lt
 801e864:	18e4      	addlt	r4, r4, r3
 801e866:	f000 f9c1 	bl	801ebec <__malloc_lock>
 801e86a:	4a1e      	ldr	r2, [pc, #120]	; (801e8e4 <_free_r+0x94>)
 801e86c:	9801      	ldr	r0, [sp, #4]
 801e86e:	6813      	ldr	r3, [r2, #0]
 801e870:	b933      	cbnz	r3, 801e880 <_free_r+0x30>
 801e872:	6063      	str	r3, [r4, #4]
 801e874:	6014      	str	r4, [r2, #0]
 801e876:	b003      	add	sp, #12
 801e878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e87c:	f000 b9bc 	b.w	801ebf8 <__malloc_unlock>
 801e880:	42a3      	cmp	r3, r4
 801e882:	d908      	bls.n	801e896 <_free_r+0x46>
 801e884:	6825      	ldr	r5, [r4, #0]
 801e886:	1961      	adds	r1, r4, r5
 801e888:	428b      	cmp	r3, r1
 801e88a:	bf01      	itttt	eq
 801e88c:	6819      	ldreq	r1, [r3, #0]
 801e88e:	685b      	ldreq	r3, [r3, #4]
 801e890:	1949      	addeq	r1, r1, r5
 801e892:	6021      	streq	r1, [r4, #0]
 801e894:	e7ed      	b.n	801e872 <_free_r+0x22>
 801e896:	461a      	mov	r2, r3
 801e898:	685b      	ldr	r3, [r3, #4]
 801e89a:	b10b      	cbz	r3, 801e8a0 <_free_r+0x50>
 801e89c:	42a3      	cmp	r3, r4
 801e89e:	d9fa      	bls.n	801e896 <_free_r+0x46>
 801e8a0:	6811      	ldr	r1, [r2, #0]
 801e8a2:	1855      	adds	r5, r2, r1
 801e8a4:	42a5      	cmp	r5, r4
 801e8a6:	d10b      	bne.n	801e8c0 <_free_r+0x70>
 801e8a8:	6824      	ldr	r4, [r4, #0]
 801e8aa:	4421      	add	r1, r4
 801e8ac:	1854      	adds	r4, r2, r1
 801e8ae:	42a3      	cmp	r3, r4
 801e8b0:	6011      	str	r1, [r2, #0]
 801e8b2:	d1e0      	bne.n	801e876 <_free_r+0x26>
 801e8b4:	681c      	ldr	r4, [r3, #0]
 801e8b6:	685b      	ldr	r3, [r3, #4]
 801e8b8:	6053      	str	r3, [r2, #4]
 801e8ba:	4421      	add	r1, r4
 801e8bc:	6011      	str	r1, [r2, #0]
 801e8be:	e7da      	b.n	801e876 <_free_r+0x26>
 801e8c0:	d902      	bls.n	801e8c8 <_free_r+0x78>
 801e8c2:	230c      	movs	r3, #12
 801e8c4:	6003      	str	r3, [r0, #0]
 801e8c6:	e7d6      	b.n	801e876 <_free_r+0x26>
 801e8c8:	6825      	ldr	r5, [r4, #0]
 801e8ca:	1961      	adds	r1, r4, r5
 801e8cc:	428b      	cmp	r3, r1
 801e8ce:	bf04      	itt	eq
 801e8d0:	6819      	ldreq	r1, [r3, #0]
 801e8d2:	685b      	ldreq	r3, [r3, #4]
 801e8d4:	6063      	str	r3, [r4, #4]
 801e8d6:	bf04      	itt	eq
 801e8d8:	1949      	addeq	r1, r1, r5
 801e8da:	6021      	streq	r1, [r4, #0]
 801e8dc:	6054      	str	r4, [r2, #4]
 801e8de:	e7ca      	b.n	801e876 <_free_r+0x26>
 801e8e0:	b003      	add	sp, #12
 801e8e2:	bd30      	pop	{r4, r5, pc}
 801e8e4:	20000798 	.word	0x20000798

0801e8e8 <sbrk_aligned>:
 801e8e8:	b570      	push	{r4, r5, r6, lr}
 801e8ea:	4e0e      	ldr	r6, [pc, #56]	; (801e924 <sbrk_aligned+0x3c>)
 801e8ec:	460c      	mov	r4, r1
 801e8ee:	6831      	ldr	r1, [r6, #0]
 801e8f0:	4605      	mov	r5, r0
 801e8f2:	b911      	cbnz	r1, 801e8fa <sbrk_aligned+0x12>
 801e8f4:	f000 f88c 	bl	801ea10 <_sbrk_r>
 801e8f8:	6030      	str	r0, [r6, #0]
 801e8fa:	4621      	mov	r1, r4
 801e8fc:	4628      	mov	r0, r5
 801e8fe:	f000 f887 	bl	801ea10 <_sbrk_r>
 801e902:	1c43      	adds	r3, r0, #1
 801e904:	d00a      	beq.n	801e91c <sbrk_aligned+0x34>
 801e906:	1cc4      	adds	r4, r0, #3
 801e908:	f024 0403 	bic.w	r4, r4, #3
 801e90c:	42a0      	cmp	r0, r4
 801e90e:	d007      	beq.n	801e920 <sbrk_aligned+0x38>
 801e910:	1a21      	subs	r1, r4, r0
 801e912:	4628      	mov	r0, r5
 801e914:	f000 f87c 	bl	801ea10 <_sbrk_r>
 801e918:	3001      	adds	r0, #1
 801e91a:	d101      	bne.n	801e920 <sbrk_aligned+0x38>
 801e91c:	f04f 34ff 	mov.w	r4, #4294967295
 801e920:	4620      	mov	r0, r4
 801e922:	bd70      	pop	{r4, r5, r6, pc}
 801e924:	2000079c 	.word	0x2000079c

0801e928 <_malloc_r>:
 801e928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e92c:	1ccd      	adds	r5, r1, #3
 801e92e:	f025 0503 	bic.w	r5, r5, #3
 801e932:	3508      	adds	r5, #8
 801e934:	2d0c      	cmp	r5, #12
 801e936:	bf38      	it	cc
 801e938:	250c      	movcc	r5, #12
 801e93a:	2d00      	cmp	r5, #0
 801e93c:	4607      	mov	r7, r0
 801e93e:	db01      	blt.n	801e944 <_malloc_r+0x1c>
 801e940:	42a9      	cmp	r1, r5
 801e942:	d905      	bls.n	801e950 <_malloc_r+0x28>
 801e944:	230c      	movs	r3, #12
 801e946:	603b      	str	r3, [r7, #0]
 801e948:	2600      	movs	r6, #0
 801e94a:	4630      	mov	r0, r6
 801e94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e950:	4e2e      	ldr	r6, [pc, #184]	; (801ea0c <_malloc_r+0xe4>)
 801e952:	f000 f94b 	bl	801ebec <__malloc_lock>
 801e956:	6833      	ldr	r3, [r6, #0]
 801e958:	461c      	mov	r4, r3
 801e95a:	bb34      	cbnz	r4, 801e9aa <_malloc_r+0x82>
 801e95c:	4629      	mov	r1, r5
 801e95e:	4638      	mov	r0, r7
 801e960:	f7ff ffc2 	bl	801e8e8 <sbrk_aligned>
 801e964:	1c43      	adds	r3, r0, #1
 801e966:	4604      	mov	r4, r0
 801e968:	d14d      	bne.n	801ea06 <_malloc_r+0xde>
 801e96a:	6834      	ldr	r4, [r6, #0]
 801e96c:	4626      	mov	r6, r4
 801e96e:	2e00      	cmp	r6, #0
 801e970:	d140      	bne.n	801e9f4 <_malloc_r+0xcc>
 801e972:	6823      	ldr	r3, [r4, #0]
 801e974:	4631      	mov	r1, r6
 801e976:	4638      	mov	r0, r7
 801e978:	eb04 0803 	add.w	r8, r4, r3
 801e97c:	f000 f848 	bl	801ea10 <_sbrk_r>
 801e980:	4580      	cmp	r8, r0
 801e982:	d13a      	bne.n	801e9fa <_malloc_r+0xd2>
 801e984:	6821      	ldr	r1, [r4, #0]
 801e986:	3503      	adds	r5, #3
 801e988:	1a6d      	subs	r5, r5, r1
 801e98a:	f025 0503 	bic.w	r5, r5, #3
 801e98e:	3508      	adds	r5, #8
 801e990:	2d0c      	cmp	r5, #12
 801e992:	bf38      	it	cc
 801e994:	250c      	movcc	r5, #12
 801e996:	4629      	mov	r1, r5
 801e998:	4638      	mov	r0, r7
 801e99a:	f7ff ffa5 	bl	801e8e8 <sbrk_aligned>
 801e99e:	3001      	adds	r0, #1
 801e9a0:	d02b      	beq.n	801e9fa <_malloc_r+0xd2>
 801e9a2:	6823      	ldr	r3, [r4, #0]
 801e9a4:	442b      	add	r3, r5
 801e9a6:	6023      	str	r3, [r4, #0]
 801e9a8:	e00e      	b.n	801e9c8 <_malloc_r+0xa0>
 801e9aa:	6822      	ldr	r2, [r4, #0]
 801e9ac:	1b52      	subs	r2, r2, r5
 801e9ae:	d41e      	bmi.n	801e9ee <_malloc_r+0xc6>
 801e9b0:	2a0b      	cmp	r2, #11
 801e9b2:	d916      	bls.n	801e9e2 <_malloc_r+0xba>
 801e9b4:	1961      	adds	r1, r4, r5
 801e9b6:	42a3      	cmp	r3, r4
 801e9b8:	6025      	str	r5, [r4, #0]
 801e9ba:	bf18      	it	ne
 801e9bc:	6059      	strne	r1, [r3, #4]
 801e9be:	6863      	ldr	r3, [r4, #4]
 801e9c0:	bf08      	it	eq
 801e9c2:	6031      	streq	r1, [r6, #0]
 801e9c4:	5162      	str	r2, [r4, r5]
 801e9c6:	604b      	str	r3, [r1, #4]
 801e9c8:	4638      	mov	r0, r7
 801e9ca:	f104 060b 	add.w	r6, r4, #11
 801e9ce:	f000 f913 	bl	801ebf8 <__malloc_unlock>
 801e9d2:	f026 0607 	bic.w	r6, r6, #7
 801e9d6:	1d23      	adds	r3, r4, #4
 801e9d8:	1af2      	subs	r2, r6, r3
 801e9da:	d0b6      	beq.n	801e94a <_malloc_r+0x22>
 801e9dc:	1b9b      	subs	r3, r3, r6
 801e9de:	50a3      	str	r3, [r4, r2]
 801e9e0:	e7b3      	b.n	801e94a <_malloc_r+0x22>
 801e9e2:	6862      	ldr	r2, [r4, #4]
 801e9e4:	42a3      	cmp	r3, r4
 801e9e6:	bf0c      	ite	eq
 801e9e8:	6032      	streq	r2, [r6, #0]
 801e9ea:	605a      	strne	r2, [r3, #4]
 801e9ec:	e7ec      	b.n	801e9c8 <_malloc_r+0xa0>
 801e9ee:	4623      	mov	r3, r4
 801e9f0:	6864      	ldr	r4, [r4, #4]
 801e9f2:	e7b2      	b.n	801e95a <_malloc_r+0x32>
 801e9f4:	4634      	mov	r4, r6
 801e9f6:	6876      	ldr	r6, [r6, #4]
 801e9f8:	e7b9      	b.n	801e96e <_malloc_r+0x46>
 801e9fa:	230c      	movs	r3, #12
 801e9fc:	603b      	str	r3, [r7, #0]
 801e9fe:	4638      	mov	r0, r7
 801ea00:	f000 f8fa 	bl	801ebf8 <__malloc_unlock>
 801ea04:	e7a1      	b.n	801e94a <_malloc_r+0x22>
 801ea06:	6025      	str	r5, [r4, #0]
 801ea08:	e7de      	b.n	801e9c8 <_malloc_r+0xa0>
 801ea0a:	bf00      	nop
 801ea0c:	20000798 	.word	0x20000798

0801ea10 <_sbrk_r>:
 801ea10:	b538      	push	{r3, r4, r5, lr}
 801ea12:	4d06      	ldr	r5, [pc, #24]	; (801ea2c <_sbrk_r+0x1c>)
 801ea14:	2300      	movs	r3, #0
 801ea16:	4604      	mov	r4, r0
 801ea18:	4608      	mov	r0, r1
 801ea1a:	602b      	str	r3, [r5, #0]
 801ea1c:	f7f7 fc56 	bl	80162cc <_sbrk>
 801ea20:	1c43      	adds	r3, r0, #1
 801ea22:	d102      	bne.n	801ea2a <_sbrk_r+0x1a>
 801ea24:	682b      	ldr	r3, [r5, #0]
 801ea26:	b103      	cbz	r3, 801ea2a <_sbrk_r+0x1a>
 801ea28:	6023      	str	r3, [r4, #0]
 801ea2a:	bd38      	pop	{r3, r4, r5, pc}
 801ea2c:	200007a0 	.word	0x200007a0

0801ea30 <_raise_r>:
 801ea30:	291f      	cmp	r1, #31
 801ea32:	b538      	push	{r3, r4, r5, lr}
 801ea34:	4604      	mov	r4, r0
 801ea36:	460d      	mov	r5, r1
 801ea38:	d904      	bls.n	801ea44 <_raise_r+0x14>
 801ea3a:	2316      	movs	r3, #22
 801ea3c:	6003      	str	r3, [r0, #0]
 801ea3e:	f04f 30ff 	mov.w	r0, #4294967295
 801ea42:	bd38      	pop	{r3, r4, r5, pc}
 801ea44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ea46:	b112      	cbz	r2, 801ea4e <_raise_r+0x1e>
 801ea48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ea4c:	b94b      	cbnz	r3, 801ea62 <_raise_r+0x32>
 801ea4e:	4620      	mov	r0, r4
 801ea50:	f000 f830 	bl	801eab4 <_getpid_r>
 801ea54:	462a      	mov	r2, r5
 801ea56:	4601      	mov	r1, r0
 801ea58:	4620      	mov	r0, r4
 801ea5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ea5e:	f000 b817 	b.w	801ea90 <_kill_r>
 801ea62:	2b01      	cmp	r3, #1
 801ea64:	d00a      	beq.n	801ea7c <_raise_r+0x4c>
 801ea66:	1c59      	adds	r1, r3, #1
 801ea68:	d103      	bne.n	801ea72 <_raise_r+0x42>
 801ea6a:	2316      	movs	r3, #22
 801ea6c:	6003      	str	r3, [r0, #0]
 801ea6e:	2001      	movs	r0, #1
 801ea70:	e7e7      	b.n	801ea42 <_raise_r+0x12>
 801ea72:	2400      	movs	r4, #0
 801ea74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ea78:	4628      	mov	r0, r5
 801ea7a:	4798      	blx	r3
 801ea7c:	2000      	movs	r0, #0
 801ea7e:	e7e0      	b.n	801ea42 <_raise_r+0x12>

0801ea80 <raise>:
 801ea80:	4b02      	ldr	r3, [pc, #8]	; (801ea8c <raise+0xc>)
 801ea82:	4601      	mov	r1, r0
 801ea84:	6818      	ldr	r0, [r3, #0]
 801ea86:	f7ff bfd3 	b.w	801ea30 <_raise_r>
 801ea8a:	bf00      	nop
 801ea8c:	20000198 	.word	0x20000198

0801ea90 <_kill_r>:
 801ea90:	b538      	push	{r3, r4, r5, lr}
 801ea92:	4d07      	ldr	r5, [pc, #28]	; (801eab0 <_kill_r+0x20>)
 801ea94:	2300      	movs	r3, #0
 801ea96:	4604      	mov	r4, r0
 801ea98:	4608      	mov	r0, r1
 801ea9a:	4611      	mov	r1, r2
 801ea9c:	602b      	str	r3, [r5, #0]
 801ea9e:	f7f7 fb8d 	bl	80161bc <_kill>
 801eaa2:	1c43      	adds	r3, r0, #1
 801eaa4:	d102      	bne.n	801eaac <_kill_r+0x1c>
 801eaa6:	682b      	ldr	r3, [r5, #0]
 801eaa8:	b103      	cbz	r3, 801eaac <_kill_r+0x1c>
 801eaaa:	6023      	str	r3, [r4, #0]
 801eaac:	bd38      	pop	{r3, r4, r5, pc}
 801eaae:	bf00      	nop
 801eab0:	200007a0 	.word	0x200007a0

0801eab4 <_getpid_r>:
 801eab4:	f7f7 bb7a 	b.w	80161ac <_getpid>

0801eab8 <__sread>:
 801eab8:	b510      	push	{r4, lr}
 801eaba:	460c      	mov	r4, r1
 801eabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eac0:	f000 f8a0 	bl	801ec04 <_read_r>
 801eac4:	2800      	cmp	r0, #0
 801eac6:	bfab      	itete	ge
 801eac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801eaca:	89a3      	ldrhlt	r3, [r4, #12]
 801eacc:	181b      	addge	r3, r3, r0
 801eace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ead2:	bfac      	ite	ge
 801ead4:	6563      	strge	r3, [r4, #84]	; 0x54
 801ead6:	81a3      	strhlt	r3, [r4, #12]
 801ead8:	bd10      	pop	{r4, pc}

0801eada <__swrite>:
 801eada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eade:	461f      	mov	r7, r3
 801eae0:	898b      	ldrh	r3, [r1, #12]
 801eae2:	05db      	lsls	r3, r3, #23
 801eae4:	4605      	mov	r5, r0
 801eae6:	460c      	mov	r4, r1
 801eae8:	4616      	mov	r6, r2
 801eaea:	d505      	bpl.n	801eaf8 <__swrite+0x1e>
 801eaec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eaf0:	2302      	movs	r3, #2
 801eaf2:	2200      	movs	r2, #0
 801eaf4:	f000 f868 	bl	801ebc8 <_lseek_r>
 801eaf8:	89a3      	ldrh	r3, [r4, #12]
 801eafa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eafe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801eb02:	81a3      	strh	r3, [r4, #12]
 801eb04:	4632      	mov	r2, r6
 801eb06:	463b      	mov	r3, r7
 801eb08:	4628      	mov	r0, r5
 801eb0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eb0e:	f000 b817 	b.w	801eb40 <_write_r>

0801eb12 <__sseek>:
 801eb12:	b510      	push	{r4, lr}
 801eb14:	460c      	mov	r4, r1
 801eb16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb1a:	f000 f855 	bl	801ebc8 <_lseek_r>
 801eb1e:	1c43      	adds	r3, r0, #1
 801eb20:	89a3      	ldrh	r3, [r4, #12]
 801eb22:	bf15      	itete	ne
 801eb24:	6560      	strne	r0, [r4, #84]	; 0x54
 801eb26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801eb2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801eb2e:	81a3      	strheq	r3, [r4, #12]
 801eb30:	bf18      	it	ne
 801eb32:	81a3      	strhne	r3, [r4, #12]
 801eb34:	bd10      	pop	{r4, pc}

0801eb36 <__sclose>:
 801eb36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb3a:	f000 b813 	b.w	801eb64 <_close_r>
	...

0801eb40 <_write_r>:
 801eb40:	b538      	push	{r3, r4, r5, lr}
 801eb42:	4d07      	ldr	r5, [pc, #28]	; (801eb60 <_write_r+0x20>)
 801eb44:	4604      	mov	r4, r0
 801eb46:	4608      	mov	r0, r1
 801eb48:	4611      	mov	r1, r2
 801eb4a:	2200      	movs	r2, #0
 801eb4c:	602a      	str	r2, [r5, #0]
 801eb4e:	461a      	mov	r2, r3
 801eb50:	f7f7 fb6b 	bl	801622a <_write>
 801eb54:	1c43      	adds	r3, r0, #1
 801eb56:	d102      	bne.n	801eb5e <_write_r+0x1e>
 801eb58:	682b      	ldr	r3, [r5, #0]
 801eb5a:	b103      	cbz	r3, 801eb5e <_write_r+0x1e>
 801eb5c:	6023      	str	r3, [r4, #0]
 801eb5e:	bd38      	pop	{r3, r4, r5, pc}
 801eb60:	200007a0 	.word	0x200007a0

0801eb64 <_close_r>:
 801eb64:	b538      	push	{r3, r4, r5, lr}
 801eb66:	4d06      	ldr	r5, [pc, #24]	; (801eb80 <_close_r+0x1c>)
 801eb68:	2300      	movs	r3, #0
 801eb6a:	4604      	mov	r4, r0
 801eb6c:	4608      	mov	r0, r1
 801eb6e:	602b      	str	r3, [r5, #0]
 801eb70:	f7f7 fb77 	bl	8016262 <_close>
 801eb74:	1c43      	adds	r3, r0, #1
 801eb76:	d102      	bne.n	801eb7e <_close_r+0x1a>
 801eb78:	682b      	ldr	r3, [r5, #0]
 801eb7a:	b103      	cbz	r3, 801eb7e <_close_r+0x1a>
 801eb7c:	6023      	str	r3, [r4, #0]
 801eb7e:	bd38      	pop	{r3, r4, r5, pc}
 801eb80:	200007a0 	.word	0x200007a0

0801eb84 <_fstat_r>:
 801eb84:	b538      	push	{r3, r4, r5, lr}
 801eb86:	4d07      	ldr	r5, [pc, #28]	; (801eba4 <_fstat_r+0x20>)
 801eb88:	2300      	movs	r3, #0
 801eb8a:	4604      	mov	r4, r0
 801eb8c:	4608      	mov	r0, r1
 801eb8e:	4611      	mov	r1, r2
 801eb90:	602b      	str	r3, [r5, #0]
 801eb92:	f7f7 fb72 	bl	801627a <_fstat>
 801eb96:	1c43      	adds	r3, r0, #1
 801eb98:	d102      	bne.n	801eba0 <_fstat_r+0x1c>
 801eb9a:	682b      	ldr	r3, [r5, #0]
 801eb9c:	b103      	cbz	r3, 801eba0 <_fstat_r+0x1c>
 801eb9e:	6023      	str	r3, [r4, #0]
 801eba0:	bd38      	pop	{r3, r4, r5, pc}
 801eba2:	bf00      	nop
 801eba4:	200007a0 	.word	0x200007a0

0801eba8 <_isatty_r>:
 801eba8:	b538      	push	{r3, r4, r5, lr}
 801ebaa:	4d06      	ldr	r5, [pc, #24]	; (801ebc4 <_isatty_r+0x1c>)
 801ebac:	2300      	movs	r3, #0
 801ebae:	4604      	mov	r4, r0
 801ebb0:	4608      	mov	r0, r1
 801ebb2:	602b      	str	r3, [r5, #0]
 801ebb4:	f7f7 fb71 	bl	801629a <_isatty>
 801ebb8:	1c43      	adds	r3, r0, #1
 801ebba:	d102      	bne.n	801ebc2 <_isatty_r+0x1a>
 801ebbc:	682b      	ldr	r3, [r5, #0]
 801ebbe:	b103      	cbz	r3, 801ebc2 <_isatty_r+0x1a>
 801ebc0:	6023      	str	r3, [r4, #0]
 801ebc2:	bd38      	pop	{r3, r4, r5, pc}
 801ebc4:	200007a0 	.word	0x200007a0

0801ebc8 <_lseek_r>:
 801ebc8:	b538      	push	{r3, r4, r5, lr}
 801ebca:	4d07      	ldr	r5, [pc, #28]	; (801ebe8 <_lseek_r+0x20>)
 801ebcc:	4604      	mov	r4, r0
 801ebce:	4608      	mov	r0, r1
 801ebd0:	4611      	mov	r1, r2
 801ebd2:	2200      	movs	r2, #0
 801ebd4:	602a      	str	r2, [r5, #0]
 801ebd6:	461a      	mov	r2, r3
 801ebd8:	f7f7 fb6a 	bl	80162b0 <_lseek>
 801ebdc:	1c43      	adds	r3, r0, #1
 801ebde:	d102      	bne.n	801ebe6 <_lseek_r+0x1e>
 801ebe0:	682b      	ldr	r3, [r5, #0]
 801ebe2:	b103      	cbz	r3, 801ebe6 <_lseek_r+0x1e>
 801ebe4:	6023      	str	r3, [r4, #0]
 801ebe6:	bd38      	pop	{r3, r4, r5, pc}
 801ebe8:	200007a0 	.word	0x200007a0

0801ebec <__malloc_lock>:
 801ebec:	4801      	ldr	r0, [pc, #4]	; (801ebf4 <__malloc_lock+0x8>)
 801ebee:	f7ff bdc7 	b.w	801e780 <__retarget_lock_acquire_recursive>
 801ebf2:	bf00      	nop
 801ebf4:	20000794 	.word	0x20000794

0801ebf8 <__malloc_unlock>:
 801ebf8:	4801      	ldr	r0, [pc, #4]	; (801ec00 <__malloc_unlock+0x8>)
 801ebfa:	f7ff bdc2 	b.w	801e782 <__retarget_lock_release_recursive>
 801ebfe:	bf00      	nop
 801ec00:	20000794 	.word	0x20000794

0801ec04 <_read_r>:
 801ec04:	b538      	push	{r3, r4, r5, lr}
 801ec06:	4d07      	ldr	r5, [pc, #28]	; (801ec24 <_read_r+0x20>)
 801ec08:	4604      	mov	r4, r0
 801ec0a:	4608      	mov	r0, r1
 801ec0c:	4611      	mov	r1, r2
 801ec0e:	2200      	movs	r2, #0
 801ec10:	602a      	str	r2, [r5, #0]
 801ec12:	461a      	mov	r2, r3
 801ec14:	f7f7 faec 	bl	80161f0 <_read>
 801ec18:	1c43      	adds	r3, r0, #1
 801ec1a:	d102      	bne.n	801ec22 <_read_r+0x1e>
 801ec1c:	682b      	ldr	r3, [r5, #0]
 801ec1e:	b103      	cbz	r3, 801ec22 <_read_r+0x1e>
 801ec20:	6023      	str	r3, [r4, #0]
 801ec22:	bd38      	pop	{r3, r4, r5, pc}
 801ec24:	200007a0 	.word	0x200007a0

0801ec28 <_init>:
 801ec28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec2a:	bf00      	nop
 801ec2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ec2e:	bc08      	pop	{r3}
 801ec30:	469e      	mov	lr, r3
 801ec32:	4770      	bx	lr

0801ec34 <_fini>:
 801ec34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec36:	bf00      	nop
 801ec38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ec3a:	bc08      	pop	{r3}
 801ec3c:	469e      	mov	lr, r3
 801ec3e:	4770      	bx	lr
