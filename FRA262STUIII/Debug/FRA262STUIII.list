
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f070  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b104  0801f210  0801f210  0002f210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a314  0802a314  000402a0  2**0
                  CONTENTS
  4 .ARM          00000008  0802a314  0802a314  0003a314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a31c  0802a31c  000402a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802a31c  0802a31c  0003a31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a324  0802a324  0003a324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  0802a328  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  200002a0  0802a5c8  000402a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000858  0802a5c8  00040858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   001052c5  00000000  00000000  000402d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da4  00000000  00000000  00145595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004a30  00000000  00000000  00148340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004980  00000000  00000000  0014cd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb84  00000000  00000000  001516f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022ec6  00000000  00000000  0016e274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    004785cc  00000000  00000000  0019113a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00609706  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000164e8  00000000  00000000  00609758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002a0 	.word	0x200002a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801f1f8 	.word	0x0801f1f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002a4 	.word	0x200002a4
 80001dc:	0801f1f8 	.word	0x0801f1f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9a:	eef0 7ae7 	vabs.f32	s15, s15
 8000f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fb6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fba:	f01c fa1f 	bl	801d3fc <sqrtf>
 8000fbe:	eef0 7a40 	vmov.f32	s15, s0
 8000fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_ZN5Eigen8internal5all_tC1Ev>:

//--------------------------------------------------------------------------------
// Handling of all
//--------------------------------------------------------------------------------

struct all_t { all_t() {} };
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <HAL_UARTEx_RxEventCallback>:
/* USER CODE BEGIN 0 */

///////////////////// [UART UI Base System] /////////////////////

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a4a      	ldr	r2, [pc, #296]	; (8001138 <HAL_UARTEx_RxEventCallback+0x13c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	f040 808d 	bne.w	800112e <HAL_UARTEx_RxEventCallback+0x132>
	{
		oldPos_uart = newPos_uart;  // Update the last position before copying new data
 8001014:	4b49      	ldr	r3, [pc, #292]	; (800113c <HAL_UARTEx_RxEventCallback+0x140>)
 8001016:	881a      	ldrh	r2, [r3, #0]
 8001018:	4b49      	ldr	r3, [pc, #292]	; (8001140 <HAL_UARTEx_RxEventCallback+0x144>)
 800101a:	801a      	strh	r2, [r3, #0]
		datasize_uart = Size;
 800101c:	4a49      	ldr	r2, [pc, #292]	; (8001144 <HAL_UARTEx_RxEventCallback+0x148>)
 800101e:	887b      	ldrh	r3, [r7, #2]
 8001020:	8013      	strh	r3, [r2, #0]
		// If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		// This is to maintain the circular buffer
		// The old data in the main buffer will be overlapped

		if (oldPos_uart+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8001022:	4b47      	ldr	r3, [pc, #284]	; (8001140 <HAL_UARTEx_RxEventCallback+0x144>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	887b      	ldrh	r3, [r7, #2]
 800102a:	4413      	add	r3, r2
 800102c:	2b20      	cmp	r3, #32
 800102e:	dd14      	ble.n	800105a <HAL_UARTEx_RxEventCallback+0x5e>
		{
			oldPos_uart = 0;  // point to the start of the buffer
 8001030:	4b43      	ldr	r3, [pc, #268]	; (8001140 <HAL_UARTEx_RxEventCallback+0x144>)
 8001032:	2200      	movs	r2, #0
 8001034:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8001036:	4b42      	ldr	r3, [pc, #264]	; (8001140 <HAL_UARTEx_RxEventCallback+0x144>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	4b42      	ldr	r3, [pc, #264]	; (8001148 <HAL_UARTEx_RxEventCallback+0x14c>)
 800103e:	4413      	add	r3, r2
 8001040:	887a      	ldrh	r2, [r7, #2]
 8001042:	4942      	ldr	r1, [pc, #264]	; (800114c <HAL_UARTEx_RxEventCallback+0x150>)
 8001044:	4618      	mov	r0, r3
 8001046:	f01d f8ff 	bl	801e248 <memcpy>
			newPos_uart = Size + oldPos_uart;
 800104a:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <HAL_UARTEx_RxEventCallback+0x144>)
 800104c:	881a      	ldrh	r2, [r3, #0]
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	4413      	add	r3, r2
 8001052:	b29a      	uxth	r2, r3
 8001054:	4b39      	ldr	r3, [pc, #228]	; (800113c <HAL_UARTEx_RxEventCallback+0x140>)
 8001056:	801a      	strh	r2, [r3, #0]
 8001058:	e010      	b.n	800107c <HAL_UARTEx_RxEventCallback+0x80>
		}
		else
		{
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 800105a:	4b39      	ldr	r3, [pc, #228]	; (8001140 <HAL_UARTEx_RxEventCallback+0x144>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	4b39      	ldr	r3, [pc, #228]	; (8001148 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001062:	4413      	add	r3, r2
 8001064:	887a      	ldrh	r2, [r7, #2]
 8001066:	4939      	ldr	r1, [pc, #228]	; (800114c <HAL_UARTEx_RxEventCallback+0x150>)
 8001068:	4618      	mov	r0, r3
 800106a:	f01d f8ed 	bl	801e248 <memcpy>
			newPos_uart = Size + oldPos_uart;
 800106e:	4b34      	ldr	r3, [pc, #208]	; (8001140 <HAL_UARTEx_RxEventCallback+0x144>)
 8001070:	881a      	ldrh	r2, [r3, #0]
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	4413      	add	r3, r2
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b30      	ldr	r3, [pc, #192]	; (800113c <HAL_UARTEx_RxEventCallback+0x140>)
 800107a:	801a      	strh	r2, [r3, #0]
		}
		StartM = MainBuf[newPos_uart - datasize_uart]; // 0b1001xxxx for check start & mode
 800107c:	4b2f      	ldr	r3, [pc, #188]	; (800113c <HAL_UARTEx_RxEventCallback+0x140>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b30      	ldr	r3, [pc, #192]	; (8001144 <HAL_UARTEx_RxEventCallback+0x148>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	4a2f      	ldr	r2, [pc, #188]	; (8001148 <HAL_UARTEx_RxEventCallback+0x14c>)
 800108a:	5cd2      	ldrb	r2, [r2, r3]
 800108c:	4b30      	ldr	r3, [pc, #192]	; (8001150 <HAL_UARTEx_RxEventCallback+0x154>)
 800108e:	701a      	strb	r2, [r3, #0]
		chkStart = StartM >> 4; // for check "start" or nor
 8001090:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <HAL_UARTEx_RxEventCallback+0x154>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <HAL_UARTEx_RxEventCallback+0x158>)
 800109a:	701a      	strb	r2, [r3, #0]
		NameM = (StartM & 15); // Check mode
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <HAL_UARTEx_RxEventCallback+0x154>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	f003 030f 	and.w	r3, r3, #15
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <HAL_UARTEx_RxEventCallback+0x15c>)
 80010a8:	701a      	strb	r2, [r3, #0]
		if (chkStart == 9){ // 0b1001
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <HAL_UARTEx_RxEventCallback+0x158>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b09      	cmp	r3, #9
 80010b0:	d10a      	bne.n	80010c8 <HAL_UARTEx_RxEventCallback+0xcc>
			if (NameM >= 1 && NameM <= 14){ // 15 work state or not
 80010b2:	4b29      	ldr	r3, [pc, #164]	; (8001158 <HAL_UARTEx_RxEventCallback+0x15c>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d02c      	beq.n	8001114 <HAL_UARTEx_RxEventCallback+0x118>
 80010ba:	4b27      	ldr	r3, [pc, #156]	; (8001158 <HAL_UARTEx_RxEventCallback+0x15c>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b0e      	cmp	r3, #14
 80010c0:	d828      	bhi.n	8001114 <HAL_UARTEx_RxEventCallback+0x118>
				All_mode_UARTUI();
 80010c2:	f000 f851 	bl	8001168 <_Z15All_mode_UARTUIv>
 80010c6:	e025      	b.n	8001114 <HAL_UARTEx_RxEventCallback+0x118>
			}
		}
		else if (StartM == 88) {
 80010c8:	4b21      	ldr	r3, [pc, #132]	; (8001150 <HAL_UARTEx_RxEventCallback+0x154>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b58      	cmp	r3, #88	; 0x58
 80010ce:	d121      	bne.n	8001114 <HAL_UARTEx_RxEventCallback+0x118>
			StartM = MainBuf[newPos_uart-2];
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_UARTEx_RxEventCallback+0x140>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	3b02      	subs	r3, #2
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <HAL_UARTEx_RxEventCallback+0x14c>)
 80010d8:	5cd2      	ldrb	r2, [r2, r3]
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_UARTEx_RxEventCallback+0x154>)
 80010dc:	701a      	strb	r2, [r3, #0]
		    chkStart = StartM >> 4;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <HAL_UARTEx_RxEventCallback+0x154>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	091b      	lsrs	r3, r3, #4
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_UARTEx_RxEventCallback+0x158>)
 80010e8:	701a      	strb	r2, [r3, #0]
		    NameM = (StartM & 15);
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_UARTEx_RxEventCallback+0x154>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_UARTEx_RxEventCallback+0x15c>)
 80010f6:	701a      	strb	r2, [r3, #0]
		    if (chkStart == 9){
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_UARTEx_RxEventCallback+0x158>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b09      	cmp	r3, #9
 80010fe:	d109      	bne.n	8001114 <HAL_UARTEx_RxEventCallback+0x118>
		    	if (NameM >= 1 && NameM <= 14){
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_UARTEx_RxEventCallback+0x118>
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_UARTEx_RxEventCallback+0x15c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b0e      	cmp	r3, #14
 800110e:	d801      	bhi.n	8001114 <HAL_UARTEx_RxEventCallback+0x118>
		    		All_mode_UARTUI();
 8001110:	f000 f82a 	bl	8001168 <_Z15All_mode_UARTUIv>
		        }
		    }
		}

		// start the DMA again
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001114:	2220      	movs	r2, #32
 8001116:	490d      	ldr	r1, [pc, #52]	; (800114c <HAL_UARTEx_RxEventCallback+0x150>)
 8001118:	4810      	ldr	r0, [pc, #64]	; (800115c <HAL_UARTEx_RxEventCallback+0x160>)
 800111a:	f01a ff64 	bl	801bfe6 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_UARTEx_RxEventCallback+0x164>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_UARTEx_RxEventCallback+0x164>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0208 	bic.w	r2, r2, #8
 800112c:	601a      	str	r2, [r3, #0]

	} //huart USART2
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40004400 	.word	0x40004400
 800113c:	200007e2 	.word	0x200007e2
 8001140:	200007e0 	.word	0x200007e0
 8001144:	20000820 	.word	0x20000820
 8001148:	200007c0 	.word	0x200007c0
 800114c:	200007a0 	.word	0x200007a0
 8001150:	20000824 	.word	0x20000824
 8001154:	20000822 	.word	0x20000822
 8001158:	20000823 	.word	0x20000823
 800115c:	20000444 	.word	0x20000444
 8001160:	20000488 	.word	0x20000488
 8001164:	00000000 	.word	0x00000000

08001168 <_Z15All_mode_UARTUIv>:

void All_mode_UARTUI()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
	int yur;
	int zur;
	int kur; // counter

	// NameM => 15 mode
		switch (NameM){
 800116e:	4b7c      	ldr	r3, [pc, #496]	; (8001360 <_Z15All_mode_UARTUIv+0x1f8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	3b01      	subs	r3, #1
 8001174:	2b0d      	cmp	r3, #13
 8001176:	f200 845b 	bhi.w	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
 800117a:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <_Z15All_mode_UARTUIv+0x18>)
 800117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001180:	080011b9 	.word	0x080011b9
 8001184:	08001219 	.word	0x08001219
 8001188:	08001253 	.word	0x08001253
 800118c:	0800129d 	.word	0x0800129d
 8001190:	080013a9 	.word	0x080013a9
 8001194:	080014a7 	.word	0x080014a7
 8001198:	08001531 	.word	0x08001531
 800119c:	08001701 	.word	0x08001701
 80011a0:	0800173b 	.word	0x0800173b
 80011a4:	0800177b 	.word	0x0800177b
 80011a8:	08001817 	.word	0x08001817
 80011ac:	08001941 	.word	0x08001941
 80011b0:	08001979 	.word	0x08001979
 80011b4:	080019c3 	.word	0x080019c3
		////==============[Test Command]===========
			case 1: // 10010001 01000000 00000000 00101110
				chksum = MainBuf[newPos_uart-1];
 80011b8:	4b6a      	ldr	r3, [pc, #424]	; (8001364 <_Z15All_mode_UARTUIv+0x1fc>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	3b01      	subs	r3, #1
 80011be:	4a6a      	ldr	r2, [pc, #424]	; (8001368 <_Z15All_mode_UARTUIv+0x200>)
 80011c0:	5cd2      	ldrb	r2, [r2, r3]
 80011c2:	4b6a      	ldr	r3, [pc, #424]	; (800136c <_Z15All_mode_UARTUIv+0x204>)
 80011c4:	701a      	strb	r2, [r3, #0]
				dataF2 = MainBuf[newPos_uart-2];
 80011c6:	4b67      	ldr	r3, [pc, #412]	; (8001364 <_Z15All_mode_UARTUIv+0x1fc>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	3b02      	subs	r3, #2
 80011cc:	4a66      	ldr	r2, [pc, #408]	; (8001368 <_Z15All_mode_UARTUIv+0x200>)
 80011ce:	5cd2      	ldrb	r2, [r2, r3]
 80011d0:	4b67      	ldr	r3, [pc, #412]	; (8001370 <_Z15All_mode_UARTUIv+0x208>)
 80011d2:	701a      	strb	r2, [r3, #0]
				dataF1 = MainBuf[newPos_uart-3];
 80011d4:	4b63      	ldr	r3, [pc, #396]	; (8001364 <_Z15All_mode_UARTUIv+0x1fc>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	3b03      	subs	r3, #3
 80011da:	4a63      	ldr	r2, [pc, #396]	; (8001368 <_Z15All_mode_UARTUIv+0x200>)
 80011dc:	5cd2      	ldrb	r2, [r2, r3]
 80011de:	4b65      	ldr	r3, [pc, #404]	; (8001374 <_Z15All_mode_UARTUIv+0x20c>)
 80011e0:	701a      	strb	r2, [r3, #0]
				chksum2 = ~(StartM + dataF1 + dataF2);
 80011e2:	4b65      	ldr	r3, [pc, #404]	; (8001378 <_Z15All_mode_UARTUIv+0x210>)
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	4b63      	ldr	r3, [pc, #396]	; (8001374 <_Z15All_mode_UARTUIv+0x20c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b60      	ldr	r3, [pc, #384]	; (8001370 <_Z15All_mode_UARTUIv+0x208>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b60      	ldr	r3, [pc, #384]	; (800137c <_Z15All_mode_UARTUIv+0x214>)
 80011fc:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80011fe:	4b5b      	ldr	r3, [pc, #364]	; (800136c <_Z15All_mode_UARTUIv+0x204>)
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	4b5e      	ldr	r3, [pc, #376]	; (800137c <_Z15All_mode_UARTUIv+0x214>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	f040 83f7 	bne.w	80019fa <_Z15All_mode_UARTUIv+0x892>
					M_state = 1;
 800120c:	4b5c      	ldr	r3, [pc, #368]	; (8001380 <_Z15All_mode_UARTUIv+0x218>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001212:	f000 fc27 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 8001216:	e3f0      	b.n	80019fa <_Z15All_mode_UARTUIv+0x892>
		////==============[Connect MCU]===========
			case 2: //10010010 01101101
				chksum = MainBuf[newPos_uart-1];
 8001218:	4b52      	ldr	r3, [pc, #328]	; (8001364 <_Z15All_mode_UARTUIv+0x1fc>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	3b01      	subs	r3, #1
 800121e:	4a52      	ldr	r2, [pc, #328]	; (8001368 <_Z15All_mode_UARTUIv+0x200>)
 8001220:	5cd2      	ldrb	r2, [r2, r3]
 8001222:	4b52      	ldr	r3, [pc, #328]	; (800136c <_Z15All_mode_UARTUIv+0x204>)
 8001224:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001226:	4b54      	ldr	r3, [pc, #336]	; (8001378 <_Z15All_mode_UARTUIv+0x210>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	43db      	mvns	r3, r3
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b55      	ldr	r3, [pc, #340]	; (8001384 <_Z15All_mode_UARTUIv+0x21c>)
 8001230:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001232:	4b4e      	ldr	r3, [pc, #312]	; (800136c <_Z15All_mode_UARTUIv+0x204>)
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	4b53      	ldr	r3, [pc, #332]	; (8001384 <_Z15All_mode_UARTUIv+0x21c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	f040 83df 	bne.w	80019fe <_Z15All_mode_UARTUIv+0x896>
					M_state = 2;
 8001240:	4b4f      	ldr	r3, [pc, #316]	; (8001380 <_Z15All_mode_UARTUIv+0x218>)
 8001242:	2202      	movs	r2, #2
 8001244:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					// check efft
					flag_efftActi = 1;
 8001246:	4b50      	ldr	r3, [pc, #320]	; (8001388 <_Z15All_mode_UARTUIv+0x220>)
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 800124c:	f000 fc0a 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 8001250:	e3d5      	b.n	80019fe <_Z15All_mode_UARTUIv+0x896>
		////==============[Disconnect MCU]===========
			case 3: //10010011 01101100
					chksum = MainBuf[newPos_uart-1];
 8001252:	4b44      	ldr	r3, [pc, #272]	; (8001364 <_Z15All_mode_UARTUIv+0x1fc>)
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	3b01      	subs	r3, #1
 8001258:	4a43      	ldr	r2, [pc, #268]	; (8001368 <_Z15All_mode_UARTUIv+0x200>)
 800125a:	5cd2      	ldrb	r2, [r2, r3]
 800125c:	4b43      	ldr	r3, [pc, #268]	; (800136c <_Z15All_mode_UARTUIv+0x204>)
 800125e:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8001260:	4b45      	ldr	r3, [pc, #276]	; (8001378 <_Z15All_mode_UARTUIv+0x210>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	43db      	mvns	r3, r3
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b46      	ldr	r3, [pc, #280]	; (8001384 <_Z15All_mode_UARTUIv+0x21c>)
 800126a:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800126c:	4b3f      	ldr	r3, [pc, #252]	; (800136c <_Z15All_mode_UARTUIv+0x204>)
 800126e:	781a      	ldrb	r2, [r3, #0]
 8001270:	4b44      	ldr	r3, [pc, #272]	; (8001384 <_Z15All_mode_UARTUIv+0x21c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	f040 83c4 	bne.w	8001a02 <_Z15All_mode_UARTUIv+0x89a>
					M_state = 3;
 800127a:	4b41      	ldr	r3, [pc, #260]	; (8001380 <_Z15All_mode_UARTUIv+0x218>)
 800127c:	2203      	movs	r2, #3
 800127e:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					ResetParam();
 8001280:	f001 fef0 	bl	8003064 <_Z10ResetParamv>
					grandState = Ready;
 8001284:	4b41      	ldr	r3, [pc, #260]	; (800138c <_Z15All_mode_UARTUIv+0x224>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
 800128a:	2364      	movs	r3, #100	; 0x64
 800128c:	2202      	movs	r2, #2
 800128e:	4940      	ldr	r1, [pc, #256]	; (8001390 <_Z15All_mode_UARTUIv+0x228>)
 8001290:	4840      	ldr	r0, [pc, #256]	; (8001394 <_Z15All_mode_UARTUIv+0x22c>)
 8001292:	f01a fe16 	bl	801bec2 <HAL_UART_Transmit>

					xu_Uart();
 8001296:	f000 fbe5 	bl	8001a64 <_Z7xu_Uartv>

				}
				break;
 800129a:	e3b2      	b.n	8001a02 <_Z15All_mode_UARTUIv+0x89a>
		////==============[Angular Velo Set]===========
			case 4:
					chksum = MainBuf[newPos_uart-1];
 800129c:	4b31      	ldr	r3, [pc, #196]	; (8001364 <_Z15All_mode_UARTUIv+0x1fc>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	4a31      	ldr	r2, [pc, #196]	; (8001368 <_Z15All_mode_UARTUIv+0x200>)
 80012a4:	5cd2      	ldrb	r2, [r2, r3]
 80012a6:	4b31      	ldr	r3, [pc, #196]	; (800136c <_Z15All_mode_UARTUIv+0x204>)
 80012a8:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80012aa:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <_Z15All_mode_UARTUIv+0x1fc>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	3b02      	subs	r3, #2
 80012b0:	4a2d      	ldr	r2, [pc, #180]	; (8001368 <_Z15All_mode_UARTUIv+0x200>)
 80012b2:	5cd2      	ldrb	r2, [r2, r3]
 80012b4:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <_Z15All_mode_UARTUIv+0x208>)
 80012b6:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80012b8:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <_Z15All_mode_UARTUIv+0x1fc>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	3b03      	subs	r3, #3
 80012be:	4a2a      	ldr	r2, [pc, #168]	; (8001368 <_Z15All_mode_UARTUIv+0x200>)
 80012c0:	5cd2      	ldrb	r2, [r2, r3]
 80012c2:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <_Z15All_mode_UARTUIv+0x20c>)
 80012c4:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[0] = dataF1;
 80012c6:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <_Z15All_mode_UARTUIv+0x20c>)
 80012c8:	781a      	ldrb	r2, [r3, #0]
 80012ca:	4b33      	ldr	r3, [pc, #204]	; (8001398 <_Z15All_mode_UARTUIv+0x230>)
 80012cc:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[1] = dataF2;
 80012ce:	4b28      	ldr	r3, [pc, #160]	; (8001370 <_Z15All_mode_UARTUIv+0x208>)
 80012d0:	781a      	ldrb	r2, [r3, #0]
 80012d2:	4b31      	ldr	r3, [pc, #196]	; (8001398 <_Z15All_mode_UARTUIv+0x230>)
 80012d4:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80012d6:	4b28      	ldr	r3, [pc, #160]	; (8001378 <_Z15All_mode_UARTUIv+0x210>)
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <_Z15All_mode_UARTUIv+0x20c>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <_Z15All_mode_UARTUIv+0x208>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <_Z15All_mode_UARTUIv+0x214>)
 80012f0:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <_Z15All_mode_UARTUIv+0x204>)
 80012f4:	781a      	ldrb	r2, [r3, #0]
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <_Z15All_mode_UARTUIv+0x214>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	f040 8383 	bne.w	8001a06 <_Z15All_mode_UARTUIv+0x89e>
					M_state = 4;
 8001300:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <_Z15All_mode_UARTUIv+0x218>)
 8001302:	2204      	movs	r2, #4
 8001304:	701a      	strb	r2, [r3, #0]
					DataProtocol_SetVelo = Set_AngVelo[1];
 8001306:	4b24      	ldr	r3, [pc, #144]	; (8001398 <_Z15All_mode_UARTUIv+0x230>)
 8001308:	785b      	ldrb	r3, [r3, #1]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <_Z15All_mode_UARTUIv+0x234>)
 8001314:	edc3 7a00 	vstr	s15, [r3]
					//////// RPM to Rad/s => 2PI/60
					Velocity =((DataProtocol_SetVelo * 10)/255) * (2 * M_PI / 60);
 8001318:	4b20      	ldr	r3, [pc, #128]	; (800139c <_Z15All_mode_UARTUIv+0x234>)
 800131a:	edd3 7a00 	vldr	s15, [r3]
 800131e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001326:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80013a0 <_Z15All_mode_UARTUIv+0x238>
 800132a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800132e:	ee16 0a90 	vmov	r0, s13
 8001332:	f7ff f909 	bl	8000548 <__aeabi_f2d>
 8001336:	a308      	add	r3, pc, #32	; (adr r3, 8001358 <_Z15All_mode_UARTUIv+0x1f0>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7ff f95c 	bl	80005f8 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc4e 	bl	8000be8 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <_Z15All_mode_UARTUIv+0x23c>)
 8001350:	6013      	str	r3, [r2, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001352:	f000 fb87 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 8001356:	e356      	b.n	8001a06 <_Z15All_mode_UARTUIv+0x89e>
 8001358:	f37bebd5 	.word	0xf37bebd5
 800135c:	3fbacee9 	.word	0x3fbacee9
 8001360:	20000823 	.word	0x20000823
 8001364:	200007e2 	.word	0x200007e2
 8001368:	200007c0 	.word	0x200007c0
 800136c:	20000825 	.word	0x20000825
 8001370:	2000082a 	.word	0x2000082a
 8001374:	20000829 	.word	0x20000829
 8001378:	20000824 	.word	0x20000824
 800137c:	20000827 	.word	0x20000827
 8001380:	2000082b 	.word	0x2000082b
 8001384:	20000826 	.word	0x20000826
 8001388:	2000078b 	.word	0x2000078b
 800138c:	2000054c 	.word	0x2000054c
 8001390:	20000204 	.word	0x20000204
 8001394:	20000444 	.word	0x20000444
 8001398:	200007ec 	.word	0x200007ec
 800139c:	200007f0 	.word	0x200007f0
 80013a0:	437f0000 	.word	0x437f0000
 80013a4:	200005d8 	.word	0x200005d8
		////==============[Angular Position Set]===========
			case 5:
					chksum = MainBuf[newPos_uart-1];
 80013a8:	4b9f      	ldr	r3, [pc, #636]	; (8001628 <_Z15All_mode_UARTUIv+0x4c0>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	4a9f      	ldr	r2, [pc, #636]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 80013b0:	5cd2      	ldrb	r2, [r2, r3]
 80013b2:	4b9f      	ldr	r3, [pc, #636]	; (8001630 <_Z15All_mode_UARTUIv+0x4c8>)
 80013b4:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80013b6:	4b9c      	ldr	r3, [pc, #624]	; (8001628 <_Z15All_mode_UARTUIv+0x4c0>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	3b02      	subs	r3, #2
 80013bc:	4a9b      	ldr	r2, [pc, #620]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 80013be:	5cd2      	ldrb	r2, [r2, r3]
 80013c0:	4b9c      	ldr	r3, [pc, #624]	; (8001634 <_Z15All_mode_UARTUIv+0x4cc>)
 80013c2:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80013c4:	4b98      	ldr	r3, [pc, #608]	; (8001628 <_Z15All_mode_UARTUIv+0x4c0>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	3b03      	subs	r3, #3
 80013ca:	4a98      	ldr	r2, [pc, #608]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 80013cc:	5cd2      	ldrb	r2, [r2, r3]
 80013ce:	4b9a      	ldr	r3, [pc, #616]	; (8001638 <_Z15All_mode_UARTUIv+0x4d0>)
 80013d0:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[0] = dataF1;
 80013d2:	4b99      	ldr	r3, [pc, #612]	; (8001638 <_Z15All_mode_UARTUIv+0x4d0>)
 80013d4:	781a      	ldrb	r2, [r3, #0]
 80013d6:	4b99      	ldr	r3, [pc, #612]	; (800163c <_Z15All_mode_UARTUIv+0x4d4>)
 80013d8:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[1] = dataF2;
 80013da:	4b96      	ldr	r3, [pc, #600]	; (8001634 <_Z15All_mode_UARTUIv+0x4cc>)
 80013dc:	781a      	ldrb	r2, [r3, #0]
 80013de:	4b97      	ldr	r3, [pc, #604]	; (800163c <_Z15All_mode_UARTUIv+0x4d4>)
 80013e0:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80013e2:	4b97      	ldr	r3, [pc, #604]	; (8001640 <_Z15All_mode_UARTUIv+0x4d8>)
 80013e4:	781a      	ldrb	r2, [r3, #0]
 80013e6:	4b94      	ldr	r3, [pc, #592]	; (8001638 <_Z15All_mode_UARTUIv+0x4d0>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b91      	ldr	r3, [pc, #580]	; (8001634 <_Z15All_mode_UARTUIv+0x4cc>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b92      	ldr	r3, [pc, #584]	; (8001644 <_Z15All_mode_UARTUIv+0x4dc>)
 80013fc:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80013fe:	4b8c      	ldr	r3, [pc, #560]	; (8001630 <_Z15All_mode_UARTUIv+0x4c8>)
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	4b90      	ldr	r3, [pc, #576]	; (8001644 <_Z15All_mode_UARTUIv+0x4dc>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	f040 82ff 	bne.w	8001a0a <_Z15All_mode_UARTUIv+0x8a2>
					M_state = 5;
 800140c:	4b8e      	ldr	r3, [pc, #568]	; (8001648 <_Z15All_mode_UARTUIv+0x4e0>)
 800140e:	2205      	movs	r2, #5
 8001410:	701a      	strb	r2, [r3, #0]

					DataProtocol_SetAngPosi = (Set_AngPosi[0]*256) + Set_AngPosi[1];
 8001412:	4b8a      	ldr	r3, [pc, #552]	; (800163c <_Z15All_mode_UARTUIv+0x4d4>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	4a88      	ldr	r2, [pc, #544]	; (800163c <_Z15All_mode_UARTUIv+0x4d4>)
 800141a:	7852      	ldrb	r2, [r2, #1]
 800141c:	4413      	add	r3, r2
 800141e:	4a8b      	ldr	r2, [pc, #556]	; (800164c <_Z15All_mode_UARTUIv+0x4e4>)
 8001420:	6013      	str	r3, [r2, #0]
					//int degree_Uart;
					degree_Uart = round((DataProtocol_SetAngPosi / (M_PI * 10000) * 180));
 8001422:	4b8a      	ldr	r3, [pc, #552]	; (800164c <_Z15All_mode_UARTUIv+0x4e4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f87c 	bl	8000524 <__aeabi_i2d>
 800142c:	a37a      	add	r3, pc, #488	; (adr r3, 8001618 <_Z15All_mode_UARTUIv+0x4b0>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff fa0b 	bl	800084c <__aeabi_ddiv>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	4b83      	ldr	r3, [pc, #524]	; (8001650 <_Z15All_mode_UARTUIv+0x4e8>)
 8001444:	f7ff f8d8 	bl	80005f8 <__aeabi_dmul>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	ec43 2b17 	vmov	d7, r2, r3
 8001450:	eeb0 0a47 	vmov.f32	s0, s14
 8001454:	eef0 0a67 	vmov.f32	s1, s15
 8001458:	f01b ff1a 	bl	801d290 <round>
 800145c:	ec53 2b10 	vmov	r2, r3, d0
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb78 	bl	8000b58 <__aeabi_d2iz>
 8001468:	4603      	mov	r3, r0
 800146a:	4a7a      	ldr	r2, [pc, #488]	; (8001654 <_Z15All_mode_UARTUIv+0x4ec>)
 800146c:	6013      	str	r3, [r2, #0]
					positionlog[0] = (float)(degree_Uart * M_PI) / 180;
 800146e:	4b79      	ldr	r3, [pc, #484]	; (8001654 <_Z15All_mode_UARTUIv+0x4ec>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff f856 	bl	8000524 <__aeabi_i2d>
 8001478:	a369      	add	r3, pc, #420	; (adr r3, 8001620 <_Z15All_mode_UARTUIv+0x4b8>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff f8bb 	bl	80005f8 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f7ff fbad 	bl	8000be8 <__aeabi_d2f>
 800148e:	ee06 0a90 	vmov	s13, r0
 8001492:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001658 <_Z15All_mode_UARTUIv+0x4f0>
 8001496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149a:	4b70      	ldr	r3, [pc, #448]	; (800165c <_Z15All_mode_UARTUIv+0x4f4>)
 800149c:	edc3 7a00 	vstr	s15, [r3]
					//positionlog[0] = (float)(DataProtocol_SetAngPosi / 10000.0);
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80014a0:	f000 fae0 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 80014a4:	e2b1      	b.n	8001a0a <_Z15All_mode_UARTUIv+0x8a2>
		////==============[Goal 1 station]===========
			case 6:
					chksum = MainBuf[newPos_uart-1];
 80014a6:	4b60      	ldr	r3, [pc, #384]	; (8001628 <_Z15All_mode_UARTUIv+0x4c0>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	4a5f      	ldr	r2, [pc, #380]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 80014ae:	5cd2      	ldrb	r2, [r2, r3]
 80014b0:	4b5f      	ldr	r3, [pc, #380]	; (8001630 <_Z15All_mode_UARTUIv+0x4c8>)
 80014b2:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80014b4:	4b5c      	ldr	r3, [pc, #368]	; (8001628 <_Z15All_mode_UARTUIv+0x4c0>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	3b02      	subs	r3, #2
 80014ba:	4a5c      	ldr	r2, [pc, #368]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 80014bc:	5cd2      	ldrb	r2, [r2, r3]
 80014be:	4b5d      	ldr	r3, [pc, #372]	; (8001634 <_Z15All_mode_UARTUIv+0x4cc>)
 80014c0:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80014c2:	4b59      	ldr	r3, [pc, #356]	; (8001628 <_Z15All_mode_UARTUIv+0x4c0>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	3b03      	subs	r3, #3
 80014c8:	4a58      	ldr	r2, [pc, #352]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 80014ca:	5cd2      	ldrb	r2, [r2, r3]
 80014cc:	4b5a      	ldr	r3, [pc, #360]	; (8001638 <_Z15All_mode_UARTUIv+0x4d0>)
 80014ce:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[0] = dataF1;
 80014d0:	4b59      	ldr	r3, [pc, #356]	; (8001638 <_Z15All_mode_UARTUIv+0x4d0>)
 80014d2:	781a      	ldrb	r2, [r3, #0]
 80014d4:	4b62      	ldr	r3, [pc, #392]	; (8001660 <_Z15All_mode_UARTUIv+0x4f8>)
 80014d6:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[1] = dataF2;
 80014d8:	4b56      	ldr	r3, [pc, #344]	; (8001634 <_Z15All_mode_UARTUIv+0x4cc>)
 80014da:	781a      	ldrb	r2, [r3, #0]
 80014dc:	4b60      	ldr	r3, [pc, #384]	; (8001660 <_Z15All_mode_UARTUIv+0x4f8>)
 80014de:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80014e0:	4b57      	ldr	r3, [pc, #348]	; (8001640 <_Z15All_mode_UARTUIv+0x4d8>)
 80014e2:	781a      	ldrb	r2, [r3, #0]
 80014e4:	4b54      	ldr	r3, [pc, #336]	; (8001638 <_Z15All_mode_UARTUIv+0x4d0>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b51      	ldr	r3, [pc, #324]	; (8001634 <_Z15All_mode_UARTUIv+0x4cc>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	4b52      	ldr	r3, [pc, #328]	; (8001644 <_Z15All_mode_UARTUIv+0x4dc>)
 80014fa:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80014fc:	4b4c      	ldr	r3, [pc, #304]	; (8001630 <_Z15All_mode_UARTUIv+0x4c8>)
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	4b50      	ldr	r3, [pc, #320]	; (8001644 <_Z15All_mode_UARTUIv+0x4dc>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	f040 8282 	bne.w	8001a0e <_Z15All_mode_UARTUIv+0x8a6>
					M_state = 6;
 800150a:	4b4f      	ldr	r3, [pc, #316]	; (8001648 <_Z15All_mode_UARTUIv+0x4e0>)
 800150c:	2206      	movs	r2, #6
 800150e:	701a      	strb	r2, [r3, #0]

					///////// Load 1 station Data /////////////
					positionlog[0] = PosDataSet[Set_Goal_1Sta[1]];
 8001510:	4b53      	ldr	r3, [pc, #332]	; (8001660 <_Z15All_mode_UARTUIv+0x4f8>)
 8001512:	785b      	ldrb	r3, [r3, #1]
 8001514:	4a53      	ldr	r2, [pc, #332]	; (8001664 <_Z15All_mode_UARTUIv+0x4fc>)
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a4f      	ldr	r2, [pc, #316]	; (800165c <_Z15All_mode_UARTUIv+0x4f4>)
 800151e:	6013      	str	r3, [r2, #0]
					Set1_Sta = Set_Goal_1Sta[1];
 8001520:	4b4f      	ldr	r3, [pc, #316]	; (8001660 <_Z15All_mode_UARTUIv+0x4f8>)
 8001522:	785b      	ldrb	r3, [r3, #1]
 8001524:	461a      	mov	r2, r3
 8001526:	4b50      	ldr	r3, [pc, #320]	; (8001668 <_Z15All_mode_UARTUIv+0x500>)
 8001528:	601a      	str	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					xu_Uart();
 800152a:	f000 fa9b 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 800152e:	e26e      	b.n	8001a0e <_Z15All_mode_UARTUIv+0x8a6>
		////==============[Goal n station]===========
			case 7:
				Nstation = MainBuf[(newPos_uart - datasize_uart)+1];
 8001530:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <_Z15All_mode_UARTUIv+0x4c0>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b4d      	ldr	r3, [pc, #308]	; (800166c <_Z15All_mode_UARTUIv+0x504>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	3301      	adds	r3, #1
 800153e:	4a3b      	ldr	r2, [pc, #236]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 8001540:	5cd2      	ldrb	r2, [r2, r3]
 8001542:	4b4b      	ldr	r3, [pc, #300]	; (8001670 <_Z15All_mode_UARTUIv+0x508>)
 8001544:	701a      	strb	r2, [r3, #0]
				yur = Nstation;
 8001546:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <_Z15All_mode_UARTUIv+0x508>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	60fb      	str	r3, [r7, #12]
				zur = ( yur / 2 ) + yur % 2;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	0fda      	lsrs	r2, r3, #31
 8001550:	4413      	add	r3, r2
 8001552:	105b      	asrs	r3, r3, #1
 8001554:	461a      	mov	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	bfb8      	it	lt
 8001560:	425b      	neglt	r3, r3
 8001562:	4413      	add	r3, r2
 8001564:	60bb      	str	r3, [r7, #8]
				kur = 0; // counter
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]

				for(int i = 0; i < zur; i++ ){
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	429a      	cmp	r2, r3
 8001574:	da1e      	bge.n	80015b4 <_Z15All_mode_UARTUIv+0x44c>
					dataFSum += MainBuf[oldPos_uart + (i+2)];
 8001576:	4b3f      	ldr	r3, [pc, #252]	; (8001674 <_Z15All_mode_UARTUIv+0x50c>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	3302      	adds	r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	4a2a      	ldr	r2, [pc, #168]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 8001584:	5cd2      	ldrb	r2, [r2, r3]
 8001586:	4b3c      	ldr	r3, [pc, #240]	; (8001678 <_Z15All_mode_UARTUIv+0x510>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <_Z15All_mode_UARTUIv+0x510>)
 8001590:	701a      	strb	r2, [r3, #0]
					Goal_nSta[i] = MainBuf[oldPos_uart + (i+2)];
 8001592:	4b38      	ldr	r3, [pc, #224]	; (8001674 <_Z15All_mode_UARTUIv+0x50c>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	3302      	adds	r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	4a23      	ldr	r2, [pc, #140]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 80015a0:	5cd1      	ldrb	r1, [r2, r3]
 80015a2:	4a36      	ldr	r2, [pc, #216]	; (800167c <_Z15All_mode_UARTUIv+0x514>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	4413      	add	r3, r2
 80015a8:	460a      	mov	r2, r1
 80015aa:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < zur; i++ ){
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	3301      	adds	r3, #1
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	e7dc      	b.n	800156e <_Z15All_mode_UARTUIv+0x406>
				}
				for(int x = 1; x < Nstation+1; x++){
 80015b4:	2301      	movs	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <_Z15All_mode_UARTUIv+0x508>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	4293      	cmp	r3, r2
 80015c2:	dc5f      	bgt.n	8001684 <_Z15All_mode_UARTUIv+0x51c>
                    if(x % 2 == 1){
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	bfb8      	it	lt
 80015ce:	425b      	neglt	r3, r3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d10b      	bne.n	80015ec <_Z15All_mode_UARTUIv+0x484>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] % 16);
 80015d4:	4a29      	ldr	r2, [pc, #164]	; (800167c <_Z15All_mode_UARTUIv+0x514>)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	4413      	add	r3, r2
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f002 020f 	and.w	r2, r2, #15
 80015e4:	b2d1      	uxtb	r1, r2
 80015e6:	4a26      	ldr	r2, [pc, #152]	; (8001680 <_Z15All_mode_UARTUIv+0x518>)
 80015e8:	54d1      	strb	r1, [r2, r3]
 80015ea:	e011      	b.n	8001610 <_Z15All_mode_UARTUIv+0x4a8>
                    }else if(x % 2 == 0){
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10c      	bne.n	8001610 <_Z15All_mode_UARTUIv+0x4a8>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] / 16);
 80015f6:	4a21      	ldr	r2, [pc, #132]	; (800167c <_Z15All_mode_UARTUIv+0x514>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	4413      	add	r3, r2
 80015fc:	781a      	ldrb	r2, [r3, #0]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3b01      	subs	r3, #1
 8001602:	0912      	lsrs	r2, r2, #4
 8001604:	b2d1      	uxtb	r1, r2
 8001606:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <_Z15All_mode_UARTUIv+0x518>)
 8001608:	54d1      	strb	r1, [r2, r3]
                        kur++;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3301      	adds	r3, #1
 800160e:	61fb      	str	r3, [r7, #28]
				for(int x = 1; x < Nstation+1; x++){
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3301      	adds	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	e7cf      	b.n	80015b8 <_Z15All_mode_UARTUIv+0x450>
 8001618:	4c5d390c 	.word	0x4c5d390c
 800161c:	40deadfb 	.word	0x40deadfb
 8001620:	54442d18 	.word	0x54442d18
 8001624:	400921fb 	.word	0x400921fb
 8001628:	200007e2 	.word	0x200007e2
 800162c:	200007c0 	.word	0x200007c0
 8001630:	20000825 	.word	0x20000825
 8001634:	2000082a 	.word	0x2000082a
 8001638:	20000829 	.word	0x20000829
 800163c:	200007f4 	.word	0x200007f4
 8001640:	20000824 	.word	0x20000824
 8001644:	20000827 	.word	0x20000827
 8001648:	2000082b 	.word	0x2000082b
 800164c:	200007f8 	.word	0x200007f8
 8001650:	40668000 	.word	0x40668000
 8001654:	20000830 	.word	0x20000830
 8001658:	43340000 	.word	0x43340000
 800165c:	20000194 	.word	0x20000194
 8001660:	200007fc 	.word	0x200007fc
 8001664:	20000568 	.word	0x20000568
 8001668:	2000081c 	.word	0x2000081c
 800166c:	20000820 	.word	0x20000820
 8001670:	2000082c 	.word	0x2000082c
 8001674:	200007e0 	.word	0x200007e0
 8001678:	2000082d 	.word	0x2000082d
 800167c:	20000800 	.word	0x20000800
 8001680:	20000808 	.word	0x20000808
                    }
                }

				chksum = MainBuf[newPos_uart-1];
 8001684:	4b96      	ldr	r3, [pc, #600]	; (80018e0 <_Z15All_mode_UARTUIv+0x778>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	3b01      	subs	r3, #1
 800168a:	4a96      	ldr	r2, [pc, #600]	; (80018e4 <_Z15All_mode_UARTUIv+0x77c>)
 800168c:	5cd2      	ldrb	r2, [r2, r3]
 800168e:	4b96      	ldr	r3, [pc, #600]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 8001690:	701a      	strb	r2, [r3, #0]
				chksum3 = ~(StartM + Nstation + dataFSum);
 8001692:	4b96      	ldr	r3, [pc, #600]	; (80018ec <_Z15All_mode_UARTUIv+0x784>)
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	4b96      	ldr	r3, [pc, #600]	; (80018f0 <_Z15All_mode_UARTUIv+0x788>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4b95      	ldr	r3, [pc, #596]	; (80018f4 <_Z15All_mode_UARTUIv+0x78c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b93      	ldr	r3, [pc, #588]	; (80018f8 <_Z15All_mode_UARTUIv+0x790>)
 80016ac:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum3){
 80016ae:	4b8e      	ldr	r3, [pc, #568]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 80016b0:	781a      	ldrb	r2, [r3, #0]
 80016b2:	4b91      	ldr	r3, [pc, #580]	; (80018f8 <_Z15All_mode_UARTUIv+0x790>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	f040 81ab 	bne.w	8001a12 <_Z15All_mode_UARTUIv+0x8aa>
					M_state = 7;
 80016bc:	4b8f      	ldr	r3, [pc, #572]	; (80018fc <_Z15All_mode_UARTUIv+0x794>)
 80016be:	2207      	movs	r2, #7
 80016c0:	701a      	strb	r2, [r3, #0]

					/////////// Load n station-> positionlog  //////////
					//for(int j = 0; j <= len(PosDataSet); j++){
					for(int j = 0; j <= Nstation; j++){
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b8a      	ldr	r3, [pc, #552]	; (80018f0 <_Z15All_mode_UARTUIv+0x788>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4293      	cmp	r3, r2
 80016d0:	dc10      	bgt.n	80016f4 <_Z15All_mode_UARTUIv+0x58c>
						positionlog[j] = PosDataSet[Set_Goal_nSta[j]];
 80016d2:	4a8b      	ldr	r2, [pc, #556]	; (8001900 <_Z15All_mode_UARTUIv+0x798>)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4413      	add	r3, r2
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	4a8a      	ldr	r2, [pc, #552]	; (8001904 <_Z15All_mode_UARTUIv+0x79c>)
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4989      	ldr	r1, [pc, #548]	; (8001908 <_Z15All_mode_UARTUIv+0x7a0>)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	601a      	str	r2, [r3, #0]
					for(int j = 0; j <= Nstation; j++){
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	3301      	adds	r3, #1
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	e7e8      	b.n	80016c6 <_Z15All_mode_UARTUIv+0x55e>
						//Set_Goal_nSta -> raw index from UART
					}

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					dataFSum = 0;
 80016f4:	4b7f      	ldr	r3, [pc, #508]	; (80018f4 <_Z15All_mode_UARTUIv+0x78c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
					xu_Uart();
 80016fa:	f000 f9b3 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 80016fe:	e188      	b.n	8001a12 <_Z15All_mode_UARTUIv+0x8aa>
		////==============[RUN Go to Goal station Order to Work]===========
			case 8: //10011000 01100111
				chksum = MainBuf[newPos_uart-1];
 8001700:	4b77      	ldr	r3, [pc, #476]	; (80018e0 <_Z15All_mode_UARTUIv+0x778>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	3b01      	subs	r3, #1
 8001706:	4a77      	ldr	r2, [pc, #476]	; (80018e4 <_Z15All_mode_UARTUIv+0x77c>)
 8001708:	5cd2      	ldrb	r2, [r2, r3]
 800170a:	4b77      	ldr	r3, [pc, #476]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 800170c:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800170e:	4b77      	ldr	r3, [pc, #476]	; (80018ec <_Z15All_mode_UARTUIv+0x784>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	43db      	mvns	r3, r3
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b7d      	ldr	r3, [pc, #500]	; (800190c <_Z15All_mode_UARTUIv+0x7a4>)
 8001718:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800171a:	4b73      	ldr	r3, [pc, #460]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 800171c:	781a      	ldrb	r2, [r3, #0]
 800171e:	4b7b      	ldr	r3, [pc, #492]	; (800190c <_Z15All_mode_UARTUIv+0x7a4>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	f040 8177 	bne.w	8001a16 <_Z15All_mode_UARTUIv+0x8ae>
					M_state = 8;
 8001728:	4b74      	ldr	r3, [pc, #464]	; (80018fc <_Z15All_mode_UARTUIv+0x794>)
 800172a:	2208      	movs	r2, #8
 800172c:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800172e:	f000 f999 	bl	8001a64 <_Z7xu_Uartv>

		///////// Order to Work !!! ///
					grandState = work;
 8001732:	4b77      	ldr	r3, [pc, #476]	; (8001910 <_Z15All_mode_UARTUIv+0x7a8>)
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
					//if(grandState == Ready){grandState = work;}
					//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2 ,1000);
				}
				break;
 8001738:	e16d      	b.n	8001a16 <_Z15All_mode_UARTUIv+0x8ae>
		////==============[Request Current station]===========
			case 9: //10011001 01100110
				chksum = MainBuf[newPos_uart-1];
 800173a:	4b69      	ldr	r3, [pc, #420]	; (80018e0 <_Z15All_mode_UARTUIv+0x778>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	3b01      	subs	r3, #1
 8001740:	4a68      	ldr	r2, [pc, #416]	; (80018e4 <_Z15All_mode_UARTUIv+0x77c>)
 8001742:	5cd2      	ldrb	r2, [r2, r3]
 8001744:	4b68      	ldr	r3, [pc, #416]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 8001746:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001748:	4b68      	ldr	r3, [pc, #416]	; (80018ec <_Z15All_mode_UARTUIv+0x784>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	43db      	mvns	r3, r3
 800174e:	b2da      	uxtb	r2, r3
 8001750:	4b6e      	ldr	r3, [pc, #440]	; (800190c <_Z15All_mode_UARTUIv+0x7a4>)
 8001752:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001754:	4b64      	ldr	r3, [pc, #400]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 8001756:	781a      	ldrb	r2, [r3, #0]
 8001758:	4b6c      	ldr	r3, [pc, #432]	; (800190c <_Z15All_mode_UARTUIv+0x7a4>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	f040 815c 	bne.w	8001a1a <_Z15All_mode_UARTUIv+0x8b2>
					M_state = 9;
 8001762:	4b66      	ldr	r3, [pc, #408]	; (80018fc <_Z15All_mode_UARTUIv+0x794>)
 8001764:	2209      	movs	r2, #9
 8001766:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001768:	f000 f97c 	bl	8001a64 <_Z7xu_Uartv>
					//Req_sta[1] = 0;
					//Req_sta[2] = x;
					//Req_sta[3] = ~(Req_sta[0] + Req_sta[1] + Req_sta[2]);
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_sta, 4 ,100);
 800176c:	2364      	movs	r3, #100	; 0x64
 800176e:	2204      	movs	r2, #4
 8001770:	4968      	ldr	r1, [pc, #416]	; (8001914 <_Z15All_mode_UARTUIv+0x7ac>)
 8001772:	4869      	ldr	r0, [pc, #420]	; (8001918 <_Z15All_mode_UARTUIv+0x7b0>)
 8001774:	f01a fba5 	bl	801bec2 <HAL_UART_Transmit>
				}
				break;
 8001778:	e14f      	b.n	8001a1a <_Z15All_mode_UARTUIv+0x8b2>
		////==============[Request Angular Position]===========
			case 10: //10011010 01100101
				chksum = MainBuf[newPos_uart-1];
 800177a:	4b59      	ldr	r3, [pc, #356]	; (80018e0 <_Z15All_mode_UARTUIv+0x778>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	3b01      	subs	r3, #1
 8001780:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <_Z15All_mode_UARTUIv+0x77c>)
 8001782:	5cd2      	ldrb	r2, [r2, r3]
 8001784:	4b58      	ldr	r3, [pc, #352]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 8001786:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001788:	4b58      	ldr	r3, [pc, #352]	; (80018ec <_Z15All_mode_UARTUIv+0x784>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	43db      	mvns	r3, r3
 800178e:	b2da      	uxtb	r2, r3
 8001790:	4b5e      	ldr	r3, [pc, #376]	; (800190c <_Z15All_mode_UARTUIv+0x7a4>)
 8001792:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001794:	4b54      	ldr	r3, [pc, #336]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	4b5c      	ldr	r3, [pc, #368]	; (800190c <_Z15All_mode_UARTUIv+0x7a4>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	f040 813e 	bne.w	8001a1e <_Z15All_mode_UARTUIv+0x8b6>
					M_state = 10;
 80017a2:	4b56      	ldr	r3, [pc, #344]	; (80018fc <_Z15All_mode_UARTUIv+0x794>)
 80017a4:	220a      	movs	r2, #10
 80017a6:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80017a8:	f000 f95c 	bl	8001a64 <_Z7xu_Uartv>
					DataProtocol_AngPosi = (CurrentEn * 10000); //KalP
 80017ac:	4b5b      	ldr	r3, [pc, #364]	; (800191c <_Z15All_mode_UARTUIv+0x7b4>)
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001920 <_Z15All_mode_UARTUIv+0x7b8>
 80017b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017be:	ee17 2a90 	vmov	r2, s15
 80017c2:	4b58      	ldr	r3, [pc, #352]	; (8001924 <_Z15All_mode_UARTUIv+0x7bc>)
 80017c4:	601a      	str	r2, [r3, #0]
					Req_AngPosi[1] = (DataProtocol_AngPosi / 256);
 80017c6:	4b57      	ldr	r3, [pc, #348]	; (8001924 <_Z15All_mode_UARTUIv+0x7bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	da00      	bge.n	80017d0 <_Z15All_mode_UARTUIv+0x668>
 80017ce:	33ff      	adds	r3, #255	; 0xff
 80017d0:	121b      	asrs	r3, r3, #8
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b54      	ldr	r3, [pc, #336]	; (8001928 <_Z15All_mode_UARTUIv+0x7c0>)
 80017d6:	705a      	strb	r2, [r3, #1]
					Req_AngPosi[2] = (DataProtocol_AngPosi % 256);
 80017d8:	4b52      	ldr	r3, [pc, #328]	; (8001924 <_Z15All_mode_UARTUIv+0x7bc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	425a      	negs	r2, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	bf58      	it	pl
 80017e4:	4253      	negpl	r3, r2
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b4f      	ldr	r3, [pc, #316]	; (8001928 <_Z15All_mode_UARTUIv+0x7c0>)
 80017ea:	709a      	strb	r2, [r3, #2]
					Req_AngPosi[3] = ~(Req_AngPosi[0] + Req_AngPosi[1] + Req_AngPosi[2]);
 80017ec:	4b4e      	ldr	r3, [pc, #312]	; (8001928 <_Z15All_mode_UARTUIv+0x7c0>)
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	4b4d      	ldr	r3, [pc, #308]	; (8001928 <_Z15All_mode_UARTUIv+0x7c0>)
 80017f2:	785b      	ldrb	r3, [r3, #1]
 80017f4:	4413      	add	r3, r2
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b4b      	ldr	r3, [pc, #300]	; (8001928 <_Z15All_mode_UARTUIv+0x7c0>)
 80017fa:	789b      	ldrb	r3, [r3, #2]
 80017fc:	4413      	add	r3, r2
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b48      	ldr	r3, [pc, #288]	; (8001928 <_Z15All_mode_UARTUIv+0x7c0>)
 8001806:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_AngPosi, 4 ,100);
 8001808:	2364      	movs	r3, #100	; 0x64
 800180a:	2204      	movs	r2, #4
 800180c:	4946      	ldr	r1, [pc, #280]	; (8001928 <_Z15All_mode_UARTUIv+0x7c0>)
 800180e:	4842      	ldr	r0, [pc, #264]	; (8001918 <_Z15All_mode_UARTUIv+0x7b0>)
 8001810:	f01a fb57 	bl	801bec2 <HAL_UART_Transmit>
				}
				break;
 8001814:	e103      	b.n	8001a1e <_Z15All_mode_UARTUIv+0x8b6>
		////==============[Request MAX Angular velo]===========
			case 11: //10011011 01100100
				chksum = MainBuf[newPos_uart-1];
 8001816:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <_Z15All_mode_UARTUIv+0x778>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	3b01      	subs	r3, #1
 800181c:	4a31      	ldr	r2, [pc, #196]	; (80018e4 <_Z15All_mode_UARTUIv+0x77c>)
 800181e:	5cd2      	ldrb	r2, [r2, r3]
 8001820:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 8001822:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001824:	4b31      	ldr	r3, [pc, #196]	; (80018ec <_Z15All_mode_UARTUIv+0x784>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	43db      	mvns	r3, r3
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b37      	ldr	r3, [pc, #220]	; (800190c <_Z15All_mode_UARTUIv+0x7a4>)
 800182e:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001830:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 8001832:	781a      	ldrb	r2, [r3, #0]
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <_Z15All_mode_UARTUIv+0x7a4>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	f040 80f2 	bne.w	8001a22 <_Z15All_mode_UARTUIv+0x8ba>
					M_state = 11;
 800183e:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <_Z15All_mode_UARTUIv+0x794>)
 8001840:	220b      	movs	r2, #11
 8001842:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001844:	f000 f90e 	bl	8001a64 <_Z7xu_Uartv>
					DataProtocol_Velo = (KalV/(2 * 3.14)) * 60;
 8001848:	4b38      	ldr	r3, [pc, #224]	; (800192c <_Z15All_mode_UARTUIv+0x7c4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe7b 	bl	8000548 <__aeabi_f2d>
 8001852:	a321      	add	r3, pc, #132	; (adr r3, 80018d8 <_Z15All_mode_UARTUIv+0x770>)
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	f7fe fff8 	bl	800084c <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	4b31      	ldr	r3, [pc, #196]	; (8001930 <_Z15All_mode_UARTUIv+0x7c8>)
 800186a:	f7fe fec5 	bl	80005f8 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	f7ff f9b7 	bl	8000be8 <__aeabi_d2f>
 800187a:	4603      	mov	r3, r0
 800187c:	4a2d      	ldr	r2, [pc, #180]	; (8001934 <_Z15All_mode_UARTUIv+0x7cc>)
 800187e:	6013      	str	r3, [r2, #0]
					Req_MaxVelo[1] = 0;
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <_Z15All_mode_UARTUIv+0x7d0>)
 8001882:	2200      	movs	r2, #0
 8001884:	705a      	strb	r2, [r3, #1]
					Req_MaxVelo[2] = (DataProtocol_Velo * 255) / 10;
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <_Z15All_mode_UARTUIv+0x7cc>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800193c <_Z15All_mode_UARTUIv+0x7d4>
 8001890:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001894:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001898:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800189c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018a0:	edc7 7a01 	vstr	s15, [r7, #4]
 80018a4:	793b      	ldrb	r3, [r7, #4]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b23      	ldr	r3, [pc, #140]	; (8001938 <_Z15All_mode_UARTUIv+0x7d0>)
 80018aa:	709a      	strb	r2, [r3, #2]
					Req_MaxVelo[3] = ~(Req_MaxVelo[0] + Req_MaxVelo[1] + Req_MaxVelo[2]);
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <_Z15All_mode_UARTUIv+0x7d0>)
 80018ae:	781a      	ldrb	r2, [r3, #0]
 80018b0:	4b21      	ldr	r3, [pc, #132]	; (8001938 <_Z15All_mode_UARTUIv+0x7d0>)
 80018b2:	785b      	ldrb	r3, [r3, #1]
 80018b4:	4413      	add	r3, r2
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <_Z15All_mode_UARTUIv+0x7d0>)
 80018ba:	789b      	ldrb	r3, [r3, #2]
 80018bc:	4413      	add	r3, r2
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <_Z15All_mode_UARTUIv+0x7d0>)
 80018c6:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_MaxVelo, 4 ,1000);
 80018c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018cc:	2204      	movs	r2, #4
 80018ce:	491a      	ldr	r1, [pc, #104]	; (8001938 <_Z15All_mode_UARTUIv+0x7d0>)
 80018d0:	4811      	ldr	r0, [pc, #68]	; (8001918 <_Z15All_mode_UARTUIv+0x7b0>)
 80018d2:	f01a faf6 	bl	801bec2 <HAL_UART_Transmit>
				}
				break;
 80018d6:	e0a4      	b.n	8001a22 <_Z15All_mode_UARTUIv+0x8ba>
 80018d8:	51eb851f 	.word	0x51eb851f
 80018dc:	40191eb8 	.word	0x40191eb8
 80018e0:	200007e2 	.word	0x200007e2
 80018e4:	200007c0 	.word	0x200007c0
 80018e8:	20000825 	.word	0x20000825
 80018ec:	20000824 	.word	0x20000824
 80018f0:	2000082c 	.word	0x2000082c
 80018f4:	2000082d 	.word	0x2000082d
 80018f8:	20000828 	.word	0x20000828
 80018fc:	2000082b 	.word	0x2000082b
 8001900:	20000808 	.word	0x20000808
 8001904:	20000568 	.word	0x20000568
 8001908:	20000194 	.word	0x20000194
 800190c:	20000826 	.word	0x20000826
 8001910:	2000054c 	.word	0x2000054c
 8001914:	20000208 	.word	0x20000208
 8001918:	20000444 	.word	0x20000444
 800191c:	20000734 	.word	0x20000734
 8001920:	461c4000 	.word	0x461c4000
 8001924:	200007e4 	.word	0x200007e4
 8001928:	2000020c 	.word	0x2000020c
 800192c:	20000718 	.word	0x20000718
 8001930:	404e0000 	.word	0x404e0000
 8001934:	200007e8 	.word	0x200007e8
 8001938:	20000210 	.word	0x20000210
 800193c:	437f0000 	.word	0x437f0000
		////==============[Enable end effector]================
			case 12: //// 12  10011100 01100011
				chksum = MainBuf[newPos_uart-1];
 8001940:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <_Z15All_mode_UARTUIv+0x8d0>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	3b01      	subs	r3, #1
 8001946:	4a3d      	ldr	r2, [pc, #244]	; (8001a3c <_Z15All_mode_UARTUIv+0x8d4>)
 8001948:	5cd2      	ldrb	r2, [r2, r3]
 800194a:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <_Z15All_mode_UARTUIv+0x8d8>)
 800194c:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800194e:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <_Z15All_mode_UARTUIv+0x8dc>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	43db      	mvns	r3, r3
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b3c      	ldr	r3, [pc, #240]	; (8001a48 <_Z15All_mode_UARTUIv+0x8e0>)
 8001958:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800195a:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <_Z15All_mode_UARTUIv+0x8d8>)
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	4b3a      	ldr	r3, [pc, #232]	; (8001a48 <_Z15All_mode_UARTUIv+0x8e0>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d15f      	bne.n	8001a26 <_Z15All_mode_UARTUIv+0x8be>
					M_state = 12;
 8001966:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <_Z15All_mode_UARTUIv+0x8e4>)
 8001968:	220c      	movs	r2, #12
 800196a:	701a      	strb	r2, [r3, #0]

					flag_efftDis = 0;
 800196c:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <_Z15All_mode_UARTUIv+0x8e8>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]

					//flag_efftActi = 1;

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001972:	f000 f877 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 8001976:	e056      	b.n	8001a26 <_Z15All_mode_UARTUIv+0x8be>
		////==============[Disable end effector]================
			case 13: // 13 10011101 01100010
				chksum = MainBuf[newPos_uart-1];
 8001978:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <_Z15All_mode_UARTUIv+0x8d0>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	3b01      	subs	r3, #1
 800197e:	4a2f      	ldr	r2, [pc, #188]	; (8001a3c <_Z15All_mode_UARTUIv+0x8d4>)
 8001980:	5cd2      	ldrb	r2, [r2, r3]
 8001982:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <_Z15All_mode_UARTUIv+0x8d8>)
 8001984:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001986:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <_Z15All_mode_UARTUIv+0x8dc>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	43db      	mvns	r3, r3
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <_Z15All_mode_UARTUIv+0x8e0>)
 8001990:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001992:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <_Z15All_mode_UARTUIv+0x8d8>)
 8001994:	781a      	ldrb	r2, [r3, #0]
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <_Z15All_mode_UARTUIv+0x8e0>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d145      	bne.n	8001a2a <_Z15All_mode_UARTUIv+0x8c2>
					M_state = 13;
 800199e:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <_Z15All_mode_UARTUIv+0x8e4>)
 80019a0:	220d      	movs	r2, #13
 80019a2:	701a      	strb	r2, [r3, #0]
					//// End Effector Kill
					trig_efftRead = 0;
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <_Z15All_mode_UARTUIv+0x8ec>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
					flag_efftRead = 0;
 80019aa:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <_Z15All_mode_UARTUIv+0x8f0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
					flag_efftActi = 0;
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <_Z15All_mode_UARTUIv+0x8f4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
					flag_efftDis = 1;
 80019b6:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <_Z15All_mode_UARTUIv+0x8e8>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 80019bc:	f000 f852 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 80019c0:	e033      	b.n	8001a2a <_Z15All_mode_UARTUIv+0x8c2>
		////==============[Set Home Zero]================
			case 14: //10011110 01100001
				chksum = MainBuf[newPos_uart-1];
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <_Z15All_mode_UARTUIv+0x8d0>)
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <_Z15All_mode_UARTUIv+0x8d4>)
 80019ca:	5cd2      	ldrb	r2, [r2, r3]
 80019cc:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <_Z15All_mode_UARTUIv+0x8d8>)
 80019ce:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <_Z15All_mode_UARTUIv+0x8dc>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <_Z15All_mode_UARTUIv+0x8e0>)
 80019da:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <_Z15All_mode_UARTUIv+0x8d8>)
 80019de:	781a      	ldrb	r2, [r3, #0]
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <_Z15All_mode_UARTUIv+0x8e0>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d122      	bne.n	8001a2e <_Z15All_mode_UARTUIv+0x8c6>
					M_state = 14;
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <_Z15All_mode_UARTUIv+0x8e4>)
 80019ea:	220e      	movs	r2, #14
 80019ec:	701a      	strb	r2, [r3, #0]
					//act as set zero interrupt
//					position_order = 0;
//					positionlog[position_order] = 0.0;
//					Velocity = 7.0;
					grandState = SetZeroBf;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <_Z15All_mode_UARTUIv+0x8f8>)
 80019f0:	2206      	movs	r2, #6
 80019f2:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 80019f4:	f000 f836 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 80019f8:	e019      	b.n	8001a2e <_Z15All_mode_UARTUIv+0x8c6>
				break;
 80019fa:	bf00      	nop
 80019fc:	e018      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 80019fe:	bf00      	nop
 8001a00:	e016      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a02:	bf00      	nop
 8001a04:	e014      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a06:	bf00      	nop
 8001a08:	e012      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a0a:	bf00      	nop
 8001a0c:	e010      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a0e:	bf00      	nop
 8001a10:	e00e      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a12:	bf00      	nop
 8001a14:	e00c      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a16:	bf00      	nop
 8001a18:	e00a      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a1a:	bf00      	nop
 8001a1c:	e008      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a1e:	bf00      	nop
 8001a20:	e006      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a22:	bf00      	nop
 8001a24:	e004      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a26:	bf00      	nop
 8001a28:	e002      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a2a:	bf00      	nop
 8001a2c:	e000      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a2e:	bf00      	nop
			}
}
 8001a30:	bf00      	nop
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200007e2 	.word	0x200007e2
 8001a3c:	200007c0 	.word	0x200007c0
 8001a40:	20000825 	.word	0x20000825
 8001a44:	20000824 	.word	0x20000824
 8001a48:	20000826 	.word	0x20000826
 8001a4c:	2000082b 	.word	0x2000082b
 8001a50:	200001fc 	.word	0x200001fc
 8001a54:	2000078d 	.word	0x2000078d
 8001a58:	2000078c 	.word	0x2000078c
 8001a5c:	2000078b 	.word	0x2000078b
 8001a60:	2000054c 	.word	0x2000054c

08001a64 <_Z7xu_Uartv>:

void xu_Uart(){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 , 200); //Xu
 8001a68:	23c8      	movs	r3, #200	; 0xc8
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	4902      	ldr	r1, [pc, #8]	; (8001a78 <_Z7xu_Uartv+0x14>)
 8001a6e:	4803      	ldr	r0, [pc, #12]	; (8001a7c <_Z7xu_Uartv+0x18>)
 8001a70:	f01a fa27 	bl	801bec2 <HAL_UART_Transmit>
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000200 	.word	0x20000200
 8001a7c:	20000444 	.word	0x20000444

08001a80 <_Z7fn_Uartv>:

void fn_Uart(){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
 8001a84:	2364      	movs	r3, #100	; 0x64
 8001a86:	2202      	movs	r2, #2
 8001a88:	4902      	ldr	r1, [pc, #8]	; (8001a94 <_Z7fn_Uartv+0x14>)
 8001a8a:	4803      	ldr	r0, [pc, #12]	; (8001a98 <_Z7fn_Uartv+0x18>)
 8001a8c:	f01a fa19 	bl	801bec2 <HAL_UART_Transmit>
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000204 	.word	0x20000204
 8001a98:	20000444 	.word	0x20000444

08001a9c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001a9c:	b5b0      	push	{r4, r5, r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
      return pow(__type(__x), __type(__y));
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7fe fd3c 	bl	8000524 <__aeabi_i2d>
 8001aac:	4604      	mov	r4, r0
 8001aae:	460d      	mov	r5, r1
 8001ab0:	6838      	ldr	r0, [r7, #0]
 8001ab2:	f7fe fd37 	bl	8000524 <__aeabi_i2d>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	ec43 2b11 	vmov	d1, r2, r3
 8001abe:	ec45 4b10 	vmov	d0, r4, r5
 8001ac2:	f01b fc2b 	bl	801d31c <pow>
 8001ac6:	eeb0 7a40 	vmov.f32	s14, s0
 8001aca:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001ace:	eeb0 0a47 	vmov.f32	s0, s14
 8001ad2:	eef0 0a67 	vmov.f32	s1, s15
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bdb0      	pop	{r4, r5, r7, pc}

08001adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae0:	b0f2      	sub	sp, #456	; 0x1c8
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/////assign  Matrix  element value  //////////
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 8001ae4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001ae8:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8001aec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001af6:	f5a3 70cc 	sub.w	r0, r3, #408	; 0x198
 8001afa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001afe:	461a      	mov	r2, r3
 8001b00:	49ed      	ldr	r1, [pc, #948]	; (8001eb8 <main+0x3dc>)
 8001b02:	f002 fd5a 	bl	80045ba <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001b06:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b0a:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8001b0e:	4beb      	ldr	r3, [pc, #940]	; (8001ebc <main+0x3e0>)
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001b16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f002 fd67 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b22:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b26:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 8001b2a:	4be5      	ldr	r3, [pc, #916]	; (8001ec0 <main+0x3e4>)
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b32:	4619      	mov	r1, r3
 8001b34:	f002 fd5c 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 ,    1    ,      Dt    ,
 8001b38:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b3c:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f002 fd50 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b50:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b54:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8001b58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b62:	4619      	mov	r1, r3
 8001b64:	f002 fd44 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b68:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b6c:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 8001b70:	4bd2      	ldr	r3, [pc, #840]	; (8001ebc <main+0x3e0>)
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f002 fd39 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
			 0 ,    0    ,      1     ;
 8001b7e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b82:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b90:	4619      	mov	r1, r3
 8001b92:	f002 fd2d 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b96:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b9a:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f002 fd21 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bb2:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 8001bb6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f002 fd15 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 8001bc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 fd04 	bl	80045d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		X << 0 ,    0    ,      0     ;
 8001bd0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bd4:	f5a3 72aa 	sub.w	r2, r3, #340	; 0x154
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001be2:	f5a3 70b2 	sub.w	r0, r3, #356	; 0x164
 8001be6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bea:	461a      	mov	r2, r3
 8001bec:	49b5      	ldr	r1, [pc, #724]	; (8001ec4 <main+0x3e8>)
 8001bee:	f002 fd6f 	bl	80046d0 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001bf2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bf6:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001c04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c08:	4611      	mov	r1, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f002 fd7c 	bl	8004708 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001c10:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c14:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c22:	4619      	mov	r1, r3
 8001c24:	f002 fd70 	bl	8004708 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001c28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f002 fd5e 	bl	80046ee <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		X1 << 0 ,    0    ,      0     ;
 8001c32:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c36:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c44:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 8001c48:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	499e      	ldr	r1, [pc, #632]	; (8001ec8 <main+0x3ec>)
 8001c50:	f002 fd3e 	bl	80046d0 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001c54:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c58:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001c66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f002 fd4b 	bl	8004708 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001c72:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c76:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c84:	4619      	mov	r1, r3
 8001c86:	f002 fd3f 	bl	8004708 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001c8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 fd2d 	bl	80046ee <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>


		P << 0.000001 , 			0 	 , 			0     ,
 8001c94:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c98:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8001c9c:	4b8b      	ldr	r3, [pc, #556]	; (8001ecc <main+0x3f0>)
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001ca4:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8001ca8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cac:	461a      	mov	r2, r3
 8001cae:	4988      	ldr	r1, [pc, #544]	; (8001ed0 <main+0x3f4>)
 8001cb0:	f002 fc83 	bl	80045ba <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001cb4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001cb8:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001cc6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f002 fc8f 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cd2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001cd6:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f002 fc83 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 		 ,    0.000001    ,  		0     ,
 8001cea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001cee:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f002 fc77 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d02:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001d06:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001d0a:	4b70      	ldr	r3, [pc, #448]	; (8001ecc <main+0x3f0>)
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d12:	4619      	mov	r1, r3
 8001d14:	f002 fc6c 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d18:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001d1c:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f002 fc60 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
			 0 		 ,    		0    ,      0.000001     ;
 8001d30:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001d34:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d42:	4619      	mov	r1, r3
 8001d44:	f002 fc54 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d48:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001d4c:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f002 fc48 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d60:	4602      	mov	r2, r0
 8001d62:	4b5a      	ldr	r3, [pc, #360]	; (8001ecc <main+0x3f0>)
 8001d64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f002 fc3e 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		P << 0.000001 , 			0 	 , 			0     ,
 8001d74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f002 fc2d 	bl	80045d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		O << 0 , 	0 	 , 		0     ,
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001d86:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8001d8a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4950      	ldr	r1, [pc, #320]	; (8001ed4 <main+0x3f8>)
 8001d92:	f002 fc12 	bl	80045ba <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d9e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001da2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f002 fc21 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dae:	4602      	mov	r2, r0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001db8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	f002 fc16 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dc4:	4602      	mov	r2, r0
		     0 ,    0    ,  	0     ,
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001dce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	f002 fc0b 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001de4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	f002 fc00 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001dfa:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4610      	mov	r0, r2
 8001e02:	f002 fbf5 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001e06:	4602      	mov	r2, r0
			 0 ,    0    ,      0     ;
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001e10:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e14:	4619      	mov	r1, r3
 8001e16:	4610      	mov	r0, r2
 8001e18:	f002 fbea 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001e26:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	f002 fbdf 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001e32:	4602      	mov	r2, r0
 8001e34:	f04f 0300 	mov.w	r3, #0
 8001e38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001e3c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f002 fbd4 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		O << 0 , 	0 	 , 		0     ,
 8001e48:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f002 fbc3 	bl	80045d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		I << 1 , 0 , 0 ,
 8001e52:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001e5a:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8001e5e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001e62:	461a      	mov	r2, r3
 8001e64:	491c      	ldr	r1, [pc, #112]	; (8001ed8 <main+0x3fc>)
 8001e66:	f002 fba8 	bl	80045ba <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001e72:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001e76:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f002 fbb7 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001e82:	4602      	mov	r2, r0
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e8c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001e90:	4619      	mov	r1, r3
 8001e92:	4610      	mov	r0, r2
 8001e94:	f002 fbac 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001e98:	4602      	mov	r2, r0
			 0 , 1 , 0 ,
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ea2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	f002 fba1 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001eb4:	e012      	b.n	8001edc <main+0x400>
 8001eb6:	bf00      	nop
 8001eb8:	20000608 	.word	0x20000608
 8001ebc:	3c23d70a 	.word	0x3c23d70a
 8001ec0:	3851b717 	.word	0x3851b717
 8001ec4:	200006f0 	.word	0x200006f0
 8001ec8:	200006fc 	.word	0x200006fc
 8001ecc:	358637bd 	.word	0x358637bd
 8001ed0:	2000062c 	.word	0x2000062c
 8001ed4:	20000650 	.word	0x20000650
 8001ed8:	20000674 	.word	0x20000674
 8001edc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ee0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	f002 fb82 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001eec:	4602      	mov	r2, r0
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001ef6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001efa:	4619      	mov	r1, r3
 8001efc:	4610      	mov	r0, r2
 8001efe:	f002 fb77 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001f02:	4602      	mov	r2, r0
			 0 , 0 , 1 ;
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001f0c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001f10:	4619      	mov	r1, r3
 8001f12:	4610      	mov	r0, r2
 8001f14:	f002 fb6c 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f26:	4619      	mov	r1, r3
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f002 fb61 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f34:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001f38:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4610      	mov	r0, r2
 8001f40:	f002 fb56 	bl	80045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		I << 1 , 0 , 0 ,
 8001f44:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f002 fb45 	bl	80045d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		R << pow(10, 0);
 8001f4e:	2100      	movs	r1, #0
 8001f50:	200a      	movs	r0, #10
 8001f52:	f7ff fda3 	bl	8001a9c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001f56:	ec53 2b10 	vmov	r2, r3, d0
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f7fe fe43 	bl	8000be8 <__aeabi_d2f>
 8001f62:	4603      	mov	r3, r0
 8001f64:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001f68:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8001f6c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001f70:	461a      	mov	r2, r3
 8001f72:	49ab      	ldr	r1, [pc, #684]	; (8002220 <main+0x744>)
 8001f74:	f002 fc38 	bl	80047e8 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001f78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f002 fc42 	bl	8004806 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		D << 0 ;
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001f8a:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8001f8e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001f92:	461a      	mov	r2, r3
 8001f94:	49a3      	ldr	r1, [pc, #652]	; (8002224 <main+0x748>)
 8001f96:	f002 fc27 	bl	80047e8 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001f9a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f002 fc31 	bl	8004806 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		B << 0 , 0 , 0 ;
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001fac:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8001fb0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	499c      	ldr	r1, [pc, #624]	; (8002228 <main+0x74c>)
 8001fb8:	f002 fb8a 	bl	80046d0 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001fc4:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8001fc8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f002 fb9a 	bl	8004708 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001fde:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	f002 fb8f 	bl	8004708 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001fea:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f002 fb7d 	bl	80046ee <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		C << 1 , 0 , 0 ;
 8001ff4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ff8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001ffc:	f507 70be 	add.w	r0, r7, #380	; 0x17c
 8002000:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8002004:	461a      	mov	r2, r3
 8002006:	4989      	ldr	r1, [pc, #548]	; (800222c <main+0x750>)
 8002008:	f002 fc09 	bl	800481e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8002014:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8002018:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f002 fc18 	bl	8004854 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8002024:	4602      	mov	r2, r0
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800202e:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8002032:	4619      	mov	r1, r3
 8002034:	4610      	mov	r0, r2
 8002036:	f002 fc0d 	bl	8004854 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 800203a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800203e:	4618      	mov	r0, r3
 8002040:	f002 fbfc 	bl	800483c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>

		G << (Dt*Dt)/2 , Dt , 1 ;
 8002044:	4b7a      	ldr	r3, [pc, #488]	; (8002230 <main+0x754>)
 8002046:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800204a:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800204e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002052:	461a      	mov	r2, r3
 8002054:	4977      	ldr	r1, [pc, #476]	; (8002234 <main+0x758>)
 8002056:	f002 fb3b 	bl	80046d0 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 800205a:	4b77      	ldr	r3, [pc, #476]	; (8002238 <main+0x75c>)
 800205c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002060:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8002064:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f002 fb4c 	bl	8004708 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8002070:	4602      	mov	r2, r0
 8002072:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002076:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800207a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800207e:	4619      	mov	r1, r3
 8002080:	4610      	mov	r0, r2
 8002082:	f002 fb41 	bl	8004708 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8002086:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800208a:	4618      	mov	r0, r3
 800208c:	f002 fb2f 	bl	80046ee <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002090:	f014 fc30 	bl	80168f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002094:	f000 f9c4 	bl	8002420 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002098:	f000 fbd4 	bl	8002844 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800209c:	f000 fbaa 	bl	80027f4 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80020a0:	f000 fa30 	bl	8002504 <_ZL12MX_I2C1_Initv>
  MX_TIM11_Init();
 80020a4:	f000 fb4e 	bl	8002744 <_ZL13MX_TIM11_Initv>
  MX_TIM4_Init();
 80020a8:	f000 fa94 	bl	80025d4 <_ZL12MX_TIM4_Initv>
  MX_I2C3_Init();
 80020ac:	f000 fa5e 	bl	800256c <_ZL12MX_I2C3_Initv>
  MX_USART2_UART_Init();
 80020b0:	f000 fb70 	bl	8002794 <_ZL19MX_USART2_UART_Initv>
  MX_TIM10_Init();
 80020b4:	f000 fb1e 	bl	80026f4 <_ZL13MX_TIM10_Initv>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim10); // milli timer
 80020b8:	4860      	ldr	r0, [pc, #384]	; (800223c <main+0x760>)
 80020ba:	f018 ff41 	bl	801af40 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 80020be:	4860      	ldr	r0, [pc, #384]	; (8002240 <main+0x764>)
 80020c0:	f018 ff3e 	bl	801af40 <HAL_TIM_Base_Start_IT>

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 80020c4:	485f      	ldr	r0, [pc, #380]	; (8002244 <main+0x768>)
 80020c6:	f018 fee1 	bl	801ae8c <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80020ca:	2100      	movs	r1, #0
 80020cc:	485d      	ldr	r0, [pc, #372]	; (8002244 <main+0x768>)
 80020ce:	f018 fff3 	bl	801b0b8 <HAL_TIM_PWM_Start>

    //UART UI
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 80020d2:	2220      	movs	r2, #32
 80020d4:	495c      	ldr	r1, [pc, #368]	; (8002248 <main+0x76c>)
 80020d6:	485d      	ldr	r0, [pc, #372]	; (800224c <main+0x770>)
 80020d8:	f019 ff85 	bl	801bfe6 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80020dc:	4b5c      	ldr	r3, [pc, #368]	; (8002250 <main+0x774>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6819      	ldr	r1, [r3, #0]
 80020e2:	4b5b      	ldr	r3, [pc, #364]	; (8002250 <main+0x774>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	f021 0308 	bic.w	r3, r1, #8
 80020ea:	6013      	str	r3, [r2, #0]

    ////// ===== Select DataPosition Dataset =================
    switch(NumPosDataSetx){
 80020ec:	4b59      	ldr	r3, [pc, #356]	; (8002254 <main+0x778>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	f200 80bd 	bhi.w	8002272 <main+0x796>
 80020f8:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <main+0x624>)
 80020fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fe:	bf00      	nop
 8002100:	08002115 	.word	0x08002115
 8002104:	08002147 	.word	0x08002147
 8002108:	08002179 	.word	0x08002179
 800210c:	080021ab 	.word	0x080021ab
 8002110:	080021dd 	.word	0x080021dd

    case 1:
    	for(int t = 0;t <= PosBufSize ;t++){
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800211a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800211e:	2b14      	cmp	r3, #20
 8002120:	dc75      	bgt.n	800220e <main+0x732>
		PosDataSet[t] = rawPossw_1[t];
 8002122:	4a4d      	ldr	r2, [pc, #308]	; (8002258 <main+0x77c>)
 8002124:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	6819      	ldr	r1, [r3, #0]
 800212e:	4a4b      	ldr	r2, [pc, #300]	; (800225c <main+0x780>)
 8002130:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 800213a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800213e:	3301      	adds	r3, #1
 8002140:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002144:	e7e9      	b.n	800211a <main+0x63e>
		} break;

    case 2:
    	for(int t = 0;t <= PosBufSize ;t++){
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800214c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002150:	2b14      	cmp	r3, #20
 8002152:	dc5e      	bgt.n	8002212 <main+0x736>
		PosDataSet[t] = rawPossw_2[t];
 8002154:	4a42      	ldr	r2, [pc, #264]	; (8002260 <main+0x784>)
 8002156:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	6819      	ldr	r1, [r3, #0]
 8002160:	4a3e      	ldr	r2, [pc, #248]	; (800225c <main+0x780>)
 8002162:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 800216c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002170:	3301      	adds	r3, #1
 8002172:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002176:	e7e9      	b.n	800214c <main+0x670>
		} break;

    case 3:
    	for(int t = 0;t <= PosBufSize ;t++){
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800217e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002182:	2b14      	cmp	r3, #20
 8002184:	dc47      	bgt.n	8002216 <main+0x73a>
    	PosDataSet[t] = rawPossw_3[t];
 8002186:	4a37      	ldr	r2, [pc, #220]	; (8002264 <main+0x788>)
 8002188:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	6819      	ldr	r1, [r3, #0]
 8002192:	4a32      	ldr	r2, [pc, #200]	; (800225c <main+0x780>)
 8002194:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 800219e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80021a2:	3301      	adds	r3, #1
 80021a4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80021a8:	e7e9      	b.n	800217e <main+0x6a2>
    	} break;

    case 4:
		for(int t = 0;t <= PosBufSize ;t++){
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80021b0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80021b4:	2b14      	cmp	r3, #20
 80021b6:	dc30      	bgt.n	800221a <main+0x73e>
		PosDataSet[t] = rawPossw_4[t];
 80021b8:	4a2b      	ldr	r2, [pc, #172]	; (8002268 <main+0x78c>)
 80021ba:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	6819      	ldr	r1, [r3, #0]
 80021c4:	4a25      	ldr	r2, [pc, #148]	; (800225c <main+0x780>)
 80021c6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	6019      	str	r1, [r3, #0]
		for(int t = 0;t <= PosBufSize ;t++){
 80021d0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80021d4:	3301      	adds	r3, #1
 80021d6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80021da:	e7e9      	b.n	80021b0 <main+0x6d4>
		} break;

    case 5:
    		for(int t = 0;t <= PosBufSize ;t++){
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80021e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80021e6:	2b14      	cmp	r3, #20
 80021e8:	dc42      	bgt.n	8002270 <main+0x794>
    		PosDataSet[t] = rawPossw_5[t];
 80021ea:	4a20      	ldr	r2, [pc, #128]	; (800226c <main+0x790>)
 80021ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	6819      	ldr	r1, [r3, #0]
 80021f6:	4a19      	ldr	r2, [pc, #100]	; (800225c <main+0x780>)
 80021f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	6019      	str	r1, [r3, #0]
    		for(int t = 0;t <= PosBufSize ;t++){
 8002202:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002206:	3301      	adds	r3, #1
 8002208:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800220c:	e7e9      	b.n	80021e2 <main+0x706>
		} break;
 800220e:	bf00      	nop
 8002210:	e02f      	b.n	8002272 <main+0x796>
		} break;
 8002212:	bf00      	nop
 8002214:	e02d      	b.n	8002272 <main+0x796>
    	} break;
 8002216:	bf00      	nop
 8002218:	e02b      	b.n	8002272 <main+0x796>
		} break;
 800221a:	bf00      	nop
 800221c:	e029      	b.n	8002272 <main+0x796>
 800221e:	bf00      	nop
 8002220:	2000069c 	.word	0x2000069c
 8002224:	200006a0 	.word	0x200006a0
 8002228:	20000708 	.word	0x20000708
 800222c:	200006b4 	.word	0x200006b4
 8002230:	3851b717 	.word	0x3851b717
 8002234:	200006c0 	.word	0x200006c0
 8002238:	3c23d70a 	.word	0x3c23d70a
 800223c:	200003b4 	.word	0x200003b4
 8002240:	200003fc 	.word	0x200003fc
 8002244:	2000036c 	.word	0x2000036c
 8002248:	200007a0 	.word	0x200007a0
 800224c:	20000444 	.word	0x20000444
 8002250:	20000488 	.word	0x20000488
 8002254:	20000000 	.word	0x20000000
 8002258:	20000004 	.word	0x20000004
 800225c:	20000568 	.word	0x20000568
 8002260:	20000054 	.word	0x20000054
 8002264:	200000a4 	.word	0x200000a4
 8002268:	200000f4 	.word	0x200000f4
 800226c:	20000144 	.word	0x20000144
    		} break;
 8002270:	bf00      	nop
    }

    PosoffsetMon = 0 + POSOFFSET; // for send to cubeMon
 8002272:	4a5d      	ldr	r2, [pc, #372]	; (80023e8 <main+0x90c>)
 8002274:	f44f 735e 	mov.w	r3, #888	; 0x378
 8002278:	6013      	str	r3, [r2, #0]
    ////============position buffer Set Default===================
    //for(int f = 0; f <= PosBufSize; f++){
    //		positionlog[f] = -1.0;
    //	}
    //MCP23017 setting init
    HAL_Delay(50);
 800227a:	2032      	movs	r0, #50	; 0x32
 800227c:	f014 fbac 	bl	80169d8 <HAL_Delay>
    IOExpenderInit();
 8002280:	f001 ff56 	bl	8004130 <_Z14IOExpenderInitv>
	      ///// IT test
	 //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	  	  ///// GrandState ///////////////////

	  	  if(micros() - TimeStampGrand >= 1000){
 8002284:	f002 f8c2 	bl	800440c <_Z6microsv>
 8002288:	4b58      	ldr	r3, [pc, #352]	; (80023ec <main+0x910>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2200      	movs	r2, #0
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002290:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002294:	ebb0 0803 	subs.w	r8, r0, r3
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	eb61 0903 	sbc.w	r9, r1, r3
 800229e:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 80022a2:	f179 0300 	sbcs.w	r3, r9, #0
 80022a6:	bf2c      	ite	cs
 80022a8:	2301      	movcs	r3, #1
 80022aa:	2300      	movcc	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d007      	beq.n	80022c2 <main+0x7e6>
	  		TimeStampGrand = micros();
 80022b2:	f002 f8ab 	bl	800440c <_Z6microsv>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <main+0x910>)
 80022bc:	601a      	str	r2, [r3, #0]
	  		GrandStatumix();
 80022be:	f000 fbab 	bl	8002a18 <_Z13GrandStatumixv>
	  		//CurrentEn = BinPosXI * 0.006136;
	  	  }

	  	  // Encoder I2CRead

	  	  if (micros()-timeStampSR >= 10000)      // don't use 1
 80022c2:	f002 f8a3 	bl	800440c <_Z6microsv>
 80022c6:	4b4a      	ldr	r3, [pc, #296]	; (80023f0 <main+0x914>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2200      	movs	r2, #0
 80022cc:	623b      	str	r3, [r7, #32]
 80022ce:	627a      	str	r2, [r7, #36]	; 0x24
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	1ac3      	subs	r3, r0, r3
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	eb61 0303 	sbc.w	r3, r1, r3
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	f242 7310 	movw	r3, #10000	; 0x2710
 80022e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022e6:	4602      	mov	r2, r0
 80022e8:	429a      	cmp	r2, r3
 80022ea:	460b      	mov	r3, r1
 80022ec:	f173 0300 	sbcs.w	r3, r3, #0
 80022f0:	bf2c      	ite	cs
 80022f2:	2301      	movcs	r3, #1
 80022f4:	2300      	movcc	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <main+0x832>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 80022fc:	f002 f886 	bl	800440c <_Z6microsv>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4b3a      	ldr	r3, [pc, #232]	; (80023f0 <main+0x914>)
 8002306:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 8002308:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <main+0x918>)
 800230a:	2301      	movs	r3, #1
 800230c:	7013      	strb	r3, [r2, #0]
	  	          }
	  	  AbsEncI2CReadx(RawEnBitAB);
 800230e:	483a      	ldr	r0, [pc, #232]	; (80023f8 <main+0x91c>)
 8002310:	f001 ff24 	bl	800415c <_Z14AbsEncI2CReadxPh>
	  	  //Unwrapping();
	  	  //Kalmanfilter();

	  	  ///////////////////// 2KHz change PWM PB6////////////////////

	  	  if(micros() - timestampPWM >= 500){
 8002314:	f002 f87a 	bl	800440c <_Z6microsv>
 8002318:	4b38      	ldr	r3, [pc, #224]	; (80023fc <main+0x920>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2200      	movs	r2, #0
 800231e:	61bb      	str	r3, [r7, #24]
 8002320:	61fa      	str	r2, [r7, #28]
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	ebb0 0a03 	subs.w	sl, r0, r3
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	eb61 0b03 	sbc.w	fp, r1, r3
 800232e:	f5ba 7ffa 	cmp.w	sl, #500	; 0x1f4
 8002332:	f17b 0300 	sbcs.w	r3, fp, #0
 8002336:	bf2c      	ite	cs
 8002338:	2301      	movcs	r3, #1
 800233a:	2300      	movcc	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d01a      	beq.n	8002378 <main+0x89c>
	  		  	  timestampPWM = micros(); // stamp
 8002342:	f002 f863 	bl	800440c <_Z6microsv>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <main+0x920>)
 800234c:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut); // dutycycle
 800234e:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <main+0x924>)
 8002350:	8819      	ldrh	r1, [r3, #0]
 8002352:	4b2c      	ldr	r3, [pc, #176]	; (8002404 <main+0x928>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	460b      	mov	r3, r1
 8002358:	6353      	str	r3, [r2, #52]	; 0x34
	  	  		  //__HAL_TIM_SET_PRESCALER(&htim4, pscalr); // Set freq of pwm
	  	  		  //ADC_Target = ADCFeedx[1].datt;

	  	  		///// Mot Driver ///// 0 => CCW /// 1 => CW
	  	  		if (mot_dirctn == 0){
 800235a:	4b2b      	ldr	r3, [pc, #172]	; (8002408 <main+0x92c>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <main+0x892>
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 8002362:	2201      	movs	r2, #1
 8002364:	2104      	movs	r1, #4
 8002366:	4829      	ldr	r0, [pc, #164]	; (800240c <main+0x930>)
 8002368:	f015 fa18 	bl	801779c <HAL_GPIO_WritePin>
 800236c:	e004      	b.n	8002378 <main+0x89c>
	  	  		}else{
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	2104      	movs	r1, #4
 8002372:	4826      	ldr	r0, [pc, #152]	; (800240c <main+0x930>)
 8002374:	f015 fa12 	bl	801779c <HAL_GPIO_WritePin>
				controlloop();
			 }
	  	    */

	  	 //////////// End Effector /////////////////////
	  	 Efft_activate(); // Activate by flag_efftActi = 1;
 8002378:	f001 ff44 	bl	8004204 <_Z13Efft_activatev>
	  	 Efft_read(&efft_status);
 800237c:	4824      	ldr	r0, [pc, #144]	; (8002410 <main+0x934>)
 800237e:	f001 ff99 	bl	80042b4 <_Z9Efft_readPh>
	  	 //// trig_efftRead up for 10 times afrer shoot / trig at shoot state

	  	 if(trig_efftRead != 0 && millis() - timestamp_efft >= 500){
 8002382:	4b24      	ldr	r3, [pc, #144]	; (8002414 <main+0x938>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d014      	beq.n	80023b4 <main+0x8d8>
 800238a:	f002 f859 	bl	8004440 <_Z6millisv>
 800238e:	4603      	mov	r3, r0
 8002390:	2200      	movs	r2, #0
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	617a      	str	r2, [r7, #20]
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <main+0x93c>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	6939      	ldr	r1, [r7, #16]
 800239e:	1a8c      	subs	r4, r1, r2
 80023a0:	6979      	ldr	r1, [r7, #20]
 80023a2:	eb61 0503 	sbc.w	r5, r1, r3
 80023a6:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 80023aa:	f175 0300 	sbcs.w	r3, r5, #0
 80023ae:	d301      	bcc.n	80023b4 <main+0x8d8>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <main+0x8da>
 80023b4:	2300      	movs	r3, #0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f43f af64 	beq.w	8002284 <main+0x7a8>
	  		 timestamp_efft = millis();
 80023bc:	f002 f840 	bl	8004440 <_Z6millisv>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2200      	movs	r2, #0
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <main+0x93c>)
 80023ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80023ce:	e9c3 1200 	strd	r1, r2, [r3]
	  		 flag_efftRead = 1;
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <main+0x940>)
 80023d4:	2301      	movs	r3, #1
 80023d6:	7013      	strb	r3, [r2, #0]
	  		 trig_efftRead++;
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <main+0x938>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	3301      	adds	r3, #1
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	4a0c      	ldr	r2, [pc, #48]	; (8002414 <main+0x938>)
 80023e2:	7013      	strb	r3, [r2, #0]
	  	  if(micros() - TimeStampGrand >= 1000){
 80023e4:	e74e      	b.n	8002284 <main+0x7a8>
 80023e6:	bf00      	nop
 80023e8:	20000548 	.word	0x20000548
 80023ec:	20000550 	.word	0x20000550
 80023f0:	200005b8 	.word	0x200005b8
 80023f4:	200005c2 	.word	0x200005c2
 80023f8:	200005bc 	.word	0x200005bc
 80023fc:	200005c8 	.word	0x200005c8
 8002400:	200005c4 	.word	0x200005c4
 8002404:	2000036c 	.word	0x2000036c
 8002408:	200005cc 	.word	0x200005cc
 800240c:	40020400 	.word	0x40020400
 8002410:	2000078a 	.word	0x2000078a
 8002414:	2000078d 	.word	0x2000078d
 8002418:	20000790 	.word	0x20000790
 800241c:	2000078c 	.word	0x2000078c

08002420 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b094      	sub	sp, #80	; 0x50
 8002424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002426:	f107 0320 	add.w	r3, r7, #32
 800242a:	2230      	movs	r2, #48	; 0x30
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f01b ff18 	bl	801e264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	4b2c      	ldr	r3, [pc, #176]	; (80024fc <_Z18SystemClock_Configv+0xdc>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	4a2b      	ldr	r2, [pc, #172]	; (80024fc <_Z18SystemClock_Configv+0xdc>)
 800244e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002452:	6413      	str	r3, [r2, #64]	; 0x40
 8002454:	4b29      	ldr	r3, [pc, #164]	; (80024fc <_Z18SystemClock_Configv+0xdc>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002460:	2300      	movs	r3, #0
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	4b26      	ldr	r3, [pc, #152]	; (8002500 <_Z18SystemClock_Configv+0xe0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a25      	ldr	r2, [pc, #148]	; (8002500 <_Z18SystemClock_Configv+0xe0>)
 800246a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	4b23      	ldr	r3, [pc, #140]	; (8002500 <_Z18SystemClock_Configv+0xe0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800247c:	2302      	movs	r3, #2
 800247e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002480:	2301      	movs	r3, #1
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002484:	2310      	movs	r3, #16
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002488:	2302      	movs	r3, #2
 800248a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800248c:	2300      	movs	r3, #0
 800248e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002490:	2308      	movs	r3, #8
 8002492:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002494:	2364      	movs	r3, #100	; 0x64
 8002496:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002498:	2302      	movs	r3, #2
 800249a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800249c:	2304      	movs	r3, #4
 800249e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024a0:	f107 0320 	add.w	r3, r7, #32
 80024a4:	4618      	mov	r0, r3
 80024a6:	f018 f809 	bl	801a4bc <HAL_RCC_OscConfig>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80024ba:	f001 fff7 	bl	80044ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024be:	230f      	movs	r3, #15
 80024c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024c2:	2302      	movs	r3, #2
 80024c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80024d4:	f107 030c 	add.w	r3, r7, #12
 80024d8:	2103      	movs	r1, #3
 80024da:	4618      	mov	r0, r3
 80024dc:	f018 fa66 	bl	801a9ac <HAL_RCC_ClockConfig>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	bf14      	ite	ne
 80024e6:	2301      	movne	r3, #1
 80024e8:	2300      	moveq	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80024f0:	f001 ffdc 	bl	80044ac <Error_Handler>
  }
}
 80024f4:	bf00      	nop
 80024f6:	3750      	adds	r7, #80	; 0x50
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40023800 	.word	0x40023800
 8002500:	40007000 	.word	0x40007000

08002504 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <_ZL12MX_I2C1_Initv+0x5c>)
 800250a:	4a16      	ldr	r2, [pc, #88]	; (8002564 <_ZL12MX_I2C1_Initv+0x60>)
 800250c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800250e:	4b14      	ldr	r3, [pc, #80]	; (8002560 <_ZL12MX_I2C1_Initv+0x5c>)
 8002510:	4a15      	ldr	r2, [pc, #84]	; (8002568 <_ZL12MX_I2C1_Initv+0x64>)
 8002512:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <_ZL12MX_I2C1_Initv+0x5c>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <_ZL12MX_I2C1_Initv+0x5c>)
 800251c:	2200      	movs	r2, #0
 800251e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <_ZL12MX_I2C1_Initv+0x5c>)
 8002522:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002526:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <_ZL12MX_I2C1_Initv+0x5c>)
 800252a:	2200      	movs	r2, #0
 800252c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <_ZL12MX_I2C1_Initv+0x5c>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <_ZL12MX_I2C1_Initv+0x5c>)
 8002536:	2200      	movs	r2, #0
 8002538:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <_ZL12MX_I2C1_Initv+0x5c>)
 800253c:	2200      	movs	r2, #0
 800253e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002540:	4807      	ldr	r0, [pc, #28]	; (8002560 <_ZL12MX_I2C1_Initv+0x5c>)
 8002542:	f015 f95d 	bl	8017800 <HAL_I2C_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002556:	f001 ffa9 	bl	80044ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200002c4 	.word	0x200002c4
 8002564:	40005400 	.word	0x40005400
 8002568:	00061a80 	.word	0x00061a80

0800256c <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002570:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <_ZL12MX_I2C3_Initv+0x5c>)
 8002572:	4a16      	ldr	r2, [pc, #88]	; (80025cc <_ZL12MX_I2C3_Initv+0x60>)
 8002574:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <_ZL12MX_I2C3_Initv+0x5c>)
 8002578:	4a15      	ldr	r2, [pc, #84]	; (80025d0 <_ZL12MX_I2C3_Initv+0x64>)
 800257a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <_ZL12MX_I2C3_Initv+0x5c>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <_ZL12MX_I2C3_Initv+0x5c>)
 8002584:	2200      	movs	r2, #0
 8002586:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <_ZL12MX_I2C3_Initv+0x5c>)
 800258a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800258e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <_ZL12MX_I2C3_Initv+0x5c>)
 8002592:	2200      	movs	r2, #0
 8002594:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002596:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <_ZL12MX_I2C3_Initv+0x5c>)
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800259c:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <_ZL12MX_I2C3_Initv+0x5c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <_ZL12MX_I2C3_Initv+0x5c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80025a8:	4807      	ldr	r0, [pc, #28]	; (80025c8 <_ZL12MX_I2C3_Initv+0x5c>)
 80025aa:	f015 f929 	bl	8017800 <HAL_I2C_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf14      	ite	ne
 80025b4:	2301      	movne	r3, #1
 80025b6:	2300      	moveq	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 80025be:	f001 ff75 	bl	80044ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000318 	.word	0x20000318
 80025cc:	40005c00 	.word	0x40005c00
 80025d0:	00061a80 	.word	0x00061a80

080025d4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08e      	sub	sp, #56	; 0x38
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e8:	f107 0320 	add.w	r3, r7, #32
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
 8002600:	615a      	str	r2, [r3, #20]
 8002602:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002604:	4b39      	ldr	r3, [pc, #228]	; (80026ec <_ZL12MX_TIM4_Initv+0x118>)
 8002606:	4a3a      	ldr	r2, [pc, #232]	; (80026f0 <_ZL12MX_TIM4_Initv+0x11c>)
 8002608:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800260a:	4b38      	ldr	r3, [pc, #224]	; (80026ec <_ZL12MX_TIM4_Initv+0x118>)
 800260c:	2200      	movs	r2, #0
 800260e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002610:	4b36      	ldr	r3, [pc, #216]	; (80026ec <_ZL12MX_TIM4_Initv+0x118>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002616:	4b35      	ldr	r3, [pc, #212]	; (80026ec <_ZL12MX_TIM4_Initv+0x118>)
 8002618:	f242 720f 	movw	r2, #9999	; 0x270f
 800261c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261e:	4b33      	ldr	r3, [pc, #204]	; (80026ec <_ZL12MX_TIM4_Initv+0x118>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002624:	4b31      	ldr	r3, [pc, #196]	; (80026ec <_ZL12MX_TIM4_Initv+0x118>)
 8002626:	2200      	movs	r2, #0
 8002628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800262a:	4830      	ldr	r0, [pc, #192]	; (80026ec <_ZL12MX_TIM4_Initv+0x118>)
 800262c:	f018 fbde 	bl	801adec <HAL_TIM_Base_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	bf14      	ite	ne
 8002636:	2301      	movne	r3, #1
 8002638:	2300      	moveq	r3, #0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 8002640:	f001 ff34 	bl	80044ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002648:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800264a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800264e:	4619      	mov	r1, r3
 8002650:	4826      	ldr	r0, [pc, #152]	; (80026ec <_ZL12MX_TIM4_Initv+0x118>)
 8002652:	f018 ffab 	bl	801b5ac <HAL_TIM_ConfigClockSource>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf14      	ite	ne
 800265c:	2301      	movne	r3, #1
 800265e:	2300      	moveq	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 8002666:	f001 ff21 	bl	80044ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800266a:	4820      	ldr	r0, [pc, #128]	; (80026ec <_ZL12MX_TIM4_Initv+0x118>)
 800266c:	f018 fcca 	bl	801b004 <HAL_TIM_PWM_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	bf14      	ite	ne
 8002676:	2301      	movne	r3, #1
 8002678:	2300      	moveq	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 8002680:	f001 ff14 	bl	80044ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002684:	2300      	movs	r3, #0
 8002686:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800268c:	f107 0320 	add.w	r3, r7, #32
 8002690:	4619      	mov	r1, r3
 8002692:	4816      	ldr	r0, [pc, #88]	; (80026ec <_ZL12MX_TIM4_Initv+0x118>)
 8002694:	f019 fb46 	bl	801bd24 <HAL_TIMEx_MasterConfigSynchronization>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	bf14      	ite	ne
 800269e:	2301      	movne	r3, #1
 80026a0:	2300      	moveq	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 80026a8:	f001 ff00 	bl	80044ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ac:	2360      	movs	r3, #96	; 0x60
 80026ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	2200      	movs	r2, #0
 80026c0:	4619      	mov	r1, r3
 80026c2:	480a      	ldr	r0, [pc, #40]	; (80026ec <_ZL12MX_TIM4_Initv+0x118>)
 80026c4:	f018 feb0 	bl	801b428 <HAL_TIM_PWM_ConfigChannel>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	bf14      	ite	ne
 80026ce:	2301      	movne	r3, #1
 80026d0:	2300      	moveq	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <_ZL12MX_TIM4_Initv+0x108>
  {
    Error_Handler();
 80026d8:	f001 fee8 	bl	80044ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80026dc:	4803      	ldr	r0, [pc, #12]	; (80026ec <_ZL12MX_TIM4_Initv+0x118>)
 80026de:	f013 fe7d 	bl	80163dc <HAL_TIM_MspPostInit>

}
 80026e2:	bf00      	nop
 80026e4:	3738      	adds	r7, #56	; 0x38
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000036c 	.word	0x2000036c
 80026f0:	40000800 	.word	0x40000800

080026f4 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80026f8:	4b10      	ldr	r3, [pc, #64]	; (800273c <_ZL13MX_TIM10_Initv+0x48>)
 80026fa:	4a11      	ldr	r2, [pc, #68]	; (8002740 <_ZL13MX_TIM10_Initv+0x4c>)
 80026fc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 80026fe:	4b0f      	ldr	r3, [pc, #60]	; (800273c <_ZL13MX_TIM10_Initv+0x48>)
 8002700:	2263      	movs	r2, #99	; 0x63
 8002702:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002704:	4b0d      	ldr	r3, [pc, #52]	; (800273c <_ZL13MX_TIM10_Initv+0x48>)
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <_ZL13MX_TIM10_Initv+0x48>)
 800270c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002710:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <_ZL13MX_TIM10_Initv+0x48>)
 8002714:	2200      	movs	r2, #0
 8002716:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <_ZL13MX_TIM10_Initv+0x48>)
 800271a:	2200      	movs	r2, #0
 800271c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800271e:	4807      	ldr	r0, [pc, #28]	; (800273c <_ZL13MX_TIM10_Initv+0x48>)
 8002720:	f018 fb64 	bl	801adec <HAL_TIM_Base_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	bf14      	ite	ne
 800272a:	2301      	movne	r3, #1
 800272c:	2300      	moveq	r3, #0
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <_ZL13MX_TIM10_Initv+0x44>
  {
    Error_Handler();
 8002734:	f001 feba 	bl	80044ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}
 800273c:	200003b4 	.word	0x200003b4
 8002740:	40014400 	.word	0x40014400

08002744 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002748:	4b10      	ldr	r3, [pc, #64]	; (800278c <_ZL13MX_TIM11_Initv+0x48>)
 800274a:	4a11      	ldr	r2, [pc, #68]	; (8002790 <_ZL13MX_TIM11_Initv+0x4c>)
 800274c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800274e:	4b0f      	ldr	r3, [pc, #60]	; (800278c <_ZL13MX_TIM11_Initv+0x48>)
 8002750:	2263      	movs	r2, #99	; 0x63
 8002752:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <_ZL13MX_TIM11_Initv+0x48>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <_ZL13MX_TIM11_Initv+0x48>)
 800275c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002760:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <_ZL13MX_TIM11_Initv+0x48>)
 8002764:	2200      	movs	r2, #0
 8002766:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <_ZL13MX_TIM11_Initv+0x48>)
 800276a:	2200      	movs	r2, #0
 800276c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800276e:	4807      	ldr	r0, [pc, #28]	; (800278c <_ZL13MX_TIM11_Initv+0x48>)
 8002770:	f018 fb3c 	bl	801adec <HAL_TIM_Base_Init>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	bf14      	ite	ne
 800277a:	2301      	movne	r3, #1
 800277c:	2300      	moveq	r3, #0
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8002784:	f001 fe92 	bl	80044ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	200003fc 	.word	0x200003fc
 8002790:	40014800 	.word	0x40014800

08002794 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <_ZL19MX_USART2_UART_Initv+0x58>)
 800279a:	4a15      	ldr	r2, [pc, #84]	; (80027f0 <_ZL19MX_USART2_UART_Initv+0x5c>)
 800279c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <_ZL19MX_USART2_UART_Initv+0x58>)
 80027a0:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80027a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <_ZL19MX_USART2_UART_Initv+0x58>)
 80027a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027ac:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <_ZL19MX_USART2_UART_Initv+0x58>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80027b4:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <_ZL19MX_USART2_UART_Initv+0x58>)
 80027b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <_ZL19MX_USART2_UART_Initv+0x58>)
 80027be:	220c      	movs	r2, #12
 80027c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <_ZL19MX_USART2_UART_Initv+0x58>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <_ZL19MX_USART2_UART_Initv+0x58>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027ce:	4807      	ldr	r0, [pc, #28]	; (80027ec <_ZL19MX_USART2_UART_Initv+0x58>)
 80027d0:	f019 fb2a 	bl	801be28 <HAL_UART_Init>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bf14      	ite	ne
 80027da:	2301      	movne	r3, #1
 80027dc:	2300      	moveq	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <_ZL19MX_USART2_UART_Initv+0x54>
  {
    Error_Handler();
 80027e4:	f001 fe62 	bl	80044ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000444 	.word	0x20000444
 80027f0:	40004400 	.word	0x40004400

080027f4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <_ZL11MX_DMA_Initv+0x4c>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a0f      	ldr	r2, [pc, #60]	; (8002840 <_ZL11MX_DMA_Initv+0x4c>)
 8002804:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <_ZL11MX_DMA_Initv+0x4c>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2100      	movs	r1, #0
 800281a:	2011      	movs	r0, #17
 800281c:	f014 f9db 	bl	8016bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002820:	2011      	movs	r0, #17
 8002822:	f014 f9f4 	bl	8016c0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002826:	2200      	movs	r2, #0
 8002828:	2100      	movs	r1, #0
 800282a:	202f      	movs	r0, #47	; 0x2f
 800282c:	f014 f9d3 	bl	8016bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002830:	202f      	movs	r0, #47	; 0x2f
 8002832:	f014 f9ec 	bl	8016c0e <HAL_NVIC_EnableIRQ>

}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800

08002844 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	; 0x28
 8002848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	60da      	str	r2, [r3, #12]
 8002858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	4b69      	ldr	r3, [pc, #420]	; (8002a04 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	4a68      	ldr	r2, [pc, #416]	; (8002a04 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002864:	f043 0304 	orr.w	r3, r3, #4
 8002868:	6313      	str	r3, [r2, #48]	; 0x30
 800286a:	4b66      	ldr	r3, [pc, #408]	; (8002a04 <_ZL12MX_GPIO_Initv+0x1c0>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b62      	ldr	r3, [pc, #392]	; (8002a04 <_ZL12MX_GPIO_Initv+0x1c0>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a61      	ldr	r2, [pc, #388]	; (8002a04 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b5f      	ldr	r3, [pc, #380]	; (8002a04 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	4b5b      	ldr	r3, [pc, #364]	; (8002a04 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a5a      	ldr	r2, [pc, #360]	; (8002a04 <_ZL12MX_GPIO_Initv+0x1c0>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b58      	ldr	r3, [pc, #352]	; (8002a04 <_ZL12MX_GPIO_Initv+0x1c0>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	4b54      	ldr	r3, [pc, #336]	; (8002a04 <_ZL12MX_GPIO_Initv+0x1c0>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a53      	ldr	r2, [pc, #332]	; (8002a04 <_ZL12MX_GPIO_Initv+0x1c0>)
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b51      	ldr	r3, [pc, #324]	; (8002a04 <_ZL12MX_GPIO_Initv+0x1c0>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	607b      	str	r3, [r7, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	4b4d      	ldr	r3, [pc, #308]	; (8002a04 <_ZL12MX_GPIO_Initv+0x1c0>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a4c      	ldr	r2, [pc, #304]	; (8002a04 <_ZL12MX_GPIO_Initv+0x1c0>)
 80028d4:	f043 0308 	orr.w	r3, r3, #8
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b4a      	ldr	r3, [pc, #296]	; (8002a04 <_ZL12MX_GPIO_Initv+0x1c0>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2120      	movs	r1, #32
 80028ea:	4847      	ldr	r0, [pc, #284]	; (8002a08 <_ZL12MX_GPIO_Initv+0x1c4>)
 80028ec:	f014 ff56 	bl	801779c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 80028f0:	2200      	movs	r2, #0
 80028f2:	f24e 0104 	movw	r1, #57348	; 0xe004
 80028f6:	4845      	ldr	r0, [pc, #276]	; (8002a0c <_ZL12MX_GPIO_Initv+0x1c8>)
 80028f8:	f014 ff50 	bl	801779c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin EXTI11_EMER_Pin */
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_EMER_Pin;
 80028fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002902:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	4619      	mov	r1, r3
 8002912:	483f      	ldr	r0, [pc, #252]	; (8002a10 <_ZL12MX_GPIO_Initv+0x1cc>)
 8002914:	f014 fda6 	bl	8017464 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM2_CH1_VINCp_Pin */
  GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 8002918:	2301      	movs	r3, #1
 800291a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002928:	2301      	movs	r3, #1
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	4619      	mov	r1, r3
 8002932:	4835      	ldr	r0, [pc, #212]	; (8002a08 <_ZL12MX_GPIO_Initv+0x1c4>)
 8002934:	f014 fd96 	bl	8017464 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002938:	2320      	movs	r3, #32
 800293a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293c:	2301      	movs	r3, #1
 800293e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	4619      	mov	r1, r3
 800294e:	482e      	ldr	r0, [pc, #184]	; (8002a08 <_ZL12MX_GPIO_Initv+0x1c4>)
 8002950:	f014 fd88 	bl	8017464 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 8002954:	2302      	movs	r3, #2
 8002956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002958:	2300      	movs	r3, #0
 800295a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	4619      	mov	r1, r3
 8002966:	4829      	ldr	r0, [pc, #164]	; (8002a0c <_ZL12MX_GPIO_Initv+0x1c8>)
 8002968:	f014 fd7c 	bl	8017464 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin PLamp_Green_Pin PLamp_Blue_Pin PLamp_Yellow_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 800296c:	f24e 0304 	movw	r3, #57348	; 0xe004
 8002970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002972:	2301      	movs	r3, #1
 8002974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297a:	2300      	movs	r3, #0
 800297c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297e:	f107 0314 	add.w	r3, r7, #20
 8002982:	4619      	mov	r1, r3
 8002984:	4821      	ldr	r0, [pc, #132]	; (8002a0c <_ZL12MX_GPIO_Initv+0x1c8>)
 8002986:	f014 fd6d 	bl	8017464 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Stop_Pin */
  GPIO_InitStruct.Pin = EXTI10_Stop_Pin;
 800298a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800298e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002990:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Stop_GPIO_Port, &GPIO_InitStruct);
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4619      	mov	r1, r3
 80029a0:	481b      	ldr	r0, [pc, #108]	; (8002a10 <_ZL12MX_GPIO_Initv+0x1cc>)
 80029a2:	f014 fd5f 	bl	8017464 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Sense_Pin */
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 80029a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	4619      	mov	r1, r3
 80029ba:	4815      	ldr	r0, [pc, #84]	; (8002a10 <_ZL12MX_GPIO_Initv+0x1cc>)
 80029bc:	f014 fd52 	bl	8017464 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI2_SetZero_Pin */
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 80029c0:	2304      	movs	r3, #4
 80029c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80029c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	4619      	mov	r1, r3
 80029d4:	480f      	ldr	r0, [pc, #60]	; (8002a14 <_ZL12MX_GPIO_Initv+0x1d0>)
 80029d6:	f014 fd45 	bl	8017464 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	2008      	movs	r0, #8
 80029e0:	f014 f8f9 	bl	8016bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80029e4:	2008      	movs	r0, #8
 80029e6:	f014 f912 	bl	8016c0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	2028      	movs	r0, #40	; 0x28
 80029f0:	f014 f8f1 	bl	8016bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029f4:	2028      	movs	r0, #40	; 0x28
 80029f6:	f014 f90a 	bl	8016c0e <HAL_NVIC_EnableIRQ>

}
 80029fa:	bf00      	nop
 80029fc:	3728      	adds	r7, #40	; 0x28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40020000 	.word	0x40020000
 8002a0c:	40020400 	.word	0x40020400
 8002a10:	40020800 	.word	0x40020800
 8002a14:	40020c00 	.word	0x40020c00

08002a18 <_Z13GrandStatumixv>:

/* USER CODE BEGIN 4 */
////////// [Grand State] //////////////////////// [Grand State] ////////////////////////
//======== [Grand State] ======================== [Grand State] ========================

void GrandStatumix(){
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
	if (grandState != Ready){
 8002a1c:	4ba0      	ldr	r3, [pc, #640]	; (8002ca0 <_Z13GrandStatumixv+0x288>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <_Z13GrandStatumixv+0x18>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 8002a24:	2200      	movs	r2, #0
 8002a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a2a:	489e      	ldr	r0, [pc, #632]	; (8002ca4 <_Z13GrandStatumixv+0x28c>)
 8002a2c:	f014 feb6 	bl	801779c <HAL_GPIO_WritePin>
	}
	if (grandState != work || grandState != SetZeroBf || grandState != SetZeroGr){
 8002a30:	4b9b      	ldr	r3, [pc, #620]	; (8002ca0 <_Z13GrandStatumixv+0x288>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d107      	bne.n	8002a48 <_Z13GrandStatumixv+0x30>
 8002a38:	4b99      	ldr	r3, [pc, #612]	; (8002ca0 <_Z13GrandStatumixv+0x288>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b06      	cmp	r3, #6
 8002a3e:	d103      	bne.n	8002a48 <_Z13GrandStatumixv+0x30>
 8002a40:	4b97      	ldr	r3, [pc, #604]	; (8002ca0 <_Z13GrandStatumixv+0x288>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b05      	cmp	r3, #5
 8002a46:	d005      	beq.n	8002a54 <_Z13GrandStatumixv+0x3c>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a4e:	4895      	ldr	r0, [pc, #596]	; (8002ca4 <_Z13GrandStatumixv+0x28c>)
 8002a50:	f014 fea4 	bl	801779c <HAL_GPIO_WritePin>
		}
	if (grandState != stop || grandState != stopnd){
 8002a54:	4b92      	ldr	r3, [pc, #584]	; (8002ca0 <_Z13GrandStatumixv+0x288>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d103      	bne.n	8002a64 <_Z13GrandStatumixv+0x4c>
 8002a5c:	4b90      	ldr	r3, [pc, #576]	; (8002ca0 <_Z13GrandStatumixv+0x288>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d005      	beq.n	8002a70 <_Z13GrandStatumixv+0x58>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8002a64:	2200      	movs	r2, #0
 8002a66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a6a:	488e      	ldr	r0, [pc, #568]	; (8002ca4 <_Z13GrandStatumixv+0x28c>)
 8002a6c:	f014 fe96 	bl	801779c <HAL_GPIO_WritePin>
			}

	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 8002a70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a74:	488c      	ldr	r0, [pc, #560]	; (8002ca8 <_Z13GrandStatumixv+0x290>)
 8002a76:	f014 fe79 	bl	801776c <HAL_GPIO_ReadPin>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b8b      	ldr	r3, [pc, #556]	; (8002cac <_Z13GrandStatumixv+0x294>)
 8002a80:	701a      	strb	r2, [r3, #0]
	pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 8002a82:	2102      	movs	r1, #2
 8002a84:	4887      	ldr	r0, [pc, #540]	; (8002ca4 <_Z13GrandStatumixv+0x28c>)
 8002a86:	f014 fe71 	bl	801776c <HAL_GPIO_ReadPin>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b88      	ldr	r3, [pc, #544]	; (8002cb0 <_Z13GrandStatumixv+0x298>)
 8002a90:	701a      	strb	r2, [r3, #0]

	switch(grandState){
 8002a92:	4b83      	ldr	r3, [pc, #524]	; (8002ca0 <_Z13GrandStatumixv+0x288>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	2b05      	cmp	r3, #5
 8002a9a:	d80f      	bhi.n	8002abc <_Z13GrandStatumixv+0xa4>
 8002a9c:	a201      	add	r2, pc, #4	; (adr r2, 8002aa4 <_Z13GrandStatumixv+0x8c>)
 8002a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa2:	bf00      	nop
 8002aa4:	08002af1 	.word	0x08002af1
 8002aa8:	08002d5d 	.word	0x08002d5d
 8002aac:	08002df3 	.word	0x08002df3
 8002ab0:	08002dad 	.word	0x08002dad
 8002ab4:	08002ccd 	.word	0x08002ccd
 8002ab8:	08002b37 	.word	0x08002b37
	default:
	case Ready:
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 8002abc:	2201      	movs	r2, #1
 8002abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ac2:	4878      	ldr	r0, [pc, #480]	; (8002ca4 <_Z13GrandStatumixv+0x28c>)
 8002ac4:	f014 fe6a 	bl	801779c <HAL_GPIO_WritePin>
		//PWMOut = 1200;
		Unwrapping();
 8002ac8:	f000 fe7a 	bl	80037c0 <_Z10Unwrappingv>
		Kalmanfilter();
 8002acc:	f000 ff30 	bl	8003930 <_Z12Kalmanfilterv>
		//diffvelo();

		if (pwr_sense == 1){grandState = emer;}
 8002ad0:	4b77      	ldr	r3, [pc, #476]	; (8002cb0 <_Z13GrandStatumixv+0x298>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d102      	bne.n	8002ade <_Z13GrandStatumixv+0xc6>
 8002ad8:	4b71      	ldr	r3, [pc, #452]	; (8002ca0 <_Z13GrandStatumixv+0x288>)
 8002ada:	2203      	movs	r2, #3
 8002adc:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){grandState = stop;}
 8002ade:	4b73      	ldr	r3, [pc, #460]	; (8002cac <_Z13GrandStatumixv+0x294>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f040 8194 	bne.w	8002e10 <_Z13GrandStatumixv+0x3f8>
 8002ae8:	4b6d      	ldr	r3, [pc, #436]	; (8002ca0 <_Z13GrandStatumixv+0x288>)
 8002aea:	2202      	movs	r2, #2
 8002aec:	701a      	strb	r2, [r3, #0]
		/// [From UART] run when get {HOME} , {RUN}
		//if (bluecounter != 0){grandState = work;} // can go work from ready only
	break;
 8002aee:	e18f      	b.n	8002e10 <_Z13GrandStatumixv+0x3f8>

	case work:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002af0:	2201      	movs	r2, #1
 8002af2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002af6:	486b      	ldr	r0, [pc, #428]	; (8002ca4 <_Z13GrandStatumixv+0x28c>)
 8002af8:	f014 fe50 	bl	801779c <HAL_GPIO_WritePin>
		LaserTrajex_workflow();
 8002afc:	f000 f9b4 	bl	8002e68 <_Z20LaserTrajex_workflowv>

		if (pwr_sense == 1){
 8002b00:	4b6b      	ldr	r3, [pc, #428]	; (8002cb0 <_Z13GrandStatumixv+0x298>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d106      	bne.n	8002b16 <_Z13GrandStatumixv+0xfe>
			grandState = emer;
 8002b08:	4b65      	ldr	r3, [pc, #404]	; (8002ca0 <_Z13GrandStatumixv+0x288>)
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 8002b0e:	4b69      	ldr	r3, [pc, #420]	; (8002cb4 <_Z13GrandStatumixv+0x29c>)
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
		}
		if (stop_sense == 0){
 8002b16:	4b65      	ldr	r3, [pc, #404]	; (8002cac <_Z13GrandStatumixv+0x294>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f040 817a 	bne.w	8002e14 <_Z13GrandStatumixv+0x3fc>
			PWMOut = 0;
 8002b20:	4b65      	ldr	r3, [pc, #404]	; (8002cb8 <_Z13GrandStatumixv+0x2a0>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	801a      	strh	r2, [r3, #0]
			grandState = stopnd;
 8002b26:	4b5e      	ldr	r3, [pc, #376]	; (8002ca0 <_Z13GrandStatumixv+0x288>)
 8002b28:	2204      	movs	r2, #4
 8002b2a:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 8002b2c:	4b61      	ldr	r3, [pc, #388]	; (8002cb4 <_Z13GrandStatumixv+0x29c>)
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
		}
	break;
 8002b34:	e16e      	b.n	8002e14 <_Z13GrandStatumixv+0x3fc>

	case SetZeroBf:
		static uint8_t counter_Z = 0;
		//// Cat cat set zero
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002b36:	2201      	movs	r2, #1
 8002b38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b3c:	4859      	ldr	r0, [pc, #356]	; (8002ca4 <_Z13GrandStatumixv+0x28c>)
 8002b3e:	f014 fe2d 	bl	801779c <HAL_GPIO_WritePin>

		//PWMOut = 2500;
		//mot_dirctn = 0;
		Unwrapping();
 8002b42:	f000 fe3d 	bl	80037c0 <_Z10Unwrappingv>
		Kalmanfilter();
 8002b46:	f000 fef3 	bl	8003930 <_Z12Kalmanfilterv>

		if(KalP >= 2.00){
 8002b4a:	4b5c      	ldr	r3, [pc, #368]	; (8002cbc <_Z13GrandStatumixv+0x2a4>)
 8002b4c:	edd3 7a00 	vldr	s15, [r3]
 8002b50:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002b54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5c:	db07      	blt.n	8002b6e <_Z13GrandStatumixv+0x156>
			PWMOut = 4800;
 8002b5e:	4b56      	ldr	r3, [pc, #344]	; (8002cb8 <_Z13GrandStatumixv+0x2a0>)
 8002b60:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8002b64:	801a      	strh	r2, [r3, #0]
			mot_dirctn = 0;
 8002b66:	4b56      	ldr	r3, [pc, #344]	; (8002cc0 <_Z13GrandStatumixv+0x2a8>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
 8002b6c:	e072      	b.n	8002c54 <_Z13GrandStatumixv+0x23c>
		}else if (2.00 >= KalP && KalP >= 1.00) {
 8002b6e:	4b53      	ldr	r3, [pc, #332]	; (8002cbc <_Z13GrandStatumixv+0x2a4>)
 8002b70:	edd3 7a00 	vldr	s15, [r3]
 8002b74:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002b78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b80:	d811      	bhi.n	8002ba6 <_Z13GrandStatumixv+0x18e>
 8002b82:	4b4e      	ldr	r3, [pc, #312]	; (8002cbc <_Z13GrandStatumixv+0x2a4>)
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b94:	db07      	blt.n	8002ba6 <_Z13GrandStatumixv+0x18e>
					PWMOut = 2400;
 8002b96:	4b48      	ldr	r3, [pc, #288]	; (8002cb8 <_Z13GrandStatumixv+0x2a0>)
 8002b98:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002b9c:	801a      	strh	r2, [r3, #0]
					mot_dirctn = 0;
 8002b9e:	4b48      	ldr	r3, [pc, #288]	; (8002cc0 <_Z13GrandStatumixv+0x2a8>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
 8002ba4:	e056      	b.n	8002c54 <_Z13GrandStatumixv+0x23c>
		}else if (1.00 >= KalP && KalP >= 0.2) {
 8002ba6:	4b45      	ldr	r3, [pc, #276]	; (8002cbc <_Z13GrandStatumixv+0x2a4>)
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb8:	d814      	bhi.n	8002be4 <_Z13GrandStatumixv+0x1cc>
 8002bba:	4b40      	ldr	r3, [pc, #256]	; (8002cbc <_Z13GrandStatumixv+0x2a4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fcc2 	bl	8000548 <__aeabi_f2d>
 8002bc4:	a332      	add	r3, pc, #200	; (adr r3, 8002c90 <_Z13GrandStatumixv+0x278>)
 8002bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bca:	f7fd ff9b 	bl	8000b04 <__aeabi_dcmpge>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <_Z13GrandStatumixv+0x1cc>
			PWMOut = 1200;
 8002bd4:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <_Z13GrandStatumixv+0x2a0>)
 8002bd6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002bda:	801a      	strh	r2, [r3, #0]
			mot_dirctn = 0;
 8002bdc:	4b38      	ldr	r3, [pc, #224]	; (8002cc0 <_Z13GrandStatumixv+0x2a8>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e037      	b.n	8002c54 <_Z13GrandStatumixv+0x23c>
		}else if (0.2 >= KalP && KalP >= 0.006) {
 8002be4:	4b35      	ldr	r3, [pc, #212]	; (8002cbc <_Z13GrandStatumixv+0x2a4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fcad 	bl	8000548 <__aeabi_f2d>
 8002bee:	a328      	add	r3, pc, #160	; (adr r3, 8002c90 <_Z13GrandStatumixv+0x278>)
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	f7fd ff7c 	bl	8000af0 <__aeabi_dcmple>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d014      	beq.n	8002c28 <_Z13GrandStatumixv+0x210>
 8002bfe:	4b2f      	ldr	r3, [pc, #188]	; (8002cbc <_Z13GrandStatumixv+0x2a4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fca0 	bl	8000548 <__aeabi_f2d>
 8002c08:	a323      	add	r3, pc, #140	; (adr r3, 8002c98 <_Z13GrandStatumixv+0x280>)
 8002c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0e:	f7fd ff79 	bl	8000b04 <__aeabi_dcmpge>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <_Z13GrandStatumixv+0x210>
			PWMOut = 950;
 8002c18:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <_Z13GrandStatumixv+0x2a0>)
 8002c1a:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002c1e:	801a      	strh	r2, [r3, #0]
			mot_dirctn = 0;
 8002c20:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <_Z13GrandStatumixv+0x2a8>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
 8002c26:	e015      	b.n	8002c54 <_Z13GrandStatumixv+0x23c>
		}else if (1000 <= BinPosXI && BinPosXI <= 1023) {
 8002c28:	4b26      	ldr	r3, [pc, #152]	; (8002cc4 <_Z13GrandStatumixv+0x2ac>)
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c30:	d30c      	bcc.n	8002c4c <_Z13GrandStatumixv+0x234>
 8002c32:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <_Z13GrandStatumixv+0x2ac>)
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3a:	d207      	bcs.n	8002c4c <_Z13GrandStatumixv+0x234>
				PWMOut = 950;
 8002c3c:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <_Z13GrandStatumixv+0x2a0>)
 8002c3e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002c42:	801a      	strh	r2, [r3, #0]
				mot_dirctn = 1;
 8002c44:	4b1e      	ldr	r3, [pc, #120]	; (8002cc0 <_Z13GrandStatumixv+0x2a8>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e003      	b.n	8002c54 <_Z13GrandStatumixv+0x23c>
			}
		else{PWMOut = PWMOut;}
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <_Z13GrandStatumixv+0x2a0>)
 8002c4e:	881a      	ldrh	r2, [r3, #0]
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <_Z13GrandStatumixv+0x2a0>)
 8002c52:	801a      	strh	r2, [r3, #0]

		if(BinPosXI == 0){
 8002c54:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <_Z13GrandStatumixv+0x2ac>)
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d108      	bne.n	8002c6e <_Z13GrandStatumixv+0x256>
			PWMOut = 0;
 8002c5c:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <_Z13GrandStatumixv+0x2a0>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	801a      	strh	r2, [r3, #0]
			counter_Z++;
 8002c62:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <_Z13GrandStatumixv+0x2b0>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	4b17      	ldr	r3, [pc, #92]	; (8002cc8 <_Z13GrandStatumixv+0x2b0>)
 8002c6c:	701a      	strb	r2, [r3, #0]
		}
		if(counter_Z >= 100){
 8002c6e:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <_Z13GrandStatumixv+0x2b0>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b63      	cmp	r3, #99	; 0x63
 8002c74:	f240 80d0 	bls.w	8002e18 <_Z13GrandStatumixv+0x400>
			counter_Z = 0;
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <_Z13GrandStatumixv+0x2b0>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
			PWMOut = 0;
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <_Z13GrandStatumixv+0x2a0>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	801a      	strh	r2, [r3, #0]
			fn_Uart();
 8002c84:	f7fe fefc 	bl	8001a80 <_Z7fn_Uartv>
			grandState = Ready;
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <_Z13GrandStatumixv+0x288>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
//			position_order = 0;
//			positionlog[position_order] = 0.00; // 0.000613 - 0.0122 => 1-2/1024
//			Velocity = 7.0;
//			grandState = SetZeroGr;
//		}
		break;
 8002c8e:	e0c3      	b.n	8002e18 <_Z13GrandStatumixv+0x400>
 8002c90:	9999999a 	.word	0x9999999a
 8002c94:	3fc99999 	.word	0x3fc99999
 8002c98:	bc6a7efa 	.word	0xbc6a7efa
 8002c9c:	3f789374 	.word	0x3f789374
 8002ca0:	2000054c 	.word	0x2000054c
 8002ca4:	40020400 	.word	0x40020400
 8002ca8:	40020800 	.word	0x40020800
 8002cac:	2000054e 	.word	0x2000054e
 8002cb0:	2000054d 	.word	0x2000054d
 8002cb4:	20000780 	.word	0x20000780
 8002cb8:	200005c4 	.word	0x200005c4
 8002cbc:	20000714 	.word	0x20000714
 8002cc0:	200005cc 	.word	0x200005cc
 8002cc4:	200005c0 	.word	0x200005c0
 8002cc8:	20000834 	.word	0x20000834

	case SetZeroGr:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cd2:	4857      	ldr	r0, [pc, #348]	; (8002e30 <_Z13GrandStatumixv+0x418>)
 8002cd4:	f014 fd62 	bl	801779c <HAL_GPIO_WritePin>

			////////>>>SetZeroStp/////////////////
		Unwrapping();
 8002cd8:	f000 fd72 	bl	80037c0 <_Z10Unwrappingv>

		 if(flagNewpos==0){
 8002cdc:	4b55      	ldr	r3, [pc, #340]	; (8002e34 <_Z13GrandStatumixv+0x41c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d111      	bne.n	8002d08 <_Z13GrandStatumixv+0x2f0>
			Currentpos = CurrentEn;
 8002ce4:	4b54      	ldr	r3, [pc, #336]	; (8002e38 <_Z13GrandStatumixv+0x420>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a54      	ldr	r2, [pc, #336]	; (8002e3c <_Z13GrandStatumixv+0x424>)
 8002cea:	6013      	str	r3, [r2, #0]
			Distance = Finalposition - Currentpos;
 8002cec:	4b54      	ldr	r3, [pc, #336]	; (8002e40 <_Z13GrandStatumixv+0x428>)
 8002cee:	ed93 7a00 	vldr	s14, [r3]
 8002cf2:	4b52      	ldr	r3, [pc, #328]	; (8002e3c <_Z13GrandStatumixv+0x424>)
 8002cf4:	edd3 7a00 	vldr	s15, [r3]
 8002cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cfc:	4b51      	ldr	r3, [pc, #324]	; (8002e44 <_Z13GrandStatumixv+0x42c>)
 8002cfe:	edc3 7a00 	vstr	s15, [r3]
			flagNewpos = 1;
 8002d02:	4b4c      	ldr	r3, [pc, #304]	; (8002e34 <_Z13GrandStatumixv+0x41c>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
		 }
		Trajectory();
 8002d08:	f000 f9f6 	bl	80030f8 <_Z10Trajectoryv>
		Kalmanfilter();
 8002d0c:	f000 fe10 	bl	8003930 <_Z12Kalmanfilterv>
		controlloop();
 8002d10:	f001 f86a 	bl	8003de8 <_Z11controlloopv>

		//// <> Zero finish
		if (flag_finishTra == 1){
 8002d14:	4b4c      	ldr	r3, [pc, #304]	; (8002e48 <_Z13GrandStatumixv+0x430>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d109      	bne.n	8002d30 <_Z13GrandStatumixv+0x318>
			flag_finishTra = 0;
 8002d1c:	4b4a      	ldr	r3, [pc, #296]	; (8002e48 <_Z13GrandStatumixv+0x430>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
			fn_Uart();
 8002d22:	f7fe fead 	bl	8001a80 <_Z7fn_Uartv>
			grandState = Ready;
 8002d26:	4b49      	ldr	r3, [pc, #292]	; (8002e4c <_Z13GrandStatumixv+0x434>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
			ResetParam();
 8002d2c:	f000 f99a 	bl	8003064 <_Z10ResetParamv>
		}
		////////<<<SetZeroStp/////////////////
//		}

		if (pwr_sense == 1){grandState = emer;}
 8002d30:	4b47      	ldr	r3, [pc, #284]	; (8002e50 <_Z13GrandStatumixv+0x438>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d102      	bne.n	8002d3e <_Z13GrandStatumixv+0x326>
 8002d38:	4b44      	ldr	r3, [pc, #272]	; (8002e4c <_Z13GrandStatumixv+0x434>)
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){
 8002d3e:	4b45      	ldr	r3, [pc, #276]	; (8002e54 <_Z13GrandStatumixv+0x43c>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d16a      	bne.n	8002e1c <_Z13GrandStatumixv+0x404>
					PWMOut = 0;
 8002d46:	4b44      	ldr	r3, [pc, #272]	; (8002e58 <_Z13GrandStatumixv+0x440>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	801a      	strh	r2, [r3, #0]
					grandState = stopnd;
 8002d4c:	4b3f      	ldr	r3, [pc, #252]	; (8002e4c <_Z13GrandStatumixv+0x434>)
 8002d4e:	2204      	movs	r2, #4
 8002d50:	701a      	strb	r2, [r3, #0]
					u_contr = 0;
 8002d52:	4b42      	ldr	r3, [pc, #264]	; (8002e5c <_Z13GrandStatumixv+0x444>)
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
				}
	break;
 8002d5a:	e05f      	b.n	8002e1c <_Z13GrandStatumixv+0x404>

	case stop:
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d62:	4833      	ldr	r0, [pc, #204]	; (8002e30 <_Z13GrandStatumixv+0x418>)
 8002d64:	f014 fd1a 	bl	801779c <HAL_GPIO_WritePin>
		PWMOut = 0;
 8002d68:	4b3b      	ldr	r3, [pc, #236]	; (8002e58 <_Z13GrandStatumixv+0x440>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	801a      	strh	r2, [r3, #0]

		X(1,0)=0;
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2101      	movs	r1, #1
 8002d72:	483b      	ldr	r0, [pc, #236]	; (8002e60 <_Z13GrandStatumixv+0x448>)
 8002d74:	f001 fdde 	bl	8004934 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
		KalV = X(1,0);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2101      	movs	r1, #1
 8002d84:	4836      	ldr	r0, [pc, #216]	; (8002e60 <_Z13GrandStatumixv+0x448>)
 8002d86:	f001 fdd5 	bl	8004934 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a35      	ldr	r2, [pc, #212]	; (8002e64 <_Z13GrandStatumixv+0x44c>)
 8002d90:	6013      	str	r3, [r2, #0]

		if (stop_sense == 1){
 8002d92:	4b30      	ldr	r3, [pc, #192]	; (8002e54 <_Z13GrandStatumixv+0x43c>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d142      	bne.n	8002e20 <_Z13GrandStatumixv+0x408>
			grandState = Ready;
 8002d9a:	4b2c      	ldr	r3, [pc, #176]	; (8002e4c <_Z13GrandStatumixv+0x434>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
			IOExpenderInit();
 8002da0:	f001 f9c6 	bl	8004130 <_Z14IOExpenderInitv>
			HAL_Delay(100);
 8002da4:	2064      	movs	r0, #100	; 0x64
 8002da6:	f013 fe17 	bl	80169d8 <HAL_Delay>
			//== rotation change for dummy test
			//mot_dirctn++; mot_dirctn%=2;
		}
	break;
 8002daa:	e039      	b.n	8002e20 <_Z13GrandStatumixv+0x408>

	case stopnd:
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8002dac:	2201      	movs	r2, #1
 8002dae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002db2:	481f      	ldr	r0, [pc, #124]	; (8002e30 <_Z13GrandStatumixv+0x418>)
 8002db4:	f014 fcf2 	bl	801779c <HAL_GPIO_WritePin>
			PWMOut = 0;
 8002db8:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <_Z13GrandStatumixv+0x440>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	801a      	strh	r2, [r3, #0]
			//Integral = 0;
			X(1,0)=0;
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4827      	ldr	r0, [pc, #156]	; (8002e60 <_Z13GrandStatumixv+0x448>)
 8002dc4:	f001 fdb6 	bl	8004934 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
			KalV = X(1,0);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	4822      	ldr	r0, [pc, #136]	; (8002e60 <_Z13GrandStatumixv+0x448>)
 8002dd6:	f001 fdad 	bl	8004934 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a21      	ldr	r2, [pc, #132]	; (8002e64 <_Z13GrandStatumixv+0x44c>)
 8002de0:	6013      	str	r3, [r2, #0]


			if (stop_sense == 1){
 8002de2:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <_Z13GrandStatumixv+0x43c>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d11c      	bne.n	8002e24 <_Z13GrandStatumixv+0x40c>

//				Currentpos = CurrentEn;
//				Distance = Finalposition - Currentpos;
//				flagNewpos = 1;
//				check = 0;
				grandState = work;
 8002dea:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <_Z13GrandStatumixv+0x434>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002df0:	e018      	b.n	8002e24 <_Z13GrandStatumixv+0x40c>

	case emer:
		ResetParam();
 8002df2:	f000 f937 	bl	8003064 <_Z10ResetParamv>
		// Reset every variables at control
		if (pwr_sense == 0){
 8002df6:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <_Z13GrandStatumixv+0x438>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d114      	bne.n	8002e28 <_Z13GrandStatumixv+0x410>
			grandState = Ready;
 8002dfe:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <_Z13GrandStatumixv+0x434>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
			HAL_Delay(250); // wait for emer release shock power
 8002e04:	20fa      	movs	r0, #250	; 0xfa
 8002e06:	f013 fde7 	bl	80169d8 <HAL_Delay>
			IOExpenderInit();
 8002e0a:	f001 f991 	bl	8004130 <_Z14IOExpenderInitv>

		}
	break;
 8002e0e:	e00b      	b.n	8002e28 <_Z13GrandStatumixv+0x410>
	break;
 8002e10:	bf00      	nop
 8002e12:	e00a      	b.n	8002e2a <_Z13GrandStatumixv+0x412>
	break;
 8002e14:	bf00      	nop
 8002e16:	e008      	b.n	8002e2a <_Z13GrandStatumixv+0x412>
		break;
 8002e18:	bf00      	nop
 8002e1a:	e006      	b.n	8002e2a <_Z13GrandStatumixv+0x412>
	break;
 8002e1c:	bf00      	nop
 8002e1e:	e004      	b.n	8002e2a <_Z13GrandStatumixv+0x412>
	break;
 8002e20:	bf00      	nop
 8002e22:	e002      	b.n	8002e2a <_Z13GrandStatumixv+0x412>
		break;
 8002e24:	bf00      	nop
 8002e26:	e000      	b.n	8002e2a <_Z13GrandStatumixv+0x412>
	break;
 8002e28:	bf00      	nop
	}
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40020400 	.word	0x40020400
 8002e34:	200005fc 	.word	0x200005fc
 8002e38:	20000734 	.word	0x20000734
 8002e3c:	200005f8 	.word	0x200005f8
 8002e40:	200005d0 	.word	0x200005d0
 8002e44:	200005d4 	.word	0x200005d4
 8002e48:	20000554 	.word	0x20000554
 8002e4c:	2000054c 	.word	0x2000054c
 8002e50:	2000054d 	.word	0x2000054d
 8002e54:	2000054e 	.word	0x2000054e
 8002e58:	200005c4 	.word	0x200005c4
 8002e5c:	20000780 	.word	0x20000780
 8002e60:	200006f0 	.word	0x200006f0
 8002e64:	20000718 	.word	0x20000718

08002e68 <_Z20LaserTrajex_workflowv>:

void LaserTrajex_workflow(){ // 1, n loop go to shoot laser run
 8002e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e6c:	b086      	sub	sp, #24
 8002e6e:	af00      	add	r7, sp, #0
	// -1 means no position value
	//if (Finalposition == -1){flag_LasxTraj = 0;}
	static uint16_t timeouttt = 5050;
	//static uint8_t missst = 0;

	switch(flag_LasxTraj){
 8002e70:	4b6b      	ldr	r3, [pc, #428]	; (8003020 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d012      	beq.n	8002e9e <_Z20LaserTrajex_workflowv+0x36>
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d05b      	beq.n	8002f34 <_Z20LaserTrajex_workflowv+0xcc>
	default:
	case 0: // wait go flag
		////////// raise flag to 1 if need to drive the state

		if (grandState == work){ //flag_LasxTraj != 0 ||
 8002e7c:	4b69      	ldr	r3, [pc, #420]	; (8003024 <_Z20LaserTrajex_workflowv+0x1bc>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	f040 80c3 	bne.w	800300c <_Z20LaserTrajex_workflowv+0x1a4>
			flag_LasxTraj = 1;
 8002e86:	4b66      	ldr	r3, [pc, #408]	; (8003020 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
			Finalposition = positionlog[position_order]; // receive in rad
 8002e8c:	4b66      	ldr	r3, [pc, #408]	; (8003028 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	4a66      	ldr	r2, [pc, #408]	; (800302c <_Z20LaserTrajex_workflowv+0x1c4>)
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a65      	ldr	r2, [pc, #404]	; (8003030 <_Z20LaserTrajex_workflowv+0x1c8>)
 8002e9a:	6013      	str	r3, [r2, #0]

		}
		break;
 8002e9c:	e0b6      	b.n	800300c <_Z20LaserTrajex_workflowv+0x1a4>
	case 1: //-------------traject-----
		//====flag_LasxTraj will trig trajex in while;
		//////// raise flag to 2 and flag_efftActi = 1; if reach the target the position

		Unwrapping();
 8002e9e:	f000 fc8f 	bl	80037c0 <_Z10Unwrappingv>
		 if(flagNewpos == 0){
 8002ea2:	4b64      	ldr	r3, [pc, #400]	; (8003034 <_Z20LaserTrajex_workflowv+0x1cc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d114      	bne.n	8002ed4 <_Z20LaserTrajex_workflowv+0x6c>
			Currentpos = CurrentEn;
 8002eaa:	4b63      	ldr	r3, [pc, #396]	; (8003038 <_Z20LaserTrajex_workflowv+0x1d0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a63      	ldr	r2, [pc, #396]	; (800303c <_Z20LaserTrajex_workflowv+0x1d4>)
 8002eb0:	6013      	str	r3, [r2, #0]
			//Finalposition = 300*0.006136; // Put goal position here in rad
			Distance = Finalposition - Currentpos;
 8002eb2:	4b5f      	ldr	r3, [pc, #380]	; (8003030 <_Z20LaserTrajex_workflowv+0x1c8>)
 8002eb4:	ed93 7a00 	vldr	s14, [r3]
 8002eb8:	4b60      	ldr	r3, [pc, #384]	; (800303c <_Z20LaserTrajex_workflowv+0x1d4>)
 8002eba:	edd3 7a00 	vldr	s15, [r3]
 8002ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec2:	4b5f      	ldr	r3, [pc, #380]	; (8003040 <_Z20LaserTrajex_workflowv+0x1d8>)
 8002ec4:	edc3 7a00 	vstr	s15, [r3]
			flagNewpos = 1;
 8002ec8:	4b5a      	ldr	r3, [pc, #360]	; (8003034 <_Z20LaserTrajex_workflowv+0x1cc>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
			check = 0;
 8002ece:	4b5d      	ldr	r3, [pc, #372]	; (8003044 <_Z20LaserTrajex_workflowv+0x1dc>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
		 }
		Trajectory();
 8002ed4:	f000 f910 	bl	80030f8 <_Z10Trajectoryv>
		Kalmanfilter();
 8002ed8:	f000 fd2a 	bl	8003930 <_Z12Kalmanfilterv>
		controlloop();
 8002edc:	f000 ff84 	bl	8003de8 <_Z11controlloopv>

		//HAL_Delay(2500); // Simulate workload
		//flag_finishTra = 1;

		if(flag_finishTra == 1){
 8002ee0:	4b59      	ldr	r3, [pc, #356]	; (8003048 <_Z20LaserTrajex_workflowv+0x1e0>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	f040 8093 	bne.w	8003010 <_Z20LaserTrajex_workflowv+0x1a8>
			flag_finishTra = 0;
 8002eea:	4b57      	ldr	r3, [pc, #348]	; (8003048 <_Z20LaserTrajex_workflowv+0x1e0>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]

			flag_efftActi = 1;
 8002ef0:	4b56      	ldr	r3, [pc, #344]	; (800304c <_Z20LaserTrajex_workflowv+0x1e4>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
			flag_LasxTraj = 2;
 8002ef6:	4b4a      	ldr	r3, [pc, #296]	; (8003020 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002ef8:	2202      	movs	r2, #2
 8002efa:	701a      	strb	r2, [r3, #0]

			timeout_efft = millis();
 8002efc:	f001 faa0 	bl	8004440 <_Z6millisv>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2200      	movs	r2, #0
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	60fa      	str	r2, [r7, #12]
 8002f08:	4b51      	ldr	r3, [pc, #324]	; (8003050 <_Z20LaserTrajex_workflowv+0x1e8>)
 8002f0a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002f0e:	e9c3 1200 	strd	r1, r2, [r3]

			if(flag_efftDis == 1){
 8002f12:	4b50      	ldr	r3, [pc, #320]	; (8003054 <_Z20LaserTrajex_workflowv+0x1ec>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d107      	bne.n	8002f2a <_Z20LaserTrajex_workflowv+0xc2>
				timeouttt = 500;
 8002f1a:	4b4f      	ldr	r3, [pc, #316]	; (8003058 <_Z20LaserTrajex_workflowv+0x1f0>)
 8002f1c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002f20:	801a      	strh	r2, [r3, #0]
				efft_status = 0x78;}
 8002f22:	4b4e      	ldr	r3, [pc, #312]	; (800305c <_Z20LaserTrajex_workflowv+0x1f4>)
 8002f24:	2278      	movs	r2, #120	; 0x78
 8002f26:	701a      	strb	r2, [r3, #0]
			else{timeouttt = 5050;}

		}
		break;
 8002f28:	e072      	b.n	8003010 <_Z20LaserTrajex_workflowv+0x1a8>
			else{timeouttt = 5050;}
 8002f2a:	4b4b      	ldr	r3, [pc, #300]	; (8003058 <_Z20LaserTrajex_workflowv+0x1f0>)
 8002f2c:	f241 32ba 	movw	r2, #5050	; 0x13ba
 8002f30:	801a      	strh	r2, [r3, #0]
		break;
 8002f32:	e06d      	b.n	8003010 <_Z20LaserTrajex_workflowv+0x1a8>
	case 2: //---------------Laserwork--------------
		trig_efftRead = 1;
 8002f34:	4b4a      	ldr	r3, [pc, #296]	; (8003060 <_Z20LaserTrajex_workflowv+0x1f8>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]

		// if laser finished work or tomeout and not too fast shift state
		if((efft_status == 0x78 || millis() - timeout_efft >= timeouttt) && millis() - timeout_efft >= 1000){
 8002f3a:	4b48      	ldr	r3, [pc, #288]	; (800305c <_Z20LaserTrajex_workflowv+0x1f4>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b78      	cmp	r3, #120	; 0x78
 8002f40:	d01c      	beq.n	8002f7c <_Z20LaserTrajex_workflowv+0x114>
 8002f42:	f001 fa7d 	bl	8004440 <_Z6millisv>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2200      	movs	r2, #0
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	617a      	str	r2, [r7, #20]
 8002f4e:	4b40      	ldr	r3, [pc, #256]	; (8003050 <_Z20LaserTrajex_workflowv+0x1e8>)
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	6939      	ldr	r1, [r7, #16]
 8002f56:	ebb1 0802 	subs.w	r8, r1, r2
 8002f5a:	6979      	ldr	r1, [r7, #20]
 8002f5c:	eb61 0903 	sbc.w	r9, r1, r3
 8002f60:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <_Z20LaserTrajex_workflowv+0x1f0>)
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2200      	movs	r2, #0
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002f70:	460b      	mov	r3, r1
 8002f72:	4598      	cmp	r8, r3
 8002f74:	4613      	mov	r3, r2
 8002f76:	eb79 0303 	sbcs.w	r3, r9, r3
 8002f7a:	d313      	bcc.n	8002fa4 <_Z20LaserTrajex_workflowv+0x13c>
 8002f7c:	f001 fa60 	bl	8004440 <_Z6millisv>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2200      	movs	r2, #0
 8002f84:	469a      	mov	sl, r3
 8002f86:	4693      	mov	fp, r2
 8002f88:	4b31      	ldr	r3, [pc, #196]	; (8003050 <_Z20LaserTrajex_workflowv+0x1e8>)
 8002f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8e:	ebba 0402 	subs.w	r4, sl, r2
 8002f92:	eb6b 0503 	sbc.w	r5, fp, r3
 8002f96:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002f9a:	f175 0300 	sbcs.w	r3, r5, #0
 8002f9e:	d301      	bcc.n	8002fa4 <_Z20LaserTrajex_workflowv+0x13c>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <_Z20LaserTrajex_workflowv+0x13e>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d034      	beq.n	8003014 <_Z20LaserTrajex_workflowv+0x1ac>
		//// force encoder to work
		//if(efft_status == 0x78 || millis() - timeout_efft >= timeouttt){
		//// cheat force
		//if(millis() - timeout_efft >= timeouttt){
			efft_status = 0x00;
 8002faa:	4b2c      	ldr	r3, [pc, #176]	; (800305c <_Z20LaserTrajex_workflowv+0x1f4>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 0;
 8002fb0:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <_Z20LaserTrajex_workflowv+0x1f8>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
			position_order++; // go to next obtained position
 8002fb6:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002fc0:	701a      	strb	r2, [r3, #0]

			if (positionlog[position_order] == -1){
 8002fc2:	4b19      	ldr	r3, [pc, #100]	; (8003028 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	4a19      	ldr	r2, [pc, #100]	; (800302c <_Z20LaserTrajex_workflowv+0x1c4>)
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	edd3 7a00 	vldr	s15, [r3]
 8002fd0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002fd4:	eef4 7a47 	vcmp.f32	s15, s14
 8002fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fdc:	d10a      	bne.n	8002ff4 <_Z20LaserTrajex_workflowv+0x18c>
				//Real end, reset all position parameter
				// back to ready
				//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
				fn_Uart();
 8002fde:	f7fe fd4f 	bl	8001a80 <_Z7fn_Uartv>
				flag_LasxTraj = 0;
 8002fe2:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
				ResetParam();
 8002fe8:	f000 f83c 	bl	8003064 <_Z10ResetParamv>
				grandState = Ready;
 8002fec:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <_Z20LaserTrajex_workflowv+0x1bc>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
			else {
				Finalposition = positionlog[position_order];
				flag_LasxTraj = 1;
			} // continue next pos if have
		}
		break;
 8002ff2:	e00f      	b.n	8003014 <_Z20LaserTrajex_workflowv+0x1ac>
				Finalposition = positionlog[position_order];
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	4a0c      	ldr	r2, [pc, #48]	; (800302c <_Z20LaserTrajex_workflowv+0x1c4>)
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a0b      	ldr	r2, [pc, #44]	; (8003030 <_Z20LaserTrajex_workflowv+0x1c8>)
 8003002:	6013      	str	r3, [r2, #0]
				flag_LasxTraj = 1;
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <_Z20LaserTrajex_workflowv+0x1b8>)
 8003006:	2201      	movs	r2, #1
 8003008:	701a      	strb	r2, [r3, #0]
		break;
 800300a:	e003      	b.n	8003014 <_Z20LaserTrajex_workflowv+0x1ac>
		break;
 800300c:	bf00      	nop
 800300e:	e002      	b.n	8003016 <_Z20LaserTrajex_workflowv+0x1ae>
		break;
 8003010:	bf00      	nop
 8003012:	e000      	b.n	8003016 <_Z20LaserTrajex_workflowv+0x1ae>
		break;
 8003014:	bf00      	nop
	}
}
 8003016:	bf00      	nop
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003020:	20000564 	.word	0x20000564
 8003024:	2000054c 	.word	0x2000054c
 8003028:	20000565 	.word	0x20000565
 800302c:	20000194 	.word	0x20000194
 8003030:	200005d0 	.word	0x200005d0
 8003034:	200005fc 	.word	0x200005fc
 8003038:	20000734 	.word	0x20000734
 800303c:	200005f8 	.word	0x200005f8
 8003040:	200005d4 	.word	0x200005d4
 8003044:	20000789 	.word	0x20000789
 8003048:	20000554 	.word	0x20000554
 800304c:	2000078b 	.word	0x2000078b
 8003050:	20000798 	.word	0x20000798
 8003054:	200001fc 	.word	0x200001fc
 8003058:	20000214 	.word	0x20000214
 800305c:	2000078a 	.word	0x2000078a
 8003060:	2000078d 	.word	0x2000078d

08003064 <_Z10ResetParamv>:

void ResetParam(){
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
	// Reset every variables at control
	// reset position buffer
	PWMOut = 0;
 800306a:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <_Z10ResetParamv+0x6c>)
 800306c:	2200      	movs	r2, #0
 800306e:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8003070:	2300      	movs	r3, #0
 8003072:	607b      	str	r3, [r7, #4]
 8003074:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <_Z10ResetParamv+0x70>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4293      	cmp	r3, r2
 800307e:	dc09      	bgt.n	8003094 <_Z10ResetParamv+0x30>
			positionlog[i] = -1.0;
 8003080:	4a15      	ldr	r2, [pc, #84]	; (80030d8 <_Z10ResetParamv+0x74>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	4a14      	ldr	r2, [pc, #80]	; (80030dc <_Z10ResetParamv+0x78>)
 800308a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3301      	adds	r3, #1
 8003090:	607b      	str	r3, [r7, #4]
 8003092:	e7ef      	b.n	8003074 <_Z10ResetParamv+0x10>
		}
	position_order = 0;
 8003094:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <_Z10ResetParamv+0x70>)
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]
	flag_LasxTraj = 0;
 800309a:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <_Z10ResetParamv+0x7c>)
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
	trig_efftRead = 0;
 80030a0:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <_Z10ResetParamv+0x80>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	701a      	strb	r2, [r3, #0]
	bluecounter = 0;
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <_Z10ResetParamv+0x84>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
	Distance = 0;
 80030ac:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <_Z10ResetParamv+0x88>)
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
	Currentpos = 0;
 80030b4:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <_Z10ResetParamv+0x8c>)
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
	efft_status = 0x00;
 80030bc:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <_Z10ResetParamv+0x90>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
	IOExpenderInit();
 80030c2:	f001 f835 	bl	8004130 <_Z14IOExpenderInitv>
	//Integral = 0;
	//u_contr = 0;
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200005c4 	.word	0x200005c4
 80030d4:	20000565 	.word	0x20000565
 80030d8:	20000194 	.word	0x20000194
 80030dc:	bf800000 	.word	0xbf800000
 80030e0:	20000564 	.word	0x20000564
 80030e4:	2000078d 	.word	0x2000078d
 80030e8:	20000740 	.word	0x20000740
 80030ec:	200005d4 	.word	0x200005d4
 80030f0:	200005f8 	.word	0x200005f8
 80030f4:	2000078a 	.word	0x2000078a

080030f8 <_Z10Trajectoryv>:

//////////////////// [Trajectory Path] //////////////////////
void Trajectory(){
 80030f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030fc:	ed2d 8b04 	vpush	{d8-d9}
 8003100:	af00      	add	r7, sp, #0

	if(micros() - TimeStampTraject >= 10000){
 8003102:	f001 f983 	bl	800440c <_Z6microsv>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	49c5      	ldr	r1, [pc, #788]	; (8003420 <_Z10Trajectoryv+0x328>)
 800310c:	6809      	ldr	r1, [r1, #0]
 800310e:	2000      	movs	r0, #0
 8003110:	4688      	mov	r8, r1
 8003112:	4681      	mov	r9, r0
 8003114:	ebb2 0408 	subs.w	r4, r2, r8
 8003118:	eb63 0509 	sbc.w	r5, r3, r9
 800311c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003120:	429c      	cmp	r4, r3
 8003122:	f175 0300 	sbcs.w	r3, r5, #0
 8003126:	bf2c      	ite	cs
 8003128:	2301      	movcs	r3, #1
 800312a:	2300      	movcc	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 8310 	beq.w	8003754 <_Z10Trajectoryv+0x65c>
		TimeStampTraject = micros();
 8003134:	f001 f96a 	bl	800440c <_Z6microsv>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4bb8      	ldr	r3, [pc, #736]	; (8003420 <_Z10Trajectoryv+0x328>)
 800313e:	601a      	str	r2, [r3, #0]

		Acceleration = 0.5;
 8003140:	4bb8      	ldr	r3, [pc, #736]	; (8003424 <_Z10Trajectoryv+0x32c>)
 8003142:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003146:	601a      	str	r2, [r3, #0]
//		}
		////////=======>>> Quintic ============///////////

		////////=======<<< Tapezoidal==========//////////

      timeFinal = (4*abs(Velocity)) + ((abs(Distance)-(2*abs(Velocity)*abs(Velocity)))/abs(Velocity));
 8003148:	4bb7      	ldr	r3, [pc, #732]	; (8003428 <_Z10Trajectoryv+0x330>)
 800314a:	edd3 7a00 	vldr	s15, [r3]
 800314e:	eeb0 0a67 	vmov.f32	s0, s15
 8003152:	f7fd ff1b 	bl	8000f8c <_ZSt3absf>
 8003156:	eef0 7a40 	vmov.f32	s15, s0
 800315a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800315e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8003162:	4bb2      	ldr	r3, [pc, #712]	; (800342c <_Z10Trajectoryv+0x334>)
 8003164:	edd3 7a00 	vldr	s15, [r3]
 8003168:	eeb0 0a67 	vmov.f32	s0, s15
 800316c:	f7fd ff0e 	bl	8000f8c <_ZSt3absf>
 8003170:	eeb0 9a40 	vmov.f32	s18, s0
 8003174:	4bac      	ldr	r3, [pc, #688]	; (8003428 <_Z10Trajectoryv+0x330>)
 8003176:	edd3 7a00 	vldr	s15, [r3]
 800317a:	eeb0 0a67 	vmov.f32	s0, s15
 800317e:	f7fd ff05 	bl	8000f8c <_ZSt3absf>
 8003182:	eef0 7a40 	vmov.f32	s15, s0
 8003186:	ee77 8aa7 	vadd.f32	s17, s15, s15
 800318a:	4ba7      	ldr	r3, [pc, #668]	; (8003428 <_Z10Trajectoryv+0x330>)
 800318c:	edd3 7a00 	vldr	s15, [r3]
 8003190:	eeb0 0a67 	vmov.f32	s0, s15
 8003194:	f7fd fefa 	bl	8000f8c <_ZSt3absf>
 8003198:	eef0 7a40 	vmov.f32	s15, s0
 800319c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80031a0:	ee79 8a67 	vsub.f32	s17, s18, s15
 80031a4:	4ba0      	ldr	r3, [pc, #640]	; (8003428 <_Z10Trajectoryv+0x330>)
 80031a6:	edd3 7a00 	vldr	s15, [r3]
 80031aa:	eeb0 0a67 	vmov.f32	s0, s15
 80031ae:	f7fd feed 	bl	8000f8c <_ZSt3absf>
 80031b2:	eeb0 7a40 	vmov.f32	s14, s0
 80031b6:	eec8 7a87 	vdiv.f32	s15, s17, s14
 80031ba:	ee78 7a27 	vadd.f32	s15, s16, s15
 80031be:	4b9c      	ldr	r3, [pc, #624]	; (8003430 <_Z10Trajectoryv+0x338>)
 80031c0:	edc3 7a00 	vstr	s15, [r3]

		if (Distance/Velocity > Velocity/Acceleration){
 80031c4:	4b99      	ldr	r3, [pc, #612]	; (800342c <_Z10Trajectoryv+0x334>)
 80031c6:	edd3 6a00 	vldr	s13, [r3]
 80031ca:	4b97      	ldr	r3, [pc, #604]	; (8003428 <_Z10Trajectoryv+0x330>)
 80031cc:	edd3 7a00 	vldr	s15, [r3]
 80031d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031d4:	4b94      	ldr	r3, [pc, #592]	; (8003428 <_Z10Trajectoryv+0x330>)
 80031d6:	ed93 6a00 	vldr	s12, [r3]
 80031da:	4b92      	ldr	r3, [pc, #584]	; (8003424 <_Z10Trajectoryv+0x32c>)
 80031dc:	edd3 6a00 	vldr	s13, [r3]
 80031e0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80031e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	dd0b      	ble.n	8003206 <_Z10Trajectoryv+0x10e>
			Tb = Velocity/Acceleration;
 80031ee:	4b8e      	ldr	r3, [pc, #568]	; (8003428 <_Z10Trajectoryv+0x330>)
 80031f0:	edd3 6a00 	vldr	s13, [r3]
 80031f4:	4b8b      	ldr	r3, [pc, #556]	; (8003424 <_Z10Trajectoryv+0x32c>)
 80031f6:	ed93 7a00 	vldr	s14, [r3]
 80031fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031fe:	4b8d      	ldr	r3, [pc, #564]	; (8003434 <_Z10Trajectoryv+0x33c>)
 8003200:	edc3 7a00 	vstr	s15, [r3]
 8003204:	e029      	b.n	800325a <_Z10Trajectoryv+0x162>
		}
		else {
			Tb = sqrt(2*abs(Distance));
 8003206:	4b89      	ldr	r3, [pc, #548]	; (800342c <_Z10Trajectoryv+0x334>)
 8003208:	edd3 7a00 	vldr	s15, [r3]
 800320c:	eeb0 0a67 	vmov.f32	s0, s15
 8003210:	f7fd febc 	bl	8000f8c <_ZSt3absf>
 8003214:	eef0 7a40 	vmov.f32	s15, s0
 8003218:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800321c:	eeb0 0a67 	vmov.f32	s0, s15
 8003220:	f7fd fec4 	bl	8000fac <_ZSt4sqrtf>
 8003224:	eef0 7a40 	vmov.f32	s15, s0
 8003228:	4b82      	ldr	r3, [pc, #520]	; (8003434 <_Z10Trajectoryv+0x33c>)
 800322a:	edc3 7a00 	vstr	s15, [r3]
			Velocity = sqrt(abs(Distance)/2);
 800322e:	4b7f      	ldr	r3, [pc, #508]	; (800342c <_Z10Trajectoryv+0x334>)
 8003230:	edd3 7a00 	vldr	s15, [r3]
 8003234:	eeb0 0a67 	vmov.f32	s0, s15
 8003238:	f7fd fea8 	bl	8000f8c <_ZSt3absf>
 800323c:	eeb0 7a40 	vmov.f32	s14, s0
 8003240:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003244:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003248:	eeb0 0a67 	vmov.f32	s0, s15
 800324c:	f7fd feae 	bl	8000fac <_ZSt4sqrtf>
 8003250:	eef0 7a40 	vmov.f32	s15, s0
 8003254:	4b74      	ldr	r3, [pc, #464]	; (8003428 <_Z10Trajectoryv+0x330>)
 8003256:	edc3 7a00 	vstr	s15, [r3]
		}
		if (TimeinS < Tb){
 800325a:	4b77      	ldr	r3, [pc, #476]	; (8003438 <_Z10Trajectoryv+0x340>)
 800325c:	ed93 7a00 	vldr	s14, [r3]
 8003260:	4b74      	ldr	r3, [pc, #464]	; (8003434 <_Z10Trajectoryv+0x33c>)
 8003262:	edd3 7a00 	vldr	s15, [r3]
 8003266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800326a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326e:	d55c      	bpl.n	800332a <_Z10Trajectoryv+0x232>
			OutPosition = (0.5*Acceleration*TimeinS*TimeinS)+Currentpos;
 8003270:	4b6c      	ldr	r3, [pc, #432]	; (8003424 <_Z10Trajectoryv+0x32c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd f967 	bl	8000548 <__aeabi_f2d>
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	4b6f      	ldr	r3, [pc, #444]	; (800343c <_Z10Trajectoryv+0x344>)
 8003280:	f7fd f9ba 	bl	80005f8 <__aeabi_dmul>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4614      	mov	r4, r2
 800328a:	461d      	mov	r5, r3
 800328c:	4b6a      	ldr	r3, [pc, #424]	; (8003438 <_Z10Trajectoryv+0x340>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd f959 	bl	8000548 <__aeabi_f2d>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	4620      	mov	r0, r4
 800329c:	4629      	mov	r1, r5
 800329e:	f7fd f9ab 	bl	80005f8 <__aeabi_dmul>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4614      	mov	r4, r2
 80032a8:	461d      	mov	r5, r3
 80032aa:	4b63      	ldr	r3, [pc, #396]	; (8003438 <_Z10Trajectoryv+0x340>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd f94a 	bl	8000548 <__aeabi_f2d>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4620      	mov	r0, r4
 80032ba:	4629      	mov	r1, r5
 80032bc:	f7fd f99c 	bl	80005f8 <__aeabi_dmul>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4614      	mov	r4, r2
 80032c6:	461d      	mov	r5, r3
 80032c8:	4b5d      	ldr	r3, [pc, #372]	; (8003440 <_Z10Trajectoryv+0x348>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd f93b 	bl	8000548 <__aeabi_f2d>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4620      	mov	r0, r4
 80032d8:	4629      	mov	r1, r5
 80032da:	f7fc ffd7 	bl	800028c <__adddf3>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	f7fd fc7f 	bl	8000be8 <__aeabi_d2f>
 80032ea:	4603      	mov	r3, r0
 80032ec:	4a55      	ldr	r2, [pc, #340]	; (8003444 <_Z10Trajectoryv+0x34c>)
 80032ee:	6013      	str	r3, [r2, #0]
			OutVelocity = Acceleration*TimeinS;
 80032f0:	4b4c      	ldr	r3, [pc, #304]	; (8003424 <_Z10Trajectoryv+0x32c>)
 80032f2:	ed93 7a00 	vldr	s14, [r3]
 80032f6:	4b50      	ldr	r3, [pc, #320]	; (8003438 <_Z10Trajectoryv+0x340>)
 80032f8:	edd3 7a00 	vldr	s15, [r3]
 80032fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003300:	4b51      	ldr	r3, [pc, #324]	; (8003448 <_Z10Trajectoryv+0x350>)
 8003302:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = Acceleration;
 8003306:	4b47      	ldr	r3, [pc, #284]	; (8003424 <_Z10Trajectoryv+0x32c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a50      	ldr	r2, [pc, #320]	; (800344c <_Z10Trajectoryv+0x354>)
 800330c:	6013      	str	r3, [r2, #0]
			K_P_V = 2.5;
 800330e:	4b50      	ldr	r3, [pc, #320]	; (8003450 <_Z10Trajectoryv+0x358>)
 8003310:	4a50      	ldr	r2, [pc, #320]	; (8003454 <_Z10Trajectoryv+0x35c>)
 8003312:	601a      	str	r2, [r3, #0]
			K_I_V = 0.25;
 8003314:	4b50      	ldr	r3, [pc, #320]	; (8003458 <_Z10Trajectoryv+0x360>)
 8003316:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800331a:	601a      	str	r2, [r3, #0]
			K_D_V = 1.2;
 800331c:	4b4f      	ldr	r3, [pc, #316]	; (800345c <_Z10Trajectoryv+0x364>)
 800331e:	4a50      	ldr	r2, [pc, #320]	; (8003460 <_Z10Trajectoryv+0x368>)
 8003320:	601a      	str	r2, [r3, #0]
			ch = 1;
 8003322:	4b50      	ldr	r3, [pc, #320]	; (8003464 <_Z10Trajectoryv+0x36c>)
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	e1c8      	b.n	80036bc <_Z10Trajectoryv+0x5c4>
			}
		else if(TimeinS < (timeFinal-Tb)){
 800332a:	4b41      	ldr	r3, [pc, #260]	; (8003430 <_Z10Trajectoryv+0x338>)
 800332c:	ed93 7a00 	vldr	s14, [r3]
 8003330:	4b40      	ldr	r3, [pc, #256]	; (8003434 <_Z10Trajectoryv+0x33c>)
 8003332:	edd3 7a00 	vldr	s15, [r3]
 8003336:	ee37 7a67 	vsub.f32	s14, s14, s15
 800333a:	4b3f      	ldr	r3, [pc, #252]	; (8003438 <_Z10Trajectoryv+0x340>)
 800333c:	edd3 7a00 	vldr	s15, [r3]
 8003340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003348:	f340 8092 	ble.w	8003470 <_Z10Trajectoryv+0x378>
			OutPosition = (0.5*Acceleration*(Tb*Tb)) + (Velocity*(TimeinS-Tb))+Currentpos;
 800334c:	4b35      	ldr	r3, [pc, #212]	; (8003424 <_Z10Trajectoryv+0x32c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd f8f9 	bl	8000548 <__aeabi_f2d>
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	4b38      	ldr	r3, [pc, #224]	; (800343c <_Z10Trajectoryv+0x344>)
 800335c:	f7fd f94c 	bl	80005f8 <__aeabi_dmul>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4614      	mov	r4, r2
 8003366:	461d      	mov	r5, r3
 8003368:	4b32      	ldr	r3, [pc, #200]	; (8003434 <_Z10Trajectoryv+0x33c>)
 800336a:	ed93 7a00 	vldr	s14, [r3]
 800336e:	4b31      	ldr	r3, [pc, #196]	; (8003434 <_Z10Trajectoryv+0x33c>)
 8003370:	edd3 7a00 	vldr	s15, [r3]
 8003374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003378:	ee17 0a90 	vmov	r0, s15
 800337c:	f7fd f8e4 	bl	8000548 <__aeabi_f2d>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4620      	mov	r0, r4
 8003386:	4629      	mov	r1, r5
 8003388:	f7fd f936 	bl	80005f8 <__aeabi_dmul>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4614      	mov	r4, r2
 8003392:	461d      	mov	r5, r3
 8003394:	4b28      	ldr	r3, [pc, #160]	; (8003438 <_Z10Trajectoryv+0x340>)
 8003396:	ed93 7a00 	vldr	s14, [r3]
 800339a:	4b26      	ldr	r3, [pc, #152]	; (8003434 <_Z10Trajectoryv+0x33c>)
 800339c:	edd3 7a00 	vldr	s15, [r3]
 80033a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033a4:	4b20      	ldr	r3, [pc, #128]	; (8003428 <_Z10Trajectoryv+0x330>)
 80033a6:	edd3 7a00 	vldr	s15, [r3]
 80033aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ae:	ee17 0a90 	vmov	r0, s15
 80033b2:	f7fd f8c9 	bl	8000548 <__aeabi_f2d>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4620      	mov	r0, r4
 80033bc:	4629      	mov	r1, r5
 80033be:	f7fc ff65 	bl	800028c <__adddf3>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4614      	mov	r4, r2
 80033c8:	461d      	mov	r5, r3
 80033ca:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <_Z10Trajectoryv+0x348>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fd f8ba 	bl	8000548 <__aeabi_f2d>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4620      	mov	r0, r4
 80033da:	4629      	mov	r1, r5
 80033dc:	f7fc ff56 	bl	800028c <__adddf3>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	f7fd fbfe 	bl	8000be8 <__aeabi_d2f>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4a15      	ldr	r2, [pc, #84]	; (8003444 <_Z10Trajectoryv+0x34c>)
 80033f0:	6013      	str	r3, [r2, #0]
			OutVelocity = Velocity;
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <_Z10Trajectoryv+0x330>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a14      	ldr	r2, [pc, #80]	; (8003448 <_Z10Trajectoryv+0x350>)
 80033f8:	6013      	str	r3, [r2, #0]
			OutAcceleration = 0;
 80033fa:	4b14      	ldr	r3, [pc, #80]	; (800344c <_Z10Trajectoryv+0x354>)
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
			K_P_V = 2.0;
 8003402:	4b13      	ldr	r3, [pc, #76]	; (8003450 <_Z10Trajectoryv+0x358>)
 8003404:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003408:	601a      	str	r2, [r3, #0]
			K_I_V = 0.215;
 800340a:	4b13      	ldr	r3, [pc, #76]	; (8003458 <_Z10Trajectoryv+0x360>)
 800340c:	4a16      	ldr	r2, [pc, #88]	; (8003468 <_Z10Trajectoryv+0x370>)
 800340e:	601a      	str	r2, [r3, #0]
			K_D_V = 1.7;
 8003410:	4b12      	ldr	r3, [pc, #72]	; (800345c <_Z10Trajectoryv+0x364>)
 8003412:	4a16      	ldr	r2, [pc, #88]	; (800346c <_Z10Trajectoryv+0x374>)
 8003414:	601a      	str	r2, [r3, #0]
			ch = 2;
 8003416:	4b13      	ldr	r3, [pc, #76]	; (8003464 <_Z10Trajectoryv+0x36c>)
 8003418:	2202      	movs	r2, #2
 800341a:	701a      	strb	r2, [r3, #0]
 800341c:	e14e      	b.n	80036bc <_Z10Trajectoryv+0x5c4>
 800341e:	bf00      	nop
 8003420:	20000600 	.word	0x20000600
 8003424:	200005dc 	.word	0x200005dc
 8003428:	200005d8 	.word	0x200005d8
 800342c:	200005d4 	.word	0x200005d4
 8003430:	200005f0 	.word	0x200005f0
 8003434:	200005ec 	.word	0x200005ec
 8003438:	200005f4 	.word	0x200005f4
 800343c:	3fe00000 	.word	0x3fe00000
 8003440:	200005f8 	.word	0x200005f8
 8003444:	200005e0 	.word	0x200005e0
 8003448:	200005e4 	.word	0x200005e4
 800344c:	200005e8 	.word	0x200005e8
 8003450:	2000076c 	.word	0x2000076c
 8003454:	40200000 	.word	0x40200000
 8003458:	20000770 	.word	0x20000770
 800345c:	20000774 	.word	0x20000774
 8003460:	3f99999a 	.word	0x3f99999a
 8003464:	20000788 	.word	0x20000788
 8003468:	3e5c28f6 	.word	0x3e5c28f6
 800346c:	3fd9999a 	.word	0x3fd9999a
			}
		else if(((timeFinal-Tb) <= TimeinS) && (TimeinS <= timeFinal)){
 8003470:	4bbd      	ldr	r3, [pc, #756]	; (8003768 <_Z10Trajectoryv+0x670>)
 8003472:	ed93 7a00 	vldr	s14, [r3]
 8003476:	4bbd      	ldr	r3, [pc, #756]	; (800376c <_Z10Trajectoryv+0x674>)
 8003478:	edd3 7a00 	vldr	s15, [r3]
 800347c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003480:	4bbb      	ldr	r3, [pc, #748]	; (8003770 <_Z10Trajectoryv+0x678>)
 8003482:	edd3 7a00 	vldr	s15, [r3]
 8003486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800348a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348e:	f200 80ef 	bhi.w	8003670 <_Z10Trajectoryv+0x578>
 8003492:	4bb7      	ldr	r3, [pc, #732]	; (8003770 <_Z10Trajectoryv+0x678>)
 8003494:	ed93 7a00 	vldr	s14, [r3]
 8003498:	4bb3      	ldr	r3, [pc, #716]	; (8003768 <_Z10Trajectoryv+0x670>)
 800349a:	edd3 7a00 	vldr	s15, [r3]
 800349e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a6:	f200 80e3 	bhi.w	8003670 <_Z10Trajectoryv+0x578>
			OutPosition = (0.5*Acceleration*(Tb*Tb))+ (Velocity*(timeFinal-(2*Tb)))  + (Velocity*(TimeinS-(timeFinal-Tb))) - (0.5*Acceleration*((TimeinS-(timeFinal-Tb))*(TimeinS-(timeFinal-Tb))))+Currentpos;
 80034aa:	4bb2      	ldr	r3, [pc, #712]	; (8003774 <_Z10Trajectoryv+0x67c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd f84a 	bl	8000548 <__aeabi_f2d>
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	4baf      	ldr	r3, [pc, #700]	; (8003778 <_Z10Trajectoryv+0x680>)
 80034ba:	f7fd f89d 	bl	80005f8 <__aeabi_dmul>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4614      	mov	r4, r2
 80034c4:	461d      	mov	r5, r3
 80034c6:	4ba9      	ldr	r3, [pc, #676]	; (800376c <_Z10Trajectoryv+0x674>)
 80034c8:	ed93 7a00 	vldr	s14, [r3]
 80034cc:	4ba7      	ldr	r3, [pc, #668]	; (800376c <_Z10Trajectoryv+0x674>)
 80034ce:	edd3 7a00 	vldr	s15, [r3]
 80034d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d6:	ee17 0a90 	vmov	r0, s15
 80034da:	f7fd f835 	bl	8000548 <__aeabi_f2d>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4620      	mov	r0, r4
 80034e4:	4629      	mov	r1, r5
 80034e6:	f7fd f887 	bl	80005f8 <__aeabi_dmul>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4614      	mov	r4, r2
 80034f0:	461d      	mov	r5, r3
 80034f2:	4b9d      	ldr	r3, [pc, #628]	; (8003768 <_Z10Trajectoryv+0x670>)
 80034f4:	ed93 7a00 	vldr	s14, [r3]
 80034f8:	4b9c      	ldr	r3, [pc, #624]	; (800376c <_Z10Trajectoryv+0x674>)
 80034fa:	edd3 7a00 	vldr	s15, [r3]
 80034fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003502:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003506:	4b9d      	ldr	r3, [pc, #628]	; (800377c <_Z10Trajectoryv+0x684>)
 8003508:	edd3 7a00 	vldr	s15, [r3]
 800350c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003510:	ee17 0a90 	vmov	r0, s15
 8003514:	f7fd f818 	bl	8000548 <__aeabi_f2d>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4620      	mov	r0, r4
 800351e:	4629      	mov	r1, r5
 8003520:	f7fc feb4 	bl	800028c <__adddf3>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4614      	mov	r4, r2
 800352a:	461d      	mov	r5, r3
 800352c:	4b90      	ldr	r3, [pc, #576]	; (8003770 <_Z10Trajectoryv+0x678>)
 800352e:	ed93 7a00 	vldr	s14, [r3]
 8003532:	4b8d      	ldr	r3, [pc, #564]	; (8003768 <_Z10Trajectoryv+0x670>)
 8003534:	edd3 6a00 	vldr	s13, [r3]
 8003538:	4b8c      	ldr	r3, [pc, #560]	; (800376c <_Z10Trajectoryv+0x674>)
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003542:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003546:	4b8d      	ldr	r3, [pc, #564]	; (800377c <_Z10Trajectoryv+0x684>)
 8003548:	edd3 7a00 	vldr	s15, [r3]
 800354c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003550:	ee17 0a90 	vmov	r0, s15
 8003554:	f7fc fff8 	bl	8000548 <__aeabi_f2d>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4620      	mov	r0, r4
 800355e:	4629      	mov	r1, r5
 8003560:	f7fc fe94 	bl	800028c <__adddf3>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4614      	mov	r4, r2
 800356a:	461d      	mov	r5, r3
 800356c:	4b81      	ldr	r3, [pc, #516]	; (8003774 <_Z10Trajectoryv+0x67c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7fc ffe9 	bl	8000548 <__aeabi_f2d>
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	4b7f      	ldr	r3, [pc, #508]	; (8003778 <_Z10Trajectoryv+0x680>)
 800357c:	f7fd f83c 	bl	80005f8 <__aeabi_dmul>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4690      	mov	r8, r2
 8003586:	4699      	mov	r9, r3
 8003588:	4b79      	ldr	r3, [pc, #484]	; (8003770 <_Z10Trajectoryv+0x678>)
 800358a:	ed93 7a00 	vldr	s14, [r3]
 800358e:	4b76      	ldr	r3, [pc, #472]	; (8003768 <_Z10Trajectoryv+0x670>)
 8003590:	edd3 6a00 	vldr	s13, [r3]
 8003594:	4b75      	ldr	r3, [pc, #468]	; (800376c <_Z10Trajectoryv+0x674>)
 8003596:	edd3 7a00 	vldr	s15, [r3]
 800359a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800359e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035a2:	4b73      	ldr	r3, [pc, #460]	; (8003770 <_Z10Trajectoryv+0x678>)
 80035a4:	edd3 6a00 	vldr	s13, [r3]
 80035a8:	4b6f      	ldr	r3, [pc, #444]	; (8003768 <_Z10Trajectoryv+0x670>)
 80035aa:	ed93 6a00 	vldr	s12, [r3]
 80035ae:	4b6f      	ldr	r3, [pc, #444]	; (800376c <_Z10Trajectoryv+0x674>)
 80035b0:	edd3 7a00 	vldr	s15, [r3]
 80035b4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80035b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80035bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c0:	ee17 0a90 	vmov	r0, s15
 80035c4:	f7fc ffc0 	bl	8000548 <__aeabi_f2d>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4640      	mov	r0, r8
 80035ce:	4649      	mov	r1, r9
 80035d0:	f7fd f812 	bl	80005f8 <__aeabi_dmul>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4620      	mov	r0, r4
 80035da:	4629      	mov	r1, r5
 80035dc:	f7fc fe54 	bl	8000288 <__aeabi_dsub>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4614      	mov	r4, r2
 80035e6:	461d      	mov	r5, r3
 80035e8:	4b65      	ldr	r3, [pc, #404]	; (8003780 <_Z10Trajectoryv+0x688>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fc ffab 	bl	8000548 <__aeabi_f2d>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4620      	mov	r0, r4
 80035f8:	4629      	mov	r1, r5
 80035fa:	f7fc fe47 	bl	800028c <__adddf3>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	f7fd faef 	bl	8000be8 <__aeabi_d2f>
 800360a:	4603      	mov	r3, r0
 800360c:	4a5d      	ldr	r2, [pc, #372]	; (8003784 <_Z10Trajectoryv+0x68c>)
 800360e:	6013      	str	r3, [r2, #0]
			OutVelocity = Velocity-(Acceleration*(TimeinS-(timeFinal-Tb)));
 8003610:	4b5a      	ldr	r3, [pc, #360]	; (800377c <_Z10Trajectoryv+0x684>)
 8003612:	ed93 7a00 	vldr	s14, [r3]
 8003616:	4b56      	ldr	r3, [pc, #344]	; (8003770 <_Z10Trajectoryv+0x678>)
 8003618:	edd3 6a00 	vldr	s13, [r3]
 800361c:	4b52      	ldr	r3, [pc, #328]	; (8003768 <_Z10Trajectoryv+0x670>)
 800361e:	ed93 6a00 	vldr	s12, [r3]
 8003622:	4b52      	ldr	r3, [pc, #328]	; (800376c <_Z10Trajectoryv+0x674>)
 8003624:	edd3 7a00 	vldr	s15, [r3]
 8003628:	ee76 7a67 	vsub.f32	s15, s12, s15
 800362c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003630:	4b50      	ldr	r3, [pc, #320]	; (8003774 <_Z10Trajectoryv+0x67c>)
 8003632:	edd3 7a00 	vldr	s15, [r3]
 8003636:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800363a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800363e:	4b52      	ldr	r3, [pc, #328]	; (8003788 <_Z10Trajectoryv+0x690>)
 8003640:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = -Acceleration;
 8003644:	4b4b      	ldr	r3, [pc, #300]	; (8003774 <_Z10Trajectoryv+0x67c>)
 8003646:	edd3 7a00 	vldr	s15, [r3]
 800364a:	eef1 7a67 	vneg.f32	s15, s15
 800364e:	4b4f      	ldr	r3, [pc, #316]	; (800378c <_Z10Trajectoryv+0x694>)
 8003650:	edc3 7a00 	vstr	s15, [r3]
			K_P_V = 2.0;
 8003654:	4b4e      	ldr	r3, [pc, #312]	; (8003790 <_Z10Trajectoryv+0x698>)
 8003656:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800365a:	601a      	str	r2, [r3, #0]
			K_I_V = 0.215;
 800365c:	4b4d      	ldr	r3, [pc, #308]	; (8003794 <_Z10Trajectoryv+0x69c>)
 800365e:	4a4e      	ldr	r2, [pc, #312]	; (8003798 <_Z10Trajectoryv+0x6a0>)
 8003660:	601a      	str	r2, [r3, #0]
			K_D_V = 1.2;
 8003662:	4b4e      	ldr	r3, [pc, #312]	; (800379c <_Z10Trajectoryv+0x6a4>)
 8003664:	4a4e      	ldr	r2, [pc, #312]	; (80037a0 <_Z10Trajectoryv+0x6a8>)
 8003666:	601a      	str	r2, [r3, #0]
			ch = 3;
 8003668:	4b4e      	ldr	r3, [pc, #312]	; (80037a4 <_Z10Trajectoryv+0x6ac>)
 800366a:	2203      	movs	r2, #3
 800366c:	701a      	strb	r2, [r3, #0]
 800366e:	e025      	b.n	80036bc <_Z10Trajectoryv+0x5c4>
			}
		else if(TimeinS > timeFinal){
 8003670:	4b3f      	ldr	r3, [pc, #252]	; (8003770 <_Z10Trajectoryv+0x678>)
 8003672:	ed93 7a00 	vldr	s14, [r3]
 8003676:	4b3c      	ldr	r3, [pc, #240]	; (8003768 <_Z10Trajectoryv+0x670>)
 8003678:	edd3 7a00 	vldr	s15, [r3]
 800367c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003684:	dd1a      	ble.n	80036bc <_Z10Trajectoryv+0x5c4>
			OutPosition = Distance+Currentpos;
 8003686:	4b48      	ldr	r3, [pc, #288]	; (80037a8 <_Z10Trajectoryv+0x6b0>)
 8003688:	ed93 7a00 	vldr	s14, [r3]
 800368c:	4b3c      	ldr	r3, [pc, #240]	; (8003780 <_Z10Trajectoryv+0x688>)
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003696:	4b3b      	ldr	r3, [pc, #236]	; (8003784 <_Z10Trajectoryv+0x68c>)
 8003698:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = 0;
 800369c:	4b3b      	ldr	r3, [pc, #236]	; (800378c <_Z10Trajectoryv+0x694>)
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
			K_P_V = 2.5;
 80036a4:	4b3a      	ldr	r3, [pc, #232]	; (8003790 <_Z10Trajectoryv+0x698>)
 80036a6:	4a41      	ldr	r2, [pc, #260]	; (80037ac <_Z10Trajectoryv+0x6b4>)
 80036a8:	601a      	str	r2, [r3, #0]
			K_I_V = 0.2;
 80036aa:	4b3a      	ldr	r3, [pc, #232]	; (8003794 <_Z10Trajectoryv+0x69c>)
 80036ac:	4a40      	ldr	r2, [pc, #256]	; (80037b0 <_Z10Trajectoryv+0x6b8>)
 80036ae:	601a      	str	r2, [r3, #0]
			K_D_V = 1.4;
 80036b0:	4b3a      	ldr	r3, [pc, #232]	; (800379c <_Z10Trajectoryv+0x6a4>)
 80036b2:	4a40      	ldr	r2, [pc, #256]	; (80037b4 <_Z10Trajectoryv+0x6bc>)
 80036b4:	601a      	str	r2, [r3, #0]
			ch = 4;
 80036b6:	4b3b      	ldr	r3, [pc, #236]	; (80037a4 <_Z10Trajectoryv+0x6ac>)
 80036b8:	2204      	movs	r2, #4
 80036ba:	701a      	strb	r2, [r3, #0]
//			//Velocity = 1.04719755; // [From UART] Put Max Velo here
//			//Acceleration= 0.5;   // recieve frol UART
//			check = 50;
//		}
//		else
		if(Distance < 0){
 80036bc:	4b3a      	ldr	r3, [pc, #232]	; (80037a8 <_Z10Trajectoryv+0x6b0>)
 80036be:	edd3 7a00 	vldr	s15, [r3]
 80036c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ca:	d530      	bpl.n	800372e <_Z10Trajectoryv+0x636>
			//Velocity=-1.04719755; // [From UART] Put Max Velo here  (negative)
			//Velocity= -1 * Velocity;
			OutVelocity = OutVelocity * -1.0;
 80036cc:	4b2e      	ldr	r3, [pc, #184]	; (8003788 <_Z10Trajectoryv+0x690>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fc ff39 	bl	8000548 <__aeabi_f2d>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4692      	mov	sl, r2
 80036dc:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80036e0:	4650      	mov	r0, sl
 80036e2:	4659      	mov	r1, fp
 80036e4:	f7fd fa80 	bl	8000be8 <__aeabi_d2f>
 80036e8:	4603      	mov	r3, r0
 80036ea:	4a27      	ldr	r2, [pc, #156]	; (8003788 <_Z10Trajectoryv+0x690>)
 80036ec:	6013      	str	r3, [r2, #0]
			if(ch==4){
 80036ee:	4b2d      	ldr	r3, [pc, #180]	; (80037a4 <_Z10Trajectoryv+0x6ac>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d10b      	bne.n	800370e <_Z10Trajectoryv+0x616>
				OutPosition = Distance+Currentpos;
 80036f6:	4b2c      	ldr	r3, [pc, #176]	; (80037a8 <_Z10Trajectoryv+0x6b0>)
 80036f8:	ed93 7a00 	vldr	s14, [r3]
 80036fc:	4b20      	ldr	r3, [pc, #128]	; (8003780 <_Z10Trajectoryv+0x688>)
 80036fe:	edd3 7a00 	vldr	s15, [r3]
 8003702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003706:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <_Z10Trajectoryv+0x68c>)
 8003708:	edc3 7a00 	vstr	s15, [r3]
 800370c:	e00c      	b.n	8003728 <_Z10Trajectoryv+0x630>
			}
			else{
				OutPosition = (OutPosition * -1.0)+(2*Currentpos) ;
 800370e:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <_Z10Trajectoryv+0x688>)
 8003710:	edd3 7a00 	vldr	s15, [r3]
 8003714:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003718:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <_Z10Trajectoryv+0x68c>)
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003722:	4b18      	ldr	r3, [pc, #96]	; (8003784 <_Z10Trajectoryv+0x68c>)
 8003724:	edc3 7a00 	vstr	s15, [r3]
			}

		    //Acceleration= -0.5;   // recieve frol UART (negative)
		    check = 100;
 8003728:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <_Z10Trajectoryv+0x6c0>)
 800372a:	2264      	movs	r2, #100	; 0x64
 800372c:	701a      	strb	r2, [r3, #0]
		}

		////////=======>>> Tapezoidal==========//////////

		TimeinS = TimeinS + Dt;
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <_Z10Trajectoryv+0x678>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fc ff08 	bl	8000548 <__aeabi_f2d>
 8003738:	a309      	add	r3, pc, #36	; (adr r3, 8003760 <_Z10Trajectoryv+0x668>)
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	f7fc fda5 	bl	800028c <__adddf3>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4610      	mov	r0, r2
 8003748:	4619      	mov	r1, r3
 800374a:	f7fd fa4d 	bl	8000be8 <__aeabi_d2f>
 800374e:	4603      	mov	r3, r0
 8003750:	4a07      	ldr	r2, [pc, #28]	; (8003770 <_Z10Trajectoryv+0x678>)
 8003752:	6013      	str	r3, [r2, #0]
		//////<<< PID Tuning
		//OutVelocity = 0.523598775 ;
		//////>>> PID Tuning

		}
}
 8003754:	bf00      	nop
 8003756:	46bd      	mov	sp, r7
 8003758:	ecbd 8b04 	vpop	{d8-d9}
 800375c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003760:	47ae147b 	.word	0x47ae147b
 8003764:	3f847ae1 	.word	0x3f847ae1
 8003768:	200005f0 	.word	0x200005f0
 800376c:	200005ec 	.word	0x200005ec
 8003770:	200005f4 	.word	0x200005f4
 8003774:	200005dc 	.word	0x200005dc
 8003778:	3fe00000 	.word	0x3fe00000
 800377c:	200005d8 	.word	0x200005d8
 8003780:	200005f8 	.word	0x200005f8
 8003784:	200005e0 	.word	0x200005e0
 8003788:	200005e4 	.word	0x200005e4
 800378c:	200005e8 	.word	0x200005e8
 8003790:	2000076c 	.word	0x2000076c
 8003794:	20000770 	.word	0x20000770
 8003798:	3e5c28f6 	.word	0x3e5c28f6
 800379c:	20000774 	.word	0x20000774
 80037a0:	3f99999a 	.word	0x3f99999a
 80037a4:	20000788 	.word	0x20000788
 80037a8:	200005d4 	.word	0x200005d4
 80037ac:	40200000 	.word	0x40200000
 80037b0:	3e4ccccd 	.word	0x3e4ccccd
 80037b4:	3fb33333 	.word	0x3fb33333
 80037b8:	20000789 	.word	0x20000789
 80037bc:	00000000 	.word	0x00000000

080037c0 <_Z10Unwrappingv>:

//////////////////////// [Unwrapping] ///////////////////////
void Unwrapping(){
 80037c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037c4:	af00      	add	r7, sp, #0

	if(micros() - TimeUnwrap >= 10000){
 80037c6:	f000 fe21 	bl	800440c <_Z6microsv>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	494e      	ldr	r1, [pc, #312]	; (8003908 <_Z10Unwrappingv+0x148>)
 80037d0:	6809      	ldr	r1, [r1, #0]
 80037d2:	2000      	movs	r0, #0
 80037d4:	4688      	mov	r8, r1
 80037d6:	4681      	mov	r9, r0
 80037d8:	ebb2 0408 	subs.w	r4, r2, r8
 80037dc:	eb63 0509 	sbc.w	r5, r3, r9
 80037e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80037e4:	429c      	cmp	r4, r3
 80037e6:	f175 0300 	sbcs.w	r3, r5, #0
 80037ea:	bf2c      	ite	cs
 80037ec:	2301      	movcs	r3, #1
 80037ee:	2300      	movcc	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d07c      	beq.n	80038f0 <_Z10Unwrappingv+0x130>
		TimeUnwrap = micros();
 80037f6:	f000 fe09 	bl	800440c <_Z6microsv>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4b42      	ldr	r3, [pc, #264]	; (8003908 <_Z10Unwrappingv+0x148>)
 8003800:	601a      	str	r2, [r3, #0]
		Pn = BinPosXI * 0.006136;
 8003802:	4b42      	ldr	r3, [pc, #264]	; (800390c <_Z10Unwrappingv+0x14c>)
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fc fe8c 	bl	8000524 <__aeabi_i2d>
 800380c:	a33a      	add	r3, pc, #232	; (adr r3, 80038f8 <_Z10Unwrappingv+0x138>)
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	f7fc fef1 	bl	80005f8 <__aeabi_dmul>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4610      	mov	r0, r2
 800381c:	4619      	mov	r1, r3
 800381e:	f7fd f9e3 	bl	8000be8 <__aeabi_d2f>
 8003822:	4603      	mov	r3, r0
 8003824:	4a3a      	ldr	r2, [pc, #232]	; (8003910 <_Z10Unwrappingv+0x150>)
 8003826:	6013      	str	r3, [r2, #0]
		if(Pn-P_n <= -1*e){
 8003828:	4b39      	ldr	r3, [pc, #228]	; (8003910 <_Z10Unwrappingv+0x150>)
 800382a:	ed93 7a00 	vldr	s14, [r3]
 800382e:	4b39      	ldr	r3, [pc, #228]	; (8003914 <_Z10Unwrappingv+0x154>)
 8003830:	edd3 7a00 	vldr	s15, [r3]
 8003834:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003838:	4b37      	ldr	r3, [pc, #220]	; (8003918 <_Z10Unwrappingv+0x158>)
 800383a:	edd3 7a00 	vldr	s15, [r3]
 800383e:	eef1 7a67 	vneg.f32	s15, s15
 8003842:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384a:	d80b      	bhi.n	8003864 <_Z10Unwrappingv+0xa4>
			P0 = P_0 + P_max;
 800384c:	4b33      	ldr	r3, [pc, #204]	; (800391c <_Z10Unwrappingv+0x15c>)
 800384e:	ed93 7a00 	vldr	s14, [r3]
 8003852:	4b33      	ldr	r3, [pc, #204]	; (8003920 <_Z10Unwrappingv+0x160>)
 8003854:	edd3 7a00 	vldr	s15, [r3]
 8003858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800385c:	4b31      	ldr	r3, [pc, #196]	; (8003924 <_Z10Unwrappingv+0x164>)
 800385e:	edc3 7a00 	vstr	s15, [r3]
 8003862:	e01f      	b.n	80038a4 <_Z10Unwrappingv+0xe4>
		}
		else if(Pn - P_n >= e){
 8003864:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <_Z10Unwrappingv+0x150>)
 8003866:	ed93 7a00 	vldr	s14, [r3]
 800386a:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <_Z10Unwrappingv+0x154>)
 800386c:	edd3 7a00 	vldr	s15, [r3]
 8003870:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003874:	4b28      	ldr	r3, [pc, #160]	; (8003918 <_Z10Unwrappingv+0x158>)
 8003876:	edd3 7a00 	vldr	s15, [r3]
 800387a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003882:	db0b      	blt.n	800389c <_Z10Unwrappingv+0xdc>
			P0 = P_0 - P_max;
 8003884:	4b25      	ldr	r3, [pc, #148]	; (800391c <_Z10Unwrappingv+0x15c>)
 8003886:	ed93 7a00 	vldr	s14, [r3]
 800388a:	4b25      	ldr	r3, [pc, #148]	; (8003920 <_Z10Unwrappingv+0x160>)
 800388c:	edd3 7a00 	vldr	s15, [r3]
 8003890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003894:	4b23      	ldr	r3, [pc, #140]	; (8003924 <_Z10Unwrappingv+0x164>)
 8003896:	edc3 7a00 	vstr	s15, [r3]
 800389a:	e003      	b.n	80038a4 <_Z10Unwrappingv+0xe4>
		}
		else{
			P0 = P_0;
 800389c:	4b1f      	ldr	r3, [pc, #124]	; (800391c <_Z10Unwrappingv+0x15c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a20      	ldr	r2, [pc, #128]	; (8003924 <_Z10Unwrappingv+0x164>)
 80038a2:	6013      	str	r3, [r2, #0]
		}

		OutUnwrap = Pn + P0;
 80038a4:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <_Z10Unwrappingv+0x150>)
 80038a6:	ed93 7a00 	vldr	s14, [r3]
 80038aa:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <_Z10Unwrappingv+0x164>)
 80038ac:	edd3 7a00 	vldr	s15, [r3]
 80038b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b4:	4b1c      	ldr	r3, [pc, #112]	; (8003928 <_Z10Unwrappingv+0x168>)
 80038b6:	edc3 7a00 	vstr	s15, [r3]
		CurrentEn = BinPosXI * 0.00613592;
 80038ba:	4b14      	ldr	r3, [pc, #80]	; (800390c <_Z10Unwrappingv+0x14c>)
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fc fe30 	bl	8000524 <__aeabi_i2d>
 80038c4:	a30e      	add	r3, pc, #56	; (adr r3, 8003900 <_Z10Unwrappingv+0x140>)
 80038c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ca:	f7fc fe95 	bl	80005f8 <__aeabi_dmul>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4610      	mov	r0, r2
 80038d4:	4619      	mov	r1, r3
 80038d6:	f7fd f987 	bl	8000be8 <__aeabi_d2f>
 80038da:	4603      	mov	r3, r0
 80038dc:	4a13      	ldr	r2, [pc, #76]	; (800392c <_Z10Unwrappingv+0x16c>)
 80038de:	6013      	str	r3, [r2, #0]
		P_n = Pn;
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <_Z10Unwrappingv+0x150>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a0b      	ldr	r2, [pc, #44]	; (8003914 <_Z10Unwrappingv+0x154>)
 80038e6:	6013      	str	r3, [r2, #0]
		P_0 = P0;
 80038e8:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <_Z10Unwrappingv+0x164>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0b      	ldr	r2, [pc, #44]	; (800391c <_Z10Unwrappingv+0x15c>)
 80038ee:	6013      	str	r3, [r2, #0]
	}
}
 80038f0:	bf00      	nop
 80038f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038f6:	bf00      	nop
 80038f8:	f540895d 	.word	0xf540895d
 80038fc:	3f79220f 	.word	0x3f79220f
 8003900:	7bb1a72c 	.word	0x7bb1a72c
 8003904:	3f7921fa 	.word	0x3f7921fa
 8003908:	20000738 	.word	0x20000738
 800390c:	200005c0 	.word	0x200005c0
 8003910:	20000728 	.word	0x20000728
 8003914:	2000072c 	.word	0x2000072c
 8003918:	200001ec 	.word	0x200001ec
 800391c:	20000724 	.word	0x20000724
 8003920:	200001e8 	.word	0x200001e8
 8003924:	20000720 	.word	0x20000720
 8003928:	20000730 	.word	0x20000730
 800392c:	20000734 	.word	0x20000734

08003930 <_Z12Kalmanfilterv>:
	}
}


/////////////////////////// [Kalman Filter] ///////////////////////
void Kalmanfilter(){
 8003930:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003934:	b0d2      	sub	sp, #328	; 0x148
 8003936:	af00      	add	r7, sp, #0

	if(micros() - TimeStampKalman >= 10000){
 8003938:	f000 fd68 	bl	800440c <_Z6microsv>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4992      	ldr	r1, [pc, #584]	; (8003b8c <_Z12Kalmanfilterv+0x25c>)
 8003942:	6809      	ldr	r1, [r1, #0]
 8003944:	2000      	movs	r0, #0
 8003946:	4688      	mov	r8, r1
 8003948:	4681      	mov	r9, r0
 800394a:	ebb2 0408 	subs.w	r4, r2, r8
 800394e:	eb63 0509 	sbc.w	r5, r3, r9
 8003952:	f242 7310 	movw	r3, #10000	; 0x2710
 8003956:	429c      	cmp	r4, r3
 8003958:	f175 0300 	sbcs.w	r3, r5, #0
 800395c:	bf2c      	ite	cs
 800395e:	2301      	movcs	r3, #1
 8003960:	2300      	movcc	r3, #0
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 810a 	beq.w	8003b7e <_Z12Kalmanfilterv+0x24e>
		 TimeStampKalman = micros();
 800396a:	f000 fd4f 	bl	800440c <_Z6microsv>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4b86      	ldr	r3, [pc, #536]	; (8003b8c <_Z12Kalmanfilterv+0x25c>)
 8003974:	601a      	str	r2, [r3, #0]
	//if(millis() - TimeStampKalman >= 10){
	//	TimeStampKalman = millis();
		 ////////// Predict ////////////////////
		 Q = G*Q1*G.transpose();
 8003976:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800397a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800397e:	4a84      	ldr	r2, [pc, #528]	; (8003b90 <_Z12Kalmanfilterv+0x260>)
 8003980:	4984      	ldr	r1, [pc, #528]	; (8003b94 <_Z12Kalmanfilterv+0x264>)
 8003982:	4618      	mov	r0, r3
 8003984:	f001 f81a 	bl	80049bc <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>
 8003988:	4882      	ldr	r0, [pc, #520]	; (8003b94 <_Z12Kalmanfilterv+0x264>)
 800398a:	f001 f850 	bl	8004a2e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>
 800398e:	4602      	mov	r2, r0
 8003990:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003994:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800399e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80039a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80039a6:	f107 0114 	add.w	r1, r7, #20
 80039aa:	4618      	mov	r0, r3
 80039ac:	f001 f871 	bl	8004a92 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>
 80039b0:	463b      	mov	r3, r7
 80039b2:	4619      	mov	r1, r3
 80039b4:	4878      	ldr	r0, [pc, #480]	; (8003b98 <_Z12Kalmanfilterv+0x268>)
 80039b6:	f001 f883 	bl	8004ac0 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X = A*X1 ;
 80039ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80039be:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80039c2:	4a76      	ldr	r2, [pc, #472]	; (8003b9c <_Z12Kalmanfilterv+0x26c>)
 80039c4:	4976      	ldr	r1, [pc, #472]	; (8003ba0 <_Z12Kalmanfilterv+0x270>)
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 f889 	bl	8004ade <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 80039cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039d0:	4619      	mov	r1, r3
 80039d2:	4874      	ldr	r0, [pc, #464]	; (8003ba4 <_Z12Kalmanfilterv+0x274>)
 80039d4:	f001 f89a 	bl	8004b0c <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 P = A*O*A.transpose()+Q;
 80039d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039dc:	4a72      	ldr	r2, [pc, #456]	; (8003ba8 <_Z12Kalmanfilterv+0x278>)
 80039de:	4970      	ldr	r1, [pc, #448]	; (8003ba0 <_Z12Kalmanfilterv+0x270>)
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 f8a2 	bl	8004b2a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>
 80039e6:	486e      	ldr	r0, [pc, #440]	; (8003ba0 <_Z12Kalmanfilterv+0x270>)
 80039e8:	f001 f8b6 	bl	8004b58 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>
 80039ec:	4603      	mov	r3, r0
 80039ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80039f0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80039f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80039f8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80039fc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003a00:	4618      	mov	r0, r3
 8003a02:	f001 f8bc 	bl	8004b7e <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>
 8003a06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003a0a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a0e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8003a12:	4a61      	ldr	r2, [pc, #388]	; (8003b98 <_Z12Kalmanfilterv+0x268>)
 8003a14:	4618      	mov	r0, r3
 8003a16:	f001 f8c9 	bl	8004bac <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>
 8003a1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4862      	ldr	r0, [pc, #392]	; (8003bac <_Z12Kalmanfilterv+0x27c>)
 8003a22:	f001 f8e1 	bl	8004be8 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>

		 //////////////// Update /////////////////////
	     Z << OutUnwrap ;
 8003a26:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003a2a:	4a61      	ldr	r2, [pc, #388]	; (8003bb0 <_Z12Kalmanfilterv+0x280>)
 8003a2c:	4961      	ldr	r1, [pc, #388]	; (8003bb4 <_Z12Kalmanfilterv+0x284>)
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 feda 	bl	80047e8 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8003a34:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fee4 	bl	8004806 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
	//     Z << DiffVelo ;
		 K = (P*C.transpose())*(C*P*C.transpose()+R).inverse();
 8003a3e:	485e      	ldr	r0, [pc, #376]	; (8003bb8 <_Z12Kalmanfilterv+0x288>)
 8003a40:	f001 f8e1 	bl	8004c06 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a4a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003a4e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003a52:	4956      	ldr	r1, [pc, #344]	; (8003bac <_Z12Kalmanfilterv+0x27c>)
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 f8e9 	bl	8004c2c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>
 8003a5a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a5e:	4a53      	ldr	r2, [pc, #332]	; (8003bac <_Z12Kalmanfilterv+0x27c>)
 8003a60:	4955      	ldr	r1, [pc, #340]	; (8003bb8 <_Z12Kalmanfilterv+0x288>)
 8003a62:	4618      	mov	r0, r3
 8003a64:	f001 f8f9 	bl	8004c5a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003a68:	4853      	ldr	r0, [pc, #332]	; (8003bb8 <_Z12Kalmanfilterv+0x288>)
 8003a6a:	f001 f8cc 	bl	8004c06 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a74:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003a78:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003a7c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 f901 	bl	8004c88 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>
 8003a86:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003a8a:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8003a8e:	4a4b      	ldr	r2, [pc, #300]	; (8003bbc <_Z12Kalmanfilterv+0x28c>)
 8003a90:	4618      	mov	r0, r3
 8003a92:	f001 f910 	bl	8004cb6 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8003a96:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a9a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 f963 	bl	8004d6c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>
 8003aa6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003aaa:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003aae:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f001 f992 	bl	8004ddc <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>
 8003ab8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003abc:	4619      	mov	r1, r3
 8003abe:	4840      	ldr	r0, [pc, #256]	; (8003bc0 <_Z12Kalmanfilterv+0x290>)
 8003ac0:	f001 f9a3 	bl	8004e0a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X1 = X+K*(Z-C*X);
 8003ac4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003ac8:	4a36      	ldr	r2, [pc, #216]	; (8003ba4 <_Z12Kalmanfilterv+0x274>)
 8003aca:	493b      	ldr	r1, [pc, #236]	; (8003bb8 <_Z12Kalmanfilterv+0x288>)
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 f9ab 	bl	8004e28 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003ad2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003ad6:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8003ada:	4936      	ldr	r1, [pc, #216]	; (8003bb4 <_Z12Kalmanfilterv+0x284>)
 8003adc:	4618      	mov	r0, r3
 8003ade:	f001 f9ba 	bl	8004e56 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 8003ae2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003ae6:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8003aea:	4935      	ldr	r1, [pc, #212]	; (8003bc0 <_Z12Kalmanfilterv+0x290>)
 8003aec:	4618      	mov	r0, r3
 8003aee:	f001 f9ef 	bl	8004ed0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>
 8003af2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003af6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8003afa:	492a      	ldr	r1, [pc, #168]	; (8003ba4 <_Z12Kalmanfilterv+0x274>)
 8003afc:	4618      	mov	r0, r3
 8003afe:	f001 fa14 	bl	8004f2a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>
 8003b02:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b06:	4619      	mov	r1, r3
 8003b08:	4824      	ldr	r0, [pc, #144]	; (8003b9c <_Z12Kalmanfilterv+0x26c>)
 8003b0a:	f001 fa2c 	bl	8004f66 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>
		 O = (I-(K*C))*P;
 8003b0e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003b12:	4a29      	ldr	r2, [pc, #164]	; (8003bb8 <_Z12Kalmanfilterv+0x288>)
 8003b14:	492a      	ldr	r1, [pc, #168]	; (8003bc0 <_Z12Kalmanfilterv+0x290>)
 8003b16:	4618      	mov	r0, r3
 8003b18:	f001 fa34 	bl	8004f84 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b20:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003b24:	4927      	ldr	r1, [pc, #156]	; (8003bc4 <_Z12Kalmanfilterv+0x294>)
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 fa43 	bl	8004fb2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 8003b2c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8003b30:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8003b34:	4a1d      	ldr	r2, [pc, #116]	; (8003bac <_Z12Kalmanfilterv+0x27c>)
 8003b36:	4618      	mov	r0, r3
 8003b38:	f001 fa78 	bl	800502c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>
 8003b3c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8003b40:	4619      	mov	r1, r3
 8003b42:	4819      	ldr	r0, [pc, #100]	; (8003ba8 <_Z12Kalmanfilterv+0x278>)
 8003b44:	f001 fa89 	bl	800505a <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>

		 KalP = X(0,0);
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	4815      	ldr	r0, [pc, #84]	; (8003ba4 <_Z12Kalmanfilterv+0x274>)
 8003b4e:	f000 fef1 	bl	8004934 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8003b52:	4603      	mov	r3, r0
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1c      	ldr	r2, [pc, #112]	; (8003bc8 <_Z12Kalmanfilterv+0x298>)
 8003b58:	6013      	str	r3, [r2, #0]
		 KalV = X(1,0);
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	4811      	ldr	r0, [pc, #68]	; (8003ba4 <_Z12Kalmanfilterv+0x274>)
 8003b60:	f000 fee8 	bl	8004934 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8003b64:	4603      	mov	r3, r0
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a18      	ldr	r2, [pc, #96]	; (8003bcc <_Z12Kalmanfilterv+0x29c>)
 8003b6a:	6013      	str	r3, [r2, #0]
		 KalA = X(2,0);
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2102      	movs	r1, #2
 8003b70:	480c      	ldr	r0, [pc, #48]	; (8003ba4 <_Z12Kalmanfilterv+0x274>)
 8003b72:	f000 fedf 	bl	8004934 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8003b76:	4603      	mov	r3, r0
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a15      	ldr	r2, [pc, #84]	; (8003bd0 <_Z12Kalmanfilterv+0x2a0>)
 8003b7c:	6013      	str	r3, [r2, #0]
		 //runtime = micros()-TimeStampKalman;

	     //ErrPos[0] = TargetDeg - BinPosXI*0.006136;
	 }

}
 8003b7e:	bf00      	nop
 8003b80:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8003b84:	46bd      	mov	sp, r7
 8003b86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000604 	.word	0x20000604
 8003b90:	200001e4 	.word	0x200001e4
 8003b94:	200006c0 	.word	0x200006c0
 8003b98:	200006cc 	.word	0x200006cc
 8003b9c:	200006fc 	.word	0x200006fc
 8003ba0:	20000608 	.word	0x20000608
 8003ba4:	200006f0 	.word	0x200006f0
 8003ba8:	20000650 	.word	0x20000650
 8003bac:	2000062c 	.word	0x2000062c
 8003bb0:	20000730 	.word	0x20000730
 8003bb4:	200006a4 	.word	0x200006a4
 8003bb8:	200006b4 	.word	0x200006b4
 8003bbc:	2000069c 	.word	0x2000069c
 8003bc0:	200006a8 	.word	0x200006a8
 8003bc4:	20000674 	.word	0x20000674
 8003bc8:	20000714 	.word	0x20000714
 8003bcc:	20000718 	.word	0x20000718
 8003bd0:	2000071c 	.word	0x2000071c

08003bd4 <_Z11PIDPositionv>:

///////////////////// [PID cat cat Zero] /////////////////////////////
void PIDPosition(){
 8003bd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003bd8:	af00      	add	r7, sp, #0
	/*CrrntTime = micros();
	//DeltaTime = (CrrntTime - PreviTime) / 1000000.0; // seconds
	PreviTime = CrrntTime; // log previ here for next loop
	*/
	if(micros() - TimeStampPID_P >= 10000){
 8003bda:	f000 fc17 	bl	800440c <_Z6microsv>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4936      	ldr	r1, [pc, #216]	; (8003cbc <_Z11PIDPositionv+0xe8>)
 8003be4:	6809      	ldr	r1, [r1, #0]
 8003be6:	2000      	movs	r0, #0
 8003be8:	4688      	mov	r8, r1
 8003bea:	4681      	mov	r9, r0
 8003bec:	ebb2 0408 	subs.w	r4, r2, r8
 8003bf0:	eb63 0509 	sbc.w	r5, r3, r9
 8003bf4:	f242 7310 	movw	r3, #10000	; 0x2710
 8003bf8:	429c      	cmp	r4, r3
 8003bfa:	f175 0300 	sbcs.w	r3, r5, #0
 8003bfe:	bf2c      	ite	cs
 8003c00:	2301      	movcs	r3, #1
 8003c02:	2300      	movcc	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d055      	beq.n	8003cb6 <_Z11PIDPositionv+0xe2>
		TimeStampPID_P = micros();
 8003c0a:	f000 fbff 	bl	800440c <_Z6microsv>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4b2a      	ldr	r3, [pc, #168]	; (8003cbc <_Z11PIDPositionv+0xe8>)
 8003c14:	601a      	str	r2, [r3, #0]

	//if(millis() - TimeStampPID_P >= 10){
	//	TimeStampPID_P = millis();

		ErrPos[0] = OutPosition - KalP;
 8003c16:	4b2a      	ldr	r3, [pc, #168]	; (8003cc0 <_Z11PIDPositionv+0xec>)
 8003c18:	ed93 7a00 	vldr	s14, [r3]
 8003c1c:	4b29      	ldr	r3, [pc, #164]	; (8003cc4 <_Z11PIDPositionv+0xf0>)
 8003c1e:	edd3 7a00 	vldr	s15, [r3]
 8003c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c26:	4b28      	ldr	r3, [pc, #160]	; (8003cc8 <_Z11PIDPositionv+0xf4>)
 8003c28:	edc3 7a00 	vstr	s15, [r3]
	//	ErrPos[0] = OutVelocity - KalV;
		sumError = sumError + ErrPos[0];
 8003c2c:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <_Z11PIDPositionv+0xf4>)
 8003c2e:	ed93 7a00 	vldr	s14, [r3]
 8003c32:	4b26      	ldr	r3, [pc, #152]	; (8003ccc <_Z11PIDPositionv+0xf8>)
 8003c34:	edd3 7a00 	vldr	s15, [r3]
 8003c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c3c:	4b23      	ldr	r3, [pc, #140]	; (8003ccc <_Z11PIDPositionv+0xf8>)
 8003c3e:	edc3 7a00 	vstr	s15, [r3]

		Propo = K_P * ErrPos[0];
 8003c42:	4b21      	ldr	r3, [pc, #132]	; (8003cc8 <_Z11PIDPositionv+0xf4>)
 8003c44:	ed93 7a00 	vldr	s14, [r3]
 8003c48:	4b21      	ldr	r3, [pc, #132]	; (8003cd0 <_Z11PIDPositionv+0xfc>)
 8003c4a:	edd3 7a00 	vldr	s15, [r3]
 8003c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c52:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <_Z11PIDPositionv+0x100>)
 8003c54:	edc3 7a00 	vstr	s15, [r3]

		Integral = K_I * sumError; // Integral -Newton-Leibniz
 8003c58:	4b1f      	ldr	r3, [pc, #124]	; (8003cd8 <_Z11PIDPositionv+0x104>)
 8003c5a:	ed93 7a00 	vldr	s14, [r3]
 8003c5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <_Z11PIDPositionv+0xf8>)
 8003c60:	edd3 7a00 	vldr	s15, [r3]
 8003c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c68:	4b1c      	ldr	r3, [pc, #112]	; (8003cdc <_Z11PIDPositionv+0x108>)
 8003c6a:	edc3 7a00 	vstr	s15, [r3]

		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 8003c6e:	4b16      	ldr	r3, [pc, #88]	; (8003cc8 <_Z11PIDPositionv+0xf4>)
 8003c70:	ed93 7a00 	vldr	s14, [r3]
 8003c74:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <_Z11PIDPositionv+0xf4>)
 8003c76:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c7e:	4b18      	ldr	r3, [pc, #96]	; (8003ce0 <_Z11PIDPositionv+0x10c>)
 8003c80:	edd3 7a00 	vldr	s15, [r3]
 8003c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c88:	4b16      	ldr	r3, [pc, #88]	; (8003ce4 <_Z11PIDPositionv+0x110>)
 8003c8a:	edc3 7a00 	vstr	s15, [r3]

		ufromposit = Propo + Integral + Derivate;
 8003c8e:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <_Z11PIDPositionv+0x100>)
 8003c90:	ed93 7a00 	vldr	s14, [r3]
 8003c94:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <_Z11PIDPositionv+0x108>)
 8003c96:	edd3 7a00 	vldr	s15, [r3]
 8003c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c9e:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <_Z11PIDPositionv+0x110>)
 8003ca0:	edd3 7a00 	vldr	s15, [r3]
 8003ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ca8:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <_Z11PIDPositionv+0x114>)
 8003caa:	edc3 7a00 	vstr	s15, [r3]

		//u_contr = ufromposit ;
		ErrPos[1] = ErrPos[0]; // log previous error
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <_Z11PIDPositionv+0xf4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a05      	ldr	r2, [pc, #20]	; (8003cc8 <_Z11PIDPositionv+0xf4>)
 8003cb4:	6053      	str	r3, [r2, #4]
	}
}
 8003cb6:	bf00      	nop
 8003cb8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003cbc:	2000073c 	.word	0x2000073c
 8003cc0:	200005e0 	.word	0x200005e0
 8003cc4:	20000714 	.word	0x20000714
 8003cc8:	20000744 	.word	0x20000744
 8003ccc:	20000750 	.word	0x20000750
 8003cd0:	200001f0 	.word	0x200001f0
 8003cd4:	20000754 	.word	0x20000754
 8003cd8:	200001f4 	.word	0x200001f4
 8003cdc:	20000758 	.word	0x20000758
 8003ce0:	200001f8 	.word	0x200001f8
 8003ce4:	2000075c 	.word	0x2000075c
 8003ce8:	2000074c 	.word	0x2000074c

08003cec <_Z11PIDVelocityv>:

void PIDVelocity(){
 8003cec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003cf0:	af00      	add	r7, sp, #0

	if(micros() - TimeStampPID_V >= 10000){
 8003cf2:	f000 fb8b 	bl	800440c <_Z6microsv>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4930      	ldr	r1, [pc, #192]	; (8003dbc <_Z11PIDVelocityv+0xd0>)
 8003cfc:	6809      	ldr	r1, [r1, #0]
 8003cfe:	2000      	movs	r0, #0
 8003d00:	4688      	mov	r8, r1
 8003d02:	4681      	mov	r9, r0
 8003d04:	ebb2 0408 	subs.w	r4, r2, r8
 8003d08:	eb63 0509 	sbc.w	r5, r3, r9
 8003d0c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003d10:	429c      	cmp	r4, r3
 8003d12:	f175 0300 	sbcs.w	r3, r5, #0
 8003d16:	bf2c      	ite	cs
 8003d18:	2301      	movcs	r3, #1
 8003d1a:	2300      	movcc	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d048      	beq.n	8003db4 <_Z11PIDVelocityv+0xc8>
		TimeStampPID_V = micros();
 8003d22:	f000 fb73 	bl	800440c <_Z6microsv>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <_Z11PIDVelocityv+0xd0>)
 8003d2c:	601a      	str	r2, [r3, #0]
		Vcontr[1] = Vcontr[0] ;
		ErrVelo[2] = ErrVelo[1] ;
		ErrVelo[1] = ErrVelo[0] ;
		*/

		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 8003d2e:	4b24      	ldr	r3, [pc, #144]	; (8003dc0 <_Z11PIDVelocityv+0xd4>)
 8003d30:	ed93 7a00 	vldr	s14, [r3]
 8003d34:	4b23      	ldr	r3, [pc, #140]	; (8003dc4 <_Z11PIDVelocityv+0xd8>)
 8003d36:	edd3 7a00 	vldr	s15, [r3]
 8003d3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d3e:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <_Z11PIDVelocityv+0xdc>)
 8003d40:	edd3 7a00 	vldr	s15, [r3]
 8003d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d48:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <_Z11PIDVelocityv+0xe0>)
 8003d4a:	edc3 7a00 	vstr	s15, [r3]
		SumAll = SumAll + ErrVelo[0];
 8003d4e:	4b1f      	ldr	r3, [pc, #124]	; (8003dcc <_Z11PIDVelocityv+0xe0>)
 8003d50:	ed93 7a00 	vldr	s14, [r3]
 8003d54:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <_Z11PIDVelocityv+0xe4>)
 8003d56:	edd3 7a00 	vldr	s15, [r3]
 8003d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	; (8003dd0 <_Z11PIDVelocityv+0xe4>)
 8003d60:	edc3 7a00 	vstr	s15, [r3]

		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+(K_D * (ErrVelo[0]-ErrVelo[1])) ;
 8003d64:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <_Z11PIDVelocityv+0xe0>)
 8003d66:	ed93 7a00 	vldr	s14, [r3]
 8003d6a:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <_Z11PIDVelocityv+0xe8>)
 8003d6c:	edd3 7a00 	vldr	s15, [r3]
 8003d70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d74:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <_Z11PIDVelocityv+0xec>)
 8003d76:	edd3 6a00 	vldr	s13, [r3]
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <_Z11PIDVelocityv+0xe4>)
 8003d7c:	edd3 7a00 	vldr	s15, [r3]
 8003d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d88:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <_Z11PIDVelocityv+0xe0>)
 8003d8a:	edd3 6a00 	vldr	s13, [r3]
 8003d8e:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <_Z11PIDVelocityv+0xe0>)
 8003d90:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d94:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003d98:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <_Z11PIDVelocityv+0xf0>)
 8003d9a:	edd3 7a00 	vldr	s15, [r3]
 8003d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003da6:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <_Z11PIDVelocityv+0xf4>)
 8003da8:	edc3 7a00 	vstr	s15, [r3]
		ErrVelo[1] = ErrVelo[0]; // log previous error
 8003dac:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <_Z11PIDVelocityv+0xe0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a06      	ldr	r2, [pc, #24]	; (8003dcc <_Z11PIDVelocityv+0xe0>)
 8003db2:	6053      	str	r3, [r2, #4]
		}
}
 8003db4:	bf00      	nop
 8003db6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003dba:	bf00      	nop
 8003dbc:	2000077c 	.word	0x2000077c
 8003dc0:	200005e4 	.word	0x200005e4
 8003dc4:	2000074c 	.word	0x2000074c
 8003dc8:	20000718 	.word	0x20000718
 8003dcc:	20000760 	.word	0x20000760
 8003dd0:	20000778 	.word	0x20000778
 8003dd4:	2000076c 	.word	0x2000076c
 8003dd8:	20000770 	.word	0x20000770
 8003ddc:	200001f8 	.word	0x200001f8
 8003de0:	20000780 	.word	0x20000780
 8003de4:	00000000 	.word	0x00000000

08003de8 <_Z11controlloopv>:

void controlloop(){
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
	static uint16_t counter_ctl = 0;
	uint16_t FinalBitX = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	80fb      	strh	r3, [r7, #6]
	FinalBitX = round(Finalposition * 512 / M_PI);
 8003df2:	4b67      	ldr	r3, [pc, #412]	; (8003f90 <_Z11controlloopv+0x1a8>)
 8003df4:	edd3 7a00 	vldr	s15, [r3]
 8003df8:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8003f94 <_Z11controlloopv+0x1ac>
 8003dfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e00:	ee17 0a90 	vmov	r0, s15
 8003e04:	f7fc fba0 	bl	8000548 <__aeabi_f2d>
 8003e08:	a35b      	add	r3, pc, #364	; (adr r3, 8003f78 <_Z11controlloopv+0x190>)
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	f7fc fd1d 	bl	800084c <__aeabi_ddiv>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	ec43 2b17 	vmov	d7, r2, r3
 8003e1a:	eeb0 0a47 	vmov.f32	s0, s14
 8003e1e:	eef0 0a67 	vmov.f32	s1, s15
 8003e22:	f019 fa35 	bl	801d290 <round>
 8003e26:	ec53 2b10 	vmov	r2, r3, d0
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	f7fc febb 	bl	8000ba8 <__aeabi_d2uiz>
 8003e32:	4603      	mov	r3, r0
 8003e34:	80fb      	strh	r3, [r7, #6]
	///// Conv FinalPos back to bit1024:
	///// FinalPos x (Pi / 180) x (1024/360) ==> FinalPos x 512/pi


	if( abs( Finalposition - KalP) < 0.001 && abs(KalV) < 0.0005){
 8003e36:	4b56      	ldr	r3, [pc, #344]	; (8003f90 <_Z11controlloopv+0x1a8>)
 8003e38:	ed93 7a00 	vldr	s14, [r3]
 8003e3c:	4b56      	ldr	r3, [pc, #344]	; (8003f98 <_Z11controlloopv+0x1b0>)
 8003e3e:	edd3 7a00 	vldr	s15, [r3]
 8003e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e46:	eeb0 0a67 	vmov.f32	s0, s15
 8003e4a:	f7fd f89f 	bl	8000f8c <_ZSt3absf>
 8003e4e:	ee10 3a10 	vmov	r3, s0
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc fb78 	bl	8000548 <__aeabi_f2d>
 8003e58:	a349      	add	r3, pc, #292	; (adr r3, 8003f80 <_Z11controlloopv+0x198>)
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	f7fc fe3d 	bl	8000adc <__aeabi_dcmplt>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d015      	beq.n	8003e94 <_Z11controlloopv+0xac>
 8003e68:	4b4c      	ldr	r3, [pc, #304]	; (8003f9c <_Z11controlloopv+0x1b4>)
 8003e6a:	edd3 7a00 	vldr	s15, [r3]
 8003e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e72:	f7fd f88b 	bl	8000f8c <_ZSt3absf>
 8003e76:	ee10 3a10 	vmov	r3, s0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fc fb64 	bl	8000548 <__aeabi_f2d>
 8003e80:	a341      	add	r3, pc, #260	; (adr r3, 8003f88 <_Z11controlloopv+0x1a0>)
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f7fc fe29 	bl	8000adc <__aeabi_dcmplt>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <_Z11controlloopv+0xac>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <_Z11controlloopv+0xae>
 8003e94:	2300      	movs	r3, #0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d023      	beq.n	8003ee2 <_Z11controlloopv+0xfa>
		PWMOut = 0;
 8003e9a:	4b41      	ldr	r3, [pc, #260]	; (8003fa0 <_Z11controlloopv+0x1b8>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	801a      	strh	r2, [r3, #0]
		check = 8;
 8003ea0:	4b40      	ldr	r3, [pc, #256]	; (8003fa4 <_Z11controlloopv+0x1bc>)
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	701a      	strb	r2, [r3, #0]
		ch = 5;
 8003ea6:	4b40      	ldr	r3, [pc, #256]	; (8003fa8 <_Z11controlloopv+0x1c0>)
 8003ea8:	2205      	movs	r2, #5
 8003eaa:	701a      	strb	r2, [r3, #0]

		ErrPos[0]=0;
 8003eac:	4b3f      	ldr	r3, [pc, #252]	; (8003fac <_Z11controlloopv+0x1c4>)
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
		ErrPos[1]=0;
 8003eb4:	4b3d      	ldr	r3, [pc, #244]	; (8003fac <_Z11controlloopv+0x1c4>)
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	605a      	str	r2, [r3, #4]
		ErrVelo[0]=0;
 8003ebc:	4b3c      	ldr	r3, [pc, #240]	; (8003fb0 <_Z11controlloopv+0x1c8>)
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
		ErrVelo[1]=0;
 8003ec4:	4b3a      	ldr	r3, [pc, #232]	; (8003fb0 <_Z11controlloopv+0x1c8>)
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	605a      	str	r2, [r3, #4]
		flagNewpos = 0;
 8003ecc:	4b39      	ldr	r3, [pc, #228]	; (8003fb4 <_Z11controlloopv+0x1cc>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
		flag_finishTra = 1;
 8003ed2:	4b39      	ldr	r3, [pc, #228]	; (8003fb8 <_Z11controlloopv+0x1d0>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	701a      	strb	r2, [r3, #0]
		TimeinS = 0;
 8003ed8:	4b38      	ldr	r3, [pc, #224]	; (8003fbc <_Z11controlloopv+0x1d4>)
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
		PIDVelocity();
		MotDrvCytron();
	}


}
 8003ee0:	e043      	b.n	8003f6a <_Z11controlloopv+0x182>
	else if( abs(FinalBitX- BinPosXI) <= 1){
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	4a36      	ldr	r2, [pc, #216]	; (8003fc0 <_Z11controlloopv+0x1d8>)
 8003ee6:	8812      	ldrh	r2, [r2, #0]
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bfb8      	it	lt
 8003eee:	425b      	neglt	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	dc34      	bgt.n	8003f5e <_Z11controlloopv+0x176>
		counter_ctl++;
 8003ef4:	4b33      	ldr	r3, [pc, #204]	; (8003fc4 <_Z11controlloopv+0x1dc>)
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	4b31      	ldr	r3, [pc, #196]	; (8003fc4 <_Z11controlloopv+0x1dc>)
 8003efe:	801a      	strh	r2, [r3, #0]
		check = 9;
 8003f00:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <_Z11controlloopv+0x1bc>)
 8003f02:	2209      	movs	r2, #9
 8003f04:	701a      	strb	r2, [r3, #0]
		if(counter_ctl >= 800){
 8003f06:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <_Z11controlloopv+0x1dc>)
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003f0e:	d32c      	bcc.n	8003f6a <_Z11controlloopv+0x182>
		counter_ctl = 0;
 8003f10:	4b2c      	ldr	r3, [pc, #176]	; (8003fc4 <_Z11controlloopv+0x1dc>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	801a      	strh	r2, [r3, #0]
		PWMOut = 0;
 8003f16:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <_Z11controlloopv+0x1b8>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	801a      	strh	r2, [r3, #0]
		check = 10;
 8003f1c:	4b21      	ldr	r3, [pc, #132]	; (8003fa4 <_Z11controlloopv+0x1bc>)
 8003f1e:	220a      	movs	r2, #10
 8003f20:	701a      	strb	r2, [r3, #0]
		ch = 5;
 8003f22:	4b21      	ldr	r3, [pc, #132]	; (8003fa8 <_Z11controlloopv+0x1c0>)
 8003f24:	2205      	movs	r2, #5
 8003f26:	701a      	strb	r2, [r3, #0]
		ErrPos[0]=0;
 8003f28:	4b20      	ldr	r3, [pc, #128]	; (8003fac <_Z11controlloopv+0x1c4>)
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
		ErrPos[1]=0;
 8003f30:	4b1e      	ldr	r3, [pc, #120]	; (8003fac <_Z11controlloopv+0x1c4>)
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	605a      	str	r2, [r3, #4]
		ErrVelo[0]=0;
 8003f38:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <_Z11controlloopv+0x1c8>)
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
		ErrVelo[1]=0;
 8003f40:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <_Z11controlloopv+0x1c8>)
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	605a      	str	r2, [r3, #4]
		flagNewpos = 0;
 8003f48:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <_Z11controlloopv+0x1cc>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
		flag_finishTra = 1;
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <_Z11controlloopv+0x1d0>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	701a      	strb	r2, [r3, #0]
		TimeinS = 0;
 8003f54:	4b19      	ldr	r3, [pc, #100]	; (8003fbc <_Z11controlloopv+0x1d4>)
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
}
 8003f5c:	e005      	b.n	8003f6a <_Z11controlloopv+0x182>
		PIDPosition();
 8003f5e:	f7ff fe39 	bl	8003bd4 <_Z11PIDPositionv>
		PIDVelocity();
 8003f62:	f7ff fec3 	bl	8003cec <_Z11PIDVelocityv>
		MotDrvCytron();
 8003f66:	f000 f82f 	bl	8003fc8 <_Z12MotDrvCytronv>
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	f3af 8000 	nop.w
 8003f78:	54442d18 	.word	0x54442d18
 8003f7c:	400921fb 	.word	0x400921fb
 8003f80:	d2f1a9fc 	.word	0xd2f1a9fc
 8003f84:	3f50624d 	.word	0x3f50624d
 8003f88:	d2f1a9fc 	.word	0xd2f1a9fc
 8003f8c:	3f40624d 	.word	0x3f40624d
 8003f90:	200005d0 	.word	0x200005d0
 8003f94:	44000000 	.word	0x44000000
 8003f98:	20000714 	.word	0x20000714
 8003f9c:	20000718 	.word	0x20000718
 8003fa0:	200005c4 	.word	0x200005c4
 8003fa4:	20000789 	.word	0x20000789
 8003fa8:	20000788 	.word	0x20000788
 8003fac:	20000744 	.word	0x20000744
 8003fb0:	20000760 	.word	0x20000760
 8003fb4:	200005fc 	.word	0x200005fc
 8003fb8:	20000554 	.word	0x20000554
 8003fbc:	200005f4 	.word	0x200005f4
 8003fc0:	200005c0 	.word	0x200005c0
 8003fc4:	20000836 	.word	0x20000836

08003fc8 <_Z12MotDrvCytronv>:

void MotDrvCytron(){
 8003fc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003fcc:	af00      	add	r7, sp, #0
	//   direction chk
	//if(u_contr > 0){mot_dirctn= 0;}
	//else if(u_contr < 0) {mot_dirctn = 1;}
	//else{PWMOut = 0;}

	if(micros() - TimeDrive >= 10000){
 8003fce:	f000 fa1d 	bl	800440c <_Z6microsv>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4932      	ldr	r1, [pc, #200]	; (80040a0 <_Z12MotDrvCytronv+0xd8>)
 8003fd8:	6809      	ldr	r1, [r1, #0]
 8003fda:	2000      	movs	r0, #0
 8003fdc:	4688      	mov	r8, r1
 8003fde:	4681      	mov	r9, r0
 8003fe0:	ebb2 0408 	subs.w	r4, r2, r8
 8003fe4:	eb63 0509 	sbc.w	r5, r3, r9
 8003fe8:	f242 7310 	movw	r3, #10000	; 0x2710
 8003fec:	429c      	cmp	r4, r3
 8003fee:	f175 0300 	sbcs.w	r3, r5, #0
 8003ff2:	bf2c      	ite	cs
 8003ff4:	2301      	movcs	r3, #1
 8003ff6:	2300      	movcc	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d049      	beq.n	8004092 <_Z12MotDrvCytronv+0xca>
			TimeDrive = micros();
 8003ffe:	f000 fa05 	bl	800440c <_Z6microsv>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4b26      	ldr	r3, [pc, #152]	; (80040a0 <_Z12MotDrvCytronv+0xd8>)
 8004008:	601a      	str	r2, [r3, #0]
			u_contr = u_contr * 833.3;
 800400a:	4b26      	ldr	r3, [pc, #152]	; (80040a4 <_Z12MotDrvCytronv+0xdc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fc fa9a 	bl	8000548 <__aeabi_f2d>
 8004014:	a320      	add	r3, pc, #128	; (adr r3, 8004098 <_Z12MotDrvCytronv+0xd0>)
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	f7fc faed 	bl	80005f8 <__aeabi_dmul>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4610      	mov	r0, r2
 8004024:	4619      	mov	r1, r3
 8004026:	f7fc fddf 	bl	8000be8 <__aeabi_d2f>
 800402a:	4603      	mov	r3, r0
 800402c:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <_Z12MotDrvCytronv+0xdc>)
 800402e:	6013      	str	r3, [r2, #0]
			// u_contr = 2500;
			if(u_contr > 0){
 8004030:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <_Z12MotDrvCytronv+0xdc>)
 8004032:	edd3 7a00 	vldr	s15, [r3]
 8004036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800403a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403e:	dd03      	ble.n	8004048 <_Z12MotDrvCytronv+0x80>
				mot_dirctn= 1;
 8004040:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <_Z12MotDrvCytronv+0xe0>)
 8004042:	2201      	movs	r2, #1
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	e00e      	b.n	8004066 <_Z12MotDrvCytronv+0x9e>
			}
			else if(u_contr < 0) {
 8004048:	4b16      	ldr	r3, [pc, #88]	; (80040a4 <_Z12MotDrvCytronv+0xdc>)
 800404a:	edd3 7a00 	vldr	s15, [r3]
 800404e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004056:	d503      	bpl.n	8004060 <_Z12MotDrvCytronv+0x98>
				mot_dirctn = 0;
 8004058:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <_Z12MotDrvCytronv+0xe0>)
 800405a:	2200      	movs	r2, #0
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	e002      	b.n	8004066 <_Z12MotDrvCytronv+0x9e>
			}
			else{
				PWMOut = 0;
 8004060:	4b12      	ldr	r3, [pc, #72]	; (80040ac <_Z12MotDrvCytronv+0xe4>)
 8004062:	2200      	movs	r2, #0
 8004064:	801a      	strh	r2, [r3, #0]
			}
	// speed
	PWMOut= (int)fabsf(u_contr); // Absolute int
 8004066:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <_Z12MotDrvCytronv+0xdc>)
 8004068:	edd3 7a00 	vldr	s15, [r3]
 800406c:	eef0 7ae7 	vabs.f32	s15, s15
 8004070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004074:	ee17 3a90 	vmov	r3, s15
 8004078:	b29a      	uxth	r2, r3
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <_Z12MotDrvCytronv+0xe4>)
 800407c:	801a      	strh	r2, [r3, #0]
	if(PWMOut > 5000){PWMOut = 5000;} // saturate 50% gear 1:6 - 120rpm => 10rpm
 800407e:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <_Z12MotDrvCytronv+0xe4>)
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d903      	bls.n	8004092 <_Z12MotDrvCytronv+0xca>
 800408a:	4b08      	ldr	r3, [pc, #32]	; (80040ac <_Z12MotDrvCytronv+0xe4>)
 800408c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004090:	801a      	strh	r2, [r3, #0]
	//if(PWMOut < 1600 ){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
	//&& fabsf(ErrPos[0]) >= 4
	//if(flag_finishTra == 1){PWMOut = 0;}
	}
}
 8004092:	bf00      	nop
 8004094:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004098:	66666666 	.word	0x66666666
 800409c:	408a0a66 	.word	0x408a0a66
 80040a0:	20000784 	.word	0x20000784
 80040a4:	20000780 	.word	0x20000780
 80040a8:	200005cc 	.word	0x200005cc
 80040ac:	200005c4 	.word	0x200005c4

080040b0 <_Z13GraytoBinarioth>:

///////////////////// [Abs Encoder I2C] ////////////////////////////////////////////
////////// [Absolute Encoder] ////////////////////////////////////////////
uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	460a      	mov	r2, r1
 80040ba:	80fb      	strh	r3, [r7, #6]
 80040bc:	4613      	mov	r3, r2
 80040be:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	797b      	ldrb	r3, [r7, #5]
 80040c8:	3b01      	subs	r3, #1
 80040ca:	fa42 f303 	asr.w	r3, r2, r3
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 80040d6:	2301      	movs	r3, #1
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	797b      	ldrb	r3, [r7, #5]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	429a      	cmp	r2, r3
 80040e0:	da1e      	bge.n	8004120 <_Z13GraytoBinarioth+0x70>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 80040e2:	8afb      	ldrh	r3, [r7, #22]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 80040ea:	88fa      	ldrh	r2, [r7, #6]
 80040ec:	7979      	ldrb	r1, [r7, #5]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	3301      	adds	r3, #1
 80040f2:	1acb      	subs	r3, r1, r3
 80040f4:	fa42 f303 	asr.w	r3, r2, r3
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	429a      	cmp	r2, r3
 8004104:	d103      	bne.n	800410e <_Z13GraytoBinarioth+0x5e>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 8004106:	8afb      	ldrh	r3, [r7, #22]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	82fb      	strh	r3, [r7, #22]
 800410c:	e004      	b.n	8004118 <_Z13GraytoBinarioth+0x68>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 800410e:	8afb      	ldrh	r3, [r7, #22]
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	b29b      	uxth	r3, r3
 8004114:	3301      	adds	r3, #1
 8004116:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	3301      	adds	r3, #1
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	e7dc      	b.n	80040da <_Z13GraytoBinarioth+0x2a>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 8004120:	8afb      	ldrh	r3, [r7, #22]
}
 8004122:	4618      	mov	r0, r3
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <_Z14IOExpenderInitv>:

void IOExpenderInit() {// call when start system
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Xetting,
 8004136:	2364      	movs	r3, #100	; 0x64
 8004138:	9302      	str	r3, [sp, #8]
 800413a:	2316      	movs	r3, #22
 800413c:	9301      	str	r3, [sp, #4]
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <_Z14IOExpenderInitv+0x24>)
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	2301      	movs	r3, #1
 8004144:	2200      	movs	r2, #0
 8004146:	2140      	movs	r1, #64	; 0x40
 8004148:	4803      	ldr	r0, [pc, #12]	; (8004158 <_Z14IOExpenderInitv+0x28>)
 800414a:	f013 fc9d 	bl	8017a88 <HAL_I2C_Mem_Write>
			0x16, 100);

}
 800414e:	bf00      	nop
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000218 	.word	0x20000218
 8004158:	200002c4 	.word	0x200002c4

0800415c <_Z14AbsEncI2CReadxPh>:

void AbsEncI2CReadx(uint8_t *RawRAB){
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af04      	add	r7, sp, #16
 8004162:	6078      	str	r0, [r7, #4]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 8004164:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <_Z14AbsEncI2CReadxPh+0x94>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <_Z14AbsEncI2CReadxPh+0x20>
 800416c:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <_Z14AbsEncI2CReadxPh+0x98>)
 800416e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b20      	cmp	r3, #32
 8004176:	d101      	bne.n	800417c <_Z14AbsEncI2CReadxPh+0x20>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <_Z14AbsEncI2CReadxPh+0x22>
 800417c:	2300      	movs	r3, #0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d032      	beq.n	80041e8 <_Z14AbsEncI2CReadxPh+0x8c>

		HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 8004182:	2364      	movs	r3, #100	; 0x64
 8004184:	9302      	str	r3, [sp, #8]
 8004186:	2302      	movs	r3, #2
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	2301      	movs	r3, #1
 8004190:	2212      	movs	r2, #18
 8004192:	2140      	movs	r1, #64	; 0x40
 8004194:	4817      	ldr	r0, [pc, #92]	; (80041f4 <_Z14AbsEncI2CReadxPh+0x98>)
 8004196:	f013 fd71 	bl	8017c7c <HAL_I2C_Mem_Read>
								RawRAB, 2, 100);

		GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 800419a:	4b17      	ldr	r3, [pc, #92]	; (80041f8 <_Z14AbsEncI2CReadxPh+0x9c>)
 800419c:	785b      	ldrb	r3, [r3, #1]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	b21a      	sxth	r2, r3
 80041a2:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <_Z14AbsEncI2CReadxPh+0x9c>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b21b      	sxth	r3, r3
 80041a8:	4313      	orrs	r3, r2
 80041aa:	b21b      	sxth	r3, r3
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	4b13      	ldr	r3, [pc, #76]	; (80041fc <_Z14AbsEncI2CReadxPh+0xa0>)
 80041b0:	801a      	strh	r2, [r3, #0]
		// 1023- to reverse
		BinPosXI = 1023 - (GraytoBinario(GrayCBitXI, 10) + POSOFFSET) ;//
 80041b2:	4b12      	ldr	r3, [pc, #72]	; (80041fc <_Z14AbsEncI2CReadxPh+0xa0>)
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	210a      	movs	r1, #10
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff ff79 	bl	80040b0 <_Z13GraytoBinarioth>
 80041be:	4603      	mov	r3, r0
 80041c0:	f1c3 0387 	rsb	r3, r3, #135	; 0x87
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <_Z14AbsEncI2CReadxPh+0xa4>)
 80041c8:	801a      	strh	r2, [r3, #0]
		if (BinPosXI >= 1024){BinPosXI %= 1024;}
 80041ca:	4b0d      	ldr	r3, [pc, #52]	; (8004200 <_Z14AbsEncI2CReadxPh+0xa4>)
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d2:	d306      	bcc.n	80041e2 <_Z14AbsEncI2CReadxPh+0x86>
 80041d4:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <_Z14AbsEncI2CReadxPh+0xa4>)
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041dc:	b29a      	uxth	r2, r3
 80041de:	4b08      	ldr	r3, [pc, #32]	; (8004200 <_Z14AbsEncI2CReadxPh+0xa4>)
 80041e0:	801a      	strh	r2, [r3, #0]

		flag_absenc = 0;
 80041e2:	4b03      	ldr	r3, [pc, #12]	; (80041f0 <_Z14AbsEncI2CReadxPh+0x94>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
//			flag_absenc = 0;
//		break;
//
//		}
	}
}
 80041e8:	bf00      	nop
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	200005c2 	.word	0x200005c2
 80041f4:	200002c4 	.word	0x200002c4
 80041f8:	200005bc 	.word	0x200005bc
 80041fc:	200005be 	.word	0x200005be
 8004200:	200005c0 	.word	0x200005c0

08004204 <_Z13Efft_activatev>:

/////////////////////// [End Effector] //////////////////////////////////

void Efft_activate(){
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af02      	add	r7, sp, #8
	uint8_t cmmd = 0x45;
 800420a:	2345      	movs	r3, #69	; 0x45
 800420c:	71fb      	strb	r3, [r7, #7]

	static enum{ef_INIT, ef_shoot} efshoot = ef_INIT;


	switch(efshoot){
 800420e:	4b25      	ldr	r3, [pc, #148]	; (80042a4 <_Z13Efft_activatev+0xa0>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d025      	beq.n	8004262 <_Z13Efft_activatev+0x5e>
	default:
	case ef_INIT:
		if(flag_efftDis == 1){
 8004216:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <_Z13Efft_activatev+0xa4>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d106      	bne.n	800422c <_Z13Efft_activatev+0x28>
			flag_efftActi = 0;
 800421e:	4b23      	ldr	r3, [pc, #140]	; (80042ac <_Z13Efft_activatev+0xa8>)
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
			efshoot = ef_INIT;
 8004224:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <_Z13Efft_activatev+0xa0>)
 8004226:	2200      	movs	r2, #0
 8004228:	701a      	strb	r2, [r3, #0]
			//HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_FIRST_AND_LAST_FRAME);
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &cmmd, 2, 100);
			efshoot = ef_shoot;
			}
		}
	break;
 800422a:	e034      	b.n	8004296 <_Z13Efft_activatev+0x92>
		if(flag_efftActi != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 800422c:	4b1f      	ldr	r3, [pc, #124]	; (80042ac <_Z13Efft_activatev+0xa8>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <_Z13Efft_activatev+0x40>
 8004234:	4b1e      	ldr	r3, [pc, #120]	; (80042b0 <_Z13Efft_activatev+0xac>)
 8004236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b20      	cmp	r3, #32
 800423e:	d101      	bne.n	8004244 <_Z13Efft_activatev+0x40>
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <_Z13Efft_activatev+0x42>
 8004244:	2300      	movs	r3, #0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d025      	beq.n	8004296 <_Z13Efft_activatev+0x92>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 0, I2C_FIRST_FRAME);
 800424a:	1dfa      	adds	r2, r7, #7
 800424c:	2301      	movs	r3, #1
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	2300      	movs	r3, #0
 8004252:	2146      	movs	r1, #70	; 0x46
 8004254:	4816      	ldr	r0, [pc, #88]	; (80042b0 <_Z13Efft_activatev+0xac>)
 8004256:	f013 ff37 	bl	80180c8 <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_shoot;
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <_Z13Efft_activatev+0xa0>)
 800425c:	2201      	movs	r2, #1
 800425e:	701a      	strb	r2, [r3, #0]
	break;
 8004260:	e019      	b.n	8004296 <_Z13Efft_activatev+0x92>

	case ef_shoot:
		if (hi2c3.State == HAL_I2C_STATE_READY){
 8004262:	4b13      	ldr	r3, [pc, #76]	; (80042b0 <_Z13Efft_activatev+0xac>)
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b20      	cmp	r3, #32
 800426c:	bf0c      	ite	eq
 800426e:	2301      	moveq	r3, #1
 8004270:	2300      	movne	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d010      	beq.n	800429a <_Z13Efft_activatev+0x96>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_LAST_FRAME);
 8004278:	1dfa      	adds	r2, r7, #7
 800427a:	2320      	movs	r3, #32
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	2301      	movs	r3, #1
 8004280:	2146      	movs	r1, #70	; 0x46
 8004282:	480b      	ldr	r0, [pc, #44]	; (80042b0 <_Z13Efft_activatev+0xac>)
 8004284:	f013 ff20 	bl	80180c8 <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_INIT;
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <_Z13Efft_activatev+0xa0>)
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 0;
 800428e:	4b07      	ldr	r3, [pc, #28]	; (80042ac <_Z13Efft_activatev+0xa8>)
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]
			//trig_efftRead = 1;
		}
	break;
 8004294:	e001      	b.n	800429a <_Z13Efft_activatev+0x96>
	break;
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <_Z13Efft_activatev+0x98>
	break;
 800429a:	bf00      	nop
	}
}
 800429c:	bf00      	nop
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20000838 	.word	0x20000838
 80042a8:	200001fc 	.word	0x200001fc
 80042ac:	2000078b 	.word	0x2000078b
 80042b0:	20000318 	.word	0x20000318

080042b4 <_Z9Efft_readPh>:

void Efft_read(uint8_t *Rddata){
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	6078      	str	r0, [r7, #4]
		//HAL_I2C_Mem_Read(&hi2c1, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1, 100);
		flag_efftRead = 0;
	}
	*/
	static uint8_t efrdStatus = 0;
	switch(efrdStatus){
 80042bc:	4b1f      	ldr	r3, [pc, #124]	; (800433c <_Z9Efft_readPh+0x88>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d01a      	beq.n	80042fa <_Z9Efft_readPh+0x46>
	default:
	case 0:
		if (flag_efftRead != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 80042c4:	4b1e      	ldr	r3, [pc, #120]	; (8004340 <_Z9Efft_readPh+0x8c>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <_Z9Efft_readPh+0x28>
 80042cc:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <_Z9Efft_readPh+0x90>)
 80042ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	d101      	bne.n	80042dc <_Z9Efft_readPh+0x28>
 80042d8:	2301      	movs	r3, #1
 80042da:	e000      	b.n	80042de <_Z9Efft_readPh+0x2a>
 80042dc:	2300      	movs	r3, #0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d025      	beq.n	800432e <_Z9Efft_readPh+0x7a>
			//HAL_I2C_Master_Transmit_IT(&hi2c3, ADDR_EFFT, 0x23, 1);
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
 80042e2:	2302      	movs	r3, #2
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	2301      	movs	r3, #1
 80042e8:	4a17      	ldr	r2, [pc, #92]	; (8004348 <_Z9Efft_readPh+0x94>)
 80042ea:	2146      	movs	r1, #70	; 0x46
 80042ec:	4815      	ldr	r0, [pc, #84]	; (8004344 <_Z9Efft_readPh+0x90>)
 80042ee:	f013 feeb 	bl	80180c8 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &readRQ, 2, 100);
			//HAL_I2C_Master_Seq_Transmit_DMA(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
			efrdStatus = 1;
 80042f2:	4b12      	ldr	r3, [pc, #72]	; (800433c <_Z9Efft_readPh+0x88>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	701a      	strb	r2, [r3, #0]
		}
	break;
 80042f8:	e019      	b.n	800432e <_Z9Efft_readPh+0x7a>

	case 1:

		if (hi2c3.State == HAL_I2C_STATE_READY){
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <_Z9Efft_readPh+0x90>)
 80042fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b20      	cmp	r3, #32
 8004304:	bf0c      	ite	eq
 8004306:	2301      	moveq	r3, #1
 8004308:	2300      	movne	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d010      	beq.n	8004332 <_Z9Efft_readPh+0x7e>
			HAL_I2C_Master_Seq_Receive_IT(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
 8004310:	2320      	movs	r3, #32
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	2301      	movs	r3, #1
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	2146      	movs	r1, #70	; 0x46
 800431a:	480a      	ldr	r0, [pc, #40]	; (8004344 <_Z9Efft_readPh+0x90>)
 800431c:	f013 ff9a 	bl	8018254 <HAL_I2C_Master_Seq_Receive_IT>
			//HAL_I2C_Master_Seq_Receive_DMA(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
			//HAL_I2C_Master_Receive(&hi2c3, ADDR_EFFT ,Rddata, 1, 100);
		flag_efftRead = 0;
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <_Z9Efft_readPh+0x8c>)
 8004322:	2200      	movs	r2, #0
 8004324:	701a      	strb	r2, [r3, #0]
		efrdStatus = 0;
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <_Z9Efft_readPh+0x88>)
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]
			}
	break;
 800432c:	e001      	b.n	8004332 <_Z9Efft_readPh+0x7e>
	break;
 800432e:	bf00      	nop
 8004330:	e000      	b.n	8004334 <_Z9Efft_readPh+0x80>
	break;
 8004332:	bf00      	nop
	}

}
 8004334:	bf00      	nop
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20000839 	.word	0x20000839
 8004340:	2000078c 	.word	0x2000078c
 8004344:	20000318 	.word	0x20000318
 8004348:	2000022e 	.word	0x2000022e

0800434c <HAL_GPIO_EXTI_Callback>:

/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	80fb      	strh	r3, [r7, #6]
	//============// EMER ////=====================
	if(GPIO_Pin == GPIO_PIN_11){
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435c:	d108      	bne.n	8004370 <HAL_GPIO_EXTI_Callback+0x24>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		grandState = emer;
 800435e:	4b27      	ldr	r3, [pc, #156]	; (80043fc <HAL_GPIO_EXTI_Callback+0xb0>)
 8004360:	2203      	movs	r2, #3
 8004362:	701a      	strb	r2, [r3, #0]
		bluecounter = 0;
 8004364:	4b26      	ldr	r3, [pc, #152]	; (8004400 <HAL_GPIO_EXTI_Callback+0xb4>)
 8004366:	2200      	movs	r2, #0
 8004368:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 800436a:	4b26      	ldr	r3, [pc, #152]	; (8004404 <HAL_GPIO_EXTI_Callback+0xb8>)
 800436c:	2200      	movs	r2, #0
 800436e:	801a      	strh	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
	//=============// Stop ////======================
	if(GPIO_Pin == GPIO_PIN_10){
 8004370:	88fb      	ldrh	r3, [r7, #6]
 8004372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004376:	d110      	bne.n	800439a <HAL_GPIO_EXTI_Callback+0x4e>
		PWMOut = 0;
 8004378:	4b22      	ldr	r3, [pc, #136]	; (8004404 <HAL_GPIO_EXTI_Callback+0xb8>)
 800437a:	2200      	movs	r2, #0
 800437c:	801a      	strh	r2, [r3, #0]
		bluecounter = 0;
 800437e:	4b20      	ldr	r3, [pc, #128]	; (8004400 <HAL_GPIO_EXTI_Callback+0xb4>)
 8004380:	2200      	movs	r2, #0
 8004382:	701a      	strb	r2, [r3, #0]
		if(grandState == work){grandState = stopnd;}
 8004384:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <HAL_GPIO_EXTI_Callback+0xb0>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d103      	bne.n	8004394 <HAL_GPIO_EXTI_Callback+0x48>
 800438c:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <HAL_GPIO_EXTI_Callback+0xb0>)
 800438e:	2204      	movs	r2, #4
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	e002      	b.n	800439a <HAL_GPIO_EXTI_Callback+0x4e>
		else{grandState = stop;}
 8004394:	4b19      	ldr	r3, [pc, #100]	; (80043fc <HAL_GPIO_EXTI_Callback+0xb0>)
 8004396:	2202      	movs	r2, #2
 8004398:	701a      	strb	r2, [r3, #0]

		}
	//=========// work Blue button //=========//
	if(GPIO_Pin == GPIO_PIN_13){
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a0:	d120      	bne.n	80043e4 <HAL_GPIO_EXTI_Callback+0x98>
		bluecounter++;
 80043a2:	4b17      	ldr	r3, [pc, #92]	; (8004400 <HAL_GPIO_EXTI_Callback+0xb4>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	3301      	adds	r3, #1
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	4b15      	ldr	r3, [pc, #84]	; (8004400 <HAL_GPIO_EXTI_Callback+0xb4>)
 80043ac:	701a      	strb	r2, [r3, #0]

		////===== Zero Calibrate Func /////////////
		if (bluecounter % 2 == 0){
 80043ae:	4b14      	ldr	r3, [pc, #80]	; (8004400 <HAL_GPIO_EXTI_Callback+0xb4>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d111      	bne.n	80043de <HAL_GPIO_EXTI_Callback+0x92>
			PWMOut = 1100;
 80043ba:	4b12      	ldr	r3, [pc, #72]	; (8004404 <HAL_GPIO_EXTI_Callback+0xb8>)
 80043bc:	f240 424c 	movw	r2, #1100	; 0x44c
 80043c0:	801a      	strh	r2, [r3, #0]
			mot_dirctn++; mot_dirctn%=2;
 80043c2:	4b11      	ldr	r3, [pc, #68]	; (8004408 <HAL_GPIO_EXTI_Callback+0xbc>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	3301      	adds	r3, #1
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <HAL_GPIO_EXTI_Callback+0xbc>)
 80043cc:	701a      	strb	r2, [r3, #0]
 80043ce:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <HAL_GPIO_EXTI_Callback+0xbc>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_GPIO_EXTI_Callback+0xbc>)
 80043da:	701a      	strb	r2, [r3, #0]
 80043dc:	e002      	b.n	80043e4 <HAL_GPIO_EXTI_Callback+0x98>

		}else{PWMOut = 0;}
 80043de:	4b09      	ldr	r3, [pc, #36]	; (8004404 <HAL_GPIO_EXTI_Callback+0xb8>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	801a      	strh	r2, [r3, #0]
		//flag_efftActi = 1;
		//trig_efftRead = 1;
	}

	//=============// setzero //================//
		if(GPIO_Pin == GPIO_PIN_2){
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d102      	bne.n	80043f0 <HAL_GPIO_EXTI_Callback+0xa4>
//			position_order = 0;
//			positionlog[position_order] = 0.00; // 0.000613 - 0.0122 => 1-2/1024
//			Velocity = 7.0;
//			grandState = SetZeroGr;

			grandState = SetZeroBf;
 80043ea:	4b04      	ldr	r3, [pc, #16]	; (80043fc <HAL_GPIO_EXTI_Callback+0xb0>)
 80043ec:	2206      	movs	r2, #6
 80043ee:	701a      	strb	r2, [r3, #0]
		}
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	2000054c 	.word	0x2000054c
 8004400:	20000740 	.word	0x20000740
 8004404:	200005c4 	.word	0x200005c4
 8004408:	200005cc 	.word	0x200005cc

0800440c <_Z6microsv>:

///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 800440c:	b4b0      	push	{r4, r5, r7}
 800440e:	af00      	add	r7, sp, #0
 8004410:	4b09      	ldr	r3, [pc, #36]	; (8004438 <_Z6microsv+0x2c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	2200      	movs	r2, #0
 8004418:	4618      	mov	r0, r3
 800441a:	4611      	mov	r1, r2
 800441c:	4b07      	ldr	r3, [pc, #28]	; (800443c <_Z6microsv+0x30>)
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	1884      	adds	r4, r0, r2
 8004424:	eb41 0503 	adc.w	r5, r1, r3
 8004428:	4622      	mov	r2, r4
 800442a:	462b      	mov	r3, r5
 800442c:	4610      	mov	r0, r2
 800442e:	4619      	mov	r1, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	bcb0      	pop	{r4, r5, r7}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	200003fc 	.word	0x200003fc
 800443c:	20000558 	.word	0x20000558

08004440 <_Z6millisv>:
uint32_t millis()
{return _millis;}// + htim10.Instance->CNT
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
 8004444:	4b03      	ldr	r3, [pc, #12]	; (8004454 <_Z6millisv+0x14>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	20000560 	.word	0x20000560

08004458 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004458:	b4b0      	push	{r4, r5, r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a0e      	ldr	r2, [pc, #56]	; (800449c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d10a      	bne.n	800447e <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8004468:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004472:	1854      	adds	r4, r2, r1
 8004474:	f143 0500 	adc.w	r5, r3, #0
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800447a:	e9c3 4500 	strd	r4, r5, [r3]
 if(htim == &htim10)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a08      	ldr	r2, [pc, #32]	; (80044a4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d104      	bne.n	8004490 <HAL_TIM_PeriodElapsedCallback+0x38>
 {_millis++;}
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3301      	adds	r3, #1
 800448c:	4a06      	ldr	r2, [pc, #24]	; (80044a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800448e:	6013      	str	r3, [r2, #0]
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	bcb0      	pop	{r4, r5, r7}
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	200003fc 	.word	0x200003fc
 80044a0:	20000558 	.word	0x20000558
 80044a4:	200003b4 	.word	0x200003b4
 80044a8:	20000560 	.word	0x20000560

080044ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044b0:	b672      	cpsid	i
}
 80044b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044b4:	e7fe      	b.n	80044b4 <Error_Handler+0x8>

080044b6 <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>:
{
public:
  /** Alias to the template parameter \c tag */
  typedef tag Tag;

  SymbolExpr() {}
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>:
template<int N> class FixedInt
{
public:
  static const int value = N;
  EIGEN_CONSTEXPR operator int() const { return value; }
  FixedInt() {}
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <_ZNK5Eigen8internal8FixedIntILi1EEclEv>:
  template<int M>
  FixedInt<N&M> operator&( FixedInt<M>) const { return FixedInt<N&M>(); }

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
  // Needed in C++14 to allow fix<N>():
  FixedInt operator() () const { return *this; }
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	bf00      	nop
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>:
  AddExpr<Derived,ValueExpr<internal::FixedInt<N> > > operator+(internal::FixedInt<N>) const
 80044f8:	b5b0      	push	{r4, r5, r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	7039      	strb	r1, [r7, #0]
  { return AddExpr<Derived,ValueExpr<internal::FixedInt<N> > >(derived(), ValueExpr<internal::FixedInt<N> >()); }
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fdb8 	bl	8005078 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>
 8004508:	4604      	mov	r4, r0
 800450a:	f107 030c 	add.w	r3, r7, #12
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fdbd 	bl	800508e <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>
 8004514:	f107 020c 	add.w	r2, r7, #12
 8004518:	f107 0308 	add.w	r3, r7, #8
 800451c:	4621      	mov	r1, r4
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fdc0 	bl	80050a4 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>
 8004524:	bf00      	nop
 8004526:	4628      	mov	r0, r5
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bdb0      	pop	{r4, r5, r7, pc}

0800452e <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>:
#endif

// Suppresses 'unused variable' warnings.
namespace Eigen {
  namespace internal {
    template<typename T> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void ignore_unused_variable(const T&) {}
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>:
      * a matrix to 0 is not supported.
      *
      * \sa resize(Index,Index)
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Matrix() : Base()
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fdc2 	bl	80050d6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
    {
      Base::_check_template_params();
 8004552:	f000 fdd0 	bl	80050f6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>:
    Matrix() : Base()
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fdd6 	bl	800511c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 8004570:	f000 fde4 	bl	800513c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
    }
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>:
    Matrix() : Base()
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4618      	mov	r0, r3
 800458a:	f000 fdea 	bl	8005162 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 800458e:	f000 fdf8 	bl	8005182 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
    }
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>:
    Matrix() : Base()
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fdfe 	bl	80051a8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 80045ac:	f000 fe0c 	bl	80051c8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
    }
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>:
  * \note According the c++ standard, the argument expressions of this comma initializer are evaluated in arbitrary order.
  *
  * \sa CommaInitializer::finished(), class CommaInitializer
  */
template<typename Derived>
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	607a      	str	r2, [r7, #4]
{
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fe04 	bl	80051d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>
}
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
    finished();
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fe39 	bl	8005258 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>
  }
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 80045f0:	b590      	push	{r4, r7, lr}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689c      	ldr	r4, [r3, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fe5e 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004608:	4603      	mov	r3, r0
 800460a:	429c      	cmp	r4, r3
 800460c:	bf0c      	ite	eq
 800460e:	2301      	moveq	r3, #1
 8004610:	2300      	movne	r3, #0
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01d      	beq.n	8004654 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	441a      	add	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	605a      	str	r2, [r3, #4]
      m_col = 0;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685c      	ldr	r4, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f000 fe4d 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004640:	4603      	mov	r3, r0
 8004642:	429c      	cmp	r4, r3
 8004644:	db05      	blt.n	8004652 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x62>
 8004646:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xcc>)
 8004648:	4a1d      	ldr	r2, [pc, #116]	; (80046c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 800464a:	2148      	movs	r1, #72	; 0x48
 800464c:	481d      	ldr	r0, [pc, #116]	; (80046c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 800464e:	f019 fda1 	bl	801e194 <__assert_func>
 8004652:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689c      	ldr	r4, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fe31 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004662:	4603      	mov	r3, r0
 8004664:	429c      	cmp	r4, r3
 8004666:	db05      	blt.n	8004674 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x84>
 8004668:	4b17      	ldr	r3, [pc, #92]	; (80046c8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd8>)
 800466a:	4a15      	ldr	r2, [pc, #84]	; (80046c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 800466c:	214b      	movs	r1, #75	; 0x4b
 800466e:	4815      	ldr	r0, [pc, #84]	; (80046c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 8004670:	f019 fd90 	bl	801e194 <__assert_func>
 8004674:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d005      	beq.n	800468a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x9a>
 800467e:	4b13      	ldr	r3, [pc, #76]	; (80046cc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xdc>)
 8004680:	4a0f      	ldr	r2, [pc, #60]	; (80046c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 8004682:	214d      	movs	r1, #77	; 0x4d
 8004684:	480f      	ldr	r0, [pc, #60]	; (80046c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 8004686:	f019 fd85 	bl	801e194 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	461c      	mov	r4, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6858      	ldr	r0, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	1c59      	adds	r1, r3, #1
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6091      	str	r1, [r2, #8]
 800469e:	461a      	mov	r2, r3
 80046a0:	4601      	mov	r1, r0
 80046a2:	4620      	mov	r0, r4
 80046a4:	f000 fe24 	bl	80052f0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 80046a8:	4602      	mov	r2, r0
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6013      	str	r3, [r2, #0]
    return *this;
 80046b0:	687b      	ldr	r3, [r7, #4]
  }
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd90      	pop	{r4, r7, pc}
 80046ba:	bf00      	nop
 80046bc:	0801f210 	.word	0x0801f210
 80046c0:	0801f260 	.word	0x0801f260
 80046c4:	0801f324 	.word	0x0801f324
 80046c8:	0801f380 	.word	0x0801f380
 80046cc:	0801f3d8 	.word	0x0801f3d8

080046d0 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fe1f 	bl	8005324 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>
}
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b082      	sub	sp, #8
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
    finished();
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fe54 	bl	80053a4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>
  }
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8004708:	b590      	push	{r4, r7, lr}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689c      	ldr	r4, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fe78 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004720:	4603      	mov	r3, r0
 8004722:	429c      	cmp	r4, r3
 8004724:	bf0c      	ite	eq
 8004726:	2301      	moveq	r3, #1
 8004728:	2300      	movne	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01d      	beq.n	800476c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	441a      	add	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	605a      	str	r2, [r3, #4]
      m_col = 0;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685c      	ldr	r4, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fe67 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004758:	4603      	mov	r3, r0
 800475a:	429c      	cmp	r4, r3
 800475c:	db05      	blt.n	800476a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x62>
 800475e:	4b1d      	ldr	r3, [pc, #116]	; (80047d4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xcc>)
 8004760:	4a1d      	ldr	r2, [pc, #116]	; (80047d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 8004762:	2148      	movs	r1, #72	; 0x48
 8004764:	481d      	ldr	r0, [pc, #116]	; (80047dc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 8004766:	f019 fd15 	bl	801e194 <__assert_func>
 800476a:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689c      	ldr	r4, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fe4b 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800477a:	4603      	mov	r3, r0
 800477c:	429c      	cmp	r4, r3
 800477e:	db05      	blt.n	800478c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x84>
 8004780:	4b17      	ldr	r3, [pc, #92]	; (80047e0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd8>)
 8004782:	4a15      	ldr	r2, [pc, #84]	; (80047d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 8004784:	214b      	movs	r1, #75	; 0x4b
 8004786:	4815      	ldr	r0, [pc, #84]	; (80047dc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 8004788:	f019 fd04 	bl	801e194 <__assert_func>
 800478c:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d005      	beq.n	80047a2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x9a>
 8004796:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xdc>)
 8004798:	4a0f      	ldr	r2, [pc, #60]	; (80047d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 800479a:	214d      	movs	r1, #77	; 0x4d
 800479c:	480f      	ldr	r0, [pc, #60]	; (80047dc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 800479e:	f019 fcf9 	bl	801e194 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461c      	mov	r4, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6858      	ldr	r0, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	1c59      	adds	r1, r3, #1
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6091      	str	r1, [r2, #8]
 80047b6:	461a      	mov	r2, r3
 80047b8:	4601      	mov	r1, r0
 80047ba:	4620      	mov	r0, r4
 80047bc:	f000 fe3e 	bl	800543c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 80047c0:	4602      	mov	r2, r0
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6013      	str	r3, [r2, #0]
    return *this;
 80047c8:	687b      	ldr	r3, [r7, #4]
  }
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd90      	pop	{r4, r7, pc}
 80047d2:	bf00      	nop
 80047d4:	0801f210 	.word	0x0801f210
 80047d8:	0801f3f0 	.word	0x0801f3f0
 80047dc:	0801f324 	.word	0x0801f324
 80047e0:	0801f380 	.word	0x0801f380
 80047e4:	0801f3d8 	.word	0x0801f3d8

080047e8 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fe39 	bl	8005470 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>
}
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
    finished();
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fe6e 	bl	80054f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>
  }
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 800481e:	b580      	push	{r7, lr}
 8004820:	b084      	sub	sp, #16
 8004822:	af00      	add	r7, sp, #0
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fe94 	bl	800555c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>
}
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
    finished();
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fec9 	bl	80055dc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>
  }
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689c      	ldr	r4, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f000 feee 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800486c:	4603      	mov	r3, r0
 800486e:	429c      	cmp	r4, r3
 8004870:	bf0c      	ite	eq
 8004872:	2301      	moveq	r3, #1
 8004874:	2300      	movne	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01d      	beq.n	80048b8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	441a      	add	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	605a      	str	r2, [r3, #4]
      m_col = 0;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685c      	ldr	r4, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fedd 	bl	800565e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80048a4:	4603      	mov	r3, r0
 80048a6:	429c      	cmp	r4, r3
 80048a8:	db05      	blt.n	80048b6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x62>
 80048aa:	4b1d      	ldr	r3, [pc, #116]	; (8004920 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xcc>)
 80048ac:	4a1d      	ldr	r2, [pc, #116]	; (8004924 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 80048ae:	2148      	movs	r1, #72	; 0x48
 80048b0:	481d      	ldr	r0, [pc, #116]	; (8004928 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 80048b2:	f019 fc6f 	bl	801e194 <__assert_func>
 80048b6:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689c      	ldr	r4, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fec1 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80048c6:	4603      	mov	r3, r0
 80048c8:	429c      	cmp	r4, r3
 80048ca:	db05      	blt.n	80048d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x84>
 80048cc:	4b17      	ldr	r3, [pc, #92]	; (800492c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd8>)
 80048ce:	4a15      	ldr	r2, [pc, #84]	; (8004924 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 80048d0:	214b      	movs	r1, #75	; 0x4b
 80048d2:	4815      	ldr	r0, [pc, #84]	; (8004928 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 80048d4:	f019 fc5e 	bl	801e194 <__assert_func>
 80048d8:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d005      	beq.n	80048ee <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x9a>
 80048e2:	4b13      	ldr	r3, [pc, #76]	; (8004930 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xdc>)
 80048e4:	4a0f      	ldr	r2, [pc, #60]	; (8004924 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 80048e6:	214d      	movs	r1, #77	; 0x4d
 80048e8:	480f      	ldr	r0, [pc, #60]	; (8004928 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 80048ea:	f019 fc53 	bl	801e194 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	461c      	mov	r4, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6858      	ldr	r0, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	1c59      	adds	r1, r3, #1
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6091      	str	r1, [r2, #8]
 8004902:	461a      	mov	r2, r3
 8004904:	4601      	mov	r1, r0
 8004906:	4620      	mov	r0, r4
 8004908:	f000 feb4 	bl	8005674 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 800490c:	4602      	mov	r2, r0
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6013      	str	r3, [r2, #0]
    return *this;
 8004914:	687b      	ldr	r3, [r7, #4]
  }
 8004916:	4618      	mov	r0, r3
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	bd90      	pop	{r4, r7, pc}
 800491e:	bf00      	nop
 8004920:	0801f210 	.word	0x0801f210
 8004924:	0801f4b4 	.word	0x0801f4b4
 8004928:	0801f324 	.word	0x0801f324
 800492c:	0801f380 	.word	0x0801f380
 8004930:	0801f3d8 	.word	0x0801f3d8

08004934 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>:
      * \sa operator[](Index)
      */

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Scalar&
    operator()(Index row, Index col)
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
    {
      eigen_assert(row >= 0 && row < rows()
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	db10      	blt.n	8004968 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fead 	bl	80056a6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800494c:	4602      	mov	r2, r0
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4293      	cmp	r3, r2
 8004952:	da09      	bge.n	8004968 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	db06      	blt.n	8004968 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 feb3 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004960:	4602      	mov	r2, r0
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4293      	cmp	r3, r2
 8004966:	db06      	blt.n	8004976 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x42>
 8004968:	4b08      	ldr	r3, [pc, #32]	; (800498c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x58>)
 800496a:	4a09      	ldr	r2, [pc, #36]	; (8004990 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x5c>)
 800496c:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8004970:	4808      	ldr	r0, [pc, #32]	; (8004994 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x60>)
 8004972:	f019 fc0f 	bl	801e194 <__assert_func>
          && col >= 0 && col < cols());
      return coeffRef(row, col);
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	68b9      	ldr	r1, [r7, #8]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fecc 	bl	8005718 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>
 8004980:	4603      	mov	r3, r0
    }
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	0801f578 	.word	0x0801f578
 8004990:	0801f5b0 	.word	0x0801f5b0
 8004994:	0801f69c 	.word	0x0801f69c

08004998 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>:
  * on the behavior of CwiseNullaryOp.
  *
  * \sa class CwiseUnaryOp, class CwiseBinaryOp, DenseBase::NullaryExpr
  */
template<typename NullaryOp, typename PlainObjectType>
class CwiseNullaryOp : public internal::dense_xpr_base< CwiseNullaryOp<NullaryOp, PlainObjectType> >::type, internal::no_assignment_operator
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	1d1a      	adds	r2, r3, #4
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	3304      	adds	r3, #4
 80049aa:	4619      	mov	r1, r3
 80049ac:	4610      	mov	r0, r2
 80049ae:	f000 ffaf 	bl	8005910 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>:
  return CwiseBinaryOp<CustomBinaryOp, const Derived, const OtherDerived>(derived(), other.derived(), func);
}


#ifndef EIGEN_PARSED_BY_DOXYGEN
EIGEN_MAKE_SCALAR_BINARY_OP(operator*,product)
 80049bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049be:	b089      	sub	sp, #36	; 0x24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	68b8      	ldr	r0, [r7, #8]
 80049ca:	f000 fec8 	bl	800575e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80049ce:	4604      	mov	r4, r0
 80049d0:	68b8      	ldr	r0, [r7, #8]
 80049d2:	f000 fec4 	bl	800575e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80049d6:	4603      	mov	r3, r0
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fd24 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80049de:	4605      	mov	r5, r0
 80049e0:	68b8      	ldr	r0, [r7, #8]
 80049e2:	f000 febc 	bl	800575e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80049e6:	4603      	mov	r3, r0
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fd11 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80049ee:	4606      	mov	r6, r0
 80049f0:	f107 0318 	add.w	r3, r7, #24
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 febc 	bl	8005774 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>
 80049fc:	f107 0318 	add.w	r3, r7, #24
 8004a00:	f107 0010 	add.w	r0, r7, #16
 8004a04:	4632      	mov	r2, r6
 8004a06:	4629      	mov	r1, r5
 8004a08:	f000 fed0 	bl	80057ac <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>
 8004a0c:	f107 031c 	add.w	r3, r7, #28
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 ff03 	bl	800581c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8004a16:	f107 031c 	add.w	r3, r7, #28
 8004a1a:	f107 0210 	add.w	r2, r7, #16
 8004a1e:	4621      	mov	r1, r4
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 ff35 	bl	8005890 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	3724      	adds	r7, #36	; 0x24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a2e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>:
  *
  * \sa transposeInPlace(), adjoint() */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
Transpose<Derived>
DenseBase<Derived>::transpose()
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
{
  return TransposeReturnType(derived());
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 ff86 	bl	8005948 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	f107 030c 	add.w	r3, r7, #12
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 ffa2 	bl	800598e <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>:
  * CwiseBinaryOp types explicitly.
  *
  * \sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, class CwiseUnaryOp, class CwiseNullaryOp
  */
template<typename BinaryOp, typename LhsType, typename RhsType>
class CwiseBinaryOp :
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	1d1a      	adds	r2, r3, #4
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4610      	mov	r0, r2
 8004a72:	f7ff ff91 	bl	8004998 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f103 020c 	add.w	r2, r3, #12
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	330c      	adds	r3, #12
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f000 ff54 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived, OtherDerived>
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004a92:	b590      	push	{r4, r7, lr}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)
#ifdef EIGEN_DEBUG_PRODUCT
  internal::product_type<Derived,OtherDerived>::debug();
#endif

  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004a9e:	68b8      	ldr	r0, [r7, #8]
 8004aa0:	f000 ff85 	bl	80059ae <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 ff8c 	bl	80059c4 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8004aac:	4603      	mov	r3, r0
 8004aae:	461a      	mov	r2, r3
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 ffd2 	bl	8005a5c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>
}
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd90      	pop	{r4, r7, pc}

08004ac0 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fff4 	bl	8005abc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004ad4:	4603      	mov	r3, r0
    }
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004ade:	b590      	push	{r4, r7, lr}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004aea:	68b8      	ldr	r0, [r7, #8]
 8004aec:	f000 ffff 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004af0:	4604      	mov	r4, r0
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fe33 	bl	800575e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004af8:	4603      	mov	r3, r0
 8004afa:	461a      	mov	r2, r3
 8004afc:	4621      	mov	r1, r4
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f001 f824 	bl	8005b4c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd90      	pop	{r4, r7, pc}

08004b0c <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6839      	ldr	r1, [r7, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f001 f844 	bl	8005ba8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004b20:	4603      	mov	r3, r0
    }
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004b2a:	b590      	push	{r4, r7, lr}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004b36:	68b8      	ldr	r0, [r7, #8]
 8004b38:	f000 ffd9 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004b3c:	4604      	mov	r4, r0
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 ffd5 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004b44:	4603      	mov	r3, r0
 8004b46:	461a      	mov	r2, r3
 8004b48:	4621      	mov	r1, r4
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f001 f86a 	bl	8005c24 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>
}
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd90      	pop	{r4, r7, pc}

08004b58 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f001 f88d 	bl	8005c80 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004b66:	4602      	mov	r2, r0
 8004b68:	f107 030c 	add.w	r3, r7, #12
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f001 f8a9 	bl	8005cc6 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>
 8004b74:	68fb      	ldr	r3, [r7, #12]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004b7e:	b590      	push	{r4, r7, lr}
 8004b80:	b085      	sub	sp, #20
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004b8a:	68b8      	ldr	r0, [r7, #8]
 8004b8c:	f001 f8ab 	bl	8005ce6 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 8004b90:	4604      	mov	r4, r0
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f001 f8b2 	bl	8005cfc <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4621      	mov	r1, r4
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f001 f8f8 	bl	8005d94 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>
}
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd90      	pop	{r4, r7, pc}

08004bac <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8004bac:	b5b0      	push	{r4, r5, r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	68b8      	ldr	r0, [r7, #8]
 8004bba:	f001 f91b 	bl	8005df4 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 ff94 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	f107 0314 	add.w	r3, r7, #20
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f001 f91c 	bl	8005e0a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004bd2:	f107 0314 	add.w	r3, r7, #20
 8004bd6:	462a      	mov	r2, r5
 8004bd8:	4621      	mov	r1, r4
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f001 f954 	bl	8005e88 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bdb0      	pop	{r4, r5, r7, pc}

08004be8 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6839      	ldr	r1, [r7, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f001 f992 	bl	8005f20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
 8004bfc:	4603      	mov	r3, r0
    }
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f001 f99f 	bl	8005f52 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004c14:	4602      	mov	r2, r0
 8004c16:	f107 030c 	add.w	r3, r7, #12
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 f9bb 	bl	8005f98 <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>
 8004c22:	68fb      	ldr	r3, [r7, #12]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004c2c:	b590      	push	{r4, r7, lr}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004c38:	68b8      	ldr	r0, [r7, #8]
 8004c3a:	f000 ff58 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004c3e:	4604      	mov	r4, r0
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f001 f9b9 	bl	8005fb8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8004c46:	4603      	mov	r3, r0
 8004c48:	461a      	mov	r2, r3
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f001 f9f1 	bl	8006034 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>
}
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd90      	pop	{r4, r7, pc}

08004c5a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004c5a:	b590      	push	{r4, r7, lr}
 8004c5c:	b085      	sub	sp, #20
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	60f8      	str	r0, [r7, #12]
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004c66:	68b8      	ldr	r0, [r7, #8]
 8004c68:	f001 fa12 	bl	8006090 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 ff3d 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004c74:	4603      	mov	r3, r0
 8004c76:	461a      	mov	r2, r3
 8004c78:	4621      	mov	r1, r4
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f001 fa38 	bl	80060f0 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>
}
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd90      	pop	{r4, r7, pc}

08004c88 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004c94:	68b8      	ldr	r0, [r7, #8]
 8004c96:	f001 fa59 	bl	800614c <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f001 f98b 	bl	8005fb8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f001 fa8d 	bl	80061c8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>
}
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd90      	pop	{r4, r7, pc}

08004cb6 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
 8004cb6:	b5b0      	push	{r4, r5, r7, lr}
 8004cb8:	b086      	sub	sp, #24
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	607a      	str	r2, [r7, #4]
 8004cc2:	68b8      	ldr	r0, [r7, #8]
 8004cc4:	f001 fab0 	bl	8006228 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 8004cc8:	4604      	mov	r4, r0
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f001 fab7 	bl	800623e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	f107 0314 	add.w	r3, r7, #20
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f001 f897 	bl	8005e0a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004cdc:	f107 0314 	add.w	r3, r7, #20
 8004ce0:	462a      	mov	r2, r5
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f001 faff 	bl	80062e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bdb0      	pop	{r4, r5, r7, pc}

08004cf2 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  inline const Derived& const_derived() const
  { return *static_cast<const Derived*>(this); }

  /** \returns the number of rows. \sa cols(), RowsAtCompileTime */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f001 fb34 	bl	8006368 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8004d00:	4603      	mov	r3, r0
 8004d02:	4618      	mov	r0, r3
 8004d04:	f001 fb3b 	bl	800637e <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  /** \returns the number of columns. \sa rows(), ColsAtCompileTime*/
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f001 fb24 	bl	8006368 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8004d20:	4603      	mov	r3, r0
 8004d22:	4618      	mov	r0, r3
 8004d24:	f001 fb38 	bl	8006398 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>:
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	6039      	str	r1, [r7, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	60da      	str	r2, [r3, #12]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f103 0210 	add.w	r2, r3, #16
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	3310      	adds	r3, #16
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f001 f8d4 	bl	8005f08 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>:
  *
  * \sa computeInverseAndDetWithCheck()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC
inline const Inverse<Derived> MatrixBase<Derived>::inverse() const
 8004d6c:	b590      	push	{r4, r7, lr}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
{
  EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsInteger,THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES)
  eigen_assert(rows() == cols());
 8004d76:	6838      	ldr	r0, [r7, #0]
 8004d78:	f7ff ffbb 	bl	8004cf2 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	6838      	ldr	r0, [r7, #0]
 8004d80:	f7ff ffc7 	bl	8004d12 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8004d84:	4603      	mov	r3, r0
 8004d86:	429c      	cmp	r4, r3
 8004d88:	d006      	beq.n	8004d98 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x2c>
 8004d8a:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x44>)
 8004d8c:	4a09      	ldr	r2, [pc, #36]	; (8004db4 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x48>)
 8004d8e:	f240 115f 	movw	r1, #351	; 0x15f
 8004d92:	4809      	ldr	r0, [pc, #36]	; (8004db8 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x4c>)
 8004d94:	f019 f9fe 	bl	801e194 <__assert_func>
  return Inverse<Derived>(derived());
 8004d98:	6838      	ldr	r0, [r7, #0]
 8004d9a:	f001 fae5 	bl	8006368 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	4619      	mov	r1, r3
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f001 fb1d 	bl	80063e2 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
}
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd90      	pop	{r4, r7, pc}
 8004db0:	0801f6f8 	.word	0x0801f6f8
 8004db4:	0801f70c 	.word	0x0801f70c
 8004db8:	0801f860 	.word	0x0801f860

08004dbc <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>:
  * This class represents an abstract expression of A.inverse()
  * and most of the time this is the only way it is used.
  *
  */
template<typename XprType>
class Inverse : public InverseImpl<XprType,typename internal::traits<XprType>::StorageKind>
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	4611      	mov	r1, r2
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff ffb0 	bl	8004d32 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004ddc:	b590      	push	{r4, r7, lr}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004de8:	68b8      	ldr	r0, [r7, #8]
 8004dea:	f001 fb0c 	bl	8006406 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 8004dee:	4604      	mov	r4, r0
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f001 fb13 	bl	800641c <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 8004df6:	4603      	mov	r3, r0
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f001 fb57 	bl	80064b0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>
}
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd90      	pop	{r4, r7, pc}

08004e0a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f001 fb7b 	bl	8006514 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004e1e:	4603      	mov	r3, r0
    }
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004e28:	b590      	push	{r4, r7, lr}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004e34:	68b8      	ldr	r0, [r7, #8]
 8004e36:	f001 f92b 	bl	8006090 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fc8e 	bl	800575e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004e42:	4603      	mov	r3, r0
 8004e44:	461a      	mov	r2, r3
 8004e46:	4621      	mov	r1, r4
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f001 fba1 	bl	8006590 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd90      	pop	{r4, r7, pc}

08004e56 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8004e56:	b5b0      	push	{r4, r5, r7, lr}
 8004e58:	b086      	sub	sp, #24
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	607a      	str	r2, [r7, #4]
 8004e62:	68b8      	ldr	r0, [r7, #8]
 8004e64:	f001 f9eb 	bl	800623e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 8004e68:	4604      	mov	r4, r0
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f001 fbbe 	bl	80065ec <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8004e70:	4605      	mov	r5, r0
 8004e72:	f107 0314 	add.w	r3, r7, #20
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 fbc3 	bl	8006602 <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 8004e7c:	f107 0314 	add.w	r3, r7, #20
 8004e80:	462a      	mov	r2, r5
 8004e82:	4621      	mov	r1, r4
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f001 fbfb 	bl	8006680 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bdb0      	pop	{r4, r5, r7, pc}

08004e92 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>:
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	6039      	str	r1, [r7, #0]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	1d1a      	adds	r2, r3, #4
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004eb0:	e882 0003 	stmia.w	r2, {r0, r1}
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f103 020c 	add.w	r2, r3, #12
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	330c      	adds	r3, #12
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	f001 fc1f 	bl	8006704 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004ed0:	b590      	push	{r4, r7, lr}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004edc:	68b8      	ldr	r0, [r7, #8]
 8004ede:	f000 fc3e 	bl	800575e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f001 fc19 	bl	800671c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 8004eea:	4603      	mov	r3, r0
 8004eec:	461a      	mov	r2, r3
 8004eee:	4621      	mov	r1, r4
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f001 fc51 	bl	8006798 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>
}
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd90      	pop	{r4, r7, pc}

08004efe <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>:
  * The other template parameters are:
  * \tparam Option     can be DefaultProduct, AliasFreeProduct, or LazyProduct
  *
  */
template<typename _Lhs, typename _Rhs, int Option>
class Product : public ProductImpl<_Lhs,_Rhs,Option,
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	6039      	str	r1, [r7, #0]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	1d1a      	adds	r2, r3, #4
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	f7ff ffb9 	bl	8004e92 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8004f2a:	b5b0      	push	{r4, r5, r7, lr}
 8004f2c:	b086      	sub	sp, #24
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	68b8      	ldr	r0, [r7, #8]
 8004f38:	f000 fc11 	bl	800575e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 fc5a 	bl	80067f8 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>
 8004f44:	4605      	mov	r5, r0
 8004f46:	f107 0314 	add.w	r3, r7, #20
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 ff5d 	bl	8005e0a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004f50:	f107 0314 	add.w	r3, r7, #20
 8004f54:	462a      	mov	r2, r5
 8004f56:	4621      	mov	r1, r4
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f001 fc8d 	bl	8006878 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bdb0      	pop	{r4, r5, r7, pc}

08004f66 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b082      	sub	sp, #8
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6839      	ldr	r1, [r7, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f001 fcbf 	bl	80068f8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
 8004f7a:	4603      	mov	r3, r0
    }
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004f90:	68b8      	ldr	r0, [r7, #8]
 8004f92:	f000 fbe4 	bl	800575e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004f96:	4604      	mov	r4, r0
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f001 f879 	bl	8006090 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f001 fce5 	bl	8006974 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>
}
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd90      	pop	{r4, r7, pc}

08004fb2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8004fb2:	b5b0      	push	{r4, r5, r7, lr}
 8004fb4:	b086      	sub	sp, #24
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
 8004fbe:	68b8      	ldr	r0, [r7, #8]
 8004fc0:	f000 fd95 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f001 fd02 	bl	80069d0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>
 8004fcc:	4605      	mov	r5, r0
 8004fce:	f107 0314 	add.w	r3, r7, #20
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f001 fb15 	bl	8006602 <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 8004fd8:	f107 0314 	add.w	r3, r7, #20
 8004fdc:	462a      	mov	r2, r5
 8004fde:	4621      	mov	r1, r4
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f001 fd35 	bl	8006a50 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bdb0      	pop	{r4, r5, r7, pc}

08004fee <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>:
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b082      	sub	sp, #8
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	6039      	str	r1, [r7, #0]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	1d1a      	adds	r2, r3, #4
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	3304      	adds	r3, #4
 8005008:	e893 0003 	ldmia.w	r3, {r0, r1}
 800500c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f103 020c 	add.w	r2, r3, #12
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	330c      	adds	r3, #12
 800501a:	4619      	mov	r1, r3
 800501c:	4610      	mov	r0, r2
 800501e:	f001 fb71 	bl	8006704 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8005038:	68b8      	ldr	r0, [r7, #8]
 800503a:	f001 fd4b 	bl	8006ad4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 800503e:	4604      	mov	r4, r0
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fd54 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005046:	4603      	mov	r3, r0
 8005048:	461a      	mov	r2, r3
 800504a:	4621      	mov	r1, r4
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f001 fd7f 	bl	8006b50 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>
}
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	bd90      	pop	{r4, r7, pc}

0800505a <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6839      	ldr	r1, [r7, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f001 fd9f 	bl	8006bac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 800506e:	4603      	mov	r3, r0
    }
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4618      	mov	r0, r3
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>:
  ValueExpr() {}
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4618      	mov	r0, r3
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>:

template<typename Arg0, typename Arg1>
class AddExpr : public BaseExpr<AddExpr<Arg0,Arg1> >
{
public:
  AddExpr(const Arg0& arg0, const Arg1& arg1) : m_arg0(arg0), m_arg1(arg1) {}
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    EIGEN_MATRIX_FUNCTION_1(MatrixPowerReturnValue,        pow, power to \c p, const RealScalar& p)
    EIGEN_MATRIX_FUNCTION_1(MatrixComplexPowerReturnValue, pow, power to \c p, const std::complex<RealScalar>& p)

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(MatrixBase)
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MatrixBase)
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f001 fd89 	bl	8006bde <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    // Prevent user from trying to instantiate PlainObjectBase objects
    // by making all its constructor protected. See bug 1074.
  protected:

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff ffed 	bl	80050be <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f001 fd84 	bl	8006bf4 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>
    {
//       _check_template_params();
//       EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void swap(DenseBase<OtherDerived> const & other)
    { Base::swap(other.derived()); }

    EIGEN_DEVICE_FUNC
    static EIGEN_STRONG_INLINE void _check_template_params()
 80050f6:	b480      	push	{r7}
 80050f8:	af00      	add	r7, sp, #0
                        && ((MaxColsAtCompileTime == Dynamic) || (MaxColsAtCompileTime >= 0))
                        && (MaxRowsAtCompileTime == RowsAtCompileTime || RowsAtCompileTime==Dynamic)
                        && (MaxColsAtCompileTime == ColsAtCompileTime || ColsAtCompileTime==Dynamic)
                        && (Options & (DontAlign|RowMajor)) == Options),
        INVALID_MATRIX_TEMPLATE_PARAMETERS)
    }
 80050fa:	bf00      	nop
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f001 fd7e 	bl	8006c0e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4618      	mov	r0, r3
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7ff ffed 	bl	8005104 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4618      	mov	r0, r3
 800512e:	f001 fd79 	bl	8006c24 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>
    }
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4618      	mov	r0, r3
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
    }
 8005140:	bf00      	nop
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f001 fd73 	bl	8006c3e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff ffed 	bl	800514a <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4618      	mov	r0, r3
 8005174:	f001 fd6e 	bl	8006c54 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>
    }
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8005182:	b480      	push	{r7}
 8005184:	af00      	add	r7, sp, #0
    }
 8005186:	bf00      	nop
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 fd68 	bl	8006c6e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff ffed 	bl	8005190 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f001 fd63 	bl	8006c84 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>
    }
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
    }
 80051cc:	bf00      	nop
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	605a      	str	r2, [r3, #4]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2201      	movs	r2, #1
 80051f4:	609a      	str	r2, [r3, #8]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f000 f86a 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	dd07      	ble.n	800521c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x44>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4618      	mov	r0, r3
 8005212:	f000 f857 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	dc05      	bgt.n	8005228 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x50>
 800521c:	4b0b      	ldr	r3, [pc, #44]	; (800524c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x74>)
 800521e:	4a0c      	ldr	r2, [pc, #48]	; (8005250 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x78>)
 8005220:	2124      	movs	r1, #36	; 0x24
 8005222:	480c      	ldr	r0, [pc, #48]	; (8005254 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x7c>)
 8005224:	f018 ffb6 	bl	801e194 <__assert_func>
 8005228:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	2100      	movs	r1, #0
 8005232:	4618      	mov	r0, r3
 8005234:	f000 f85c 	bl	80052f0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8005238:	4602      	mov	r2, r0
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6013      	str	r3, [r2, #0]
  }
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	0801f8b8 	.word	0x0801f8b8
 8005250:	0801f914 	.word	0x0801f914
 8005254:	0801f324 	.word	0x0801f324

08005258 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8005258:	b590      	push	{r4, r7, lr}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	18d4      	adds	r4, r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f000 f833 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005274:	4603      	mov	r3, r0
 8005276:	429c      	cmp	r4, r3
 8005278:	d007      	beq.n	800528a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x32>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f000 f820 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x46>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689c      	ldr	r4, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f000 f816 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005298:	4603      	mov	r3, r0
 800529a:	429c      	cmp	r4, r3
 800529c:	d005      	beq.n	80052aa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x52>
 800529e:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x60>)
 80052a0:	4a06      	ldr	r2, [pc, #24]	; (80052bc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x64>)
 80052a2:	217a      	movs	r1, #122	; 0x7a
 80052a4:	4806      	ldr	r0, [pc, #24]	; (80052c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x68>)
 80052a6:	f018 ff75 	bl	801e194 <__assert_func>
 80052aa:	bf00      	nop
      return m_xpr;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
  }
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd90      	pop	{r4, r7, pc}
 80052b8:	0801f9c4 	.word	0x0801f9c4
 80052bc:	0801fa64 	.word	0x0801fa64
 80052c0:	0801f324 	.word	0x0801f324

080052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	f001 fce7 	bl	8006c9e <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>
 80052d0:	4603      	mov	r3, r0
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 80052da:	b580      	push	{r7, lr}
 80052dc:	b082      	sub	sp, #8
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	f001 fce4 	bl	8006cae <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 80052e6:	4603      	mov	r3, r0
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 80052f0:	b590      	push	{r4, r7, lr}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4618      	mov	r0, r3
 8005300:	f001 fcdd 	bl	8006cbe <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 8005304:	4604      	mov	r4, r0
 8005306:	f001 fcd2 	bl	8006cae <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 800530a:	4602      	mov	r2, r0
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	fb03 f202 	mul.w	r2, r3, r2
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4423      	add	r3, r4
    }
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	bd90      	pop	{r4, r7, pc}
	...

08005324 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	605a      	str	r2, [r3, #4]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	609a      	str	r2, [r3, #8]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f000 f86a 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	dd07      	ble.n	8005368 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x44>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4618      	mov	r0, r3
 800535e:	f000 f857 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	dc05      	bgt.n	8005374 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x50>
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x74>)
 800536a:	4a0c      	ldr	r2, [pc, #48]	; (800539c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x78>)
 800536c:	2124      	movs	r1, #36	; 0x24
 800536e:	480c      	ldr	r0, [pc, #48]	; (80053a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x7c>)
 8005370:	f018 ff10 	bl	801e194 <__assert_func>
 8005374:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2200      	movs	r2, #0
 800537c:	2100      	movs	r1, #0
 800537e:	4618      	mov	r0, r3
 8005380:	f000 f85c 	bl	800543c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 8005384:	4602      	mov	r2, r0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6013      	str	r3, [r2, #0]
  }
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	0801f8b8 	.word	0x0801f8b8
 800539c:	0801facc 	.word	0x0801facc
 80053a0:	0801f324 	.word	0x0801f324

080053a4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 80053a4:	b590      	push	{r4, r7, lr}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	18d4      	adds	r4, r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 f833 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80053c0:	4603      	mov	r3, r0
 80053c2:	429c      	cmp	r4, r3
 80053c4:	d007      	beq.n	80053d6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x32>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 f820 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d109      	bne.n	80053ea <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x46>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689c      	ldr	r4, [r3, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f816 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80053e4:	4603      	mov	r3, r0
 80053e6:	429c      	cmp	r4, r3
 80053e8:	d005      	beq.n	80053f6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x52>
 80053ea:	4b06      	ldr	r3, [pc, #24]	; (8005404 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x60>)
 80053ec:	4a06      	ldr	r2, [pc, #24]	; (8005408 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x64>)
 80053ee:	217a      	movs	r1, #122	; 0x7a
 80053f0:	4806      	ldr	r0, [pc, #24]	; (800540c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x68>)
 80053f2:	f018 fecf 	bl	801e194 <__assert_func>
 80053f6:	bf00      	nop
      return m_xpr;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
  }
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	bd90      	pop	{r4, r7, pc}
 8005404:	0801f9c4 	.word	0x0801f9c4
 8005408:	0801fb7c 	.word	0x0801fb7c
 800540c:	0801f324 	.word	0x0801f324

08005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	f001 fc5c 	bl	8006cd4 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>
 800541c:	4603      	mov	r3, r0
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	f001 fc59 	bl	8006ce4 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 8005432:	4603      	mov	r3, r0
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4618      	mov	r0, r3
 800544c:	f001 fc52 	bl	8006cf4 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 8005450:	4604      	mov	r4, r0
 8005452:	f001 fc47 	bl	8006ce4 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 8005456:	4602      	mov	r2, r0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	fb03 f202 	mul.w	r2, r3, r2
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4423      	add	r3, r4
    }
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	bd90      	pop	{r4, r7, pc}
	...

08005470 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	605a      	str	r2, [r3, #4]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2201      	movs	r2, #1
 800548c:	609a      	str	r2, [r3, #8]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f000 ff0e 	bl	80062ba <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	dd07      	ble.n	80054b4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x44>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 ff11 	bl	80062d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	dc05      	bgt.n	80054c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x50>
 80054b4:	4b0b      	ldr	r3, [pc, #44]	; (80054e4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x74>)
 80054b6:	4a0c      	ldr	r2, [pc, #48]	; (80054e8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x78>)
 80054b8:	2124      	movs	r1, #36	; 0x24
 80054ba:	480c      	ldr	r0, [pc, #48]	; (80054ec <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x7c>)
 80054bc:	f018 fe6a 	bl	801e194 <__assert_func>
 80054c0:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2200      	movs	r2, #0
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f001 fc1d 	bl	8006d0a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 80054d0:	4602      	mov	r2, r0
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6013      	str	r3, [r2, #0]
  }
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	0801f8b8 	.word	0x0801f8b8
 80054e8:	0801fbe4 	.word	0x0801fbe4
 80054ec:	0801f324 	.word	0x0801f324

080054f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 80054f0:	b590      	push	{r4, r7, lr}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	18d4      	adds	r4, r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fed7 	bl	80062ba <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800550c:	4603      	mov	r3, r0
 800550e:	429c      	cmp	r4, r3
 8005510:	d007      	beq.n	8005522 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x32>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f000 feda 	bl	80062d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d109      	bne.n	8005536 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x46>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689c      	ldr	r4, [r3, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fed0 	bl	80062d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005530:	4603      	mov	r3, r0
 8005532:	429c      	cmp	r4, r3
 8005534:	d005      	beq.n	8005542 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x52>
 8005536:	4b06      	ldr	r3, [pc, #24]	; (8005550 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x60>)
 8005538:	4a06      	ldr	r2, [pc, #24]	; (8005554 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x64>)
 800553a:	217a      	movs	r1, #122	; 0x7a
 800553c:	4806      	ldr	r0, [pc, #24]	; (8005558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x68>)
 800553e:	f018 fe29 	bl	801e194 <__assert_func>
 8005542:	bf00      	nop
      return m_xpr;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
  }
 8005548:	4618      	mov	r0, r3
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	bd90      	pop	{r4, r7, pc}
 8005550:	0801f9c4 	.word	0x0801f9c4
 8005554:	0801fc94 	.word	0x0801fc94
 8005558:	0801f324 	.word	0x0801f324

0800555c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	605a      	str	r2, [r3, #4]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2201      	movs	r2, #1
 8005578:	609a      	str	r2, [r3, #8]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4618      	mov	r0, r3
 8005586:	f000 f86a 	bl	800565e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	dd07      	ble.n	80055a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x44>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4618      	mov	r0, r3
 8005596:	f000 f857 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	dc05      	bgt.n	80055ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x50>
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x74>)
 80055a2:	4a0c      	ldr	r2, [pc, #48]	; (80055d4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x78>)
 80055a4:	2124      	movs	r1, #36	; 0x24
 80055a6:	480c      	ldr	r0, [pc, #48]	; (80055d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x7c>)
 80055a8:	f018 fdf4 	bl	801e194 <__assert_func>
 80055ac:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2200      	movs	r2, #0
 80055b4:	2100      	movs	r1, #0
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f85c 	bl	8005674 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 80055bc:	4602      	mov	r2, r0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6013      	str	r3, [r2, #0]
  }
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	0801f8b8 	.word	0x0801f8b8
 80055d4:	0801fcfc 	.word	0x0801fcfc
 80055d8:	0801f324 	.word	0x0801f324

080055dc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 80055dc:	b590      	push	{r4, r7, lr}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	18d4      	adds	r4, r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 f833 	bl	800565e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80055f8:	4603      	mov	r3, r0
 80055fa:	429c      	cmp	r4, r3
 80055fc:	d007      	beq.n	800560e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x32>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 f820 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x46>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689c      	ldr	r4, [r3, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f000 f816 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800561c:	4603      	mov	r3, r0
 800561e:	429c      	cmp	r4, r3
 8005620:	d005      	beq.n	800562e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x52>
 8005622:	4b06      	ldr	r3, [pc, #24]	; (800563c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x60>)
 8005624:	4a06      	ldr	r2, [pc, #24]	; (8005640 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x64>)
 8005626:	217a      	movs	r1, #122	; 0x7a
 8005628:	4806      	ldr	r0, [pc, #24]	; (8005644 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x68>)
 800562a:	f018 fdb3 	bl	801e194 <__assert_func>
 800562e:	bf00      	nop
      return m_xpr;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
  }
 8005634:	4618      	mov	r0, r3
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	bd90      	pop	{r4, r7, pc}
 800563c:	0801f9c4 	.word	0x0801f9c4
 8005640:	0801fdac 	.word	0x0801fdac
 8005644:	0801f324 	.word	0x0801f324

08005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	f001 fb74 	bl	8006d3c <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 8005654:	4603      	mov	r3, r0
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 800565e:	b580      	push	{r7, lr}
 8005660:	b082      	sub	sp, #8
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	f001 fb71 	bl	8006d4c <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>
 800566a:	4603      	mov	r3, r0
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8005674:	b590      	push	{r4, r7, lr}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
        return m_storage.data()[colId + rowId * m_storage.cols()];
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4618      	mov	r0, r3
 8005684:	f001 fb6a 	bl	8006d5c <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 8005688:	4604      	mov	r4, r0
 800568a:	f001 fb57 	bl	8006d3c <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 800568e:	4602      	mov	r2, r0
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	fb03 f202 	mul.w	r2, r3, r2
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4423      	add	r3, r4
    }
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd90      	pop	{r4, r7, pc}

080056a6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f855 	bl	800575e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80056b4:	4603      	mov	r3, r0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff feb5 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80056bc:	4603      	mov	r3, r0
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f845 	bl	800575e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80056d4:	4603      	mov	r3, r0
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7ff fe9a 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80056dc:	4603      	mov	r3, r0
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
protected:
  Index m_outerStride;
};

template<typename Derived>
struct evaluator<PlainObjectBase<Derived> >
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b082      	sub	sp, #8
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 fb4f 	bl	8006d92 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:

  plainobjectbase_evaluator_data<Scalar,OuterStrideAtCompileTime> m_d;
};

template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff ffec 	bl	80056e6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)
 8005718:	b590      	push	{r4, r7, lr}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
      return internal::evaluator<Derived>(derived()).coeffRef(row,col);
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f90f 	bl	8005948 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800572a:	4602      	mov	r2, r0
 800572c:	f107 0314 	add.w	r3, r7, #20
 8005730:	4611      	mov	r1, r2
 8005732:	4618      	mov	r0, r3
 8005734:	f001 fb1d 	bl	8006d72 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8005738:	f107 0314 	add.w	r3, r7, #20
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	4618      	mov	r0, r3
 8005742:	f001 fb31 	bl	8006da8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>
 8005746:	4604      	mov	r4, r0
 8005748:	bf00      	nop
 800574a:	f107 0314 	add.w	r3, r7, #20
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff ffd5 	bl	80056fe <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8005754:	4623      	mov	r3, r4
    }
 8005756:	4618      	mov	r0, r3
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	bd90      	pop	{r4, r7, pc}

0800575e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>:
namespace internal {

template<typename Scalar>
struct scalar_constant_op {
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const Scalar& other) : m_other(other) { }
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4618      	mov	r0, r3
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f001 fb1b 	bl	8006dd8 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>:

    typedef typename internal::dense_xpr_base<CwiseNullaryOp>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(CwiseNullaryOp)

    EIGEN_DEVICE_FUNC
    CwiseNullaryOp(Index rows, Index cols, const NullaryOp& func = NullaryOp())
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
      : m_rows(rows), m_cols(cols), m_functor(func)
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f7ff ffea 	bl	8005794 <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f001 fb13 	bl	8006df0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3301      	adds	r3, #1
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f001 fb27 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3304      	adds	r3, #4
 80057da:	6839      	ldr	r1, [r7, #0]
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 f897 	bl	8005910 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
    {
      eigen_assert(rows >= 0
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	db08      	blt.n	80057fa <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d105      	bne.n	80057fa <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	db02      	blt.n	80057fa <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d005      	beq.n	8005806 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x5a>
 80057fa:	4b05      	ldr	r3, [pc, #20]	; (8005810 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x64>)
 80057fc:	4a05      	ldr	r2, [pc, #20]	; (8005814 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x68>)
 80057fe:	2147      	movs	r1, #71	; 0x47
 8005800:	4805      	ldr	r0, [pc, #20]	; (8005818 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x6c>)
 8005802:	f018 fcc7 	bl	801e194 <__assert_func>
            && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
            &&  cols >= 0
            && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols));
    }
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	0801fe14 	.word	0x0801fe14
 8005814:	0801feac 	.word	0x0801feac
 8005818:	0801ffa0 	.word	0x0801ffa0

0800581c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_product_op  : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_product_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_product_op)
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4618      	mov	r0, r3
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f001 fb0c 	bl	8006e58 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>:
    const BinaryOp m_functor;
};

// Generic API dispatcher
template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
class CwiseBinaryOpImpl
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff ffed 	bl	8005832 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4618      	mov	r0, r3
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index rows() const { return m_rows.value(); }
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	f001 fb00 	bl	8006e6e <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800586e:	4603      	mov	r3, r0
 8005870:	4618      	mov	r0, r3
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index cols() const { return m_cols.value(); }
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	f001 fafd 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8005884:	4603      	mov	r3, r0
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005890:	b590      	push	{r4, r7, lr}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f7ff ffd3 	bl	800584a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3304      	adds	r3, #4
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff f871 	bl	8004998 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	330c      	adds	r3, #12
 80058ba:	6839      	ldr	r1, [r7, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 f837 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff fdae 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80058ca:	4604      	mov	r4, r0
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff ffc8 	bl	8005862 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80058d2:	4603      	mov	r3, r0
 80058d4:	429c      	cmp	r4, r3
 80058d6:	d10a      	bne.n	80058ee <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x5e>
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff fd98 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80058e0:	4604      	mov	r4, r0
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff ffc8 	bl	8005878 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80058e8:	4603      	mov	r3, r0
 80058ea:	429c      	cmp	r4, r3
 80058ec:	d005      	beq.n	80058fa <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x6a>
 80058ee:	4b05      	ldr	r3, [pc, #20]	; (8005904 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x74>)
 80058f0:	4a05      	ldr	r2, [pc, #20]	; (8005908 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x78>)
 80058f2:	2174      	movs	r1, #116	; 0x74
 80058f4:	4805      	ldr	r0, [pc, #20]	; (800590c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x7c>)
 80058f6:	f018 fc4d 	bl	801e194 <__assert_func>
    }
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	bd90      	pop	{r4, r7, pc}
 8005904:	0801fffc 	.word	0x0801fffc
 8005908:	08020038 	.word	0x08020038
 800590c:	08020260 	.word	0x08020260

08005910 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>:
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4618      	mov	r0, r3
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f001 fa91 	bl	8006e8e <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8005976:	b580      	push	{r7, lr}
 8005978:	b082      	sub	sp, #8
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff ffed 	bl	800595e <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4618      	mov	r0, r3
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800598e:	b580      	push	{r7, lr}
 8005990:	b082      	sub	sp, #8
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	6039      	str	r1, [r7, #0]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff ffec 	bl	8005976 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4618      	mov	r0, r3
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f001 fa5e 	bl	8006ea4 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>:
};

namespace internal {

template<typename Lhs, typename Rhs, int Option, int ProductTag = internal::product_type<Lhs,Rhs>::ret>
class dense_product_base
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b082      	sub	sp, #8
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff ffed 	bl	80059da <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4618      	mov	r0, r3
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>:
  public:
    typedef typename internal::generic_xpr_base<Product<Lhs,Rhs,Option>, MatrixXpr, StorageKind>::type Base;
};

template<typename Lhs, typename Rhs, int Option>
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b082      	sub	sp, #8
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff ffed 	bl	80059f2 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff fcee 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005a34:	4603      	mov	r3, r0
    }
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff fce0 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005a50:	4603      	mov	r3, r0
 8005a52:	4618      	mov	r0, r3
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
	...

08005a5c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005a5c:	b590      	push	{r4, r7, lr}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f7ff ffce 	bl	8005a0a <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fe ffee 	bl	8004a54 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3310      	adds	r3, #16
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6812      	ldr	r2, [r2, #0]
 8005a80:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005a82:	68b8      	ldr	r0, [r7, #8]
 8005a84:	f7ff ffcd 	bl	8005a22 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8005a88:	4604      	mov	r4, r0
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff ffd7 	bl	8005a3e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005a90:	4603      	mov	r3, r0
 8005a92:	429c      	cmp	r4, r3
 8005a94:	d005      	beq.n	8005aa2 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x46>
 8005a96:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x54>)
 8005a98:	4a06      	ldr	r2, [pc, #24]	; (8005ab4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x58>)
 8005a9a:	2160      	movs	r1, #96	; 0x60
 8005a9c:	4806      	ldr	r0, [pc, #24]	; (8005ab8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x5c>)
 8005a9e:	f018 fb79 	bl	801e194 <__assert_func>
 8005aa2:	bf00      	nop
    }
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd90      	pop	{r4, r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	080202bc 	.word	0x080202bc
 8005ab4:	08020348 	.word	0x08020348
 8005ab8:	0802060c 	.word	0x0802060c

08005abc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005abc:	b590      	push	{r4, r7, lr}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f8da 	bl	8005c80 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005acc:	4604      	mov	r4, r0
 8005ace:	6838      	ldr	r0, [r7, #0]
 8005ad0:	f001 f9f3 	bl	8006eba <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f001 f9f9 	bl	8006ed0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>
      return this->derived();
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f8ce 	bl	8005c80 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005ae4:	4603      	mov	r3, r0
    }
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd90      	pop	{r4, r7, pc}

08005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f001 f9f4 	bl	8006efa <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4618      	mov	r0, r3
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>:
class dense_product_base
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff ffed 	bl	8005b04 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7ff ffed 	bl	8005b1c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005b4c:	b590      	push	{r4, r7, lr}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f7ff ffeb 	bl	8005b34 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff fba9 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005b72:	4604      	mov	r4, r0
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff fc55 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	429c      	cmp	r4, r3
 8005b80:	d005      	beq.n	8005b8e <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 8005b82:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005b84:	4a06      	ldr	r2, [pc, #24]	; (8005ba0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 8005b86:	2160      	movs	r1, #96	; 0x60
 8005b88:	4806      	ldr	r0, [pc, #24]	; (8005ba4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005b8a:	f018 fb03 	bl	801e194 <__assert_func>
 8005b8e:	bf00      	nop
    }
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd90      	pop	{r4, r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	080202bc 	.word	0x080202bc
 8005ba0:	08020660 	.word	0x08020660
 8005ba4:	0802060c 	.word	0x0802060c

08005ba8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005ba8:	b590      	push	{r4, r7, lr}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff fec8 	bl	8005948 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005bb8:	4604      	mov	r4, r0
 8005bba:	6838      	ldr	r0, [r7, #0]
 8005bbc:	f001 f9a8 	bl	8006f10 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f001 f9ae 	bl	8006f26 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff febc 	bl	8005948 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005bd0:	4603      	mov	r3, r0
    }
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd90      	pop	{r4, r7, pc}

08005bda <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b082      	sub	sp, #8
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f001 f9b4 	bl	8006f50 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>:
class dense_product_base
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff ffed 	bl	8005bda <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4618      	mov	r0, r3
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b082      	sub	sp, #8
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff ffed 	bl	8005bf2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005c24:	b590      	push	{r4, r7, lr}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f7ff ffea 	bl	8005c0a <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7ff fb3d 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff fb43 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005c54:	4603      	mov	r3, r0
 8005c56:	429c      	cmp	r4, r3
 8005c58:	d005      	beq.n	8005c66 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x42>
 8005c5a:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x50>)
 8005c5c:	4a06      	ldr	r2, [pc, #24]	; (8005c78 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x54>)
 8005c5e:	2160      	movs	r1, #96	; 0x60
 8005c60:	4806      	ldr	r0, [pc, #24]	; (8005c7c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x58>)
 8005c62:	f018 fa97 	bl	801e194 <__assert_func>
 8005c66:	bf00      	nop
    }
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd90      	pop	{r4, r7, pc}
 8005c72:	bf00      	nop
 8005c74:	080202bc 	.word	0x080202bc
 8005c78:	08020788 	.word	0x08020788
 8005c7c:	0802060c 	.word	0x0802060c

08005c80 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f001 f961 	bl	8006f66 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b082      	sub	sp, #8
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7ff ffed 	bl	8005c96 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b082      	sub	sp, #8
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	6039      	str	r1, [r7, #0]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff ffec 	bl	8005cae <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>:
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4618      	mov	r0, r3
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f001 f92e 	bl	8006f7c <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>:
class dense_product_base
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7ff ffed 	bl	8005d12 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff ffed 	bl	8005d2a <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b082      	sub	sp, #8
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff faac 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b082      	sub	sp, #8
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff fa9e 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005d94:	b590      	push	{r4, r7, lr}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f7ff ffce 	bl	8005d42 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005dae:	e883 0003 	stmia.w	r3, {r0, r1}
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3308      	adds	r3, #8
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6812      	ldr	r2, [r2, #0]
 8005dba:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005dbc:	68b8      	ldr	r0, [r7, #8]
 8005dbe:	f7ff ffcc 	bl	8005d5a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff ffd6 	bl	8005d76 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	429c      	cmp	r4, r3
 8005dce:	d005      	beq.n	8005ddc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x48>
 8005dd0:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x54>)
 8005dd2:	4a06      	ldr	r2, [pc, #24]	; (8005dec <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x58>)
 8005dd4:	2160      	movs	r1, #96	; 0x60
 8005dd6:	4806      	ldr	r0, [pc, #24]	; (8005df0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x5c>)
 8005dd8:	f018 f9dc 	bl	801e194 <__assert_func>
 8005ddc:	bf00      	nop
    }
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd90      	pop	{r4, r7, pc}
 8005de8:	080202bc 	.word	0x080202bc
 8005dec:	080208b0 	.word	0x080208b0
 8005df0:	0802060c 	.word	0x0802060c

08005df4 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>:
  EIGEN_EMPTY_STRUCT_CTOR(scalar_sum_op)
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4618      	mov	r0, r3
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f001 f8b2 	bl	8006f92 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff ffed 	bl	8005e20 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f001 f8a4 	bl	8006fa8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 8005e60:	4603      	mov	r3, r0
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3308      	adds	r3, #8
 8005e76:	4618      	mov	r0, r3
 8005e78:	f001 f8a4 	bl	8006fc4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005e88:	b590      	push	{r4, r7, lr}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f7ff ffce 	bl	8005e38 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ea2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	60da      	str	r2, [r3, #12]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3310      	adds	r3, #16
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 f828 	bl	8005f08 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005eb8:	68b8      	ldr	r0, [r7, #8]
 8005eba:	f7ff ffc9 	bl	8005e50 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8005ebe:	4604      	mov	r4, r0
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff fa09 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	429c      	cmp	r4, r3
 8005ecc:	d10a      	bne.n	8005ee4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x5c>
 8005ece:	68b8      	ldr	r0, [r7, #8]
 8005ed0:	f7ff ffcb 	bl	8005e6a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff f9f3 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	429c      	cmp	r4, r3
 8005ee2:	d005      	beq.n	8005ef0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x68>
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x74>)
 8005ee6:	4a06      	ldr	r2, [pc, #24]	; (8005f00 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x78>)
 8005ee8:	2174      	movs	r1, #116	; 0x74
 8005eea:	4806      	ldr	r0, [pc, #24]	; (8005f04 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x7c>)
 8005eec:	f018 f952 	bl	801e194 <__assert_func>
    }
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd90      	pop	{r4, r7, pc}
 8005efa:	bf00      	nop
 8005efc:	0801fffc 	.word	0x0801fffc
 8005f00:	08020a5c 	.word	0x08020a5c
 8005f04:	08020260 	.word	0x08020260

08005f08 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>:
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005f20:	b590      	push	{r4, r7, lr}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff fea8 	bl	8005c80 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005f30:	4604      	mov	r4, r0
 8005f32:	6838      	ldr	r0, [r7, #0]
 8005f34:	f001 f854 	bl	8006fe0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f001 f85a 	bl	8006ff6 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>
      return this->derived();
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff fe9c 	bl	8005c80 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005f48:	4603      	mov	r3, r0
    }
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd90      	pop	{r4, r7, pc}

08005f52 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f001 f855 	bl	8007020 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff ffed 	bl	8005f68 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4618      	mov	r0, r3
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff ffec 	bl	8005f80 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b082      	sub	sp, #8
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f001 f82d 	bl	8007036 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>:
class dense_product_base
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b082      	sub	sp, #8
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7ff ffed 	bl	8005fce <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff ffed 	bl	8005fe6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff fb10 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8006028:	4603      	mov	r3, r0
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
	...

08006034 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006034:	b590      	push	{r4, r7, lr}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f7ff ffdc 	bl	8005ffe <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3304      	adds	r3, #4
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6812      	ldr	r2, [r2, #0]
 8006054:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	4618      	mov	r0, r3
 800605a:	f7ff f933 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800605e:	4604      	mov	r4, r0
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff ffd8 	bl	8006016 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006066:	4603      	mov	r3, r0
 8006068:	429c      	cmp	r4, r3
 800606a:	d005      	beq.n	8006078 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x44>
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x50>)
 800606e:	4a06      	ldr	r2, [pc, #24]	; (8006088 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x54>)
 8006070:	2160      	movs	r1, #96	; 0x60
 8006072:	4806      	ldr	r0, [pc, #24]	; (800608c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x58>)
 8006074:	f018 f88e 	bl	801e194 <__assert_func>
 8006078:	bf00      	nop
    }
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	bd90      	pop	{r4, r7, pc}
 8006084:	080202bc 	.word	0x080202bc
 8006088:	08020cd0 	.word	0x08020cd0
 800608c:	0802060c 	.word	0x0802060c

08006090 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4618      	mov	r0, r3
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 ffcc 	bl	800704c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>:
class dense_product_base
 80060be:	b580      	push	{r7, lr}
 80060c0:	b082      	sub	sp, #8
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff ffed 	bl	80060a6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4618      	mov	r0, r3
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b082      	sub	sp, #8
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7ff ffed 	bl	80060be <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80060f0:	b590      	push	{r4, r7, lr}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f7ff ffea 	bl	80060d6 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fa99 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8006116:	4604      	mov	r4, r0
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff f8dd 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006120:	4603      	mov	r3, r0
 8006122:	429c      	cmp	r4, r3
 8006124:	d005      	beq.n	8006132 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 8006126:	4b06      	ldr	r3, [pc, #24]	; (8006140 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8006128:	4a06      	ldr	r2, [pc, #24]	; (8006144 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 800612a:	2160      	movs	r1, #96	; 0x60
 800612c:	4806      	ldr	r0, [pc, #24]	; (8006148 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 800612e:	f018 f831 	bl	801e194 <__assert_func>
 8006132:	bf00      	nop
    }
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	bd90      	pop	{r4, r7, pc}
 800613e:	bf00      	nop
 8006140:	080202bc 	.word	0x080202bc
 8006144:	08020e1c 	.word	0x08020e1c
 8006148:	0802060c 	.word	0x0802060c

0800614c <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>:
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 8006162:	b580      	push	{r7, lr}
 8006164:	b082      	sub	sp, #8
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 ff79 	bl	8007062 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 800617a:	b580      	push	{r7, lr}
 800617c:	b082      	sub	sp, #8
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff ffed 	bl	8006162 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4618      	mov	r0, r3
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff ffed 	bl	800617a <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b082      	sub	sp, #8
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff f884 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80061bc:	4603      	mov	r3, r0
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80061c8:	b590      	push	{r4, r7, lr}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f7ff ffdc 	bl	8006192 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061e2:	e883 0003 	stmia.w	r3, {r0, r1}
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3308      	adds	r3, #8
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6812      	ldr	r2, [r2, #0]
 80061ee:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 80061f0:	68b8      	ldr	r0, [r7, #8]
 80061f2:	f7ff ffda 	bl	80061aa <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 80061f6:	4604      	mov	r4, r0
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff ff0c 	bl	8006016 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80061fe:	4603      	mov	r3, r0
 8006200:	429c      	cmp	r4, r3
 8006202:	d005      	beq.n	8006210 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x48>
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x54>)
 8006206:	4a06      	ldr	r2, [pc, #24]	; (8006220 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x58>)
 8006208:	2160      	movs	r1, #96	; 0x60
 800620a:	4806      	ldr	r0, [pc, #24]	; (8006224 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x5c>)
 800620c:	f017 ffc2 	bl	801e194 <__assert_func>
 8006210:	bf00      	nop
    }
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4618      	mov	r0, r3
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	bd90      	pop	{r4, r7, pc}
 800621c:	080202bc 	.word	0x080202bc
 8006220:	08020f44 	.word	0x08020f44
 8006224:	0802060c 	.word	0x0802060c

08006228 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4618      	mov	r0, r3
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 ff0b 	bl	8007078 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4618      	mov	r0, r3
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff ffed 	bl	8006254 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4618      	mov	r0, r3
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fefd 	bl	800708e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8006294:	4603      	mov	r3, r0
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800629e:	b580      	push	{r7, lr}
 80062a0:	b082      	sub	sp, #8
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3308      	adds	r3, #8
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fefd 	bl	80070aa <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80062b0:	4603      	mov	r3, r0
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	f000 ff00 	bl	80070c6 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 80062c6:	4603      	mov	r3, r0
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	f000 fefd 	bl	80070d6 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>
 80062dc:	4603      	mov	r3, r0
 80062de:	4618      	mov	r0, r3
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80062e8:	b590      	push	{r4, r7, lr}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f7ff ffb8 	bl	800626c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	ca07      	ldmia	r2, {r0, r1, r2}
 8006302:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	60da      	str	r2, [r3, #12]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3310      	adds	r3, #16
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff fdf8 	bl	8005f08 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8006318:	68b8      	ldr	r0, [r7, #8]
 800631a:	f7ff ffb3 	bl	8006284 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 800631e:	4604      	mov	r4, r0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff ffc9 	bl	80062ba <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8006328:	4603      	mov	r3, r0
 800632a:	429c      	cmp	r4, r3
 800632c:	d10a      	bne.n	8006344 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x5c>
 800632e:	68b8      	ldr	r0, [r7, #8]
 8006330:	f7ff ffb5 	bl	800629e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8006334:	4604      	mov	r4, r0
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff ffc9 	bl	80062d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800633e:	4603      	mov	r3, r0
 8006340:	429c      	cmp	r4, r3
 8006342:	d005      	beq.n	8006350 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x68>
 8006344:	4b05      	ldr	r3, [pc, #20]	; (800635c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x74>)
 8006346:	4a06      	ldr	r2, [pc, #24]	; (8006360 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x78>)
 8006348:	2174      	movs	r1, #116	; 0x74
 800634a:	4806      	ldr	r0, [pc, #24]	; (8006364 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x7c>)
 800634c:	f017 ff22 	bl	801e194 <__assert_func>
    }
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	bd90      	pop	{r4, r7, pc}
 800635a:	bf00      	nop
 800635c:	0801fffc 	.word	0x0801fffc
 8006360:	080210f0 	.word	0x080210f0
 8006364:	08020260 	.word	0x08020260

08006368 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>:
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4618      	mov	r0, r3
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800637e:	b580      	push	{r7, lr}
 8006380:	b082      	sub	sp, #8
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff ff7b 	bl	8006284 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 800638e:	4603      	mov	r3, r0
    }
 8006390:	4618      	mov	r0, r3
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff ff7b 	bl	800629e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 80063a8:	4603      	mov	r3, r0
    }
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b082      	sub	sp, #8
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fe93 	bl	80070e6 <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>:
  XprTypeNested m_xpr;
};

// Generic API dispatcher
template<typename XprType, typename StorageKind>
class InverseImpl
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff ffed 	bl	80063b2 <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit EIGEN_DEVICE_FUNC Inverse(const XprType &xpr)
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6039      	str	r1, [r7, #0]
    : m_xpr(xpr)
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff ffec 	bl	80063ca <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe fc9b 	bl	8004d32 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
  {}
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>:
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>:
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4618      	mov	r0, r3
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
 8006432:	b580      	push	{r7, lr}
 8006434:	b082      	sub	sp, #8
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fe5e 	bl	80070fc <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4618      	mov	r0, r3
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>:
class dense_product_base
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7ff ffed 	bl	8006432 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8006462:	b580      	push	{r7, lr}
 8006464:	b082      	sub	sp, #8
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7ff ffed 	bl	800644a <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4618      	mov	r0, r3
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3304      	adds	r3, #4
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fe0f 	bl	80070aa <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800648c:	4603      	mov	r3, r0
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index rows() const EIGEN_NOEXCEPT { return m_xpr.cols(); }
 8006496:	b580      	push	{r7, lr}
 8006498:	b082      	sub	sp, #8
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff ff79 	bl	8006398 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80064a6:	4603      	mov	r3, r0
 80064a8:	4618      	mov	r0, r3
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80064b0:	b590      	push	{r4, r7, lr}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff ffd0 	bl	8006462 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3308      	adds	r3, #8
 80064d2:	6879      	ldr	r1, [r7, #4]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fe fc71 	bl	8004dbc <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 80064da:	68b8      	ldr	r0, [r7, #8]
 80064dc:	f7ff ffcd 	bl	800647a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 80064e0:	4604      	mov	r4, r0
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff ffd7 	bl	8006496 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 80064e8:	4603      	mov	r3, r0
 80064ea:	429c      	cmp	r4, r3
 80064ec:	d005      	beq.n	80064fa <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x4a>
 80064ee:	4b06      	ldr	r3, [pc, #24]	; (8006508 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x58>)
 80064f0:	4a06      	ldr	r2, [pc, #24]	; (800650c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x5c>)
 80064f2:	2160      	movs	r1, #96	; 0x60
 80064f4:	4806      	ldr	r0, [pc, #24]	; (8006510 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x60>)
 80064f6:	f017 fe4d 	bl	801e194 <__assert_func>
 80064fa:	bf00      	nop
    }
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4618      	mov	r0, r3
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	bd90      	pop	{r4, r7, pc}
 8006506:	bf00      	nop
 8006508:	080202bc 	.word	0x080202bc
 800650c:	08021364 	.word	0x08021364
 8006510:	0802060c 	.word	0x0802060c

08006514 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8006514:	b590      	push	{r4, r7, lr}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff fa12 	bl	8005948 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006524:	4604      	mov	r4, r0
 8006526:	6838      	ldr	r0, [r7, #0]
 8006528:	f000 fdf3 	bl	8007112 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 800652c:	4603      	mov	r3, r0
 800652e:	4619      	mov	r1, r3
 8006530:	4620      	mov	r0, r4
 8006532:	f000 fdf9 	bl	8007128 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>
      return this->derived();
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff fa06 	bl	8005948 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800653c:	4603      	mov	r3, r0
    }
 800653e:	4618      	mov	r0, r3
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	bd90      	pop	{r4, r7, pc}

08006546 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fdff 	bl	8007152 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7ff ffed 	bl	8006546 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8006576:	b580      	push	{r7, lr}
 8006578:	b082      	sub	sp, #8
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7ff ffed 	bl	800655e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006590:	b590      	push	{r4, r7, lr}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f7ff ffea 	bl	8006576 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff f849 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80065b6:	4604      	mov	r4, r0
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fe ff33 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80065c0:	4603      	mov	r3, r0
 80065c2:	429c      	cmp	r4, r3
 80065c4:	d005      	beq.n	80065d2 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 80065c6:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 80065c8:	4a06      	ldr	r2, [pc, #24]	; (80065e4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 80065ca:	2160      	movs	r1, #96	; 0x60
 80065cc:	4806      	ldr	r0, [pc, #24]	; (80065e8 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 80065ce:	f017 fde1 	bl	801e194 <__assert_func>
 80065d2:	bf00      	nop
    }
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd90      	pop	{r4, r7, pc}
 80065de:	bf00      	nop
 80065e0:	080202bc 	.word	0x080202bc
 80065e4:	080216ec 	.word	0x080216ec
 80065e8:	0802060c 	.word	0x0802060c

080065ec <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4618      	mov	r0, r3
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_difference_op : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_difference_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_difference_op)
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fda1 	bl	8007168 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff ffed 	bl	8006618 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff f802 	bl	800565e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800665a:	4603      	mov	r3, r0
 800665c:	4618      	mov	r0, r3
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	4618      	mov	r0, r3
 8006672:	f7fe fecd 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006676:	4603      	mov	r3, r0
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8006680:	b590      	push	{r4, r7, lr}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f7ff ffce 	bl	8006630 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3304      	adds	r3, #4
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	330c      	adds	r3, #12
 80066ac:	6839      	ldr	r1, [r7, #0]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 f828 	bl	8006704 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7ff fdff 	bl	80062ba <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80066bc:	4604      	mov	r4, r0
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff ffc2 	bl	8006648 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 80066c4:	4603      	mov	r3, r0
 80066c6:	429c      	cmp	r4, r3
 80066c8:	d10a      	bne.n	80066e0 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7ff fdff 	bl	80062d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80066d2:	4604      	mov	r4, r0
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7ff ffc5 	bl	8006664 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 80066da:	4603      	mov	r3, r0
 80066dc:	429c      	cmp	r4, r3
 80066de:	d005      	beq.n	80066ec <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 80066e0:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 80066e2:	4a06      	ldr	r2, [pc, #24]	; (80066fc <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 80066e4:	2174      	movs	r1, #116	; 0x74
 80066e6:	4806      	ldr	r0, [pc, #24]	; (8006700 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 80066e8:	f017 fd54 	bl	801e194 <__assert_func>
    }
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd90      	pop	{r4, r7, pc}
 80066f6:	bf00      	nop
 80066f8:	0801fffc 	.word	0x0801fffc
 80066fc:	08021814 	.word	0x08021814
 8006700:	08020260 	.word	0x08020260

08006704 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>:
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>:
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fd1f 	bl	800717e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>:
class dense_product_base
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff ffed 	bl	8006732 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff ffed 	bl	800674a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800677a:	b580      	push	{r7, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff fd97 	bl	80062ba <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800678c:	4603      	mov	r3, r0
    }
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006798:	b590      	push	{r4, r7, lr}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f7ff ffdc 	bl	8006762 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3304      	adds	r3, #4
 80067b4:	6879      	ldr	r1, [r7, #4]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fe fb6b 	bl	8004e92 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe fe26 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80067c4:	4604      	mov	r4, r0
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7ff ffd7 	bl	800677a <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 80067cc:	4603      	mov	r3, r0
 80067ce:	429c      	cmp	r4, r3
 80067d0:	d005      	beq.n	80067de <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x46>
 80067d2:	4b06      	ldr	r3, [pc, #24]	; (80067ec <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x54>)
 80067d4:	4a06      	ldr	r2, [pc, #24]	; (80067f0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x58>)
 80067d6:	2160      	movs	r1, #96	; 0x60
 80067d8:	4806      	ldr	r0, [pc, #24]	; (80067f4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x5c>)
 80067da:	f017 fcdb 	bl	801e194 <__assert_func>
 80067de:	bf00      	nop
    }
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd90      	pop	{r4, r7, pc}
 80067ea:	bf00      	nop
 80067ec:	080202bc 	.word	0x080202bc
 80067f0:	08021a0c 	.word	0x08021a0c
 80067f4:	0802060c 	.word	0x0802060c

080067f8 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>:
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4618      	mov	r0, r3
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
 800680e:	b580      	push	{r7, lr}
 8006810:	b082      	sub	sp, #8
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fcbc 	bl	8007194 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff ffed 	bl	800680e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800683e:	b580      	push	{r7, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe fdeb 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8006850:	4603      	mov	r3, r0
 8006852:	4618      	mov	r0, r3
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3304      	adds	r3, #4
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fc9f 	bl	80071aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 800686c:	4603      	mov	r3, r0
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8006878:	b590      	push	{r4, r7, lr}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f7ff ffcd 	bl	8006826 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	601a      	str	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3304      	adds	r3, #4
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	4618      	mov	r0, r3
 800689a:	f7fe fb30 	bl	8004efe <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3318      	adds	r3, #24
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7ff fb2f 	bl	8005f08 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fe fdba 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80068b2:	4604      	mov	r4, r0
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff ffc2 	bl	800683e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 80068ba:	4603      	mov	r3, r0
 80068bc:	429c      	cmp	r4, r3
 80068be:	d10a      	bne.n	80068d6 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x5e>
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe fda4 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80068c8:	4604      	mov	r4, r0
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff ffc5 	bl	800685a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 80068d0:	4603      	mov	r3, r0
 80068d2:	429c      	cmp	r4, r3
 80068d4:	d005      	beq.n	80068e2 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x6a>
 80068d6:	4b05      	ldr	r3, [pc, #20]	; (80068ec <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x74>)
 80068d8:	4a05      	ldr	r2, [pc, #20]	; (80068f0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x78>)
 80068da:	2174      	movs	r1, #116	; 0x74
 80068dc:	4805      	ldr	r0, [pc, #20]	; (80068f4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x7c>)
 80068de:	f017 fc59 	bl	801e194 <__assert_func>
    }
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4618      	mov	r0, r3
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd90      	pop	{r4, r7, pc}
 80068ec:	0801fffc 	.word	0x0801fffc
 80068f0:	08021c78 	.word	0x08021c78
 80068f4:	08020260 	.word	0x08020260

080068f8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 80068f8:	b590      	push	{r4, r7, lr}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7ff f820 	bl	8005948 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006908:	4604      	mov	r4, r0
 800690a:	6838      	ldr	r0, [r7, #0]
 800690c:	f000 fc5b 	bl	80071c6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 8006910:	4603      	mov	r3, r0
 8006912:	4619      	mov	r1, r3
 8006914:	4620      	mov	r0, r4
 8006916:	f000 fc61 	bl	80071dc <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>
      return this->derived();
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff f814 	bl	8005948 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006920:	4603      	mov	r3, r0
    }
 8006922:	4618      	mov	r0, r3
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	bd90      	pop	{r4, r7, pc}

0800692a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fc67 	bl	8007206 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>:
class dense_product_base
 8006942:	b580      	push	{r7, lr}
 8006944:	b082      	sub	sp, #8
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff ffed 	bl	800692a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800695a:	b580      	push	{r7, lr}
 800695c:	b082      	sub	sp, #8
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7ff ffed 	bl	8006942 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006974:	b590      	push	{r4, r7, lr}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f7ff ffea 	bl	800695a <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	4618      	mov	r0, r3
 8006996:	f7fe fd3b 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800699a:	4604      	mov	r4, r0
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fe fe5d 	bl	800565e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80069a4:	4603      	mov	r3, r0
 80069a6:	429c      	cmp	r4, r3
 80069a8:	d005      	beq.n	80069b6 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 80069aa:	4b06      	ldr	r3, [pc, #24]	; (80069c4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 80069ac:	4a06      	ldr	r2, [pc, #24]	; (80069c8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 80069ae:	2160      	movs	r1, #96	; 0x60
 80069b0:	4806      	ldr	r0, [pc, #24]	; (80069cc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 80069b2:	f017 fbef 	bl	801e194 <__assert_func>
 80069b6:	bf00      	nop
    }
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd90      	pop	{r4, r7, pc}
 80069c2:	bf00      	nop
 80069c4:	080202bc 	.word	0x080202bc
 80069c8:	08021fac 	.word	0x08021fac
 80069cc:	0802060c 	.word	0x0802060c

080069d0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>:
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4618      	mov	r0, r3
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fc14 	bl	800721c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff ffed 	bl	80069e6 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b082      	sub	sp, #8
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe fcff 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b082      	sub	sp, #8
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fe fe02 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8006a44:	4603      	mov	r3, r0
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f7ff ffcd 	bl	80069fe <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a74:	e883 0003 	stmia.w	r3, {r0, r1}
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	330c      	adds	r3, #12
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff fe40 	bl	8006704 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fe fc27 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7ff ffc1 	bl	8006a16 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 8006a94:	4603      	mov	r3, r0
 8006a96:	429c      	cmp	r4, r3
 8006a98:	d10a      	bne.n	8006ab0 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fe fc11 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7ff ffc4 	bl	8006a32 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	429c      	cmp	r4, r3
 8006aae:	d005      	beq.n	8006abc <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 8006ab0:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 8006ab2:	4a06      	ldr	r2, [pc, #24]	; (8006acc <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 8006ab4:	2174      	movs	r1, #116	; 0x74
 8006ab6:	4806      	ldr	r0, [pc, #24]	; (8006ad0 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 8006ab8:	f017 fb6c 	bl	801e194 <__assert_func>
    }
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd90      	pop	{r4, r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	0801fffc 	.word	0x0801fffc
 8006acc:	080220d4 	.word	0x080220d4
 8006ad0:	08020260 	.word	0x08020260

08006ad4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>:
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fb9d 	bl	8007232 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>:
class dense_product_base
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff ffed 	bl	8006aea <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7ff ffed 	bl	8006b02 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fe fbc0 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006b44:	4603      	mov	r3, r0
    }
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
	...

08006b50 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006b50:	b590      	push	{r4, r7, lr}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f7ff ffdc 	bl	8006b1a <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fe fa41 	bl	8004fee <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 8006b72:	68b8      	ldr	r0, [r7, #8]
 8006b74:	f7ff ffdd 	bl	8006b32 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8006b78:	4604      	mov	r4, r0
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe fbac 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006b82:	4603      	mov	r3, r0
 8006b84:	429c      	cmp	r4, r3
 8006b86:	d005      	beq.n	8006b94 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x44>
 8006b88:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x50>)
 8006b8a:	4a06      	ldr	r2, [pc, #24]	; (8006ba4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x54>)
 8006b8c:	2160      	movs	r1, #96	; 0x60
 8006b8e:	4806      	ldr	r0, [pc, #24]	; (8006ba8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x58>)
 8006b90:	f017 fb00 	bl	801e194 <__assert_func>
 8006b94:	bf00      	nop
    }
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd90      	pop	{r4, r7, pc}
 8006ba0:	080202bc 	.word	0x080202bc
 8006ba4:	080222cc 	.word	0x080222cc
 8006ba8:	0802060c 	.word	0x0802060c

08006bac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8006bac:	b590      	push	{r4, r7, lr}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7ff f862 	bl	8005c80 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	6838      	ldr	r0, [r7, #0]
 8006bc0:	f000 fb42 	bl	8007248 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 fb48 	bl	800725e <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7ff f856 	bl	8005c80 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006bd4:	4603      	mov	r3, r0
    }
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd90      	pop	{r4, r7, pc}

08006bde <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    }

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(DenseBase)
    /** Default constructor. Do nothing. */
    EIGEN_DEVICE_FUNC DenseBase()
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
#ifdef EIGEN_INTERNAL_DEBUGGING
      EIGEN_STATIC_ASSERT((EIGEN_IMPLIES(MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1, int(IsRowMajor))
                        && EIGEN_IMPLIES(MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1, int(!IsRowMajor))),
                          INVALID_STORAGE_ORDER_FOR_THIS_VECTOR_EXPRESSION)
#endif
    }
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>:
// purely fixed-size matrix
template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage
{
    internal::plain_array<T,Size,_Options> m_data;
  public:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fb42 	bl	8007288 <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>
      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
    }
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4618      	mov	r0, r3
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
    }
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fb35 	bl	800729e <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>
    }
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4618      	mov	r0, r3
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
    }
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fb28 	bl	80072b4 <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>
    }
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4618      	mov	r0, r3
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
    }
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 fb1b 	bl	80072ca <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>
    }
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>:
    }
    EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
      numext::swap(m_data, other.m_data);
    }
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006c9e:	b480      	push	{r7}
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006cae:	b480      	push	{r7}
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC void conservativeResize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006cd4:	b480      	push	{r7}
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4618      	mov	r0, r3
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006ce4:	b480      	push	{r7}
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	2303      	movs	r3, #3
 8006cea:	4618      	mov	r0, r3
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8006d0a:	b590      	push	{r4, r7, lr}
 8006d0c:	b085      	sub	sp, #20
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	60f8      	str	r0, [r7, #12]
 8006d12:	60b9      	str	r1, [r7, #8]
 8006d14:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 fae1 	bl	80072e0 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 8006d1e:	4604      	mov	r4, r0
 8006d20:	f000 f9d1 	bl	80070c6 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 8006d24:	4602      	mov	r2, r0
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	fb03 f202 	mul.w	r2, r3, r2
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4423      	add	r3, r4
    }
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd90      	pop	{r4, r7, pc}

08006d3c <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	2303      	movs	r3, #3
 8006d42:	4618      	mov	r0, r3
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	2301      	movs	r3, #1
 8006d52:	4618      	mov	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4618      	mov	r0, r3
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>:

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  evaluator() {}

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit evaluator(const XprType& m)
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	4611      	mov	r1, r2
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 fab7 	bl	80072f6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
  { }
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 8006da8:	b590      	push	{r4, r7, lr}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681c      	ldr	r4, [r3, #0]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 fab2 	bl	8007324 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	fb03 f202 	mul.w	r2, r3, r2
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4413      	add	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4423      	add	r3, r4
  }
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd90      	pop	{r4, r7, pc}

08006dd8 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
    }
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4618      	mov	r0, r3
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
	...

08006df0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>:
  */
template<typename T, int Value> class variable_if_dynamic
{
  public:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(variable_if_dynamic)
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d005      	beq.n	8006e0c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x1c>
 8006e00:	4b05      	ldr	r3, [pc, #20]	; (8006e18 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x28>)
 8006e02:	4a06      	ldr	r2, [pc, #24]	; (8006e1c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x2c>)
 8006e04:	2185      	movs	r1, #133	; 0x85
 8006e06:	4806      	ldr	r0, [pc, #24]	; (8006e20 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x30>)
 8006e08:	f017 f9c4 	bl	801e194 <__assert_func>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	08022538 	.word	0x08022538
 8006e1c:	08022548 	.word	0x08022548
 8006e20:	080225b0 	.word	0x080225b0

08006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>:
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d005      	beq.n	8006e40 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x1c>
 8006e34:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x28>)
 8006e36:	4a06      	ldr	r2, [pc, #24]	; (8006e50 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x2c>)
 8006e38:	2185      	movs	r1, #133	; 0x85
 8006e3a:	4806      	ldr	r0, [pc, #24]	; (8006e54 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x30>)
 8006e3c:	f017 f9aa 	bl	801e194 <__assert_func>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4618      	mov	r0, r3
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	08022538 	.word	0x08022538
 8006e50:	0802260c 	.word	0x0802260c
 8006e54:	080225b0 	.word	0x080225b0

08006e58 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
    }
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4618      	mov	r0, r3
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>:
    EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    T value() { return T(Value); }
 8006e6e:	b480      	push	{r7}
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	2303      	movs	r3, #3
 8006e74:	4618      	mov	r0, r3
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>:
 8006e7e:	b480      	push	{r7}
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	2301      	movs	r3, #1
 8006e84:	4618      	mov	r0, r3
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
    }
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
    }
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>:
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>:
// So this intermediate function removes everything related to "assume-aliasing" such that Assignment
// does not has to bother about these annoying details.

template<typename Dst, typename Src>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src)
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
{
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006eda:	f107 030c 	add.w	r3, r7, #12
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fa2b 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006ee4:	f107 020c 	add.w	r2, r7, #12
 8006ee8:	2300      	movs	r3, #0
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fa2f 	bl	8007350 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>
}
 8006ef2:	bf00      	nop
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
    }
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4618      	mov	r0, r3
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006f30:	f107 030c 	add.w	r3, r7, #12
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 fa00 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006f3a:	f107 020c 	add.w	r2, r7, #12
 8006f3e:	2300      	movs	r3, #0
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa1c 	bl	8007380 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>
}
 8006f48:	bf00      	nop
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
    }
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
    }
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
    }
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4618      	mov	r0, r3
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006f92:	b480      	push	{r7}
 8006f94:	b083      	sub	sp, #12
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
    }
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fe f990 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fe f982 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>:
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4618      	mov	r0, r3
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8007000:	f107 030c 	add.w	r3, r7, #12
 8007004:	4618      	mov	r0, r3
 8007006:	f000 f998 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800700a:	f107 020c 	add.w	r2, r7, #12
 800700e:	2300      	movs	r3, #0
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f9cc 	bl	80073b0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 8007018:	bf00      	nop
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
    }
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4618      	mov	r0, r3
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
    }
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
    }
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4618      	mov	r0, r3
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
    }
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4618      	mov	r0, r3
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
    }
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4618      	mov	r0, r3
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>:
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4618      	mov	r0, r3
 800709c:	f7fe fadf 	bl	800565e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80070a0:	4603      	mov	r3, r0
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b082      	sub	sp, #8
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe fad1 	bl	800565e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80070bc:	4603      	mov	r3, r0
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 80070c6:	b480      	push	{r7}
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	2301      	movs	r3, #1
 80070cc:	4618      	mov	r0, r3
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 80070d6:	b480      	push	{r7}
 80070d8:	af00      	add	r7, sp, #0
 80070da:	2301      	movs	r3, #1
 80070dc:	4618      	mov	r0, r3
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
    }
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
    }
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>:
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4618      	mov	r0, r3
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8007132:	f107 030c 	add.w	r3, r7, #12
 8007136:	4618      	mov	r0, r3
 8007138:	f000 f8ff 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800713c:	f107 020c 	add.w	r2, r7, #12
 8007140:	2300      	movs	r3, #0
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f943 	bl	80073d0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>
}
 800714a:	bf00      	nop
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
    }
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
    }
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
    }
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4618      	mov	r0, r3
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
    }
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4618      	mov	r0, r3
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b082      	sub	sp, #8
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7ff f88a 	bl	80062d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80071bc:	4603      	mov	r3, r0
    }
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>:
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4618      	mov	r0, r3
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 80071e6:	f107 030c 	add.w	r3, r7, #12
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 f8a5 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80071f0:	f107 020c 	add.w	r2, r7, #12
 80071f4:	2300      	movs	r3, #0
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f901 	bl	8007400 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>
}
 80071fe:	bf00      	nop
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8007206:	b480      	push	{r7}
 8007208:	b083      	sub	sp, #12
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
    }
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
    }
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4618      	mov	r0, r3
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
    }
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4618      	mov	r0, r3
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>:
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8007268:	f107 030c 	add.w	r3, r7, #12
 800726c:	4618      	mov	r0, r3
 800726e:	f000 f864 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007272:	f107 020c 	add.w	r2, r7, #12
 8007276:	2300      	movs	r3, #0
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f8d8 	bl	8007430 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 8007280:	bf00      	nop
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>:
  plain_array()
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8007290:	f000 f8e6 	bl	8007460 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>:
  plain_array()
 800729e:	b580      	push	{r7, lr}
 80072a0:	b082      	sub	sp, #8
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 80072a6:	f000 f8e2 	bl	800746e <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>
  }
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>:
  plain_array()
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 80072bc:	f000 f8de 	bl	800747c <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4618      	mov	r0, r3
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>:
  plain_array()
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b082      	sub	sp, #8
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 80072d2:	f000 f8d3 	bl	800747c <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4618      	mov	r0, r3
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4618      	mov	r0, r3
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 80072f6:	b590      	push	{r4, r7, lr}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f8cf 	bl	80074a4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8007306:	687c      	ldr	r4, [r7, #4]
 8007308:	6838      	ldr	r0, [r7, #0]
 800730a:	f000 f8be 	bl	800748a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800730e:	4603      	mov	r3, r0
 8007310:	2200      	movs	r2, #0
 8007312:	4619      	mov	r1, r3
 8007314:	4620      	mov	r0, r4
 8007316:	f000 f8d0 	bl	80074ba <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	bd90      	pop	{r4, r7, pc}

08007324 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	2300      	movs	r3, #0
 800732e:	4618      	mov	r0, r3
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
 800733a:	b480      	push	{r7}
 800733c:	b083      	sub	sp, #12
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4618      	mov	r0, r3
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>:
}

// Deal with "assume-aliasing"
template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8007350:	b580      	push	{r7, lr}
 8007352:	b08e      	sub	sp, #56	; 0x38
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
 800735c:	603b      	str	r3, [r7, #0]
{
  typename plain_matrix_type<Src>::type tmp(src);
 800735e:	f107 0314 	add.w	r3, r7, #20
 8007362:	68b9      	ldr	r1, [r7, #8]
 8007364:	4618      	mov	r0, r3
 8007366:	f000 f8ba 	bl	80074de <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 800736a:	f107 0314 	add.w	r3, r7, #20
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	4619      	mov	r1, r3
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 f8c8 	bl	8007508 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8007378:	bf00      	nop
 800737a:	3738      	adds	r7, #56	; 0x38
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8007380:	b580      	push	{r7, lr}
 8007382:	b088      	sub	sp, #32
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 800738e:	f107 0314 	add.w	r3, r7, #20
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	4618      	mov	r0, r3
 8007396:	f000 f8c8 	bl	800752a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 800739a:	f107 0314 	add.w	r3, r7, #20
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	4619      	mov	r1, r3
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 f8d6 	bl	8007554 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 80073a8:	bf00      	nop
 80073aa:	3720      	adds	r7, #32
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:

template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if<!evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
{
  call_assignment_no_alias(dst, src, func);
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	68b9      	ldr	r1, [r7, #8]
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 f8d7 	bl	8007576 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 80073c8:	bf00      	nop
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 80073de:	f107 0314 	add.w	r3, r7, #20
 80073e2:	68b9      	ldr	r1, [r7, #8]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 f8d7 	bl	8007598 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 80073ea:	f107 0314 	add.w	r3, r7, #20
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	4619      	mov	r1, r3
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 f8ae 	bl	8007554 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 80073f8:	bf00      	nop
 80073fa:	3720      	adds	r7, #32
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 800740e:	f107 0314 	add.w	r3, r7, #20
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	4618      	mov	r0, r3
 8007416:	f000 f8d4 	bl	80075c2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 800741a:	f107 0314 	add.w	r3, r7, #20
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	4619      	mov	r1, r3
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 f896 	bl	8007554 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8007428:	bf00      	nop
 800742a:	3720      	adds	r7, #32
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8007430:	b580      	push	{r7, lr}
 8007432:	b08e      	sub	sp, #56	; 0x38
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 800743e:	f107 0314 	add.w	r3, r7, #20
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 f8d1 	bl	80075ec <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 800744a:	f107 0314 	add.w	r3, r7, #20
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	4619      	mov	r1, r3
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 f858 	bl	8007508 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8007458:	bf00      	nop
 800745a:	3738      	adds	r7, #56	; 0x38
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>:
void check_static_allocation_size()
 8007460:	b480      	push	{r7}
 8007462:	af00      	add	r7, sp, #0
}
 8007464:	bf00      	nop
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>:
void check_static_allocation_size()
 800746e:	b480      	push	{r7}
 8007470:	af00      	add	r7, sp, #0
}
 8007472:	bf00      	nop
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>:
void check_static_allocation_size()
 800747c:	b480      	push	{r7}
 800747e:	af00      	add	r7, sp, #0
}
 8007480:	bf00      	nop
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4618      	mov	r0, r3
 8007496:	f000 f8be 	bl	8007616 <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 800749a:	4603      	mov	r3, r0
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4618      	mov	r0, r3
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b084      	sub	sp, #16
 80074be:	af00      	add	r7, sp, #0
 80074c0:	60f8      	str	r0, [r7, #12]
 80074c2:	60b9      	str	r1, [r7, #8]
 80074c4:	607a      	str	r2, [r7, #4]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 80074cc:	1d3b      	adds	r3, r7, #4
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fd f82d 	bl	800452e <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>:
#ifndef EIGEN_PARSED_BY_DOXYGEN

    // This constructor is for both 1x1 matrices and dynamic vectors
    template<typename T>
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    explicit Matrix(const T& x)
 80074de:	b580      	push	{r7, lr}
 80074e0:	b082      	sub	sp, #8
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	6039      	str	r1, [r7, #0]
    {
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fd fdf3 	bl	80050d6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 80074f0:	f7fd fe01 	bl	80050f6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 f8a3 	bl	8007644 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
}


template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
                      ) && int(Dst::SizeAtCompileTime) != 1
  };

  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst>::type ActualDstTypeCleaned;
  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst&>::type ActualDstType;
  ActualDstType actualDst(dst);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	617b      	str	r3, [r7, #20]
  // TODO check whether this is the right place to perform these checks:
  EIGEN_STATIC_ASSERT_LVALUE(Dst)
  EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(ActualDstTypeCleaned,Src)
  EIGEN_CHECK_BINARY_COMPATIBILIY(Func,typename ActualDstTypeCleaned::Scalar,typename Src::Scalar);

  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	68b9      	ldr	r1, [r7, #8]
 800751c:	6978      	ldr	r0, [r7, #20]
 800751e:	f000 f89e 	bl	800765e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 8007522:	bf00      	nop
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
    {
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4618      	mov	r0, r3
 8007538:	f7fd fe13 	bl	8005162 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 800753c:	f7fd fe21 	bl	8005182 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	4618      	mov	r0, r3
 8007546:	f000 f89d 	bl	8007684 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>
    }
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	68b9      	ldr	r1, [r7, #8]
 8007568:	6978      	ldr	r0, [r7, #20]
 800756a:	f000 f898 	bl	800769e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 800756e:	bf00      	nop
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007576:	b580      	push	{r7, lr}
 8007578:	b086      	sub	sp, #24
 800757a:	af00      	add	r7, sp, #0
 800757c:	60f8      	str	r0, [r7, #12]
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	68b9      	ldr	r1, [r7, #8]
 800758a:	6978      	ldr	r0, [r7, #20]
 800758c:	f000 f89a 	bl	80076c4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8007590:	bf00      	nop
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
    {
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fd fddc 	bl	8005162 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 80075aa:	f7fd fdea 	bl	8005182 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 f899 	bl	80076ea <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>
    }
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4618      	mov	r0, r3
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
    {
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fd fdc7 	bl	8005162 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 80075d4:	f7fd fdd5 	bl	8005182 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 f891 	bl	8007704 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>
    }
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4618      	mov	r0, r3
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
    {
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fd fd6c 	bl	80050d6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 80075fe:	f7fd fd7a 	bl	80050f6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	4618      	mov	r0, r3
 8007608:	f000 f889 	bl	800771e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>
    }
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4618      	mov	r0, r3
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>:
    { }

    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f87f 	bl	8007738 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>
 800763a:	4603      	mov	r3, r0
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f87d 	bl	8007750 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8007656:	bf00      	nop
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
// both partial specialization+SFINAE without ambiguous specialization
template< typename DstXprType, typename SrcXprType, typename Functor, typename Weak>
struct Assignment<DstXprType, SrcXprType, Functor, Dense2Dense, Weak>
{
  EIGEN_DEVICE_FUNC
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	607a      	str	r2, [r7, #4]
  {
#ifndef EIGEN_NO_DEBUG
    internal::check_for_aliasing(dst, src);
 800766a:	68b9      	ldr	r1, [r7, #8]
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 f890 	bl	8007792 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>
#endif

    call_dense_assignment_loop(dst, src, func);
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	68b9      	ldr	r1, [r7, #8]
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 f8c4 	bl	8007804 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800767c:	bf00      	nop
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f8ef 	bl	8007874 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8007696:	bf00      	nop
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	60b9      	str	r1, [r7, #8]
 80076a8:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80076aa:	68b9      	ldr	r1, [r7, #8]
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 f902 	bl	80078b6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	68b9      	ldr	r1, [r7, #8]
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 f908 	bl	80078cc <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80076d0:	68b9      	ldr	r1, [r7, #8]
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f000 f932 	bl	800793c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	68b9      	ldr	r1, [r7, #8]
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 f9ca 	bl	8007a76 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80076e2:	bf00      	nop
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f9f5 	bl	8007ae6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80076fc:	bf00      	nop
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fa09 	bl	8007b28 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8007716:	bf00      	nop
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800771e:	b580      	push	{r7, lr}
 8007720:	b082      	sub	sp, #8
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fa1d 	bl	8007b6a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fa33 	bl	8007bac <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>
 8007746:	4603      	mov	r3, r0
    }
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8007750:	b5b0      	push	{r4, r5, r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7fe fa90 	bl	8005c80 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007760:	4604      	mov	r4, r0
 8007762:	6838      	ldr	r0, [r7, #0]
 8007764:	f7ff fba9 	bl	8006eba <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 8007768:	4605      	mov	r5, r0
 800776a:	f107 030c 	add.w	r3, r7, #12
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff fde3 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007774:	f107 030c 	add.w	r3, r7, #12
 8007778:	461a      	mov	r2, r3
 800777a:	4629      	mov	r1, r5
 800777c:	4620      	mov	r0, r4
 800777e:	f000 fa27 	bl	8007bd0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7fe fa7c 	bl	8005c80 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007788:	4603      	mov	r3, r0
    }
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bdb0      	pop	{r4, r5, r7, pc}

08007792 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>:
    {
    }
};

template<typename Dst, typename Src>
void check_for_aliasing(const Dst &dst, const Src &src)
 8007792:	b580      	push	{r7, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	6039      	str	r1, [r7, #0]
{
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fd fd9b 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	dd08      	ble.n	80077bc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fd fd89 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	dd01      	ble.n	80077bc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 80077b8:	2301      	movs	r3, #1
 80077ba:	e000      	b.n	80077be <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2c>
 80077bc:	2300      	movs	r3, #0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fa14 	bl	8007bf2 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>
}
 80077ca:	bf00      	nop
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fa24 	bl	8007c28 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7ff ffec 	bl	80077d2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8007804:	b580      	push	{r7, lr}
 8007806:	b08c      	sub	sp, #48	; 0x30
 8007808:	af02      	add	r7, sp, #8
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8007810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	4618      	mov	r0, r3
 8007818:	f000 f9f6 	bl	8007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	68b9      	ldr	r1, [r7, #8]
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 fa0d 	bl	8007c40 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8007826:	f107 0320 	add.w	r3, r7, #32
 800782a:	68f9      	ldr	r1, [r7, #12]
 800782c:	4618      	mov	r0, r3
 800782e:	f000 f9eb 	bl	8007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 fa50 	bl	8007cd8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8007838:	4603      	mov	r3, r0
 800783a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800783e:	f107 0120 	add.w	r1, r7, #32
 8007842:	f107 0010 	add.w	r0, r7, #16
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f000 fa50 	bl	8007cee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800784e:	f107 0310 	add.w	r3, r7, #16
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fa65 	bl	8007d22 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 8007858:	f107 0320 	add.w	r3, r7, #32
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff ffc4 	bl	80077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8007862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff ffbf 	bl	80077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
}
 800786c:	bf00      	nop
 800786e:	3728      	adds	r7, #40	; 0x28
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8007874:	b5b0      	push	{r4, r5, r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fe f862 	bl	8005948 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007884:	4604      	mov	r4, r0
 8007886:	6838      	ldr	r0, [r7, #0]
 8007888:	f7ff fb42 	bl	8006f10 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 800788c:	4605      	mov	r5, r0
 800788e:	f107 030c 	add.w	r3, r7, #12
 8007892:	4618      	mov	r0, r3
 8007894:	f7ff fd51 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007898:	f107 030c 	add.w	r3, r7, #12
 800789c:	461a      	mov	r2, r3
 800789e:	4629      	mov	r1, r5
 80078a0:	4620      	mov	r0, r4
 80078a2:	f000 fa49 	bl	8007d38 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fe f84e 	bl	8005948 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80078ac:	4603      	mov	r3, r0
    }
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bdb0      	pop	{r4, r5, r7, pc}

080078b6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80078b6:	b480      	push	{r7}
 80078b8:	b083      	sub	sp, #12
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	6039      	str	r1, [r7, #0]
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b08c      	sub	sp, #48	; 0x30
 80078d0:	af02      	add	r7, sp, #8
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80078d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078dc:	68b9      	ldr	r1, [r7, #8]
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff fa47 	bl	8006d72 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	68b9      	ldr	r1, [r7, #8]
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 fa37 	bl	8007d5c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80078ee:	f107 0320 	add.w	r3, r7, #32
 80078f2:	68f9      	ldr	r1, [r7, #12]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7ff fa3c 	bl	8006d72 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 fa7a 	bl	8007df4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8007900:	4603      	mov	r3, r0
 8007902:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007906:	f107 0120 	add.w	r1, r7, #32
 800790a:	f107 0010 	add.w	r0, r7, #16
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f000 fa7a 	bl	8007e0a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8007916:	f107 0310 	add.w	r3, r7, #16
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fa8f 	bl	8007e3e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 8007920:	f107 0320 	add.w	r3, r7, #32
 8007924:	4618      	mov	r0, r3
 8007926:	f7fd feea 	bl	80056fe <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800792a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800792e:	4618      	mov	r0, r3
 8007930:	f7fd fee5 	bl	80056fe <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
}
 8007934:	bf00      	nop
 8007936:	3728      	adds	r7, #40	; 0x28
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4618      	mov	r0, r3
 800794a:	f7fd fcc6 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800794e:	4603      	mov	r3, r0
 8007950:	2b01      	cmp	r3, #1
 8007952:	dd08      	ble.n	8007966 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4618      	mov	r0, r3
 8007958:	f7fd fcb4 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800795c:	4603      	mov	r3, r0
 800795e:	2b01      	cmp	r3, #1
 8007960:	dd01      	ble.n	8007966 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 8007962:	2301      	movs	r3, #1
 8007964:	e000      	b.n	8007968 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2c>
 8007966:	2300      	movs	r3, #0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fa70 	bl	8007e54 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>
}
 8007974:	bf00      	nop
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fa8a 	bl	8007e9e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff ffec 	bl	800797c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4618      	mov	r0, r3
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>:
};

// This is the default evaluator implementation for products:
// It creates a temporary and call generic_product_impl
template<typename Lhs, typename Rhs, int Options, int ProductTag, typename LhsShape, typename RhsShape>
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7ff ffeb 	bl	8007994 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4618      	mov	r0, r3
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff ffeb 	bl	80079ae <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7ff ffeb 	bl	80079c8 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff feef 	bl	80077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>:
  }

protected:

  // this helper permits to completely eliminate the functor if it is empty
  struct Data
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b082      	sub	sp, #8
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	332c      	adds	r3, #44	; 0x2c
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7ff ffea 	bl	80079fc <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7ff ffd8 	bl	80079e2 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4618      	mov	r0, r3
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff ffe5 	bl	8007a16 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fa1b 	bl	8007e88 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff ffe8 	bl	8007a3c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b098      	sub	sp, #96	; 0x60
 8007a7a:	af02      	add	r7, sp, #8
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8007a82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a86:	68b9      	ldr	r1, [r7, #8]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 f9ee 	bl	8007e6a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	68b9      	ldr	r1, [r7, #8]
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f000 fa28 	bl	8007ee8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8007a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a9c:	68f9      	ldr	r1, [r7, #12]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 f8b2 	bl	8007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 f917 	bl	8007cd8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007ab0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007ab4:	f107 0014 	add.w	r0, r7, #20
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f000 fa5e 	bl	8007f7c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8007ac0:	f107 0314 	add.w	r3, r7, #20
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 fa73 	bl	8007fb0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8007aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff fe8b 	bl	80077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8007ad4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7ff ffbf 	bl	8007a5c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
}
 8007ade:	bf00      	nop
 8007ae0:	3758      	adds	r7, #88	; 0x58
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8007ae6:	b5b0      	push	{r4, r5, r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7fd ff29 	bl	8005948 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007af6:	4604      	mov	r4, r0
 8007af8:	6838      	ldr	r0, [r7, #0]
 8007afa:	f7ff fb0a 	bl	8007112 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 8007afe:	4605      	mov	r5, r0
 8007b00:	f107 030c 	add.w	r3, r7, #12
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7ff fc18 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007b0a:	f107 030c 	add.w	r3, r7, #12
 8007b0e:	461a      	mov	r2, r3
 8007b10:	4629      	mov	r1, r5
 8007b12:	4620      	mov	r0, r4
 8007b14:	f000 fa57 	bl	8007fc6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7fd ff15 	bl	8005948 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007b1e:	4603      	mov	r3, r0
    }
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bdb0      	pop	{r4, r5, r7, pc}

08007b28 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8007b28:	b5b0      	push	{r4, r5, r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7fd ff08 	bl	8005948 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007b38:	4604      	mov	r4, r0
 8007b3a:	6838      	ldr	r0, [r7, #0]
 8007b3c:	f7ff fb43 	bl	80071c6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 8007b40:	4605      	mov	r5, r0
 8007b42:	f107 030c 	add.w	r3, r7, #12
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7ff fbf7 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007b4c:	f107 030c 	add.w	r3, r7, #12
 8007b50:	461a      	mov	r2, r3
 8007b52:	4629      	mov	r1, r5
 8007b54:	4620      	mov	r0, r4
 8007b56:	f000 fa47 	bl	8007fe8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7fd fef4 	bl	8005948 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007b60:	4603      	mov	r3, r0
    }
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bdb0      	pop	{r4, r5, r7, pc}

08007b6a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8007b6a:	b5b0      	push	{r4, r5, r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7fe f883 	bl	8005c80 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	6838      	ldr	r0, [r7, #0]
 8007b7e:	f7ff fb63 	bl	8007248 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 8007b82:	4605      	mov	r5, r0
 8007b84:	f107 030c 	add.w	r3, r7, #12
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7ff fbd6 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007b8e:	f107 030c 	add.w	r3, r7, #12
 8007b92:	461a      	mov	r2, r3
 8007b94:	4629      	mov	r1, r5
 8007b96:	4620      	mov	r0, r4
 8007b98:	f000 fa37 	bl	800800a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7fe f86f 	bl	8005c80 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007ba2:	4603      	mov	r3, r0
    }
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bdb0      	pop	{r4, r5, r7, pc}

08007bac <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>:
  /** \returns the number of coefficients, which is rows()*cols().
    * \sa rows(), cols(), SizeAtCompileTime. */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8007bac:	b590      	push	{r4, r7, lr}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7fd fd76 	bl	80056a6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007bba:	4604      	mov	r4, r0
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7fd fd82 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	fb04 f303 	mul.w	r3, r4, r3
 8007bc8:	4618      	mov	r0, r3
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd90      	pop	{r4, r7, pc}

08007bd0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	6978      	ldr	r0, [r7, #20]
 8007be6:	f000 fa3c 	bl	8008062 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 8007bea:	bf00      	nop
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>:
    static void run(const Derived&, const OtherDerived&)
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	6039      	str	r1, [r7, #0]
    }
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	4611      	mov	r1, r2
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 fa5c 	bl	80080d6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
  { }
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4618      	mov	r0, r3
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4618      	mov	r0, r3
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
	...

08007c40 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fd fb43 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007c54:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fd fb33 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007c5e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fd fb39 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d107      	bne.n	8007c80 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fd fb26 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d001      	beq.n	8007c84 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8007c80:	2301      	movs	r3, #1
 8007c82:	e000      	b.n	8007c86 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8007c84:	2300      	movs	r3, #0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d005      	beq.n	8007c96 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	6979      	ldr	r1, [r7, #20]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 fa3b 	bl	800810c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7fd fb1e 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d107      	bne.n	8007cb6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fd fb0b 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d006      	beq.n	8007cc4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 8007cb6:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007cb8:	4a05      	ldr	r2, [pc, #20]	; (8007cd0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007cba:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007cbe:	4805      	ldr	r0, [pc, #20]	; (8007cd4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8007cc0:	f016 fa68 	bl	801e194 <__assert_func>
}
 8007cc4:	bf00      	nop
 8007cc6:	3718      	adds	r7, #24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	08022674 	.word	0x08022674
 8007cd0:	080226a4 	.word	0x080226a4
 8007cd4:	08022788 	.word	0x08022788

08007cd8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007cee:	b480      	push	{r7}
 8007cf0:	b085      	sub	sp, #20
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	607a      	str	r2, [r7, #4]
 8007cfa:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	605a      	str	r2, [r3, #4]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	609a      	str	r2, [r3, #8]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	60da      	str	r2, [r3, #12]
  }
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	4618      	mov	r0, r3
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b082      	sub	sp, #8
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fa20 	bl	8008170 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>
  }
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	68b9      	ldr	r1, [r7, #8]
 8007d4c:	6978      	ldr	r0, [r7, #20]
 8007d4e:	f000 fa3a 	bl	80081c6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8007d52:	bf00      	nop
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
	...

08007d5c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fd fb5b 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007d70:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fd fb4b 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007d7a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fd fb51 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007d84:	4602      	mov	r2, r0
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d107      	bne.n	8007d9c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fd fb3e 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007d94:	4602      	mov	r2, r0
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d001      	beq.n	8007da0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e000      	b.n	8007da2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8007da0:	2300      	movs	r3, #0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d005      	beq.n	8007db2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	6979      	ldr	r1, [r7, #20]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 fa45 	bl	800823c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fd fb36 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d107      	bne.n	8007dd2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fd fb23 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d006      	beq.n	8007de0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 8007dd2:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007dd4:	4a05      	ldr	r2, [pc, #20]	; (8007dec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007dd6:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007dda:	4805      	ldr	r0, [pc, #20]	; (8007df0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8007ddc:	f016 f9da 	bl	801e194 <__assert_func>
}
 8007de0:	bf00      	nop
 8007de2:	3718      	adds	r7, #24
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	08022674 	.word	0x08022674
 8007dec:	080227e4 	.word	0x080227e4
 8007df0:	08022788 	.word	0x08022788

08007df4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007e0a:	b480      	push	{r7}
 8007e0c:	b085      	sub	sp, #20
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	607a      	str	r2, [r7, #4]
 8007e16:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	605a      	str	r2, [r3, #4]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	609a      	str	r2, [r3, #8]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	60da      	str	r2, [r3, #12]
  }
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b082      	sub	sp, #8
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fa2a 	bl	80082a0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>
  }
 8007e4c:	bf00      	nop
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
    }
 8007e5e:	bf00      	nop
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b082      	sub	sp, #8
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	6039      	str	r1, [r7, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fa20 	bl	80082be <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4618      	mov	r0, r3
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fd ffc6 	bl	8005e50 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8007ec4:	4603      	mov	r3, r0
    }
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fd ffc6 	bl	8005e6a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8007ede:	4603      	mov	r3, r0
    }
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007ef4:	68b8      	ldr	r0, [r7, #8]
 8007ef6:	f7ff ffdd 	bl	8007eb4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>
 8007efa:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007efc:	68b8      	ldr	r0, [r7, #8]
 8007efe:	f7ff ffe6 	bl	8007ece <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>
 8007f02:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fd f9e7 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d107      	bne.n	8007f24 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fd f9d4 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d001      	beq.n	8007f28 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007f24:	2301      	movs	r3, #1
 8007f26:	e000      	b.n	8007f2a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d005      	beq.n	8007f3a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	6979      	ldr	r1, [r7, #20]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 f8e9 	bl	800810c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fd f9cc 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007f42:	4602      	mov	r2, r0
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d107      	bne.n	8007f5a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7fd f9b9 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007f52:	4602      	mov	r2, r0
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d006      	beq.n	8007f68 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8007f5a:	4b05      	ldr	r3, [pc, #20]	; (8007f70 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8007f5c:	4a05      	ldr	r2, [pc, #20]	; (8007f74 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007f5e:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007f62:	4805      	ldr	r0, [pc, #20]	; (8007f78 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007f64:	f016 f916 	bl	801e194 <__assert_func>
}
 8007f68:	bf00      	nop
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	08022674 	.word	0x08022674
 8007f74:	080228c8 	.word	0x080228c8
 8007f78:	08022788 	.word	0x08022788

08007f7c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
 8007f88:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	605a      	str	r2, [r3, #4]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	609a      	str	r2, [r3, #8]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	60da      	str	r2, [r3, #12]
  }
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f992 	bl	80082e2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 8007fbe:	bf00      	nop
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b086      	sub	sp, #24
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	68b9      	ldr	r1, [r7, #8]
 8007fda:	6978      	ldr	r0, [r7, #20]
 8007fdc:	f000 f9ac 	bl	8008338 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 8007fe0:	bf00      	nop
 8007fe2:	3718      	adds	r7, #24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	68b9      	ldr	r1, [r7, #8]
 8007ffc:	6978      	ldr	r0, [r7, #20]
 8007ffe:	f000 f9d5 	bl	80083ac <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>
}
 8008002:	bf00      	nop
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800800a:	b580      	push	{r7, lr}
 800800c:	b086      	sub	sp, #24
 800800e:	af00      	add	r7, sp, #0
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	60b9      	str	r1, [r7, #8]
 8008014:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	68b9      	ldr	r1, [r7, #8]
 800801e:	6978      	ldr	r0, [r7, #20]
 8008020:	f000 fa09 	bl	8008436 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8008024:	bf00      	nop
 8008026:	3718      	adds	r7, #24
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>:
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4618      	mov	r0, r3
 8008038:	f000 fa37 	bl	80084aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 800803c:	4603      	mov	r3, r0
 800803e:	4618      	mov	r0, r3
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8008046:	b580      	push	{r7, lr}
 8008048:	b082      	sub	sp, #8
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	3310      	adds	r3, #16
 8008052:	4618      	mov	r0, r3
 8008054:	f000 fa37 	bl	80084c6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008058:	4603      	mov	r3, r0
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
struct Assignment<DstXprType, Product<Lhs,Rhs,Options>, internal::assign_op<Scalar,Scalar>, Dense2Dense,
  typename enable_if<(Options==DefaultProduct || Options==AliasFreeProduct)>::type>
{
  typedef Product<Lhs,Rhs,Options> SrcXprType;
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8008062:	b590      	push	{r4, r7, lr}
 8008064:	b087      	sub	sp, #28
 8008066:	af00      	add	r7, sp, #0
 8008068:	60f8      	str	r0, [r7, #12]
 800806a:	60b9      	str	r1, [r7, #8]
 800806c:	607a      	str	r2, [r7, #4]
  {
    Index dstRows = src.rows();
 800806e:	68b8      	ldr	r0, [r7, #8]
 8008070:	f7ff ffdc 	bl	800802c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>
 8008074:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8008076:	68b8      	ldr	r0, [r7, #8]
 8008078:	f7ff ffe5 	bl	8008046 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>
 800807c:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4618      	mov	r0, r3
 8008082:	f7fd f92a 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008086:	4602      	mov	r2, r0
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	4293      	cmp	r3, r2
 800808c:	d107      	bne.n	800809e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	4618      	mov	r0, r3
 8008092:	f7fd f917 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008096:	4602      	mov	r2, r0
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	4293      	cmp	r3, r2
 800809c:	d001      	beq.n	80080a2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 800809e:	2301      	movs	r3, #1
 80080a0:	e000      	b.n	80080a4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 80080a2:	2300      	movs	r3, #0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d005      	beq.n	80080b4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	6979      	ldr	r1, [r7, #20]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 f82c 	bl	800810c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    // FIXME shall we handle nested_eval here?
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 80080b4:	68b8      	ldr	r0, [r7, #8]
 80080b6:	f000 fa14 	bl	80084e2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>
 80080ba:	4604      	mov	r4, r0
 80080bc:	68b8      	ldr	r0, [r7, #8]
 80080be:	f000 fa1b 	bl	80084f8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>
 80080c2:	4603      	mov	r3, r0
 80080c4:	461a      	mov	r2, r3
 80080c6:	4621      	mov	r1, r4
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f000 fa21 	bl	8008510 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>
  }
 80080ce:	bf00      	nop
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd90      	pop	{r4, r7, pc}

080080d6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 80080d6:	b5b0      	push	{r4, r5, r7, lr}
 80080d8:	b082      	sub	sp, #8
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fa50 	bl	8008586 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 80080e6:	687c      	ldr	r4, [r7, #4]
 80080e8:	6838      	ldr	r0, [r7, #0]
 80080ea:	f000 fa2f 	bl	800854c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 80080ee:	4605      	mov	r5, r0
 80080f0:	6838      	ldr	r0, [r7, #0]
 80080f2:	f000 fa38 	bl	8008566 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>
 80080f6:	4603      	mov	r3, r0
 80080f8:	461a      	mov	r2, r3
 80080fa:	4629      	mov	r1, r5
 80080fc:	4620      	mov	r0, r4
 80080fe:	f000 fa4d 	bl	800859c <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bdb0      	pop	{r4, r5, r7, pc}

0800810c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2b03      	cmp	r3, #3
 800811c:	d108      	bne.n	8008130 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b03      	cmp	r3, #3
 8008122:	d105      	bne.n	8008130 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2b00      	cmp	r3, #0
 8008128:	db02      	blt.n	8008130 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	da06      	bge.n	800813e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x32>
 8008130:	4b0c      	ldr	r3, [pc, #48]	; (8008164 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x58>)
 8008132:	4a0d      	ldr	r2, [pc, #52]	; (8008168 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x5c>)
 8008134:	f240 1111 	movw	r1, #273	; 0x111
 8008138:	480c      	ldr	r0, [pc, #48]	; (800816c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x60>)
 800813a:	f016 f82b 	bl	801e194 <__assert_func>
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	617b      	str	r3, [r7, #20]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	613b      	str	r3, [r7, #16]
  }
 8008146:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	fb02 f103 	mul.w	r1, r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	f000 fa33 	bl	80085c0 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>
    }
 800815a:	bf00      	nop
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	08022a8c 	.word	0x08022a8c
 8008168:	08022c1c 	.word	0x08022c1c
 800816c:	08022ca8 	.word	0x08022ca8

08008170 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008178:	2100      	movs	r1, #0
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fa2d 	bl	80085da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fa48 	bl	8008616 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>
  }
 8008186:	bf00      	nop
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800818e:	b580      	push	{r7, lr}
 8008190:	b082      	sub	sp, #8
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4618      	mov	r0, r3
 800819c:	f7fd f89d 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80081a0:	4603      	mov	r3, r0
 80081a2:	4618      	mov	r0, r3
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b082      	sub	sp, #8
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fd f92a 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80081bc:	4603      	mov	r3, r0
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 80081c6:	b590      	push	{r4, r7, lr}
 80081c8:	b087      	sub	sp, #28
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	60f8      	str	r0, [r7, #12]
 80081ce:	60b9      	str	r1, [r7, #8]
 80081d0:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 80081d2:	68b8      	ldr	r0, [r7, #8]
 80081d4:	f7ff ffdb 	bl	800818e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 80081d8:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 80081da:	68b8      	ldr	r0, [r7, #8]
 80081dc:	f7ff ffe5 	bl	80081aa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 80081e0:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fd f91e 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80081ea:	4602      	mov	r2, r0
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d107      	bne.n	8008202 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x3c>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fd f90b 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80081fa:	4602      	mov	r2, r0
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	4293      	cmp	r3, r2
 8008200:	d001      	beq.n	8008206 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x40>
 8008202:	2301      	movs	r3, #1
 8008204:	e000      	b.n	8008208 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x42>
 8008206:	2300      	movs	r3, #0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d005      	beq.n	8008218 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x52>
      dst.resize(dstRows, dstCols);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	6979      	ldr	r1, [r7, #20]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 f812 	bl	800823c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8008218:	68b8      	ldr	r0, [r7, #8]
 800821a:	f000 fa0b 	bl	8008634 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 800821e:	4604      	mov	r4, r0
 8008220:	68b8      	ldr	r0, [r7, #8]
 8008222:	f000 fa13 	bl	800864c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 8008226:	4603      	mov	r3, r0
 8008228:	461a      	mov	r2, r3
 800822a:	4621      	mov	r1, r4
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 fa19 	bl	8008664 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>
  }
 8008232:	bf00      	nop
 8008234:	371c      	adds	r7, #28
 8008236:	46bd      	mov	sp, r7
 8008238:	bd90      	pop	{r4, r7, pc}
	...

0800823c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2b03      	cmp	r3, #3
 800824c:	d108      	bne.n	8008260 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d105      	bne.n	8008260 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	db02      	blt.n	8008260 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	da06      	bge.n	800826e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x32>
 8008260:	4b0c      	ldr	r3, [pc, #48]	; (8008294 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x58>)
 8008262:	4a0d      	ldr	r2, [pc, #52]	; (8008298 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x5c>)
 8008264:	f240 1111 	movw	r1, #273	; 0x111
 8008268:	480c      	ldr	r0, [pc, #48]	; (800829c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x60>)
 800826a:	f015 ff93 	bl	801e194 <__assert_func>
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	617b      	str	r3, [r7, #20]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	613b      	str	r3, [r7, #16]
  }
 8008276:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	fb02 f103 	mul.w	r1, r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	f000 fa0b 	bl	80086a0 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>
    }
 800828a:	bf00      	nop
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	08022a8c 	.word	0x08022a8c
 8008298:	08022d04 	.word	0x08022d04
 800829c:	08022ca8 	.word	0x08022ca8

080082a0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80082a8:	2100      	movs	r1, #0
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fa05 	bl	80086ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fa20 	bl	80086f6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>
  }
 80082b6:	bf00      	nop
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80082be:	b580      	push	{r7, lr}
 80082c0:	b082      	sub	sp, #8
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	6039      	str	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fa23 	bl	8008714 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fa29 	bl	800872a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>
  }
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4618      	mov	r0, r3
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b082      	sub	sp, #8
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80082ea:	2200      	movs	r2, #0
 80082ec:	2100      	movs	r1, #0
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa43 	bl	800877a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fa59 	bl	80087ac <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 80082fa:	bf00      	nop
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4618      	mov	r0, r3
 800830e:	f000 fa5d 	bl	80087cc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 8008312:	4603      	mov	r3, r0
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	3308      	adds	r3, #8
 8008328:	4618      	mov	r0, r3
 800832a:	f000 fa5d 	bl	80087e8 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 800832e:	4603      	mov	r3, r0
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8008338:	b590      	push	{r4, r7, lr}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8008344:	68b8      	ldr	r0, [r7, #8]
 8008346:	f7ff ffdc 	bl	8008302 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>
 800834a:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800834c:	68b8      	ldr	r0, [r7, #8]
 800834e:	f7ff ffe5 	bl	800831c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>
 8008352:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	4618      	mov	r0, r3
 8008358:	f7fd f865 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800835c:	4602      	mov	r2, r0
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	4293      	cmp	r3, r2
 8008362:	d107      	bne.n	8008374 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x3c>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4618      	mov	r0, r3
 8008368:	f7fd f852 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800836c:	4602      	mov	r2, r0
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	4293      	cmp	r3, r2
 8008372:	d001      	beq.n	8008378 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x40>
 8008374:	2301      	movs	r3, #1
 8008376:	e000      	b.n	800837a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x42>
 8008378:	2300      	movs	r3, #0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d005      	beq.n	800838a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x52>
      dst.resize(dstRows, dstCols);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	6979      	ldr	r1, [r7, #20]
 8008384:	4618      	mov	r0, r3
 8008386:	f7ff ff59 	bl	800823c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800838a:	68b8      	ldr	r0, [r7, #8]
 800838c:	f000 fa39 	bl	8008802 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>
 8008390:	4604      	mov	r4, r0
 8008392:	68b8      	ldr	r0, [r7, #8]
 8008394:	f000 fa40 	bl	8008818 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>
 8008398:	4603      	mov	r3, r0
 800839a:	461a      	mov	r2, r3
 800839c:	4621      	mov	r1, r4
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f000 fa46 	bl	8008830 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>
  }
 80083a4:	bf00      	nop
 80083a6:	371c      	adds	r7, #28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd90      	pop	{r4, r7, pc}

080083ac <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>:
template<typename DstXprType, typename OtherXpr, typename ProductType, typename Func1, typename Func2>
struct assignment_from_xpr_op_product
{
  template<typename SrcXprType, typename InitialFunc>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 80083ac:	b590      	push	{r4, r7, lr}
 80083ae:	b087      	sub	sp, #28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
  {
    call_assignment_no_alias(dst, src.lhs(), Func1());
 80083b8:	68b8      	ldr	r0, [r7, #8]
 80083ba:	f000 fa57 	bl	800886c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>
 80083be:	4604      	mov	r4, r0
 80083c0:	f107 0310 	add.w	r3, r7, #16
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fe ffb8 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80083ca:	f107 0310 	add.w	r3, r7, #16
 80083ce:	461a      	mov	r2, r3
 80083d0:	4621      	mov	r1, r4
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f7ff f8be 	bl	8007554 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 80083d8:	68b8      	ldr	r0, [r7, #8]
 80083da:	f000 fa53 	bl	8008884 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>
 80083de:	4604      	mov	r4, r0
 80083e0:	f107 0314 	add.w	r3, r7, #20
 80083e4:	4618      	mov	r0, r3
 80083e6:	f000 fa59 	bl	800889c <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 80083ea:	f107 0314 	add.w	r3, r7, #20
 80083ee:	461a      	mov	r2, r3
 80083f0:	4621      	mov	r1, r4
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 fa5d 	bl	80088b2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80083f8:	bf00      	nop
 80083fa:	371c      	adds	r7, #28
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd90      	pop	{r4, r7, pc}

08008400 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4618      	mov	r0, r3
 800840c:	f000 fa62 	bl	80088d4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8008410:	4603      	mov	r3, r0
 8008412:	4618      	mov	r0, r3
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800841a:	b580      	push	{r7, lr}
 800841c:	b082      	sub	sp, #8
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	4618      	mov	r0, r3
 8008428:	f7fc ff4c 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800842c:	4603      	mov	r3, r0
 800842e:	4618      	mov	r0, r3
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8008436:	b590      	push	{r4, r7, lr}
 8008438:	b087      	sub	sp, #28
 800843a:	af00      	add	r7, sp, #0
 800843c:	60f8      	str	r0, [r7, #12]
 800843e:	60b9      	str	r1, [r7, #8]
 8008440:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8008442:	68b8      	ldr	r0, [r7, #8]
 8008444:	f7ff ffdc 	bl	8008400 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>
 8008448:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800844a:	68b8      	ldr	r0, [r7, #8]
 800844c:	f7ff ffe5 	bl	800841a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>
 8008450:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	4618      	mov	r0, r3
 8008456:	f7fc ff40 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800845a:	4602      	mov	r2, r0
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	4293      	cmp	r3, r2
 8008460:	d107      	bne.n	8008472 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x3c>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	4618      	mov	r0, r3
 8008466:	f7fc ff2d 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800846a:	4602      	mov	r2, r0
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	4293      	cmp	r3, r2
 8008470:	d001      	beq.n	8008476 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x40>
 8008472:	2301      	movs	r3, #1
 8008474:	e000      	b.n	8008478 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x42>
 8008476:	2300      	movs	r3, #0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d005      	beq.n	8008488 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x52>
      dst.resize(dstRows, dstCols);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	6979      	ldr	r1, [r7, #20]
 8008482:	4618      	mov	r0, r3
 8008484:	f7ff fe42 	bl	800810c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8008488:	68b8      	ldr	r0, [r7, #8]
 800848a:	f000 fa31 	bl	80088f0 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>
 800848e:	4604      	mov	r4, r0
 8008490:	68b8      	ldr	r0, [r7, #8]
 8008492:	f000 fa38 	bl	8008906 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>
 8008496:	4603      	mov	r3, r0
 8008498:	461a      	mov	r2, r3
 800849a:	4621      	mov	r1, r4
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f000 fa3e 	bl	800891e <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>
  }
 80084a2:	bf00      	nop
 80084a4:	371c      	adds	r7, #28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd90      	pop	{r4, r7, pc}

080084aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b082      	sub	sp, #8
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fc ffb5 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80084bc:	4603      	mov	r3, r0
    }
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b082      	sub	sp, #8
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fc ffa7 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80084d8:	4603      	mov	r3, r0
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4618      	mov	r0, r3
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3310      	adds	r3, #16
 8008504:	4618      	mov	r0, r3
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>:
struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,CoeffBasedProductMode>
{
  typedef typename Product<Lhs,Rhs>::Scalar Scalar;

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008510:	b580      	push	{r7, lr}
 8008512:	b08a      	sub	sp, #40	; 0x28
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  {
    // Same as: dst.noalias() = lhs.lazyProduct(rhs);
    // but easier on the compiler side
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800851c:	f107 0310 	add.w	r3, r7, #16
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	68b9      	ldr	r1, [r7, #8]
 8008524:	4618      	mov	r0, r3
 8008526:	f000 fa18 	bl	800895a <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>
 800852a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe ff03 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8008534:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008538:	f107 0310 	add.w	r3, r7, #16
 800853c:	4619      	mov	r1, r3
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 fa22 	bl	8008988 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008544:	bf00      	nop
 8008546:	3728      	adds	r7, #40	; 0x28
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4618      	mov	r0, r3
 8008558:	f000 fa27 	bl	80089aa <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 800855c:	4603      	mov	r3, r0
 800855e:	4618      	mov	r0, r3
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>:
      *          in a column-major matrix).
      *
      * \sa innerStride(), rowStride(), colStride()
      */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT
 8008566:	b580      	push	{r7, lr}
 8008568:	b082      	sub	sp, #8
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
    {
      return derived().outerStride();
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7fd fabd 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8008574:	4603      	mov	r3, r0
 8008576:	4618      	mov	r0, r3
 8008578:	f000 fa22 	bl	80089c0 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800857c:	4603      	mov	r3, r0
    }
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8008586:	b480      	push	{r7}
 8008588:	b083      	sub	sp, #12
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4618      	mov	r0, r3
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 80085ae:	1d3b      	adds	r3, r7, #4
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fb ffbc 	bl	800452e <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	603b      	str	r3, [r7, #0]
 80085ce:	bf00      	nop
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 80085da:	b5b0      	push	{r4, r5, r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	689c      	ldr	r4, [r3, #8]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 f9f2 	bl	80089d8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>
 80085f4:	4605      	mov	r5, r0
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 f9fb 	bl	80089f8 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>
 8008602:	4603      	mov	r3, r0
 8008604:	461a      	mov	r2, r3
 8008606:	4629      	mov	r1, r5
 8008608:	4620      	mov	r0, r4
 800860a:	f000 fa05 	bl	8008a18 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800860e:	bf00      	nop
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bdb0      	pop	{r4, r5, r7, pc}

08008616 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008616:	b580      	push	{r7, lr}
 8008618:	b082      	sub	sp, #8
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800861e:	2101      	movs	r1, #1
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff ffda 	bl	80085da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fa06 	bl	8008a38 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>
  }
 800862c:	bf00      	nop
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4618      	mov	r0, r3
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	4618      	mov	r0, r3
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008664:	b580      	push	{r7, lr}
 8008666:	b088      	sub	sp, #32
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8008670:	f107 0314 	add.w	r3, r7, #20
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	68b9      	ldr	r1, [r7, #8]
 8008678:	4618      	mov	r0, r3
 800867a:	f000 f9ec 	bl	8008a56 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 800867e:	f107 031c 	add.w	r3, r7, #28
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe fe59 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8008688:	f107 021c 	add.w	r2, r7, #28
 800868c:	f107 0314 	add.w	r3, r7, #20
 8008690:	4619      	mov	r1, r3
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f000 f9f6 	bl	8008a84 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008698:	bf00      	nop
 800869a:	3720      	adds	r7, #32
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>:
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
 80086ac:	603b      	str	r3, [r7, #0]
 80086ae:	bf00      	nop
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 80086ba:	b5b0      	push	{r4, r5, r7, lr}
 80086bc:	b082      	sub	sp, #8
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689c      	ldr	r4, [r3, #8]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 f9e9 	bl	8008aa6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 80086d4:	4605      	mov	r5, r0
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 f9f2 	bl	8008ac6 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>
 80086e2:	4603      	mov	r3, r0
 80086e4:	461a      	mov	r2, r3
 80086e6:	4629      	mov	r1, r5
 80086e8:	4620      	mov	r0, r4
 80086ea:	f000 f995 	bl	8008a18 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80086ee:	bf00      	nop
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bdb0      	pop	{r4, r5, r7, pc}

080086f6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b082      	sub	sp, #8
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80086fe:	2101      	movs	r1, #1
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7ff ffda 	bl	80086ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f9ed 	bl	8008ae6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>
  }
 800870c:	bf00      	nop
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4618      	mov	r0, r3
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>:
  {
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800872a:	b590      	push	{r4, r7, lr}
 800872c:	b083      	sub	sp, #12
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	6039      	str	r1, [r7, #0]
 8008734:	687c      	ldr	r4, [r7, #4]
 8008736:	6838      	ldr	r0, [r7, #0]
 8008738:	f000 f9e4 	bl	8008b04 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>
 800873c:	4603      	mov	r3, r0
 800873e:	4619      	mov	r1, r3
 8008740:	4620      	mov	r0, r4
 8008742:	f7fd fbe1 	bl	8005f08 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	1d1c      	adds	r4, r3, #4
 800874a:	6838      	ldr	r0, [r7, #0]
 800874c:	f000 f9e6 	bl	8008b1c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>
 8008750:	4603      	mov	r3, r0
 8008752:	4619      	mov	r1, r3
 8008754:	4620      	mov	r0, r4
 8008756:	f000 f9f8 	bl	8008b4a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008760:	6838      	ldr	r0, [r7, #0]
 8008762:	f000 f9e6 	bl	8008b32 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>
 8008766:	4603      	mov	r3, r0
 8008768:	4619      	mov	r1, r3
 800876a:	4620      	mov	r0, r4
 800876c:	f000 f9fc 	bl	8008b68 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4618      	mov	r0, r3
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	bd90      	pop	{r4, r7, pc}

0800877a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800877a:	b580      	push	{r7, lr}
 800877c:	b086      	sub	sp, #24
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	68b8      	ldr	r0, [r7, #8]
 800878a:	f000 f9fc 	bl	8008b86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800878e:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8008790:	6879      	ldr	r1, [r7, #4]
 8008792:	68b8      	ldr	r0, [r7, #8]
 8008794:	f000 fa03 	bl	8008b9e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8008798:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	6979      	ldr	r1, [r7, #20]
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 fa09 	bl	8008bb6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 80087a4:	bf00      	nop
 80087a6:	3718      	adds	r7, #24
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80087b4:	2201      	movs	r2, #1
 80087b6:	2100      	movs	r1, #0
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7ff ffde 	bl	800877a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fa1f 	bl	8008c02 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 80087c4:	bf00      	nop
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fc fd7e 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80087de:	4603      	mov	r3, r0
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index cols() const EIGEN_NOEXCEPT { return m_xpr.rows(); }
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fd fdc3 	bl	800637e <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80087f8:	4603      	mov	r3, r0
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8008802:	b480      	push	{r7}
 8008804:	b083      	sub	sp, #12
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4618      	mov	r0, r3
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3308      	adds	r3, #8
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008830:	b580      	push	{r7, lr}
 8008832:	b08c      	sub	sp, #48	; 0x30
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800883c:	f107 0310 	add.w	r3, r7, #16
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	68b9      	ldr	r1, [r7, #8]
 8008844:	4618      	mov	r0, r3
 8008846:	f000 f9ec 	bl	8008c22 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>
 800884a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fd73 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8008854:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008858:	f107 0310 	add.w	r3, r7, #16
 800885c:	4619      	mov	r1, r3
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f000 f9f6 	bl	8008c50 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008864:	bf00      	nop
 8008866:	3730      	adds	r7, #48	; 0x30
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	3304      	adds	r3, #4
 8008890:	4618      	mov	r0, r3
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <_ZN5Eigen8internal13add_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with addition
  *
  */
template<typename DstScalar,typename SrcScalar> struct add_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(add_assign_op)
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4618      	mov	r0, r3
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b086      	sub	sp, #24
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	60f8      	str	r0, [r7, #12]
 80088ba:	60b9      	str	r1, [r7, #8]
 80088bc:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	68b9      	ldr	r1, [r7, #8]
 80088c6:	6978      	ldr	r0, [r7, #20]
 80088c8:	f000 f9d4 	bl	8008c74 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 80088cc:	bf00      	nop
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fc fcfa 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80088e6:	4603      	mov	r3, r0
    }
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4618      	mov	r0, r3
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8008906:	b480      	push	{r7}
 8008908:	b083      	sub	sp, #12
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	4618      	mov	r0, r3
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800891e:	b580      	push	{r7, lr}
 8008920:	b08a      	sub	sp, #40	; 0x28
 8008922:	af00      	add	r7, sp, #0
 8008924:	60f8      	str	r0, [r7, #12]
 8008926:	60b9      	str	r1, [r7, #8]
 8008928:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800892a:	f107 0310 	add.w	r3, r7, #16
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	68b9      	ldr	r1, [r7, #8]
 8008932:	4618      	mov	r0, r3
 8008934:	f000 f9d8 	bl	8008ce8 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>
 8008938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800893c:	4618      	mov	r0, r3
 800893e:	f7fe fcfc 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8008942:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008946:	f107 0310 	add.w	r3, r7, #16
 800894a:	4619      	mov	r1, r3
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 f9e2 	bl	8008d16 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008952:	bf00      	nop
 8008954:	3728      	adds	r7, #40	; 0x28
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived,OtherDerived,LazyProduct>
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800895a:	b590      	push	{r4, r7, lr}
 800895c:	b085      	sub	sp, #20
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	607a      	str	r2, [r7, #4]
    INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS)
  EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors),
    INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION)
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)

  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8008966:	68b8      	ldr	r0, [r7, #8]
 8008968:	f7fd f821 	bl	80059ae <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 800896c:	4604      	mov	r4, r0
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7fd f828 	bl	80059c4 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8008974:	4603      	mov	r3, r0
 8008976:	461a      	mov	r2, r3
 8008978:	4621      	mov	r1, r4
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 fa00 	bl	8008d80 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>
}
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	bd90      	pop	{r4, r7, pc}

08008988 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008988:	b580      	push	{r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	68b9      	ldr	r1, [r7, #8]
 800899c:	6978      	ldr	r0, [r7, #20]
 800899e:	f000 fa1f 	bl	8008de0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 80089a2:	bf00      	nop
 80089a4:	3718      	adds	r7, #24
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 80089aa:	b480      	push	{r7}
 80089ac:	b083      	sub	sp, #12
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4618      	mov	r0, r3
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>:
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fa1c 	bl	8008e06 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>
 80089ce:	4603      	mov	r3, r0
 80089d0:	4618      	mov	r0, r3
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
  }
 80089ec:	4618      	mov	r0, r3
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
  }
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	bf00      	nop
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008a40:	2102      	movs	r1, #2
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f7ff fdc9 	bl	80085da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f9e8 	bl	8008e1e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>
  }
 8008a4e:	bf00      	nop
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8008a56:	b590      	push	{r4, r7, lr}
 8008a58:	b085      	sub	sp, #20
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8008a62:	68b8      	ldr	r0, [r7, #8]
 8008a64:	f7fd f843 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8008a68:	4604      	mov	r4, r0
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7fc fe77 	bl	800575e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8008a70:	4603      	mov	r3, r0
 8008a72:	461a      	mov	r2, r3
 8008a74:	4621      	mov	r1, r4
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f000 fa04 	bl	8008e84 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>
}
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd90      	pop	{r4, r7, pc}

08008a84 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	68b9      	ldr	r1, [r7, #8]
 8008a98:	6978      	ldr	r0, [r7, #20]
 8008a9a:	f000 fa21 	bl	8008ee0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8008a9e:	bf00      	nop
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8008aa6:	b480      	push	{r7}
 8008aa8:	b083      	sub	sp, #12
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
  }
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8008ac6:	b480      	push	{r7}
 8008ac8:	b083      	sub	sp, #12
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
  }
 8008ada:	4618      	mov	r0, r3
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b082      	sub	sp, #8
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008aee:	2102      	movs	r1, #2
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7ff fde2 	bl	80086ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fa05 	bl	8008f06 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>
  }
 8008afc:	bf00      	nop
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	3310      	adds	r3, #16
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4618      	mov	r0, r3
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8008b32:	b480      	push	{r7}
 8008b34:	b083      	sub	sp, #12
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	370c      	adds	r7, #12
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	6039      	str	r1, [r7, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 f9de 	bl	8008f1a <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4618      	mov	r0, r3
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>:
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7ff f846 	bl	8007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	6039      	str	r1, [r7, #0]
      : inner;
 8008b90:	683b      	ldr	r3, [r7, #0]
  }
 8008b92:	4618      	mov	r0, r3
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8008b9e:	b480      	push	{r7}
 8008ba0:	b083      	sub	sp, #12
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	6039      	str	r1, [r7, #0]
      : outer;
 8008ba8:	687b      	ldr	r3, [r7, #4]
  }
 8008baa:	4618      	mov	r0, r3
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8008bb6:	b5b0      	push	{r4, r5, r7, lr}
 8008bb8:	b086      	sub	sp, #24
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	60b9      	str	r1, [r7, #8]
 8008bc0:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	689c      	ldr	r4, [r3, #8]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	68b9      	ldr	r1, [r7, #8]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 f9b2 	bl	8008f38 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 f9c2 	bl	8008f68 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>
 8008be4:	eef0 7a40 	vmov.f32	s15, s0
 8008be8:	edc7 7a05 	vstr	s15, [r7, #20]
 8008bec:	f107 0314 	add.w	r3, r7, #20
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	f7ff ff0f 	bl	8008a18 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8008bfa:	bf00      	nop
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bdb0      	pop	{r4, r5, r7, pc}

08008c02 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b082      	sub	sp, #8
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff fdb3 	bl	800877a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f9ce 	bl	8008fb6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 8008c1a:	bf00      	nop
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8008c22:	b590      	push	{r4, r7, lr}
 8008c24:	b085      	sub	sp, #20
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	60b9      	str	r1, [r7, #8]
 8008c2c:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8008c2e:	68b8      	ldr	r0, [r7, #8]
 8008c30:	f7fd fbe9 	bl	8006406 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 8008c34:	4604      	mov	r4, r0
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7fd fbf0 	bl	800641c <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	461a      	mov	r2, r3
 8008c40:	4621      	mov	r1, r4
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 f9ec 	bl	8009020 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>
}
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd90      	pop	{r4, r7, pc}

08008c50 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	68b9      	ldr	r1, [r7, #8]
 8008c64:	6978      	ldr	r0, [r7, #20]
 8008c66:	f000 fa0d 	bl	8009084 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 8008c6a:	bf00      	nop
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::add_assign_op<Scalar,Scalar> &)
 8008c74:	b590      	push	{r4, r7, lr}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fc fbcf 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008c88:	4604      	mov	r4, r0
 8008c8a:	68b8      	ldr	r0, [r7, #8]
 8008c8c:	f7fd fdd7 	bl	800683e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 8008c90:	4603      	mov	r3, r0
 8008c92:	429c      	cmp	r4, r3
 8008c94:	d10a      	bne.n	8008cac <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x38>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fc fbb9 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	68b8      	ldr	r0, [r7, #8]
 8008ca2:	f7fd fdda 	bl	800685a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	429c      	cmp	r4, r3
 8008caa:	d005      	beq.n	8008cb8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x44>
 8008cac:	4b0b      	ldr	r3, [pc, #44]	; (8008cdc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x68>)
 8008cae:	4a0c      	ldr	r2, [pc, #48]	; (8008ce0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x6c>)
 8008cb0:	21a1      	movs	r1, #161	; 0xa1
 8008cb2:	480c      	ldr	r0, [pc, #48]	; (8008ce4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x70>)
 8008cb4:	f015 fa6e 	bl	801e194 <__assert_func>
    generic_product_impl<Lhs, Rhs>::addTo(dst, src.lhs(), src.rhs());
 8008cb8:	68b8      	ldr	r0, [r7, #8]
 8008cba:	f000 f9f6 	bl	80090aa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	68b8      	ldr	r0, [r7, #8]
 8008cc2:	f000 f9fe 	bl	80090c2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	461a      	mov	r2, r3
 8008cca:	4621      	mov	r1, r4
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 fa04 	bl	80090da <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>
  }
 8008cd2:	bf00      	nop
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd90      	pop	{r4, r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	08022d90 	.word	0x08022d90
 8008ce0:	08022dc8 	.word	0x08022dc8
 8008ce4:	08023288 	.word	0x08023288

08008ce8 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8008ce8:	b590      	push	{r4, r7, lr}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8008cf4:	68b8      	ldr	r0, [r7, #8]
 8008cf6:	f7fd feed 	bl	8006ad4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7fc fef6 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8008d02:	4603      	mov	r3, r0
 8008d04:	461a      	mov	r2, r3
 8008d06:	4621      	mov	r1, r4
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 fa29 	bl	8009160 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>
}
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd90      	pop	{r4, r7, pc}

08008d16 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b086      	sub	sp, #24
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	60f8      	str	r0, [r7, #12]
 8008d1e:	60b9      	str	r1, [r7, #8]
 8008d20:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	68b9      	ldr	r1, [r7, #8]
 8008d2a:	6978      	ldr	r0, [r7, #20]
 8008d2c:	f000 fa46 	bl	80091bc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8008d30:	bf00      	nop
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fa4e 	bl	80091e2 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>:
class dense_product_base
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7ff ffed 	bl	8008d38 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4618      	mov	r0, r3
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7ff ffed 	bl	8008d50 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008d80:	b590      	push	{r4, r7, lr}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f7ff ffeb 	bl	8008d68 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	68b9      	ldr	r1, [r7, #8]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fb fe5c 	bl	8004a54 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	3310      	adds	r3, #16
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	6812      	ldr	r2, [r2, #0]
 8008da4:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8008da6:	68b8      	ldr	r0, [r7, #8]
 8008da8:	f7fc fe3b 	bl	8005a22 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8008dac:	4604      	mov	r4, r0
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7fc fe45 	bl	8005a3e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008db4:	4603      	mov	r3, r0
 8008db6:	429c      	cmp	r4, r3
 8008db8:	d005      	beq.n	8008dc6 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x46>
 8008dba:	4b06      	ldr	r3, [pc, #24]	; (8008dd4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x54>)
 8008dbc:	4a06      	ldr	r2, [pc, #24]	; (8008dd8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x58>)
 8008dbe:	2160      	movs	r1, #96	; 0x60
 8008dc0:	4806      	ldr	r0, [pc, #24]	; (8008ddc <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x5c>)
 8008dc2:	f015 f9e7 	bl	801e194 <__assert_func>
 8008dc6:	bf00      	nop
    }
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3714      	adds	r7, #20
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd90      	pop	{r4, r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	080202bc 	.word	0x080202bc
 8008dd8:	080232e8 	.word	0x080232e8
 8008ddc:	0802060c 	.word	0x0802060c

08008de0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008dec:	68b9      	ldr	r1, [r7, #8]
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f000 fa02 	bl	80091f8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	68b9      	ldr	r1, [r7, #8]
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f000 fab3 	bl	8009364 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008dfe:	bf00      	nop
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b082      	sub	sp, #8
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fae0 	bl	80093d4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008e14:	4603      	mov	r3, r0
    }
 8008e16:	4618      	mov	r0, r3
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008e26:	2103      	movs	r1, #3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7ff fbd6 	bl	80085da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fae0 	bl	80093f4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>
  }
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fae4 	bl	8009412 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>:
class dense_product_base
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff ffed 	bl	8008e3c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4618      	mov	r0, r3
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f7ff ffed 	bl	8008e54 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008e84:	b590      	push	{r4, r7, lr}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f7ff ffeb 	bl	8008e6c <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7fc fa0d 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008eaa:	4604      	mov	r4, r0
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fc fab9 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	429c      	cmp	r4, r3
 8008eb8:	d005      	beq.n	8008ec6 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x42>
 8008eba:	4b06      	ldr	r3, [pc, #24]	; (8008ed4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x50>)
 8008ebc:	4a06      	ldr	r2, [pc, #24]	; (8008ed8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x54>)
 8008ebe:	2160      	movs	r1, #96	; 0x60
 8008ec0:	4806      	ldr	r0, [pc, #24]	; (8008edc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x58>)
 8008ec2:	f015 f967 	bl	801e194 <__assert_func>
 8008ec6:	bf00      	nop
    }
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd90      	pop	{r4, r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	080202bc 	.word	0x080202bc
 8008ed8:	080235ac 	.word	0x080235ac
 8008edc:	0802060c 	.word	0x0802060c

08008ee0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008eec:	68b9      	ldr	r1, [r7, #8]
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f000 fa9a 	bl	8009428 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	68b9      	ldr	r1, [r7, #8]
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f000 fac3 	bl	8009484 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008efe:	bf00      	nop
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8008f06:	b480      	push	{r7}
 8008f08:	b083      	sub	sp, #12
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	bf00      	nop
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b082      	sub	sp, #8
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	6039      	str	r1, [r7, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f000 fae3 	bl	80094f4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4618      	mov	r0, r3
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 8008f38:	b590      	push	{r4, r7, lr}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681c      	ldr	r4, [r3, #0]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 fb0f 	bl	800956e <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8008f50:	4602      	mov	r2, r0
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	fb03 f202 	mul.w	r2, r3, r2
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4423      	add	r3, r4
  }
 8008f60:	4618      	mov	r0, r3
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd90      	pop	{r4, r7, pc}

08008f68 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8008f68:	b5b0      	push	{r4, r5, r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 fb04 	bl	8009584 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	3304      	adds	r3, #4
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	68b9      	ldr	r1, [r7, #8]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fb07 	bl	800959a <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>
 8008f8c:	4605      	mov	r5, r0
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	332c      	adds	r3, #44	; 0x2c
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	68b9      	ldr	r1, [r7, #8]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 fb17 	bl	80095ca <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 fb29 	bl	80095fa <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8008fa8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008fac:	eeb0 0a67 	vmov.f32	s0, s15
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bdb0      	pop	{r4, r5, r7, pc}

08008fb6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b082      	sub	sp, #8
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff fbd9 	bl	800877a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fb2b 	bl	8009624 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 8008fce:	bf00      	nop
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b082      	sub	sp, #8
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fb30 	bl	8009644 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>:
class dense_product_base
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b082      	sub	sp, #8
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7ff ffed 	bl	8008fd6 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8009006:	b580      	push	{r7, lr}
 8009008:	b082      	sub	sp, #8
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7ff ffed 	bl	8008fee <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4618      	mov	r0, r3
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8009020:	b590      	push	{r4, r7, lr}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f7ff ffea 	bl	8009006 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	e892 0003 	ldmia.w	r2, {r0, r1}
 800903a:	e883 0003 	stmia.w	r3, {r0, r1}
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	3308      	adds	r3, #8
 8009042:	6879      	ldr	r1, [r7, #4]
 8009044:	4618      	mov	r0, r3
 8009046:	f7fb feb9 	bl	8004dbc <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 800904a:	68b8      	ldr	r0, [r7, #8]
 800904c:	f7fd fa15 	bl	800647a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8009050:	4604      	mov	r4, r0
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7fd fa1f 	bl	8006496 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8009058:	4603      	mov	r3, r0
 800905a:	429c      	cmp	r4, r3
 800905c:	d005      	beq.n	800906a <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x4a>
 800905e:	4b06      	ldr	r3, [pc, #24]	; (8009078 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x58>)
 8009060:	4a06      	ldr	r2, [pc, #24]	; (800907c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x5c>)
 8009062:	2160      	movs	r1, #96	; 0x60
 8009064:	4806      	ldr	r0, [pc, #24]	; (8009080 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x60>)
 8009066:	f015 f895 	bl	801e194 <__assert_func>
 800906a:	bf00      	nop
    }
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4618      	mov	r0, r3
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	bd90      	pop	{r4, r7, pc}
 8009076:	bf00      	nop
 8009078:	080202bc 	.word	0x080202bc
 800907c:	080236d4 	.word	0x080236d4
 8009080:	0802060c 	.word	0x0802060c

08009084 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8009090:	68b9      	ldr	r1, [r7, #8]
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 fae1 	bl	800965a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	68b9      	ldr	r1, [r7, #8]
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 fb23 	bl	80096e8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80090aa:	b480      	push	{r7}
 80090ac:	b083      	sub	sp, #12
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4618      	mov	r0, r3
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80090c2:	b480      	push	{r7}
 80090c4:	b083      	sub	sp, #12
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3304      	adds	r3, #4
 80090ce:	4618      	mov	r0, r3
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>:

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void addTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80090da:	b580      	push	{r7, lr}
 80090dc:	b08a      	sub	sp, #40	; 0x28
 80090de:	af00      	add	r7, sp, #0
 80090e0:	60f8      	str	r0, [r7, #12]
 80090e2:	60b9      	str	r1, [r7, #8]
 80090e4:	607a      	str	r2, [r7, #4]
  {
    // dst.noalias() += lhs.lazyProduct(rhs);
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::add_assign_op<typename Dst::Scalar,Scalar>());
 80090e6:	f107 0310 	add.w	r3, r7, #16
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	68b9      	ldr	r1, [r7, #8]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 fb32 	bl	8009758 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>
 80090f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7ff fbcf 	bl	800889c <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 80090fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009102:	f107 0310 	add.w	r3, r7, #16
 8009106:	4619      	mov	r1, r3
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 fb3c 	bl	8009786 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800910e:	bf00      	nop
 8009110:	3728      	adds	r7, #40	; 0x28
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
 8009116:	b580      	push	{r7, lr}
 8009118:	b082      	sub	sp, #8
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fb42 	bl	80097a8 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4618      	mov	r0, r3
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>:
class dense_product_base
 800912e:	b580      	push	{r7, lr}
 8009130:	b082      	sub	sp, #8
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7ff ffed 	bl	8009116 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4618      	mov	r0, r3
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8009146:	b580      	push	{r7, lr}
 8009148:	b082      	sub	sp, #8
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7ff ffed 	bl	800912e <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
	...

08009160 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8009160:	b590      	push	{r4, r7, lr}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f7ff ffea 	bl	8009146 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	68b9      	ldr	r1, [r7, #8]
 8009176:	4618      	mov	r0, r3
 8009178:	f7fb ff39 	bl	8004fee <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 8009182:	68b8      	ldr	r0, [r7, #8]
 8009184:	f7fd fcd5 	bl	8006b32 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8009188:	4604      	mov	r4, r0
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4618      	mov	r0, r3
 800918e:	f7fc f8a4 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009192:	4603      	mov	r3, r0
 8009194:	429c      	cmp	r4, r3
 8009196:	d005      	beq.n	80091a4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x44>
 8009198:	4b05      	ldr	r3, [pc, #20]	; (80091b0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x50>)
 800919a:	4a06      	ldr	r2, [pc, #24]	; (80091b4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x54>)
 800919c:	2160      	movs	r1, #96	; 0x60
 800919e:	4806      	ldr	r0, [pc, #24]	; (80091b8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x58>)
 80091a0:	f014 fff8 	bl	801e194 <__assert_func>
 80091a4:	bf00      	nop
    }
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	4618      	mov	r0, r3
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd90      	pop	{r4, r7, pc}
 80091b0:	080202bc 	.word	0x080202bc
 80091b4:	08023a5c 	.word	0x08023a5c
 80091b8:	0802060c 	.word	0x0802060c

080091bc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80091c8:	68b9      	ldr	r1, [r7, #8]
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 faf7 	bl	80097be <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	68b9      	ldr	r1, [r7, #8]
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f000 fb35 	bl	8009844 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80091da:	bf00      	nop
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80091e2:	b480      	push	{r7}
 80091e4:	b083      	sub	sp, #12
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
    }
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4618      	mov	r0, r3
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4618      	mov	r0, r3
 8009206:	f7fc f868 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800920a:	4603      	mov	r3, r0
 800920c:	2b01      	cmp	r3, #1
 800920e:	dd08      	ble.n	8009222 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4618      	mov	r0, r3
 8009214:	f7fc f856 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009218:	4603      	mov	r3, r0
 800921a:	2b01      	cmp	r3, #1
 800921c:	dd01      	ble.n	8009222 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 800921e:	2301      	movs	r3, #1
 8009220:	e000      	b.n	8009224 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2c>
 8009222:	2300      	movs	r3, #0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d003      	beq.n	8009230 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fb42 	bl	80098b4 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct evaluator<const T>
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4618      	mov	r0, r3
 8009244:	f7fc fa5b 	bl	80056fe <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4618      	mov	r0, r3
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseNullaryOp<NullaryOp,PlainObjectType> >
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fb5a 	bl	8009914 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<const T>
 800926a:	b580      	push	{r7, lr}
 800926c:	b082      	sub	sp, #8
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4618      	mov	r0, r3
 8009276:	f7ff ffec 	bl	8009252 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4618      	mov	r0, r3
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	3308      	adds	r3, #8
 8009290:	4618      	mov	r0, r3
 8009292:	f7ff ffea 	bl	800926a <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	3304      	adds	r3, #4
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff ffcc 	bl	8009238 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4618      	mov	r0, r3
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b082      	sub	sp, #8
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7ff ffe5 	bl	8009284 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fb1f 	bl	80098fe <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4618      	mov	r0, r3
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b082      	sub	sp, #8
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7ff ffe8 	bl	80092aa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4618      	mov	r0, r3
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7fc fa05 	bl	80056fe <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fb18 	bl	800992a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4618      	mov	r0, r3
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4618      	mov	r0, r3
 8009310:	f7ff ffe8 	bl	80092e4 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>:

template<int StorageOrder, int UnrollingIndex, typename Lhs, typename Rhs, typename Packet, int LoadMode>
struct etor_product_packet_impl;

template<typename Lhs, typename Rhs, int ProductTag>
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800931e:	b580      	push	{r7, lr}
 8009320:	b082      	sub	sp, #8
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	3324      	adds	r3, #36	; 0x24
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff ffea 	bl	8009304 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	3314      	adds	r3, #20
 8009334:	4618      	mov	r0, r3
 8009336:	f7ff ffc8 	bl	80092ca <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 fad4 	bl	80098e8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4618      	mov	r0, r3
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800934a:	b580      	push	{r7, lr}
 800934c:	b082      	sub	sp, #8
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4618      	mov	r0, r3
 8009356:	f7ff ffe2 	bl	800931e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4618      	mov	r0, r3
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009364:	b580      	push	{r7, lr}
 8009366:	b096      	sub	sp, #88	; 0x58
 8009368:	af02      	add	r7, sp, #8
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8009370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009374:	68b9      	ldr	r1, [r7, #8]
 8009376:	4618      	mov	r0, r3
 8009378:	f000 faa7 	bl	80098ca <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>
  resize_if_allowed(dst, src, func);
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	68b9      	ldr	r1, [r7, #8]
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 faf9 	bl	8009978 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8009386:	f107 0320 	add.w	r3, r7, #32
 800938a:	68f9      	ldr	r1, [r7, #12]
 800938c:	4618      	mov	r0, r3
 800938e:	f7fe fc3b 	bl	8007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f7fe fca0 	bl	8007cd8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8009398:	4603      	mov	r3, r0
 800939a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800939e:	f107 0120 	add.w	r1, r7, #32
 80093a2:	f107 0010 	add.w	r0, r7, #16
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f000 fb2f 	bl	8009a0c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80093ae:	f107 0310 	add.w	r3, r7, #16
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 fb44 	bl	8009a40 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>
  DstEvaluatorType dstEvaluator(dst);
 80093b8:	f107 0320 	add.w	r3, r7, #32
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fe fa14 	bl	80077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80093c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7ff ffbf 	bl	800934a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
}
 80093cc:	bf00      	nop
 80093ce:	3750      	adds	r7, #80	; 0x50
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7fc fb86 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80093e2:	4603      	mov	r3, r0
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7fb ff78 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80093ea:	4603      	mov	r3, r0
 80093ec:	4618      	mov	r0, r3
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80093fc:	2104      	movs	r1, #4
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7ff f8eb 	bl	80085da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fb26 	bl	8009a56 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>
  }
 800940a:	bf00      	nop
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009412:	b480      	push	{r7}
 8009414:	b083      	sub	sp, #12
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
    }
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
}
 8009432:	bf00      	nop
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800943e:	b580      	push	{r7, lr}
 8009440:	b082      	sub	sp, #8
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	330c      	adds	r3, #12
 800944a:	4618      	mov	r0, r3
 800944c:	f7fc f957 	bl	80056fe <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	3308      	adds	r3, #8
 8009454:	4618      	mov	r0, r3
 8009456:	f7fe f9c8 	bl	80077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fb19 	bl	8009a92 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4618      	mov	r0, r3
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800946a:	b580      	push	{r7, lr}
 800946c:	b082      	sub	sp, #8
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4618      	mov	r0, r3
 8009476:	f7ff ffe2 	bl	800943e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4618      	mov	r0, r3
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009484:	b580      	push	{r7, lr}
 8009486:	b090      	sub	sp, #64	; 0x40
 8009488:	af02      	add	r7, sp, #8
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8009490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009494:	68b9      	ldr	r1, [r7, #8]
 8009496:	4618      	mov	r0, r3
 8009498:	f000 faec 	bl	8009a74 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	68b9      	ldr	r1, [r7, #8]
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 fb1d 	bl	8009ae0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80094a6:	f107 0320 	add.w	r3, r7, #32
 80094aa:	68f9      	ldr	r1, [r7, #12]
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fd fc60 	bl	8006d72 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f7fe fc9e 	bl	8007df4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 80094b8:	4603      	mov	r3, r0
 80094ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80094be:	f107 0120 	add.w	r1, r7, #32
 80094c2:	f107 0010 	add.w	r0, r7, #16
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f000 fb53 	bl	8009b74 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80094ce:	f107 0310 	add.w	r3, r7, #16
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 fb68 	bl	8009ba8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 80094d8:	f107 0320 	add.w	r3, r7, #32
 80094dc:	4618      	mov	r0, r3
 80094de:	f7fc f90e 	bl	80056fe <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80094e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7ff ffbf 	bl	800946a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
}
 80094ec:	bf00      	nop
 80094ee:	3738      	adds	r7, #56	; 0x38
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 80094f4:	b5b0      	push	{r4, r5, r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4618      	mov	r0, r3
 8009502:	f000 fb5c 	bl	8009bbe <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	1d1c      	adds	r4, r3, #4
 800950a:	6838      	ldr	r0, [r7, #0]
 800950c:	f7fc fca0 	bl	8005e50 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8009510:	4603      	mov	r3, r0
 8009512:	60bb      	str	r3, [r7, #8]
 8009514:	6838      	ldr	r0, [r7, #0]
 8009516:	f7fc fca8 	bl	8005e6a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 800951a:	4603      	mov	r3, r0
 800951c:	60fb      	str	r3, [r7, #12]
 800951e:	f107 020c 	add.w	r2, r7, #12
 8009522:	f107 0308 	add.w	r3, r7, #8
 8009526:	4619      	mov	r1, r3
 8009528:	4620      	mov	r0, r4
 800952a:	f000 fb55 	bl	8009bd8 <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4619      	mov	r1, r3
 8009532:	2004      	movs	r0, #4
 8009534:	f7f7 fd4a 	bl	8000fcc <_ZnwjPv>
 8009538:	4602      	mov	r2, r0
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	3304      	adds	r3, #4
 800953e:	4619      	mov	r1, r3
 8009540:	4610      	mov	r0, r2
 8009542:	f000 fb62 	bl	8009c0a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	1d1c      	adds	r4, r3, #4
 800954a:	6838      	ldr	r0, [r7, #0]
 800954c:	f000 fb6d 	bl	8009c2a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 8009550:	4605      	mov	r5, r0
 8009552:	6838      	ldr	r0, [r7, #0]
 8009554:	f000 fb74 	bl	8009c40 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 8009558:	4603      	mov	r3, r0
 800955a:	461a      	mov	r2, r3
 800955c:	4629      	mov	r1, r5
 800955e:	4620      	mov	r0, r4
 8009560:	f000 fb7a 	bl	8009c58 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>
  }
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bdb0      	pop	{r4, r5, r7, pc}

0800956e <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 800956e:	b480      	push	{r7}
 8009570:	b083      	sub	sp, #12
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	2303      	movs	r3, #3
 8009578:	4618      	mov	r0, r3
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const BinaryOp& func() const { return op; }
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4618      	mov	r0, r3
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800959a:	b590      	push	{r4, r7, lr}
 800959c:	b085      	sub	sp, #20
 800959e:	af00      	add	r7, sp, #0
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	60b9      	str	r1, [r7, #8]
 80095a4:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681c      	ldr	r4, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7ff ffde 	bl	800956e <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 80095b2:	4602      	mov	r2, r0
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	fb03 f202 	mul.w	r2, r3, r2
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4413      	add	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4423      	add	r3, r4
  }
 80095c2:	4618      	mov	r0, r3
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd90      	pop	{r4, r7, pc}

080095ca <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80095ca:	b590      	push	{r4, r7, lr}
 80095cc:	b085      	sub	sp, #20
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	60f8      	str	r0, [r7, #12]
 80095d2:	60b9      	str	r1, [r7, #8]
 80095d4:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681c      	ldr	r4, [r3, #0]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	4618      	mov	r0, r3
 80095de:	f7ff ffc6 	bl	800956e <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 80095e2:	4602      	mov	r2, r0
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	fb03 f202 	mul.w	r2, r3, r2
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	4413      	add	r3, r2
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	4423      	add	r3, r4
  }
 80095f2:	4618      	mov	r0, r3
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd90      	pop	{r4, r7, pc}

080095fa <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80095fa:	b480      	push	{r7}
 80095fc:	b085      	sub	sp, #20
 80095fe:	af00      	add	r7, sp, #0
 8009600:	60f8      	str	r0, [r7, #12]
 8009602:	60b9      	str	r1, [r7, #8]
 8009604:	607a      	str	r2, [r7, #4]
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	ed93 7a00 	vldr	s14, [r3]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	edd3 7a00 	vldr	s15, [r3]
 8009612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009616:	eeb0 0a67 	vmov.f32	s0, s15
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800962c:	2201      	movs	r2, #1
 800962e:	2101      	movs	r1, #1
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7ff f8a2 	bl	800877a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fb2c 	bl	8009c94 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 800963c:	bf00      	nop
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
    }
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4618      	mov	r0, r3
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
 8009662:	6039      	str	r1, [r7, #0]
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fb35 	bl	8009ce8 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4618      	mov	r0, r3
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff ffec 	bl	8009670 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b082      	sub	sp, #8
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	3314      	adds	r3, #20
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff ffea 	bl	8009688 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	3310      	adds	r3, #16
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fc f820 	bl	80056fe <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fb07 	bl	8009cd2 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4618      	mov	r0, r3
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4618      	mov	r0, r3
 80096da:	f7ff ffe2 	bl	80096a2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4618      	mov	r0, r3
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b092      	sub	sp, #72	; 0x48
 80096ec:	af02      	add	r7, sp, #8
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80096f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096f8:	68b9      	ldr	r1, [r7, #8]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fada 	bl	8009cb4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>
  resize_if_allowed(dst, src, func);
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	68b9      	ldr	r1, [r7, #8]
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f000 fb15 	bl	8009d34 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800970a:	f107 0320 	add.w	r3, r7, #32
 800970e:	68f9      	ldr	r1, [r7, #12]
 8009710:	4618      	mov	r0, r3
 8009712:	f7fd fb2e 	bl	8006d72 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f7fe fb6c 	bl	8007df4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800971c:	4603      	mov	r3, r0
 800971e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009722:	f107 0120 	add.w	r1, r7, #32
 8009726:	f107 0010 	add.w	r0, r7, #16
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f000 fb4b 	bl	8009dc8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009732:	f107 0310 	add.w	r3, r7, #16
 8009736:	4618      	mov	r0, r3
 8009738:	f000 fb60 	bl	8009dfc <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>
  DstEvaluatorType dstEvaluator(dst);
 800973c:	f107 0320 	add.w	r3, r7, #32
 8009740:	4618      	mov	r0, r3
 8009742:	f7fb ffdc 	bl	80056fe <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8009746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800974a:	4618      	mov	r0, r3
 800974c:	f7ff ffbf 	bl	80096ce <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
}
 8009750:	bf00      	nop
 8009752:	3740      	adds	r7, #64	; 0x40
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8009758:	b590      	push	{r4, r7, lr}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8009764:	68b8      	ldr	r0, [r7, #8]
 8009766:	f7fb fffa 	bl	800575e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800976a:	4604      	mov	r4, r0
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7fc ffd5 	bl	800671c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 8009772:	4603      	mov	r3, r0
 8009774:	461a      	mov	r2, r3
 8009776:	4621      	mov	r1, r4
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f000 fb6f 	bl	8009e5c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>
}
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	3714      	adds	r7, #20
 8009782:	46bd      	mov	sp, r7
 8009784:	bd90      	pop	{r4, r7, pc}

08009786 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8009786:	b580      	push	{r7, lr}
 8009788:	b086      	sub	sp, #24
 800978a:	af00      	add	r7, sp, #0
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	68b9      	ldr	r1, [r7, #8]
 800979a:	6978      	ldr	r0, [r7, #20]
 800979c:	f000 fb8e 	bl	8009ebc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 80097a0:	bf00      	nop
 80097a2:	3718      	adds	r7, #24
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
    }
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4618      	mov	r0, r3
 80097b4:	370c      	adds	r7, #12
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80097be:	b580      	push	{r7, lr}
 80097c0:	b082      	sub	sp, #8
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fb fd85 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	dd08      	ble.n	80097e8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4618      	mov	r0, r3
 80097da:	f7fb fd73 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	dd01      	ble.n	80097e8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 80097e4:	2301      	movs	r3, #1
 80097e6:	e000      	b.n	80097ea <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2c>
 80097e8:	2300      	movs	r3, #0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fb76 	bl	8009ee2 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>
}
 80097f6:	bf00      	nop
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80097fe:	b580      	push	{r7, lr}
 8009800:	b082      	sub	sp, #8
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	332c      	adds	r3, #44	; 0x2c
 800980a:	4618      	mov	r0, r3
 800980c:	f7fd ffed 	bl	80077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	3328      	adds	r3, #40	; 0x28
 8009814:	4618      	mov	r0, r3
 8009816:	f7fd ffe8 	bl	80077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fb7b 	bl	8009f16 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800982a:	b580      	push	{r7, lr}
 800982c:	b082      	sub	sp, #8
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4618      	mov	r0, r3
 8009836:	f7ff ffe2 	bl	80097fe <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4618      	mov	r0, r3
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009844:	b580      	push	{r7, lr}
 8009846:	b098      	sub	sp, #96	; 0x60
 8009848:	af02      	add	r7, sp, #8
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8009850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fb4e 	bl	8009ef8 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	68b9      	ldr	r1, [r7, #8]
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 fb7f 	bl	8009f64 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8009866:	f107 0320 	add.w	r3, r7, #32
 800986a:	68f9      	ldr	r1, [r7, #12]
 800986c:	4618      	mov	r0, r3
 800986e:	f7fe f9cb 	bl	8007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f7fe fa30 	bl	8007cd8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8009878:	4603      	mov	r3, r0
 800987a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800987e:	f107 0120 	add.w	r1, r7, #32
 8009882:	f107 0010 	add.w	r0, r7, #16
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f000 fbb5 	bl	8009ff8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800988e:	f107 0310 	add.w	r3, r7, #16
 8009892:	4618      	mov	r0, r3
 8009894:	f000 fbca 	bl	800a02c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8009898:	f107 0320 	add.w	r3, r7, #32
 800989c:	4618      	mov	r0, r3
 800989e:	f7fd ffa4 	bl	80077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80098a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7ff ffbf 	bl	800982a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
}
 80098ac:	bf00      	nop
 80098ae:	3758      	adds	r7, #88	; 0x58
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>:
    static void run(const Derived&, const OtherDerived&)
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
    }
 80098be:	bf00      	nop
 80098c0:	370c      	adds	r7, #12
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b082      	sub	sp, #8
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	6039      	str	r1, [r7, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 fbb2 	bl	800a042 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4618      	mov	r0, r3
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4618      	mov	r0, r3
 80098f4:	370c      	adds	r7, #12
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr

080098fe <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
 80098fe:	b480      	push	{r7}
 8009900:	b083      	sub	sp, #12
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4618      	mov	r0, r3
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4618      	mov	r0, r3
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 800992a:	b480      	push	{r7}
 800992c:	b083      	sub	sp, #12
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4618      	mov	r0, r3
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4618      	mov	r0, r3
 800994c:	f7fe fdad 	bl	80084aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8009950:	4603      	mov	r3, r0
 8009952:	4618      	mov	r0, r3
 8009954:	3708      	adds	r7, #8
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800995a:	b580      	push	{r7, lr}
 800995c:	b082      	sub	sp, #8
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	3310      	adds	r3, #16
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe fdad 	bl	80084c6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800996c:	4603      	mov	r3, r0
 800996e:	4618      	mov	r0, r3
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
	...

08009978 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009984:	68b8      	ldr	r0, [r7, #8]
 8009986:	f7ff ffdb 	bl	8009940 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>
 800998a:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800998c:	68b8      	ldr	r0, [r7, #8]
 800998e:	f7ff ffe4 	bl	800995a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>
 8009992:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	4618      	mov	r0, r3
 8009998:	f7fb fc9f 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800999c:	4602      	mov	r2, r0
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d107      	bne.n	80099b4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fb fc8c 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80099ac:	4602      	mov	r2, r0
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d001      	beq.n	80099b8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80099b4:	2301      	movs	r3, #1
 80099b6:	e000      	b.n	80099ba <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80099b8:	2300      	movs	r3, #0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d005      	beq.n	80099ca <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	693a      	ldr	r2, [r7, #16]
 80099c2:	6979      	ldr	r1, [r7, #20]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7fe fba1 	bl	800810c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7fb fc84 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80099d2:	4602      	mov	r2, r0
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d107      	bne.n	80099ea <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fb fc71 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80099e2:	4602      	mov	r2, r0
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d006      	beq.n	80099f8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80099ea:	4b05      	ldr	r3, [pc, #20]	; (8009a00 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80099ec:	4a05      	ldr	r2, [pc, #20]	; (8009a04 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80099ee:	f240 21fd 	movw	r1, #765	; 0x2fd
 80099f2:	4805      	ldr	r0, [pc, #20]	; (8009a08 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80099f4:	f014 fbce 	bl	801e194 <__assert_func>
}
 80099f8:	bf00      	nop
 80099fa:	3718      	adds	r7, #24
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	08022674 	.word	0x08022674
 8009a04:	08023cc8 	.word	0x08023cc8
 8009a08:	08022788 	.word	0x08022788

08009a0c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
 8009a18:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	601a      	str	r2, [r3, #0]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	605a      	str	r2, [r3, #4]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	609a      	str	r2, [r3, #8]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	69ba      	ldr	r2, [r7, #24]
 8009a30:	60da      	str	r2, [r3, #12]
  }
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4618      	mov	r0, r3
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fb32 	bl	800a0b2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>
  }
 8009a4e:	bf00      	nop
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009a5e:	2105      	movs	r1, #5
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f7fe fdba 	bl	80085da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fb33 	bl	800a0d2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>
  }
 8009a6c:	bf00      	nop
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>:
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f000 fb34 	bl	800a0f0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
 8009a92:	b480      	push	{r7}
 8009a94:	b083      	sub	sp, #12
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7fb fc10 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009aba:	4603      	mov	r3, r0
 8009abc:	4618      	mov	r0, r3
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fb fc9d 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009aec:	68b8      	ldr	r0, [r7, #8]
 8009aee:	f7ff ffdb 	bl	8009aa8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>
 8009af2:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009af4:	68b8      	ldr	r0, [r7, #8]
 8009af6:	f7ff ffe5 	bl	8009ac4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>
 8009afa:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fb fc91 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009b04:	4602      	mov	r2, r0
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d107      	bne.n	8009b1c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7fb fc7e 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009b14:	4602      	mov	r2, r0
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d001      	beq.n	8009b20 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e000      	b.n	8009b22 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009b20:	2300      	movs	r3, #0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d005      	beq.n	8009b32 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	6979      	ldr	r1, [r7, #20]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fe fb85 	bl	800823c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7fb fc76 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d107      	bne.n	8009b52 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fb fc63 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d006      	beq.n	8009b60 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009b52:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009b54:	4a05      	ldr	r2, [pc, #20]	; (8009b6c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009b56:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009b5a:	4805      	ldr	r0, [pc, #20]	; (8009b70 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009b5c:	f014 fb1a 	bl	801e194 <__assert_func>
}
 8009b60:	bf00      	nop
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	08022674 	.word	0x08022674
 8009b6c:	08023ea8 	.word	0x08023ea8
 8009b70:	08022788 	.word	0x08022788

08009b74 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
 8009b80:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	601a      	str	r2, [r3, #0]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	605a      	str	r2, [r3, #4]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	683a      	ldr	r2, [r7, #0]
 8009b92:	609a      	str	r2, [r3, #8]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	69ba      	ldr	r2, [r7, #24]
 8009b98:	60da      	str	r2, [r3, #12]
  }
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3714      	adds	r7, #20
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fad2 	bl	800a15a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 8009bb6:	bf00      	nop
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
  evaluator() {}
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b082      	sub	sp, #8
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 fad5 	bl	800a178 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
    {
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 fae4 	bl	800a1b4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8009bec:	f000 faf2 	bl	800a1d4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	6819      	ldr	r1, [r3, #0]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	f000 faf1 	bl	800a1e2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b082      	sub	sp, #8
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	4611      	mov	r1, r2
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f000 faf5 	bl	800a20a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>
  { }
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4618      	mov	r0, r3
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8009c2a:	b480      	push	{r7}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4618      	mov	r0, r3
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	3308      	adds	r3, #8
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8009c64:	f107 0310 	add.w	r3, r7, #16
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	68b9      	ldr	r1, [r7, #8]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 fae7 	bl	800a240 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>
 8009c72:	f107 031c 	add.w	r3, r7, #28
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fd fb5f 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8009c7c:	f107 021c 	add.w	r2, r7, #28
 8009c80:	f107 0310 	add.w	r3, r7, #16
 8009c84:	4619      	mov	r1, r3
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f000 faf1 	bl	800a26e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009c8c:	bf00      	nop
 8009c8e:	3720      	adds	r7, #32
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	2101      	movs	r1, #1
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7fe fd6a 	bl	800877a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 faf2 	bl	800a290 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 8009cac:	bf00      	nop
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6839      	ldr	r1, [r7, #0]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f000 faf4 	bl	800a2b0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8009cd2:	b480      	push	{r7}
 8009cd4:	b083      	sub	sp, #12
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	370c      	adds	r7, #12
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr

08009cfe <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b082      	sub	sp, #8
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fe fd5f 	bl	80087cc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	4618      	mov	r0, r3
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3308      	adds	r3, #8
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fe fd5f 	bl	80087e8 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009d40:	68b8      	ldr	r0, [r7, #8]
 8009d42:	f7ff ffdc 	bl	8009cfe <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>
 8009d46:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009d48:	68b8      	ldr	r0, [r7, #8]
 8009d4a:	f7ff ffe5 	bl	8009d18 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>
 8009d4e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7fb fb67 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d107      	bne.n	8009d70 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fb fb54 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d001      	beq.n	8009d74 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009d70:	2301      	movs	r3, #1
 8009d72:	e000      	b.n	8009d76 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009d74:	2300      	movs	r3, #0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d005      	beq.n	8009d86 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	693a      	ldr	r2, [r7, #16]
 8009d7e:	6979      	ldr	r1, [r7, #20]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7fe fa5b 	bl	800823c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7fb fb4c 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d107      	bne.n	8009da6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7fb fb39 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d006      	beq.n	8009db4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009da6:	4b05      	ldr	r3, [pc, #20]	; (8009dbc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009da8:	4a05      	ldr	r2, [pc, #20]	; (8009dc0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009daa:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009dae:	4805      	ldr	r0, [pc, #20]	; (8009dc4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009db0:	f014 f9f0 	bl	801e194 <__assert_func>
}
 8009db4:	bf00      	nop
 8009db6:	3718      	adds	r7, #24
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	08022674 	.word	0x08022674
 8009dc0:	08023fbc 	.word	0x08023fbc
 8009dc4:	08022788 	.word	0x08022788

08009dc8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	601a      	str	r2, [r3, #0]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	605a      	str	r2, [r3, #4]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	683a      	ldr	r2, [r7, #0]
 8009de6:	609a      	str	r2, [r3, #8]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	69ba      	ldr	r2, [r7, #24]
 8009dec:	60da      	str	r2, [r3, #12]
  }
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	4618      	mov	r0, r3
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fa8e 	bl	800a326 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>
  }
 8009e0a:	bf00      	nop
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b082      	sub	sp, #8
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fa92 	bl	800a344 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4618      	mov	r0, r3
 8009e24:	3708      	adds	r7, #8
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>:
class dense_product_base
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b082      	sub	sp, #8
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7ff ffed 	bl	8009e12 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b082      	sub	sp, #8
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7ff ffed 	bl	8009e2a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4618      	mov	r0, r3
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
	...

08009e5c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8009e5c:	b590      	push	{r4, r7, lr}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f7ff ffea 	bl	8009e42 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	3304      	adds	r3, #4
 8009e78:	6879      	ldr	r1, [r7, #4]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fb f809 	bl	8004e92 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fb fac4 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009e88:	4604      	mov	r4, r0
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7fc fc75 	bl	800677a <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 8009e90:	4603      	mov	r3, r0
 8009e92:	429c      	cmp	r4, r3
 8009e94:	d005      	beq.n	8009ea2 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x46>
 8009e96:	4b06      	ldr	r3, [pc, #24]	; (8009eb0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x54>)
 8009e98:	4a06      	ldr	r2, [pc, #24]	; (8009eb4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x58>)
 8009e9a:	2160      	movs	r1, #96	; 0x60
 8009e9c:	4806      	ldr	r0, [pc, #24]	; (8009eb8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x5c>)
 8009e9e:	f014 f979 	bl	801e194 <__assert_func>
 8009ea2:	bf00      	nop
    }
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3714      	adds	r7, #20
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd90      	pop	{r4, r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	080202bc 	.word	0x080202bc
 8009eb4:	08024200 	.word	0x08024200
 8009eb8:	0802060c 	.word	0x0802060c

08009ebc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8009ec8:	68b9      	ldr	r1, [r7, #8]
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f000 fa45 	bl	800a35a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	68b9      	ldr	r1, [r7, #8]
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f000 fa6e 	bl	800a3b6 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009eda:	bf00      	nop
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 8009ee2:	b480      	push	{r7}
 8009ee4:	b083      	sub	sp, #12
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	6039      	str	r1, [r7, #0]
    }
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>:
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	4618      	mov	r0, r3
 8009f08:	f000 fa8d 	bl	800a426 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
 8009f16:	b480      	push	{r7}
 8009f18:	b083      	sub	sp, #12
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4618      	mov	r0, r3
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fe fccc 	bl	80088d4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b082      	sub	sp, #8
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fb f9b6 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
	...

08009f64 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009f70:	68b8      	ldr	r0, [r7, #8]
 8009f72:	f7ff ffdb 	bl	8009f2c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>
 8009f76:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009f78:	68b8      	ldr	r0, [r7, #8]
 8009f7a:	f7ff ffe4 	bl	8009f46 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>
 8009f7e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fb f9a9 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d107      	bne.n	8009fa0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7fb f996 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d001      	beq.n	8009fa4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e000      	b.n	8009fa6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d005      	beq.n	8009fb6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	6979      	ldr	r1, [r7, #20]
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7fe f8ab 	bl	800810c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fb f98e 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d107      	bne.n	8009fd6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fb f97b 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d006      	beq.n	8009fe4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009fd6:	4b05      	ldr	r3, [pc, #20]	; (8009fec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009fd8:	4a05      	ldr	r2, [pc, #20]	; (8009ff0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009fda:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009fde:	4805      	ldr	r0, [pc, #20]	; (8009ff4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009fe0:	f014 f8d8 	bl	801e194 <__assert_func>
}
 8009fe4:	bf00      	nop
 8009fe6:	3718      	adds	r7, #24
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	08022674 	.word	0x08022674
 8009ff0:	0802446c 	.word	0x0802446c
 8009ff4:	08022788 	.word	0x08022788

08009ff8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
 800a004:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	601a      	str	r2, [r3, #0]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	605a      	str	r2, [r3, #4]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	609a      	str	r2, [r3, #8]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	69ba      	ldr	r2, [r7, #24]
 800a01c:	60da      	str	r2, [r3, #12]
  }
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	4618      	mov	r0, r3
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fa2c 	bl	800a492 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 800a03a:	bf00      	nop
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>:
  typedef Product<Lhs, Rhs, LazyProduct> XprType;
  typedef typename XprType::Scalar Scalar;
  typedef typename XprType::CoeffReturnType CoeffReturnType;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit product_evaluator(const XprType& xpr)
 800a042:	b590      	push	{r4, r7, lr}
 800a044:	b083      	sub	sp, #12
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	6039      	str	r1, [r7, #0]
    : m_lhs(xpr.lhs()),
      m_rhs(xpr.rhs()),
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
                            //       or perhaps declare them on the fly on the packet method... We have experiment to check what's best.
      m_innerDim(xpr.lhs().cols())
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 fa47 	bl	800a4e0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 800a052:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800a054:	6838      	ldr	r0, [r7, #0]
 800a056:	f000 fa2c 	bl	800a4b2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 800a05a:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a05c:	4619      	mov	r1, r3
 800a05e:	4620      	mov	r0, r4
 800a060:	f7fa fcf8 	bl	8004a54 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
      m_rhs(xpr.rhs()),
 800a064:	6838      	ldr	r0, [r7, #0]
 800a066:	f000 fa2f 	bl	800a4c8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>
 800a06a:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	3310      	adds	r3, #16
 800a070:	6812      	ldr	r2, [r2, #0]
 800a072:	601a      	str	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	3314      	adds	r3, #20
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800a078:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800a07a:	4611      	mov	r1, r2
 800a07c:	4618      	mov	r0, r3
 800a07e:	f000 fa3a 	bl	800a4f6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f103 0224 	add.w	r2, r3, #36	; 0x24
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	3310      	adds	r3, #16
      m_innerDim(xpr.lhs().cols())
 800a08c:	4619      	mov	r1, r3
 800a08e:	4610      	mov	r0, r2
 800a090:	f000 fa40 	bl	800a514 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
 800a094:	6838      	ldr	r0, [r7, #0]
 800a096:	f000 fa0c 	bl	800a4b2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 800a09a:	4603      	mov	r3, r0
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fb fcc0 	bl	8005a22 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	629a      	str	r2, [r3, #40]	; 0x28
    std::cerr << "CanVectorizeInner=    " << CanVectorizeInner << "\n";
    std::cerr << "EvalToRowMajor=       " << EvalToRowMajor << "\n";
    std::cerr << "Alignment=            " << Alignment << "\n";
    std::cerr << "Flags=                " << Flags << "\n";
#endif
  }
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd90      	pop	{r4, r7, pc}

0800a0b2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b082      	sub	sp, #8
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	2100      	movs	r1, #0
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fa37 	bl	800a532 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 fa4d 	bl	800a564 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>
  }
 800a0ca:	bf00      	nop
 800a0cc:	3708      	adds	r7, #8
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b082      	sub	sp, #8
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a0da:	2106      	movs	r1, #6
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f7fe fa7c 	bl	80085da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 fa4e 	bl	800a584 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>
  }
 800a0e8:	bf00      	nop
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fa69 	bl	800a5d2 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800a100:	6838      	ldr	r0, [r7, #0]
 800a102:	f000 fa4e 	bl	800a5a2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 800a106:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 800a10c:	6838      	ldr	r0, [r7, #0]
 800a10e:	f000 fa54 	bl	800a5ba <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>
 800a112:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	605a      	str	r2, [r3, #4]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800a122:	4619      	mov	r1, r3
 800a124:	4610      	mov	r0, r2
 800a126:	f7fd fd6f 	bl	8007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 800a134:	4619      	mov	r1, r3
 800a136:	4610      	mov	r0, r2
 800a138:	f7fc fe1b 	bl	8006d72 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a13c:	6838      	ldr	r0, [r7, #0]
 800a13e:	f000 fa30 	bl	800a5a2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 800a142:	4603      	mov	r3, r0
 800a144:	4618      	mov	r0, r3
 800a146:	f7fb f8bd 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800a14a:	4602      	mov	r2, r0
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	611a      	str	r2, [r3, #16]
  }
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4618      	mov	r0, r3
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b082      	sub	sp, #8
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a162:	2100      	movs	r1, #0
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 fa3f 	bl	800a5e8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fa5f 	bl	800a62e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>:
  evaluator()
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fa63 	bl	800a64c <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2203      	movs	r2, #3
 800a18a:	2100      	movs	r1, #0
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fe fa05 	bl	800859c <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4618      	mov	r0, r3
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fa5c 	bl	800a662 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f7ff ffed 	bl	800a19c <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f000 fa57 	bl	800a678 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>
    }
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3708      	adds	r7, #8
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 800a1d4:	b480      	push	{r7}
 800a1d6:	af00      	add	r7, sp, #0
    }
 800a1d8:	bf00      	nop
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b086      	sub	sp, #24
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	60f8      	str	r0, [r7, #12]
 800a1ea:	60b9      	str	r1, [r7, #8]
 800a1ec:	607a      	str	r2, [r7, #4]
 800a1ee:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	68b9      	ldr	r1, [r7, #8]
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 fa49 	bl	800a694 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
    }
 800a202:	bf00      	nop
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 800a20a:	b5b0      	push	{r4, r5, r7, lr}
 800a20c:	b082      	sub	sp, #8
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fa19 	bl	800a64c <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 800a21a:	687c      	ldr	r4, [r7, #4]
 800a21c:	6838      	ldr	r0, [r7, #0]
 800a21e:	f000 fa6b 	bl	800a6f8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>
 800a222:	4605      	mov	r5, r0
 800a224:	6838      	ldr	r0, [r7, #0]
 800a226:	f000 fa74 	bl	800a712 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>
 800a22a:	4603      	mov	r3, r0
 800a22c:	461a      	mov	r2, r3
 800a22e:	4629      	mov	r1, r5
 800a230:	4620      	mov	r0, r4
 800a232:	f7fe f9b3 	bl	800859c <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4618      	mov	r0, r3
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bdb0      	pop	{r4, r5, r7, pc}

0800a240 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800a240:	b590      	push	{r4, r7, lr}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800a24c:	68b8      	ldr	r0, [r7, #8]
 800a24e:	f7fb fd4a 	bl	8005ce6 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 800a252:	4604      	mov	r4, r0
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f7fb fd51 	bl	8005cfc <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800a25a:	4603      	mov	r3, r0
 800a25c:	461a      	mov	r2, r3
 800a25e:	4621      	mov	r1, r4
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f000 fa8b 	bl	800a77c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>
}
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd90      	pop	{r4, r7, pc}

0800a26e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800a26e:	b580      	push	{r7, lr}
 800a270:	b086      	sub	sp, #24
 800a272:	af00      	add	r7, sp, #0
 800a274:	60f8      	str	r0, [r7, #12]
 800a276:	60b9      	str	r1, [r7, #8]
 800a278:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	68b9      	ldr	r1, [r7, #8]
 800a282:	6978      	ldr	r0, [r7, #20]
 800a284:	f000 faaa 	bl	800a7dc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800a288:	bf00      	nop
 800a28a:	3718      	adds	r7, #24
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a298:	2200      	movs	r2, #0
 800a29a:	2102      	movs	r1, #2
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f7fe fa6c 	bl	800877a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 faad 	bl	800a802 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 800a2a8:	bf00      	nop
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>:
  explicit product_evaluator(const XprType& xpr)
 800a2b0:	b590      	push	{r4, r7, lr}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fac8 	bl	800a850 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 800a2c0:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800a2c2:	6838      	ldr	r0, [r7, #0]
 800a2c4:	f000 faad 	bl	800a822 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 800a2c8:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f000 faca 	bl	800a866 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f103 040c 	add.w	r4, r3, #12
      m_rhs(xpr.rhs()),
 800a2d8:	6838      	ldr	r0, [r7, #0]
 800a2da:	f000 faad 	bl	800a838 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>
 800a2de:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	f000 fad4 	bl	800a890 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3310      	adds	r3, #16
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800a2ec:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fc fd3e 	bl	8006d72 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f103 0214 	add.w	r2, r3, #20
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	330c      	adds	r3, #12
      m_innerDim(xpr.lhs().cols())
 800a300:	4619      	mov	r1, r3
 800a302:	4610      	mov	r0, r2
 800a304:	f000 fad9 	bl	800a8ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 800a308:	6838      	ldr	r0, [r7, #0]
 800a30a:	f000 fa8a 	bl	800a822 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 800a30e:	4603      	mov	r3, r0
 800a310:	4618      	mov	r0, r3
 800a312:	f7fc f8b2 	bl	800647a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800a316:	4602      	mov	r2, r0
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	619a      	str	r2, [r3, #24]
  }
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4618      	mov	r0, r3
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	bd90      	pop	{r4, r7, pc}

0800a326 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a326:	b580      	push	{r7, lr}
 800a328:	b082      	sub	sp, #8
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a32e:	2100      	movs	r1, #0
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 fad2 	bl	800a8da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 faf2 	bl	800a920 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>
  }
 800a33c:	bf00      	nop
 800a33e:	3708      	adds	r7, #8
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
    }
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4618      	mov	r0, r3
 800a350:	370c      	adds	r7, #12
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800a35a:	b480      	push	{r7}
 800a35c:	b083      	sub	sp, #12
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	6039      	str	r1, [r7, #0]
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	330c      	adds	r3, #12
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7ff f983 	bl	8009688 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	3308      	adds	r3, #8
 800a386:	4618      	mov	r0, r3
 800a388:	f7fb f9b9 	bl	80056fe <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fae5 	bl	800a95c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4618      	mov	r0, r3
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7ff ffe2 	bl	800a370 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b090      	sub	sp, #64	; 0x40
 800a3ba:	af02      	add	r7, sp, #8
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	60b9      	str	r1, [r7, #8]
 800a3c0:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800a3c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3c6:	68b9      	ldr	r1, [r7, #8]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f000 fab8 	bl	800a93e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	68b9      	ldr	r1, [r7, #8]
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f000 faea 	bl	800a9ac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 800a3d8:	f107 0320 	add.w	r3, r7, #32
 800a3dc:	68f9      	ldr	r1, [r7, #12]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fc fcc7 	bl	8006d72 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f7fd fd05 	bl	8007df4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a3f0:	f107 0120 	add.w	r1, r7, #32
 800a3f4:	f107 0010 	add.w	r0, r7, #16
 800a3f8:	9300      	str	r3, [sp, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f000 fb04 	bl	800aa08 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800a400:	f107 0310 	add.w	r3, r7, #16
 800a404:	4618      	mov	r0, r3
 800a406:	f000 fb19 	bl	800aa3c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 800a40a:	f107 0320 	add.w	r3, r7, #32
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fb f975 	bl	80056fe <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800a414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a418:	4618      	mov	r0, r3
 800a41a:	f7ff ffbf 	bl	800a39c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
}
 800a41e:	bf00      	nop
 800a420:	3738      	adds	r7, #56	; 0x38
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 800a426:	b590      	push	{r4, r7, lr}
 800a428:	b083      	sub	sp, #12
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 fb25 	bl	800aa80 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 800a436:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800a438:	6838      	ldr	r0, [r7, #0]
 800a43a:	f000 fb0a 	bl	800aa52 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 800a43e:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a440:	4619      	mov	r1, r3
 800a442:	4620      	mov	r0, r4
 800a444:	f000 fb27 	bl	800aa96 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>
      m_rhs(xpr.rhs()),
 800a448:	6838      	ldr	r0, [r7, #0]
 800a44a:	f000 fb0d 	bl	800aa68 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>
 800a44e:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	625a      	str	r2, [r3, #36]	; 0x24
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800a458:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800a45a:	4611      	mov	r1, r2
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fd fbd3 	bl	8007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      m_innerDim(xpr.lhs().cols())
 800a46c:	4619      	mov	r1, r3
 800a46e:	4610      	mov	r0, r2
 800a470:	f7fd fbca 	bl	8007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800a474:	6838      	ldr	r0, [r7, #0]
 800a476:	f000 faec 	bl	800aa52 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 800a47a:	4603      	mov	r3, r0
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fc fb58 	bl	8006b32 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 800a482:	4602      	mov	r2, r0
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	631a      	str	r2, [r3, #48]	; 0x30
  }
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4618      	mov	r0, r3
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd90      	pop	{r4, r7, pc}

0800a492 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a492:	b580      	push	{r7, lr}
 800a494:	b082      	sub	sp, #8
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a49a:	2200      	movs	r2, #0
 800a49c:	2100      	movs	r1, #0
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 fb0e 	bl	800aac0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fb24 	bl	800aaf2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 800a4aa:	bf00      	nop
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a4b2:	b480      	push	{r7}
 800a4b4:	b083      	sub	sp, #12
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	3310      	adds	r3, #16
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	370c      	adds	r7, #12
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b082      	sub	sp, #8
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	6039      	str	r1, [r7, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6839      	ldr	r1, [r7, #0]
 800a504:	4618      	mov	r0, r3
 800a506:	f000 fb04 	bl	800ab12 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4618      	mov	r0, r3
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6839      	ldr	r1, [r7, #0]
 800a522:	4618      	mov	r0, r3
 800a524:	f000 fb07 	bl	800ab36 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4618      	mov	r0, r3
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800a532:	b580      	push	{r7, lr}
 800a534:	b086      	sub	sp, #24
 800a536:	af00      	add	r7, sp, #0
 800a538:	60f8      	str	r0, [r7, #12]
 800a53a:	60b9      	str	r1, [r7, #8]
 800a53c:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800a53e:	6879      	ldr	r1, [r7, #4]
 800a540:	68b8      	ldr	r0, [r7, #8]
 800a542:	f000 fb0e 	bl	800ab62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800a546:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800a548:	6879      	ldr	r1, [r7, #4]
 800a54a:	68b8      	ldr	r0, [r7, #8]
 800a54c:	f000 fb15 	bl	800ab7a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800a550:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	6979      	ldr	r1, [r7, #20]
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f000 fb1b 	bl	800ab92 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800a55c:	bf00      	nop
 800a55e:	3718      	adds	r7, #24
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a56c:	2201      	movs	r2, #1
 800a56e:	2100      	movs	r1, #0
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f7ff ffde 	bl	800a532 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fb31 	bl	800abde <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>
  }
 800a57c:	bf00      	nop
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a58c:	2107      	movs	r1, #7
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f7fe f823 	bl	80085da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 fb32 	bl	800abfe <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>
  }
 800a59a:	bf00      	nop
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a5a2:	b480      	push	{r7}
 800a5a4:	b083      	sub	sp, #12
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	370c      	adds	r7, #12
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a5ba:	b480      	push	{r7}
 800a5bc:	b083      	sub	sp, #12
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a5d2:	b480      	push	{r7}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800a5e8:	b5b0      	push	{r4, r5, r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	689c      	ldr	r4, [r3, #8]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7fe fa52 	bl	8008aa6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800a602:	4605      	mov	r5, r0
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	6839      	ldr	r1, [r7, #0]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 fb06 	bl	800ac1c <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 800a610:	eef0 7a40 	vmov.f32	s15, s0
 800a614:	edc7 7a03 	vstr	s15, [r7, #12]
 800a618:	f107 030c 	add.w	r3, r7, #12
 800a61c:	461a      	mov	r2, r3
 800a61e:	4629      	mov	r1, r5
 800a620:	4620      	mov	r0, r4
 800a622:	f7fe f9f9 	bl	8008a18 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a626:	bf00      	nop
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bdb0      	pop	{r4, r5, r7, pc}

0800a62e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a62e:	b580      	push	{r7, lr}
 800a630:	b082      	sub	sp, #8
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a636:	2101      	movs	r1, #1
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f7ff ffd5 	bl	800a5e8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fb25 	bl	800ac8e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 800a644:	bf00      	nop
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4618      	mov	r0, r3
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800a662:	b480      	push	{r7}
 800a664:	b083      	sub	sp, #12
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
    }
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4618      	mov	r0, r3
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4618      	mov	r0, r3
 800a684:	f000 fb12 	bl	800acac <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>
    }
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4618      	mov	r0, r3
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
	...

0800a694 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800a694:	b580      	push	{r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	d108      	bne.n	800a6b8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2b03      	cmp	r3, #3
 800a6aa:	d105      	bne.n	800a6b8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	db02      	blt.n	800a6b8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	da06      	bge.n	800a6c6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x32>
 800a6b8:	4b0c      	ldr	r3, [pc, #48]	; (800a6ec <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x58>)
 800a6ba:	4a0d      	ldr	r2, [pc, #52]	; (800a6f0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x5c>)
 800a6bc:	f240 1111 	movw	r1, #273	; 0x111
 800a6c0:	480c      	ldr	r0, [pc, #48]	; (800a6f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x60>)
 800a6c2:	f013 fd67 	bl	801e194 <__assert_func>
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	617b      	str	r3, [r7, #20]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	613b      	str	r3, [r7, #16]
  }
 800a6ce:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	fb02 f103 	mul.w	r1, r2, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	f000 faf0 	bl	800acc2 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>
    }
 800a6e2:	bf00      	nop
 800a6e4:	3718      	adds	r7, #24
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	08022a8c 	.word	0x08022a8c
 800a6f0:	08024624 	.word	0x08024624
 800a6f4:	08022ca8 	.word	0x08022ca8

0800a6f8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4618      	mov	r0, r3
 800a704:	f000 faea 	bl	800acdc <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>
 800a708:	4603      	mov	r3, r0
 800a70a:	4618      	mov	r0, r3
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT
 800a712:	b580      	push	{r7, lr}
 800a714:	b082      	sub	sp, #8
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
      return derived().outerStride();
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 fae9 	bl	800acf2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800a720:	4603      	mov	r3, r0
 800a722:	4618      	mov	r0, r3
 800a724:	f000 faf0 	bl	800ad08 <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>
 800a728:	4603      	mov	r3, r0
    }
 800a72a:	4618      	mov	r0, r3
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
 800a732:	b580      	push	{r7, lr}
 800a734:	b082      	sub	sp, #8
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 faf0 	bl	800ad20 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4618      	mov	r0, r3
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>:
class dense_product_base
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b082      	sub	sp, #8
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f7ff ffed 	bl	800a732 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4618      	mov	r0, r3
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800a762:	b580      	push	{r7, lr}
 800a764:	b082      	sub	sp, #8
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7ff ffed 	bl	800a74a <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800a77c:	b590      	push	{r4, r7, lr}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f7ff ffea 	bl	800a762 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a796:	e883 0003 	stmia.w	r3, {r0, r1}
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3308      	adds	r3, #8
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	6812      	ldr	r2, [r2, #0]
 800a7a2:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800a7a4:	68b8      	ldr	r0, [r7, #8]
 800a7a6:	f7fb fad8 	bl	8005d5a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7fb fae2 	bl	8005d76 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	429c      	cmp	r4, r3
 800a7b6:	d005      	beq.n	800a7c4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x48>
 800a7b8:	4b05      	ldr	r3, [pc, #20]	; (800a7d0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x54>)
 800a7ba:	4a06      	ldr	r2, [pc, #24]	; (800a7d4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x58>)
 800a7bc:	2160      	movs	r1, #96	; 0x60
 800a7be:	4806      	ldr	r0, [pc, #24]	; (800a7d8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x5c>)
 800a7c0:	f013 fce8 	bl	801e194 <__assert_func>
 800a7c4:	bf00      	nop
    }
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd90      	pop	{r4, r7, pc}
 800a7d0:	080202bc 	.word	0x080202bc
 800a7d4:	080246b8 	.word	0x080246b8
 800a7d8:	0802060c 	.word	0x0802060c

0800a7dc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800a7e8:	68b9      	ldr	r1, [r7, #8]
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f000 fab9 	bl	800ad62 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	68b9      	ldr	r1, [r7, #8]
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f000 fb14 	bl	800ae22 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800a7fa:	bf00      	nop
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a802:	b580      	push	{r7, lr}
 800a804:	b082      	sub	sp, #8
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a80a:	2201      	movs	r2, #1
 800a80c:	2102      	movs	r1, #2
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7fd ffb3 	bl	800877a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 fb3c 	bl	800ae92 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800a81a:	bf00      	nop
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a822:	b480      	push	{r7}
 800a824:	b083      	sub	sp, #12
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4618      	mov	r0, r3
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	3308      	adds	r3, #8
 800a844:	4618      	mov	r0, r3
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4618      	mov	r0, r3
 800a85c:	370c      	adds	r7, #12
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr

0800a866 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 800a866:	b580      	push	{r7, lr}
 800a868:	b082      	sub	sp, #8
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	6039      	str	r1, [r7, #0]
    {
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4618      	mov	r0, r3
 800a874:	f7fa fc75 	bl	8005162 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 800a878:	f7fa fc83 	bl	8005182 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	4618      	mov	r0, r3
 800a882:	f000 fb16 	bl	800aeb2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>:
    explicit Matrix(const T& x)
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
    {
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7fa fc3d 	bl	800511c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800a8a2:	f7fa fc4b 	bl	800513c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6839      	ldr	r1, [r7, #0]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 fb0e 	bl	800aecc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b082      	sub	sp, #8
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
 800a8c2:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	683a      	ldr	r2, [r7, #0]
 800a8c8:	4611      	mov	r1, r2
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 fb0b 	bl	800aee6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>
  { }
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800a8da:	b5b0      	push	{r4, r5, r7, lr}
 800a8dc:	b084      	sub	sp, #16
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
 800a8e2:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	689c      	ldr	r4, [r3, #8]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6839      	ldr	r1, [r7, #0]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fe f8d9 	bl	8008aa6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800a8f4:	4605      	mov	r5, r0
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	6839      	ldr	r1, [r7, #0]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 fb09 	bl	800af14 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>
 800a902:	eef0 7a40 	vmov.f32	s15, s0
 800a906:	edc7 7a03 	vstr	s15, [r7, #12]
 800a90a:	f107 030c 	add.w	r3, r7, #12
 800a90e:	461a      	mov	r2, r3
 800a910:	4629      	mov	r1, r5
 800a912:	4620      	mov	r0, r4
 800a914:	f7fe f880 	bl	8008a18 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a918:	bf00      	nop
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bdb0      	pop	{r4, r5, r7, pc}

0800a920 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a928:	2101      	movs	r1, #1
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f7ff ffd5 	bl	800a8da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fb28 	bl	800af86 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>
  }
 800a936:	bf00      	nop
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800a93e:	b580      	push	{r7, lr}
 800a940:	b082      	sub	sp, #8
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
 800a946:	6039      	str	r1, [r7, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	4618      	mov	r0, r3
 800a94e:	f000 fb29 	bl	800afa4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4618      	mov	r0, r3
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4618      	mov	r0, r3
 800a968:	370c      	adds	r7, #12
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr

0800a972 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800a972:	b580      	push	{r7, lr}
 800a974:	b082      	sub	sp, #8
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fa fd51 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800a984:	4603      	mov	r3, r0
 800a986:	4618      	mov	r0, r3
 800a988:	3708      	adds	r7, #8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800a98e:	b580      	push	{r7, lr}
 800a990:	b082      	sub	sp, #8
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	3304      	adds	r3, #4
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7fc fc05 	bl	80071aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
	...

0800a9ac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 800a9ac:	b590      	push	{r4, r7, lr}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fa fd33 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	68b8      	ldr	r0, [r7, #8]
 800a9c4:	f7ff ffd5 	bl	800a972 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	429c      	cmp	r4, r3
 800a9cc:	d10a      	bne.n	800a9e4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fa fd1d 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	68b8      	ldr	r0, [r7, #8]
 800a9da:	f7ff ffd8 	bl	800a98e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	429c      	cmp	r4, r3
 800a9e2:	d006      	beq.n	800a9f2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 800a9e4:	4b05      	ldr	r3, [pc, #20]	; (800a9fc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 800a9e6:	4a06      	ldr	r2, [pc, #24]	; (800aa00 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 800a9e8:	f240 21f2 	movw	r1, #754	; 0x2f2
 800a9ec:	4805      	ldr	r0, [pc, #20]	; (800aa04 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 800a9ee:	f013 fbd1 	bl	801e194 <__assert_func>
}
 800a9f2:	bf00      	nop
 800a9f4:	3714      	adds	r7, #20
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd90      	pop	{r4, r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	08022d90 	.word	0x08022d90
 800aa00:	08024864 	.word	0x08024864
 800aa04:	08022788 	.word	0x08022788

0800aa08 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	68ba      	ldr	r2, [r7, #8]
 800aa1a:	601a      	str	r2, [r3, #0]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	605a      	str	r2, [r3, #4]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	683a      	ldr	r2, [r7, #0]
 800aa26:	609a      	str	r2, [r3, #8]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	69ba      	ldr	r2, [r7, #24]
 800aa2c:	60da      	str	r2, [r3, #12]
  }
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	4618      	mov	r0, r3
 800aa32:	3714      	adds	r7, #20
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 fae6 	bl	800b016 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>
  }
 800aa4a:	bf00      	nop
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800aa52:	b480      	push	{r7}
 800aa54:	b083      	sub	sp, #12
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	4618      	mov	r0, r3
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b082      	sub	sp, #8
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6039      	str	r1, [r7, #0]
    {
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fa fb17 	bl	80050d6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800aaa8:	f7fa fb25 	bl	80050f6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6839      	ldr	r1, [r7, #0]
 800aab0:	4618      	mov	r0, r3
 800aab2:	f000 fabf 	bl	800b034 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4618      	mov	r0, r3
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800aacc:	6879      	ldr	r1, [r7, #4]
 800aace:	68b8      	ldr	r0, [r7, #8]
 800aad0:	f000 fabd 	bl	800b04e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800aad4:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800aad6:	6879      	ldr	r1, [r7, #4]
 800aad8:	68b8      	ldr	r0, [r7, #8]
 800aada:	f000 fac4 	bl	800b066 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800aade:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	6979      	ldr	r1, [r7, #20]
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f000 faca 	bl	800b07e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800aaea:	bf00      	nop
 800aaec:	3718      	adds	r7, #24
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b082      	sub	sp, #8
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800aafa:	2201      	movs	r2, #1
 800aafc:	2100      	movs	r1, #0
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7ff ffde 	bl	800aac0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fae0 	bl	800b0ca <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 800ab0a:	bf00      	nop
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b082      	sub	sp, #8
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	6039      	str	r1, [r7, #0]
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fae4 	bl	800b0ea <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f000 faea 	bl	800b100 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800ab36:	b590      	push	{r4, r7, lr}
 800ab38:	b083      	sub	sp, #12
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
 800ab3e:	6039      	str	r1, [r7, #0]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fb11 	bl	800b168 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800ab46:	687c      	ldr	r4, [r7, #4]
 800ab48:	6838      	ldr	r0, [r7, #0]
 800ab4a:	f000 fb01 	bl	800b150 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	4619      	mov	r1, r3
 800ab52:	4620      	mov	r0, r4
 800ab54:	f7fc f90d 	bl	8006d72 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	370c      	adds	r7, #12
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd90      	pop	{r4, r7, pc}

0800ab62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800ab62:	b480      	push	{r7}
 800ab64:	b083      	sub	sp, #12
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	6039      	str	r1, [r7, #0]
      : inner;
 800ab6c:	683b      	ldr	r3, [r7, #0]
  }
 800ab6e:	4618      	mov	r0, r3
 800ab70:	370c      	adds	r7, #12
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr

0800ab7a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800ab7a:	b480      	push	{r7}
 800ab7c:	b083      	sub	sp, #12
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
 800ab82:	6039      	str	r1, [r7, #0]
      : outer;
 800ab84:	687b      	ldr	r3, [r7, #4]
  }
 800ab86:	4618      	mov	r0, r3
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800ab92:	b5b0      	push	{r4, r5, r7, lr}
 800ab94:	b086      	sub	sp, #24
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	60f8      	str	r0, [r7, #12]
 800ab9a:	60b9      	str	r1, [r7, #8]
 800ab9c:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	689c      	ldr	r4, [r3, #8]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	68b9      	ldr	r1, [r7, #8]
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fe f9c4 	bl	8008f38 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800abb0:	4605      	mov	r5, r0
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	68b9      	ldr	r1, [r7, #8]
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 fadf 	bl	800b17e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>
 800abc0:	eef0 7a40 	vmov.f32	s15, s0
 800abc4:	edc7 7a05 	vstr	s15, [r7, #20]
 800abc8:	f107 0314 	add.w	r3, r7, #20
 800abcc:	461a      	mov	r2, r3
 800abce:	4629      	mov	r1, r5
 800abd0:	4620      	mov	r0, r4
 800abd2:	f7fd ff21 	bl	8008a18 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800abd6:	bf00      	nop
 800abd8:	3718      	adds	r7, #24
 800abda:	46bd      	mov	sp, r7
 800abdc:	bdb0      	pop	{r4, r5, r7, pc}

0800abde <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800abde:	b580      	push	{r7, lr}
 800abe0:	b082      	sub	sp, #8
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800abe6:	2202      	movs	r2, #2
 800abe8:	2100      	movs	r1, #0
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f7ff fca1 	bl	800a532 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 faf7 	bl	800b1e4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>
  }
 800abf6:	bf00      	nop
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800abfe:	b580      	push	{r7, lr}
 800ac00:	b082      	sub	sp, #8
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800ac06:	2108      	movs	r1, #8
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f7fd fce6 	bl	80085da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 faf8 	bl	800b204 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>
  }
 800ac14:	bf00      	nop
 800ac16:	3708      	adds	r7, #8
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  /* Allow index-based non-packet access. It is impossible though to allow index-based packed access,
   * which is why we don't set the LinearAccessBit.
   * TODO: this seems possible when the result is a vector
   */
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  const CoeffReturnType coeff(Index index) const
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b0a4      	sub	sp, #144	; 0x90
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  {
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6819      	ldr	r1, [r3, #0]
 800ac36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ac3a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f000 faea 	bl	800b218 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800ac44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ac48:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f000 faf5 	bl	800b23e <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6859      	ldr	r1, [r3, #4]
 800ac58:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 fafe 	bl	800b260 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>
 800ac64:	f107 030c 	add.w	r3, r7, #12
 800ac68:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800ac6c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ac70:	4618      	mov	r0, r3
 800ac72:	f000 fb08 	bl	800b286 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800ac76:	f107 030c 	add.w	r3, r7, #12
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 fb31 	bl	800b2e2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>
 800ac80:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ac84:	eeb0 0a67 	vmov.f32	s0, s15
 800ac88:	3790      	adds	r7, #144	; 0x90
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b082      	sub	sp, #8
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800ac96:	2102      	movs	r1, #2
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f7ff fca5 	bl	800a5e8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 fb3a 	bl	800b318 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 800aca4:	bf00      	nop
 800aca6:	3708      	adds	r7, #8
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>:
  plain_array()
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800acb4:	f7fc fbd4 	bl	8007460 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4618      	mov	r0, r3
 800acbc:	3708      	adds	r7, #8
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800acc2:	b480      	push	{r7}
 800acc4:	b085      	sub	sp, #20
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	60f8      	str	r0, [r7, #12]
 800acca:	60b9      	str	r1, [r7, #8]
 800accc:	607a      	str	r2, [r7, #4]
 800acce:	603b      	str	r3, [r7, #0]
 800acd0:	bf00      	nop
 800acd2:	3714      	adds	r7, #20
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4618      	mov	r0, r3
 800ace8:	370c      	adds	r7, #12
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr

0800acf2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800acf2:	b480      	push	{r7}
 800acf4:	b083      	sub	sp, #12
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4618      	mov	r0, r3
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 fb0b 	bl	800b32c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>
 800ad16:	4603      	mov	r3, r0
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
    }
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	370c      	adds	r7, #12
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr

0800ad36 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b082      	sub	sp, #8
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
 800ad3e:	f000 fb01 	bl	800b344 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>
 800ad42:	4603      	mov	r3, r0
 800ad44:	4618      	mov	r0, r3
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	f000 fafe 	bl	800b354 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b082      	sub	sp, #8
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
 800ad6a:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7ff ffe1 	bl	800ad36 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	dd08      	ble.n	800ad8c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7ff ffe5 	bl	800ad4c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	dd01      	ble.n	800ad8c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e000      	b.n	800ad8e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2c>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d003      	beq.n	800ad9a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800ad92:	6839      	ldr	r1, [r7, #0]
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fae5 	bl	800b364 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>
}
 800ad9a:	bf00      	nop
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b082      	sub	sp, #8
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4618      	mov	r0, r3
 800adae:	f7fc fd1c 	bl	80077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fafb 	bl	800b3ae <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4618      	mov	r0, r3
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b082      	sub	sp, #8
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4618      	mov	r0, r3
 800adce:	f7ff ffe8 	bl	800ada2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4618      	mov	r0, r3
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	332c      	adds	r3, #44	; 0x2c
 800ade8:	4618      	mov	r0, r3
 800adea:	f7ff ffea 	bl	800adc2 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	3328      	adds	r3, #40	; 0x28
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fc fcf9 	bl	80077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 facd 	bl	800b398 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4618      	mov	r0, r3
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7ff ffe2 	bl	800addc <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3708      	adds	r7, #8
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b098      	sub	sp, #96	; 0x60
 800ae26:	af02      	add	r7, sp, #8
 800ae28:	60f8      	str	r0, [r7, #12]
 800ae2a:	60b9      	str	r1, [r7, #8]
 800ae2c:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800ae2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae32:	68b9      	ldr	r1, [r7, #8]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 faa0 	bl	800b37a <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	68b9      	ldr	r1, [r7, #8]
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f000 fadc 	bl	800b3fc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800ae44:	f107 0320 	add.w	r3, r7, #32
 800ae48:	68f9      	ldr	r1, [r7, #12]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fe fedd 	bl	8009c0a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f000 fb1d 	bl	800b490 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>
 800ae56:	4603      	mov	r3, r0
 800ae58:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ae5c:	f107 0120 	add.w	r1, r7, #32
 800ae60:	f107 0010 	add.w	r0, r7, #16
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f000 fb1d 	bl	800b4a6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800ae6c:	f107 0310 	add.w	r3, r7, #16
 800ae70:	4618      	mov	r0, r3
 800ae72:	f000 fb32 	bl	800b4da <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800ae76:	f107 0320 	add.w	r3, r7, #32
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7fc fd8a 	bl	8007994 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800ae80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7ff ffbf 	bl	800ae08 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
}
 800ae8a:	bf00      	nop
 800ae8c:	3758      	adds	r7, #88	; 0x58
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b082      	sub	sp, #8
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	2102      	movs	r1, #2
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f7fd fc6b 	bl	800877a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 fb23 	bl	800b4f0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800aeaa:	bf00      	nop
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b082      	sub	sp, #8
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800aebc:	6839      	ldr	r1, [r7, #0]
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 fb20 	bl	800b504 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800aec4:	bf00      	nop
 800aec6:	3708      	adds	r7, #8
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800aed6:	6839      	ldr	r1, [r7, #0]
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 fb34 	bl	800b546 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800aede:	bf00      	nop
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 800aee6:	b590      	push	{r4, r7, lr}
 800aee8:	b083      	sub	sp, #12
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fb56 	bl	800b5a2 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 800aef6:	687c      	ldr	r4, [r7, #4]
 800aef8:	6838      	ldr	r0, [r7, #0]
 800aefa:	f000 fb45 	bl	800b588 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800aefe:	4603      	mov	r3, r0
 800af00:	2200      	movs	r2, #0
 800af02:	4619      	mov	r1, r3
 800af04:	4620      	mov	r0, r4
 800af06:	f7fc fad8 	bl	80074ba <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4618      	mov	r0, r3
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	bd90      	pop	{r4, r7, pc}

0800af14 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800af14:	b580      	push	{r7, lr}
 800af16:	b0a2      	sub	sp, #136	; 0x88
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800af24:	2300      	movs	r3, #0
 800af26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800af2a:	6879      	ldr	r1, [r7, #4]
 800af2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800af30:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800af34:	4618      	mov	r0, r3
 800af36:	f000 fb3f 	bl	800b5b8 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800af3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800af3e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800af42:	4611      	mov	r1, r2
 800af44:	4618      	mov	r0, r3
 800af46:	f000 fb4a 	bl	800b5de <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f103 010c 	add.w	r1, r3, #12
 800af50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800af54:	2200      	movs	r2, #0
 800af56:	4618      	mov	r0, r3
 800af58:	f000 fb52 	bl	800b600 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800af5c:	f107 030c 	add.w	r3, r7, #12
 800af60:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800af64:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 fb5c 	bl	800b626 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800af6e:	f107 030c 	add.w	r3, r7, #12
 800af72:	4618      	mov	r0, r3
 800af74:	f000 fb85 	bl	800b682 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800af78:	eef0 7a40 	vmov.f32	s15, s0
  }
 800af7c:	eeb0 0a67 	vmov.f32	s0, s15
 800af80:	3788      	adds	r7, #136	; 0x88
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800af86:	b580      	push	{r7, lr}
 800af88:	b082      	sub	sp, #8
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800af8e:	2102      	movs	r1, #2
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f7ff fca2 	bl	800a8da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 fb8e 	bl	800b6b8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>
  }
 800af9c:	bf00      	nop
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 800afa4:	b590      	push	{r4, r7, lr}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fba4 	bl	800b6fc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800afb4:	6838      	ldr	r0, [r7, #0]
 800afb6:	f000 fb89 	bl	800b6cc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800afba:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	601a      	str	r2, [r3, #0]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	1d1c      	adds	r4, r3, #4
      m_rhs(xpr.rhs()),
 800afc4:	6838      	ldr	r0, [r7, #0]
 800afc6:	f000 fb8d 	bl	800b6e4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>
 800afca:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800afcc:	4619      	mov	r1, r3
 800afce:	4620      	mov	r0, r4
 800afd0:	f000 fb9f 	bl	800b712 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800afde:	4619      	mov	r1, r3
 800afe0:	4610      	mov	r0, r2
 800afe2:	f7fb fec6 	bl	8006d72 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 800aff0:	4619      	mov	r1, r3
 800aff2:	4610      	mov	r0, r2
 800aff4:	f7ff fc61 	bl	800a8ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 800aff8:	6838      	ldr	r0, [r7, #0]
 800affa:	f000 fb67 	bl	800b6cc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800affe:	4603      	mov	r3, r0
 800b000:	4618      	mov	r0, r3
 800b002:	f7fa fa05 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800b006:	4602      	mov	r2, r0
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	611a      	str	r2, [r3, #16]
  }
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	4618      	mov	r0, r3
 800b010:	370c      	adds	r7, #12
 800b012:	46bd      	mov	sp, r7
 800b014:	bd90      	pop	{r4, r7, pc}

0800b016 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800b016:	b580      	push	{r7, lr}
 800b018:	b082      	sub	sp, #8
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800b01e:	2100      	movs	r1, #0
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 fb8b 	bl	800b73c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fbab 	bl	800b782 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>
  }
 800b02c:	bf00      	nop
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800b03e:	6839      	ldr	r1, [r7, #0]
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 fbad 	bl	800b7a0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800b046:	bf00      	nop
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800b04e:	b480      	push	{r7}
 800b050:	b083      	sub	sp, #12
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	6039      	str	r1, [r7, #0]
      : inner;
 800b058:	683b      	ldr	r3, [r7, #0]
  }
 800b05a:	4618      	mov	r0, r3
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800b066:	b480      	push	{r7}
 800b068:	b083      	sub	sp, #12
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	6039      	str	r1, [r7, #0]
      : outer;
 800b070:	687b      	ldr	r3, [r7, #4]
  }
 800b072:	4618      	mov	r0, r3
 800b074:	370c      	adds	r7, #12
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr

0800b07e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800b07e:	b5b0      	push	{r4, r5, r7, lr}
 800b080:	b086      	sub	sp, #24
 800b082:	af00      	add	r7, sp, #0
 800b084:	60f8      	str	r0, [r7, #12]
 800b086:	60b9      	str	r1, [r7, #8]
 800b088:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	689c      	ldr	r4, [r3, #8]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	68b9      	ldr	r1, [r7, #8]
 800b096:	4618      	mov	r0, r3
 800b098:	f7fd ff4e 	bl	8008f38 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800b09c:	4605      	mov	r5, r0
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	68b9      	ldr	r1, [r7, #8]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 fb9b 	bl	800b7e2 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>
 800b0ac:	eef0 7a40 	vmov.f32	s15, s0
 800b0b0:	edc7 7a05 	vstr	s15, [r7, #20]
 800b0b4:	f107 0314 	add.w	r3, r7, #20
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	4620      	mov	r0, r4
 800b0be:	f7fd fcab 	bl	8008a18 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800b0c2:	bf00      	nop
 800b0c4:	3718      	adds	r7, #24
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bdb0      	pop	{r4, r5, r7, pc}

0800b0ca <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b082      	sub	sp, #8
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b0d2:	2202      	movs	r2, #2
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f7ff fcf2 	bl	800aac0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fbb2 	bl	800b846 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 800b0e2:	bf00      	nop
 800b0e4:	3708      	adds	r7, #8
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800b0ea:	b480      	push	{r7}
 800b0ec:	b083      	sub	sp, #12
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800b100:	b590      	push	{r4, r7, lr}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
 800b10a:	687c      	ldr	r4, [r7, #4]
 800b10c:	6838      	ldr	r0, [r7, #0]
 800b10e:	f000 fbaa 	bl	800b866 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>
 800b112:	4603      	mov	r3, r0
 800b114:	4619      	mov	r1, r3
 800b116:	4620      	mov	r0, r4
 800b118:	f7fa fc0a 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	1d1c      	adds	r4, r3, #4
 800b120:	6838      	ldr	r0, [r7, #0]
 800b122:	f000 fbac 	bl	800b87e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>
 800b126:	4603      	mov	r3, r0
 800b128:	4619      	mov	r1, r3
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 fbbf 	bl	800b8ae <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f103 0408 	add.w	r4, r3, #8
 800b136:	6838      	ldr	r0, [r7, #0]
 800b138:	f000 fbad 	bl	800b896 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>
 800b13c:	4603      	mov	r3, r0
 800b13e:	4619      	mov	r1, r3
 800b140:	4620      	mov	r0, r4
 800b142:	f000 fbc3 	bl	800b8cc <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4618      	mov	r0, r3
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd90      	pop	{r4, r7, pc}

0800b150 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4618      	mov	r0, r3
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4618      	mov	r0, r3
 800b174:	370c      	adds	r7, #12
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr

0800b17e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800b17e:	b580      	push	{r7, lr}
 800b180:	b0a4      	sub	sp, #144	; 0x90
 800b182:	af00      	add	r7, sp, #0
 800b184:	60f8      	str	r0, [r7, #12]
 800b186:	60b9      	str	r1, [r7, #8]
 800b188:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800b18a:	68f9      	ldr	r1, [r7, #12]
 800b18c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b190:	68ba      	ldr	r2, [r7, #8]
 800b192:	4618      	mov	r0, r3
 800b194:	f000 fbde 	bl	800b954 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>
 800b198:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b19c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b1a0:	4611      	mov	r1, r2
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 fbf9 	bl	800b99a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f103 0110 	add.w	r1, r3, #16
 800b1ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f000 fc01 	bl	800b9bc <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>
 800b1ba:	f107 0310 	add.w	r3, r7, #16
 800b1be:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b1c2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f000 fc0b 	bl	800b9e2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>
 800b1cc:	f107 0310 	add.w	r3, r7, #16
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f000 fc34 	bl	800ba3e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>
 800b1d6:	eef0 7a40 	vmov.f32	s15, s0
  }
 800b1da:	eeb0 0a67 	vmov.f32	s0, s15
 800b1de:	3790      	adds	r7, #144	; 0x90
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	2101      	movs	r1, #1
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f7ff f99e 	bl	800a532 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 fc3c 	bl	800ba74 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>
  }
 800b1fc:	bf00      	nop
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	bf00      	nop
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>:
  return RowXpr(derived(), i);
}

/// This is the const version of row(). */
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
ConstRowXpr row(Index i) const
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	607a      	str	r2, [r7, #4]
{
  return ConstRowXpr(derived(), i);
 800b224:	68b8      	ldr	r0, [r7, #8]
 800b226:	f7fa fc62 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b22a:	4603      	mov	r3, r0
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	4619      	mov	r1, r3
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f000 fc2f 	bl	800ba94 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>
}
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800b23e:	b580      	push	{r7, lr}
 800b240:	b082      	sub	sp, #8
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800b248:	6838      	ldr	r0, [r7, #0]
 800b24a:	f000 fc4d 	bl	800bae8 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>
 800b24e:	4603      	mov	r3, r0
 800b250:	4619      	mov	r1, r3
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fc6b 	bl	800bb2e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>
}
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b26c:	68b8      	ldr	r0, [r7, #8]
 800b26e:	f7fa fa76 	bl	800575e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b272:	4603      	mov	r3, r0
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	4619      	mov	r1, r3
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f000 fc6f 	bl	800bb5c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>
}
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	3710      	adds	r7, #16
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
  * \sa class CwiseBinaryOp, cwiseAbs2
  */
template<typename OtherDerived>
EIGEN_DEVICE_FUNC
EIGEN_STRONG_INLINE const EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b286:	b5b0      	push	{r4, r5, r7, lr}
 800b288:	b086      	sub	sp, #24
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	60f8      	str	r0, [r7, #12]
 800b28e:	60b9      	str	r1, [r7, #8]
 800b290:	607a      	str	r2, [r7, #4]
{
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b292:	68b8      	ldr	r0, [r7, #8]
 800b294:	f000 fc8a 	bl	800bbac <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800b298:	4604      	mov	r4, r0
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 fc91 	bl	800bbc2 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	f107 0314 	add.w	r3, r7, #20
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fa fab8 	bl	800581c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b2ac:	f107 0314 	add.w	r3, r7, #20
 800b2b0:	462a      	mov	r2, r5
 800b2b2:	4621      	mov	r1, r4
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f000 fcd7 	bl	800bc68 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	3718      	adds	r7, #24
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bdb0      	pop	{r4, r5, r7, pc}

0800b2c2 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b082      	sub	sp, #8
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 fd2a 	bl	800bd24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f000 fd31 	bl	800bd3a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3708      	adds	r7, #8
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>:
  *
  * \sa trace(), prod(), mean()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
DenseBase<Derived>::sum() const
 800b2e2:	b590      	push	{r4, r7, lr}
 800b2e4:	b085      	sub	sp, #20
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
{
  if(SizeAtCompileTime==0 || (SizeAtCompileTime==Dynamic && size()==0))
    return Scalar(0);
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fd1a 	bl	800bd24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	f107 030c 	add.w	r3, r7, #12
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7fa fd87 	bl	8005e0a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b2fc:	f107 030c 	add.w	r3, r7, #12
 800b300:	4619      	mov	r1, r3
 800b302:	4620      	mov	r0, r4
 800b304:	f000 fdf4 	bl	800bef0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b308:	eef0 7a40 	vmov.f32	s15, s0
 800b30c:	bf00      	nop
}
 800b30e:	eeb0 0a67 	vmov.f32	s0, s15
 800b312:	3714      	adds	r7, #20
 800b314:	46bd      	mov	sp, r7
 800b316:	bd90      	pop	{r4, r7, pc}

0800b318 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 fe21 	bl	800bf7c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800b33a:	4603      	mov	r3, r0
    }
 800b33c:	4618      	mov	r0, r3
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 800b344:	b480      	push	{r7}
 800b346:	af00      	add	r7, sp, #0
 800b348:	2303      	movs	r3, #3
 800b34a:	4618      	mov	r0, r3
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 800b354:	b480      	push	{r7}
 800b356:	af00      	add	r7, sp, #0
 800b358:	2303      	movs	r3, #3
 800b35a:	4618      	mov	r0, r3
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>:
    static void run(const Derived&, const OtherDerived&)
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
    }
 800b36e:	bf00      	nop
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b082      	sub	sp, #8
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
 800b382:	6039      	str	r1, [r7, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6839      	ldr	r1, [r7, #0]
 800b388:	4618      	mov	r0, r3
 800b38a:	f000 fe07 	bl	800bf9c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4618      	mov	r0, r3
 800b392:	3708      	adds	r7, #8
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	370c      	adds	r7, #12
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
 800b3ae:	b480      	push	{r7}
 800b3b0:	b083      	sub	sp, #12
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fb fdea 	bl	8006fa8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3708      	adds	r7, #8
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b082      	sub	sp, #8
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	3308      	adds	r3, #8
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7fb fdea 	bl	8006fc4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
	...

0800b3fc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b086      	sub	sp, #24
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800b408:	68b8      	ldr	r0, [r7, #8]
 800b40a:	f7ff ffdb 	bl	800b3c4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>
 800b40e:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800b410:	68b8      	ldr	r0, [r7, #8]
 800b412:	f7ff ffe4 	bl	800b3de <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>
 800b416:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7ff fc8b 	bl	800ad36 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800b420:	4602      	mov	r2, r0
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	4293      	cmp	r3, r2
 800b426:	d107      	bne.n	800b438 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7ff fc8e 	bl	800ad4c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800b430:	4602      	mov	r2, r0
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	4293      	cmp	r3, r2
 800b436:	d001      	beq.n	800b43c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800b438:	2301      	movs	r3, #1
 800b43a:	e000      	b.n	800b43e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800b43c:	2300      	movs	r3, #0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d005      	beq.n	800b44e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	693a      	ldr	r2, [r7, #16]
 800b446:	6979      	ldr	r1, [r7, #20]
 800b448:	4618      	mov	r0, r3
 800b44a:	f7ff f923 	bl	800a694 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	4618      	mov	r0, r3
 800b452:	f7ff fc70 	bl	800ad36 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800b456:	4602      	mov	r2, r0
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d107      	bne.n	800b46e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	4618      	mov	r0, r3
 800b462:	f7ff fc73 	bl	800ad4c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800b466:	4602      	mov	r2, r0
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d006      	beq.n	800b47c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800b46e:	4b05      	ldr	r3, [pc, #20]	; (800b484 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800b470:	4a05      	ldr	r2, [pc, #20]	; (800b488 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800b472:	f240 21fd 	movw	r1, #765	; 0x2fd
 800b476:	4805      	ldr	r0, [pc, #20]	; (800b48c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800b478:	f012 fe8c 	bl	801e194 <__assert_func>
}
 800b47c:	bf00      	nop
 800b47e:	3718      	adds	r7, #24
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	08022674 	.word	0x08022674
 800b488:	08024a20 	.word	0x08024a20
 800b48c:	08022788 	.word	0x08022788

0800b490 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	4618      	mov	r0, r3
 800b49c:	370c      	adds	r7, #12
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800b4a6:	b480      	push	{r7}
 800b4a8:	b085      	sub	sp, #20
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	60f8      	str	r0, [r7, #12]
 800b4ae:	60b9      	str	r1, [r7, #8]
 800b4b0:	607a      	str	r2, [r7, #4]
 800b4b2:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	601a      	str	r2, [r3, #0]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	605a      	str	r2, [r3, #4]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	683a      	ldr	r2, [r7, #0]
 800b4c4:	609a      	str	r2, [r3, #8]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	69ba      	ldr	r2, [r7, #24]
 800b4ca:	60da      	str	r2, [r3, #12]
  }
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3714      	adds	r7, #20
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b082      	sub	sp, #8
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fd92 	bl	800c00c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>
  }
 800b4e8:	bf00      	nop
 800b4ea:	3708      	adds	r7, #8
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	bf00      	nop
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b504:	b5b0      	push	{r4, r5, r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f7fa fa1a 	bl	8005948 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b514:	4604      	mov	r4, r0
 800b516:	6838      	ldr	r0, [r7, #0]
 800b518:	f7fa ff75 	bl	8006406 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 800b51c:	4605      	mov	r5, r0
 800b51e:	f107 030c 	add.w	r3, r7, #12
 800b522:	4618      	mov	r0, r3
 800b524:	f7fb ff09 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b528:	f107 030c 	add.w	r3, r7, #12
 800b52c:	461a      	mov	r2, r3
 800b52e:	4629      	mov	r1, r5
 800b530:	4620      	mov	r0, r4
 800b532:	f000 fd7b 	bl	800c02c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7fa fa06 	bl	8005948 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b53c:	4603      	mov	r3, r0
    }
 800b53e:	4618      	mov	r0, r3
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bdb0      	pop	{r4, r5, r7, pc}

0800b546 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b546:	b5b0      	push	{r4, r5, r7, lr}
 800b548:	b084      	sub	sp, #16
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
 800b54e:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 fd7c 	bl	800c04e <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b556:	4604      	mov	r4, r0
 800b558:	6838      	ldr	r0, [r7, #0]
 800b55a:	f7fa ff5f 	bl	800641c <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 800b55e:	4605      	mov	r5, r0
 800b560:	f107 030c 	add.w	r3, r7, #12
 800b564:	4618      	mov	r0, r3
 800b566:	f7fb fee8 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b56a:	f107 030c 	add.w	r3, r7, #12
 800b56e:	461a      	mov	r2, r3
 800b570:	4629      	mov	r1, r5
 800b572:	4620      	mov	r0, r4
 800b574:	f000 fd76 	bl	800c064 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 fd68 	bl	800c04e <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b57e:	4603      	mov	r3, r0
    }
 800b580:	4618      	mov	r0, r3
 800b582:	3710      	adds	r7, #16
 800b584:	46bd      	mov	sp, r7
 800b586:	bdb0      	pop	{r4, r5, r7, pc}

0800b588 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4618      	mov	r0, r3
 800b594:	f000 fd77 	bl	800c086 <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 800b598:	4603      	mov	r3, r0
 800b59a:	4618      	mov	r0, r3
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800b5a2:	b480      	push	{r7}
 800b5a4:	b083      	sub	sp, #12
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>:
ConstRowXpr row(Index i) const
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800b5c4:	68b8      	ldr	r0, [r7, #8]
 800b5c6:	f7fa f8ca 	bl	800575e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f000 fd6f 	bl	800c0b4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>
}
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b082      	sub	sp, #8
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
 800b5e6:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800b5e8:	6838      	ldr	r0, [r7, #0]
 800b5ea:	f000 fd8d 	bl	800c108 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fdab 	bl	800c14e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>
}
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	3708      	adds	r7, #8
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b60c:	68b8      	ldr	r0, [r7, #8]
 800b60e:	f7fa fe16 	bl	800623e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b612:	4603      	mov	r3, r0
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	4619      	mov	r1, r3
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f000 fdaf 	bl	800c17c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>
}
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b626:	b5b0      	push	{r4, r5, r7, lr}
 800b628:	b086      	sub	sp, #24
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	60f8      	str	r0, [r7, #12]
 800b62e:	60b9      	str	r1, [r7, #8]
 800b630:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b632:	68b8      	ldr	r0, [r7, #8]
 800b634:	f000 fdd4 	bl	800c1e0 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 800b638:	4604      	mov	r4, r0
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fddb 	bl	800c1f6 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>
 800b640:	4605      	mov	r5, r0
 800b642:	f107 0314 	add.w	r3, r7, #20
 800b646:	4618      	mov	r0, r3
 800b648:	f7fa f8e8 	bl	800581c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b64c:	f107 0314 	add.w	r3, r7, #20
 800b650:	462a      	mov	r2, r5
 800b652:	4621      	mov	r1, r4
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f000 fe21 	bl	800c29c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	3718      	adds	r7, #24
 800b65e:	46bd      	mov	sp, r7
 800b660:	bdb0      	pop	{r4, r5, r7, pc}

0800b662 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800b662:	b580      	push	{r7, lr}
 800b664:	b082      	sub	sp, #8
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 fe72 	bl	800c354 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b670:	4603      	mov	r3, r0
 800b672:	4618      	mov	r0, r3
 800b674:	f000 fe79 	bl	800c36a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>
 800b678:	4603      	mov	r3, r0
 800b67a:	4618      	mov	r0, r3
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800b682:	b590      	push	{r4, r7, lr}
 800b684:	b085      	sub	sp, #20
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 fe62 	bl	800c354 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b690:	4604      	mov	r4, r0
 800b692:	f107 030c 	add.w	r3, r7, #12
 800b696:	4618      	mov	r0, r3
 800b698:	f7fa fbb7 	bl	8005e0a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b69c:	f107 030c 	add.w	r3, r7, #12
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	f000 ff3c 	bl	800c520 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b6a8:	eef0 7a40 	vmov.f32	s15, s0
 800b6ac:	bf00      	nop
}
 800b6ae:	eeb0 0a67 	vmov.f32	s0, s15
 800b6b2:	3714      	adds	r7, #20
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd90      	pop	{r4, r7, pc}

0800b6b8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	bf00      	nop
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4618      	mov	r0, r3
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	3304      	adds	r3, #4
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>:
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4618      	mov	r0, r3
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800b712:	b580      	push	{r7, lr}
 800b714:	b082      	sub	sp, #8
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	6039      	str	r1, [r7, #0]
    {
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4618      	mov	r0, r3
 800b720:	f7f9 fcfc 	bl	800511c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800b724:	f7f9 fd0a 	bl	800513c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6839      	ldr	r1, [r7, #0]
 800b72c:	4618      	mov	r0, r3
 800b72e:	f000 ff3d 	bl	800c5ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4618      	mov	r0, r3
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800b73c:	b5b0      	push	{r4, r5, r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	689c      	ldr	r4, [r3, #8]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	6839      	ldr	r1, [r7, #0]
 800b750:	4618      	mov	r0, r3
 800b752:	f7fd f9a8 	bl	8008aa6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800b756:	4605      	mov	r5, r0
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	6839      	ldr	r1, [r7, #0]
 800b75e:	4618      	mov	r0, r3
 800b760:	f000 ff31 	bl	800c5c6 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>
 800b764:	eef0 7a40 	vmov.f32	s15, s0
 800b768:	edc7 7a03 	vstr	s15, [r7, #12]
 800b76c:	f107 030c 	add.w	r3, r7, #12
 800b770:	461a      	mov	r2, r3
 800b772:	4629      	mov	r1, r5
 800b774:	4620      	mov	r0, r4
 800b776:	f000 ff5f 	bl	800c638 <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>
  }
 800b77a:	bf00      	nop
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bdb0      	pop	{r4, r5, r7, pc}

0800b782 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800b782:	b580      	push	{r7, lr}
 800b784:	b082      	sub	sp, #8
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800b78a:	2101      	movs	r1, #1
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f7ff ffd5 	bl	800b73c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 ff67 	bl	800c666 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>
  }
 800b798:	bf00      	nop
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b7a0:	b5b0      	push	{r4, r5, r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f7fa fa68 	bl	8005c80 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	6838      	ldr	r0, [r7, #0]
 800b7b4:	f7fb f98e 	bl	8006ad4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 800b7b8:	4605      	mov	r5, r0
 800b7ba:	f107 030c 	add.w	r3, r7, #12
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7fb fdbb 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b7c4:	f107 030c 	add.w	r3, r7, #12
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	4629      	mov	r1, r5
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f000 ff59 	bl	800c684 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f7fa fa54 	bl	8005c80 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b7d8:	4603      	mov	r3, r0
    }
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bdb0      	pop	{r4, r5, r7, pc}

0800b7e2 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b0a4      	sub	sp, #144	; 0x90
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	60f8      	str	r0, [r7, #12]
 800b7ea:	60b9      	str	r1, [r7, #8]
 800b7ec:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800b7ee:	68f9      	ldr	r1, [r7, #12]
 800b7f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff fd0e 	bl	800b218 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800b7fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b800:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b804:	4611      	mov	r1, r2
 800b806:	4618      	mov	r0, r3
 800b808:	f7ff fd19 	bl	800b23e <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b810:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	4618      	mov	r0, r3
 800b818:	f000 ff45 	bl	800c6a6 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 800b81c:	f107 0314 	add.w	r3, r7, #20
 800b820:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b824:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b828:	4618      	mov	r0, r3
 800b82a:	f000 ff4f 	bl	800c6cc <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 800b82e:	f107 0314 	add.w	r3, r7, #20
 800b832:	4618      	mov	r0, r3
 800b834:	f000 ff78 	bl	800c728 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 800b838:	eef0 7a40 	vmov.f32	s15, s0
  }
 800b83c:	eeb0 0a67 	vmov.f32	s0, s15
 800b840:	3790      	adds	r7, #144	; 0x90
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b846:	b580      	push	{r7, lr}
 800b848:	b082      	sub	sp, #8
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b84e:	2200      	movs	r2, #0
 800b850:	2101      	movs	r1, #1
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f7ff f934 	bl	800aac0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 ff80 	bl	800c75e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 800b85e:	bf00      	nop
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800b866:	b480      	push	{r7}
 800b868:	b083      	sub	sp, #12
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	330c      	adds	r3, #12
 800b872:	4618      	mov	r0, r3
 800b874:	370c      	adds	r7, #12
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr

0800b87e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800b87e:	b480      	push	{r7}
 800b880:	b083      	sub	sp, #12
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4618      	mov	r0, r3
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800b896:	b480      	push	{r7}
 800b898:	b083      	sub	sp, #12
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	370c      	adds	r7, #12
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr

0800b8ae <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b082      	sub	sp, #8
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	6039      	str	r1, [r7, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6839      	ldr	r1, [r7, #0]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7fb fa58 	bl	8006d72 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>:
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6839      	ldr	r1, [r7, #0]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 ff4f 	bl	800c77e <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3708      	adds	r7, #8
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>:
    typedef typename internal::ref_selector<XprType>::non_const_type XprTypeNested;
  public:

    typedef typename internal::dense_xpr_base<BlockType>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(BlockType)
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b082      	sub	sp, #8
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	6039      	str	r1, [r7, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	4611      	mov	r1, r2
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7f9 f8aa 	bl	8004a54 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	3310      	adds	r3, #16
 800b904:	683a      	ldr	r2, [r7, #0]
 800b906:	6912      	ldr	r2, [r2, #16]
 800b908:	601a      	str	r2, [r3, #0]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	4618      	mov	r0, r3
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl)
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	683a      	ldr	r2, [r7, #0]
 800b922:	4611      	mov	r1, r2
 800b924:	4618      	mov	r0, r3
 800b926:	f7ff ffe0 	bl	800b8ea <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4618      	mov	r0, r3
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Block)
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	683a      	ldr	r2, [r7, #0]
 800b942:	4611      	mov	r1, r2
 800b944:	4618      	mov	r0, r3
 800b946:	f7ff ffe5 	bl	800b914 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4618      	mov	r0, r3
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>:
ConstRowXpr row(Index i) const
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800b960:	68b8      	ldr	r0, [r7, #8]
 800b962:	f7fa f824 	bl	80059ae <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 800b966:	4603      	mov	r3, r0
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	4619      	mov	r1, r3
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f000 ff1d 	bl	800c7ac <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>
}
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Transpose)
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b082      	sub	sp, #8
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	6039      	str	r1, [r7, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	4611      	mov	r1, r2
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7ff ffd2 	bl	800b934 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4618      	mov	r0, r3
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b082      	sub	sp, #8
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800b9a4:	6838      	ldr	r0, [r7, #0]
 800b9a6:	f000 ff29 	bl	800c7fc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 ff47 	bl	800c842 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
}
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b9c8:	68b8      	ldr	r0, [r7, #8]
 800b9ca:	f7f9 fffb 	bl	80059c4 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f000 ff47 	bl	800c868 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>
}
 800b9da:	68f8      	ldr	r0, [r7, #12]
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b9e2:	b5b0      	push	{r4, r5, r7, lr}
 800b9e4:	b086      	sub	sp, #24
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	60f8      	str	r0, [r7, #12]
 800b9ea:	60b9      	str	r1, [r7, #8]
 800b9ec:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b9ee:	68b8      	ldr	r0, [r7, #8]
 800b9f0:	f000 ff62 	bl	800c8b8 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 ff69 	bl	800c8ce <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>
 800b9fc:	4605      	mov	r5, r0
 800b9fe:	f107 0314 	add.w	r3, r7, #20
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7f9 ff0a 	bl	800581c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800ba08:	f107 0314 	add.w	r3, r7, #20
 800ba0c:	462a      	mov	r2, r5
 800ba0e:	4621      	mov	r1, r4
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f000 ffaf 	bl	800c974 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>
}
 800ba16:	68f8      	ldr	r0, [r7, #12]
 800ba18:	3718      	adds	r7, #24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bdb0      	pop	{r4, r5, r7, pc}

0800ba1e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>:
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b082      	sub	sp, #8
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fffe 	bl	800ca28 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f001 f805 	bl	800ca3e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>
 800ba34:	4603      	mov	r3, r0
 800ba36:	4618      	mov	r0, r3
 800ba38:	3708      	adds	r7, #8
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800ba3e:	b590      	push	{r4, r7, lr}
 800ba40:	b085      	sub	sp, #20
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 ffee 	bl	800ca28 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	f107 030c 	add.w	r3, r7, #12
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fa f9d9 	bl	8005e0a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800ba58:	f107 030c 	add.w	r3, r7, #12
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f001 f8da 	bl	800cc18 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800ba64:	eef0 7a40 	vmov.f32	s15, s0
 800ba68:	bf00      	nop
}
 800ba6a:	eeb0 0a67 	vmov.f32	s0, s15
 800ba6e:	3714      	adds	r7, #20
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd90      	pop	{r4, r7, pc}

0800ba74 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	2101      	movs	r1, #1
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f7fe fd56 	bl	800a532 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f001 f90c 	bl	800cca4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>
  }
 800ba8c:	bf00      	nop
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	607a      	str	r2, [r7, #4]
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	68b9      	ldr	r1, [r7, #8]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f001 f90c 	bl	800ccc4 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	db07      	blt.n	800bac2 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x2e>
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7f9 fc10 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800baba:	4602      	mov	r2, r0
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4293      	cmp	r3, r2
 800bac0:	db05      	blt.n	800bace <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x3a>
 800bac2:	4b06      	ldr	r3, [pc, #24]	; (800badc <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x48>)
 800bac4:	4a06      	ldr	r2, [pc, #24]	; (800bae0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x4c>)
 800bac6:	2178      	movs	r1, #120	; 0x78
 800bac8:	4806      	ldr	r0, [pc, #24]	; (800bae4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x50>)
 800baca:	f012 fb63 	bl	801e194 <__assert_func>
 800bace:	bf00      	nop
    }
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	4618      	mov	r0, r3
 800bad4:	3710      	adds	r7, #16
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	08024b80 	.word	0x08024b80
 800bae0:	08024c28 	.word	0x08024c28
 800bae4:	08024d04 	.word	0x08024d04

0800bae8 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4618      	mov	r0, r3
 800baf4:	370c      	adds	r7, #12
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b082      	sub	sp, #8
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f001 f8ed 	bl	800cce6 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3708      	adds	r7, #8
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b082      	sub	sp, #8
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f7ff ffed 	bl	800bafe <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	4618      	mov	r0, r3
 800bb28:	3708      	adds	r7, #8
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800bb2e:	b5b0      	push	{r4, r5, r7, lr}
 800bb30:	b082      	sub	sp, #8
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
 800bb36:	6039      	str	r1, [r7, #0]
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f7ff ffec 	bl	800bb16 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	4614      	mov	r4, r2
 800bb44:	461d      	mov	r5, r3
 800bb46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bb4e:	e884 0003 	stmia.w	r4, {r0, r1}
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4618      	mov	r0, r3
 800bb56:	3708      	adds	r7, #8
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bdb0      	pop	{r4, r5, r7, pc}

0800bb5c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	68b9      	ldr	r1, [r7, #8]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f001 f8c4 	bl	800ccfc <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	db07      	blt.n	800bb8a <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7f9 fc47 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800bb82:	4602      	mov	r2, r0
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	4293      	cmp	r3, r2
 800bb88:	db05      	blt.n	800bb96 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800bb8a:	4b05      	ldr	r3, [pc, #20]	; (800bba0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800bb8c:	4a05      	ldr	r2, [pc, #20]	; (800bba4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800bb8e:	2178      	movs	r1, #120	; 0x78
 800bb90:	4805      	ldr	r0, [pc, #20]	; (800bba8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800bb92:	f012 faff 	bl	801e194 <__assert_func>
    }
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	08024b80 	.word	0x08024b80
 800bba4:	08024d58 	.word	0x08024d58
 800bba8:	08024d04 	.word	0x08024d04

0800bbac <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>:
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	370c      	adds	r7, #12
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr

0800bbc2 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>:
 800bbc2:	b480      	push	{r7}
 800bbc4:	b083      	sub	sp, #12
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4618      	mov	r0, r3
 800bbce:	370c      	adds	r7, #12
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f001 f89c 	bl	800cd1e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f7ff ffed 	bl	800bbd8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4618      	mov	r0, r3
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f001 f88e 	bl	800cd34 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b082      	sub	sp, #8
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f001 f88c 	bl	800cd4a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>
 800bc32:	4603      	mov	r3, r0
 800bc34:	4618      	mov	r0, r3
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>:

    typedef typename Base::CoeffReturnType CoeffReturnType;

    /** \copydoc DenseBase::rows() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	f7fb f913 	bl	8006e6e <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3708      	adds	r7, #8
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>:
    /** \copydoc DenseBase::cols() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b082      	sub	sp, #8
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	f7fb f910 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	4618      	mov	r0, r3
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800bc68:	b5b0      	push	{r4, r5, r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f7ff ffba 	bl	800bbf0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	4614      	mov	r4, r2
 800bc82:	461d      	mov	r5, r3
 800bc84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc88:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bc8c:	e884 0003 	stmia.w	r4, {r0, r1}
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f103 0218 	add.w	r2, r3, #24
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	4614      	mov	r4, r2
 800bc9a:	461d      	mov	r5, r3
 800bc9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bca0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bca4:	e884 0003 	stmia.w	r4, {r0, r1}
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	3330      	adds	r3, #48	; 0x30
 800bcac:	6839      	ldr	r1, [r7, #0]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7f9 fe3e 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800bcb4:	68b8      	ldr	r0, [r7, #8]
 800bcb6:	f7ff ffa7 	bl	800bc08 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800bcba:	4604      	mov	r4, r0
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7ff ffbc 	bl	800bc3c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	429c      	cmp	r4, r3
 800bcc8:	d10a      	bne.n	800bce0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 800bcca:	68b8      	ldr	r0, [r7, #8]
 800bccc:	f7ff ffa9 	bl	800bc22 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7ff ffbc 	bl	800bc52 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	429c      	cmp	r4, r3
 800bcde:	d005      	beq.n	800bcec <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 800bce0:	4b05      	ldr	r3, [pc, #20]	; (800bcf8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800bce2:	4a06      	ldr	r2, [pc, #24]	; (800bcfc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800bce4:	2174      	movs	r1, #116	; 0x74
 800bce6:	4806      	ldr	r0, [pc, #24]	; (800bd00 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 800bce8:	f012 fa54 	bl	801e194 <__assert_func>
    }
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bdb0      	pop	{r4, r5, r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	0801fffc 	.word	0x0801fffc
 800bcfc:	08024e34 	.word	0x08024e34
 800bd00:	08020260 	.word	0x08020260

0800bd04 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 f809 	bl	800bd24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800bd12:	4603      	mov	r3, r0
 800bd14:	4618      	mov	r0, r3
 800bd16:	f001 f823 	bl	800cd60 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3708      	adds	r7, #8
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4618      	mov	r0, r3
 800bd30:	370c      	adds	r7, #12
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr

0800bd3a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b082      	sub	sp, #8
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7ff ff5f 	bl	800bc08 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800bd4a:	4603      	mov	r3, r0
    }
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
// but that might complicate template specialization
template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator;

template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator : evaluator_base<Derived>
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f001 f831 	bl	800cdc4 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	4618      	mov	r0, r3
 800bd66:	3708      	adds	r7, #8
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>:

// TODO: This evaluator does not actually use the child evaluator;
// all action is via the data() as returned by the Block expression.

template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7ff ffec 	bl	800bd54 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b082      	sub	sp, #8
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7ff ffeb 	bl	800bd6c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<const T>
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7ff ffeb 	bl	800bd86 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b082      	sub	sp, #8
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7ff ffeb 	bl	800bda0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 ffef 	bl	800cdae <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b082      	sub	sp, #8
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7ff ffe8 	bl	800bdba <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4618      	mov	r0, r3
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7ff ffeb 	bl	800bdda <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4618      	mov	r0, r3
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800be0e:	b580      	push	{r7, lr}
 800be10:	b082      	sub	sp, #8
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 ffdf 	bl	800cdda <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	4618      	mov	r0, r3
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800be26:	b580      	push	{r7, lr}
 800be28:	b082      	sub	sp, #8
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	4618      	mov	r0, r3
 800be32:	f7ff ffec 	bl	800be0e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4618      	mov	r0, r3
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7ff ffeb 	bl	800be26 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	4618      	mov	r0, r3
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b082      	sub	sp, #8
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4618      	mov	r0, r3
 800be66:	f7ff ffeb 	bl	800be40 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4618      	mov	r0, r3
 800be6e:	3708      	adds	r7, #8
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	330c      	adds	r3, #12
 800be80:	4618      	mov	r0, r3
 800be82:	f7ff ffea 	bl	800be5a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	3304      	adds	r3, #4
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7ff ffb2 	bl	800bdf4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4618      	mov	r0, r3
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b082      	sub	sp, #8
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7ff ffe5 	bl	800be74 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 ff74 	bl	800cd98 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	4618      	mov	r0, r3
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800beba:	b580      	push	{r7, lr}
 800bebc:	b082      	sub	sp, #8
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7ff ffe8 	bl	800be9a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4618      	mov	r0, r3
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4618      	mov	r0, r3
 800bee0:	f7ff ffeb 	bl	800beba <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4618      	mov	r0, r3
 800bee8:	3708      	adds	r7, #8
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
	...

0800bef0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800bef0:	b580      	push	{r7, lr}
 800bef2:	ed2d 8b02 	vpush	{d8}
 800bef6:	b088      	sub	sp, #32
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7ff f9df 	bl	800b2c2 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	dd05      	ble.n	800bf16 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7ff fefa 	bl	800bd04 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	dc06      	bgt.n	800bf24 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800bf16:	4b16      	ldr	r3, [pc, #88]	; (800bf70 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800bf18:	4a16      	ldr	r2, [pc, #88]	; (800bf74 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800bf1a:	f240 119b 	movw	r1, #411	; 0x19b
 800bf1e:	4816      	ldr	r0, [pc, #88]	; (800bf78 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800bf20:	f012 f938 	bl	801e194 <__assert_func>
 800bf24:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f7ff fefc 	bl	800bd24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	f107 030c 	add.w	r3, r7, #12
 800bf32:	4611      	mov	r1, r2
 800bf34:	4618      	mov	r0, r3
 800bf36:	f000 ff20 	bl	800cd7a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f7ff fef2 	bl	800bd24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800bf40:	4602      	mov	r2, r0
 800bf42:	f107 030c 	add.w	r3, r7, #12
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f000 ff51 	bl	800cdf0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800bf4e:	eeb0 8a40 	vmov.f32	s16, s0
 800bf52:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800bf54:	f107 030c 	add.w	r3, r7, #12
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7ff ffbb 	bl	800bed4 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bf5e:	eef0 7a48 	vmov.f32	s15, s16
}
 800bf62:	eeb0 0a67 	vmov.f32	s0, s15
 800bf66:	3720      	adds	r7, #32
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	ecbd 8b02 	vpop	{d8}
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	0802507c 	.word	0x0802507c
 800bf74:	080250c0 	.word	0x080250c0
 800bf78:	08025288 	.word	0x08025288

0800bf7c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7fe feb4 	bl	800acf2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7fe fedd 	bl	800ad4c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800bf92:	4603      	mov	r3, r0
 800bf94:	4618      	mov	r0, r3
 800bf96:	3708      	adds	r7, #8
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800bf9c:	b590      	push	{r4, r7, lr}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 ff4a 	bl	800ce40 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>
 800bfac:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800bfae:	6838      	ldr	r0, [r7, #0]
 800bfb0:	f000 ff2f 	bl	800ce12 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800bfb4:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	4620      	mov	r0, r4
 800bfba:	f000 ff4c 	bl	800ce56 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>
      m_rhs(xpr.rhs()),
 800bfbe:	6838      	ldr	r0, [r7, #0]
 800bfc0:	f000 ff32 	bl	800ce28 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>
 800bfc4:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	3324      	adds	r3, #36	; 0x24
 800bfca:	6812      	ldr	r2, [r2, #0]
 800bfcc:	601a      	str	r2, [r3, #0]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800bfd2:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800bfd4:	4611      	mov	r1, r2
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fb fe16 	bl	8007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	3324      	adds	r3, #36	; 0x24
      m_innerDim(xpr.lhs().cols())
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	4610      	mov	r0, r2
 800bfea:	f000 ff49 	bl	800ce80 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
 800bfee:	6838      	ldr	r0, [r7, #0]
 800bff0:	f000 ff0f 	bl	800ce12 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800bff4:	4603      	mov	r3, r0
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7f9 feaf 	bl	8005d5a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800bffc:	4602      	mov	r2, r0
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	631a      	str	r2, [r3, #48]	; 0x30
  }
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	4618      	mov	r0, r3
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd90      	pop	{r4, r7, pc}

0800c00c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c014:	2200      	movs	r2, #0
 800c016:	2100      	movs	r1, #0
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 ff40 	bl	800ce9e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 ff56 	bl	800ced0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>
  }
 800c024:	bf00      	nop
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b086      	sub	sp, #24
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	68b9      	ldr	r1, [r7, #8]
 800c040:	6978      	ldr	r0, [r7, #20]
 800c042:	f000 ff55 	bl	800cef0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800c046:	bf00      	nop
 800c048:	3718      	adds	r7, #24
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800c04e:	b480      	push	{r7}
 800c050:	b083      	sub	sp, #12
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4618      	mov	r0, r3
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	68b9      	ldr	r1, [r7, #8]
 800c078:	6978      	ldr	r0, [r7, #20]
 800c07a:	f000 ff73 	bl	800cf64 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 800c07e:	bf00      	nop
 800c080:	3718      	adds	r7, #24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800c086:	b480      	push	{r7}
 800c088:	b083      	sub	sp, #12
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4618      	mov	r0, r3
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 ff9c 	bl	800cfe2 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3708      	adds	r7, #8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	68b9      	ldr	r1, [r7, #8]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f000 ff97 	bl	800cffa <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	db07      	blt.n	800c0e2 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f7f9 f9a6 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	db05      	blt.n	800c0ee <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 800c0e2:	4b06      	ldr	r3, [pc, #24]	; (800c0fc <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 800c0e4:	4a06      	ldr	r2, [pc, #24]	; (800c100 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 800c0e6:	2178      	movs	r1, #120	; 0x78
 800c0e8:	4806      	ldr	r0, [pc, #24]	; (800c104 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x50>)
 800c0ea:	f012 f853 	bl	801e194 <__assert_func>
 800c0ee:	bf00      	nop
    }
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	08024b80 	.word	0x08024b80
 800c100:	080252dc 	.word	0x080252dc
 800c104:	08024d04 	.word	0x08024d04

0800c108 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c108:	b480      	push	{r7}
 800c10a:	b083      	sub	sp, #12
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4618      	mov	r0, r3
 800c114:	370c      	adds	r7, #12
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr

0800c11e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
 800c11e:	b580      	push	{r7, lr}
 800c120:	b082      	sub	sp, #8
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 ff78 	bl	800d01c <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4618      	mov	r0, r3
 800c130:	3708      	adds	r7, #8
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}

0800c136 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800c136:	b580      	push	{r7, lr}
 800c138:	b082      	sub	sp, #8
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	6078      	str	r0, [r7, #4]
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f7ff ffed 	bl	800c11e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4618      	mov	r0, r3
 800c148:	3708      	adds	r7, #8
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800c14e:	b5b0      	push	{r4, r5, r7, lr}
 800c150:	b082      	sub	sp, #8
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
 800c156:	6039      	str	r1, [r7, #0]
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f7ff ffec 	bl	800c136 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	4614      	mov	r4, r2
 800c164:	461d      	mov	r5, r3
 800c166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c16a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c16e:	e884 0003 	stmia.w	r4, {r0, r1}
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4618      	mov	r0, r3
 800c176:	3708      	adds	r7, #8
 800c178:	46bd      	mov	sp, r7
 800c17a:	bdb0      	pop	{r4, r5, r7, pc}

0800c17c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	68b9      	ldr	r1, [r7, #8]
 800c18e:	4618      	mov	r0, r3
 800c190:	f000 ff4f 	bl	800d032 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	db0f      	blt.n	800c1ba <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x3e>
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7fa f88c 	bl	80062ba <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	db0d      	blt.n	800c1c6 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fa f88f 	bl	80062d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	db05      	blt.n	800c1c6 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800c1ba:	4b06      	ldr	r3, [pc, #24]	; (800c1d4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x58>)
 800c1bc:	4a06      	ldr	r2, [pc, #24]	; (800c1d8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x5c>)
 800c1be:	2178      	movs	r1, #120	; 0x78
 800c1c0:	4806      	ldr	r0, [pc, #24]	; (800c1dc <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x60>)
 800c1c2:	f011 ffe7 	bl	801e194 <__assert_func>
 800c1c6:	bf00      	nop
    }
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	08024b80 	.word	0x08024b80
 800c1d8:	080253b8 	.word	0x080253b8
 800c1dc:	08024d04 	.word	0x08024d04

0800c1e0 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>:
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	370c      	adds	r7, #12
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>:
 800c1f6:	b480      	push	{r7}
 800c1f8:	b083      	sub	sp, #12
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4618      	mov	r0, r3
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 ff1d 	bl	800d054 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4618      	mov	r0, r3
 800c21e:	3708      	adds	r7, #8
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7ff ffed 	bl	800c20c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	4618      	mov	r0, r3
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4618      	mov	r0, r3
 800c248:	f000 ff0f 	bl	800d06a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>
 800c24c:	4603      	mov	r3, r0
 800c24e:	4618      	mov	r0, r3
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800c256:	b580      	push	{r7, lr}
 800c258:	b082      	sub	sp, #8
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4618      	mov	r0, r3
 800c262:	f000 ff0d 	bl	800d080 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>
 800c266:	4603      	mov	r3, r0
 800c268:	4618      	mov	r0, r3
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	f7fa fe01 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c27c:	4603      	mov	r3, r0
 800c27e:	4618      	mov	r0, r3
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c286:	b580      	push	{r7, lr}
 800c288:	b082      	sub	sp, #8
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
 800c28e:	f7fa fdf6 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c292:	4603      	mov	r3, r0
 800c294:	4618      	mov	r0, r3
 800c296:	3708      	adds	r7, #8
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800c29c:	b5b0      	push	{r4, r5, r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	607a      	str	r2, [r7, #4]
 800c2a8:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	f7ff ffba 	bl	800c224 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>
 800c2b0:	68fa      	ldr	r2, [r7, #12]
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	4614      	mov	r4, r2
 800c2b6:	461d      	mov	r5, r3
 800c2b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c2c0:	e884 0003 	stmia.w	r4, {r0, r1}
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f103 0218 	add.w	r2, r3, #24
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	4614      	mov	r4, r2
 800c2ce:	461d      	mov	r5, r3
 800c2d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2d4:	682b      	ldr	r3, [r5, #0]
 800c2d6:	6023      	str	r3, [r4, #0]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	332c      	adds	r3, #44	; 0x2c
 800c2dc:	6839      	ldr	r1, [r7, #0]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7f9 fb26 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800c2e4:	68b8      	ldr	r0, [r7, #8]
 800c2e6:	f7ff ffa9 	bl	800c23c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7ff ffbe 	bl	800c270 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	429c      	cmp	r4, r3
 800c2f8:	d10a      	bne.n	800c310 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x74>
 800c2fa:	68b8      	ldr	r0, [r7, #8]
 800c2fc:	f7ff ffab 	bl	800c256 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800c300:	4604      	mov	r4, r0
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4618      	mov	r0, r3
 800c306:	f7ff ffbe 	bl	800c286 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>
 800c30a:	4603      	mov	r3, r0
 800c30c:	429c      	cmp	r4, r3
 800c30e:	d005      	beq.n	800c31c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x80>
 800c310:	4b05      	ldr	r3, [pc, #20]	; (800c328 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x8c>)
 800c312:	4a06      	ldr	r2, [pc, #24]	; (800c32c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800c314:	2174      	movs	r1, #116	; 0x74
 800c316:	4806      	ldr	r0, [pc, #24]	; (800c330 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800c318:	f011 ff3c 	bl	801e194 <__assert_func>
    }
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	4618      	mov	r0, r3
 800c320:	3710      	adds	r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bdb0      	pop	{r4, r5, r7, pc}
 800c326:	bf00      	nop
 800c328:	0801fffc 	.word	0x0801fffc
 800c32c:	08025494 	.word	0x08025494
 800c330:	08020260 	.word	0x08020260

0800c334 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 f809 	bl	800c354 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800c342:	4603      	mov	r3, r0
 800c344:	4618      	mov	r0, r3
 800c346:	f000 fea6 	bl	800d096 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>
 800c34a:	4603      	mov	r3, r0
 800c34c:	4618      	mov	r0, r3
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4618      	mov	r0, r3
 800c360:	370c      	adds	r7, #12
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr

0800c36a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b082      	sub	sp, #8
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	4618      	mov	r0, r3
 800c376:	f7ff ff61 	bl	800c23c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800c37a:	4603      	mov	r3, r0
    }
 800c37c:	4618      	mov	r0, r3
 800c37e:	3708      	adds	r7, #8
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 feb4 	bl	800d0fa <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	4618      	mov	r0, r3
 800c396:	3708      	adds	r7, #8
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff ffec 	bl	800c384 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3708      	adds	r7, #8
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b082      	sub	sp, #8
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7ff ffeb 	bl	800c39c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3708      	adds	r7, #8
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7ff ffeb 	bl	800c3b6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3708      	adds	r7, #8
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b082      	sub	sp, #8
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7ff ffeb 	bl	800c3d0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 fe72 	bl	800d0e4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	4618      	mov	r0, r3
 800c404:	3708      	adds	r7, #8
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b082      	sub	sp, #8
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4618      	mov	r0, r3
 800c416:	f7ff ffe8 	bl	800c3ea <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	4618      	mov	r0, r3
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4618      	mov	r0, r3
 800c430:	f7ff ffeb 	bl	800c40a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4618      	mov	r0, r3
 800c438:	3708      	adds	r7, #8
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c43e:	b580      	push	{r7, lr}
 800c440:	b082      	sub	sp, #8
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fe62 	bl	800d110 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4618      	mov	r0, r3
 800c450:	3708      	adds	r7, #8
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c456:	b580      	push	{r7, lr}
 800c458:	b082      	sub	sp, #8
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4618      	mov	r0, r3
 800c462:	f7ff ffec 	bl	800c43e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4618      	mov	r0, r3
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7ff ffeb 	bl	800c456 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	4618      	mov	r0, r3
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b082      	sub	sp, #8
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4618      	mov	r0, r3
 800c496:	f7ff ffeb 	bl	800c470 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4618      	mov	r0, r3
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	330c      	adds	r3, #12
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7ff ffea 	bl	800c48a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7ff ffb2 	bl	800c424 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3708      	adds	r7, #8
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800c4ca:	b580      	push	{r7, lr}
 800c4cc:	b082      	sub	sp, #8
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7ff ffe5 	bl	800c4a4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 fdf7 	bl	800d0ce <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b082      	sub	sp, #8
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7ff ffe8 	bl	800c4ca <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	4618      	mov	r0, r3
 800c510:	f7ff ffeb 	bl	800c4ea <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4618      	mov	r0, r3
 800c518:	3708      	adds	r7, #8
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800c520:	b580      	push	{r7, lr}
 800c522:	ed2d 8b02 	vpush	{d8}
 800c526:	b088      	sub	sp, #32
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f7ff f897 	bl	800b662 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	dd05      	ble.n	800c546 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f7ff fefa 	bl	800c334 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	dc06      	bgt.n	800c554 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800c546:	4b16      	ldr	r3, [pc, #88]	; (800c5a0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800c548:	4a16      	ldr	r2, [pc, #88]	; (800c5a4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800c54a:	f240 119b 	movw	r1, #411	; 0x19b
 800c54e:	4816      	ldr	r0, [pc, #88]	; (800c5a8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800c550:	f011 fe20 	bl	801e194 <__assert_func>
 800c554:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f7ff fefc 	bl	800c354 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800c55c:	4602      	mov	r2, r0
 800c55e:	f107 030c 	add.w	r3, r7, #12
 800c562:	4611      	mov	r1, r2
 800c564:	4618      	mov	r0, r3
 800c566:	f000 fda3 	bl	800d0b0 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f7ff fef2 	bl	800c354 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800c570:	4602      	mov	r2, r0
 800c572:	f107 030c 	add.w	r3, r7, #12
 800c576:	6839      	ldr	r1, [r7, #0]
 800c578:	4618      	mov	r0, r3
 800c57a:	f000 fdd4 	bl	800d126 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800c57e:	eeb0 8a40 	vmov.f32	s16, s0
 800c582:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c584:	f107 030c 	add.w	r3, r7, #12
 800c588:	4618      	mov	r0, r3
 800c58a:	f7ff ffbb 	bl	800c504 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c58e:	eef0 7a48 	vmov.f32	s15, s16
}
 800c592:	eeb0 0a67 	vmov.f32	s0, s15
 800c596:	3720      	adds	r7, #32
 800c598:	46bd      	mov	sp, r7
 800c59a:	ecbd 8b02 	vpop	{d8}
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	0802507c 	.word	0x0802507c
 800c5a4:	080256dc 	.word	0x080256dc
 800c5a8:	08025288 	.word	0x08025288

0800c5ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800c5b6:	6839      	ldr	r1, [r7, #0]
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 fdc5 	bl	800d148 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800c5be:	bf00      	nop
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b0a2      	sub	sp, #136	; 0x88
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
 800c5ce:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6819      	ldr	r1, [r3, #0]
 800c5e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c5e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f7fe ffe5 	bl	800b5b8 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800c5ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c5f2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800c5f6:	4611      	mov	r1, r2
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7fe fff0 	bl	800b5de <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	1d19      	adds	r1, r3, #4
 800c602:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c606:	2200      	movs	r2, #0
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fe fff9 	bl	800b600 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800c60e:	f107 030c 	add.w	r3, r7, #12
 800c612:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c616:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7ff f803 	bl	800b626 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800c620:	f107 030c 	add.w	r3, r7, #12
 800c624:	4618      	mov	r0, r3
 800c626:	f7ff f82c 	bl	800b682 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800c62a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c62e:	eeb0 0a67 	vmov.f32	s0, s15
 800c632:	3788      	adds	r7, #136	; 0x88
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 800c638:	b480      	push	{r7}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	607a      	str	r2, [r7, #4]
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	ed93 7a00 	vldr	s14, [r3]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	edd3 7a00 	vldr	s15, [r3]
 800c650:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	edc3 7a00 	vstr	s15, [r3]
 800c65a:	bf00      	nop
 800c65c:	3714      	adds	r7, #20
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr

0800c666 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800c666:	b580      	push	{r7, lr}
 800c668:	b082      	sub	sp, #8
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800c66e:	2102      	movs	r1, #2
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f7ff f863 	bl	800b73c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 fd87 	bl	800d18a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>
  }
 800c67c:	bf00      	nop
 800c67e:	3708      	adds	r7, #8
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	68b9      	ldr	r1, [r7, #8]
 800c698:	6978      	ldr	r0, [r7, #20]
 800c69a:	f000 fd80 	bl	800d19e <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800c69e:	bf00      	nop
 800c6a0:	3718      	adds	r7, #24
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}

0800c6a6 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 800c6a6:	b580      	push	{r7, lr}
 800c6a8:	b084      	sub	sp, #16
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	60f8      	str	r0, [r7, #12]
 800c6ae:	60b9      	str	r1, [r7, #8]
 800c6b0:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800c6b2:	68b8      	ldr	r0, [r7, #8]
 800c6b4:	f7f9 fa1b 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	4619      	mov	r1, r3
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f000 fd98 	bl	800d1f4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>
}
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	3710      	adds	r7, #16
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800c6cc:	b5b0      	push	{r4, r5, r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800c6d8:	68b8      	ldr	r0, [r7, #8]
 800c6da:	f7ff fa67 	bl	800bbac <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800c6de:	4604      	mov	r4, r0
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 fdaf 	bl	800d244 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 800c6e6:	4605      	mov	r5, r0
 800c6e8:	f107 0314 	add.w	r3, r7, #20
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7f9 f895 	bl	800581c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800c6f2:	f107 0314 	add.w	r3, r7, #20
 800c6f6:	462a      	mov	r2, r5
 800c6f8:	4621      	mov	r1, r4
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f000 fddc 	bl	800d2b8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>
}
 800c700:	68f8      	ldr	r0, [r7, #12]
 800c702:	3718      	adds	r7, #24
 800c704:	46bd      	mov	sp, r7
 800c706:	bdb0      	pop	{r4, r5, r7, pc}

0800c708 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 fe2f 	bl	800d374 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c716:	4603      	mov	r3, r0
 800c718:	4618      	mov	r0, r3
 800c71a:	f000 fe36 	bl	800d38a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>
 800c71e:	4603      	mov	r3, r0
 800c720:	4618      	mov	r0, r3
 800c722:	3708      	adds	r7, #8
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800c728:	b590      	push	{r4, r7, lr}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 fe1f 	bl	800d374 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c736:	4604      	mov	r4, r0
 800c738:	f107 030c 	add.w	r3, r7, #12
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7f9 fb64 	bl	8005e0a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800c742:	f107 030c 	add.w	r3, r7, #12
 800c746:	4619      	mov	r1, r3
 800c748:	4620      	mov	r0, r4
 800c74a:	f000 fe9b 	bl	800d484 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800c74e:	eef0 7a40 	vmov.f32	s15, s0
 800c752:	bf00      	nop
}
 800c754:	eeb0 0a67 	vmov.f32	s0, s15
 800c758:	3714      	adds	r7, #20
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd90      	pop	{r4, r7, pc}

0800c75e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c75e:	b580      	push	{r7, lr}
 800c760:	b082      	sub	sp, #8
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c766:	2201      	movs	r2, #1
 800c768:	2101      	movs	r1, #1
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f7fe f9a8 	bl	800aac0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 fecd 	bl	800d510 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 800c776:	bf00      	nop
 800c778:	3708      	adds	r7, #8
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}

0800c77e <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC explicit evaluator(const XprType& n)
 800c77e:	b590      	push	{r4, r7, lr}
 800c780:	b083      	sub	sp, #12
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
 800c786:	6039      	str	r1, [r7, #0]
    : m_functor(n.functor()), m_wrapper()
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 fedd 	bl	800d548 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800c78e:	687c      	ldr	r4, [r7, #4]
 800c790:	6838      	ldr	r0, [r7, #0]
 800c792:	f000 fecd 	bl	800d530 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 800c796:	4603      	mov	r3, r0
 800c798:	4619      	mov	r1, r3
 800c79a:	4620      	mov	r0, r4
 800c79c:	f7f9 f8b8 	bl	8005910 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
  }
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	370c      	adds	r7, #12
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd90      	pop	{r4, r7, pc}
	...

0800c7ac <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	68b9      	ldr	r1, [r7, #8]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f000 fecd 	bl	800d55e <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>
      eigen_assert( (i>=0) && (
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	db06      	blt.n	800c7d8 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x2c>
 800c7ca:	68b8      	ldr	r0, [r7, #8]
 800c7cc:	f7fb fe6d 	bl	80084aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	db05      	blt.n	800c7e4 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x38>
 800c7d8:	4b05      	ldr	r3, [pc, #20]	; (800c7f0 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x44>)
 800c7da:	4a06      	ldr	r2, [pc, #24]	; (800c7f4 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x48>)
 800c7dc:	2178      	movs	r1, #120	; 0x78
 800c7de:	4806      	ldr	r0, [pc, #24]	; (800c7f8 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x4c>)
 800c7e0:	f011 fcd8 	bl	801e194 <__assert_func>
 800c7e4:	bf00      	nop
    }
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	08024b80 	.word	0x08024b80
 800c7f4:	080258a4 	.word	0x080258a4
 800c7f8:	08024d04 	.word	0x08024d04

0800c7fc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4618      	mov	r0, r3
 800c808:	370c      	adds	r7, #12
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr

0800c812 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
 800c812:	b580      	push	{r7, lr}
 800c814:	b082      	sub	sp, #8
 800c816:	af00      	add	r7, sp, #0
 800c818:	6078      	str	r0, [r7, #4]
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 feb0 	bl	800d580 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	4618      	mov	r0, r3
 800c824:	3708      	adds	r7, #8
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b082      	sub	sp, #8
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f7ff ffed 	bl	800c812 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4618      	mov	r0, r3
 800c83c:	3708      	adds	r7, #8
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800c842:	b580      	push	{r7, lr}
 800c844:	b082      	sub	sp, #8
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
 800c84a:	6039      	str	r1, [r7, #0]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7ff ffec 	bl	800c82a <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6839      	ldr	r1, [r7, #0]
 800c856:	4618      	mov	r0, r3
 800c858:	f7ff f86c 	bl	800b934 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4618      	mov	r0, r3
 800c860:	3708      	adds	r7, #8
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
	...

0800c868 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	68b9      	ldr	r1, [r7, #8]
 800c87a:	4618      	mov	r0, r3
 800c87c:	f000 fe8b 	bl	800d596 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2b00      	cmp	r3, #0
 800c884:	db06      	blt.n	800c894 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x2c>
 800c886:	68b8      	ldr	r0, [r7, #8]
 800c888:	f7fb fe1d 	bl	80084c6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800c88c:	4602      	mov	r2, r0
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4293      	cmp	r3, r2
 800c892:	db05      	blt.n	800c8a0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x38>
 800c894:	4b05      	ldr	r3, [pc, #20]	; (800c8ac <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x44>)
 800c896:	4a06      	ldr	r2, [pc, #24]	; (800c8b0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x48>)
 800c898:	2178      	movs	r1, #120	; 0x78
 800c89a:	4806      	ldr	r0, [pc, #24]	; (800c8b4 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x4c>)
 800c89c:	f011 fc7a 	bl	801e194 <__assert_func>
    }
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	08024b80 	.word	0x08024b80
 800c8b0:	08025a3c 	.word	0x08025a3c
 800c8b4:	08024d04 	.word	0x08024d04

0800c8b8 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>:
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	370c      	adds	r7, #12
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr

0800c8ce <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>:
 800c8ce:	b480      	push	{r7}
 800c8d0:	b083      	sub	sp, #12
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 fe63 	bl	800d5b8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f7ff ffed 	bl	800c8e4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	4618      	mov	r0, r3
 800c90e:	3708      	adds	r7, #8
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4618      	mov	r0, r3
 800c920:	f000 fe55 	bl	800d5ce <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>
 800c924:	4603      	mov	r3, r0
 800c926:	4618      	mov	r0, r3
 800c928:	3708      	adds	r7, #8
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800c92e:	b580      	push	{r7, lr}
 800c930:	b082      	sub	sp, #8
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	4618      	mov	r0, r3
 800c93a:	f000 fe53 	bl	800d5e4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>
 800c93e:	4603      	mov	r3, r0
 800c940:	4618      	mov	r0, r3
 800c942:	3708      	adds	r7, #8
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	f7fa fa95 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c954:	4603      	mov	r3, r0
 800c956:	4618      	mov	r0, r3
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c95e:	b580      	push	{r7, lr}
 800c960:	b082      	sub	sp, #8
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
 800c966:	f7fa fa8a 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c96a:	4603      	mov	r3, r0
 800c96c:	4618      	mov	r0, r3
 800c96e:	3708      	adds	r7, #8
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800c974:	b5b0      	push	{r4, r5, r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	607a      	str	r2, [r7, #4]
 800c980:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f7ff ffba 	bl	800c8fc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	3304      	adds	r3, #4
 800c98c:	68b9      	ldr	r1, [r7, #8]
 800c98e:	4618      	mov	r0, r3
 800c990:	f7fe fff3 	bl	800b97a <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f103 021c 	add.w	r2, r3, #28
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4614      	mov	r4, r2
 800c99e:	461d      	mov	r5, r3
 800c9a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c9a8:	e884 0003 	stmia.w	r4, {r0, r1}
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	3334      	adds	r3, #52	; 0x34
 800c9b0:	6839      	ldr	r1, [r7, #0]
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7f8 ffbc 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800c9b8:	68b8      	ldr	r0, [r7, #8]
 800c9ba:	f7ff ffab 	bl	800c914 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800c9be:	4604      	mov	r4, r0
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7ff ffc0 	bl	800c948 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	429c      	cmp	r4, r3
 800c9cc:	d10a      	bne.n	800c9e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x70>
 800c9ce:	68b8      	ldr	r0, [r7, #8]
 800c9d0:	f7ff ffad 	bl	800c92e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7ff ffc0 	bl	800c95e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	429c      	cmp	r4, r3
 800c9e2:	d005      	beq.n	800c9f0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x7c>
 800c9e4:	4b05      	ldr	r3, [pc, #20]	; (800c9fc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x88>)
 800c9e6:	4a06      	ldr	r2, [pc, #24]	; (800ca00 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x8c>)
 800c9e8:	2174      	movs	r1, #116	; 0x74
 800c9ea:	4806      	ldr	r0, [pc, #24]	; (800ca04 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x90>)
 800c9ec:	f011 fbd2 	bl	801e194 <__assert_func>
    }
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bdb0      	pop	{r4, r5, r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	0801fffc 	.word	0x0801fffc
 800ca00:	08025b2c 	.word	0x08025b2c
 800ca04:	08020260 	.word	0x08020260

0800ca08 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 f809 	bl	800ca28 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800ca16:	4603      	mov	r3, r0
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f000 fdee 	bl	800d5fa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	4618      	mov	r0, r3
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	4618      	mov	r0, r3
 800ca34:	370c      	adds	r7, #12
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr

0800ca3e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b082      	sub	sp, #8
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	3304      	adds	r3, #4
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7ff ff62 	bl	800c914 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800ca50:	4603      	mov	r3, r0
    }
 800ca52:	4618      	mov	r0, r3
 800ca54:	3708      	adds	r7, #8
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<const T>
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b082      	sub	sp, #8
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7fc fc30 	bl	80092ca <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3708      	adds	r7, #8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>, IndexBased>
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7ff ffeb 	bl	800ca5a <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fdeb 	bl	800d660 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3708      	adds	r7, #8
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /*HasDirectAccess*/ false>
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7ff ffe8 	bl	800ca74 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4618      	mov	r0, r3
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800caae:	b580      	push	{r7, lr}
 800cab0:	b082      	sub	sp, #8
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4618      	mov	r0, r3
 800caba:	f7ff ffeb 	bl	800ca94 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4618      	mov	r0, r3
 800cac2:	3708      	adds	r7, #8
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7ff ffeb 	bl	800caae <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4618      	mov	r0, r3
 800cadc:	3708      	adds	r7, #8
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b082      	sub	sp, #8
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4618      	mov	r0, r3
 800caee:	f7ff ffeb 	bl	800cac8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 fda9 	bl	800d64a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	4618      	mov	r0, r3
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b082      	sub	sp, #8
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7ff ffe8 	bl	800cae2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4618      	mov	r0, r3
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7ff ffeb 	bl	800cb02 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3708      	adds	r7, #8
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b082      	sub	sp, #8
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 fd99 	bl	800d676 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4618      	mov	r0, r3
 800cb48:	3708      	adds	r7, #8
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b082      	sub	sp, #8
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7ff ffec 	bl	800cb36 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4618      	mov	r0, r3
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7ff ffeb 	bl	800cb4e <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3708      	adds	r7, #8
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b082      	sub	sp, #8
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7ff ffeb 	bl	800cb68 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	4618      	mov	r0, r3
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>:
  struct Data
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	3320      	adds	r3, #32
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7ff ffea 	bl	800cb82 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	3304      	adds	r3, #4
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7ff ffb2 	bl	800cb1c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3708      	adds	r7, #8
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}

0800cbc2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b082      	sub	sp, #8
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7ff ffe5 	bl	800cb9c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 fd2e 	bl	800d634 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3708      	adds	r7, #8
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b082      	sub	sp, #8
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7ff ffe8 	bl	800cbc2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7ff ffeb 	bl	800cbe2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3708      	adds	r7, #8
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
	...

0800cc18 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	ed2d 8b02 	vpush	{d8}
 800cc1e:	b08c      	sub	sp, #48	; 0x30
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f7fe fef9 	bl	800ba1e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	dd05      	ble.n	800cc3e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f7ff fee8 	bl	800ca08 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	dc06      	bgt.n	800cc4c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800cc3e:	4b16      	ldr	r3, [pc, #88]	; (800cc98 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800cc40:	4a16      	ldr	r2, [pc, #88]	; (800cc9c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800cc42:	f240 119b 	movw	r1, #411	; 0x19b
 800cc46:	4816      	ldr	r0, [pc, #88]	; (800cca0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800cc48:	f011 faa4 	bl	801e194 <__assert_func>
 800cc4c:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f7ff feea 	bl	800ca28 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800cc54:	4602      	mov	r2, r0
 800cc56:	f107 0308 	add.w	r3, r7, #8
 800cc5a:	4611      	mov	r1, r2
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f000 fcda 	bl	800d616 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f7ff fee0 	bl	800ca28 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	f107 0308 	add.w	r3, r7, #8
 800cc6e:	6839      	ldr	r1, [r7, #0]
 800cc70:	4618      	mov	r0, r3
 800cc72:	f000 fd0b 	bl	800d68c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>
 800cc76:	eeb0 8a40 	vmov.f32	s16, s0
 800cc7a:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800cc7c:	f107 0308 	add.w	r3, r7, #8
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7ff ffbb 	bl	800cbfc <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800cc86:	eef0 7a48 	vmov.f32	s15, s16
}
 800cc8a:	eeb0 0a67 	vmov.f32	s0, s15
 800cc8e:	3730      	adds	r7, #48	; 0x30
 800cc90:	46bd      	mov	sp, r7
 800cc92:	ecbd 8b02 	vpop	{d8}
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	0802507c 	.word	0x0802507c
 800cc9c:	08025f14 	.word	0x08025f14
 800cca0:	08025288 	.word	0x08025288

0800cca4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ccac:	2202      	movs	r2, #2
 800ccae:	2101      	movs	r1, #1
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f7fd fc3e 	bl	800a532 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 fcf9 	bl	800d6ae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>
  }
 800ccbc:	bf00      	nop
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	607a      	str	r2, [r7, #4]
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	68b9      	ldr	r1, [r7, #8]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f000 fcf9 	bl	800d6ce <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	4618      	mov	r0, r3
 800cce0:	3710      	adds	r7, #16
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cce6:	b480      	push	{r7}
 800cce8:	b083      	sub	sp, #12
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
    }
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	68b9      	ldr	r1, [r7, #8]
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f000 fd13 	bl	800d73a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	4618      	mov	r0, r3
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cd1e:	b480      	push	{r7}
 800cd20:	b083      	sub	sp, #12
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
    }
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	4618      	mov	r0, r3
 800cd2a:	370c      	adds	r7, #12
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>:
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	f7fa f897 	bl	8006e6e <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800cd40:	4603      	mov	r3, r0
 800cd42:	4618      	mov	r0, r3
 800cd44:	3708      	adds	r7, #8
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b082      	sub	sp, #8
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
 800cd52:	f7fa f894 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cd56:	4603      	mov	r3, r0
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3708      	adds	r7, #8
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7fe ff59 	bl	800bc22 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800cd70:	4603      	mov	r3, r0
    }
 800cd72:	4618      	mov	r0, r3
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b082      	sub	sp, #8
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
 800cd82:	6039      	str	r1, [r7, #0]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6839      	ldr	r1, [r7, #0]
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f000 fd0c 	bl	800d7a6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4618      	mov	r0, r3
 800cd92:	3708      	adds	r7, #8
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	4618      	mov	r0, r3
 800cda4:	370c      	adds	r7, #12
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
 800cdae:	b480      	push	{r7}
 800cdb0:	b083      	sub	sp, #12
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	4618      	mov	r0, r3
 800cdba:	370c      	adds	r7, #12
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	4618      	mov	r0, r3
 800cdd0:	370c      	adds	r7, #12
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr

0800cdda <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
 800cdda:	b480      	push	{r7}
 800cddc:	b083      	sub	sp, #12
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	4618      	mov	r0, r3
 800cde6:	370c      	adds	r7, #12
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800cdfc:	68b9      	ldr	r1, [r7, #8]
 800cdfe:	68f8      	ldr	r0, [r7, #12]
 800ce00:	f000 fce0 	bl	800d7c4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800ce04:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ce08:	eeb0 0a67 	vmov.f32	s0, s15
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800ce12:	b480      	push	{r7}
 800ce14:	b083      	sub	sp, #12
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	370c      	adds	r7, #12
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	3308      	adds	r3, #8
 800ce34:	4618      	mov	r0, r3
 800ce36:	370c      	adds	r7, #12
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	370c      	adds	r7, #12
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr

0800ce56 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b082      	sub	sp, #8
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	6039      	str	r1, [r7, #0]
    {
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7f8 f937 	bl	80050d6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800ce68:	f7f8 f945 	bl	80050f6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6839      	ldr	r1, [r7, #0]
 800ce70:	4618      	mov	r0, r3
 800ce72:	f000 fccb 	bl	800d80c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>
    }
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3708      	adds	r7, #8
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6839      	ldr	r1, [r7, #0]
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f000 fcc9 	bl	800d826 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	4618      	mov	r0, r3
 800ce98:	3708      	adds	r7, #8
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b086      	sub	sp, #24
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	60f8      	str	r0, [r7, #12]
 800cea6:	60b9      	str	r1, [r7, #8]
 800cea8:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800ceaa:	6879      	ldr	r1, [r7, #4]
 800ceac:	68b8      	ldr	r0, [r7, #8]
 800ceae:	f000 fcd0 	bl	800d852 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800ceb2:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800ceb4:	6879      	ldr	r1, [r7, #4]
 800ceb6:	68b8      	ldr	r0, [r7, #8]
 800ceb8:	f000 fcd7 	bl	800d86a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800cebc:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800cebe:	693a      	ldr	r2, [r7, #16]
 800cec0:	6979      	ldr	r1, [r7, #20]
 800cec2:	68f8      	ldr	r0, [r7, #12]
 800cec4:	f000 fcdd 	bl	800d882 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800cec8:	bf00      	nop
 800ceca:	3718      	adds	r7, #24
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ced8:	2201      	movs	r2, #1
 800ceda:	2100      	movs	r1, #0
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f7ff ffde 	bl	800ce9e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 fcf3 	bl	800d8ce <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>
  }
 800cee8:	bf00      	nop
 800ceea:	3708      	adds	r7, #8
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800cef0:	b590      	push	{r4, r7, lr}
 800cef2:	b087      	sub	sp, #28
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800cefc:	68b8      	ldr	r0, [r7, #8]
 800cefe:	f7fb fc65 	bl	80087cc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 800cf02:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800cf04:	68b8      	ldr	r0, [r7, #8]
 800cf06:	f7f9 fab8 	bl	800647a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800cf0a:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7f8 fa89 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800cf14:	4602      	mov	r2, r0
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d107      	bne.n	800cf2c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x3c>
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7f8 fa76 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800cf24:	4602      	mov	r2, r0
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d001      	beq.n	800cf30 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x40>
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e000      	b.n	800cf32 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x42>
 800cf30:	2300      	movs	r3, #0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d005      	beq.n	800cf42 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x52>
      dst.resize(dstRows, dstCols);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	693a      	ldr	r2, [r7, #16]
 800cf3a:	6979      	ldr	r1, [r7, #20]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7fb f97d 	bl	800823c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800cf42:	68b8      	ldr	r0, [r7, #8]
 800cf44:	f000 fcd3 	bl	800d8ee <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>
 800cf48:	4604      	mov	r4, r0
 800cf4a:	68b8      	ldr	r0, [r7, #8]
 800cf4c:	f000 fcdb 	bl	800d906 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>
 800cf50:	4603      	mov	r3, r0
 800cf52:	461a      	mov	r2, r3
 800cf54:	4621      	mov	r1, r4
 800cf56:	68f8      	ldr	r0, [r7, #12]
 800cf58:	f000 fce1 	bl	800d91e <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>
  }
 800cf5c:	bf00      	nop
 800cf5e:	371c      	adds	r7, #28
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd90      	pop	{r4, r7, pc}

0800cf64 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename XprType::Scalar> &)
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b088      	sub	sp, #32
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800cf70:	68b8      	ldr	r0, [r7, #8]
 800cf72:	f7f9 fa90 	bl	8006496 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 800cf76:	61f8      	str	r0, [r7, #28]
    Index dstCols = src.cols();
 800cf78:	68b8      	ldr	r0, [r7, #8]
 800cf7a:	f7fb fc35 	bl	80087e8 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 800cf7e:	61b8      	str	r0, [r7, #24]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7f9 f999 	bl	80062ba <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d107      	bne.n	800cfa0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7f9 f99c 	bl	80062d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d001      	beq.n	800cfa4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e000      	b.n	800cfa6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d005      	beq.n	800cfb6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	69ba      	ldr	r2, [r7, #24]
 800cfae:	69f9      	ldr	r1, [r7, #28]
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f000 fcd3 	bl	800d95c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    const int Size = EIGEN_PLAIN_ENUM_MIN(XprType::ColsAtCompileTime,DstXprType::ColsAtCompileTime);
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	617b      	str	r3, [r7, #20]
    ActualXprType actual_xpr(src.nestedExpression());
 800cfba:	68b8      	ldr	r0, [r7, #8]
 800cfbc:	f000 fd00 	bl	800d9c0 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	f107 0310 	add.w	r3, r7, #16
 800cfc6:	4611      	mov	r1, r2
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f000 fd04 	bl	800d9d6 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>
    compute_inverse<ActualXprTypeCleanded, DstXprType>::run(actual_xpr, dst);
 800cfce:	f107 0310 	add.w	r3, r7, #16
 800cfd2:	68f9      	ldr	r1, [r7, #12]
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f000 fd13 	bl	800da00 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>
  }
 800cfda:	bf00      	nop
 800cfdc:	3720      	adds	r7, #32
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}

0800cfe2 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b082      	sub	sp, #8
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 fd47 	bl	800da7e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>
 800cff0:	4603      	mov	r3, r0
    }
 800cff2:	4618      	mov	r0, r3
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b084      	sub	sp, #16
 800cffe:	af00      	add	r7, sp, #0
 800d000:	60f8      	str	r0, [r7, #12]
 800d002:	60b9      	str	r1, [r7, #8]
 800d004:	607a      	str	r2, [r7, #4]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	68b9      	ldr	r1, [r7, #8]
 800d00c:	4618      	mov	r0, r3
 800d00e:	f000 fd58 	bl	800dac2 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	4618      	mov	r0, r3
 800d016:	3710      	adds	r7, #16
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d01c:	b480      	push	{r7}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
    }
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4618      	mov	r0, r3
 800d028:	370c      	adds	r7, #12
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr

0800d032 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800d032:	b580      	push	{r7, lr}
 800d034:	b084      	sub	sp, #16
 800d036:	af00      	add	r7, sp, #0
 800d038:	60f8      	str	r0, [r7, #12]
 800d03a:	60b9      	str	r1, [r7, #8]
 800d03c:	607a      	str	r2, [r7, #4]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	68b9      	ldr	r1, [r7, #8]
 800d044:	4618      	mov	r0, r3
 800d046:	f000 fd6d 	bl	800db24 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	4618      	mov	r0, r3
 800d04e:	3710      	adds	r7, #16
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
    }
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	4618      	mov	r0, r3
 800d060:	370c      	adds	r7, #12
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr

0800d06a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b082      	sub	sp, #8
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
 800d072:	f7f9 ff04 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d076:	4603      	mov	r3, r0
 800d078:	4618      	mov	r0, r3
 800d07a:	3708      	adds	r7, #8
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	f7f9 fef9 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d08c:	4603      	mov	r3, r0
 800d08e:	4618      	mov	r0, r3
 800d090:	3708      	adds	r7, #8
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}

0800d096 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800d096:	b580      	push	{r7, lr}
 800d098:	b082      	sub	sp, #8
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7ff f8d8 	bl	800c256 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800d0a6:	4603      	mov	r3, r0
    }
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3708      	adds	r7, #8
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6839      	ldr	r1, [r7, #0]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f000 fd61 	bl	800db86 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3708      	adds	r7, #8
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800d0ce:	b480      	push	{r7}
 800d0d0:	b083      	sub	sp, #12
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	370c      	adds	r7, #12
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	370c      	adds	r7, #12
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr

0800d0fa <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
 800d0fa:	b480      	push	{r7}
 800d0fc:	b083      	sub	sp, #12
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4618      	mov	r0, r3
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	4618      	mov	r0, r3
 800d11c:	370c      	adds	r7, #12
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr

0800d126 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800d126:	b580      	push	{r7, lr}
 800d128:	b084      	sub	sp, #16
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	60f8      	str	r0, [r7, #12]
 800d12e:	60b9      	str	r1, [r7, #8]
 800d130:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800d132:	68b9      	ldr	r1, [r7, #8]
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f000 fd35 	bl	800dba4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800d13a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d13e:	eeb0 0a67 	vmov.f32	s0, s15
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800d148:	b5b0      	push	{r4, r5, r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f7fe ff7b 	bl	800c04e <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d158:	4604      	mov	r4, r0
 800d15a:	6838      	ldr	r0, [r7, #0]
 800d15c:	f7f9 fade 	bl	800671c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 800d160:	4605      	mov	r5, r0
 800d162:	f107 030c 	add.w	r3, r7, #12
 800d166:	4618      	mov	r0, r3
 800d168:	f7fa f8e7 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800d16c:	f107 030c 	add.w	r3, r7, #12
 800d170:	461a      	mov	r2, r3
 800d172:	4629      	mov	r1, r5
 800d174:	4620      	mov	r0, r4
 800d176:	f000 fd26 	bl	800dbc6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f7fe ff67 	bl	800c04e <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d180:	4603      	mov	r3, r0
    }
 800d182:	4618      	mov	r0, r3
 800d184:	3710      	adds	r7, #16
 800d186:	46bd      	mov	sp, r7
 800d188:	bdb0      	pop	{r4, r5, r7, pc}

0800d18a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800d18a:	b480      	push	{r7}
 800d18c:	b083      	sub	sp, #12
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
 800d192:	bf00      	nop
 800d194:	370c      	adds	r7, #12
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr

0800d19e <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800d19e:	b590      	push	{r4, r7, lr}
 800d1a0:	b087      	sub	sp, #28
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	60f8      	str	r0, [r7, #12]
 800d1a6:	60b9      	str	r1, [r7, #8]
 800d1a8:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800d1aa:	68b8      	ldr	r0, [r7, #8]
 800d1ac:	f000 fd1c 	bl	800dbe8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	f107 0310 	add.w	r3, r7, #16
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fa f8bf 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800d1bc:	f107 0310 	add.w	r3, r7, #16
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	4621      	mov	r1, r4
 800d1c4:	68f8      	ldr	r0, [r7, #12]
 800d1c6:	f7fa f99f 	bl	8007508 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800d1ca:	68b8      	ldr	r0, [r7, #8]
 800d1cc:	f000 fd18 	bl	800dc00 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>
 800d1d0:	4604      	mov	r4, r0
 800d1d2:	f107 0314 	add.w	r3, r7, #20
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f000 fd1e 	bl	800dc18 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800d1dc:	f107 0314 	add.w	r3, r7, #20
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	4621      	mov	r1, r4
 800d1e4:	68f8      	ldr	r0, [r7, #12]
 800d1e6:	f000 fd22 	bl	800dc2e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800d1ea:	bf00      	nop
 800d1ec:	371c      	adds	r7, #28
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd90      	pop	{r4, r7, pc}
	...

0800d1f4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	68b9      	ldr	r1, [r7, #8]
 800d206:	4618      	mov	r0, r3
 800d208:	f000 fd22 	bl	800dc50 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	db07      	blt.n	800d222 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	4618      	mov	r0, r3
 800d216:	f7f8 f855 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800d21a:	4602      	mov	r2, r0
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4293      	cmp	r3, r2
 800d220:	db05      	blt.n	800d22e <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800d222:	4b05      	ldr	r3, [pc, #20]	; (800d238 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800d224:	4a05      	ldr	r2, [pc, #20]	; (800d23c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800d226:	2178      	movs	r1, #120	; 0x78
 800d228:	4805      	ldr	r0, [pc, #20]	; (800d240 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800d22a:	f010 ffb3 	bl	801e194 <__assert_func>
    }
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	4618      	mov	r0, r3
 800d232:	3710      	adds	r7, #16
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	08024b80 	.word	0x08024b80
 800d23c:	080261a8 	.word	0x080261a8
 800d240:	08024d04 	.word	0x08024d04

0800d244 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>:
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	4618      	mov	r0, r3
 800d250:	370c      	adds	r7, #12
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr

0800d25a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b082      	sub	sp, #8
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 fd05 	bl	800dc72 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	4618      	mov	r0, r3
 800d26c:	3708      	adds	r7, #8
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}

0800d272 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800d272:	b580      	push	{r7, lr}
 800d274:	b082      	sub	sp, #8
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f7ff ffed 	bl	800d25a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	4618      	mov	r0, r3
 800d284:	3708      	adds	r7, #8
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}

0800d28a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>:
 800d28a:	b580      	push	{r7, lr}
 800d28c:	b082      	sub	sp, #8
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
 800d292:	f7f9 fdec 	bl	8006e6e <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800d296:	4603      	mov	r3, r0
 800d298:	4618      	mov	r0, r3
 800d29a:	3708      	adds	r7, #8
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	f7f9 fde9 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3708      	adds	r7, #8
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
	...

0800d2b8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800d2b8:	b5b0      	push	{r4, r5, r7, lr}
 800d2ba:	b084      	sub	sp, #16
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	607a      	str	r2, [r7, #4]
 800d2c4:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800d2c6:	68f8      	ldr	r0, [r7, #12]
 800d2c8:	f7ff ffd3 	bl	800d272 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>
 800d2cc:	68fa      	ldr	r2, [r7, #12]
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	4614      	mov	r4, r2
 800d2d2:	461d      	mov	r5, r3
 800d2d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d2dc:	e884 0003 	stmia.w	r4, {r0, r1}
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f103 0218 	add.w	r2, r3, #24
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4614      	mov	r4, r2
 800d2ea:	461d      	mov	r5, r3
 800d2ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d2f4:	e884 0003 	stmia.w	r4, {r0, r1}
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	3330      	adds	r3, #48	; 0x30
 800d2fc:	6839      	ldr	r1, [r7, #0]
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7f8 fb16 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800d304:	68b8      	ldr	r0, [r7, #8]
 800d306:	f7fe fc7f 	bl	800bc08 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800d30a:	4604      	mov	r4, r0
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	4618      	mov	r0, r3
 800d310:	f7ff ffbb 	bl	800d28a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800d314:	4603      	mov	r3, r0
 800d316:	429c      	cmp	r4, r3
 800d318:	d10a      	bne.n	800d330 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x78>
 800d31a:	68b8      	ldr	r0, [r7, #8]
 800d31c:	f7fe fc81 	bl	800bc22 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800d320:	4604      	mov	r4, r0
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	4618      	mov	r0, r3
 800d326:	f7ff ffbb 	bl	800d2a0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 800d32a:	4603      	mov	r3, r0
 800d32c:	429c      	cmp	r4, r3
 800d32e:	d005      	beq.n	800d33c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x84>
 800d330:	4b05      	ldr	r3, [pc, #20]	; (800d348 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x90>)
 800d332:	4a06      	ldr	r2, [pc, #24]	; (800d34c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x94>)
 800d334:	2174      	movs	r1, #116	; 0x74
 800d336:	4806      	ldr	r0, [pc, #24]	; (800d350 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x98>)
 800d338:	f010 ff2c 	bl	801e194 <__assert_func>
    }
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	4618      	mov	r0, r3
 800d340:	3710      	adds	r7, #16
 800d342:	46bd      	mov	sp, r7
 800d344:	bdb0      	pop	{r4, r5, r7, pc}
 800d346:	bf00      	nop
 800d348:	0801fffc 	.word	0x0801fffc
 800d34c:	08026284 	.word	0x08026284
 800d350:	08020260 	.word	0x08020260

0800d354 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 f809 	bl	800d374 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800d362:	4603      	mov	r3, r0
 800d364:	4618      	mov	r0, r3
 800d366:	f000 fc8f 	bl	800dc88 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>
 800d36a:	4603      	mov	r3, r0
 800d36c:	4618      	mov	r0, r3
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	4618      	mov	r0, r3
 800d380:	370c      	adds	r7, #12
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b082      	sub	sp, #8
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	4618      	mov	r0, r3
 800d396:	f7fe fc37 	bl	800bc08 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800d39a:	4603      	mov	r3, r0
    }
 800d39c:	4618      	mov	r0, r3
 800d39e:	3708      	adds	r7, #8
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 fc92 	bl	800dcd6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3708      	adds	r7, #8
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7ff ffec 	bl	800d3a4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3708      	adds	r7, #8
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b082      	sub	sp, #8
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7ff ffeb 	bl	800d3bc <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3708      	adds	r7, #8
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7ff ffeb 	bl	800d3d6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	4618      	mov	r0, r3
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}

0800d40a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b082      	sub	sp, #8
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	330c      	adds	r3, #12
 800d416:	4618      	mov	r0, r3
 800d418:	f7ff ffea 	bl	800d3f0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	3304      	adds	r3, #4
 800d420:	4618      	mov	r0, r3
 800d422:	f7fe fce7 	bl	800bdf4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	4618      	mov	r0, r3
 800d42a:	3708      	adds	r7, #8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	4618      	mov	r0, r3
 800d43c:	f7ff ffe5 	bl	800d40a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f000 fc3d 	bl	800dcc0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4618      	mov	r0, r3
 800d44a:	3708      	adds	r7, #8
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7ff ffe8 	bl	800d430 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	4618      	mov	r0, r3
 800d464:	3708      	adds	r7, #8
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}

0800d46a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b082      	sub	sp, #8
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4618      	mov	r0, r3
 800d476:	f7ff ffeb 	bl	800d450 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	4618      	mov	r0, r3
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800d484:	b580      	push	{r7, lr}
 800d486:	ed2d 8b02 	vpush	{d8}
 800d48a:	b088      	sub	sp, #32
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f7ff f938 	bl	800c708 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	dd05      	ble.n	800d4aa <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f7ff ff58 	bl	800d354 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	dc06      	bgt.n	800d4b8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800d4aa:	4b16      	ldr	r3, [pc, #88]	; (800d504 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800d4ac:	4a16      	ldr	r2, [pc, #88]	; (800d508 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800d4ae:	f240 119b 	movw	r1, #411	; 0x19b
 800d4b2:	4816      	ldr	r0, [pc, #88]	; (800d50c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800d4b4:	f010 fe6e 	bl	801e194 <__assert_func>
 800d4b8:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f7ff ff5a 	bl	800d374 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	f107 030c 	add.w	r3, r7, #12
 800d4c6:	4611      	mov	r1, r2
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f000 fbea 	bl	800dca2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f7ff ff50 	bl	800d374 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	f107 030c 	add.w	r3, r7, #12
 800d4da:	6839      	ldr	r1, [r7, #0]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f000 fc05 	bl	800dcec <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 800d4e2:	eeb0 8a40 	vmov.f32	s16, s0
 800d4e6:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800d4e8:	f107 030c 	add.w	r3, r7, #12
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7ff ffbc 	bl	800d46a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800d4f2:	eef0 7a48 	vmov.f32	s15, s16
}
 800d4f6:	eeb0 0a67 	vmov.f32	s0, s15
 800d4fa:	3720      	adds	r7, #32
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	ecbd 8b02 	vpop	{d8}
 800d502:	bd80      	pop	{r7, pc}
 800d504:	0802507c 	.word	0x0802507c
 800d508:	080264cc 	.word	0x080264cc
 800d50c:	08025288 	.word	0x08025288

0800d510 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d518:	2202      	movs	r2, #2
 800d51a:	2101      	movs	r1, #1
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f7fd facf 	bl	800aac0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 fbf3 	bl	800dd0e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 800d528:	bf00      	nop
 800d52a:	3708      	adds	r7, #8
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:

    /** \returns the functor representing the nullary operation */
    EIGEN_DEVICE_FUNC
    const NullaryOp& functor() const { return m_functor; }
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	3304      	adds	r3, #4
 800d53c:	4618      	mov	r0, r3
 800d53e:	370c      	adds	r7, #12
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr

0800d548 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800d548:	b480      	push	{r7}
 800d54a:	b083      	sub	sp, #12
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	4618      	mov	r0, r3
 800d554:	370c      	adds	r7, #12
 800d556:	46bd      	mov	sp, r7
 800d558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55c:	4770      	bx	lr

0800d55e <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800d55e:	b580      	push	{r7, lr}
 800d560:	b084      	sub	sp, #16
 800d562:	af00      	add	r7, sp, #0
 800d564:	60f8      	str	r0, [r7, #12]
 800d566:	60b9      	str	r1, [r7, #8]
 800d568:	607a      	str	r2, [r7, #4]
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	68b9      	ldr	r1, [r7, #8]
 800d570:	4618      	mov	r0, r3
 800d572:	f000 fbe8 	bl	800dd46 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	4618      	mov	r0, r3
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d580:	b480      	push	{r7}
 800d582:	b083      	sub	sp, #12
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
    }
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	4618      	mov	r0, r3
 800d58c:	370c      	adds	r7, #12
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr

0800d596 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>:
 800d596:	b580      	push	{r7, lr}
 800d598:	b084      	sub	sp, #16
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	60f8      	str	r0, [r7, #12]
 800d59e:	60b9      	str	r1, [r7, #8]
 800d5a0:	607a      	str	r2, [r7, #4]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	68b9      	ldr	r1, [r7, #8]
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f000 fbf7 	bl	800dd9c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
    }
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	370c      	adds	r7, #12
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr

0800d5ce <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>:
      : m_xpr(xpr), m_startRow(startRow), m_startCol(startCol),
                    m_blockRows(blockRows), m_blockCols(blockCols)
    {}

    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
    EIGEN_DEVICE_FUNC inline Index cols() const { return m_blockCols.value(); }
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b082      	sub	sp, #8
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
 800d5d6:	f7f9 fc52 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3708      	adds	r7, #8
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>:
    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	f7f9 fc47 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3708      	adds	r7, #8
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}

0800d5fa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800d5fa:	b580      	push	{r7, lr}
 800d5fc:	b082      	sub	sp, #8
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	3304      	adds	r3, #4
 800d606:	4618      	mov	r0, r3
 800d608:	f7ff f991 	bl	800c92e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800d60c:	4603      	mov	r3, r0
    }
 800d60e:	4618      	mov	r0, r3
 800d610:	3708      	adds	r7, #8
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800d616:	b580      	push	{r7, lr}
 800d618:	b082      	sub	sp, #8
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	6039      	str	r1, [r7, #0]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6839      	ldr	r1, [r7, #0]
 800d624:	4618      	mov	r0, r3
 800d626:	f000 fbeb 	bl	800de00 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	4618      	mov	r0, r3
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800d634:	b480      	push	{r7}
 800d636:	b083      	sub	sp, #12
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	4618      	mov	r0, r3
 800d640:	370c      	adds	r7, #12
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr

0800d64a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
 800d64a:	b480      	push	{r7}
 800d64c:	b083      	sub	sp, #12
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	4618      	mov	r0, r3
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	4618      	mov	r0, r3
 800d66c:	370c      	adds	r7, #12
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr

0800d676 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
 800d676:	b480      	push	{r7}
 800d678:	b083      	sub	sp, #12
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	4618      	mov	r0, r3
 800d682:	370c      	adds	r7, #12
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr

0800d68c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800d698:	68b9      	ldr	r1, [r7, #8]
 800d69a:	68f8      	ldr	r0, [r7, #12]
 800d69c:	f000 fbbf 	bl	800de1e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>
 800d6a0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d6a4:	eeb0 0a67 	vmov.f32	s0, s15
 800d6a8:	3710      	adds	r7, #16
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b082      	sub	sp, #8
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	2102      	movs	r1, #2
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f7fc ff39 	bl	800a532 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 fbbd 	bl	800de40 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>
  }
 800d6c6:	bf00      	nop
 800d6c8:	3708      	adds	r7, #8
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}

0800d6ce <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)

    /** Column or Row constructor
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    BlockImpl_dense(XprType& xpr, Index i)
 800d6ce:	b5b0      	push	{r4, r5, r7, lr}
 800d6d0:	b084      	sub	sp, #16
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	60f8      	str	r0, [r7, #12]
 800d6d6:	60b9      	str	r1, [r7, #8]
 800d6d8:	607a      	str	r2, [r7, #4]
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
             BlockRows==1 ? 1 : xpr.rows(),
             BlockCols==1 ? 1 : xpr.cols()),
        m_xpr(xpr),
        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d6da:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7fa ff34 	bl	800854c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800d6e4:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d6e6:	68b8      	ldr	r0, [r7, #8]
 800d6e8:	f000 fbba 	bl	800de60 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800d6ec:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	fb02 f303 	mul.w	r3, r2, r3
 800d6f4:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d6f6:	441d      	add	r5, r3
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7f7 fde2 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800d700:	4603      	mov	r3, r0
 800d702:	2201      	movs	r2, #1
 800d704:	4629      	mov	r1, r5
 800d706:	4620      	mov	r0, r4
 800d708:	f000 fbc2 	bl	800de90 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	68ba      	ldr	r2, [r7, #8]
 800d710:	609a      	str	r2, [r3, #8]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	330c      	adds	r3, #12
 800d716:	6879      	ldr	r1, [r7, #4]
 800d718:	4618      	mov	r0, r3
 800d71a:	f000 fbf7 	bl	800df0c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	3310      	adds	r3, #16
 800d722:	2100      	movs	r1, #0
 800d724:	4618      	mov	r0, r3
 800d726:	f000 fbf1 	bl	800df0c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
    {
      init();
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f000 fbfd 	bl	800df2a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>
    }
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	4618      	mov	r0, r3
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bdb0      	pop	{r4, r5, r7, pc}

0800d73a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d73a:	b5b0      	push	{r4, r5, r7, lr}
 800d73c:	b084      	sub	sp, #16
 800d73e:	af00      	add	r7, sp, #0
 800d740:	60f8      	str	r0, [r7, #12]
 800d742:	60b9      	str	r1, [r7, #8]
 800d744:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d746:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7f9 fe9d 	bl	800748a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800d750:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d752:	68b8      	ldr	r0, [r7, #8]
 800d754:	f7f9 ff6a 	bl	800762c <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800d758:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	fb02 f303 	mul.w	r3, r2, r3
 800d760:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d762:	441d      	add	r5, r3
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	4618      	mov	r0, r3
 800d768:	f7f7 fe5d 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800d76c:	4602      	mov	r2, r0
 800d76e:	2301      	movs	r3, #1
 800d770:	4629      	mov	r1, r5
 800d772:	4620      	mov	r0, r4
 800d774:	f000 fc00 	bl	800df78 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	68ba      	ldr	r2, [r7, #8]
 800d77c:	609a      	str	r2, [r3, #8]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	330c      	adds	r3, #12
 800d782:	2100      	movs	r1, #0
 800d784:	4618      	mov	r0, r3
 800d786:	f000 fbc1 	bl	800df0c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	3310      	adds	r3, #16
 800d78e:	6879      	ldr	r1, [r7, #4]
 800d790:	4618      	mov	r0, r3
 800d792:	f000 fc2f 	bl	800dff4 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d796:	68f8      	ldr	r0, [r7, #12]
 800d798:	f000 fc46 	bl	800e028 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bdb0      	pop	{r4, r5, r7, pc}

0800d7a6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b082      	sub	sp, #8
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
 800d7ae:	6039      	str	r1, [r7, #0]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6839      	ldr	r1, [r7, #0]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f000 fc47 	bl	800e048 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3708      	adds	r7, #8
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d7ce:	6839      	ldr	r1, [r7, #0]
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 fc4b 	bl	800e06c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800d7d6:	eef0 7a40 	vmov.f32	s15, s0
 800d7da:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800d7de:	6839      	ldr	r1, [r7, #0]
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 fc54 	bl	800e08e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800d7e6:	eef0 7a40 	vmov.f32	s15, s0
 800d7ea:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d7ee:	f107 020c 	add.w	r2, r7, #12
 800d7f2:	f107 0308 	add.w	r3, r7, #8
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	6838      	ldr	r0, [r7, #0]
 800d7fa:	f7fb fefe 	bl	80095fa <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800d7fe:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d802:	eeb0 0a67 	vmov.f32	s0, s15
 800d806:	3710      	adds	r7, #16
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800d816:	6839      	ldr	r1, [r7, #0]
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 fc5c 	bl	800e0d6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800d81e:	bf00      	nop
 800d820:	3708      	adds	r7, #8
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800d826:	b590      	push	{r4, r7, lr}
 800d828:	b083      	sub	sp, #12
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
 800d82e:	6039      	str	r1, [r7, #0]
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 fc7d 	bl	800e130 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 800d836:	687c      	ldr	r4, [r7, #4]
 800d838:	6838      	ldr	r0, [r7, #0]
 800d83a:	f000 fc6d 	bl	800e118 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800d83e:	4603      	mov	r3, r0
 800d840:	4619      	mov	r1, r3
 800d842:	4620      	mov	r0, r4
 800d844:	f7fa f9e0 	bl	8007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	4618      	mov	r0, r3
 800d84c:	370c      	adds	r7, #12
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd90      	pop	{r4, r7, pc}

0800d852 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800d852:	b480      	push	{r7}
 800d854:	b083      	sub	sp, #12
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
 800d85a:	6039      	str	r1, [r7, #0]
      : inner;
 800d85c:	687b      	ldr	r3, [r7, #4]
  }
 800d85e:	4618      	mov	r0, r3
 800d860:	370c      	adds	r7, #12
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr

0800d86a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800d86a:	b480      	push	{r7}
 800d86c:	b083      	sub	sp, #12
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]
 800d872:	6039      	str	r1, [r7, #0]
      : outer;
 800d874:	683b      	ldr	r3, [r7, #0]
  }
 800d876:	4618      	mov	r0, r3
 800d878:	370c      	adds	r7, #12
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr

0800d882 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800d882:	b5b0      	push	{r4, r5, r7, lr}
 800d884:	b086      	sub	sp, #24
 800d886:	af00      	add	r7, sp, #0
 800d888:	60f8      	str	r0, [r7, #12]
 800d88a:	60b9      	str	r1, [r7, #8]
 800d88c:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	689c      	ldr	r4, [r3, #8]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	68b9      	ldr	r1, [r7, #8]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f000 fc53 	bl	800e146 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	687a      	ldr	r2, [r7, #4]
 800d8a8:	68b9      	ldr	r1, [r7, #8]
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f000 fc63 	bl	800e176 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>
 800d8b0:	eef0 7a40 	vmov.f32	s15, s0
 800d8b4:	edc7 7a05 	vstr	s15, [r7, #20]
 800d8b8:	f107 0314 	add.w	r3, r7, #20
 800d8bc:	461a      	mov	r2, r3
 800d8be:	4629      	mov	r1, r5
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	f7fb f8a9 	bl	8008a18 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800d8c6:	bf00      	nop
 800d8c8:	3718      	adds	r7, #24
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bdb0      	pop	{r4, r5, r7, pc}

0800d8ce <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d8ce:	b580      	push	{r7, lr}
 800d8d0:	b082      	sub	sp, #8
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d8d6:	2202      	movs	r2, #2
 800d8d8:	2100      	movs	r1, #0
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f7ff fadf 	bl	800ce9e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f000 fc7b 	bl	800e1dc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>
  }
 800d8e6:	bf00      	nop
 800d8e8:	3708      	adds	r7, #8
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}

0800d8ee <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800d8ee:	b480      	push	{r7}
 800d8f0:	b083      	sub	sp, #12
 800d8f2:	af00      	add	r7, sp, #0
 800d8f4:	6078      	str	r0, [r7, #4]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	370c      	adds	r7, #12
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800d906:	b480      	push	{r7}
 800d908:	b083      	sub	sp, #12
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	3304      	adds	r3, #4
 800d912:	4618      	mov	r0, r3
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr

0800d91e <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800d91e:	b580      	push	{r7, lr}
 800d920:	b088      	sub	sp, #32
 800d922:	af00      	add	r7, sp, #0
 800d924:	60f8      	str	r0, [r7, #12]
 800d926:	60b9      	str	r1, [r7, #8]
 800d928:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800d92a:	f107 0314 	add.w	r3, r7, #20
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	68b9      	ldr	r1, [r7, #8]
 800d932:	4618      	mov	r0, r3
 800d934:	f000 fc62 	bl	800e1fc <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>
 800d938:	f107 031c 	add.w	r3, r7, #28
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7f9 fcfc 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800d942:	f107 021c 	add.w	r2, r7, #28
 800d946:	f107 0314 	add.w	r3, r7, #20
 800d94a:	4619      	mov	r1, r3
 800d94c:	68f8      	ldr	r0, [r7, #12]
 800d94e:	f000 fc6c 	bl	800e22a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800d952:	bf00      	nop
 800d954:	3720      	adds	r7, #32
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
	...

0800d95c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b086      	sub	sp, #24
 800d960:	af00      	add	r7, sp, #0
 800d962:	60f8      	str	r0, [r7, #12]
 800d964:	60b9      	str	r1, [r7, #8]
 800d966:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d108      	bne.n	800d980 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2b01      	cmp	r3, #1
 800d972:	d105      	bne.n	800d980 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	2b00      	cmp	r3, #0
 800d978:	db02      	blt.n	800d980 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	da06      	bge.n	800d98e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x32>
 800d980:	4b0c      	ldr	r3, [pc, #48]	; (800d9b4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x58>)
 800d982:	4a0d      	ldr	r2, [pc, #52]	; (800d9b8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x5c>)
 800d984:	f240 1111 	movw	r1, #273	; 0x111
 800d988:	480c      	ldr	r0, [pc, #48]	; (800d9bc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x60>)
 800d98a:	f010 fc03 	bl	801e194 <__assert_func>
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	617b      	str	r3, [r7, #20]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	613b      	str	r3, [r7, #16]
  }
 800d996:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800d998:	68f8      	ldr	r0, [r7, #12]
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	fb02 f103 	mul.w	r1, r2, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	f000 fc51 	bl	800e24c <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>
    }
 800d9aa:	bf00      	nop
 800d9ac:	3718      	adds	r7, #24
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	08022a8c 	.word	0x08022a8c
 800d9b8:	08026694 	.word	0x08026694
 800d9bc:	08022ca8 	.word	0x08022ca8

0800d9c0 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>:
  EIGEN_DEVICE_FUNC const XprTypeNestedCleaned& nestedExpression() const { return m_xpr; }
 800d9c0:	b480      	push	{r7}
 800d9c2:	b083      	sub	sp, #12
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	370c      	adds	r7, #12
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d4:	4770      	bx	lr

0800d9d6 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>:
    explicit Matrix(const T& x)
 800d9d6:	b580      	push	{r7, lr}
 800d9d8:	b082      	sub	sp, #8
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
 800d9de:	6039      	str	r1, [r7, #0]
    {
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7f7 fb9a 	bl	800511c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800d9e8:	f7f7 fba8 	bl	800513c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6839      	ldr	r1, [r7, #0]
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f000 fc38 	bl	800e266 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>
    }
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>:
  static inline void run(const MatrixType& matrix, ResultType& result)
 800da00:	b580      	push	{r7, lr}
 800da02:	ed2d 8b02 	vpush	{d8}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800da0e:	f107 030c 	add.w	r3, r7, #12
 800da12:	6879      	ldr	r1, [r7, #4]
 800da14:	4618      	mov	r0, r3
 800da16:	f7fc ff50 	bl	800a8ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    result.coeffRef(0,0) = Scalar(1) / matrixEval.coeff(0,0);
 800da1a:	f107 030c 	add.w	r3, r7, #12
 800da1e:	2200      	movs	r2, #0
 800da20:	2100      	movs	r1, #0
 800da22:	4618      	mov	r0, r3
 800da24:	f000 fc2c 	bl	800e280 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>
 800da28:	4603      	mov	r3, r0
 800da2a:	ed93 8a00 	vldr	s16, [r3]
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	2200      	movs	r2, #0
 800da32:	2100      	movs	r1, #0
 800da34:	4618      	mov	r0, r3
 800da36:	f7f9 f968 	bl	8006d0a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800da3a:	4603      	mov	r3, r0
 800da3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da40:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800da44:	edc3 7a00 	vstr	s15, [r3]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800da48:	f107 030c 	add.w	r3, r7, #12
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7fb fe1b 	bl	8009688 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  }
 800da52:	bf00      	nop
 800da54:	3710      	adds	r7, #16
 800da56:	46bd      	mov	sp, r7
 800da58:	ecbd 8b02 	vpop	{d8}
 800da5c:	bd80      	pop	{r7, pc}

0800da5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800da5e:	b580      	push	{r7, lr}
 800da60:	b082      	sub	sp, #8
 800da62:	af00      	add	r7, sp, #0
 800da64:	6078      	str	r0, [r7, #4]
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f7f8 fbe9 	bl	800623e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800da6c:	4603      	mov	r3, r0
 800da6e:	4618      	mov	r0, r3
 800da70:	f7f8 fc23 	bl	80062ba <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800da74:	4603      	mov	r3, r0
 800da76:	4618      	mov	r0, r3
 800da78:	3708      	adds	r7, #8
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 800da7e:	b590      	push	{r4, r7, lr}
 800da80:	b083      	sub	sp, #12
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f7ff ffe9 	bl	800da5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800da8c:	4604      	mov	r4, r0
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 f807 	bl	800daa2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800da94:	4603      	mov	r3, r0
 800da96:	fb04 f303 	mul.w	r3, r4, r3
 800da9a:	4618      	mov	r0, r3
 800da9c:	370c      	adds	r7, #12
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd90      	pop	{r4, r7, pc}

0800daa2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b082      	sub	sp, #8
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7f8 fbc7 	bl	800623e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800dab0:	4603      	mov	r3, r0
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7f8 fc0c 	bl	80062d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800dab8:	4603      	mov	r3, r0
 800daba:	4618      	mov	r0, r3
 800dabc:	3708      	adds	r7, #8
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800dac2:	b5b0      	push	{r4, r5, r7, lr}
 800dac4:	b084      	sub	sp, #16
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	60f8      	str	r0, [r7, #12]
 800daca:	60b9      	str	r1, [r7, #8]
 800dacc:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800dace:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7f9 fcd9 	bl	800748a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800dad8:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800dada:	68b8      	ldr	r0, [r7, #8]
 800dadc:	f000 fa35 	bl	800df4a <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800dae0:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	fb02 f303 	mul.w	r3, r2, r3
 800dae8:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800daea:	18e9      	adds	r1, r5, r3
 800daec:	2301      	movs	r3, #1
 800daee:	2201      	movs	r2, #1
 800daf0:	4620      	mov	r0, r4
 800daf2:	f000 fbe9 	bl	800e2c8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	68ba      	ldr	r2, [r7, #8]
 800dafa:	609a      	str	r2, [r3, #8]
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	330c      	adds	r3, #12
 800db00:	6879      	ldr	r1, [r7, #4]
 800db02:	4618      	mov	r0, r3
 800db04:	f000 fa02 	bl	800df0c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	3310      	adds	r3, #16
 800db0c:	2100      	movs	r1, #0
 800db0e:	4618      	mov	r0, r3
 800db10:	f000 fa70 	bl	800dff4 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f000 fc15 	bl	800e344 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>
    }
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	4618      	mov	r0, r3
 800db1e:	3710      	adds	r7, #16
 800db20:	46bd      	mov	sp, r7
 800db22:	bdb0      	pop	{r4, r5, r7, pc}

0800db24 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800db24:	b5b0      	push	{r4, r5, r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800db30:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	4618      	mov	r0, r3
 800db36:	f7fd fd27 	bl	800b588 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800db3a:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800db3c:	68b8      	ldr	r0, [r7, #8]
 800db3e:	f000 fc11 	bl	800e364 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 800db42:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	fb02 f303 	mul.w	r3, r2, r3
 800db4a:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800db4c:	18e9      	adds	r1, r5, r3
 800db4e:	2301      	movs	r3, #1
 800db50:	2201      	movs	r2, #1
 800db52:	4620      	mov	r0, r4
 800db54:	f000 fc1e 	bl	800e394 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	68ba      	ldr	r2, [r7, #8]
 800db5c:	609a      	str	r2, [r3, #8]
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	330c      	adds	r3, #12
 800db62:	6879      	ldr	r1, [r7, #4]
 800db64:	4618      	mov	r0, r3
 800db66:	f000 fa45 	bl	800dff4 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	330d      	adds	r3, #13
 800db6e:	6879      	ldr	r1, [r7, #4]
 800db70:	4618      	mov	r0, r3
 800db72:	f000 fa3f 	bl	800dff4 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800db76:	68f8      	ldr	r0, [r7, #12]
 800db78:	f000 fc4a 	bl	800e410 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>
    }
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	4618      	mov	r0, r3
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bdb0      	pop	{r4, r5, r7, pc}

0800db86 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800db86:	b580      	push	{r7, lr}
 800db88:	b082      	sub	sp, #8
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
 800db8e:	6039      	str	r1, [r7, #0]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6839      	ldr	r1, [r7, #0]
 800db94:	4618      	mov	r0, r3
 800db96:	f000 fc4b 	bl	800e430 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	4618      	mov	r0, r3
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800dbae:	2200      	movs	r2, #0
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 fc4e 	bl	800e454 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800dbb8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dbbc:	eeb0 0a67 	vmov.f32	s0, s15
 800dbc0:	3708      	adds	r7, #8
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b086      	sub	sp, #24
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	60f8      	str	r0, [r7, #12]
 800dbce:	60b9      	str	r1, [r7, #8]
 800dbd0:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	68b9      	ldr	r1, [r7, #8]
 800dbda:	6978      	ldr	r0, [r7, #20]
 800dbdc:	f000 fc4d 	bl	800e47a <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800dbe0:	bf00      	nop
 800dbe2:	3718      	adds	r7, #24
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	370c      	adds	r7, #12
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	3304      	adds	r3, #4
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	370c      	adds	r7, #12
 800dc10:	46bd      	mov	sp, r7
 800dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc16:	4770      	bx	lr

0800dc18 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with subtraction
  *
  */
template<typename DstScalar,typename SrcScalar> struct sub_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(sub_assign_op)
 800dc18:	b480      	push	{r7}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	4618      	mov	r0, r3
 800dc24:	370c      	adds	r7, #12
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr

0800dc2e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b086      	sub	sp, #24
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	60f8      	str	r0, [r7, #12]
 800dc36:	60b9      	str	r1, [r7, #8]
 800dc38:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	68b9      	ldr	r1, [r7, #8]
 800dc42:	6978      	ldr	r0, [r7, #20]
 800dc44:	f000 fc44 	bl	800e4d0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800dc48:	bf00      	nop
 800dc4a:	3718      	adds	r7, #24
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	607a      	str	r2, [r7, #4]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	68b9      	ldr	r1, [r7, #8]
 800dc62:	4618      	mov	r0, r3
 800dc64:	f000 fc6e 	bl	800e544 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3710      	adds	r7, #16
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}

0800dc72 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800dc72:	b480      	push	{r7}
 800dc74:	b083      	sub	sp, #12
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
    }
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	370c      	adds	r7, #12
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr

0800dc88 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7fd ffc5 	bl	800bc22 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800dc98:	4603      	mov	r3, r0
    }
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3708      	adds	r7, #8
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}

0800dca2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800dca2:	b580      	push	{r7, lr}
 800dca4:	b082      	sub	sp, #8
 800dca6:	af00      	add	r7, sp, #0
 800dca8:	6078      	str	r0, [r7, #4]
 800dcaa:	6039      	str	r1, [r7, #0]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6839      	ldr	r1, [r7, #0]
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f000 fc7d 	bl	800e5b0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3708      	adds	r7, #8
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800dcc0:	b480      	push	{r7}
 800dcc2:	b083      	sub	sp, #12
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	4618      	mov	r0, r3
 800dccc:	370c      	adds	r7, #12
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr

0800dcd6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
 800dcd6:	b480      	push	{r7}
 800dcd8:	b083      	sub	sp, #12
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4618      	mov	r0, r3
 800dce2:	370c      	adds	r7, #12
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr

0800dcec <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800dcf8:	68b9      	ldr	r1, [r7, #8]
 800dcfa:	68f8      	ldr	r0, [r7, #12]
 800dcfc:	f000 fc67 	bl	800e5ce <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>
 800dd00:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dd04:	eeb0 0a67 	vmov.f32	s0, s15
 800dd08:	3710      	adds	r7, #16
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b082      	sub	sp, #8
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800dd16:	2200      	movs	r2, #0
 800dd18:	2102      	movs	r1, #2
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f7fc fed0 	bl	800aac0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f000 fc78 	bl	800e616 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 800dd26:	bf00      	nop
 800dd28:	3708      	adds	r7, #8
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	b082      	sub	sp, #8
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f000 fc7d 	bl	800e636 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3708      	adds	r7, #8
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}

0800dd46 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>:
    inline BlockImpl_dense(XprType& xpr, Index i)
 800dd46:	b580      	push	{r7, lr}
 800dd48:	b084      	sub	sp, #16
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	60f8      	str	r0, [r7, #12]
 800dd4e:	60b9      	str	r1, [r7, #8]
 800dd50:	607a      	str	r2, [r7, #4]
        m_blockCols(BlockCols==1 ? 1 : xpr.cols())
 800dd52:	68f8      	ldr	r0, [r7, #12]
 800dd54:	f7ff ffeb 	bl	800dd2e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	68b9      	ldr	r1, [r7, #8]
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7f6 fe79 	bl	8004a54 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	3310      	adds	r3, #16
 800dd66:	6879      	ldr	r1, [r7, #4]
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f000 f8cf 	bl	800df0c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	3314      	adds	r3, #20
 800dd72:	2100      	movs	r1, #0
 800dd74:	4618      	mov	r0, r3
 800dd76:	f000 f93d 	bl	800dff4 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	3315      	adds	r3, #21
 800dd7e:	2101      	movs	r1, #1
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7f9 f84f 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	3316      	adds	r3, #22
 800dd8a:	2101      	movs	r1, #1
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7f9 f849 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
    {}
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	4618      	mov	r0, r3
 800dd96:	3710      	adds	r7, #16
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800dd9c:	b5b0      	push	{r4, r5, r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800dda8:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800ddaa:	68b8      	ldr	r0, [r7, #8]
 800ddac:	f000 fc4e 	bl	800e64c <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>
 800ddb0:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800ddb2:	68b8      	ldr	r0, [r7, #8]
 800ddb4:	f000 fc5e 	bl	800e674 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 800ddb8:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	fb02 f303 	mul.w	r3, r2, r3
 800ddc0:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800ddc2:	18e9      	adds	r1, r5, r3
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	4620      	mov	r0, r4
 800ddca:	f000 fc87 	bl	800e6dc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	3308      	adds	r3, #8
 800ddd2:	68ba      	ldr	r2, [r7, #8]
 800ddd4:	6812      	ldr	r2, [r2, #0]
 800ddd6:	601a      	str	r2, [r3, #0]
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	330c      	adds	r3, #12
 800dddc:	2100      	movs	r1, #0
 800ddde:	4618      	mov	r0, r3
 800dde0:	f000 f908 	bl	800dff4 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	3310      	adds	r3, #16
 800dde8:	6879      	ldr	r1, [r7, #4]
 800ddea:	4618      	mov	r0, r3
 800ddec:	f000 f88e 	bl	800df0c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	f000 fcb1 	bl	800e758 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>
    }
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3710      	adds	r7, #16
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bdb0      	pop	{r4, r5, r7, pc}

0800de00 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	6039      	str	r1, [r7, #0]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6839      	ldr	r1, [r7, #0]
 800de0e:	4618      	mov	r0, r3
 800de10:	f000 fcb2 	bl	800e778 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	4618      	mov	r0, r3
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800de1e:	b580      	push	{r7, lr}
 800de20:	b082      	sub	sp, #8
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
 800de26:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800de28:	2200      	movs	r2, #0
 800de2a:	2100      	movs	r1, #0
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f000 fcb5 	bl	800e79c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 800de32:	eef0 7a40 	vmov.f32	s15, s0
  }
 800de36:	eeb0 0a67 	vmov.f32	s0, s15
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800de48:	2201      	movs	r2, #1
 800de4a:	2102      	movs	r1, #2
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f7fc fb70 	bl	800a532 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f000 fcb5 	bl	800e7c2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>
  }
 800de58:	bf00      	nop
 800de5a:	3708      	adds	r7, #8
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 800de60:	b480      	push	{r7}
 800de62:	b083      	sub	sp, #12
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	2301      	movs	r3, #1
 800de6a:	4618      	mov	r0, r3
 800de6c:	370c      	adds	r7, #12
 800de6e:	46bd      	mov	sp, r7
 800de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de74:	4770      	bx	lr

0800de76 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
 800de76:	b580      	push	{r7, lr}
 800de78:	b082      	sub	sp, #8
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f000 fcaf 	bl	800e7e2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	4618      	mov	r0, r3
 800de88:	3708      	adds	r7, #8
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
	...

0800de90 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>:
      checkSanity<Derived>();
    }

    /** \internal Constructor for dynamically sized matrices */
    EIGEN_DEVICE_FUNC
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	607a      	str	r2, [r7, #4]
 800de9c:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	f7ff ffe9 	bl	800de76 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	68ba      	ldr	r2, [r7, #8]
 800dea8:	601a      	str	r2, [r3, #0]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	3304      	adds	r3, #4
 800deae:	6879      	ldr	r1, [r7, #4]
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7f8 ffb7 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	3305      	adds	r3, #5
 800deba:	6839      	ldr	r1, [r7, #0]
 800debc:	4618      	mov	r0, r3
 800debe:	f7f8 ff97 	bl	8006df0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
    {
      eigen_assert( (dataPtr == 0)
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d011      	beq.n	800deec <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2b00      	cmp	r3, #0
 800decc:	db08      	blt.n	800dee0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d105      	bne.n	800dee0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	db02      	blt.n	800dee0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	2b03      	cmp	r3, #3
 800dede:	d005      	beq.n	800deec <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800dee0:	4b07      	ldr	r3, [pc, #28]	; (800df00 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x70>)
 800dee2:	4a08      	ldr	r2, [pc, #32]	; (800df04 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x74>)
 800dee4:	21b0      	movs	r1, #176	; 0xb0
 800dee6:	4808      	ldr	r0, [pc, #32]	; (800df08 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x78>)
 800dee8:	f010 f954 	bl	801e194 <__assert_func>
              || (   rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
                  && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols)));
      checkSanity<Derived>();
 800deec:	2100      	movs	r1, #0
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	f000 fc82 	bl	800e7f8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	4618      	mov	r0, r3
 800def8:	3710      	adds	r7, #16
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	08026720 	.word	0x08026720
 800df04:	080267cc 	.word	0x080267cc
 800df08:	080268d0 	.word	0x080268d0

0800df0c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>:

template<typename T> class variable_if_dynamic<T, Dynamic>
{
    T m_value;
  public:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T value = 0) EIGEN_NO_THROW : m_value(value) {}
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	6039      	str	r1, [r7, #0]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	683a      	ldr	r2, [r7, #0]
 800df1a:	601a      	str	r2, [r3, #0]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	4618      	mov	r0, r3
 800df20:	370c      	adds	r7, #12
 800df22:	46bd      	mov	sp, r7
 800df24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df28:	4770      	bx	lr

0800df2a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>:
    }
    #endif

  protected:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void init()
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b082      	sub	sp, #8
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
    {
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
                    ? m_xpr.outerStride()
                    : m_xpr.innerStride();
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 800df36:	4618      	mov	r0, r3
 800df38:	f7ff ff92 	bl	800de60 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800df3c:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	615a      	str	r2, [r3, #20]
    }
 800df42:	bf00      	nop
 800df44:	3708      	adds	r7, #8
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}

0800df4a <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>:
 800df4a:	b480      	push	{r7}
 800df4c:	b083      	sub	sp, #12
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
 800df52:	2301      	movs	r3, #1
 800df54:	4618      	mov	r0, r3
 800df56:	370c      	adds	r7, #12
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
 800df60:	b580      	push	{r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f000 fc50 	bl	800e80e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	4618      	mov	r0, r3
 800df72:	3708      	adds	r7, #8
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800df78:	b580      	push	{r7, lr}
 800df7a:	b084      	sub	sp, #16
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	607a      	str	r2, [r7, #4]
 800df84:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800df86:	68f8      	ldr	r0, [r7, #12]
 800df88:	f7ff ffea 	bl	800df60 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	68ba      	ldr	r2, [r7, #8]
 800df90:	601a      	str	r2, [r3, #0]
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	3304      	adds	r3, #4
 800df96:	6879      	ldr	r1, [r7, #4]
 800df98:	4618      	mov	r0, r3
 800df9a:	f7f8 ff29 	bl	8006df0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	3305      	adds	r3, #5
 800dfa2:	6839      	ldr	r1, [r7, #0]
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7f8 ff3d 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d011      	beq.n	800dfd4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	db08      	blt.n	800dfc8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2b03      	cmp	r3, #3
 800dfba:	d105      	bne.n	800dfc8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	db02      	blt.n	800dfc8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d005      	beq.n	800dfd4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800dfc8:	4b07      	ldr	r3, [pc, #28]	; (800dfe8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800dfca:	4a08      	ldr	r2, [pc, #32]	; (800dfec <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800dfcc:	21b0      	movs	r1, #176	; 0xb0
 800dfce:	4808      	ldr	r0, [pc, #32]	; (800dff0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800dfd0:	f010 f8e0 	bl	801e194 <__assert_func>
      checkSanity<Derived>();
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	68f8      	ldr	r0, [r7, #12]
 800dfd8:	f000 fc24 	bl	800e824 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3710      	adds	r7, #16
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	08026720 	.word	0x08026720
 800dfec:	08026924 	.word	0x08026924
 800dff0:	080268d0 	.word	0x080268d0

0800dff4 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d005      	beq.n	800e010 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x1c>
 800e004:	4b05      	ldr	r3, [pc, #20]	; (800e01c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x28>)
 800e006:	4a06      	ldr	r2, [pc, #24]	; (800e020 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x2c>)
 800e008:	2185      	movs	r1, #133	; 0x85
 800e00a:	4806      	ldr	r0, [pc, #24]	; (800e024 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x30>)
 800e00c:	f010 f8c2 	bl	801e194 <__assert_func>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	4618      	mov	r0, r3
 800e014:	3708      	adds	r7, #8
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}
 800e01a:	bf00      	nop
 800e01c:	08022538 	.word	0x08022538
 800e020:	08026a28 	.word	0x08026a28
 800e024:	080225b0 	.word	0x080225b0

0800e028 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	4618      	mov	r0, r3
 800e036:	f7f9 faf9 	bl	800762c <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800e03a:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	615a      	str	r2, [r3, #20]
    }
 800e040:	bf00      	nop
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}

0800e048 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	6039      	str	r1, [r7, #0]
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 fbf1 	bl	800e83a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6839      	ldr	r1, [r7, #0]
 800e05c:	4618      	mov	r0, r3
 800e05e:	f000 fbf7 	bl	800e850 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	4618      	mov	r0, r3
 800e066:	3708      	adds	r7, #8
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e076:	2200      	movs	r2, #0
 800e078:	2100      	movs	r1, #0
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 fc10 	bl	800e8a0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e080:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e084:	eeb0 0a67 	vmov.f32	s0, s15
 800e088:	3708      	adds	r7, #8
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800e08e:	b580      	push	{r7, lr}
 800e090:	b084      	sub	sp, #16
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
 800e096:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e098:	6839      	ldr	r1, [r7, #0]
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 fc13 	bl	800e8c6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 800e0a0:	eef0 7a40 	vmov.f32	s15, s0
 800e0a4:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800e0a8:	6839      	ldr	r1, [r7, #0]
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 fc1c 	bl	800e8e8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 800e0b0:	eef0 7a40 	vmov.f32	s15, s0
 800e0b4:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e0b8:	f107 020c 	add.w	r2, r7, #12
 800e0bc:	f107 0308 	add.w	r3, r7, #8
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	6838      	ldr	r0, [r7, #0]
 800e0c4:	f7fb fa99 	bl	80095fa <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800e0c8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e0cc:	eeb0 0a67 	vmov.f32	s0, s15
 800e0d0:	3710      	adds	r7, #16
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800e0d6:	b5b0      	push	{r4, r5, r7, lr}
 800e0d8:	b084      	sub	sp, #16
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
 800e0de:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f7f7 fdcd 	bl	8005c80 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800e0e6:	4604      	mov	r4, r0
 800e0e8:	6838      	ldr	r0, [r7, #0]
 800e0ea:	f7f7 fdfc 	bl	8005ce6 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 800e0ee:	4605      	mov	r5, r0
 800e0f0:	f107 030c 	add.w	r3, r7, #12
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7f9 f920 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800e0fa:	f107 030c 	add.w	r3, r7, #12
 800e0fe:	461a      	mov	r2, r3
 800e100:	4629      	mov	r1, r5
 800e102:	4620      	mov	r0, r4
 800e104:	f000 fc01 	bl	800e90a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7f7 fdb9 	bl	8005c80 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800e10e:	4603      	mov	r3, r0
    }
 800e110:	4618      	mov	r0, r3
 800e112:	3710      	adds	r7, #16
 800e114:	46bd      	mov	sp, r7
 800e116:	bdb0      	pop	{r4, r5, r7, pc}

0800e118 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800e118:	b480      	push	{r7}
 800e11a:	b083      	sub	sp, #12
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4618      	mov	r0, r3
 800e126:	370c      	adds	r7, #12
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr

0800e130 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e130:	b480      	push	{r7}
 800e132:	b083      	sub	sp, #12
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	4618      	mov	r0, r3
 800e13c:	370c      	adds	r7, #12
 800e13e:	46bd      	mov	sp, r7
 800e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e144:	4770      	bx	lr

0800e146 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 800e146:	b590      	push	{r4, r7, lr}
 800e148:	b085      	sub	sp, #20
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	60f8      	str	r0, [r7, #12]
 800e14e:	60b9      	str	r1, [r7, #8]
 800e150:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row * m_d.outerStride() + col];
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681c      	ldr	r4, [r3, #0]
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	4618      	mov	r0, r3
 800e15a:	f7fb fa08 	bl	800956e <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800e15e:	4602      	mov	r2, r0
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	fb03 f202 	mul.w	r2, r3, r2
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4413      	add	r3, r2
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	4423      	add	r3, r4
  }
 800e16e:	4618      	mov	r0, r3
 800e170:	3714      	adds	r7, #20
 800e172:	46bd      	mov	sp, r7
 800e174:	bd90      	pop	{r4, r7, pc}

0800e176 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800e176:	b580      	push	{r7, lr}
 800e178:	b0a4      	sub	sp, #144	; 0x90
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	60f8      	str	r0, [r7, #12]
 800e17e:	60b9      	str	r1, [r7, #8]
 800e180:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800e182:	68f9      	ldr	r1, [r7, #12]
 800e184:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e188:	68ba      	ldr	r2, [r7, #8]
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fd f844 	bl	800b218 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800e190:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e194:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e198:	4611      	mov	r1, r2
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fd f84f 	bl	800b23e <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e1a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800e1aa:	687a      	ldr	r2, [r7, #4]
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f000 fbbd 	bl	800e92c <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>
 800e1b2:	f107 0314 	add.w	r3, r7, #20
 800e1b6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800e1ba:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f000 fbc7 	bl	800e952 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800e1c4:	f107 0314 	add.w	r3, r7, #20
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f000 fbf0 	bl	800e9ae <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>
 800e1ce:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e1d2:	eeb0 0a67 	vmov.f32	s0, s15
 800e1d6:	3790      	adds	r7, #144	; 0x90
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	2101      	movs	r1, #1
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f7fe fe58 	bl	800ce9e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 fbf8 	bl	800e9e4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>
  }
 800e1f4:	bf00      	nop
 800e1f6:	3708      	adds	r7, #8
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800e1fc:	b590      	push	{r4, r7, lr}
 800e1fe:	b085      	sub	sp, #20
 800e200:	af00      	add	r7, sp, #0
 800e202:	60f8      	str	r0, [r7, #12]
 800e204:	60b9      	str	r1, [r7, #8]
 800e206:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800e208:	68b8      	ldr	r0, [r7, #8]
 800e20a:	f7f7 fc70 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800e20e:	4604      	mov	r4, r0
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f7f7 fed1 	bl	8005fb8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800e216:	4603      	mov	r3, r0
 800e218:	461a      	mov	r2, r3
 800e21a:	4621      	mov	r1, r4
 800e21c:	68f8      	ldr	r0, [r7, #12]
 800e21e:	f000 fc15 	bl	800ea4c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>
}
 800e222:	68f8      	ldr	r0, [r7, #12]
 800e224:	3714      	adds	r7, #20
 800e226:	46bd      	mov	sp, r7
 800e228:	bd90      	pop	{r4, r7, pc}

0800e22a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b086      	sub	sp, #24
 800e22e:	af00      	add	r7, sp, #0
 800e230:	60f8      	str	r0, [r7, #12]
 800e232:	60b9      	str	r1, [r7, #8]
 800e234:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	68b9      	ldr	r1, [r7, #8]
 800e23e:	6978      	ldr	r0, [r7, #20]
 800e240:	f000 fc32 	bl	800eaa8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800e244:	bf00      	nop
 800e246:	3718      	adds	r7, #24
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800e24c:	b480      	push	{r7}
 800e24e:	b085      	sub	sp, #20
 800e250:	af00      	add	r7, sp, #0
 800e252:	60f8      	str	r0, [r7, #12]
 800e254:	60b9      	str	r1, [r7, #8]
 800e256:	607a      	str	r2, [r7, #4]
 800e258:	603b      	str	r3, [r7, #0]
 800e25a:	bf00      	nop
 800e25c:	3714      	adds	r7, #20
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr

0800e266 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800e266:	b580      	push	{r7, lr}
 800e268:	b082      	sub	sp, #8
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
 800e26e:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800e270:	6839      	ldr	r1, [r7, #0]
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 fc2b 	bl	800eace <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800e278:	bf00      	nop
 800e27a:	3708      	adds	r7, #8
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e280:	b590      	push	{r4, r7, lr}
 800e282:	b085      	sub	sp, #20
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681c      	ldr	r4, [r3, #0]
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	4618      	mov	r0, r3
 800e294:	f7f9 f846 	bl	8007324 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 800e298:	4602      	mov	r2, r0
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	fb03 f202 	mul.w	r2, r3, r2
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	4413      	add	r3, r2
 800e2a4:	009b      	lsls	r3, r3, #2
 800e2a6:	4423      	add	r3, r4
  }
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3714      	adds	r7, #20
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd90      	pop	{r4, r7, pc}

0800e2b0 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 fc29 	bl	800eb10 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3708      	adds	r7, #8
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	60f8      	str	r0, [r7, #12]
 800e2d0:	60b9      	str	r1, [r7, #8]
 800e2d2:	607a      	str	r2, [r7, #4]
 800e2d4:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e2d6:	68f8      	ldr	r0, [r7, #12]
 800e2d8:	f7ff ffea 	bl	800e2b0 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	68ba      	ldr	r2, [r7, #8]
 800e2e0:	601a      	str	r2, [r3, #0]
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	3304      	adds	r3, #4
 800e2e6:	6879      	ldr	r1, [r7, #4]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7f8 fd9b 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	3305      	adds	r3, #5
 800e2f2:	6839      	ldr	r1, [r7, #0]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7f8 fd95 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d011      	beq.n	800e324 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	db08      	blt.n	800e318 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d105      	bne.n	800e318 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	db02      	blt.n	800e318 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	2b01      	cmp	r3, #1
 800e316:	d005      	beq.n	800e324 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e318:	4b07      	ldr	r3, [pc, #28]	; (800e338 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800e31a:	4a08      	ldr	r2, [pc, #32]	; (800e33c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800e31c:	21b0      	movs	r1, #176	; 0xb0
 800e31e:	4808      	ldr	r0, [pc, #32]	; (800e340 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800e320:	f00f ff38 	bl	801e194 <__assert_func>
      checkSanity<Derived>();
 800e324:	2100      	movs	r1, #0
 800e326:	68f8      	ldr	r0, [r7, #12]
 800e328:	f000 fbfd 	bl	800eb26 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	4618      	mov	r0, r3
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	08026720 	.word	0x08026720
 800e33c:	08026a90 	.word	0x08026a90
 800e340:	080268d0 	.word	0x080268d0

0800e344 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	689b      	ldr	r3, [r3, #8]
 800e350:	4618      	mov	r0, r3
 800e352:	f7f9 f96b 	bl	800762c <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800e356:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	615a      	str	r2, [r3, #20]
    }
 800e35c:	bf00      	nop
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>:
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	2301      	movs	r3, #1
 800e36e:	4618      	mov	r0, r3
 800e370:	370c      	adds	r7, #12
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr

0800e37a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b082      	sub	sp, #8
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 fbda 	bl	800eb3c <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	4618      	mov	r0, r3
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
	...

0800e394 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	60b9      	str	r1, [r7, #8]
 800e39e:	607a      	str	r2, [r7, #4]
 800e3a0:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	f7ff ffe9 	bl	800e37a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	68ba      	ldr	r2, [r7, #8]
 800e3ac:	601a      	str	r2, [r3, #0]
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	3304      	adds	r3, #4
 800e3b2:	6879      	ldr	r1, [r7, #4]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7f8 fd35 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	3305      	adds	r3, #5
 800e3be:	6839      	ldr	r1, [r7, #0]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7f8 fd2f 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d011      	beq.n	800e3f0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	db08      	blt.n	800e3e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d105      	bne.n	800e3e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	db02      	blt.n	800e3e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	d005      	beq.n	800e3f0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e3e4:	4b07      	ldr	r3, [pc, #28]	; (800e404 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800e3e6:	4a08      	ldr	r2, [pc, #32]	; (800e408 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800e3e8:	21b0      	movs	r1, #176	; 0xb0
 800e3ea:	4808      	ldr	r0, [pc, #32]	; (800e40c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800e3ec:	f00f fed2 	bl	801e194 <__assert_func>
      checkSanity<Derived>();
 800e3f0:	2100      	movs	r1, #0
 800e3f2:	68f8      	ldr	r0, [r7, #12]
 800e3f4:	f000 fbad 	bl	800eb52 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3710      	adds	r7, #16
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	08026720 	.word	0x08026720
 800e408:	08026b94 	.word	0x08026b94
 800e40c:	080268d0 	.word	0x080268d0

0800e410 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>:
    void init()
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	689b      	ldr	r3, [r3, #8]
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7fd fe3d 	bl	800c09c <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 800e422:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	611a      	str	r2, [r3, #16]
    }
 800e428:	bf00      	nop
 800e42a:	3708      	adds	r7, #8
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 fb94 	bl	800eb68 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6839      	ldr	r1, [r7, #0]
 800e444:	4618      	mov	r0, r3
 800e446:	f000 fb9a 	bl	800eb7e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	4618      	mov	r0, r3
 800e44e:	3708      	adds	r7, #8
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e454:	b580      	push	{r7, lr}
 800e456:	b084      	sub	sp, #16
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	68b9      	ldr	r1, [r7, #8]
 800e466:	4618      	mov	r0, r3
 800e468:	f000 fbb1 	bl	800ebce <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800e46c:	eef0 7a40 	vmov.f32	s15, s0
 800e470:	eeb0 0a67 	vmov.f32	s0, s15
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}

0800e47a <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800e47a:	b590      	push	{r4, r7, lr}
 800e47c:	b087      	sub	sp, #28
 800e47e:	af00      	add	r7, sp, #0
 800e480:	60f8      	str	r0, [r7, #12]
 800e482:	60b9      	str	r1, [r7, #8]
 800e484:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800e486:	68b8      	ldr	r0, [r7, #8]
 800e488:	f000 fbd1 	bl	800ec2e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>
 800e48c:	4604      	mov	r4, r0
 800e48e:	f107 0310 	add.w	r3, r7, #16
 800e492:	4618      	mov	r0, r3
 800e494:	f7f8 ff51 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800e498:	f107 0310 	add.w	r3, r7, #16
 800e49c:	461a      	mov	r2, r3
 800e49e:	4621      	mov	r1, r4
 800e4a0:	68f8      	ldr	r0, [r7, #12]
 800e4a2:	f000 fbd0 	bl	800ec46 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800e4a6:	68b8      	ldr	r0, [r7, #8]
 800e4a8:	f000 fbde 	bl	800ec68 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	f107 0314 	add.w	r3, r7, #20
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7ff fbb0 	bl	800dc18 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800e4b8:	f107 0314 	add.w	r3, r7, #20
 800e4bc:	461a      	mov	r2, r3
 800e4be:	4621      	mov	r1, r4
 800e4c0:	68f8      	ldr	r0, [r7, #12]
 800e4c2:	f000 fbdd 	bl	800ec80 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e4c6:	bf00      	nop
 800e4c8:	371c      	adds	r7, #28
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd90      	pop	{r4, r7, pc}
	...

0800e4d0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800e4d0:	b590      	push	{r4, r7, lr}
 800e4d2:	b085      	sub	sp, #20
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7f6 fefb 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	68b8      	ldr	r0, [r7, #8]
 800e4e8:	f7f8 fa95 	bl	8006a16 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	429c      	cmp	r4, r3
 800e4f0:	d10a      	bne.n	800e508 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7f6 fee5 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	68b8      	ldr	r0, [r7, #8]
 800e4fe:	f7f8 fa98 	bl	8006a32 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 800e502:	4603      	mov	r3, r0
 800e504:	429c      	cmp	r4, r3
 800e506:	d005      	beq.n	800e514 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800e508:	4b0b      	ldr	r3, [pc, #44]	; (800e538 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800e50a:	4a0c      	ldr	r2, [pc, #48]	; (800e53c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800e50c:	21b0      	movs	r1, #176	; 0xb0
 800e50e:	480c      	ldr	r0, [pc, #48]	; (800e540 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800e510:	f00f fe40 	bl	801e194 <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800e514:	68b8      	ldr	r0, [r7, #8]
 800e516:	f000 fbc4 	bl	800eca2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>
 800e51a:	4604      	mov	r4, r0
 800e51c:	68b8      	ldr	r0, [r7, #8]
 800e51e:	f000 fbcc 	bl	800ecba <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>
 800e522:	4603      	mov	r3, r0
 800e524:	461a      	mov	r2, r3
 800e526:	4621      	mov	r1, r4
 800e528:	68f8      	ldr	r0, [r7, #12]
 800e52a:	f000 fbd2 	bl	800ecd2 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>
  }
 800e52e:	bf00      	nop
 800e530:	3714      	adds	r7, #20
 800e532:	46bd      	mov	sp, r7
 800e534:	bd90      	pop	{r4, r7, pc}
 800e536:	bf00      	nop
 800e538:	08022d90 	.word	0x08022d90
 800e53c:	08026c98 	.word	0x08026c98
 800e540:	08023288 	.word	0x08023288

0800e544 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800e544:	b5b0      	push	{r4, r5, r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60f8      	str	r0, [r7, #12]
 800e54c:	60b9      	str	r1, [r7, #8]
 800e54e:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800e550:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	4618      	mov	r0, r3
 800e556:	f7f9 fff9 	bl	800854c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800e55a:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800e55c:	68b8      	ldr	r0, [r7, #8]
 800e55e:	f7fa fa2f 	bl	80089c0 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800e562:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	fb02 f303 	mul.w	r3, r2, r3
 800e56a:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800e56c:	441d      	add	r5, r3
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	4618      	mov	r0, r3
 800e572:	f7f6 feb2 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800e576:	4602      	mov	r2, r0
 800e578:	2301      	movs	r3, #1
 800e57a:	4629      	mov	r1, r5
 800e57c:	4620      	mov	r0, r4
 800e57e:	f000 fbd3 	bl	800ed28 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	68ba      	ldr	r2, [r7, #8]
 800e586:	609a      	str	r2, [r3, #8]
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	330c      	adds	r3, #12
 800e58c:	2100      	movs	r1, #0
 800e58e:	4618      	mov	r0, r3
 800e590:	f7ff fcbc 	bl	800df0c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	3310      	adds	r3, #16
 800e598:	6879      	ldr	r1, [r7, #4]
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7ff fcb6 	bl	800df0c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800e5a0:	68f8      	ldr	r0, [r7, #12]
 800e5a2:	f000 fbff 	bl	800eda4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3710      	adds	r7, #16
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bdb0      	pop	{r4, r5, r7, pc}

0800e5b0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6839      	ldr	r1, [r7, #0]
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f000 fc00 	bl	800edc4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3708      	adds	r7, #8
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}

0800e5ce <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800e5ce:	b580      	push	{r7, lr}
 800e5d0:	b084      	sub	sp, #16
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	6078      	str	r0, [r7, #4]
 800e5d6:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e5d8:	6839      	ldr	r1, [r7, #0]
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 fc04 	bl	800ede8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>
 800e5e0:	eef0 7a40 	vmov.f32	s15, s0
 800e5e4:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800e5e8:	6839      	ldr	r1, [r7, #0]
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f000 fc0d 	bl	800ee0a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>
 800e5f0:	eef0 7a40 	vmov.f32	s15, s0
 800e5f4:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e5f8:	f107 020c 	add.w	r2, r7, #12
 800e5fc:	f107 0308 	add.w	r3, r7, #8
 800e600:	4619      	mov	r1, r3
 800e602:	6838      	ldr	r0, [r7, #0]
 800e604:	f7fa fff9 	bl	80095fa <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800e608:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e60c:	eeb0 0a67 	vmov.f32	s0, s15
 800e610:	3710      	adds	r7, #16
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}

0800e616 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e616:	b580      	push	{r7, lr}
 800e618:	b082      	sub	sp, #8
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e61e:	2201      	movs	r2, #1
 800e620:	2102      	movs	r1, #2
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f7fc fa4c 	bl	800aac0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f000 fc12 	bl	800ee52 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800e62e:	bf00      	nop
 800e630:	3708      	adds	r7, #8
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e636:	b480      	push	{r7}
 800e638:	b083      	sub	sp, #12
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
    }
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	4618      	mov	r0, r3
 800e642:	370c      	adds	r7, #12
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr

0800e64c <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f7f7 f9b5 	bl	80059c4 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e65a:	4603      	mov	r3, r0
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7fc fd77 	bl	800b150 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e662:	4603      	mov	r3, r0
 800e664:	4618      	mov	r0, r3
 800e666:	f7f8 ff10 	bl	800748a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800e66a:	4603      	mov	r3, r0
 800e66c:	4618      	mov	r0, r3
 800e66e:	3708      	adds	r7, #8
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 800e674:	b580      	push	{r7, lr}
 800e676:	b082      	sub	sp, #8
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f7f7 f9a1 	bl	80059c4 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e682:	4603      	mov	r3, r0
 800e684:	4618      	mov	r0, r3
 800e686:	f7fc fd63 	bl	800b150 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e68a:	4603      	mov	r3, r0
 800e68c:	4618      	mov	r0, r3
 800e68e:	f7ff fc5c 	bl	800df4a <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800e692:	4603      	mov	r3, r0
 800e694:	4618      	mov	r0, r3
 800e696:	3708      	adds	r7, #8
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7f7 f98d 	bl	80059c4 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7fc fd4f 	bl	800b150 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7f8 ffb9 	bl	800762c <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3708      	adds	r7, #8
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 fbd0 	bl	800ee72 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3708      	adds	r7, #8
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	60b9      	str	r1, [r7, #8]
 800e6e6:	607a      	str	r2, [r7, #4]
 800e6e8:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f7ff ffea 	bl	800e6c4 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	68ba      	ldr	r2, [r7, #8]
 800e6f4:	601a      	str	r2, [r3, #0]
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	3304      	adds	r3, #4
 800e6fa:	6879      	ldr	r1, [r7, #4]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7f8 fb91 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	3305      	adds	r3, #5
 800e706:	6839      	ldr	r1, [r7, #0]
 800e708:	4618      	mov	r0, r3
 800e70a:	f7f8 fb8b 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d011      	beq.n	800e738 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	db08      	blt.n	800e72c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d105      	bne.n	800e72c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	2b00      	cmp	r3, #0
 800e724:	db02      	blt.n	800e72c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	2b01      	cmp	r3, #1
 800e72a:	d005      	beq.n	800e738 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e72c:	4b07      	ldr	r3, [pc, #28]	; (800e74c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800e72e:	4a08      	ldr	r2, [pc, #32]	; (800e750 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800e730:	21b0      	movs	r1, #176	; 0xb0
 800e732:	4808      	ldr	r0, [pc, #32]	; (800e754 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800e734:	f00f fd2e 	bl	801e194 <__assert_func>
      checkSanity<Derived>();
 800e738:	2100      	movs	r1, #0
 800e73a:	68f8      	ldr	r0, [r7, #12]
 800e73c:	f000 fba4 	bl	800ee88 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	4618      	mov	r0, r3
 800e744:	3710      	adds	r7, #16
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	08026720 	.word	0x08026720
 800e750:	08027014 	.word	0x08027014
 800e754:	080268d0 	.word	0x080268d0

0800e758 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800e758:	b580      	push	{r7, lr}
 800e75a:	b082      	sub	sp, #8
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	3308      	adds	r3, #8
 800e764:	4618      	mov	r0, r3
 800e766:	f7ff ff99 	bl	800e69c <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 800e76a:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	615a      	str	r2, [r3, #20]
    }
 800e770:	bf00      	nop
 800e772:	3708      	adds	r7, #8
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e778:	b580      	push	{r7, lr}
 800e77a:	b082      	sub	sp, #8
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f000 fb8b 	bl	800ee9e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6839      	ldr	r1, [r7, #0]
 800e78c:	4618      	mov	r0, r3
 800e78e:	f000 fb91 	bl	800eeb4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>
  }
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	4618      	mov	r0, r3
 800e796:	3708      	adds	r7, #8
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b084      	sub	sp, #16
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	60f8      	str	r0, [r7, #12]
 800e7a4:	60b9      	str	r1, [r7, #8]
 800e7a6:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	687a      	ldr	r2, [r7, #4]
 800e7ac:	68b9      	ldr	r1, [r7, #8]
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f000 fba8 	bl	800ef04 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>
 800e7b4:	eef0 7a40 	vmov.f32	s15, s0
 800e7b8:	eeb0 0a67 	vmov.f32	s0, s15
 800e7bc:	3710      	adds	r7, #16
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b082      	sub	sp, #8
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e7ca:	2202      	movs	r2, #2
 800e7cc:	2102      	movs	r1, #2
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f7fb feaf 	bl	800a532 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f000 fbc5 	bl	800ef64 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>
  }
 800e7da:	bf00      	nop
 800e7dc:	3708      	adds	r7, #8
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e7e2:	b480      	push	{r7}
 800e7e4:	b083      	sub	sp, #12
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
    }
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	370c      	adds	r7, #12
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr

0800e7f8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
#endif
    }

    template<typename T>
    EIGEN_DEVICE_FUNC
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e7f8:	b480      	push	{r7}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6039      	str	r1, [r7, #0]
    {}
 800e802:	bf00      	nop
 800e804:	370c      	adds	r7, #12
 800e806:	46bd      	mov	sp, r7
 800e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80c:	4770      	bx	lr

0800e80e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e80e:	b480      	push	{r7}
 800e810:	b083      	sub	sp, #12
 800e812:	af00      	add	r7, sp, #0
 800e814:	6078      	str	r0, [r7, #4]
    }
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	4618      	mov	r0, r3
 800e81a:	370c      	adds	r7, #12
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr

0800e824 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]
    {}
 800e82e:	bf00      	nop
 800e830:	370c      	adds	r7, #12
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr

0800e83a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e83a:	b480      	push	{r7}
 800e83c:	b083      	sub	sp, #12
 800e83e:	af00      	add	r7, sp, #0
 800e840:	6078      	str	r0, [r7, #4]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	4618      	mov	r0, r3
 800e846:	370c      	adds	r7, #12
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr

0800e850 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e850:	b590      	push	{r4, r7, lr}
 800e852:	b083      	sub	sp, #12
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	6039      	str	r1, [r7, #0]
 800e85a:	687c      	ldr	r4, [r7, #4]
 800e85c:	6838      	ldr	r0, [r7, #0]
 800e85e:	f000 fb8b 	bl	800ef78 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>
 800e862:	4603      	mov	r3, r0
 800e864:	4619      	mov	r1, r3
 800e866:	4620      	mov	r0, r4
 800e868:	f7f7 f862 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	1d1c      	adds	r4, r3, #4
 800e870:	6838      	ldr	r0, [r7, #0]
 800e872:	f000 fb8d 	bl	800ef90 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>
 800e876:	4603      	mov	r3, r0
 800e878:	4619      	mov	r1, r3
 800e87a:	4620      	mov	r0, r4
 800e87c:	f000 fb9f 	bl	800efbe <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f103 040c 	add.w	r4, r3, #12
 800e886:	6838      	ldr	r0, [r7, #0]
 800e888:	f000 fb8d 	bl	800efa6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>
 800e88c:	4603      	mov	r3, r0
 800e88e:	4619      	mov	r1, r3
 800e890:	4620      	mov	r0, r4
 800e892:	f000 fba3 	bl	800efdc <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	4618      	mov	r0, r3
 800e89a:	370c      	adds	r7, #12
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd90      	pop	{r4, r7, pc}

0800e8a0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	60f8      	str	r0, [r7, #12]
 800e8a8:	60b9      	str	r1, [r7, #8]
 800e8aa:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	68ba      	ldr	r2, [r7, #8]
 800e8b0:	6879      	ldr	r1, [r7, #4]
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f000 fba1 	bl	800effa <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800e8b8:	eef0 7a40 	vmov.f32	s15, s0
 800e8bc:	eeb0 0a67 	vmov.f32	s0, s15
 800e8c0:	3710      	adds	r7, #16
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}

0800e8c6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e8c6:	b580      	push	{r7, lr}
 800e8c8:	b082      	sub	sp, #8
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	6078      	str	r0, [r7, #4]
 800e8ce:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	2100      	movs	r1, #0
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f7ff ffe3 	bl	800e8a0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e8da:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e8de:	eeb0 0a67 	vmov.f32	s0, s15
 800e8e2:	3708      	adds	r7, #8
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e8f2:	2202      	movs	r2, #2
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f7ff ffd2 	bl	800e8a0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e8fc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e900:	eeb0 0a67 	vmov.f32	s0, s15
 800e904:	3708      	adds	r7, #8
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b086      	sub	sp, #24
 800e90e:	af00      	add	r7, sp, #0
 800e910:	60f8      	str	r0, [r7, #12]
 800e912:	60b9      	str	r1, [r7, #8]
 800e914:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e91a:	687a      	ldr	r2, [r7, #4]
 800e91c:	68b9      	ldr	r1, [r7, #8]
 800e91e:	6978      	ldr	r0, [r7, #20]
 800e920:	f000 fb9b 	bl	800f05a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800e924:	bf00      	nop
 800e926:	3718      	adds	r7, #24
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	60b9      	str	r1, [r7, #8]
 800e936:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800e938:	68b8      	ldr	r0, [r7, #8]
 800e93a:	f7f7 f9df 	bl	8005cfc <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800e93e:	4603      	mov	r3, r0
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	4619      	mov	r1, r3
 800e944:	68f8      	ldr	r0, [r7, #12]
 800e946:	f000 fbc3 	bl	800f0d0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>
}
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	3710      	adds	r7, #16
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}

0800e952 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800e952:	b5b0      	push	{r4, r5, r7, lr}
 800e954:	b086      	sub	sp, #24
 800e956:	af00      	add	r7, sp, #0
 800e958:	60f8      	str	r0, [r7, #12]
 800e95a:	60b9      	str	r1, [r7, #8]
 800e95c:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800e95e:	68b8      	ldr	r0, [r7, #8]
 800e960:	f7fd f924 	bl	800bbac <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800e964:	4604      	mov	r4, r0
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 fbda 	bl	800f120 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>
 800e96c:	4605      	mov	r5, r0
 800e96e:	f107 0314 	add.w	r3, r7, #20
 800e972:	4618      	mov	r0, r3
 800e974:	f7f6 ff52 	bl	800581c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800e978:	f107 0314 	add.w	r3, r7, #20
 800e97c:	462a      	mov	r2, r5
 800e97e:	4621      	mov	r1, r4
 800e980:	68f8      	ldr	r0, [r7, #12]
 800e982:	f000 fc07 	bl	800f194 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 800e986:	68f8      	ldr	r0, [r7, #12]
 800e988:	3718      	adds	r7, #24
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bdb0      	pop	{r4, r5, r7, pc}

0800e98e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800e98e:	b580      	push	{r7, lr}
 800e990:	b082      	sub	sp, #8
 800e992:	af00      	add	r7, sp, #0
 800e994:	6078      	str	r0, [r7, #4]
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f000 fc5a 	bl	800f250 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e99c:	4603      	mov	r3, r0
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f000 fc61 	bl	800f266 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3708      	adds	r7, #8
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}

0800e9ae <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800e9ae:	b590      	push	{r4, r7, lr}
 800e9b0:	b085      	sub	sp, #20
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f000 fc4a 	bl	800f250 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e9bc:	4604      	mov	r4, r0
 800e9be:	f107 030c 	add.w	r3, r7, #12
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7f7 fa21 	bl	8005e0a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800e9c8:	f107 030c 	add.w	r3, r7, #12
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	f000 fcc6 	bl	800f360 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800e9d4:	eef0 7a40 	vmov.f32	s15, s0
 800e9d8:	bf00      	nop
}
 800e9da:	eeb0 0a67 	vmov.f32	s0, s15
 800e9de:	3714      	adds	r7, #20
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd90      	pop	{r4, r7, pc}

0800e9e4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	2101      	movs	r1, #1
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f7fe fa54 	bl	800ce9e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 fcf8 	bl	800f3ec <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>
  }
 800e9fc:	bf00      	nop
 800e9fe:	3708      	adds	r7, #8
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f000 fcfd 	bl	800f40c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4618      	mov	r0, r3
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>:
class dense_product_base
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f7ff ffed 	bl	800ea04 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3708      	adds	r7, #8
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f7ff ffed 	bl	800ea1c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	4618      	mov	r0, r3
 800ea46:	3708      	adds	r7, #8
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800ea4c:	b590      	push	{r4, r7, lr}
 800ea4e:	b085      	sub	sp, #20
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	60f8      	str	r0, [r7, #12]
 800ea54:	60b9      	str	r1, [r7, #8]
 800ea56:	607a      	str	r2, [r7, #4]
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f7ff ffeb 	bl	800ea34 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	68ba      	ldr	r2, [r7, #8]
 800ea62:	601a      	str	r2, [r3, #0]
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	3304      	adds	r3, #4
 800ea68:	687a      	ldr	r2, [r7, #4]
 800ea6a:	6812      	ldr	r2, [r2, #0]
 800ea6c:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7f6 fc27 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800ea76:	4604      	mov	r4, r0
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f7f7 facc 	bl	8006016 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	429c      	cmp	r4, r3
 800ea82:	d005      	beq.n	800ea90 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x44>
 800ea84:	4b05      	ldr	r3, [pc, #20]	; (800ea9c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x50>)
 800ea86:	4a06      	ldr	r2, [pc, #24]	; (800eaa0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x54>)
 800ea88:	2160      	movs	r1, #96	; 0x60
 800ea8a:	4806      	ldr	r0, [pc, #24]	; (800eaa4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x58>)
 800ea8c:	f00f fb82 	bl	801e194 <__assert_func>
 800ea90:	bf00      	nop
    }
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	4618      	mov	r0, r3
 800ea96:	3714      	adds	r7, #20
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd90      	pop	{r4, r7, pc}
 800ea9c:	080202bc 	.word	0x080202bc
 800eaa0:	0802712c 	.word	0x0802712c
 800eaa4:	0802060c 	.word	0x0802060c

0800eaa8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800eab4:	68b9      	ldr	r1, [r7, #8]
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	f000 fcb3 	bl	800f422 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800eabc:	687a      	ldr	r2, [r7, #4]
 800eabe:	68b9      	ldr	r1, [r7, #8]
 800eac0:	68f8      	ldr	r0, [r7, #12]
 800eac2:	f000 fd12 	bl	800f4ea <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800eac6:	bf00      	nop
 800eac8:	3710      	adds	r7, #16
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800eace:	b5b0      	push	{r4, r5, r7, lr}
 800ead0:	b084      	sub	sp, #16
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
 800ead6:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f7fd fab8 	bl	800c04e <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800eade:	4604      	mov	r4, r0
 800eae0:	6838      	ldr	r0, [r7, #0]
 800eae2:	f7f7 fc41 	bl	8006368 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 800eae6:	4605      	mov	r5, r0
 800eae8:	f107 030c 	add.w	r3, r7, #12
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7f8 fc24 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800eaf2:	f107 030c 	add.w	r3, r7, #12
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	4629      	mov	r1, r5
 800eafa:	4620      	mov	r0, r4
 800eafc:	f000 fd2d 	bl	800f55a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f7fd faa4 	bl	800c04e <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800eb06:	4603      	mov	r3, r0
    }
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3710      	adds	r7, #16
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bdb0      	pop	{r4, r5, r7, pc}

0800eb10 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800eb10:	b480      	push	{r7}
 800eb12:	b083      	sub	sp, #12
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
    }
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	370c      	adds	r7, #12
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb24:	4770      	bx	lr

0800eb26 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800eb26:	b480      	push	{r7}
 800eb28:	b083      	sub	sp, #12
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	6078      	str	r0, [r7, #4]
 800eb2e:	6039      	str	r1, [r7, #0]
    {}
 800eb30:	bf00      	nop
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
    }
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	4618      	mov	r0, r3
 800eb48:	370c      	adds	r7, #12
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr

0800eb52 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800eb52:	b480      	push	{r7}
 800eb54:	b083      	sub	sp, #12
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	6078      	str	r0, [r7, #4]
 800eb5a:	6039      	str	r1, [r7, #0]
    {}
 800eb5c:	bf00      	nop
 800eb5e:	370c      	adds	r7, #12
 800eb60:	46bd      	mov	sp, r7
 800eb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb66:	4770      	bx	lr

0800eb68 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800eb68:	b480      	push	{r7}
 800eb6a:	b083      	sub	sp, #12
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	4618      	mov	r0, r3
 800eb74:	370c      	adds	r7, #12
 800eb76:	46bd      	mov	sp, r7
 800eb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7c:	4770      	bx	lr

0800eb7e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800eb7e:	b590      	push	{r4, r7, lr}
 800eb80:	b083      	sub	sp, #12
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	6078      	str	r0, [r7, #4]
 800eb86:	6039      	str	r1, [r7, #0]
 800eb88:	687c      	ldr	r4, [r7, #4]
 800eb8a:	6838      	ldr	r0, [r7, #0]
 800eb8c:	f000 fcf6 	bl	800f57c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>
 800eb90:	4603      	mov	r3, r0
 800eb92:	4619      	mov	r1, r3
 800eb94:	4620      	mov	r0, r4
 800eb96:	f7f6 fecb 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	1d1c      	adds	r4, r3, #4
 800eb9e:	6838      	ldr	r0, [r7, #0]
 800eba0:	f000 fcf8 	bl	800f594 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>
 800eba4:	4603      	mov	r3, r0
 800eba6:	4619      	mov	r1, r3
 800eba8:	4620      	mov	r0, r4
 800ebaa:	f000 fd0a 	bl	800f5c2 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f103 040c 	add.w	r4, r3, #12
 800ebb4:	6838      	ldr	r0, [r7, #0]
 800ebb6:	f000 fcf8 	bl	800f5aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	f000 fd0e 	bl	800f5e0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	370c      	adds	r7, #12
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd90      	pop	{r4, r7, pc}

0800ebce <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ebce:	b590      	push	{r4, r7, lr}
 800ebd0:	b087      	sub	sp, #28
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	60f8      	str	r0, [r7, #12]
 800ebd6:	60b9      	str	r1, [r7, #8]
 800ebd8:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f000 fd0e 	bl	800f5fe <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800ebe2:	4604      	mov	r4, r0
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	3304      	adds	r3, #4
 800ebe8:	687a      	ldr	r2, [r7, #4]
 800ebea:	68b9      	ldr	r1, [r7, #8]
 800ebec:	4618      	mov	r0, r3
 800ebee:	f000 fd11 	bl	800f614 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800ebf2:	eef0 7a40 	vmov.f32	s15, s0
 800ebf6:	edc7 7a04 	vstr	s15, [r7, #16]
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	330c      	adds	r3, #12
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	68b9      	ldr	r1, [r7, #8]
 800ec02:	4618      	mov	r0, r3
 800ec04:	f000 fd19 	bl	800f63a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>
 800ec08:	eef0 7a40 	vmov.f32	s15, s0
 800ec0c:	edc7 7a05 	vstr	s15, [r7, #20]
 800ec10:	f107 0214 	add.w	r2, r7, #20
 800ec14:	f107 0310 	add.w	r3, r7, #16
 800ec18:	4619      	mov	r1, r3
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	f000 fd2e 	bl	800f67c <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800ec20:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ec24:	eeb0 0a67 	vmov.f32	s0, s15
 800ec28:	371c      	adds	r7, #28
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd90      	pop	{r4, r7, pc}

0800ec2e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800ec2e:	b480      	push	{r7}
 800ec30:	b083      	sub	sp, #12
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	6078      	str	r0, [r7, #4]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	370c      	adds	r7, #12
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr

0800ec46 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b086      	sub	sp, #24
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	60f8      	str	r0, [r7, #12]
 800ec4e:	60b9      	str	r1, [r7, #8]
 800ec50:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	68b9      	ldr	r1, [r7, #8]
 800ec5a:	6978      	ldr	r0, [r7, #20]
 800ec5c:	f000 fd23 	bl	800f6a6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 800ec60:	bf00      	nop
 800ec62:	3718      	adds	r7, #24
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800ec68:	b480      	push	{r7}
 800ec6a:	b083      	sub	sp, #12
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	3304      	adds	r3, #4
 800ec74:	4618      	mov	r0, r3
 800ec76:	370c      	adds	r7, #12
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr

0800ec80 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b086      	sub	sp, #24
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	60f8      	str	r0, [r7, #12]
 800ec88:	60b9      	str	r1, [r7, #8]
 800ec8a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	68b9      	ldr	r1, [r7, #8]
 800ec94:	6978      	ldr	r0, [r7, #20]
 800ec96:	f000 fd19 	bl	800f6cc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800ec9a:	bf00      	nop
 800ec9c:	3718      	adds	r7, #24
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}

0800eca2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800eca2:	b480      	push	{r7}
 800eca4:	b083      	sub	sp, #12
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	4618      	mov	r0, r3
 800ecb0:	370c      	adds	r7, #12
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb8:	4770      	bx	lr

0800ecba <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800ecba:	b480      	push	{r7}
 800ecbc:	b083      	sub	sp, #12
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6078      	str	r0, [r7, #4]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	370c      	adds	r7, #12
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr

0800ecd2 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b088      	sub	sp, #32
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	60f8      	str	r0, [r7, #12]
 800ecda:	60b9      	str	r1, [r7, #8]
 800ecdc:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::sub_assign_op<typename Dst::Scalar,Scalar>());
 800ecde:	f107 0314 	add.w	r3, r7, #20
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	68b9      	ldr	r1, [r7, #8]
 800ece6:	4618      	mov	r0, r3
 800ece8:	f000 fd2a 	bl	800f740 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 800ecec:	f107 031c 	add.w	r3, r7, #28
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fe ff91 	bl	800dc18 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800ecf6:	f107 021c 	add.w	r2, r7, #28
 800ecfa:	f107 0314 	add.w	r3, r7, #20
 800ecfe:	4619      	mov	r1, r3
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f000 fd34 	bl	800f76e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800ed06:	bf00      	nop
 800ed08:	3720      	adds	r7, #32
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 800ed0e:	b580      	push	{r7, lr}
 800ed10:	b082      	sub	sp, #8
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	6078      	str	r0, [r7, #4]
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 fd3a 	bl	800f790 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3708      	adds	r7, #8
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
	...

0800ed28 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	60f8      	str	r0, [r7, #12]
 800ed30:	60b9      	str	r1, [r7, #8]
 800ed32:	607a      	str	r2, [r7, #4]
 800ed34:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800ed36:	68f8      	ldr	r0, [r7, #12]
 800ed38:	f7ff ffe9 	bl	800ed0e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	68ba      	ldr	r2, [r7, #8]
 800ed40:	601a      	str	r2, [r3, #0]
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	3304      	adds	r3, #4
 800ed46:	6879      	ldr	r1, [r7, #4]
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7f8 f851 	bl	8006df0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	3305      	adds	r3, #5
 800ed52:	6839      	ldr	r1, [r7, #0]
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7f8 f865 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d011      	beq.n	800ed84 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	db08      	blt.n	800ed78 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2b03      	cmp	r3, #3
 800ed6a:	d105      	bne.n	800ed78 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	db02      	blt.n	800ed78 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	d005      	beq.n	800ed84 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800ed78:	4b07      	ldr	r3, [pc, #28]	; (800ed98 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800ed7a:	4a08      	ldr	r2, [pc, #32]	; (800ed9c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800ed7c:	21b0      	movs	r1, #176	; 0xb0
 800ed7e:	4808      	ldr	r0, [pc, #32]	; (800eda0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800ed80:	f00f fa08 	bl	801e194 <__assert_func>
      checkSanity<Derived>();
 800ed84:	2100      	movs	r1, #0
 800ed86:	68f8      	ldr	r0, [r7, #12]
 800ed88:	f000 fd0d 	bl	800f7a6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	08026720 	.word	0x08026720
 800ed9c:	08027278 	.word	0x08027278
 800eda0:	080268d0 	.word	0x080268d0

0800eda4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	689b      	ldr	r3, [r3, #8]
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7f9 fe05 	bl	80089c0 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800edb6:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	615a      	str	r2, [r3, #20]
    }
 800edbc:	bf00      	nop
 800edbe:	3708      	adds	r7, #8
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	6039      	str	r1, [r7, #0]
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 fcf4 	bl	800f7bc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6839      	ldr	r1, [r7, #0]
 800edd8:	4618      	mov	r0, r3
 800edda:	f000 fcfa 	bl	800f7d2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	4618      	mov	r0, r3
 800ede2:	3708      	adds	r7, #8
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800ede8:	b580      	push	{r7, lr}
 800edea:	b082      	sub	sp, #8
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800edf2:	2200      	movs	r2, #0
 800edf4:	2100      	movs	r1, #0
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f000 fd13 	bl	800f822 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800edfc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ee00:	eeb0 0a67 	vmov.f32	s0, s15
 800ee04:	3708      	adds	r7, #8
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}

0800ee0a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	b084      	sub	sp, #16
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
 800ee12:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800ee14:	6839      	ldr	r1, [r7, #0]
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f000 fd16 	bl	800f848 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>
 800ee1c:	eef0 7a40 	vmov.f32	s15, s0
 800ee20:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800ee24:	6839      	ldr	r1, [r7, #0]
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f000 fd1f 	bl	800f86a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>
 800ee2c:	eef0 7a40 	vmov.f32	s15, s0
 800ee30:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800ee34:	f107 020c 	add.w	r2, r7, #12
 800ee38:	f107 0308 	add.w	r3, r7, #8
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	6838      	ldr	r0, [r7, #0]
 800ee40:	f7fa fbdb 	bl	80095fa <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800ee44:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ee48:	eeb0 0a67 	vmov.f32	s0, s15
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}

0800ee52 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ee52:	b580      	push	{r7, lr}
 800ee54:	b082      	sub	sp, #8
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ee5a:	2202      	movs	r2, #2
 800ee5c:	2102      	movs	r1, #2
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7fb fe2e 	bl	800aac0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f000 fd11 	bl	800f88c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800ee6a:	bf00      	nop
 800ee6c:	3708      	adds	r7, #8
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}

0800ee72 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ee72:	b480      	push	{r7}
 800ee74:	b083      	sub	sp, #12
 800ee76:	af00      	add	r7, sp, #0
 800ee78:	6078      	str	r0, [r7, #4]
    }
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	370c      	adds	r7, #12
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr

0800ee88 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]
    {}
 800ee92:	bf00      	nop
 800ee94:	370c      	adds	r7, #12
 800ee96:	46bd      	mov	sp, r7
 800ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9c:	4770      	bx	lr

0800ee9e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ee9e:	b480      	push	{r7}
 800eea0:	b083      	sub	sp, #12
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	4618      	mov	r0, r3
 800eeaa:	370c      	adds	r7, #12
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr

0800eeb4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800eeb4:	b590      	push	{r4, r7, lr}
 800eeb6:	b083      	sub	sp, #12
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
 800eebe:	687c      	ldr	r4, [r7, #4]
 800eec0:	6838      	ldr	r0, [r7, #0]
 800eec2:	f000 fced 	bl	800f8a0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>
 800eec6:	4603      	mov	r3, r0
 800eec8:	4619      	mov	r1, r3
 800eeca:	4620      	mov	r0, r4
 800eecc:	f7f6 fd30 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	1d1c      	adds	r4, r3, #4
 800eed4:	6838      	ldr	r0, [r7, #0]
 800eed6:	f000 fcef 	bl	800f8b8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>
 800eeda:	4603      	mov	r3, r0
 800eedc:	4619      	mov	r1, r3
 800eede:	4620      	mov	r0, r4
 800eee0:	f000 fd02 	bl	800f8e8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f103 0420 	add.w	r4, r3, #32
 800eeea:	6838      	ldr	r0, [r7, #0]
 800eeec:	f000 fcf0 	bl	800f8d0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>
 800eef0:	4603      	mov	r3, r0
 800eef2:	4619      	mov	r1, r3
 800eef4:	4620      	mov	r0, r4
 800eef6:	f000 fd06 	bl	800f906 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4618      	mov	r0, r3
 800eefe:	370c      	adds	r7, #12
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd90      	pop	{r4, r7, pc}

0800ef04 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ef04:	b590      	push	{r4, r7, lr}
 800ef06:	b087      	sub	sp, #28
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	60b9      	str	r1, [r7, #8]
 800ef0e:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	4618      	mov	r0, r3
 800ef14:	f000 fd06 	bl	800f924 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>
 800ef18:	4604      	mov	r4, r0
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	3304      	adds	r3, #4
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	68b9      	ldr	r1, [r7, #8]
 800ef22:	4618      	mov	r0, r3
 800ef24:	f000 fd09 	bl	800f93a <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800ef28:	eef0 7a40 	vmov.f32	s15, s0
 800ef2c:	edc7 7a04 	vstr	s15, [r7, #16]
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	3320      	adds	r3, #32
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	68b9      	ldr	r1, [r7, #8]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f000 fd11 	bl	800f960 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 800ef3e:	eef0 7a40 	vmov.f32	s15, s0
 800ef42:	edc7 7a05 	vstr	s15, [r7, #20]
 800ef46:	f107 0214 	add.w	r2, r7, #20
 800ef4a:	f107 0310 	add.w	r3, r7, #16
 800ef4e:	4619      	mov	r1, r3
 800ef50:	4620      	mov	r0, r4
 800ef52:	f000 fb93 	bl	800f67c <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800ef56:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ef5a:	eeb0 0a67 	vmov.f32	s0, s15
 800ef5e:	371c      	adds	r7, #28
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd90      	pop	{r4, r7, pc}

0800ef64 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	bf00      	nop
 800ef6e:	370c      	adds	r7, #12
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr

0800ef78 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800ef78:	b480      	push	{r7}
 800ef7a:	b083      	sub	sp, #12
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	3330      	adds	r3, #48	; 0x30
 800ef84:	4618      	mov	r0, r3
 800ef86:	370c      	adds	r7, #12
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr

0800ef90 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800ef90:	b480      	push	{r7}
 800ef92:	b083      	sub	sp, #12
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	370c      	adds	r7, #12
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa4:	4770      	bx	lr

0800efa6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800efa6:	b480      	push	{r7}
 800efa8:	b083      	sub	sp, #12
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	3318      	adds	r3, #24
 800efb2:	4618      	mov	r0, r3
 800efb4:	370c      	adds	r7, #12
 800efb6:	46bd      	mov	sp, r7
 800efb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbc:	4770      	bx	lr

0800efbe <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800efbe:	b580      	push	{r7, lr}
 800efc0:	b082      	sub	sp, #8
 800efc2:	af00      	add	r7, sp, #0
 800efc4:	6078      	str	r0, [r7, #4]
 800efc6:	6039      	str	r1, [r7, #0]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6839      	ldr	r1, [r7, #0]
 800efcc:	4618      	mov	r0, r3
 800efce:	f000 fce8 	bl	800f9a2 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	4618      	mov	r0, r3
 800efd6:	3708      	adds	r7, #8
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>:
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6839      	ldr	r1, [r7, #0]
 800efea:	4618      	mov	r0, r3
 800efec:	f000 fce8 	bl	800f9c0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	4618      	mov	r0, r3
 800eff4:	3708      	adds	r7, #8
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}

0800effa <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800effa:	b590      	push	{r4, r7, lr}
 800effc:	b087      	sub	sp, #28
 800effe:	af00      	add	r7, sp, #0
 800f000:	60f8      	str	r0, [r7, #12]
 800f002:	60b9      	str	r1, [r7, #8]
 800f004:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	4618      	mov	r0, r3
 800f00a:	f000 fce8 	bl	800f9de <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800f00e:	4604      	mov	r4, r0
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	3304      	adds	r3, #4
 800f014:	687a      	ldr	r2, [r7, #4]
 800f016:	68b9      	ldr	r1, [r7, #8]
 800f018:	4618      	mov	r0, r3
 800f01a:	f000 fceb 	bl	800f9f4 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800f01e:	eef0 7a40 	vmov.f32	s15, s0
 800f022:	edc7 7a04 	vstr	s15, [r7, #16]
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	330c      	adds	r3, #12
 800f02a:	687a      	ldr	r2, [r7, #4]
 800f02c:	68b9      	ldr	r1, [r7, #8]
 800f02e:	4618      	mov	r0, r3
 800f030:	f000 fcf3 	bl	800fa1a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>
 800f034:	eef0 7a40 	vmov.f32	s15, s0
 800f038:	edc7 7a05 	vstr	s15, [r7, #20]
 800f03c:	f107 0214 	add.w	r2, r7, #20
 800f040:	f107 0310 	add.w	r3, r7, #16
 800f044:	4619      	mov	r1, r3
 800f046:	4620      	mov	r0, r4
 800f048:	f000 fb18 	bl	800f67c <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800f04c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f050:	eeb0 0a67 	vmov.f32	s0, s15
 800f054:	371c      	adds	r7, #28
 800f056:	46bd      	mov	sp, r7
 800f058:	bd90      	pop	{r4, r7, pc}

0800f05a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800f05a:	b590      	push	{r4, r7, lr}
 800f05c:	b087      	sub	sp, #28
 800f05e:	af00      	add	r7, sp, #0
 800f060:	60f8      	str	r0, [r7, #12]
 800f062:	60b9      	str	r1, [r7, #8]
 800f064:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800f066:	68b8      	ldr	r0, [r7, #8]
 800f068:	f7f7 ff9e 	bl	8006fa8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800f06c:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800f06e:	68b8      	ldr	r0, [r7, #8]
 800f070:	f7f6 fe73 	bl	8005d5a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800f074:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	4618      	mov	r0, r3
 800f07a:	f7f6 f92e 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800f07e:	4602      	mov	r2, r0
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	4293      	cmp	r3, r2
 800f084:	d107      	bne.n	800f096 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x3c>
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	4618      	mov	r0, r3
 800f08a:	f7f6 f91b 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800f08e:	4602      	mov	r2, r0
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	4293      	cmp	r3, r2
 800f094:	d001      	beq.n	800f09a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x40>
 800f096:	2301      	movs	r3, #1
 800f098:	e000      	b.n	800f09c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x42>
 800f09a:	2300      	movs	r3, #0
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d005      	beq.n	800f0ac <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x52>
      dst.resize(dstRows, dstCols);
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	693a      	ldr	r2, [r7, #16]
 800f0a4:	6979      	ldr	r1, [r7, #20]
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7f9 f830 	bl	800810c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800f0ac:	68b8      	ldr	r0, [r7, #8]
 800f0ae:	f000 fcd5 	bl	800fa5c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	68b8      	ldr	r0, [r7, #8]
 800f0b6:	f000 fcdd 	bl	800fa74 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	461a      	mov	r2, r3
 800f0be:	4621      	mov	r1, r4
 800f0c0:	68f8      	ldr	r0, [r7, #12]
 800f0c2:	f000 fce3 	bl	800fa8c <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>
  }
 800f0c6:	bf00      	nop
 800f0c8:	371c      	adds	r7, #28
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd90      	pop	{r4, r7, pc}
	...

0800f0d0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	60b9      	str	r1, [r7, #8]
 800f0da:	607a      	str	r2, [r7, #4]
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	687a      	ldr	r2, [r7, #4]
 800f0e0:	68b9      	ldr	r1, [r7, #8]
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f000 fcf0 	bl	800fac8 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	db06      	blt.n	800f0fc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x2c>
 800f0ee:	68b8      	ldr	r0, [r7, #8]
 800f0f0:	f7f7 ff68 	bl	8006fc4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	db05      	blt.n	800f108 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x38>
 800f0fc:	4b05      	ldr	r3, [pc, #20]	; (800f114 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x44>)
 800f0fe:	4a06      	ldr	r2, [pc, #24]	; (800f118 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x48>)
 800f100:	2178      	movs	r1, #120	; 0x78
 800f102:	4806      	ldr	r0, [pc, #24]	; (800f11c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x4c>)
 800f104:	f00f f846 	bl	801e194 <__assert_func>
    }
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	4618      	mov	r0, r3
 800f10c:	3710      	adds	r7, #16
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	08024b80 	.word	0x08024b80
 800f118:	0802737c 	.word	0x0802737c
 800f11c:	08024d04 	.word	0x08024d04

0800f120 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800f120:	b480      	push	{r7}
 800f122:	b083      	sub	sp, #12
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	4618      	mov	r0, r3
 800f12c:	370c      	adds	r7, #12
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr

0800f136 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 800f136:	b580      	push	{r7, lr}
 800f138:	b082      	sub	sp, #8
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	6078      	str	r0, [r7, #4]
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f000 fcd3 	bl	800faea <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	4618      	mov	r0, r3
 800f148:	3708      	adds	r7, #8
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}

0800f14e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800f14e:	b580      	push	{r7, lr}
 800f150:	b082      	sub	sp, #8
 800f152:	af00      	add	r7, sp, #0
 800f154:	6078      	str	r0, [r7, #4]
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f7ff ffed 	bl	800f136 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	4618      	mov	r0, r3
 800f160:	3708      	adds	r7, #8
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}

0800f166 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800f166:	b580      	push	{r7, lr}
 800f168:	b082      	sub	sp, #8
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	6078      	str	r0, [r7, #4]
 800f16e:	f7f7 fe7e 	bl	8006e6e <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800f172:	4603      	mov	r3, r0
 800f174:	4618      	mov	r0, r3
 800f176:	3708      	adds	r7, #8
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	f7f7 fe7b 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f188:	4603      	mov	r3, r0
 800f18a:	4618      	mov	r0, r3
 800f18c:	3708      	adds	r7, #8
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
	...

0800f194 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800f194:	b5b0      	push	{r4, r5, r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	60b9      	str	r1, [r7, #8]
 800f19e:	607a      	str	r2, [r7, #4]
 800f1a0:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800f1a2:	68f8      	ldr	r0, [r7, #12]
 800f1a4:	f7ff ffd3 	bl	800f14e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>
 800f1a8:	68fa      	ldr	r2, [r7, #12]
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	4614      	mov	r4, r2
 800f1ae:	461d      	mov	r5, r3
 800f1b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f1b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f1b8:	e884 0003 	stmia.w	r4, {r0, r1}
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f103 0218 	add.w	r2, r3, #24
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	4614      	mov	r4, r2
 800f1c6:	461d      	mov	r5, r3
 800f1c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f1cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f1d0:	e884 0003 	stmia.w	r4, {r0, r1}
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	3330      	adds	r3, #48	; 0x30
 800f1d8:	6839      	ldr	r1, [r7, #0]
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7f6 fba8 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800f1e0:	68b8      	ldr	r0, [r7, #8]
 800f1e2:	f7fc fd11 	bl	800bc08 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7ff ffbb 	bl	800f166 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	429c      	cmp	r4, r3
 800f1f4:	d10a      	bne.n	800f20c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 800f1f6:	68b8      	ldr	r0, [r7, #8]
 800f1f8:	f7fc fd13 	bl	800bc22 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800f1fc:	4604      	mov	r4, r0
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	4618      	mov	r0, r3
 800f202:	f7ff ffbb 	bl	800f17c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>
 800f206:	4603      	mov	r3, r0
 800f208:	429c      	cmp	r4, r3
 800f20a:	d005      	beq.n	800f218 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 800f20c:	4b05      	ldr	r3, [pc, #20]	; (800f224 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 800f20e:	4a06      	ldr	r2, [pc, #24]	; (800f228 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 800f210:	2174      	movs	r1, #116	; 0x74
 800f212:	4806      	ldr	r0, [pc, #24]	; (800f22c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 800f214:	f00e ffbe 	bl	801e194 <__assert_func>
    }
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	4618      	mov	r0, r3
 800f21c:	3710      	adds	r7, #16
 800f21e:	46bd      	mov	sp, r7
 800f220:	bdb0      	pop	{r4, r5, r7, pc}
 800f222:	bf00      	nop
 800f224:	0801fffc 	.word	0x0801fffc
 800f228:	0802746c 	.word	0x0802746c
 800f22c:	08020260 	.word	0x08020260

0800f230 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800f230:	b580      	push	{r7, lr}
 800f232:	b082      	sub	sp, #8
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 f809 	bl	800f250 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800f23e:	4603      	mov	r3, r0
 800f240:	4618      	mov	r0, r3
 800f242:	f000 fc5d 	bl	800fb00 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>
 800f246:	4603      	mov	r3, r0
 800f248:	4618      	mov	r0, r3
 800f24a:	3708      	adds	r7, #8
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800f250:	b480      	push	{r7}
 800f252:	b083      	sub	sp, #12
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	4618      	mov	r0, r3
 800f25c:	370c      	adds	r7, #12
 800f25e:	46bd      	mov	sp, r7
 800f260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f264:	4770      	bx	lr

0800f266 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800f266:	b580      	push	{r7, lr}
 800f268:	b082      	sub	sp, #8
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	4618      	mov	r0, r3
 800f272:	f7fc fcc9 	bl	800bc08 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800f276:	4603      	mov	r3, r0
    }
 800f278:	4618      	mov	r0, r3
 800f27a:	3708      	adds	r7, #8
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f000 fc60 	bl	800fb4e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	4618      	mov	r0, r3
 800f292:	3708      	adds	r7, #8
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800f298:	b580      	push	{r7, lr}
 800f29a:	b082      	sub	sp, #8
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7ff ffec 	bl	800f280 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3708      	adds	r7, #8
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}

0800f2b2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800f2b2:	b580      	push	{r7, lr}
 800f2b4:	b082      	sub	sp, #8
 800f2b6:	af00      	add	r7, sp, #0
 800f2b8:	6078      	str	r0, [r7, #4]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7ff ffeb 	bl	800f298 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3708      	adds	r7, #8
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b082      	sub	sp, #8
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7ff ffeb 	bl	800f2b2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3708      	adds	r7, #8
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}

0800f2e6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800f2e6:	b580      	push	{r7, lr}
 800f2e8:	b082      	sub	sp, #8
 800f2ea:	af00      	add	r7, sp, #0
 800f2ec:	6078      	str	r0, [r7, #4]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	330c      	adds	r3, #12
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7ff ffea 	bl	800f2cc <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	3304      	adds	r3, #4
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f7fc fd79 	bl	800bdf4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	4618      	mov	r0, r3
 800f306:	3708      	adds	r7, #8
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	4618      	mov	r0, r3
 800f318:	f7ff ffe5 	bl	800f2e6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 fc0b 	bl	800fb38 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	4618      	mov	r0, r3
 800f326:	3708      	adds	r7, #8
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4618      	mov	r0, r3
 800f338:	f7ff ffe8 	bl	800f30c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	4618      	mov	r0, r3
 800f340:	3708      	adds	r7, #8
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}

0800f346 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800f346:	b580      	push	{r7, lr}
 800f348:	b082      	sub	sp, #8
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	6078      	str	r0, [r7, #4]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4618      	mov	r0, r3
 800f352:	f7ff ffeb 	bl	800f32c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	4618      	mov	r0, r3
 800f35a:	3708      	adds	r7, #8
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800f360:	b580      	push	{r7, lr}
 800f362:	ed2d 8b02 	vpush	{d8}
 800f366:	b088      	sub	sp, #32
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f7ff fb0d 	bl	800e98e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>
 800f374:	4603      	mov	r3, r0
 800f376:	2b00      	cmp	r3, #0
 800f378:	dd05      	ble.n	800f386 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f7ff ff58 	bl	800f230 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>
 800f380:	4603      	mov	r3, r0
 800f382:	2b00      	cmp	r3, #0
 800f384:	dc06      	bgt.n	800f394 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800f386:	4b16      	ldr	r3, [pc, #88]	; (800f3e0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800f388:	4a16      	ldr	r2, [pc, #88]	; (800f3e4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800f38a:	f240 119b 	movw	r1, #411	; 0x19b
 800f38e:	4816      	ldr	r0, [pc, #88]	; (800f3e8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800f390:	f00e ff00 	bl	801e194 <__assert_func>
 800f394:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f7ff ff5a 	bl	800f250 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800f39c:	4602      	mov	r2, r0
 800f39e:	f107 030c 	add.w	r3, r7, #12
 800f3a2:	4611      	mov	r1, r2
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f000 fbb8 	bl	800fb1a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f7ff ff50 	bl	800f250 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	f107 030c 	add.w	r3, r7, #12
 800f3b6:	6839      	ldr	r1, [r7, #0]
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f000 fbd3 	bl	800fb64 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800f3be:	eeb0 8a40 	vmov.f32	s16, s0
 800f3c2:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800f3c4:	f107 030c 	add.w	r3, r7, #12
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f7ff ffbc 	bl	800f346 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800f3ce:	eef0 7a48 	vmov.f32	s15, s16
}
 800f3d2:	eeb0 0a67 	vmov.f32	s0, s15
 800f3d6:	3720      	adds	r7, #32
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	ecbd 8b02 	vpop	{d8}
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	0802507c 	.word	0x0802507c
 800f3e4:	080276dc 	.word	0x080276dc
 800f3e8:	08025288 	.word	0x08025288

0800f3ec <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800f3f4:	2202      	movs	r2, #2
 800f3f6:	2101      	movs	r1, #1
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f7fd fd50 	bl	800ce9e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 fbc1 	bl	800fb86 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>
  }
 800f404:	bf00      	nop
 800f406:	3708      	adds	r7, #8
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
    }
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	4618      	mov	r0, r3
 800f418:	370c      	adds	r7, #12
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr

0800f422 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800f422:	b480      	push	{r7}
 800f424:	b083      	sub	sp, #12
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
 800f42a:	6039      	str	r1, [r7, #0]
}
 800f42c:	bf00      	nop
 800f42e:	370c      	adds	r7, #12
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr

0800f438 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f000 fbd5 	bl	800fbf0 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4618      	mov	r0, r3
 800f44a:	3708      	adds	r7, #8
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}

0800f450 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7ff ffec 	bl	800f438 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	4618      	mov	r0, r3
 800f464:	3708      	adds	r7, #8
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}

0800f46a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800f46a:	b580      	push	{r7, lr}
 800f46c:	b082      	sub	sp, #8
 800f46e:	af00      	add	r7, sp, #0
 800f470:	6078      	str	r0, [r7, #4]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4618      	mov	r0, r3
 800f476:	f7ff ffeb 	bl	800f450 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 fbad 	bl	800fbda <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	4618      	mov	r0, r3
 800f484:	3708      	adds	r7, #8
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}

0800f48a <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800f48a:	b580      	push	{r7, lr}
 800f48c:	b082      	sub	sp, #8
 800f48e:	af00      	add	r7, sp, #0
 800f490:	6078      	str	r0, [r7, #4]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	4618      	mov	r0, r3
 800f496:	f7ff ffe8 	bl	800f46a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	4618      	mov	r0, r3
 800f49e:	3708      	adds	r7, #8
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	330c      	adds	r3, #12
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f7ff ffea 	bl	800f48a <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	3308      	adds	r3, #8
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7f8 f995 	bl	80077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 fb7f 	bl	800fbc4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3708      	adds	r7, #8
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7ff ffe2 	bl	800f4a4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3708      	adds	r7, #8
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}

0800f4ea <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800f4ea:	b580      	push	{r7, lr}
 800f4ec:	b090      	sub	sp, #64	; 0x40
 800f4ee:	af02      	add	r7, sp, #8
 800f4f0:	60f8      	str	r0, [r7, #12]
 800f4f2:	60b9      	str	r1, [r7, #8]
 800f4f4:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800f4f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4fa:	68b9      	ldr	r1, [r7, #8]
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f000 fb52 	bl	800fba6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	68b9      	ldr	r1, [r7, #8]
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f000 fb9a 	bl	800fc40 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800f50c:	f107 0320 	add.w	r3, r7, #32
 800f510:	68f9      	ldr	r1, [r7, #12]
 800f512:	4618      	mov	r0, r3
 800f514:	f7f7 fc2d 	bl	8006d72 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800f518:	68f8      	ldr	r0, [r7, #12]
 800f51a:	f7f8 fc6b 	bl	8007df4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800f51e:	4603      	mov	r3, r0
 800f520:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f524:	f107 0120 	add.w	r1, r7, #32
 800f528:	f107 0010 	add.w	r0, r7, #16
 800f52c:	9300      	str	r3, [sp, #0]
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f000 fbd0 	bl	800fcd4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800f534:	f107 0310 	add.w	r3, r7, #16
 800f538:	4618      	mov	r0, r3
 800f53a:	f000 fbe5 	bl	800fd08 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800f53e:	f107 0320 	add.w	r3, r7, #32
 800f542:	4618      	mov	r0, r3
 800f544:	f7f6 f8db 	bl	80056fe <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800f548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7ff ffbf 	bl	800f4d0 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
}
 800f552:	bf00      	nop
 800f554:	3738      	adds	r7, #56	; 0x38
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}

0800f55a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800f55a:	b580      	push	{r7, lr}
 800f55c:	b086      	sub	sp, #24
 800f55e:	af00      	add	r7, sp, #0
 800f560:	60f8      	str	r0, [r7, #12]
 800f562:	60b9      	str	r1, [r7, #8]
 800f564:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800f56a:	687a      	ldr	r2, [r7, #4]
 800f56c:	68b9      	ldr	r1, [r7, #8]
 800f56e:	6978      	ldr	r0, [r7, #20]
 800f570:	f000 fbd5 	bl	800fd1e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>
}
 800f574:	bf00      	nop
 800f576:	3718      	adds	r7, #24
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}

0800f57c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f57c:	b480      	push	{r7}
 800f57e:	b083      	sub	sp, #12
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	332c      	adds	r3, #44	; 0x2c
 800f588:	4618      	mov	r0, r3
 800f58a:	370c      	adds	r7, #12
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr

0800f594 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f594:	b480      	push	{r7}
 800f596:	b083      	sub	sp, #12
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	4618      	mov	r0, r3
 800f5a0:	370c      	adds	r7, #12
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr

0800f5aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f5aa:	b480      	push	{r7}
 800f5ac:	b083      	sub	sp, #12
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	3318      	adds	r3, #24
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	370c      	adds	r7, #12
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr

0800f5c2 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f5c2:	b580      	push	{r7, lr}
 800f5c4:	b082      	sub	sp, #8
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
 800f5ca:	6039      	str	r1, [r7, #0]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6839      	ldr	r1, [r7, #0]
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f000 fbb7 	bl	800fd44 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3708      	adds	r7, #8
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>:
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
 800f5e8:	6039      	str	r1, [r7, #0]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6839      	ldr	r1, [r7, #0]
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f000 fbb7 	bl	800fd62 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3708      	adds	r7, #8
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}

0800f5fe <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f5fe:	b480      	push	{r7}
 800f600:	b083      	sub	sp, #12
 800f602:	af00      	add	r7, sp, #0
 800f604:	6078      	str	r0, [r7, #4]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	4618      	mov	r0, r3
 800f60a:	370c      	adds	r7, #12
 800f60c:	46bd      	mov	sp, r7
 800f60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f612:	4770      	bx	lr

0800f614 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	68ba      	ldr	r2, [r7, #8]
 800f624:	6879      	ldr	r1, [r7, #4]
 800f626:	4618      	mov	r0, r3
 800f628:	f000 fbaa 	bl	800fd80 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>
 800f62c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f630:	eeb0 0a67 	vmov.f32	s0, s15
 800f634:	3710      	adds	r7, #16
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}

0800f63a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f63a:	b5b0      	push	{r4, r5, r7, lr}
 800f63c:	b084      	sub	sp, #16
 800f63e:	af00      	add	r7, sp, #0
 800f640:	60f8      	str	r0, [r7, #12]
 800f642:	60b9      	str	r1, [r7, #8]
 800f644:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	681c      	ldr	r4, [r3, #0]
 800f64a:	68f8      	ldr	r0, [r7, #12]
 800f64c:	f000 fbb9 	bl	800fdc2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>
 800f650:	4602      	mov	r2, r0
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	fb03 f502 	mul.w	r5, r3, r2
 800f658:	68f8      	ldr	r0, [r7, #12]
 800f65a:	f000 fbbd 	bl	800fdd8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>
 800f65e:	4602      	mov	r2, r0
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	fb02 f303 	mul.w	r3, r2, r3
 800f666:	442b      	add	r3, r5
 800f668:	009b      	lsls	r3, r3, #2
 800f66a:	4423      	add	r3, r4
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	ee07 3a90 	vmov	s15, r3
  }
 800f672:	eeb0 0a67 	vmov.f32	s0, s15
 800f676:	3710      	adds	r7, #16
 800f678:	46bd      	mov	sp, r7
 800f67a:	bdb0      	pop	{r4, r5, r7, pc}

0800f67c <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800f67c:	b480      	push	{r7}
 800f67e:	b085      	sub	sp, #20
 800f680:	af00      	add	r7, sp, #0
 800f682:	60f8      	str	r0, [r7, #12]
 800f684:	60b9      	str	r1, [r7, #8]
 800f686:	607a      	str	r2, [r7, #4]
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	ed93 7a00 	vldr	s14, [r3]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	edd3 7a00 	vldr	s15, [r3]
 800f694:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f698:	eeb0 0a67 	vmov.f32	s0, s15
 800f69c:	3714      	adds	r7, #20
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr

0800f6a6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800f6a6:	b580      	push	{r7, lr}
 800f6a8:	b084      	sub	sp, #16
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	60f8      	str	r0, [r7, #12]
 800f6ae:	60b9      	str	r1, [r7, #8]
 800f6b0:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f6b2:	68b9      	ldr	r1, [r7, #8]
 800f6b4:	68f8      	ldr	r0, [r7, #12]
 800f6b6:	f000 fb9a 	bl	800fdee <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f6ba:	687a      	ldr	r2, [r7, #4]
 800f6bc:	68b9      	ldr	r1, [r7, #8]
 800f6be:	68f8      	ldr	r0, [r7, #12]
 800f6c0:	f000 fba0 	bl	800fe04 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f6c4:	bf00      	nop
 800f6c6:	3710      	adds	r7, #16
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800f6cc:	b590      	push	{r4, r7, lr}
 800f6ce:	b085      	sub	sp, #20
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	60b9      	str	r1, [r7, #8]
 800f6d6:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7f6 fded 	bl	80062ba <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800f6e0:	4604      	mov	r4, r0
 800f6e2:	68b8      	ldr	r0, [r7, #8]
 800f6e4:	f7f6 ffb0 	bl	8006648 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	429c      	cmp	r4, r3
 800f6ec:	d10a      	bne.n	800f704 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f7f6 fded 	bl	80062d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800f6f6:	4604      	mov	r4, r0
 800f6f8:	68b8      	ldr	r0, [r7, #8]
 800f6fa:	f7f6 ffb3 	bl	8006664 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 800f6fe:	4603      	mov	r3, r0
 800f700:	429c      	cmp	r4, r3
 800f702:	d005      	beq.n	800f710 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800f704:	4b0b      	ldr	r3, [pc, #44]	; (800f734 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800f706:	4a0c      	ldr	r2, [pc, #48]	; (800f738 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800f708:	21b0      	movs	r1, #176	; 0xb0
 800f70a:	480c      	ldr	r0, [pc, #48]	; (800f73c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800f70c:	f00e fd42 	bl	801e194 <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800f710:	68b8      	ldr	r0, [r7, #8]
 800f712:	f000 fbaf 	bl	800fe74 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 800f716:	4604      	mov	r4, r0
 800f718:	68b8      	ldr	r0, [r7, #8]
 800f71a:	f000 fbb7 	bl	800fe8c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 800f71e:	4603      	mov	r3, r0
 800f720:	461a      	mov	r2, r3
 800f722:	4621      	mov	r1, r4
 800f724:	68f8      	ldr	r0, [r7, #12]
 800f726:	f000 fbbd 	bl	800fea4 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>
  }
 800f72a:	bf00      	nop
 800f72c:	3714      	adds	r7, #20
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd90      	pop	{r4, r7, pc}
 800f732:	bf00      	nop
 800f734:	08022d90 	.word	0x08022d90
 800f738:	080278b8 	.word	0x080278b8
 800f73c:	08023288 	.word	0x08023288

0800f740 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800f740:	b590      	push	{r4, r7, lr}
 800f742:	b085      	sub	sp, #20
 800f744:	af00      	add	r7, sp, #0
 800f746:	60f8      	str	r0, [r7, #12]
 800f748:	60b9      	str	r1, [r7, #8]
 800f74a:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800f74c:	68b8      	ldr	r0, [r7, #8]
 800f74e:	f7f6 f806 	bl	800575e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800f752:	4604      	mov	r4, r0
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f7f6 fc9b 	bl	8006090 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800f75a:	4603      	mov	r3, r0
 800f75c:	461a      	mov	r2, r3
 800f75e:	4621      	mov	r1, r4
 800f760:	68f8      	ldr	r0, [r7, #12]
 800f762:	f000 fbf3 	bl	800ff4c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>
}
 800f766:	68f8      	ldr	r0, [r7, #12]
 800f768:	3714      	adds	r7, #20
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd90      	pop	{r4, r7, pc}

0800f76e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800f76e:	b580      	push	{r7, lr}
 800f770:	b086      	sub	sp, #24
 800f772:	af00      	add	r7, sp, #0
 800f774:	60f8      	str	r0, [r7, #12]
 800f776:	60b9      	str	r1, [r7, #8]
 800f778:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800f77e:	687a      	ldr	r2, [r7, #4]
 800f780:	68b9      	ldr	r1, [r7, #8]
 800f782:	6978      	ldr	r0, [r7, #20]
 800f784:	f000 fc10 	bl	800ffa8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800f788:	bf00      	nop
 800f78a:	3718      	adds	r7, #24
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f790:	b480      	push	{r7}
 800f792:	b083      	sub	sp, #12
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
    }
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	4618      	mov	r0, r3
 800f79c:	370c      	adds	r7, #12
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a4:	4770      	bx	lr

0800f7a6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800f7a6:	b480      	push	{r7}
 800f7a8:	b083      	sub	sp, #12
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	6078      	str	r0, [r7, #4]
 800f7ae:	6039      	str	r1, [r7, #0]
    {}
 800f7b0:	bf00      	nop
 800f7b2:	370c      	adds	r7, #12
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr

0800f7bc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800f7bc:	b480      	push	{r7}
 800f7be:	b083      	sub	sp, #12
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	370c      	adds	r7, #12
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr

0800f7d2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800f7d2:	b590      	push	{r4, r7, lr}
 800f7d4:	b083      	sub	sp, #12
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
 800f7da:	6039      	str	r1, [r7, #0]
 800f7dc:	687c      	ldr	r4, [r7, #4]
 800f7de:	6838      	ldr	r0, [r7, #0]
 800f7e0:	f000 fbf5 	bl	800ffce <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	4620      	mov	r0, r4
 800f7ea:	f7f6 f8a1 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	1d1c      	adds	r4, r3, #4
 800f7f2:	6838      	ldr	r0, [r7, #0]
 800f7f4:	f000 fbf7 	bl	800ffe6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	f7ff fbde 	bl	800efbe <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f103 040c 	add.w	r4, r3, #12
 800f808:	6838      	ldr	r0, [r7, #0]
 800f80a:	f000 fbf7 	bl	800fffc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>
 800f80e:	4603      	mov	r3, r0
 800f810:	4619      	mov	r1, r3
 800f812:	4620      	mov	r0, r4
 800f814:	f000 fbfe 	bl	8010014 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	4618      	mov	r0, r3
 800f81c:	370c      	adds	r7, #12
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd90      	pop	{r4, r7, pc}

0800f822 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800f822:	b580      	push	{r7, lr}
 800f824:	b084      	sub	sp, #16
 800f826:	af00      	add	r7, sp, #0
 800f828:	60f8      	str	r0, [r7, #12]
 800f82a:	60b9      	str	r1, [r7, #8]
 800f82c:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	68ba      	ldr	r2, [r7, #8]
 800f832:	6879      	ldr	r1, [r7, #4]
 800f834:	4618      	mov	r0, r3
 800f836:	f000 fbfc 	bl	8010032 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>
 800f83a:	eef0 7a40 	vmov.f32	s15, s0
 800f83e:	eeb0 0a67 	vmov.f32	s0, s15
 800f842:	3710      	adds	r7, #16
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}

0800f848 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800f848:	b580      	push	{r7, lr}
 800f84a:	b082      	sub	sp, #8
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800f852:	2201      	movs	r2, #1
 800f854:	2100      	movs	r1, #0
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f7ff ffe3 	bl	800f822 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800f85c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f860:	eeb0 0a67 	vmov.f32	s0, s15
 800f864:	3708      	adds	r7, #8
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}

0800f86a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b082      	sub	sp, #8
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
 800f872:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800f874:	2202      	movs	r2, #2
 800f876:	2100      	movs	r1, #0
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f7ff ffd2 	bl	800f822 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800f87e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f882:	eeb0 0a67 	vmov.f32	s0, s15
 800f886:	3708      	adds	r7, #8
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800f88c:	b480      	push	{r7}
 800f88e:	b083      	sub	sp, #12
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	bf00      	nop
 800f896:	370c      	adds	r7, #12
 800f898:	46bd      	mov	sp, r7
 800f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89e:	4770      	bx	lr

0800f8a0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f8a0:	b480      	push	{r7}
 800f8a2:	b083      	sub	sp, #12
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	3334      	adds	r3, #52	; 0x34
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	370c      	adds	r7, #12
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b6:	4770      	bx	lr

0800f8b8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f8b8:	b480      	push	{r7}
 800f8ba:	b083      	sub	sp, #12
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	3304      	adds	r3, #4
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	370c      	adds	r7, #12
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ce:	4770      	bx	lr

0800f8d0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f8d0:	b480      	push	{r7}
 800f8d2:	b083      	sub	sp, #12
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	331c      	adds	r3, #28
 800f8dc:	4618      	mov	r0, r3
 800f8de:	370c      	adds	r7, #12
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr

0800f8e8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6839      	ldr	r1, [r7, #0]
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f000 fbcb 	bl	8010092 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	4618      	mov	r0, r3
 800f900:	3708      	adds	r7, #8
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}

0800f906 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>:
 800f906:	b580      	push	{r7, lr}
 800f908:	b082      	sub	sp, #8
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	6039      	str	r1, [r7, #0]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	6839      	ldr	r1, [r7, #0]
 800f914:	4618      	mov	r0, r3
 800f916:	f000 fbcb 	bl	80100b0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	4618      	mov	r0, r3
 800f91e:	3708      	adds	r7, #8
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f924:	b480      	push	{r7}
 800f926:	b083      	sub	sp, #12
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4618      	mov	r0, r3
 800f930:	370c      	adds	r7, #12
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr

0800f93a <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f93a:	b580      	push	{r7, lr}
 800f93c:	b084      	sub	sp, #16
 800f93e:	af00      	add	r7, sp, #0
 800f940:	60f8      	str	r0, [r7, #12]
 800f942:	60b9      	str	r1, [r7, #8]
 800f944:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	68ba      	ldr	r2, [r7, #8]
 800f94a:	6879      	ldr	r1, [r7, #4]
 800f94c:	4618      	mov	r0, r3
 800f94e:	f000 fbc6 	bl	80100de <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>
 800f952:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f956:	eeb0 0a67 	vmov.f32	s0, s15
 800f95a:	3710      	adds	r7, #16
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f960:	b5b0      	push	{r4, r5, r7, lr}
 800f962:	b084      	sub	sp, #16
 800f964:	af00      	add	r7, sp, #0
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	60b9      	str	r1, [r7, #8]
 800f96a:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	681c      	ldr	r4, [r3, #0]
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f000 fbd4 	bl	801011e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 800f976:	4602      	mov	r2, r0
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	fb03 f502 	mul.w	r5, r3, r2
 800f97e:	68f8      	ldr	r0, [r7, #12]
 800f980:	f000 fbd8 	bl	8010134 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 800f984:	4602      	mov	r2, r0
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	fb02 f303 	mul.w	r3, r2, r3
 800f98c:	442b      	add	r3, r5
 800f98e:	009b      	lsls	r3, r3, #2
 800f990:	4423      	add	r3, r4
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	ee07 3a90 	vmov	s15, r3
  }
 800f998:	eeb0 0a67 	vmov.f32	s0, s15
 800f99c:	3710      	adds	r7, #16
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bdb0      	pop	{r4, r5, r7, pc}

0800f9a2 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f9a2:	b580      	push	{r7, lr}
 800f9a4:	b082      	sub	sp, #8
 800f9a6:	af00      	add	r7, sp, #0
 800f9a8:	6078      	str	r0, [r7, #4]
 800f9aa:	6039      	str	r1, [r7, #0]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6839      	ldr	r1, [r7, #0]
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f000 fbca 	bl	801014a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3708      	adds	r7, #8
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}

0800f9c0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b082      	sub	sp, #8
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
 800f9c8:	6039      	str	r1, [r7, #0]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6839      	ldr	r1, [r7, #0]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f000 fbd1 	bl	8010176 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3708      	adds	r7, #8
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}

0800f9de <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f9de:	b480      	push	{r7}
 800f9e0:	b083      	sub	sp, #12
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	6078      	str	r0, [r7, #4]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr

0800f9f4 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b084      	sub	sp, #16
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	68ba      	ldr	r2, [r7, #8]
 800fa04:	6879      	ldr	r1, [r7, #4]
 800fa06:	4618      	mov	r0, r3
 800fa08:	f000 fbc9 	bl	801019e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>
 800fa0c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fa10:	eeb0 0a67 	vmov.f32	s0, s15
 800fa14:	3710      	adds	r7, #16
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}

0800fa1a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fa1a:	b5b0      	push	{r4, r5, r7, lr}
 800fa1c:	b084      	sub	sp, #16
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	60f8      	str	r0, [r7, #12]
 800fa22:	60b9      	str	r1, [r7, #8]
 800fa24:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681c      	ldr	r4, [r3, #0]
 800fa2a:	68f8      	ldr	r0, [r7, #12]
 800fa2c:	f000 fbd8 	bl	80101e0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>
 800fa30:	4602      	mov	r2, r0
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	fb03 f502 	mul.w	r5, r3, r2
 800fa38:	68f8      	ldr	r0, [r7, #12]
 800fa3a:	f000 fbdc 	bl	80101f6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>
 800fa3e:	4602      	mov	r2, r0
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	fb02 f303 	mul.w	r3, r2, r3
 800fa46:	442b      	add	r3, r5
 800fa48:	009b      	lsls	r3, r3, #2
 800fa4a:	4423      	add	r3, r4
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	ee07 3a90 	vmov	s15, r3
  }
 800fa52:	eeb0 0a67 	vmov.f32	s0, s15
 800fa56:	3710      	adds	r7, #16
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bdb0      	pop	{r4, r5, r7, pc}

0800fa5c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800fa5c:	b480      	push	{r7}
 800fa5e:	b083      	sub	sp, #12
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	4618      	mov	r0, r3
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr

0800fa74 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	4618      	mov	r0, r3
 800fa82:	370c      	adds	r7, #12
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr

0800fa8c <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b088      	sub	sp, #32
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	60f8      	str	r0, [r7, #12]
 800fa94:	60b9      	str	r1, [r7, #8]
 800fa96:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800fa98:	f107 0314 	add.w	r3, r7, #20
 800fa9c:	687a      	ldr	r2, [r7, #4]
 800fa9e:	68b9      	ldr	r1, [r7, #8]
 800faa0:	4618      	mov	r0, r3
 800faa2:	f000 fbb3 	bl	801020c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>
 800faa6:	f107 031c 	add.w	r3, r7, #28
 800faaa:	4618      	mov	r0, r3
 800faac:	f7f7 fc45 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800fab0:	f107 021c 	add.w	r2, r7, #28
 800fab4:	f107 0314 	add.w	r3, r7, #20
 800fab8:	4619      	mov	r1, r3
 800faba:	68f8      	ldr	r0, [r7, #12]
 800fabc:	f000 fbbd 	bl	801023a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800fac0:	bf00      	nop
 800fac2:	3720      	adds	r7, #32
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800fac8:	b580      	push	{r7, lr}
 800faca:	b084      	sub	sp, #16
 800facc:	af00      	add	r7, sp, #0
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	687a      	ldr	r2, [r7, #4]
 800fad8:	68b9      	ldr	r1, [r7, #8]
 800fada:	4618      	mov	r0, r3
 800fadc:	f000 fbbe 	bl	801025c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	4618      	mov	r0, r3
 800fae4:	3710      	adds	r7, #16
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}

0800faea <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800faea:	b480      	push	{r7}
 800faec:	b083      	sub	sp, #12
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
    }
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	4618      	mov	r0, r3
 800faf6:	370c      	adds	r7, #12
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr

0800fb00 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7fc f889 	bl	800bc22 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800fb10:	4603      	mov	r3, r0
    }
 800fb12:	4618      	mov	r0, r3
 800fb14:	3708      	adds	r7, #8
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}

0800fb1a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800fb1a:	b580      	push	{r7, lr}
 800fb1c:	b082      	sub	sp, #8
 800fb1e:	af00      	add	r7, sp, #0
 800fb20:	6078      	str	r0, [r7, #4]
 800fb22:	6039      	str	r1, [r7, #0]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6839      	ldr	r1, [r7, #0]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f000 fbcd 	bl	80102c8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	4618      	mov	r0, r3
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800fb38:	b480      	push	{r7}
 800fb3a:	b083      	sub	sp, #12
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4618      	mov	r0, r3
 800fb44:	370c      	adds	r7, #12
 800fb46:	46bd      	mov	sp, r7
 800fb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4c:	4770      	bx	lr

0800fb4e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
 800fb4e:	b480      	push	{r7}
 800fb50:	b083      	sub	sp, #12
 800fb52:	af00      	add	r7, sp, #0
 800fb54:	6078      	str	r0, [r7, #4]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	4618      	mov	r0, r3
 800fb5a:	370c      	adds	r7, #12
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb62:	4770      	bx	lr

0800fb64 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b084      	sub	sp, #16
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	60f8      	str	r0, [r7, #12]
 800fb6c:	60b9      	str	r1, [r7, #8]
 800fb6e:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800fb70:	68b9      	ldr	r1, [r7, #8]
 800fb72:	68f8      	ldr	r0, [r7, #12]
 800fb74:	f000 fbb7 	bl	80102e6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800fb78:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fb7c:	eeb0 0a67 	vmov.f32	s0, s15
 800fb80:	3710      	adds	r7, #16
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}

0800fb86 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800fb86:	b580      	push	{r7, lr}
 800fb88:	b082      	sub	sp, #8
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800fb8e:	2200      	movs	r2, #0
 800fb90:	2102      	movs	r1, #2
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f7fd f983 	bl	800ce9e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f000 fbc8 	bl	801032e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>
  }
 800fb9e:	bf00      	nop
 800fba0:	3708      	adds	r7, #8
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800fba6:	b580      	push	{r7, lr}
 800fba8:	b082      	sub	sp, #8
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
 800fbae:	6039      	str	r1, [r7, #0]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6839      	ldr	r1, [r7, #0]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f000 fbca 	bl	801034e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3708      	adds	r7, #8
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}

0800fbc4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
 800fbc4:	b480      	push	{r7}
 800fbc6:	b083      	sub	sp, #12
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	4618      	mov	r0, r3
 800fbd0:	370c      	adds	r7, #12
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr

0800fbda <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 800fbda:	b480      	push	{r7}
 800fbdc:	b083      	sub	sp, #12
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	6078      	str	r0, [r7, #4]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	370c      	adds	r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
 800fbf0:	b480      	push	{r7}
 800fbf2:	b083      	sub	sp, #12
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	370c      	adds	r7, #12
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc04:	4770      	bx	lr

0800fc06 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800fc06:	b580      	push	{r7, lr}
 800fc08:	b082      	sub	sp, #8
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7f5 fb61 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3708      	adds	r7, #8
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}

0800fc22 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800fc22:	b580      	push	{r7, lr}
 800fc24:	b082      	sub	sp, #8
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	6078      	str	r0, [r7, #4]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	3304      	adds	r3, #4
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7f7 fa3b 	bl	80070aa <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800fc34:	4603      	mov	r3, r0
 800fc36:	4618      	mov	r0, r3
 800fc38:	3708      	adds	r7, #8
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}
	...

0800fc40 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b086      	sub	sp, #24
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800fc4c:	68b8      	ldr	r0, [r7, #8]
 800fc4e:	f7ff ffda 	bl	800fc06 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>
 800fc52:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800fc54:	68b8      	ldr	r0, [r7, #8]
 800fc56:	f7ff ffe4 	bl	800fc22 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>
 800fc5a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7f5 fbe1 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800fc64:	4602      	mov	r2, r0
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	d107      	bne.n	800fc7c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7f5 fbce 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800fc74:	4602      	mov	r2, r0
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d001      	beq.n	800fc80 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	e000      	b.n	800fc82 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800fc80:	2300      	movs	r3, #0
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d005      	beq.n	800fc92 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	693a      	ldr	r2, [r7, #16]
 800fc8a:	6979      	ldr	r1, [r7, #20]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7f8 fad5 	bl	800823c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7f5 fbc6 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d107      	bne.n	800fcb2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7f5 fbb3 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	693b      	ldr	r3, [r7, #16]
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	d006      	beq.n	800fcc0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800fcb2:	4b05      	ldr	r3, [pc, #20]	; (800fcc8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800fcb4:	4a05      	ldr	r2, [pc, #20]	; (800fccc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800fcb6:	f240 21fd 	movw	r1, #765	; 0x2fd
 800fcba:	4805      	ldr	r0, [pc, #20]	; (800fcd0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800fcbc:	f00e fa6a 	bl	801e194 <__assert_func>
}
 800fcc0:	bf00      	nop
 800fcc2:	3718      	adds	r7, #24
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}
 800fcc8:	08022674 	.word	0x08022674
 800fccc:	08027c34 	.word	0x08027c34
 800fcd0:	08022788 	.word	0x08022788

0800fcd4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800fcd4:	b480      	push	{r7}
 800fcd6:	b085      	sub	sp, #20
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	60f8      	str	r0, [r7, #12]
 800fcdc:	60b9      	str	r1, [r7, #8]
 800fcde:	607a      	str	r2, [r7, #4]
 800fce0:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	68ba      	ldr	r2, [r7, #8]
 800fce6:	601a      	str	r2, [r3, #0]
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	687a      	ldr	r2, [r7, #4]
 800fcec:	605a      	str	r2, [r3, #4]
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	683a      	ldr	r2, [r7, #0]
 800fcf2:	609a      	str	r2, [r3, #8]
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	69ba      	ldr	r2, [r7, #24]
 800fcf8:	60da      	str	r2, [r3, #12]
  }
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3714      	adds	r7, #20
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr

0800fd08 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b082      	sub	sp, #8
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f000 fb53 	bl	80103bc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>
  }
 800fd16:	bf00      	nop
 800fd18:	3708      	adds	r7, #8
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}

0800fd1e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800fd1e:	b580      	push	{r7, lr}
 800fd20:	b084      	sub	sp, #16
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	60f8      	str	r0, [r7, #12]
 800fd26:	60b9      	str	r1, [r7, #8]
 800fd28:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800fd2a:	68b9      	ldr	r1, [r7, #8]
 800fd2c:	68f8      	ldr	r0, [r7, #12]
 800fd2e:	f000 fb54 	bl	80103da <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	68b9      	ldr	r1, [r7, #8]
 800fd36:	68f8      	ldr	r0, [r7, #12]
 800fd38:	f000 fbbe 	bl	80104b8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800fd3c:	bf00      	nop
 800fd3e:	3710      	adds	r7, #16
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b082      	sub	sp, #8
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	6039      	str	r1, [r7, #0]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6839      	ldr	r1, [r7, #0]
 800fd52:	4618      	mov	r0, r3
 800fd54:	f000 fbe8 	bl	8010528 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3708      	adds	r7, #8
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}

0800fd62 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800fd62:	b580      	push	{r7, lr}
 800fd64:	b082      	sub	sp, #8
 800fd66:	af00      	add	r7, sp, #0
 800fd68:	6078      	str	r0, [r7, #4]
 800fd6a:	6039      	str	r1, [r7, #0]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6839      	ldr	r1, [r7, #0]
 800fd70:	4618      	mov	r0, r3
 800fd72:	f000 fbef 	bl	8010554 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>
  }
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3708      	adds	r7, #8
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}

0800fd80 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fd80:	b5b0      	push	{r4, r5, r7, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	60f8      	str	r0, [r7, #12]
 800fd88:	60b9      	str	r1, [r7, #8]
 800fd8a:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	681c      	ldr	r4, [r3, #0]
 800fd90:	68f8      	ldr	r0, [r7, #12]
 800fd92:	f000 fbf3 	bl	801057c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>
 800fd96:	4602      	mov	r2, r0
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	fb03 f502 	mul.w	r5, r3, r2
 800fd9e:	68f8      	ldr	r0, [r7, #12]
 800fda0:	f000 fbf7 	bl	8010592 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>
 800fda4:	4602      	mov	r2, r0
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	fb02 f303 	mul.w	r3, r2, r3
 800fdac:	442b      	add	r3, r5
 800fdae:	009b      	lsls	r3, r3, #2
 800fdb0:	4423      	add	r3, r4
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	ee07 3a90 	vmov	s15, r3
  }
 800fdb8:	eeb0 0a67 	vmov.f32	s0, s15
 800fdbc:	3710      	adds	r7, #16
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bdb0      	pop	{r4, r5, r7, pc}

0800fdc2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800fdc2:	b580      	push	{r7, lr}
 800fdc4:	b082      	sub	sp, #8
 800fdc6:	af00      	add	r7, sp, #0
 800fdc8:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800fdca:	f7f7 f858 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fdce:	4603      	mov	r3, r0
  }
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3708      	adds	r7, #8
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800fde0:	f7f7 f84d 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fde4:	4603      	mov	r3, r0
  }
 800fde6:	4618      	mov	r0, r3
 800fde8:	3708      	adds	r7, #8
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}

0800fdee <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800fdee:	b480      	push	{r7}
 800fdf0:	b083      	sub	sp, #12
 800fdf2:	af00      	add	r7, sp, #0
 800fdf4:	6078      	str	r0, [r7, #4]
 800fdf6:	6039      	str	r1, [r7, #0]
}
 800fdf8:	bf00      	nop
 800fdfa:	370c      	adds	r7, #12
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr

0800fe04 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b08c      	sub	sp, #48	; 0x30
 800fe08:	af02      	add	r7, sp, #8
 800fe0a:	60f8      	str	r0, [r7, #12]
 800fe0c:	60b9      	str	r1, [r7, #8]
 800fe0e:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800fe10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe14:	68b9      	ldr	r1, [r7, #8]
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7fa fd4f 	bl	800a8ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 800fe1c:	687a      	ldr	r2, [r7, #4]
 800fe1e:	68b9      	ldr	r1, [r7, #8]
 800fe20:	68f8      	ldr	r0, [r7, #12]
 800fe22:	f000 fbc1 	bl	80105a8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800fe26:	f107 0320 	add.w	r3, r7, #32
 800fe2a:	68f9      	ldr	r1, [r7, #12]
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7fa fd44 	bl	800a8ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800fe32:	68f8      	ldr	r0, [r7, #12]
 800fe34:	f000 fc04 	bl	8010640 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fe3e:	f107 0120 	add.w	r1, r7, #32
 800fe42:	f107 0010 	add.w	r0, r7, #16
 800fe46:	9300      	str	r3, [sp, #0]
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f000 fc04 	bl	8010656 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800fe4e:	f107 0310 	add.w	r3, r7, #16
 800fe52:	4618      	mov	r0, r3
 800fe54:	f000 fc19 	bl	801068a <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 800fe58:	f107 0320 	add.w	r3, r7, #32
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f7f9 fc13 	bl	8009688 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800fe62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7f9 fc0e 	bl	8009688 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
}
 800fe6c:	bf00      	nop
 800fe6e:	3728      	adds	r7, #40	; 0x28
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	4618      	mov	r0, r3
 800fe82:	370c      	adds	r7, #12
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr

0800fe8c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800fe8c:	b480      	push	{r7}
 800fe8e:	b083      	sub	sp, #12
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	685b      	ldr	r3, [r3, #4]
 800fe98:	4618      	mov	r0, r3
 800fe9a:	370c      	adds	r7, #12
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea2:	4770      	bx	lr

0800fea4 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800fea4:	b580      	push	{r7, lr}
 800fea6:	ed2d 8b02 	vpush	{d8}
 800feaa:	b088      	sub	sp, #32
 800feac:	af00      	add	r7, sp, #0
 800feae:	60f8      	str	r0, [r7, #12]
 800feb0:	60b9      	str	r1, [r7, #8]
 800feb2:	607a      	str	r2, [r7, #4]
  { dst.coeffRef(0,0) -= (lhs.transpose().cwiseProduct(rhs)).sum(); }
 800feb4:	68b8      	ldr	r0, [r7, #8]
 800feb6:	f000 fbf3 	bl	80106a0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 800feba:	4603      	mov	r3, r0
 800febc:	61fb      	str	r3, [r7, #28]
 800febe:	f107 0310 	add.w	r3, r7, #16
 800fec2:	f107 011c 	add.w	r1, r7, #28
 800fec6:	687a      	ldr	r2, [r7, #4]
 800fec8:	4618      	mov	r0, r3
 800feca:	f000 fbfc 	bl	80106c6 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>
 800fece:	f107 0310 	add.w	r3, r7, #16
 800fed2:	4618      	mov	r0, r3
 800fed4:	f000 fc25 	bl	8010722 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>
 800fed8:	eeb0 8a40 	vmov.f32	s16, s0
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	2200      	movs	r2, #0
 800fee0:	2100      	movs	r1, #0
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7f6 ff11 	bl	8006d0a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800fee8:	4603      	mov	r3, r0
 800feea:	edd3 7a00 	vldr	s15, [r3]
 800feee:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800fef2:	edc3 7a00 	vstr	s15, [r3]
 800fef6:	bf00      	nop
 800fef8:	3720      	adds	r7, #32
 800fefa:	46bd      	mov	sp, r7
 800fefc:	ecbd 8b02 	vpop	{d8}
 800ff00:	bd80      	pop	{r7, pc}

0800ff02 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
 800ff02:	b580      	push	{r7, lr}
 800ff04:	b082      	sub	sp, #8
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	f000 fc24 	bl	8010758 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	4618      	mov	r0, r3
 800ff14:	3708      	adds	r7, #8
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}

0800ff1a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>:
class dense_product_base
 800ff1a:	b580      	push	{r7, lr}
 800ff1c:	b082      	sub	sp, #8
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	6078      	str	r0, [r7, #4]
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f7ff ffed 	bl	800ff02 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3708      	adds	r7, #8
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}

0800ff32 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800ff32:	b580      	push	{r7, lr}
 800ff34:	b082      	sub	sp, #8
 800ff36:	af00      	add	r7, sp, #0
 800ff38:	6078      	str	r0, [r7, #4]
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f7ff ffed 	bl	800ff1a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	4618      	mov	r0, r3
 800ff44:	3708      	adds	r7, #8
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
	...

0800ff4c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800ff4c:	b590      	push	{r4, r7, lr}
 800ff4e:	b085      	sub	sp, #20
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	607a      	str	r2, [r7, #4]
 800ff58:	68f8      	ldr	r0, [r7, #12]
 800ff5a:	f7ff ffea 	bl	800ff32 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	68ba      	ldr	r2, [r7, #8]
 800ff62:	601a      	str	r2, [r3, #0]
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	687a      	ldr	r2, [r7, #4]
 800ff68:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7f5 fa4f 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800ff72:	4604      	mov	r4, r0
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7f5 fb71 	bl	800565e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	429c      	cmp	r4, r3
 800ff80:	d005      	beq.n	800ff8e <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 800ff82:	4b06      	ldr	r3, [pc, #24]	; (800ff9c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 800ff84:	4a06      	ldr	r2, [pc, #24]	; (800ffa0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 800ff86:	2160      	movs	r1, #96	; 0x60
 800ff88:	4806      	ldr	r0, [pc, #24]	; (800ffa4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 800ff8a:	f00e f903 	bl	801e194 <__assert_func>
 800ff8e:	bf00      	nop
    }
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	4618      	mov	r0, r3
 800ff94:	3714      	adds	r7, #20
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd90      	pop	{r4, r7, pc}
 800ff9a:	bf00      	nop
 800ff9c:	080202bc 	.word	0x080202bc
 800ffa0:	08027d5c 	.word	0x08027d5c
 800ffa4:	0802060c 	.word	0x0802060c

0800ffa8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b084      	sub	sp, #16
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	60f8      	str	r0, [r7, #12]
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800ffb4:	68b9      	ldr	r1, [r7, #8]
 800ffb6:	68f8      	ldr	r0, [r7, #12]
 800ffb8:	f000 fbd9 	bl	801076e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	68b9      	ldr	r1, [r7, #8]
 800ffc0:	68f8      	ldr	r0, [r7, #12]
 800ffc2:	f000 fc17 	bl	80107f4 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800ffc6:	bf00      	nop
 800ffc8:	3710      	adds	r7, #16
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}

0800ffce <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800ffce:	b480      	push	{r7}
 800ffd0:	b083      	sub	sp, #12
 800ffd2:	af00      	add	r7, sp, #0
 800ffd4:	6078      	str	r0, [r7, #4]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	3330      	adds	r3, #48	; 0x30
 800ffda:	4618      	mov	r0, r3
 800ffdc:	370c      	adds	r7, #12
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr

0800ffe6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800ffe6:	b480      	push	{r7}
 800ffe8:	b083      	sub	sp, #12
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	4618      	mov	r0, r3
 800fff2:	370c      	adds	r7, #12
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800fffc:	b480      	push	{r7}
 800fffe:	b083      	sub	sp, #12
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	3318      	adds	r3, #24
 8010008:	4618      	mov	r0, r3
 801000a:	370c      	adds	r7, #12
 801000c:	46bd      	mov	sp, r7
 801000e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010012:	4770      	bx	lr

08010014 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	6039      	str	r1, [r7, #0]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6839      	ldr	r1, [r7, #0]
 8010022:	4618      	mov	r0, r3
 8010024:	f000 fc1e 	bl	8010864 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	4618      	mov	r0, r3
 801002c:	3708      	adds	r7, #8
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}

08010032 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8010032:	b590      	push	{r4, r7, lr}
 8010034:	b087      	sub	sp, #28
 8010036:	af00      	add	r7, sp, #0
 8010038:	60f8      	str	r0, [r7, #12]
 801003a:	60b9      	str	r1, [r7, #8]
 801003c:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	4618      	mov	r0, r3
 8010042:	f000 fc1e 	bl	8010882 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 8010046:	4604      	mov	r4, r0
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	3304      	adds	r3, #4
 801004c:	687a      	ldr	r2, [r7, #4]
 801004e:	68b9      	ldr	r1, [r7, #8]
 8010050:	4618      	mov	r0, r3
 8010052:	f7ff fccf 	bl	800f9f4 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8010056:	eef0 7a40 	vmov.f32	s15, s0
 801005a:	edc7 7a04 	vstr	s15, [r7, #16]
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	330c      	adds	r3, #12
 8010062:	687a      	ldr	r2, [r7, #4]
 8010064:	68b9      	ldr	r1, [r7, #8]
 8010066:	4618      	mov	r0, r3
 8010068:	f000 fc16 	bl	8010898 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 801006c:	eef0 7a40 	vmov.f32	s15, s0
 8010070:	edc7 7a05 	vstr	s15, [r7, #20]
 8010074:	f107 0214 	add.w	r2, r7, #20
 8010078:	f107 0310 	add.w	r3, r7, #16
 801007c:	4619      	mov	r1, r3
 801007e:	4620      	mov	r0, r4
 8010080:	f7ff fafc 	bl	800f67c <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8010084:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010088:	eeb0 0a67 	vmov.f32	s0, s15
 801008c:	371c      	adds	r7, #28
 801008e:	46bd      	mov	sp, r7
 8010090:	bd90      	pop	{r4, r7, pc}

08010092 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8010092:	b580      	push	{r7, lr}
 8010094:	b082      	sub	sp, #8
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
 801009a:	6039      	str	r1, [r7, #0]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6839      	ldr	r1, [r7, #0]
 80100a0:	4618      	mov	r0, r3
 80100a2:	f000 fc1a 	bl	80108da <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	4618      	mov	r0, r3
 80100aa:	3708      	adds	r7, #8
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}

080100b0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b082      	sub	sp, #8
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	6039      	str	r1, [r7, #0]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6839      	ldr	r1, [r7, #0]
 80100be:	4618      	mov	r0, r3
 80100c0:	f000 fc21 	bl	8010906 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>
  }
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	4618      	mov	r0, r3
 80100c8:	3708      	adds	r7, #8
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}

080100ce <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>:
    T value() { return T(Value); }
 80100ce:	b480      	push	{r7}
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	2300      	movs	r3, #0
 80100d4:	4618      	mov	r0, r3
 80100d6:	46bd      	mov	sp, r7
 80100d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100dc:	4770      	bx	lr

080100de <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80100de:	b5b0      	push	{r4, r5, r7, lr}
 80100e0:	b084      	sub	sp, #16
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	60f8      	str	r0, [r7, #12]
 80100e6:	60b9      	str	r1, [r7, #8]
 80100e8:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(m_startRow.value() + row, m_startCol.value() + col);
 80100ea:	68fc      	ldr	r4, [r7, #12]
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	3310      	adds	r3, #16
 80100f0:	4618      	mov	r0, r3
 80100f2:	f000 fc1c 	bl	801092e <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 80100f6:	4602      	mov	r2, r0
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	18d5      	adds	r5, r2, r3
 80100fc:	f7ff ffe7 	bl	80100ce <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 8010100:	4602      	mov	r2, r0
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	4413      	add	r3, r2
 8010106:	461a      	mov	r2, r3
 8010108:	4629      	mov	r1, r5
 801010a:	4620      	mov	r0, r4
 801010c:	f000 fc1b 	bl	8010946 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>
 8010110:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010114:	eeb0 0a67 	vmov.f32	s0, s15
 8010118:	3710      	adds	r7, #16
 801011a:	46bd      	mov	sp, r7
 801011c:	bdb0      	pop	{r4, r5, r7, pc}

0801011e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 801011e:	b580      	push	{r7, lr}
 8010120:	b082      	sub	sp, #8
 8010122:	af00      	add	r7, sp, #0
 8010124:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8010126:	f7f6 feaa 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801012a:	4603      	mov	r3, r0
  }
 801012c:	4618      	mov	r0, r3
 801012e:	3708      	adds	r7, #8
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8010134:	b580      	push	{r7, lr}
 8010136:	b082      	sub	sp, #8
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 801013c:	f7f6 fe97 	bl	8006e6e <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8010140:	4603      	mov	r3, r0
  }
 8010142:	4618      	mov	r0, r3
 8010144:	3708      	adds	r7, #8
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}

0801014a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 801014a:	b590      	push	{r4, r7, lr}
 801014c:	b083      	sub	sp, #12
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
 8010152:	6039      	str	r1, [r7, #0]
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 fc2d 	bl	80109b4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 801015a:	687c      	ldr	r4, [r7, #4]
 801015c:	6838      	ldr	r0, [r7, #0]
 801015e:	f000 fc1e 	bl	801099e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>
 8010162:	4603      	mov	r3, r0
 8010164:	4619      	mov	r1, r3
 8010166:	4620      	mov	r0, r4
 8010168:	f000 fc2f 	bl	80109ca <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	4618      	mov	r0, r3
 8010170:	370c      	adds	r7, #12
 8010172:	46bd      	mov	sp, r7
 8010174:	bd90      	pop	{r4, r7, pc}

08010176 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
{
  typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;
  typedef typename XprType::Scalar Scalar;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit block_evaluator(const XprType& block)
 8010176:	b580      	push	{r7, lr}
 8010178:	b082      	sub	sp, #8
 801017a:	af00      	add	r7, sp, #0
 801017c:	6078      	str	r0, [r7, #4]
 801017e:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	6839      	ldr	r1, [r7, #0]
 8010184:	4618      	mov	r0, r3
 8010186:	f000 fc2f 	bl	80109e8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>
  {
    // TODO: for the 3.3 release, this should be turned to an internal assertion, but let's keep it as is for the beta lifetime
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	4618      	mov	r0, r3
 801018e:	f000 fc55 	bl	8010a3c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 8010192:	bf00      	nop
  }
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	4618      	mov	r0, r3
 8010198:	3708      	adds	r7, #8
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}

0801019e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801019e:	b5b0      	push	{r4, r5, r7, lr}
 80101a0:	b084      	sub	sp, #16
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	60f8      	str	r0, [r7, #12]
 80101a6:	60b9      	str	r1, [r7, #8]
 80101a8:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681c      	ldr	r4, [r3, #0]
 80101ae:	68f8      	ldr	r0, [r7, #12]
 80101b0:	f000 fc50 	bl	8010a54 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>
 80101b4:	4602      	mov	r2, r0
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	fb03 f502 	mul.w	r5, r3, r2
 80101bc:	68f8      	ldr	r0, [r7, #12]
 80101be:	f000 fc54 	bl	8010a6a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>
 80101c2:	4602      	mov	r2, r0
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	fb02 f303 	mul.w	r3, r2, r3
 80101ca:	442b      	add	r3, r5
 80101cc:	009b      	lsls	r3, r3, #2
 80101ce:	4423      	add	r3, r4
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	ee07 3a90 	vmov	s15, r3
  }
 80101d6:	eeb0 0a67 	vmov.f32	s0, s15
 80101da:	3710      	adds	r7, #16
 80101dc:	46bd      	mov	sp, r7
 80101de:	bdb0      	pop	{r4, r5, r7, pc}

080101e0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80101e8:	f7f6 fe41 	bl	8006e6e <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80101ec:	4603      	mov	r3, r0
  }
 80101ee:	4618      	mov	r0, r3
 80101f0:	3708      	adds	r7, #8
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80101f6:	b580      	push	{r7, lr}
 80101f8:	b082      	sub	sp, #8
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80101fe:	f7f6 fe3e 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8010202:	4603      	mov	r3, r0
  }
 8010204:	4618      	mov	r0, r3
 8010206:	3708      	adds	r7, #8
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}

0801020c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 801020c:	b590      	push	{r4, r7, lr}
 801020e:	b085      	sub	sp, #20
 8010210:	af00      	add	r7, sp, #0
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8010218:	68b8      	ldr	r0, [r7, #8]
 801021a:	f7f5 fc68 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 801021e:	4604      	mov	r4, r0
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f7f5 fc64 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8010226:	4603      	mov	r3, r0
 8010228:	461a      	mov	r2, r3
 801022a:	4621      	mov	r1, r4
 801022c:	68f8      	ldr	r0, [r7, #12]
 801022e:	f000 fc4b 	bl	8010ac8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>
}
 8010232:	68f8      	ldr	r0, [r7, #12]
 8010234:	3714      	adds	r7, #20
 8010236:	46bd      	mov	sp, r7
 8010238:	bd90      	pop	{r4, r7, pc}

0801023a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 801023a:	b580      	push	{r7, lr}
 801023c:	b086      	sub	sp, #24
 801023e:	af00      	add	r7, sp, #0
 8010240:	60f8      	str	r0, [r7, #12]
 8010242:	60b9      	str	r1, [r7, #8]
 8010244:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 801024a:	687a      	ldr	r2, [r7, #4]
 801024c:	68b9      	ldr	r1, [r7, #8]
 801024e:	6978      	ldr	r0, [r7, #20]
 8010250:	f000 fc68 	bl	8010b24 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 8010254:	bf00      	nop
 8010256:	3718      	adds	r7, #24
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 801025c:	b5b0      	push	{r4, r5, r7, lr}
 801025e:	b084      	sub	sp, #16
 8010260:	af00      	add	r7, sp, #0
 8010262:	60f8      	str	r0, [r7, #12]
 8010264:	60b9      	str	r1, [r7, #8]
 8010266:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8010268:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 801026a:	68b8      	ldr	r0, [r7, #8]
 801026c:	f000 fc6d 	bl	8010b4a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>
 8010270:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8010272:	68b8      	ldr	r0, [r7, #8]
 8010274:	f000 fc7d 	bl	8010b72 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 8010278:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	fb02 f303 	mul.w	r3, r2, r3
 8010280:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8010282:	441d      	add	r5, r3
 8010284:	68b8      	ldr	r0, [r7, #8]
 8010286:	f7f5 fd76 	bl	8005d76 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 801028a:	4602      	mov	r2, r0
 801028c:	2301      	movs	r3, #1
 801028e:	4629      	mov	r1, r5
 8010290:	4620      	mov	r0, r4
 8010292:	f000 fca3 	bl	8010bdc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	3308      	adds	r3, #8
 801029a:	68ba      	ldr	r2, [r7, #8]
 801029c:	6812      	ldr	r2, [r2, #0]
 801029e:	601a      	str	r2, [r3, #0]
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	330c      	adds	r3, #12
 80102a4:	2100      	movs	r1, #0
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7fd fe30 	bl	800df0c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	3310      	adds	r3, #16
 80102b0:	6879      	ldr	r1, [r7, #4]
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7fd fe2a 	bl	800df0c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 80102b8:	68f8      	ldr	r0, [r7, #12]
 80102ba:	f000 fccd 	bl	8010c58 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>
    }
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	4618      	mov	r0, r3
 80102c2:	3710      	adds	r7, #16
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bdb0      	pop	{r4, r5, r7, pc}

080102c8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b082      	sub	sp, #8
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
 80102d0:	6039      	str	r1, [r7, #0]
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6839      	ldr	r1, [r7, #0]
 80102d6:	4618      	mov	r0, r3
 80102d8:	f000 fcce 	bl	8010c78 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	4618      	mov	r0, r3
 80102e0:	3708      	adds	r7, #8
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}

080102e6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80102e6:	b580      	push	{r7, lr}
 80102e8:	b084      	sub	sp, #16
 80102ea:	af00      	add	r7, sp, #0
 80102ec:	6078      	str	r0, [r7, #4]
 80102ee:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80102f0:	6839      	ldr	r1, [r7, #0]
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f000 fcd2 	bl	8010c9c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 80102f8:	eef0 7a40 	vmov.f32	s15, s0
 80102fc:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8010300:	6839      	ldr	r1, [r7, #0]
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f000 fcdb 	bl	8010cbe <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 8010308:	eef0 7a40 	vmov.f32	s15, s0
 801030c:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8010310:	f107 020c 	add.w	r2, r7, #12
 8010314:	f107 0308 	add.w	r3, r7, #8
 8010318:	4619      	mov	r1, r3
 801031a:	6838      	ldr	r0, [r7, #0]
 801031c:	f7f9 f96d 	bl	80095fa <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8010320:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010324:	eeb0 0a67 	vmov.f32	s0, s15
 8010328:	3710      	adds	r7, #16
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801032e:	b580      	push	{r7, lr}
 8010330:	b082      	sub	sp, #8
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8010336:	2201      	movs	r2, #1
 8010338:	2102      	movs	r1, #2
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f7fc fdaf 	bl	800ce9e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	f000 fce0 	bl	8010d06 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>
  }
 8010346:	bf00      	nop
 8010348:	3708      	adds	r7, #8
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}

0801034e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 801034e:	b580      	push	{r7, lr}
 8010350:	b082      	sub	sp, #8
 8010352:	af00      	add	r7, sp, #0
 8010354:	6078      	str	r0, [r7, #4]
 8010356:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8010358:	6878      	ldr	r0, [r7, #4]
 801035a:	f000 fcfc 	bl	8010d56 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 801035e:	6838      	ldr	r0, [r7, #0]
 8010360:	f000 fce1 	bl	8010d26 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 8010364:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 801036a:	6838      	ldr	r0, [r7, #0]
 801036c:	f000 fce7 	bl	8010d3e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>
 8010370:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	3304      	adds	r3, #4
 8010376:	6812      	ldr	r2, [r2, #0]
 8010378:	601a      	str	r2, [r3, #0]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8010384:	4619      	mov	r1, r3
 8010386:	4610      	mov	r0, r2
 8010388:	f7f7 fc3e 	bl	8007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 8010396:	4619      	mov	r1, r3
 8010398:	4610      	mov	r0, r2
 801039a:	f000 fce7 	bl	8010d6c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 801039e:	6838      	ldr	r0, [r7, #0]
 80103a0:	f000 fcc1 	bl	8010d26 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 80103a4:	4603      	mov	r3, r0
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7f4 ff8c 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80103ac:	4602      	mov	r2, r0
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	611a      	str	r2, [r3, #16]
  }
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	4618      	mov	r0, r3
 80103b6:	3708      	adds	r7, #8
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80103c4:	2100      	movs	r1, #0
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f000 fcdf 	bl	8010d8a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f000 fcff 	bl	8010dd0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>
  }
 80103d2:	bf00      	nop
 80103d4:	3708      	adds	r7, #8
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80103da:	b480      	push	{r7}
 80103dc:	b083      	sub	sp, #12
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
 80103e2:	6039      	str	r1, [r7, #0]
}
 80103e4:	bf00      	nop
 80103e6:	370c      	adds	r7, #12
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr

080103f0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b082      	sub	sp, #8
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7f9 f944 	bl	8009688 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	4618      	mov	r0, r3
 8010404:	3708      	adds	r7, #8
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}

0801040a <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 801040a:	b580      	push	{r7, lr}
 801040c:	b082      	sub	sp, #8
 801040e:	af00      	add	r7, sp, #0
 8010410:	6078      	str	r0, [r7, #4]
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	f7ff ffeb 	bl	80103f0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	4618      	mov	r0, r3
 801041e:	3708      	adds	r7, #8
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	4618      	mov	r0, r3
 8010430:	f7ff ffeb 	bl	801040a <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	4618      	mov	r0, r3
 8010438:	3708      	adds	r7, #8
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}

0801043e <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 801043e:	b580      	push	{r7, lr}
 8010440:	b082      	sub	sp, #8
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	4618      	mov	r0, r3
 801044a:	f7f9 f91d 	bl	8009688 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	4618      	mov	r0, r3
 8010452:	3708      	adds	r7, #8
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}

08010458 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 8010458:	b580      	push	{r7, lr}
 801045a:	b082      	sub	sp, #8
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	330c      	adds	r3, #12
 8010464:	4618      	mov	r0, r3
 8010466:	f7ff ffea 	bl	801043e <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	3304      	adds	r3, #4
 801046e:	4618      	mov	r0, r3
 8010470:	f7ff ffd8 	bl	8010424 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	4618      	mov	r0, r3
 8010478:	3708      	adds	r7, #8
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}

0801047e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 801047e:	b580      	push	{r7, lr}
 8010480:	b082      	sub	sp, #8
 8010482:	af00      	add	r7, sp, #0
 8010484:	6078      	str	r0, [r7, #4]
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	4618      	mov	r0, r3
 801048a:	f7ff ffe5 	bl	8010458 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f000 fcbc 	bl	8010e0c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	4618      	mov	r0, r3
 8010498:	3708      	adds	r7, #8
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}

0801049e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 801049e:	b580      	push	{r7, lr}
 80104a0:	b082      	sub	sp, #8
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7ff ffe8 	bl	801047e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	4618      	mov	r0, r3
 80104b2:	3708      	adds	r7, #8
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}

080104b8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b090      	sub	sp, #64	; 0x40
 80104bc:	af02      	add	r7, sp, #8
 80104be:	60f8      	str	r0, [r7, #12]
 80104c0:	60b9      	str	r1, [r7, #8]
 80104c2:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80104c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80104c8:	68b9      	ldr	r1, [r7, #8]
 80104ca:	4618      	mov	r0, r3
 80104cc:	f000 fc8f 	bl	8010dee <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
  resize_if_allowed(dst, src, func);
 80104d0:	687a      	ldr	r2, [r7, #4]
 80104d2:	68b9      	ldr	r1, [r7, #8]
 80104d4:	68f8      	ldr	r0, [r7, #12]
 80104d6:	f000 fca5 	bl	8010e24 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80104da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80104de:	68f9      	ldr	r1, [r7, #12]
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7fa f9ea 	bl	800a8ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80104e6:	68f8      	ldr	r0, [r7, #12]
 80104e8:	f000 f8aa 	bl	8010640 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 80104ec:	4603      	mov	r3, r0
 80104ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80104f2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80104f6:	f107 0014 	add.w	r0, r7, #20
 80104fa:	9300      	str	r3, [sp, #0]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	f000 fcdb 	bl	8010eb8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8010502:	f107 0314 	add.w	r3, r7, #20
 8010506:	4618      	mov	r0, r3
 8010508:	f000 fcf0 	bl	8010eec <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>
  DstEvaluatorType dstEvaluator(dst);
 801050c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010510:	4618      	mov	r0, r3
 8010512:	f7f9 f8b9 	bl	8009688 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8010516:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801051a:	4618      	mov	r0, r3
 801051c:	f7ff ffbf 	bl	801049e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
}
 8010520:	bf00      	nop
 8010522:	3738      	adds	r7, #56	; 0x38
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}

08010528 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8010528:	b590      	push	{r4, r7, lr}
 801052a:	b083      	sub	sp, #12
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f000 fcf0 	bl	8010f18 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 8010538:	687c      	ldr	r4, [r7, #4]
 801053a:	6838      	ldr	r0, [r7, #0]
 801053c:	f000 fce1 	bl	8010f02 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>
 8010540:	4603      	mov	r3, r0
 8010542:	4619      	mov	r1, r3
 8010544:	4620      	mov	r0, r4
 8010546:	f000 fcf2 	bl	8010f2e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	4618      	mov	r0, r3
 801054e:	370c      	adds	r7, #12
 8010550:	46bd      	mov	sp, r7
 8010552:	bd90      	pop	{r4, r7, pc}

08010554 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8010554:	b580      	push	{r7, lr}
 8010556:	b082      	sub	sp, #8
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6839      	ldr	r1, [r7, #0]
 8010562:	4618      	mov	r0, r3
 8010564:	f000 fcf2 	bl	8010f4c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	4618      	mov	r0, r3
 801056c:	f000 fd18 	bl	8010fa0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 8010570:	bf00      	nop
  }
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	4618      	mov	r0, r3
 8010576:	3708      	adds	r7, #8
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}

0801057c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8010584:	f7f6 fc73 	bl	8006e6e <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8010588:	4603      	mov	r3, r0
  }
 801058a:	4618      	mov	r0, r3
 801058c:	3708      	adds	r7, #8
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}

08010592 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8010592:	b580      	push	{r7, lr}
 8010594:	b082      	sub	sp, #8
 8010596:	af00      	add	r7, sp, #0
 8010598:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 801059a:	f7f6 fc70 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801059e:	4603      	mov	r3, r0
  }
 80105a0:	4618      	mov	r0, r3
 80105a2:	3708      	adds	r7, #8
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}

080105a8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b086      	sub	sp, #24
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	60f8      	str	r0, [r7, #12]
 80105b0:	60b9      	str	r1, [r7, #8]
 80105b2:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7f5 fe7f 	bl	80062ba <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80105bc:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	4618      	mov	r0, r3
 80105c2:	f7f5 fe85 	bl	80062d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80105c6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7f5 fe75 	bl	80062ba <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80105d0:	4602      	mov	r2, r0
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	4293      	cmp	r3, r2
 80105d6:	d107      	bne.n	80105e8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	4618      	mov	r0, r3
 80105dc:	f7f5 fe78 	bl	80062d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80105e0:	4602      	mov	r2, r0
 80105e2:	693b      	ldr	r3, [r7, #16]
 80105e4:	4293      	cmp	r3, r2
 80105e6:	d001      	beq.n	80105ec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 80105e8:	2301      	movs	r3, #1
 80105ea:	e000      	b.n	80105ee <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 80105ec:	2300      	movs	r3, #0
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d005      	beq.n	80105fe <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	693a      	ldr	r2, [r7, #16]
 80105f6:	6979      	ldr	r1, [r7, #20]
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7fd f9af 	bl	800d95c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	4618      	mov	r0, r3
 8010602:	f7f5 fe5a 	bl	80062ba <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010606:	4602      	mov	r2, r0
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	4293      	cmp	r3, r2
 801060c:	d107      	bne.n	801061e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	4618      	mov	r0, r3
 8010612:	f7f5 fe5d 	bl	80062d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010616:	4602      	mov	r2, r0
 8010618:	693b      	ldr	r3, [r7, #16]
 801061a:	4293      	cmp	r3, r2
 801061c:	d006      	beq.n	801062c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 801061e:	4b05      	ldr	r3, [pc, #20]	; (8010634 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8010620:	4a05      	ldr	r2, [pc, #20]	; (8010638 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8010622:	f240 21fd 	movw	r1, #765	; 0x2fd
 8010626:	4805      	ldr	r0, [pc, #20]	; (801063c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8010628:	f00d fdb4 	bl	801e194 <__assert_func>
}
 801062c:	bf00      	nop
 801062e:	3718      	adds	r7, #24
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}
 8010634:	08022674 	.word	0x08022674
 8010638:	08027e84 	.word	0x08027e84
 801063c:	08022788 	.word	0x08022788

08010640 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8010640:	b480      	push	{r7}
 8010642:	b083      	sub	sp, #12
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	4618      	mov	r0, r3
 801064c:	370c      	adds	r7, #12
 801064e:	46bd      	mov	sp, r7
 8010650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010654:	4770      	bx	lr

08010656 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8010656:	b480      	push	{r7}
 8010658:	b085      	sub	sp, #20
 801065a:	af00      	add	r7, sp, #0
 801065c:	60f8      	str	r0, [r7, #12]
 801065e:	60b9      	str	r1, [r7, #8]
 8010660:	607a      	str	r2, [r7, #4]
 8010662:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	68ba      	ldr	r2, [r7, #8]
 8010668:	601a      	str	r2, [r3, #0]
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	605a      	str	r2, [r3, #4]
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	683a      	ldr	r2, [r7, #0]
 8010674:	609a      	str	r2, [r3, #8]
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	69ba      	ldr	r2, [r7, #24]
 801067a:	60da      	str	r2, [r3, #12]
  }
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	4618      	mov	r0, r3
 8010680:	3714      	adds	r7, #20
 8010682:	46bd      	mov	sp, r7
 8010684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010688:	4770      	bx	lr

0801068a <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801068a:	b580      	push	{r7, lr}
 801068c:	b082      	sub	sp, #8
 801068e:	af00      	add	r7, sp, #0
 8010690:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f000 fc90 	bl	8010fb8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>
  }
 8010698:	bf00      	nop
 801069a:	3708      	adds	r7, #8
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b084      	sub	sp, #16
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
  return ConstTransposeReturnType(derived());
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f7f5 fcf1 	bl	8006090 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80106ae:	4602      	mov	r2, r0
 80106b0:	f107 030c 	add.w	r3, r7, #12
 80106b4:	4611      	mov	r1, r2
 80106b6:	4618      	mov	r0, r3
 80106b8:	f000 fca5 	bl	8011006 <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>
 80106bc:	68fb      	ldr	r3, [r7, #12]
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3710      	adds	r7, #16
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}

080106c6 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 80106c6:	b5b0      	push	{r4, r5, r7, lr}
 80106c8:	b086      	sub	sp, #24
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	60f8      	str	r0, [r7, #12]
 80106ce:	60b9      	str	r1, [r7, #8]
 80106d0:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 80106d2:	68b8      	ldr	r0, [r7, #8]
 80106d4:	f000 fca7 	bl	8011026 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 80106d8:	4604      	mov	r4, r0
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f7f5 f83f 	bl	800575e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80106e0:	4605      	mov	r5, r0
 80106e2:	f107 0314 	add.w	r3, r7, #20
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7f5 f898 	bl	800581c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 80106ec:	f107 0314 	add.w	r3, r7, #20
 80106f0:	462a      	mov	r2, r5
 80106f2:	4621      	mov	r1, r4
 80106f4:	68f8      	ldr	r0, [r7, #12]
 80106f6:	f000 fcd5 	bl	80110a4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>
}
 80106fa:	68f8      	ldr	r0, [r7, #12]
 80106fc:	3718      	adds	r7, #24
 80106fe:	46bd      	mov	sp, r7
 8010700:	bdb0      	pop	{r4, r5, r7, pc}

08010702 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8010702:	b580      	push	{r7, lr}
 8010704:	b082      	sub	sp, #8
 8010706:	af00      	add	r7, sp, #0
 8010708:	6078      	str	r0, [r7, #4]
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f000 fd18 	bl	8011140 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010710:	4603      	mov	r3, r0
 8010712:	4618      	mov	r0, r3
 8010714:	f000 fd1f 	bl	8011156 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8010718:	4603      	mov	r3, r0
 801071a:	4618      	mov	r0, r3
 801071c:	3708      	adds	r7, #8
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}

08010722 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8010722:	b590      	push	{r4, r7, lr}
 8010724:	b085      	sub	sp, #20
 8010726:	af00      	add	r7, sp, #0
 8010728:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	f000 fd08 	bl	8011140 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010730:	4604      	mov	r4, r0
 8010732:	f107 030c 	add.w	r3, r7, #12
 8010736:	4618      	mov	r0, r3
 8010738:	f7f5 fb67 	bl	8005e0a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 801073c:	f107 030c 	add.w	r3, r7, #12
 8010740:	4619      	mov	r1, r3
 8010742:	4620      	mov	r0, r4
 8010744:	f000 fd88 	bl	8011258 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8010748:	eef0 7a40 	vmov.f32	s15, s0
 801074c:	bf00      	nop
}
 801074e:	eeb0 0a67 	vmov.f32	s0, s15
 8010752:	3714      	adds	r7, #20
 8010754:	46bd      	mov	sp, r7
 8010756:	bd90      	pop	{r4, r7, pc}

08010758 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8010758:	b480      	push	{r7}
 801075a:	b083      	sub	sp, #12
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
    }
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	4618      	mov	r0, r3
 8010764:	370c      	adds	r7, #12
 8010766:	46bd      	mov	sp, r7
 8010768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076c:	4770      	bx	lr

0801076e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 801076e:	b580      	push	{r7, lr}
 8010770:	b082      	sub	sp, #8
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
 8010776:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	4618      	mov	r0, r3
 801077c:	f7f4 fdad 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010780:	4603      	mov	r3, r0
 8010782:	2b01      	cmp	r3, #1
 8010784:	dd08      	ble.n	8010798 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	4618      	mov	r0, r3
 801078a:	f7f4 fd9b 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 801078e:	4603      	mov	r3, r0
 8010790:	2b01      	cmp	r3, #1
 8010792:	dd01      	ble.n	8010798 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 8010794:	2301      	movs	r3, #1
 8010796:	e000      	b.n	801079a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2c>
 8010798:	2300      	movs	r3, #0
 801079a:	2b00      	cmp	r3, #0
 801079c:	d003      	beq.n	80107a6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 801079e:	6839      	ldr	r1, [r7, #0]
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f000 fd9f 	bl	80112e4 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>
}
 80107a6:	bf00      	nop
 80107a8:	3708      	adds	r7, #8
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}

080107ae <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80107ae:	b580      	push	{r7, lr}
 80107b0:	b082      	sub	sp, #8
 80107b2:	af00      	add	r7, sp, #0
 80107b4:	6078      	str	r0, [r7, #4]
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	330c      	adds	r3, #12
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7fe fe48 	bl	800f450 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	3308      	adds	r3, #8
 80107c4:	4618      	mov	r0, r3
 80107c6:	f7f4 ff9a 	bl	80056fe <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f000 fda4 	bl	8011318 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	4618      	mov	r0, r3
 80107d4:	3708      	adds	r7, #8
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd80      	pop	{r7, pc}

080107da <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80107da:	b580      	push	{r7, lr}
 80107dc:	b082      	sub	sp, #8
 80107de:	af00      	add	r7, sp, #0
 80107e0:	6078      	str	r0, [r7, #4]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7ff ffe2 	bl	80107ae <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	4618      	mov	r0, r3
 80107ee:	3708      	adds	r7, #8
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}

080107f4 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b090      	sub	sp, #64	; 0x40
 80107f8:	af02      	add	r7, sp, #8
 80107fa:	60f8      	str	r0, [r7, #12]
 80107fc:	60b9      	str	r1, [r7, #8]
 80107fe:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8010800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010804:	68b9      	ldr	r1, [r7, #8]
 8010806:	4618      	mov	r0, r3
 8010808:	f000 fd77 	bl	80112fa <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 801080c:	687a      	ldr	r2, [r7, #4]
 801080e:	68b9      	ldr	r1, [r7, #8]
 8010810:	68f8      	ldr	r0, [r7, #12]
 8010812:	f000 fda9 	bl	8011368 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 8010816:	f107 0320 	add.w	r3, r7, #32
 801081a:	68f9      	ldr	r1, [r7, #12]
 801081c:	4618      	mov	r0, r3
 801081e:	f7f7 f9f3 	bl	8007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8010822:	68f8      	ldr	r0, [r7, #12]
 8010824:	f7f7 fa58 	bl	8007cd8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8010828:	4603      	mov	r3, r0
 801082a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801082e:	f107 0120 	add.w	r1, r7, #32
 8010832:	f107 0010 	add.w	r0, r7, #16
 8010836:	9300      	str	r3, [sp, #0]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f000 fdc3 	bl	80113c4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 801083e:	f107 0310 	add.w	r3, r7, #16
 8010842:	4618      	mov	r0, r3
 8010844:	f000 fdd8 	bl	80113f8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>
  DstEvaluatorType dstEvaluator(dst);
 8010848:	f107 0320 	add.w	r3, r7, #32
 801084c:	4618      	mov	r0, r3
 801084e:	f7f6 ffcc 	bl	80077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8010852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010856:	4618      	mov	r0, r3
 8010858:	f7ff ffbf 	bl	80107da <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
}
 801085c:	bf00      	nop
 801085e:	3738      	adds	r7, #56	; 0x38
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8010864:	b580      	push	{r7, lr}
 8010866:	b082      	sub	sp, #8
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	6039      	str	r1, [r7, #0]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6839      	ldr	r1, [r7, #0]
 8010872:	4618      	mov	r0, r3
 8010874:	f000 fdcb 	bl	801140e <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	4618      	mov	r0, r3
 801087c:	3708      	adds	r7, #8
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}

08010882 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8010882:	b480      	push	{r7}
 8010884:	b083      	sub	sp, #12
 8010886:	af00      	add	r7, sp, #0
 8010888:	6078      	str	r0, [r7, #4]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	4618      	mov	r0, r3
 801088e:	370c      	adds	r7, #12
 8010890:	46bd      	mov	sp, r7
 8010892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010896:	4770      	bx	lr

08010898 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8010898:	b5b0      	push	{r4, r5, r7, lr}
 801089a:	b084      	sub	sp, #16
 801089c:	af00      	add	r7, sp, #0
 801089e:	60f8      	str	r0, [r7, #12]
 80108a0:	60b9      	str	r1, [r7, #8]
 80108a2:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	681c      	ldr	r4, [r3, #0]
 80108a8:	68f8      	ldr	r0, [r7, #12]
 80108aa:	f000 fdc4 	bl	8011436 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 80108ae:	4602      	mov	r2, r0
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	fb03 f502 	mul.w	r5, r3, r2
 80108b6:	68f8      	ldr	r0, [r7, #12]
 80108b8:	f000 fdc8 	bl	801144c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 80108bc:	4602      	mov	r2, r0
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	fb02 f303 	mul.w	r3, r2, r3
 80108c4:	442b      	add	r3, r5
 80108c6:	009b      	lsls	r3, r3, #2
 80108c8:	4423      	add	r3, r4
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	ee07 3a90 	vmov	s15, r3
  }
 80108d0:	eeb0 0a67 	vmov.f32	s0, s15
 80108d4:	3710      	adds	r7, #16
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bdb0      	pop	{r4, r5, r7, pc}

080108da <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80108da:	b590      	push	{r4, r7, lr}
 80108dc:	b083      	sub	sp, #12
 80108de:	af00      	add	r7, sp, #0
 80108e0:	6078      	str	r0, [r7, #4]
 80108e2:	6039      	str	r1, [r7, #0]
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f000 fdc7 	bl	8011478 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 80108ea:	687c      	ldr	r4, [r7, #4]
 80108ec:	6838      	ldr	r0, [r7, #0]
 80108ee:	f000 fdb8 	bl	8011462 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>
 80108f2:	4603      	mov	r3, r0
 80108f4:	4619      	mov	r1, r3
 80108f6:	4620      	mov	r0, r4
 80108f8:	f000 fdc9 	bl	801148e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	4618      	mov	r0, r3
 8010900:	370c      	adds	r7, #12
 8010902:	46bd      	mov	sp, r7
 8010904:	bd90      	pop	{r4, r7, pc}

08010906 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8010906:	b580      	push	{r7, lr}
 8010908:	b082      	sub	sp, #8
 801090a:	af00      	add	r7, sp, #0
 801090c:	6078      	str	r0, [r7, #4]
 801090e:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6839      	ldr	r1, [r7, #0]
 8010914:	4618      	mov	r0, r3
 8010916:	f000 fdc9 	bl	80114ac <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	4618      	mov	r0, r3
 801091e:	f000 fdef 	bl	8011500 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 8010922:	bf00      	nop
  }
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	4618      	mov	r0, r3
 8010928:	3708      	adds	r7, #8
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}

0801092e <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T value() const { return m_value; }
 801092e:	b480      	push	{r7}
 8010930:	b083      	sub	sp, #12
 8010932:	af00      	add	r7, sp, #0
 8010934:	6078      	str	r0, [r7, #4]
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	4618      	mov	r0, r3
 801093c:	370c      	adds	r7, #12
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr

08010946 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8010946:	b5b0      	push	{r4, r5, r7, lr}
 8010948:	b086      	sub	sp, #24
 801094a:	af00      	add	r7, sp, #0
 801094c:	60f8      	str	r0, [r7, #12]
 801094e:	60b9      	str	r1, [r7, #8]
 8010950:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	4618      	mov	r0, r3
 8010956:	f000 fddf 	bl	8011518 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 801095a:	4604      	mov	r4, r0
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	3304      	adds	r3, #4
 8010960:	687a      	ldr	r2, [r7, #4]
 8010962:	68b9      	ldr	r1, [r7, #8]
 8010964:	4618      	mov	r0, r3
 8010966:	f000 fde2 	bl	801152e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 801096a:	4605      	mov	r5, r0
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	3308      	adds	r3, #8
 8010970:	687a      	ldr	r2, [r7, #4]
 8010972:	68b9      	ldr	r1, [r7, #8]
 8010974:	4618      	mov	r0, r3
 8010976:	f000 fdf2 	bl	801155e <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>
 801097a:	eef0 7a40 	vmov.f32	s15, s0
 801097e:	edc7 7a05 	vstr	s15, [r7, #20]
 8010982:	f107 0314 	add.w	r3, r7, #20
 8010986:	461a      	mov	r2, r3
 8010988:	4629      	mov	r1, r5
 801098a:	4620      	mov	r0, r4
 801098c:	f7fe fe76 	bl	800f67c <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8010990:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010994:	eeb0 0a67 	vmov.f32	s0, s15
 8010998:	3718      	adds	r7, #24
 801099a:	46bd      	mov	sp, r7
 801099c:	bdb0      	pop	{r4, r5, r7, pc}

0801099e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 801099e:	b480      	push	{r7}
 80109a0:	b083      	sub	sp, #12
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	6078      	str	r0, [r7, #4]
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	4618      	mov	r0, r3
 80109aa:	370c      	adds	r7, #12
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr

080109b4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80109b4:	b480      	push	{r7}
 80109b6:	b083      	sub	sp, #12
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	4618      	mov	r0, r3
 80109c0:	370c      	adds	r7, #12
 80109c2:	46bd      	mov	sp, r7
 80109c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c8:	4770      	bx	lr

080109ca <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80109ca:	b580      	push	{r7, lr}
 80109cc:	b082      	sub	sp, #8
 80109ce:	af00      	add	r7, sp, #0
 80109d0:	6078      	str	r0, [r7, #4]
 80109d2:	6039      	str	r1, [r7, #0]
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6839      	ldr	r1, [r7, #0]
 80109d8:	4618      	mov	r0, r3
 80109da:	f000 fdd4 	bl	8011586 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	4618      	mov	r0, r3
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 80109e8:	b590      	push	{r4, r7, lr}
 80109ea:	b083      	sub	sp, #12
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 fdf2 	bl	80115dc <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	4618      	mov	r0, r3
 80109fc:	f000 f81e 	bl	8010a3c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 8010a00:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	601a      	str	r2, [r3, #0]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	1d1c      	adds	r4, r3, #4
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f000 fdc9 	bl	80115a4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 8010a12:	4603      	mov	r3, r0
 8010a14:	4619      	mov	r1, r3
 8010a16:	4620      	mov	r0, r4
 8010a18:	f7f6 fa04 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	1d5c      	adds	r4, r3, #5
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	4618      	mov	r0, r3
 8010a24:	f000 fdcc 	bl	80115c0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	4619      	mov	r1, r3
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	f7f6 f9df 	bl	8006df0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	4618      	mov	r0, r3
 8010a36:	370c      	adds	r7, #12
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd90      	pop	{r4, r7, pc}

08010a3c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8010a3c:	b480      	push	{r7}
 8010a3e:	b083      	sub	sp, #12
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	4618      	mov	r0, r3
 8010a4a:	370c      	adds	r7, #12
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr

08010a54 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8010a5c:	f7f6 fa07 	bl	8006e6e <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8010a60:	4603      	mov	r3, r0
  }
 8010a62:	4618      	mov	r0, r3
 8010a64:	3708      	adds	r7, #8
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}

08010a6a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8010a6a:	b580      	push	{r7, lr}
 8010a6c:	b082      	sub	sp, #8
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8010a72:	f7f6 fa04 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8010a76:	4603      	mov	r3, r0
  }
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3708      	adds	r7, #8
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f000 fdb2 	bl	80115f2 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	4618      	mov	r0, r3
 8010a92:	3708      	adds	r7, #8
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>:
class dense_product_base
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b082      	sub	sp, #8
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f7ff ffed 	bl	8010a80 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3708      	adds	r7, #8
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7ff ffed 	bl	8010a98 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3708      	adds	r7, #8
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8010ac8:	b590      	push	{r4, r7, lr}
 8010aca:	b085      	sub	sp, #20
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	60b9      	str	r1, [r7, #8]
 8010ad2:	607a      	str	r2, [r7, #4]
 8010ad4:	68f8      	ldr	r0, [r7, #12]
 8010ad6:	f7ff ffeb 	bl	8010ab0 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	68ba      	ldr	r2, [r7, #8]
 8010ade:	601a      	str	r2, [r3, #0]
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	687a      	ldr	r2, [r7, #4]
 8010ae4:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8010ae6:	68bb      	ldr	r3, [r7, #8]
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7f4 fbeb 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010aee:	4604      	mov	r4, r0
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7f4 fbf1 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010af8:	4603      	mov	r3, r0
 8010afa:	429c      	cmp	r4, r3
 8010afc:	d005      	beq.n	8010b0a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x42>
 8010afe:	4b06      	ldr	r3, [pc, #24]	; (8010b18 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x50>)
 8010b00:	4a06      	ldr	r2, [pc, #24]	; (8010b1c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x54>)
 8010b02:	2160      	movs	r1, #96	; 0x60
 8010b04:	4806      	ldr	r0, [pc, #24]	; (8010b20 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x58>)
 8010b06:	f00d fb45 	bl	801e194 <__assert_func>
 8010b0a:	bf00      	nop
    }
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3714      	adds	r7, #20
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd90      	pop	{r4, r7, pc}
 8010b16:	bf00      	nop
 8010b18:	080202bc 	.word	0x080202bc
 8010b1c:	08027f68 	.word	0x08027f68
 8010b20:	0802060c 	.word	0x0802060c

08010b24 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b084      	sub	sp, #16
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	60b9      	str	r1, [r7, #8]
 8010b2e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8010b30:	68b9      	ldr	r1, [r7, #8]
 8010b32:	68f8      	ldr	r0, [r7, #12]
 8010b34:	f000 fd68 	bl	8011608 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8010b38:	687a      	ldr	r2, [r7, #4]
 8010b3a:	68b9      	ldr	r1, [r7, #8]
 8010b3c:	68f8      	ldr	r0, [r7, #12]
 8010b3e:	f000 fda6 	bl	801168e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8010b42:	bf00      	nop
 8010b44:	3710      	adds	r7, #16
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}

08010b4a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 8010b4a:	b580      	push	{r7, lr}
 8010b4c:	b082      	sub	sp, #8
 8010b4e:	af00      	add	r7, sp, #0
 8010b50:	6078      	str	r0, [r7, #4]
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f7f5 f8d2 	bl	8005cfc <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7fd fadc 	bl	800e118 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 8010b60:	4603      	mov	r3, r0
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7f7 fcf2 	bl	800854c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	3708      	adds	r7, #8
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}

08010b72 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 8010b72:	b580      	push	{r7, lr}
 8010b74:	b082      	sub	sp, #8
 8010b76:	af00      	add	r7, sp, #0
 8010b78:	6078      	str	r0, [r7, #4]
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f7f5 f8be 	bl	8005cfc <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8010b80:	4603      	mov	r3, r0
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7fd fac8 	bl	800e118 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7fd f968 	bl	800de60 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8010b90:	4603      	mov	r3, r0
 8010b92:	4618      	mov	r0, r3
 8010b94:	3708      	adds	r7, #8
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}

08010b9a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 8010b9a:	b580      	push	{r7, lr}
 8010b9c:	b082      	sub	sp, #8
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	6078      	str	r0, [r7, #4]
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f7f5 f8aa 	bl	8005cfc <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	4618      	mov	r0, r3
 8010bac:	f7fd fab4 	bl	800e118 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f7f7 ff04 	bl	80089c0 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3708      	adds	r7, #8
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}

08010bc2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
 8010bc2:	b580      	push	{r7, lr}
 8010bc4:	b082      	sub	sp, #8
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f000 fd97 	bl	80116fe <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	3708      	adds	r7, #8
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}
	...

08010bdc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b084      	sub	sp, #16
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	60f8      	str	r0, [r7, #12]
 8010be4:	60b9      	str	r1, [r7, #8]
 8010be6:	607a      	str	r2, [r7, #4]
 8010be8:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8010bea:	68f8      	ldr	r0, [r7, #12]
 8010bec:	f7ff ffe9 	bl	8010bc2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	68ba      	ldr	r2, [r7, #8]
 8010bf4:	601a      	str	r2, [r3, #0]
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	3304      	adds	r3, #4
 8010bfa:	6879      	ldr	r1, [r7, #4]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7f6 f8f7 	bl	8006df0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	3305      	adds	r3, #5
 8010c06:	6839      	ldr	r1, [r7, #0]
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7f6 f90b 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d011      	beq.n	8010c38 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	db08      	blt.n	8010c2c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2b03      	cmp	r3, #3
 8010c1e:	d105      	bne.n	8010c2c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	db02      	blt.n	8010c2c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	2b01      	cmp	r3, #1
 8010c2a:	d005      	beq.n	8010c38 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8010c2c:	4b07      	ldr	r3, [pc, #28]	; (8010c4c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 8010c2e:	4a08      	ldr	r2, [pc, #32]	; (8010c50 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 8010c30:	21b0      	movs	r1, #176	; 0xb0
 8010c32:	4808      	ldr	r0, [pc, #32]	; (8010c54 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 8010c34:	f00d faae 	bl	801e194 <__assert_func>
      checkSanity<Derived>();
 8010c38:	2100      	movs	r1, #0
 8010c3a:	68f8      	ldr	r0, [r7, #12]
 8010c3c:	f000 fd6a 	bl	8011714 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	4618      	mov	r0, r3
 8010c44:	3710      	adds	r7, #16
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	bf00      	nop
 8010c4c:	08026720 	.word	0x08026720
 8010c50:	08028090 	.word	0x08028090
 8010c54:	080268d0 	.word	0x080268d0

08010c58 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>:
    void init()
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7ff ff84 	bl	8010b72 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 8010c6a:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	615a      	str	r2, [r3, #20]
    }
 8010c70:	bf00      	nop
 8010c72:	3708      	adds	r7, #8
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}

08010c78 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	6039      	str	r1, [r7, #0]
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f000 fd51 	bl	801172a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6839      	ldr	r1, [r7, #0]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f000 fd57 	bl	8011740 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	4618      	mov	r0, r3
 8010c96:	3708      	adds	r7, #8
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b082      	sub	sp, #8
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	2100      	movs	r1, #0
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f000 fd70 	bl	8011790 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8010cb0:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8010cb8:	3708      	adds	r7, #8
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}

08010cbe <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8010cbe:	b580      	push	{r7, lr}
 8010cc0:	b084      	sub	sp, #16
 8010cc2:	af00      	add	r7, sp, #0
 8010cc4:	6078      	str	r0, [r7, #4]
 8010cc6:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8010cc8:	6839      	ldr	r1, [r7, #0]
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f000 fd73 	bl	80117b6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 8010cd0:	eef0 7a40 	vmov.f32	s15, s0
 8010cd4:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8010cd8:	6839      	ldr	r1, [r7, #0]
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f000 fd7c 	bl	80117d8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 8010ce0:	eef0 7a40 	vmov.f32	s15, s0
 8010ce4:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8010ce8:	f107 020c 	add.w	r2, r7, #12
 8010cec:	f107 0308 	add.w	r3, r7, #8
 8010cf0:	4619      	mov	r1, r3
 8010cf2:	6838      	ldr	r0, [r7, #0]
 8010cf4:	f7f8 fc81 	bl	80095fa <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8010cf8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8010d00:	3710      	adds	r7, #16
 8010d02:	46bd      	mov	sp, r7
 8010d04:	bd80      	pop	{r7, pc}

08010d06 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010d06:	b580      	push	{r7, lr}
 8010d08:	b082      	sub	sp, #8
 8010d0a:	af00      	add	r7, sp, #0
 8010d0c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8010d0e:	2202      	movs	r2, #2
 8010d10:	2102      	movs	r1, #2
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f7fc f8c3 	bl	800ce9e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f000 fd6e 	bl	80117fa <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>
  }
 8010d1e:	bf00      	nop
 8010d20:	3708      	adds	r7, #8
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}

08010d26 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8010d26:	b480      	push	{r7}
 8010d28:	b083      	sub	sp, #12
 8010d2a:	af00      	add	r7, sp, #0
 8010d2c:	6078      	str	r0, [r7, #4]
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	4618      	mov	r0, r3
 8010d34:	370c      	adds	r7, #12
 8010d36:	46bd      	mov	sp, r7
 8010d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3c:	4770      	bx	lr

08010d3e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8010d3e:	b480      	push	{r7}
 8010d40:	b083      	sub	sp, #12
 8010d42:	af00      	add	r7, sp, #0
 8010d44:	6078      	str	r0, [r7, #4]
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	3304      	adds	r3, #4
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	370c      	adds	r7, #12
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr

08010d56 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010d56:	b480      	push	{r7}
 8010d58:	b083      	sub	sp, #12
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	6078      	str	r0, [r7, #4]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	4618      	mov	r0, r3
 8010d62:	370c      	adds	r7, #12
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr

08010d6c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	6039      	str	r1, [r7, #0]
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6839      	ldr	r1, [r7, #0]
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f000 fd47 	bl	801180e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	4618      	mov	r0, r3
 8010d84:	3708      	adds	r7, #8
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}

08010d8a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8010d8a:	b5b0      	push	{r4, r5, r7, lr}
 8010d8c:	b084      	sub	sp, #16
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	6078      	str	r0, [r7, #4]
 8010d92:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	689c      	ldr	r4, [r3, #8]
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	6839      	ldr	r1, [r7, #0]
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7f7 fe81 	bl	8008aa6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8010da4:	4605      	mov	r5, r0
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	6839      	ldr	r1, [r7, #0]
 8010dac:	4618      	mov	r0, r3
 8010dae:	f000 fd44 	bl	801183a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>
 8010db2:	eef0 7a40 	vmov.f32	s15, s0
 8010db6:	edc7 7a03 	vstr	s15, [r7, #12]
 8010dba:	f107 030c 	add.w	r3, r7, #12
 8010dbe:	461a      	mov	r2, r3
 8010dc0:	4629      	mov	r1, r5
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	f7f7 fe28 	bl	8008a18 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8010dc8:	bf00      	nop
 8010dca:	3710      	adds	r7, #16
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bdb0      	pop	{r4, r5, r7, pc}

08010dd0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b082      	sub	sp, #8
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010dd8:	2101      	movs	r1, #1
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f7ff ffd5 	bl	8010d8a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f000 fd63 	bl	80118ac <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>
  }
 8010de6:	bf00      	nop
 8010de8:	3708      	adds	r7, #8
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}

08010dee <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8010dee:	b580      	push	{r7, lr}
 8010df0:	b082      	sub	sp, #8
 8010df2:	af00      	add	r7, sp, #0
 8010df4:	6078      	str	r0, [r7, #4]
 8010df6:	6039      	str	r1, [r7, #0]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6839      	ldr	r1, [r7, #0]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f000 fd64 	bl	80118ca <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	4618      	mov	r0, r3
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8010e0c:	b480      	push	{r7}
 8010e0e:	b083      	sub	sp, #12
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	4618      	mov	r0, r3
 8010e18:	370c      	adds	r7, #12
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e20:	4770      	bx	lr
	...

08010e24 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b086      	sub	sp, #24
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	60f8      	str	r0, [r7, #12]
 8010e2c:	60b9      	str	r1, [r7, #8]
 8010e2e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8010e30:	68b8      	ldr	r0, [r7, #8]
 8010e32:	f7f5 faa4 	bl	800637e <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010e36:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8010e38:	68b8      	ldr	r0, [r7, #8]
 8010e3a:	f7f5 faad 	bl	8006398 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010e3e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7f5 fa39 	bl	80062ba <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010e48:	4602      	mov	r2, r0
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	4293      	cmp	r3, r2
 8010e4e:	d107      	bne.n	8010e60 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7f5 fa3c 	bl	80062d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	693b      	ldr	r3, [r7, #16]
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	d001      	beq.n	8010e64 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8010e60:	2301      	movs	r3, #1
 8010e62:	e000      	b.n	8010e66 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8010e64:	2300      	movs	r3, #0
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d005      	beq.n	8010e76 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	693a      	ldr	r2, [r7, #16]
 8010e6e:	6979      	ldr	r1, [r7, #20]
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7fc fd73 	bl	800d95c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7f5 fa1e 	bl	80062ba <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010e7e:	4602      	mov	r2, r0
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	4293      	cmp	r3, r2
 8010e84:	d107      	bne.n	8010e96 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7f5 fa21 	bl	80062d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010e8e:	4602      	mov	r2, r0
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	4293      	cmp	r3, r2
 8010e94:	d006      	beq.n	8010ea4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8010e96:	4b05      	ldr	r3, [pc, #20]	; (8010eac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8010e98:	4a05      	ldr	r2, [pc, #20]	; (8010eb0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8010e9a:	f240 21fd 	movw	r1, #765	; 0x2fd
 8010e9e:	4805      	ldr	r0, [pc, #20]	; (8010eb4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8010ea0:	f00d f978 	bl	801e194 <__assert_func>
}
 8010ea4:	bf00      	nop
 8010ea6:	3718      	adds	r7, #24
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}
 8010eac:	08022674 	.word	0x08022674
 8010eb0:	080281a8 	.word	0x080281a8
 8010eb4:	08022788 	.word	0x08022788

08010eb8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8010eb8:	b480      	push	{r7}
 8010eba:	b085      	sub	sp, #20
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	60f8      	str	r0, [r7, #12]
 8010ec0:	60b9      	str	r1, [r7, #8]
 8010ec2:	607a      	str	r2, [r7, #4]
 8010ec4:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	68ba      	ldr	r2, [r7, #8]
 8010eca:	601a      	str	r2, [r3, #0]
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	687a      	ldr	r2, [r7, #4]
 8010ed0:	605a      	str	r2, [r3, #4]
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	683a      	ldr	r2, [r7, #0]
 8010ed6:	609a      	str	r2, [r3, #8]
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	69ba      	ldr	r2, [r7, #24]
 8010edc:	60da      	str	r2, [r3, #12]
  }
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3714      	adds	r7, #20
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr

08010eec <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f000 fcfa 	bl	80118ee <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>
  }
 8010efa:	bf00      	nop
 8010efc:	3708      	adds	r7, #8
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}

08010f02 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8010f02:	b480      	push	{r7}
 8010f04:	b083      	sub	sp, #12
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	6078      	str	r0, [r7, #4]
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	370c      	adds	r7, #12
 8010f10:	46bd      	mov	sp, r7
 8010f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f16:	4770      	bx	lr

08010f18 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010f18:	b480      	push	{r7}
 8010f1a:	b083      	sub	sp, #12
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	4618      	mov	r0, r3
 8010f24:	370c      	adds	r7, #12
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr

08010f2e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8010f2e:	b580      	push	{r7, lr}
 8010f30:	b082      	sub	sp, #8
 8010f32:	af00      	add	r7, sp, #0
 8010f34:	6078      	str	r0, [r7, #4]
 8010f36:	6039      	str	r1, [r7, #0]
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	6839      	ldr	r1, [r7, #0]
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f000 fce5 	bl	801190c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	4618      	mov	r0, r3
 8010f46:	3708      	adds	r7, #8
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}

08010f4c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8010f4c:	b590      	push	{r4, r7, lr}
 8010f4e:	b083      	sub	sp, #12
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f000 fd03 	bl	8011962 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f000 f81e 	bl	8010fa0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 8010f64:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	601a      	str	r2, [r3, #0]
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	1d1c      	adds	r4, r3, #4
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	4618      	mov	r0, r3
 8010f72:	f000 fcda 	bl	801192a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>
 8010f76:	4603      	mov	r3, r0
 8010f78:	4619      	mov	r1, r3
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	f7f5 ff52 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	1d5c      	adds	r4, r3, #5
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	4618      	mov	r0, r3
 8010f88:	f000 fcdd 	bl	8011946 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	4619      	mov	r1, r3
 8010f90:	4620      	mov	r0, r4
 8010f92:	f7f5 ff47 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	4618      	mov	r0, r3
 8010f9a:	370c      	adds	r7, #12
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd90      	pop	{r4, r7, pc}

08010fa0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8010fa0:	b480      	push	{r7}
 8010fa2:	b083      	sub	sp, #12
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	4618      	mov	r0, r3
 8010fae:	370c      	adds	r7, #12
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr

08010fb8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b082      	sub	sp, #8
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010fc0:	2100      	movs	r1, #0
 8010fc2:	6878      	ldr	r0, [r7, #4]
 8010fc4:	f000 fcd8 	bl	8011978 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f000 fcf3 	bl	80119b4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>
  }
 8010fce:	bf00      	nop
 8010fd0:	3708      	adds	r7, #8
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}

08010fd6 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 8010fd6:	b580      	push	{r7, lr}
 8010fd8:	b082      	sub	sp, #8
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	6078      	str	r0, [r7, #4]
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f000 fcf2 	bl	80119c8 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3708      	adds	r7, #8
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}

08010fee <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8010fee:	b580      	push	{r7, lr}
 8010ff0:	b082      	sub	sp, #8
 8010ff2:	af00      	add	r7, sp, #0
 8010ff4:	6078      	str	r0, [r7, #4]
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f7ff ffed 	bl	8010fd6 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	4618      	mov	r0, r3
 8011000:	3708      	adds	r7, #8
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}

08011006 <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8011006:	b580      	push	{r7, lr}
 8011008:	b082      	sub	sp, #8
 801100a:	af00      	add	r7, sp, #0
 801100c:	6078      	str	r0, [r7, #4]
 801100e:	6039      	str	r1, [r7, #0]
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f7ff ffec 	bl	8010fee <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	683a      	ldr	r2, [r7, #0]
 801101a:	601a      	str	r2, [r3, #0]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	4618      	mov	r0, r3
 8011020:	3708      	adds	r7, #8
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}

08011026 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8011026:	b480      	push	{r7}
 8011028:	b083      	sub	sp, #12
 801102a:	af00      	add	r7, sp, #0
 801102c:	6078      	str	r0, [r7, #4]
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	4618      	mov	r0, r3
 8011032:	370c      	adds	r7, #12
 8011034:	46bd      	mov	sp, r7
 8011036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103a:	4770      	bx	lr

0801103c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 801103c:	b580      	push	{r7, lr}
 801103e:	b082      	sub	sp, #8
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f000 fcca 	bl	80119de <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	4618      	mov	r0, r3
 801104e:	3708      	adds	r7, #8
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8011054:	b580      	push	{r7, lr}
 8011056:	b082      	sub	sp, #8
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f7ff ffed 	bl	801103c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	4618      	mov	r0, r3
 8011066:	3708      	adds	r7, #8
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}

0801106c <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	4618      	mov	r0, r3
 801107a:	f7f4 fae5 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801107e:	4603      	mov	r3, r0
 8011080:	4618      	mov	r0, r3
 8011082:	3708      	adds	r7, #8
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}

08011088 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8011088:	b580      	push	{r7, lr}
 801108a:	b082      	sub	sp, #8
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	4618      	mov	r0, r3
 8011096:	f7f4 fae2 	bl	800565e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 801109a:	4603      	mov	r3, r0
 801109c:	4618      	mov	r0, r3
 801109e:	3708      	adds	r7, #8
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}

080110a4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80110a4:	b590      	push	{r4, r7, lr}
 80110a6:	b085      	sub	sp, #20
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	60f8      	str	r0, [r7, #12]
 80110ac:	60b9      	str	r1, [r7, #8]
 80110ae:	607a      	str	r2, [r7, #4]
 80110b0:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80110b2:	68f8      	ldr	r0, [r7, #12]
 80110b4:	f7ff ffce 	bl	8011054 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	68ba      	ldr	r2, [r7, #8]
 80110bc:	6812      	ldr	r2, [r2, #0]
 80110be:	601a      	str	r2, [r3, #0]
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	687a      	ldr	r2, [r7, #4]
 80110c4:	605a      	str	r2, [r3, #4]
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	3308      	adds	r3, #8
 80110ca:	6839      	ldr	r1, [r7, #0]
 80110cc:	4618      	mov	r0, r3
 80110ce:	f7f4 fc2f 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80110d2:	68b8      	ldr	r0, [r7, #8]
 80110d4:	f7ff ffca 	bl	801106c <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80110d8:	4604      	mov	r4, r0
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	4618      	mov	r0, r3
 80110de:	f7f4 f9a2 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80110e2:	4603      	mov	r3, r0
 80110e4:	429c      	cmp	r4, r3
 80110e6:	d10a      	bne.n	80110fe <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x5a>
 80110e8:	68b8      	ldr	r0, [r7, #8]
 80110ea:	f7ff ffcd 	bl	8011088 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80110ee:	4604      	mov	r4, r0
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7f4 f98c 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80110f8:	4603      	mov	r3, r0
 80110fa:	429c      	cmp	r4, r3
 80110fc:	d005      	beq.n	801110a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x66>
 80110fe:	4b05      	ldr	r3, [pc, #20]	; (8011114 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x70>)
 8011100:	4a05      	ldr	r2, [pc, #20]	; (8011118 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x74>)
 8011102:	2174      	movs	r1, #116	; 0x74
 8011104:	4805      	ldr	r0, [pc, #20]	; (801111c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x78>)
 8011106:	f00d f845 	bl	801e194 <__assert_func>
    }
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	4618      	mov	r0, r3
 801110e:	3714      	adds	r7, #20
 8011110:	46bd      	mov	sp, r7
 8011112:	bd90      	pop	{r4, r7, pc}
 8011114:	0801fffc 	.word	0x0801fffc
 8011118:	0802836c 	.word	0x0802836c
 801111c:	08020260 	.word	0x08020260

08011120 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8011120:	b580      	push	{r7, lr}
 8011122:	b082      	sub	sp, #8
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f000 f809 	bl	8011140 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 801112e:	4603      	mov	r3, r0
 8011130:	4618      	mov	r0, r3
 8011132:	f000 fc5f 	bl	80119f4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8011136:	4603      	mov	r3, r0
 8011138:	4618      	mov	r0, r3
 801113a:	3708      	adds	r7, #8
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}

08011140 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8011140:	b480      	push	{r7}
 8011142:	b083      	sub	sp, #12
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	4618      	mov	r0, r3
 801114c:	370c      	adds	r7, #12
 801114e:	46bd      	mov	sp, r7
 8011150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011154:	4770      	bx	lr

08011156 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8011156:	b580      	push	{r7, lr}
 8011158:	b082      	sub	sp, #8
 801115a:	af00      	add	r7, sp, #0
 801115c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	4618      	mov	r0, r3
 8011162:	f7ff ff83 	bl	801106c <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8011166:	4603      	mov	r3, r0
    }
 8011168:	4618      	mov	r0, r3
 801116a:	3708      	adds	r7, #8
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}

08011170 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<const T>
 8011170:	b580      	push	{r7, lr}
 8011172:	b082      	sub	sp, #8
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	4618      	mov	r0, r3
 801117c:	f7fe f968 	bl	800f450 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	4618      	mov	r0, r3
 8011184:	3708      	adds	r7, #8
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}

0801118a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 801118a:	b580      	push	{r7, lr}
 801118c:	b082      	sub	sp, #8
 801118e:	af00      	add	r7, sp, #0
 8011190:	6078      	str	r0, [r7, #4]
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	4618      	mov	r0, r3
 8011196:	f7ff ffeb 	bl	8011170 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f000 fc51 	bl	8011a42 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	4618      	mov	r0, r3
 80111a4:	3708      	adds	r7, #8
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}

080111aa <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 80111aa:	b580      	push	{r7, lr}
 80111ac:	b082      	sub	sp, #8
 80111ae:	af00      	add	r7, sp, #0
 80111b0:	6078      	str	r0, [r7, #4]
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7ff ffe8 	bl	801118a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	4618      	mov	r0, r3
 80111be:	3708      	adds	r7, #8
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}

080111c4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<const T>
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b082      	sub	sp, #8
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	4618      	mov	r0, r3
 80111d0:	f7ff ffeb 	bl	80111aa <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	4618      	mov	r0, r3
 80111d8:	3708      	adds	r7, #8
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}

080111de <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 80111de:	b580      	push	{r7, lr}
 80111e0:	b082      	sub	sp, #8
 80111e2:	af00      	add	r7, sp, #0
 80111e4:	6078      	str	r0, [r7, #4]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	3308      	adds	r3, #8
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7f8 f824 	bl	8009238 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	3304      	adds	r3, #4
 80111f4:	4618      	mov	r0, r3
 80111f6:	f7ff ffe5 	bl	80111c4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	4618      	mov	r0, r3
 80111fe:	3708      	adds	r7, #8
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}

08011204 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	4618      	mov	r0, r3
 8011210:	f7ff ffe5 	bl	80111de <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f000 fc09 	bl	8011a2c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	4618      	mov	r0, r3
 801121e:	3708      	adds	r7, #8
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	4618      	mov	r0, r3
 8011230:	f7ff ffe8 	bl	8011204 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	4618      	mov	r0, r3
 8011238:	3708      	adds	r7, #8
 801123a:	46bd      	mov	sp, r7
 801123c:	bd80      	pop	{r7, pc}

0801123e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 801123e:	b580      	push	{r7, lr}
 8011240:	b082      	sub	sp, #8
 8011242:	af00      	add	r7, sp, #0
 8011244:	6078      	str	r0, [r7, #4]
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	4618      	mov	r0, r3
 801124a:	f7ff ffeb 	bl	8011224 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	4618      	mov	r0, r3
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8011258:	b580      	push	{r7, lr}
 801125a:	ed2d 8b02 	vpush	{d8}
 801125e:	b086      	sub	sp, #24
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
 8011264:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f7ff fa4b 	bl	8010702 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>
 801126c:	4603      	mov	r3, r0
 801126e:	2b00      	cmp	r3, #0
 8011270:	dd05      	ble.n	801127e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f7ff ff54 	bl	8011120 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>
 8011278:	4603      	mov	r3, r0
 801127a:	2b00      	cmp	r3, #0
 801127c:	dc06      	bgt.n	801128c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 801127e:	4b16      	ldr	r3, [pc, #88]	; (80112d8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8011280:	4a16      	ldr	r2, [pc, #88]	; (80112dc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8011282:	f240 119b 	movw	r1, #411	; 0x19b
 8011286:	4816      	ldr	r0, [pc, #88]	; (80112e0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8011288:	f00c ff84 	bl	801e194 <__assert_func>
 801128c:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f7ff ff56 	bl	8011140 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8011294:	4602      	mov	r2, r0
 8011296:	f107 030c 	add.w	r3, r7, #12
 801129a:	4611      	mov	r1, r2
 801129c:	4618      	mov	r0, r3
 801129e:	f000 fbb6 	bl	8011a0e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f7ff ff4c 	bl	8011140 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 80112a8:	4602      	mov	r2, r0
 80112aa:	f107 030c 	add.w	r3, r7, #12
 80112ae:	6839      	ldr	r1, [r7, #0]
 80112b0:	4618      	mov	r0, r3
 80112b2:	f000 fbd1 	bl	8011a58 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>
 80112b6:	eeb0 8a40 	vmov.f32	s16, s0
 80112ba:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80112bc:	f107 030c 	add.w	r3, r7, #12
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7ff ffbc 	bl	801123e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80112c6:	eef0 7a48 	vmov.f32	s15, s16
}
 80112ca:	eeb0 0a67 	vmov.f32	s0, s15
 80112ce:	3718      	adds	r7, #24
 80112d0:	46bd      	mov	sp, r7
 80112d2:	ecbd 8b02 	vpop	{d8}
 80112d6:	bd80      	pop	{r7, pc}
 80112d8:	0802507c 	.word	0x0802507c
 80112dc:	08028534 	.word	0x08028534
 80112e0:	08025288 	.word	0x08025288

080112e4 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>:
    static void run(const Derived&, const OtherDerived&)
 80112e4:	b480      	push	{r7}
 80112e6:	b083      	sub	sp, #12
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
 80112ec:	6039      	str	r1, [r7, #0]
    }
 80112ee:	bf00      	nop
 80112f0:	370c      	adds	r7, #12
 80112f2:	46bd      	mov	sp, r7
 80112f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f8:	4770      	bx	lr

080112fa <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80112fa:	b580      	push	{r7, lr}
 80112fc:	b082      	sub	sp, #8
 80112fe:	af00      	add	r7, sp, #0
 8011300:	6078      	str	r0, [r7, #4]
 8011302:	6039      	str	r1, [r7, #0]
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6839      	ldr	r1, [r7, #0]
 8011308:	4618      	mov	r0, r3
 801130a:	f000 fbb6 	bl	8011a7a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	4618      	mov	r0, r3
 8011312:	3708      	adds	r7, #8
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}

08011318 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8011318:	b480      	push	{r7}
 801131a:	b083      	sub	sp, #12
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	4618      	mov	r0, r3
 8011324:	370c      	adds	r7, #12
 8011326:	46bd      	mov	sp, r7
 8011328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132c:	4770      	bx	lr

0801132e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 801132e:	b580      	push	{r7, lr}
 8011330:	b082      	sub	sp, #8
 8011332:	af00      	add	r7, sp, #0
 8011334:	6078      	str	r0, [r7, #4]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	4618      	mov	r0, r3
 801133c:	f7f4 f873 	bl	8005426 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8011340:	4603      	mov	r3, r0
 8011342:	4618      	mov	r0, r3
 8011344:	3708      	adds	r7, #8
 8011346:	46bd      	mov	sp, r7
 8011348:	bd80      	pop	{r7, pc}

0801134a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 801134a:	b580      	push	{r7, lr}
 801134c:	b082      	sub	sp, #8
 801134e:	af00      	add	r7, sp, #0
 8011350:	6078      	str	r0, [r7, #4]
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	4618      	mov	r0, r3
 8011358:	f7f4 f976 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801135c:	4603      	mov	r3, r0
 801135e:	4618      	mov	r0, r3
 8011360:	3708      	adds	r7, #8
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}
	...

08011368 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 8011368:	b590      	push	{r4, r7, lr}
 801136a:	b085      	sub	sp, #20
 801136c:	af00      	add	r7, sp, #0
 801136e:	60f8      	str	r0, [r7, #12]
 8011370:	60b9      	str	r1, [r7, #8]
 8011372:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	4618      	mov	r0, r3
 8011378:	f7f3 ffaf 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 801137c:	4604      	mov	r4, r0
 801137e:	68b8      	ldr	r0, [r7, #8]
 8011380:	f7ff ffd5 	bl	801132e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>
 8011384:	4603      	mov	r3, r0
 8011386:	429c      	cmp	r4, r3
 8011388:	d10a      	bne.n	80113a0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	4618      	mov	r0, r3
 801138e:	f7f3 ff99 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011392:	4604      	mov	r4, r0
 8011394:	68b8      	ldr	r0, [r7, #8]
 8011396:	f7ff ffd8 	bl	801134a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>
 801139a:	4603      	mov	r3, r0
 801139c:	429c      	cmp	r4, r3
 801139e:	d006      	beq.n	80113ae <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 80113a0:	4b05      	ldr	r3, [pc, #20]	; (80113b8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 80113a2:	4a06      	ldr	r2, [pc, #24]	; (80113bc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 80113a4:	f240 21f2 	movw	r1, #754	; 0x2f2
 80113a8:	4805      	ldr	r0, [pc, #20]	; (80113c0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 80113aa:	f00c fef3 	bl	801e194 <__assert_func>
}
 80113ae:	bf00      	nop
 80113b0:	3714      	adds	r7, #20
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd90      	pop	{r4, r7, pc}
 80113b6:	bf00      	nop
 80113b8:	08022d90 	.word	0x08022d90
 80113bc:	080286b8 	.word	0x080286b8
 80113c0:	08022788 	.word	0x08022788

080113c4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80113c4:	b480      	push	{r7}
 80113c6:	b085      	sub	sp, #20
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	60f8      	str	r0, [r7, #12]
 80113cc:	60b9      	str	r1, [r7, #8]
 80113ce:	607a      	str	r2, [r7, #4]
 80113d0:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	68ba      	ldr	r2, [r7, #8]
 80113d6:	601a      	str	r2, [r3, #0]
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	687a      	ldr	r2, [r7, #4]
 80113dc:	605a      	str	r2, [r3, #4]
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	683a      	ldr	r2, [r7, #0]
 80113e2:	609a      	str	r2, [r3, #8]
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	69ba      	ldr	r2, [r7, #24]
 80113e8:	60da      	str	r2, [r3, #12]
  }
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	4618      	mov	r0, r3
 80113ee:	3714      	adds	r7, #20
 80113f0:	46bd      	mov	sp, r7
 80113f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f6:	4770      	bx	lr

080113f8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f000 fb6f 	bl	8011ae4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>
  }
 8011406:	bf00      	nop
 8011408:	3708      	adds	r7, #8
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}

0801140e <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 801140e:	b580      	push	{r7, lr}
 8011410:	b082      	sub	sp, #8
 8011412:	af00      	add	r7, sp, #0
 8011414:	6078      	str	r0, [r7, #4]
 8011416:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	6839      	ldr	r1, [r7, #0]
 801141c:	4618      	mov	r0, r3
 801141e:	f000 fb71 	bl	8011b04 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	4618      	mov	r0, r3
 8011426:	f000 fb97 	bl	8011b58 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 801142a:	bf00      	nop
  }
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	4618      	mov	r0, r3
 8011430:	3708      	adds	r7, #8
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}

08011436 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8011436:	b580      	push	{r7, lr}
 8011438:	b082      	sub	sp, #8
 801143a:	af00      	add	r7, sp, #0
 801143c:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 801143e:	f7f5 fd16 	bl	8006e6e <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8011442:	4603      	mov	r3, r0
  }
 8011444:	4618      	mov	r0, r3
 8011446:	3708      	adds	r7, #8
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}

0801144c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 801144c:	b580      	push	{r7, lr}
 801144e:	b082      	sub	sp, #8
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8011454:	f7f5 fd13 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8011458:	4603      	mov	r3, r0
  }
 801145a:	4618      	mov	r0, r3
 801145c:	3708      	adds	r7, #8
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}

08011462 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8011462:	b480      	push	{r7}
 8011464:	b083      	sub	sp, #12
 8011466:	af00      	add	r7, sp, #0
 8011468:	6078      	str	r0, [r7, #4]
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	4618      	mov	r0, r3
 801146e:	370c      	adds	r7, #12
 8011470:	46bd      	mov	sp, r7
 8011472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011476:	4770      	bx	lr

08011478 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011478:	b480      	push	{r7}
 801147a:	b083      	sub	sp, #12
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	4618      	mov	r0, r3
 8011484:	370c      	adds	r7, #12
 8011486:	46bd      	mov	sp, r7
 8011488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148c:	4770      	bx	lr

0801148e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801148e:	b580      	push	{r7, lr}
 8011490:	b082      	sub	sp, #8
 8011492:	af00      	add	r7, sp, #0
 8011494:	6078      	str	r0, [r7, #4]
 8011496:	6039      	str	r1, [r7, #0]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	6839      	ldr	r1, [r7, #0]
 801149c:	4618      	mov	r0, r3
 801149e:	f000 fb67 	bl	8011b70 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	4618      	mov	r0, r3
 80114a6:	3708      	adds	r7, #8
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}

080114ac <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 80114ac:	b590      	push	{r4, r7, lr}
 80114ae:	b083      	sub	sp, #12
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80114b6:	6878      	ldr	r0, [r7, #4]
 80114b8:	f000 fb85 	bl	8011bc6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	4618      	mov	r0, r3
 80114c0:	f000 f81e 	bl	8011500 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 80114c4:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	601a      	str	r2, [r3, #0]
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	1d1c      	adds	r4, r3, #4
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	4618      	mov	r0, r3
 80114d2:	f000 fb5c 	bl	8011b8e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>
 80114d6:	4603      	mov	r3, r0
 80114d8:	4619      	mov	r1, r3
 80114da:	4620      	mov	r0, r4
 80114dc:	f7f5 fca2 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	1d5c      	adds	r4, r3, #5
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	4618      	mov	r0, r3
 80114e8:	f000 fb5f 	bl	8011baa <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>
 80114ec:	4603      	mov	r3, r0
 80114ee:	4619      	mov	r1, r3
 80114f0:	4620      	mov	r0, r4
 80114f2:	f7f5 fc7d 	bl	8006df0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	4618      	mov	r0, r3
 80114fa:	370c      	adds	r7, #12
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd90      	pop	{r4, r7, pc}

08011500 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>:
 8011500:	b480      	push	{r7}
 8011502:	b083      	sub	sp, #12
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	4618      	mov	r0, r3
 801150e:	370c      	adds	r7, #12
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr

08011518 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8011518:	b480      	push	{r7}
 801151a:	b083      	sub	sp, #12
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	4618      	mov	r0, r3
 8011524:	370c      	adds	r7, #12
 8011526:	46bd      	mov	sp, r7
 8011528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152c:	4770      	bx	lr

0801152e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801152e:	b590      	push	{r4, r7, lr}
 8011530:	b085      	sub	sp, #20
 8011532:	af00      	add	r7, sp, #0
 8011534:	60f8      	str	r0, [r7, #12]
 8011536:	60b9      	str	r1, [r7, #8]
 8011538:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681c      	ldr	r4, [r3, #0]
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	4618      	mov	r0, r3
 8011542:	f7f5 feef 	bl	8007324 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8011546:	4602      	mov	r2, r0
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	fb03 f202 	mul.w	r2, r3, r2
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	4413      	add	r3, r2
 8011552:	009b      	lsls	r3, r3, #2
 8011554:	4423      	add	r3, r4
  }
 8011556:	4618      	mov	r0, r3
 8011558:	3714      	adds	r7, #20
 801155a:	46bd      	mov	sp, r7
 801155c:	bd90      	pop	{r4, r7, pc}

0801155e <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>:
  CoeffReturnType coeff(IndexType row, IndexType col) const
 801155e:	b580      	push	{r7, lr}
 8011560:	b084      	sub	sp, #16
 8011562:	af00      	add	r7, sp, #0
 8011564:	60f8      	str	r0, [r7, #12]
 8011566:	60b9      	str	r1, [r7, #8]
 8011568:	607a      	str	r2, [r7, #4]
    return m_wrapper(m_functor, row, col);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	1d18      	adds	r0, r3, #4
 801156e:	68f9      	ldr	r1, [r7, #12]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	68ba      	ldr	r2, [r7, #8]
 8011574:	f000 fb32 	bl	8011bdc <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>
 8011578:	eef0 7a40 	vmov.f32	s15, s0
  }
 801157c:	eeb0 0a67 	vmov.f32	s0, s15
 8011580:	3710      	adds	r7, #16
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}

08011586 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8011586:	b580      	push	{r7, lr}
 8011588:	b082      	sub	sp, #8
 801158a:	af00      	add	r7, sp, #0
 801158c:	6078      	str	r0, [r7, #4]
 801158e:	6039      	str	r1, [r7, #0]
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6839      	ldr	r1, [r7, #0]
 8011594:	4618      	mov	r0, r3
 8011596:	f000 fb32 	bl	8011bfe <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>
  }
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	4618      	mov	r0, r3
 801159e:	3708      	adds	r7, #8
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}

080115a4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b082      	sub	sp, #8
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	689b      	ldr	r3, [r3, #8]
 80115b0:	4618      	mov	r0, r3
 80115b2:	f7fc fcca 	bl	800df4a <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 80115b6:	4603      	mov	r3, r0
    }
 80115b8:	4618      	mov	r0, r3
 80115ba:	3708      	adds	r7, #8
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}

080115c0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b082      	sub	sp, #8
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	689b      	ldr	r3, [r3, #8]
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7f6 f82d 	bl	800762c <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 80115d2:	4603      	mov	r3, r0
    }
 80115d4:	4618      	mov	r0, r3
 80115d6:	3708      	adds	r7, #8
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}

080115dc <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80115dc:	b480      	push	{r7}
 80115de:	b083      	sub	sp, #12
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	4618      	mov	r0, r3
 80115e8:	370c      	adds	r7, #12
 80115ea:	46bd      	mov	sp, r7
 80115ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f0:	4770      	bx	lr

080115f2 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80115f2:	b480      	push	{r7}
 80115f4:	b083      	sub	sp, #12
 80115f6:	af00      	add	r7, sp, #0
 80115f8:	6078      	str	r0, [r7, #4]
    }
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	4618      	mov	r0, r3
 80115fe:	370c      	adds	r7, #12
 8011600:	46bd      	mov	sp, r7
 8011602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011606:	4770      	bx	lr

08011608 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8011608:	b580      	push	{r7, lr}
 801160a:	b082      	sub	sp, #8
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
 8011610:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	4618      	mov	r0, r3
 8011616:	f7f3 fe60 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 801161a:	4603      	mov	r3, r0
 801161c:	2b01      	cmp	r3, #1
 801161e:	dd08      	ble.n	8011632 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	4618      	mov	r0, r3
 8011624:	f7f3 fe4e 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011628:	4603      	mov	r3, r0
 801162a:	2b01      	cmp	r3, #1
 801162c:	dd01      	ble.n	8011632 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 801162e:	2301      	movs	r3, #1
 8011630:	e000      	b.n	8011634 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2c>
 8011632:	2300      	movs	r3, #0
 8011634:	2b00      	cmp	r3, #0
 8011636:	d003      	beq.n	8011640 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8011638:	6839      	ldr	r1, [r7, #0]
 801163a:	6878      	ldr	r0, [r7, #4]
 801163c:	f000 faf3 	bl	8011c26 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>
}
 8011640:	bf00      	nop
 8011642:	3708      	adds	r7, #8
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}

08011648 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	330c      	adds	r3, #12
 8011654:	4618      	mov	r0, r3
 8011656:	f7f6 f8c8 	bl	80077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	3308      	adds	r3, #8
 801165e:	4618      	mov	r0, r3
 8011660:	f7f6 f8c3 	bl	80077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f000 faf8 	bl	8011c5a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	4618      	mov	r0, r3
 801166e:	3708      	adds	r7, #8
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}

08011674 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8011674:	b580      	push	{r7, lr}
 8011676:	b082      	sub	sp, #8
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	4618      	mov	r0, r3
 8011680:	f7ff ffe2 	bl	8011648 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	4618      	mov	r0, r3
 8011688:	3708      	adds	r7, #8
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}

0801168e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 801168e:	b580      	push	{r7, lr}
 8011690:	b090      	sub	sp, #64	; 0x40
 8011692:	af02      	add	r7, sp, #8
 8011694:	60f8      	str	r0, [r7, #12]
 8011696:	60b9      	str	r1, [r7, #8]
 8011698:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 801169a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801169e:	68b9      	ldr	r1, [r7, #8]
 80116a0:	4618      	mov	r0, r3
 80116a2:	f000 facb 	bl	8011c3c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>
  resize_if_allowed(dst, src, func);
 80116a6:	687a      	ldr	r2, [r7, #4]
 80116a8:	68b9      	ldr	r1, [r7, #8]
 80116aa:	68f8      	ldr	r0, [r7, #12]
 80116ac:	f000 fafc 	bl	8011ca8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80116b0:	f107 0320 	add.w	r3, r7, #32
 80116b4:	68f9      	ldr	r1, [r7, #12]
 80116b6:	4618      	mov	r0, r3
 80116b8:	f7f6 faa6 	bl	8007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80116bc:	68f8      	ldr	r0, [r7, #12]
 80116be:	f7f6 fb0b 	bl	8007cd8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 80116c2:	4603      	mov	r3, r0
 80116c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80116c8:	f107 0120 	add.w	r1, r7, #32
 80116cc:	f107 0010 	add.w	r0, r7, #16
 80116d0:	9300      	str	r3, [sp, #0]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f000 fb32 	bl	8011d3c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80116d8:	f107 0310 	add.w	r3, r7, #16
 80116dc:	4618      	mov	r0, r3
 80116de:	f000 fb47 	bl	8011d70 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>
  DstEvaluatorType dstEvaluator(dst);
 80116e2:	f107 0320 	add.w	r3, r7, #32
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7f6 f87f 	bl	80077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80116ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7ff ffbf 	bl	8011674 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
}
 80116f6:	bf00      	nop
 80116f8:	3738      	adds	r7, #56	; 0x38
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}

080116fe <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80116fe:	b480      	push	{r7}
 8011700:	b083      	sub	sp, #12
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
    }
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	4618      	mov	r0, r3
 801170a:	370c      	adds	r7, #12
 801170c:	46bd      	mov	sp, r7
 801170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011712:	4770      	bx	lr

08011714 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8011714:	b480      	push	{r7}
 8011716:	b083      	sub	sp, #12
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	6039      	str	r1, [r7, #0]
    {}
 801171e:	bf00      	nop
 8011720:	370c      	adds	r7, #12
 8011722:	46bd      	mov	sp, r7
 8011724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011728:	4770      	bx	lr

0801172a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 801172a:	b480      	push	{r7}
 801172c:	b083      	sub	sp, #12
 801172e:	af00      	add	r7, sp, #0
 8011730:	6078      	str	r0, [r7, #4]
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	4618      	mov	r0, r3
 8011736:	370c      	adds	r7, #12
 8011738:	46bd      	mov	sp, r7
 801173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173e:	4770      	bx	lr

08011740 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8011740:	b590      	push	{r4, r7, lr}
 8011742:	b083      	sub	sp, #12
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	6039      	str	r1, [r7, #0]
 801174a:	687c      	ldr	r4, [r7, #4]
 801174c:	6838      	ldr	r0, [r7, #0]
 801174e:	f000 fb1a 	bl	8011d86 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>
 8011752:	4603      	mov	r3, r0
 8011754:	4619      	mov	r1, r3
 8011756:	4620      	mov	r0, r4
 8011758:	f7f4 f8ea 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	1d1c      	adds	r4, r3, #4
 8011760:	6838      	ldr	r0, [r7, #0]
 8011762:	f000 fb1c 	bl	8011d9e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>
 8011766:	4603      	mov	r3, r0
 8011768:	4619      	mov	r1, r3
 801176a:	4620      	mov	r0, r4
 801176c:	f7fd fc27 	bl	800efbe <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f103 040c 	add.w	r4, r3, #12
 8011776:	6838      	ldr	r0, [r7, #0]
 8011778:	f000 fb1c 	bl	8011db4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>
 801177c:	4603      	mov	r3, r0
 801177e:	4619      	mov	r1, r3
 8011780:	4620      	mov	r0, r4
 8011782:	f000 fb23 	bl	8011dcc <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	4618      	mov	r0, r3
 801178a:	370c      	adds	r7, #12
 801178c:	46bd      	mov	sp, r7
 801178e:	bd90      	pop	{r4, r7, pc}

08011790 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8011790:	b580      	push	{r7, lr}
 8011792:	b084      	sub	sp, #16
 8011794:	af00      	add	r7, sp, #0
 8011796:	60f8      	str	r0, [r7, #12]
 8011798:	60b9      	str	r1, [r7, #8]
 801179a:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	68ba      	ldr	r2, [r7, #8]
 80117a0:	6879      	ldr	r1, [r7, #4]
 80117a2:	4618      	mov	r0, r3
 80117a4:	f000 fb21 	bl	8011dea <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 80117a8:	eef0 7a40 	vmov.f32	s15, s0
 80117ac:	eeb0 0a67 	vmov.f32	s0, s15
 80117b0:	3710      	adds	r7, #16
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}

080117b6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80117b6:	b580      	push	{r7, lr}
 80117b8:	b082      	sub	sp, #8
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]
 80117be:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80117c0:	2201      	movs	r2, #1
 80117c2:	2100      	movs	r1, #0
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f7ff ffe3 	bl	8011790 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 80117ca:	eef0 7a40 	vmov.f32	s15, s0
  }
 80117ce:	eeb0 0a67 	vmov.f32	s0, s15
 80117d2:	3708      	adds	r7, #8
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
 80117e0:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80117e2:	2202      	movs	r2, #2
 80117e4:	2100      	movs	r1, #0
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	f7ff ffd2 	bl	8011790 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 80117ec:	eef0 7a40 	vmov.f32	s15, s0
  }
 80117f0:	eeb0 0a67 	vmov.f32	s0, s15
 80117f4:	3708      	adds	r7, #8
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}

080117fa <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80117fa:	b480      	push	{r7}
 80117fc:	b083      	sub	sp, #12
 80117fe:	af00      	add	r7, sp, #0
 8011800:	6078      	str	r0, [r7, #4]
 8011802:	bf00      	nop
 8011804:	370c      	adds	r7, #12
 8011806:	46bd      	mov	sp, r7
 8011808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180c:	4770      	bx	lr

0801180e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 801180e:	b590      	push	{r4, r7, lr}
 8011810:	b083      	sub	sp, #12
 8011812:	af00      	add	r7, sp, #0
 8011814:	6078      	str	r0, [r7, #4]
 8011816:	6039      	str	r1, [r7, #0]
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f000 fb22 	bl	8011e62 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 801181e:	687c      	ldr	r4, [r7, #4]
 8011820:	6838      	ldr	r0, [r7, #0]
 8011822:	f000 fb12 	bl	8011e4a <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8011826:	4603      	mov	r3, r0
 8011828:	4619      	mov	r1, r3
 801182a:	4620      	mov	r0, r4
 801182c:	f000 fb24 	bl	8011e78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	4618      	mov	r0, r3
 8011834:	370c      	adds	r7, #12
 8011836:	46bd      	mov	sp, r7
 8011838:	bd90      	pop	{r4, r7, pc}

0801183a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 801183a:	b580      	push	{r7, lr}
 801183c:	b0a4      	sub	sp, #144	; 0x90
 801183e:	af00      	add	r7, sp, #0
 8011840:	6078      	str	r0, [r7, #4]
 8011842:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 801184a:	2300      	movs	r3, #0
 801184c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6819      	ldr	r1, [r3, #0]
 8011854:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011858:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801185c:	4618      	mov	r0, r3
 801185e:	f7f9 fcdb 	bl	800b218 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 8011862:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011866:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801186a:	4611      	mov	r1, r2
 801186c:	4618      	mov	r0, r3
 801186e:	f7f9 fce6 	bl	800b23e <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	1d19      	adds	r1, r3, #4
 8011876:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801187a:	2200      	movs	r2, #0
 801187c:	4618      	mov	r0, r3
 801187e:	f000 fb0b 	bl	8011e98 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>
 8011882:	f107 030c 	add.w	r3, r7, #12
 8011886:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801188a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801188e:	4618      	mov	r0, r3
 8011890:	f000 fb15 	bl	8011ebe <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>
 8011894:	f107 030c 	add.w	r3, r7, #12
 8011898:	4618      	mov	r0, r3
 801189a:	f000 fb3e 	bl	8011f1a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>
 801189e:	eef0 7a40 	vmov.f32	s15, s0
  }
 80118a2:	eeb0 0a67 	vmov.f32	s0, s15
 80118a6:	3790      	adds	r7, #144	; 0x90
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}

080118ac <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b082      	sub	sp, #8
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80118b4:	2102      	movs	r1, #2
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	f7ff fa67 	bl	8010d8a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f000 fb47 	bl	8011f50 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>
  }
 80118c2:	bf00      	nop
 80118c4:	3708      	adds	r7, #8
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}

080118ca <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80118ca:	b580      	push	{r7, lr}
 80118cc:	b082      	sub	sp, #8
 80118ce:	af00      	add	r7, sp, #0
 80118d0:	6078      	str	r0, [r7, #4]
 80118d2:	6039      	str	r1, [r7, #0]
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f000 fb45 	bl	8011f64 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6839      	ldr	r1, [r7, #0]
 80118de:	4618      	mov	r0, r3
 80118e0:	f000 fb4b 	bl	8011f7a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	4618      	mov	r0, r3
 80118e8:	3708      	adds	r7, #8
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}

080118ee <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80118ee:	b580      	push	{r7, lr}
 80118f0:	b082      	sub	sp, #8
 80118f2:	af00      	add	r7, sp, #0
 80118f4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80118f6:	2100      	movs	r1, #0
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f000 fb66 	bl	8011fca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f000 fb86 	bl	8012010 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>
  }
 8011904:	bf00      	nop
 8011906:	3708      	adds	r7, #8
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}

0801190c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801190c:	b580      	push	{r7, lr}
 801190e:	b082      	sub	sp, #8
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
 8011914:	6039      	str	r1, [r7, #0]
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6839      	ldr	r1, [r7, #0]
 801191a:	4618      	mov	r0, r3
 801191c:	f000 fb82 	bl	8012024 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	4618      	mov	r0, r3
 8011924:	3708      	adds	r7, #8
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}

0801192a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801192a:	b580      	push	{r7, lr}
 801192c:	b082      	sub	sp, #8
 801192e:	af00      	add	r7, sp, #0
 8011930:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	689b      	ldr	r3, [r3, #8]
 8011936:	4618      	mov	r0, r3
 8011938:	f7fc fd14 	bl	800e364 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 801193c:	4603      	mov	r3, r0
    }
 801193e:	4618      	mov	r0, r3
 8011940:	3708      	adds	r7, #8
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}

08011946 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011946:	b580      	push	{r7, lr}
 8011948:	b082      	sub	sp, #8
 801194a:	af00      	add	r7, sp, #0
 801194c:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	689b      	ldr	r3, [r3, #8]
 8011952:	4618      	mov	r0, r3
 8011954:	f7fa fba2 	bl	800c09c <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 8011958:	4603      	mov	r3, r0
    }
 801195a:	4618      	mov	r0, r3
 801195c:	3708      	adds	r7, #8
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}

08011962 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011962:	b480      	push	{r7}
 8011964:	b083      	sub	sp, #12
 8011966:	af00      	add	r7, sp, #0
 8011968:	6078      	str	r0, [r7, #4]
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	4618      	mov	r0, r3
 801196e:	370c      	adds	r7, #12
 8011970:	46bd      	mov	sp, r7
 8011972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011976:	4770      	bx	lr

08011978 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8011978:	b5b0      	push	{r4, r5, r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	689c      	ldr	r4, [r3, #8]
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	6839      	ldr	r1, [r7, #0]
 801198c:	4618      	mov	r0, r3
 801198e:	f000 fb5d 	bl	801204c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 8011992:	4605      	mov	r5, r0
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	685b      	ldr	r3, [r3, #4]
 8011998:	6839      	ldr	r1, [r7, #0]
 801199a:	4618      	mov	r0, r3
 801199c:	f000 fb66 	bl	801206c <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 80119a0:	4603      	mov	r3, r0
 80119a2:	461a      	mov	r2, r3
 80119a4:	4629      	mov	r1, r5
 80119a6:	4620      	mov	r0, r4
 80119a8:	f7f7 f836 	bl	8008a18 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80119ac:	bf00      	nop
 80119ae:	3708      	adds	r7, #8
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bdb0      	pop	{r4, r5, r7, pc}

080119b4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80119b4:	b480      	push	{r7}
 80119b6:	b083      	sub	sp, #12
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	bf00      	nop
 80119be:	370c      	adds	r7, #12
 80119c0:	46bd      	mov	sp, r7
 80119c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c6:	4770      	bx	lr

080119c8 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80119c8:	b480      	push	{r7}
 80119ca:	b083      	sub	sp, #12
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
    }
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	4618      	mov	r0, r3
 80119d4:	370c      	adds	r7, #12
 80119d6:	46bd      	mov	sp, r7
 80119d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119dc:	4770      	bx	lr

080119de <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80119de:	b480      	push	{r7}
 80119e0:	b083      	sub	sp, #12
 80119e2:	af00      	add	r7, sp, #0
 80119e4:	6078      	str	r0, [r7, #4]
    }
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	4618      	mov	r0, r3
 80119ea:	370c      	adds	r7, #12
 80119ec:	46bd      	mov	sp, r7
 80119ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f2:	4770      	bx	lr

080119f4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b082      	sub	sp, #8
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7ff fb42 	bl	8011088 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8011a04:	4603      	mov	r3, r0
    }
 8011a06:	4618      	mov	r0, r3
 8011a08:	3708      	adds	r7, #8
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}

08011a0e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8011a0e:	b580      	push	{r7, lr}
 8011a10:	b082      	sub	sp, #8
 8011a12:	af00      	add	r7, sp, #0
 8011a14:	6078      	str	r0, [r7, #4]
 8011a16:	6039      	str	r1, [r7, #0]
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6839      	ldr	r1, [r7, #0]
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f000 fb35 	bl	801208c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	4618      	mov	r0, r3
 8011a26:	3708      	adds	r7, #8
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}

08011a2c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8011a2c:	b480      	push	{r7}
 8011a2e:	b083      	sub	sp, #12
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	4618      	mov	r0, r3
 8011a38:	370c      	adds	r7, #12
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a40:	4770      	bx	lr

08011a42 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 8011a42:	b480      	push	{r7}
 8011a44:	b083      	sub	sp, #12
 8011a46:	af00      	add	r7, sp, #0
 8011a48:	6078      	str	r0, [r7, #4]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	370c      	adds	r7, #12
 8011a50:	46bd      	mov	sp, r7
 8011a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a56:	4770      	bx	lr

08011a58 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b084      	sub	sp, #16
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	60f8      	str	r0, [r7, #12]
 8011a60:	60b9      	str	r1, [r7, #8]
 8011a62:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8011a64:	68b9      	ldr	r1, [r7, #8]
 8011a66:	68f8      	ldr	r0, [r7, #12]
 8011a68:	f000 fb1f 	bl	80120aa <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>
 8011a6c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011a70:	eeb0 0a67 	vmov.f32	s0, s15
 8011a74:	3710      	adds	r7, #16
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}

08011a7a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8011a7a:	b580      	push	{r7, lr}
 8011a7c:	b082      	sub	sp, #8
 8011a7e:	af00      	add	r7, sp, #0
 8011a80:	6078      	str	r0, [r7, #4]
 8011a82:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f000 fb4c 	bl	8012122 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8011a8a:	6838      	ldr	r0, [r7, #0]
 8011a8c:	f000 fb31 	bl	80120f2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 8011a90:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8011a96:	6838      	ldr	r0, [r7, #0]
 8011a98:	f000 fb37 	bl	801210a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>
 8011a9c:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	605a      	str	r2, [r3, #4]
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8011aac:	4619      	mov	r1, r3
 8011aae:	4610      	mov	r0, r2
 8011ab0:	f7f5 f95f 	bl	8006d72 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8011abe:	4619      	mov	r1, r3
 8011ac0:	4610      	mov	r0, r2
 8011ac2:	f000 f9d9 	bl	8011e78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8011ac6:	6838      	ldr	r0, [r7, #0]
 8011ac8:	f000 fb13 	bl	80120f2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 8011acc:	4603      	mov	r3, r0
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7f3 fc9e 	bl	8005410 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8011ad4:	4602      	mov	r2, r0
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	611a      	str	r2, [r3, #16]
  }
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	4618      	mov	r0, r3
 8011ade:	3708      	adds	r7, #8
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}

08011ae4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011aec:	2200      	movs	r2, #0
 8011aee:	2100      	movs	r1, #0
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f000 fb21 	bl	8012138 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f000 fb37 	bl	801216a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>
  }
 8011afc:	bf00      	nop
 8011afe:	3708      	adds	r7, #8
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bd80      	pop	{r7, pc}

08011b04 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8011b04:	b590      	push	{r4, r7, lr}
 8011b06:	b083      	sub	sp, #12
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
 8011b0c:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8011b0e:	6878      	ldr	r0, [r7, #4]
 8011b10:	f000 fb57 	bl	80121c2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	4618      	mov	r0, r3
 8011b18:	f000 f81e 	bl	8011b58 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 8011b1c:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	601a      	str	r2, [r3, #0]
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	1d1c      	adds	r4, r3, #4
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f000 fb2e 	bl	801218a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	4619      	mov	r1, r3
 8011b32:	4620      	mov	r0, r4
 8011b34:	f7f5 f976 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	1d5c      	adds	r4, r3, #5
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	4618      	mov	r0, r3
 8011b40:	f000 fb31 	bl	80121a6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 8011b44:	4603      	mov	r3, r0
 8011b46:	4619      	mov	r1, r3
 8011b48:	4620      	mov	r0, r4
 8011b4a:	f7f5 f951 	bl	8006df0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	4618      	mov	r0, r3
 8011b52:	370c      	adds	r7, #12
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd90      	pop	{r4, r7, pc}

08011b58 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8011b58:	b480      	push	{r7}
 8011b5a:	b083      	sub	sp, #12
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	4618      	mov	r0, r3
 8011b66:	370c      	adds	r7, #12
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6e:	4770      	bx	lr

08011b70 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b082      	sub	sp, #8
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
 8011b78:	6039      	str	r1, [r7, #0]
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6839      	ldr	r1, [r7, #0]
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f000 fb2a 	bl	80121d8 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>
  }
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	4618      	mov	r0, r3
 8011b88:	3708      	adds	r7, #8
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}

08011b8e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011b8e:	b580      	push	{r7, lr}
 8011b90:	b082      	sub	sp, #8
 8011b92:	af00      	add	r7, sp, #0
 8011b94:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	3308      	adds	r3, #8
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f7fc fd6a 	bl	800e674 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 8011ba0:	4603      	mov	r3, r0
    }
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3708      	adds	r7, #8
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}

08011baa <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011baa:	b580      	push	{r7, lr}
 8011bac:	b082      	sub	sp, #8
 8011bae:	af00      	add	r7, sp, #0
 8011bb0:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	3308      	adds	r3, #8
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f7fc fd70 	bl	800e69c <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 8011bbc:	4603      	mov	r3, r0
    }
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3708      	adds	r7, #8
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}

08011bc6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011bc6:	b480      	push	{r7}
 8011bc8:	b083      	sub	sp, #12
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	370c      	adds	r7, #12
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bda:	4770      	bx	lr

08011bdc <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType=0, IndexType=0) const { return op(); }
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b084      	sub	sp, #16
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	607a      	str	r2, [r7, #4]
 8011be8:	603b      	str	r3, [r7, #0]
 8011bea:	68b8      	ldr	r0, [r7, #8]
 8011bec:	f000 fb03 	bl	80121f6 <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>
 8011bf0:	eef0 7a40 	vmov.f32	s15, s0
 8011bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8011bf8:	3710      	adds	r7, #16
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}

08011bfe <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011bfe:	b580      	push	{r7, lr}
 8011c00:	b082      	sub	sp, #8
 8011c02:	af00      	add	r7, sp, #0
 8011c04:	6078      	str	r0, [r7, #4]
 8011c06:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6839      	ldr	r1, [r7, #0]
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f000 fb01 	bl	8012214 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	4618      	mov	r0, r3
 8011c16:	f000 fb27 	bl	8012268 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 8011c1a:	bf00      	nop
  }
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3708      	adds	r7, #8
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}

08011c26 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>:
    static void run(const Derived&, const OtherDerived&)
 8011c26:	b480      	push	{r7}
 8011c28:	b083      	sub	sp, #12
 8011c2a:	af00      	add	r7, sp, #0
 8011c2c:	6078      	str	r0, [r7, #4]
 8011c2e:	6039      	str	r1, [r7, #0]
    }
 8011c30:	bf00      	nop
 8011c32:	370c      	adds	r7, #12
 8011c34:	46bd      	mov	sp, r7
 8011c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3a:	4770      	bx	lr

08011c3c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b082      	sub	sp, #8
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
 8011c44:	6039      	str	r1, [r7, #0]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	6839      	ldr	r1, [r7, #0]
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f000 fb18 	bl	8012280 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	4618      	mov	r0, r3
 8011c54:	3708      	adds	r7, #8
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd80      	pop	{r7, pc}

08011c5a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8011c5a:	b480      	push	{r7}
 8011c5c:	b083      	sub	sp, #12
 8011c5e:	af00      	add	r7, sp, #0
 8011c60:	6078      	str	r0, [r7, #4]
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	4618      	mov	r0, r3
 8011c66:	370c      	adds	r7, #12
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6e:	4770      	bx	lr

08011c70 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b082      	sub	sp, #8
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7f3 fb2c 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011c82:	4603      	mov	r3, r0
 8011c84:	4618      	mov	r0, r3
 8011c86:	3708      	adds	r7, #8
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}

08011c8c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b082      	sub	sp, #8
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	685b      	ldr	r3, [r3, #4]
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f7f3 fb13 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	3708      	adds	r7, #8
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}

08011ca8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b086      	sub	sp, #24
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	60f8      	str	r0, [r7, #12]
 8011cb0:	60b9      	str	r1, [r7, #8]
 8011cb2:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8011cb4:	68b8      	ldr	r0, [r7, #8]
 8011cb6:	f7ff ffdb 	bl	8011c70 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>
 8011cba:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8011cbc:	68b8      	ldr	r0, [r7, #8]
 8011cbe:	f7ff ffe5 	bl	8011c8c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>
 8011cc2:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f7f3 fb07 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011ccc:	4602      	mov	r2, r0
 8011cce:	697b      	ldr	r3, [r7, #20]
 8011cd0:	4293      	cmp	r3, r2
 8011cd2:	d107      	bne.n	8011ce4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f7f3 faf4 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011cdc:	4602      	mov	r2, r0
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	4293      	cmp	r3, r2
 8011ce2:	d001      	beq.n	8011ce8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	e000      	b.n	8011cea <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8011ce8:	2300      	movs	r3, #0
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d005      	beq.n	8011cfa <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	693a      	ldr	r2, [r7, #16]
 8011cf2:	6979      	ldr	r1, [r7, #20]
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f7f6 fa09 	bl	800810c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f7f3 faec 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011d02:	4602      	mov	r2, r0
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	4293      	cmp	r3, r2
 8011d08:	d107      	bne.n	8011d1a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7f3 fad9 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011d12:	4602      	mov	r2, r0
 8011d14:	693b      	ldr	r3, [r7, #16]
 8011d16:	4293      	cmp	r3, r2
 8011d18:	d006      	beq.n	8011d28 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8011d1a:	4b05      	ldr	r3, [pc, #20]	; (8011d30 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8011d1c:	4a05      	ldr	r2, [pc, #20]	; (8011d34 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8011d1e:	f240 21fd 	movw	r1, #765	; 0x2fd
 8011d22:	4805      	ldr	r0, [pc, #20]	; (8011d38 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8011d24:	f00c fa36 	bl	801e194 <__assert_func>
}
 8011d28:	bf00      	nop
 8011d2a:	3718      	adds	r7, #24
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bd80      	pop	{r7, pc}
 8011d30:	08022674 	.word	0x08022674
 8011d34:	080287d0 	.word	0x080287d0
 8011d38:	08022788 	.word	0x08022788

08011d3c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8011d3c:	b480      	push	{r7}
 8011d3e:	b085      	sub	sp, #20
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	60f8      	str	r0, [r7, #12]
 8011d44:	60b9      	str	r1, [r7, #8]
 8011d46:	607a      	str	r2, [r7, #4]
 8011d48:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	68ba      	ldr	r2, [r7, #8]
 8011d4e:	601a      	str	r2, [r3, #0]
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	687a      	ldr	r2, [r7, #4]
 8011d54:	605a      	str	r2, [r3, #4]
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	683a      	ldr	r2, [r7, #0]
 8011d5a:	609a      	str	r2, [r3, #8]
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	69ba      	ldr	r2, [r7, #24]
 8011d60:	60da      	str	r2, [r3, #12]
  }
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	4618      	mov	r0, r3
 8011d66:	3714      	adds	r7, #20
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6e:	4770      	bx	lr

08011d70 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b082      	sub	sp, #8
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8011d78:	6878      	ldr	r0, [r7, #4]
 8011d7a:	f000 fab6 	bl	80122ea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>
  }
 8011d7e:	bf00      	nop
 8011d80:	3708      	adds	r7, #8
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}

08011d86 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8011d86:	b480      	push	{r7}
 8011d88:	b083      	sub	sp, #12
 8011d8a:	af00      	add	r7, sp, #0
 8011d8c:	6078      	str	r0, [r7, #4]
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	3330      	adds	r3, #48	; 0x30
 8011d92:	4618      	mov	r0, r3
 8011d94:	370c      	adds	r7, #12
 8011d96:	46bd      	mov	sp, r7
 8011d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9c:	4770      	bx	lr

08011d9e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8011d9e:	b480      	push	{r7}
 8011da0:	b083      	sub	sp, #12
 8011da2:	af00      	add	r7, sp, #0
 8011da4:	6078      	str	r0, [r7, #4]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	4618      	mov	r0, r3
 8011daa:	370c      	adds	r7, #12
 8011dac:	46bd      	mov	sp, r7
 8011dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db2:	4770      	bx	lr

08011db4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8011db4:	b480      	push	{r7}
 8011db6:	b083      	sub	sp, #12
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	3318      	adds	r3, #24
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	370c      	adds	r7, #12
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dca:	4770      	bx	lr

08011dcc <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b082      	sub	sp, #8
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
 8011dd4:	6039      	str	r1, [r7, #0]
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	6839      	ldr	r1, [r7, #0]
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f000 fa95 	bl	801230a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	4618      	mov	r0, r3
 8011de4:	3708      	adds	r7, #8
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}

08011dea <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8011dea:	b590      	push	{r4, r7, lr}
 8011dec:	b087      	sub	sp, #28
 8011dee:	af00      	add	r7, sp, #0
 8011df0:	60f8      	str	r0, [r7, #12]
 8011df2:	60b9      	str	r1, [r7, #8]
 8011df4:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f000 fa95 	bl	8012328 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8011dfe:	4604      	mov	r4, r0
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	3304      	adds	r3, #4
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	68b9      	ldr	r1, [r7, #8]
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f7fd fdf3 	bl	800f9f4 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8011e0e:	eef0 7a40 	vmov.f32	s15, s0
 8011e12:	edc7 7a04 	vstr	s15, [r7, #16]
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	330c      	adds	r3, #12
 8011e1a:	687a      	ldr	r2, [r7, #4]
 8011e1c:	68b9      	ldr	r1, [r7, #8]
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f000 fa8d 	bl	801233e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8011e24:	eef0 7a40 	vmov.f32	s15, s0
 8011e28:	edc7 7a05 	vstr	s15, [r7, #20]
 8011e2c:	f107 0214 	add.w	r2, r7, #20
 8011e30:	f107 0310 	add.w	r3, r7, #16
 8011e34:	4619      	mov	r1, r3
 8011e36:	4620      	mov	r0, r4
 8011e38:	f7fd fc20 	bl	800f67c <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8011e3c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011e40:	eeb0 0a67 	vmov.f32	s0, s15
 8011e44:	371c      	adds	r7, #28
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd90      	pop	{r4, r7, pc}

08011e4a <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8011e4a:	b480      	push	{r7}
 8011e4c:	b083      	sub	sp, #12
 8011e4e:	af00      	add	r7, sp, #0
 8011e50:	6078      	str	r0, [r7, #4]
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	4618      	mov	r0, r3
 8011e58:	370c      	adds	r7, #12
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e60:	4770      	bx	lr

08011e62 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011e62:	b480      	push	{r7}
 8011e64:	b083      	sub	sp, #12
 8011e66:	af00      	add	r7, sp, #0
 8011e68:	6078      	str	r0, [r7, #4]
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	370c      	adds	r7, #12
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr

08011e78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b082      	sub	sp, #8
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
 8011e80:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	683a      	ldr	r2, [r7, #0]
 8011e86:	4611      	mov	r1, r2
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f000 fa79 	bl	8012380 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
  { }
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	4618      	mov	r0, r3
 8011e92:	3708      	adds	r7, #8
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bd80      	pop	{r7, pc}

08011e98 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b084      	sub	sp, #16
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	60f8      	str	r0, [r7, #12]
 8011ea0:	60b9      	str	r1, [r7, #8]
 8011ea2:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8011ea4:	68b8      	ldr	r0, [r7, #8]
 8011ea6:	f7f4 f887 	bl	8005fb8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	687a      	ldr	r2, [r7, #4]
 8011eae:	4619      	mov	r1, r3
 8011eb0:	68f8      	ldr	r0, [r7, #12]
 8011eb2:	f000 fa7d 	bl	80123b0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>
}
 8011eb6:	68f8      	ldr	r0, [r7, #12]
 8011eb8:	3710      	adds	r7, #16
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}

08011ebe <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8011ebe:	b5b0      	push	{r4, r5, r7, lr}
 8011ec0:	b086      	sub	sp, #24
 8011ec2:	af00      	add	r7, sp, #0
 8011ec4:	60f8      	str	r0, [r7, #12]
 8011ec6:	60b9      	str	r1, [r7, #8]
 8011ec8:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8011eca:	68b8      	ldr	r0, [r7, #8]
 8011ecc:	f7f9 fe6e 	bl	800bbac <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	6878      	ldr	r0, [r7, #4]
 8011ed4:	f000 fa94 	bl	8012400 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>
 8011ed8:	4605      	mov	r5, r0
 8011eda:	f107 0314 	add.w	r3, r7, #20
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7f3 fc9c 	bl	800581c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8011ee4:	f107 0314 	add.w	r3, r7, #20
 8011ee8:	462a      	mov	r2, r5
 8011eea:	4621      	mov	r1, r4
 8011eec:	68f8      	ldr	r0, [r7, #12]
 8011eee:	f000 fac1 	bl	8012474 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>
}
 8011ef2:	68f8      	ldr	r0, [r7, #12]
 8011ef4:	3718      	adds	r7, #24
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bdb0      	pop	{r4, r5, r7, pc}

08011efa <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8011efa:	b580      	push	{r7, lr}
 8011efc:	b082      	sub	sp, #8
 8011efe:	af00      	add	r7, sp, #0
 8011f00:	6078      	str	r0, [r7, #4]
 8011f02:	6878      	ldr	r0, [r7, #4]
 8011f04:	f000 fb14 	bl	8012530 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f000 fb1b 	bl	8012546 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>
 8011f10:	4603      	mov	r3, r0
 8011f12:	4618      	mov	r0, r3
 8011f14:	3708      	adds	r7, #8
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}

08011f1a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8011f1a:	b590      	push	{r4, r7, lr}
 8011f1c:	b085      	sub	sp, #20
 8011f1e:	af00      	add	r7, sp, #0
 8011f20:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f000 fb04 	bl	8012530 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011f28:	4604      	mov	r4, r0
 8011f2a:	f107 030c 	add.w	r3, r7, #12
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7f3 ff6b 	bl	8005e0a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8011f34:	f107 030c 	add.w	r3, r7, #12
 8011f38:	4619      	mov	r1, r3
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	f000 fb80 	bl	8012640 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8011f40:	eef0 7a40 	vmov.f32	s15, s0
 8011f44:	bf00      	nop
}
 8011f46:	eeb0 0a67 	vmov.f32	s0, s15
 8011f4a:	3714      	adds	r7, #20
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd90      	pop	{r4, r7, pc}

08011f50 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011f50:	b480      	push	{r7}
 8011f52:	b083      	sub	sp, #12
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	bf00      	nop
 8011f5a:	370c      	adds	r7, #12
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	4770      	bx	lr

08011f64 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011f64:	b480      	push	{r7}
 8011f66:	b083      	sub	sp, #12
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	4618      	mov	r0, r3
 8011f70:	370c      	adds	r7, #12
 8011f72:	46bd      	mov	sp, r7
 8011f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f78:	4770      	bx	lr

08011f7a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8011f7a:	b590      	push	{r4, r7, lr}
 8011f7c:	b083      	sub	sp, #12
 8011f7e:	af00      	add	r7, sp, #0
 8011f80:	6078      	str	r0, [r7, #4]
 8011f82:	6039      	str	r1, [r7, #0]
 8011f84:	687c      	ldr	r4, [r7, #4]
 8011f86:	6838      	ldr	r0, [r7, #0]
 8011f88:	f000 fba0 	bl	80126cc <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	4619      	mov	r1, r3
 8011f90:	4620      	mov	r0, r4
 8011f92:	f7f3 ffb9 	bl	8005f08 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	1d1c      	adds	r4, r3, #4
 8011f9a:	6838      	ldr	r0, [r7, #0]
 8011f9c:	f000 fba2 	bl	80126e4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	4619      	mov	r1, r3
 8011fa4:	4620      	mov	r0, r4
 8011fa6:	f000 fbb4 	bl	8012712 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f103 040c 	add.w	r4, r3, #12
 8011fb0:	6838      	ldr	r0, [r7, #0]
 8011fb2:	f000 fba2 	bl	80126fa <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	4619      	mov	r1, r3
 8011fba:	4620      	mov	r0, r4
 8011fbc:	f000 fbb8 	bl	8012730 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	370c      	adds	r7, #12
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd90      	pop	{r4, r7, pc}

08011fca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8011fca:	b5b0      	push	{r4, r5, r7, lr}
 8011fcc:	b084      	sub	sp, #16
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	6078      	str	r0, [r7, #4]
 8011fd2:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	689c      	ldr	r4, [r3, #8]
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	6839      	ldr	r1, [r7, #0]
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f000 f834 	bl	801204c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 8011fe4:	4605      	mov	r5, r0
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	685b      	ldr	r3, [r3, #4]
 8011fea:	6839      	ldr	r1, [r7, #0]
 8011fec:	4618      	mov	r0, r3
 8011fee:	f000 fbae 	bl	801274e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>
 8011ff2:	eef0 7a40 	vmov.f32	s15, s0
 8011ff6:	edc7 7a03 	vstr	s15, [r7, #12]
 8011ffa:	f107 030c 	add.w	r3, r7, #12
 8011ffe:	461a      	mov	r2, r3
 8012000:	4629      	mov	r1, r5
 8012002:	4620      	mov	r0, r4
 8012004:	f7f6 fd08 	bl	8008a18 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8012008:	bf00      	nop
 801200a:	3710      	adds	r7, #16
 801200c:	46bd      	mov	sp, r7
 801200e:	bdb0      	pop	{r4, r5, r7, pc}

08012010 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8012010:	b480      	push	{r7}
 8012012:	b083      	sub	sp, #12
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
 8012018:	bf00      	nop
 801201a:	370c      	adds	r7, #12
 801201c:	46bd      	mov	sp, r7
 801201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012022:	4770      	bx	lr

08012024 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6839      	ldr	r1, [r7, #0]
 8012032:	4618      	mov	r0, r3
 8012034:	f000 fbaf 	bl	8012796 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	4618      	mov	r0, r3
 801203c:	f000 fbd5 	bl	80127ea <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 8012040:	bf00      	nop
  }
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	4618      	mov	r0, r3
 8012046:	3708      	adds	r7, #8
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}

0801204c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 801204c:	b480      	push	{r7}
 801204e:	b083      	sub	sp, #12
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
 8012054:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	681a      	ldr	r2, [r3, #0]
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	009b      	lsls	r3, r3, #2
 801205e:	4413      	add	r3, r2
  }
 8012060:	4618      	mov	r0, r3
 8012062:	370c      	adds	r7, #12
 8012064:	46bd      	mov	sp, r7
 8012066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206a:	4770      	bx	lr

0801206c <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 801206c:	b480      	push	{r7}
 801206e:	b083      	sub	sp, #12
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
 8012074:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681a      	ldr	r2, [r3, #0]
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	009b      	lsls	r3, r3, #2
 801207e:	4413      	add	r3, r2
  }
 8012080:	4618      	mov	r0, r3
 8012082:	370c      	adds	r7, #12
 8012084:	46bd      	mov	sp, r7
 8012086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208a:	4770      	bx	lr

0801208c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 801208c:	b580      	push	{r7, lr}
 801208e:	b082      	sub	sp, #8
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
 8012094:	6039      	str	r1, [r7, #0]
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	6839      	ldr	r1, [r7, #0]
 801209a:	4618      	mov	r0, r3
 801209c:	f000 fbb1 	bl	8012802 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	4618      	mov	r0, r3
 80120a4:	3708      	adds	r7, #8
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}

080120aa <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80120aa:	b580      	push	{r7, lr}
 80120ac:	b084      	sub	sp, #16
 80120ae:	af00      	add	r7, sp, #0
 80120b0:	6078      	str	r0, [r7, #4]
 80120b2:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80120b4:	6839      	ldr	r1, [r7, #0]
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f000 fbb5 	bl	8012826 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>
 80120bc:	eef0 7a40 	vmov.f32	s15, s0
 80120c0:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80120c4:	6839      	ldr	r1, [r7, #0]
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	f000 fbbe 	bl	8012848 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>
 80120cc:	eef0 7a40 	vmov.f32	s15, s0
 80120d0:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80120d4:	f107 020c 	add.w	r2, r7, #12
 80120d8:	f107 0308 	add.w	r3, r7, #8
 80120dc:	4619      	mov	r1, r3
 80120de:	6838      	ldr	r0, [r7, #0]
 80120e0:	f7f7 fa8b 	bl	80095fa <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80120e4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80120e8:	eeb0 0a67 	vmov.f32	s0, s15
 80120ec:	3710      	adds	r7, #16
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}

080120f2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80120f2:	b480      	push	{r7}
 80120f4:	b083      	sub	sp, #12
 80120f6:	af00      	add	r7, sp, #0
 80120f8:	6078      	str	r0, [r7, #4]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	4618      	mov	r0, r3
 8012100:	370c      	adds	r7, #12
 8012102:	46bd      	mov	sp, r7
 8012104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012108:	4770      	bx	lr

0801210a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 801210a:	b480      	push	{r7}
 801210c:	b083      	sub	sp, #12
 801210e:	af00      	add	r7, sp, #0
 8012110:	6078      	str	r0, [r7, #4]
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	685b      	ldr	r3, [r3, #4]
 8012116:	4618      	mov	r0, r3
 8012118:	370c      	adds	r7, #12
 801211a:	46bd      	mov	sp, r7
 801211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012120:	4770      	bx	lr

08012122 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012122:	b480      	push	{r7}
 8012124:	b083      	sub	sp, #12
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	4618      	mov	r0, r3
 801212e:	370c      	adds	r7, #12
 8012130:	46bd      	mov	sp, r7
 8012132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012136:	4770      	bx	lr

08012138 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8012138:	b580      	push	{r7, lr}
 801213a:	b086      	sub	sp, #24
 801213c:	af00      	add	r7, sp, #0
 801213e:	60f8      	str	r0, [r7, #12]
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8012144:	6879      	ldr	r1, [r7, #4]
 8012146:	68b8      	ldr	r0, [r7, #8]
 8012148:	f000 fba2 	bl	8012890 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 801214c:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 801214e:	6879      	ldr	r1, [r7, #4]
 8012150:	68b8      	ldr	r0, [r7, #8]
 8012152:	f000 fba9 	bl	80128a8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8012156:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8012158:	693a      	ldr	r2, [r7, #16]
 801215a:	6979      	ldr	r1, [r7, #20]
 801215c:	68f8      	ldr	r0, [r7, #12]
 801215e:	f000 fbaf 	bl	80128c0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>
  }
 8012162:	bf00      	nop
 8012164:	3718      	adds	r7, #24
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}

0801216a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801216a:	b580      	push	{r7, lr}
 801216c:	b082      	sub	sp, #8
 801216e:	af00      	add	r7, sp, #0
 8012170:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012172:	2201      	movs	r2, #1
 8012174:	2100      	movs	r1, #0
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	f7ff ffde 	bl	8012138 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801217c:	6878      	ldr	r0, [r7, #4]
 801217e:	f000 fbc5 	bl	801290c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>
  }
 8012182:	bf00      	nop
 8012184:	3708      	adds	r7, #8
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}

0801218a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801218a:	b580      	push	{r7, lr}
 801218c:	b082      	sub	sp, #8
 801218e:	af00      	add	r7, sp, #0
 8012190:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	689b      	ldr	r3, [r3, #8]
 8012196:	4618      	mov	r0, r3
 8012198:	f7fb fe62 	bl	800de60 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 801219c:	4603      	mov	r3, r0
    }
 801219e:	4618      	mov	r0, r3
 80121a0:	3708      	adds	r7, #8
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}

080121a6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80121a6:	b580      	push	{r7, lr}
 80121a8:	b082      	sub	sp, #8
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	689b      	ldr	r3, [r3, #8]
 80121b2:	4618      	mov	r0, r3
 80121b4:	f7f6 fc04 	bl	80089c0 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 80121b8:	4603      	mov	r3, r0
    }
 80121ba:	4618      	mov	r0, r3
 80121bc:	3708      	adds	r7, #8
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}

080121c2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 80121c2:	b480      	push	{r7}
 80121c4:	b083      	sub	sp, #12
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	6078      	str	r0, [r7, #4]
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	4618      	mov	r0, r3
 80121ce:	370c      	adds	r7, #12
 80121d0:	46bd      	mov	sp, r7
 80121d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d6:	4770      	bx	lr

080121d8 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80121d8:	b580      	push	{r7, lr}
 80121da:	b082      	sub	sp, #8
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
 80121e0:	6039      	str	r1, [r7, #0]
    : unary_evaluator<XprType>(block)
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	6839      	ldr	r1, [r7, #0]
 80121e6:	4618      	mov	r0, r3
 80121e8:	f000 fbb9 	bl	801295e <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>
  {}
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	4618      	mov	r0, r3
 80121f0:	3708      	adds	r7, #8
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}

080121f6 <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() () const { return m_other; }
 80121f6:	b480      	push	{r7}
 80121f8:	b083      	sub	sp, #12
 80121fa:	af00      	add	r7, sp, #0
 80121fc:	6078      	str	r0, [r7, #4]
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	ee07 3a90 	vmov	s15, r3
 8012206:	eeb0 0a67 	vmov.f32	s0, s15
 801220a:	370c      	adds	r7, #12
 801220c:	46bd      	mov	sp, r7
 801220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012212:	4770      	bx	lr

08012214 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8012214:	b590      	push	{r4, r7, lr}
 8012216:	b083      	sub	sp, #12
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
 801221c:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 801221e:	6878      	ldr	r0, [r7, #4]
 8012220:	f000 fc05 	bl	8012a2e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	4618      	mov	r0, r3
 8012228:	f000 f81e 	bl	8012268 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 801222c:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	601a      	str	r2, [r3, #0]
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	1d1c      	adds	r4, r3, #4
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	4618      	mov	r0, r3
 801223a:	f000 fbdc 	bl	80129f6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>
 801223e:	4603      	mov	r3, r0
 8012240:	4619      	mov	r1, r3
 8012242:	4620      	mov	r0, r4
 8012244:	f7f4 fdd4 	bl	8006df0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	1d5c      	adds	r4, r3, #5
 801224c:	683b      	ldr	r3, [r7, #0]
 801224e:	4618      	mov	r0, r3
 8012250:	f000 fbdf 	bl	8012a12 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>
 8012254:	4603      	mov	r3, r0
 8012256:	4619      	mov	r1, r3
 8012258:	4620      	mov	r0, r4
 801225a:	f7f4 fde3 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	4618      	mov	r0, r3
 8012262:	370c      	adds	r7, #12
 8012264:	46bd      	mov	sp, r7
 8012266:	bd90      	pop	{r4, r7, pc}

08012268 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>:
 8012268:	b480      	push	{r7}
 801226a:	b083      	sub	sp, #12
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	4618      	mov	r0, r3
 8012276:	370c      	adds	r7, #12
 8012278:	46bd      	mov	sp, r7
 801227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227e:	4770      	bx	lr

08012280 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>:
  explicit product_evaluator(const XprType& xpr)
 8012280:	b580      	push	{r7, lr}
 8012282:	b082      	sub	sp, #8
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f000 fbf2 	bl	8012a74 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8012290:	6838      	ldr	r0, [r7, #0]
 8012292:	f000 fbd7 	bl	8012a44 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 8012296:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 801229c:	6838      	ldr	r0, [r7, #0]
 801229e:	f000 fbdd 	bl	8012a5c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>
 80122a2:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	605a      	str	r2, [r3, #4]
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 80122b2:	4619      	mov	r1, r3
 80122b4:	4610      	mov	r0, r2
 80122b6:	f7f5 fca7 	bl	8007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 80122c4:	4619      	mov	r1, r3
 80122c6:	4610      	mov	r0, r2
 80122c8:	f7f5 fc9e 	bl	8007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 80122cc:	6838      	ldr	r0, [r7, #0]
 80122ce:	f000 fbb9 	bl	8012a44 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 80122d2:	4603      	mov	r3, r0
 80122d4:	4618      	mov	r0, r3
 80122d6:	f7f2 fff5 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80122da:	4602      	mov	r2, r0
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	611a      	str	r2, [r3, #16]
  }
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	4618      	mov	r0, r3
 80122e4:	3708      	adds	r7, #8
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}

080122ea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80122ea:	b580      	push	{r7, lr}
 80122ec:	b082      	sub	sp, #8
 80122ee:	af00      	add	r7, sp, #0
 80122f0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80122f2:	2200      	movs	r2, #0
 80122f4:	2100      	movs	r1, #0
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f000 fbc7 	bl	8012a8a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f000 fbdd 	bl	8012abc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>
  }
 8012302:	bf00      	nop
 8012304:	3708      	adds	r7, #8
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}

0801230a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801230a:	b580      	push	{r7, lr}
 801230c:	b082      	sub	sp, #8
 801230e:	af00      	add	r7, sp, #0
 8012310:	6078      	str	r0, [r7, #4]
 8012312:	6039      	str	r1, [r7, #0]
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	6839      	ldr	r1, [r7, #0]
 8012318:	4618      	mov	r0, r3
 801231a:	f000 fbdf 	bl	8012adc <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>
  }
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	4618      	mov	r0, r3
 8012322:	3708      	adds	r7, #8
 8012324:	46bd      	mov	sp, r7
 8012326:	bd80      	pop	{r7, pc}

08012328 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8012328:	b480      	push	{r7}
 801232a:	b083      	sub	sp, #12
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	4618      	mov	r0, r3
 8012334:	370c      	adds	r7, #12
 8012336:	46bd      	mov	sp, r7
 8012338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233c:	4770      	bx	lr

0801233e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801233e:	b5b0      	push	{r4, r5, r7, lr}
 8012340:	b084      	sub	sp, #16
 8012342:	af00      	add	r7, sp, #0
 8012344:	60f8      	str	r0, [r7, #12]
 8012346:	60b9      	str	r1, [r7, #8]
 8012348:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	681c      	ldr	r4, [r3, #0]
 801234e:	68f8      	ldr	r0, [r7, #12]
 8012350:	f000 fbd8 	bl	8012b04 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8012354:	4602      	mov	r2, r0
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	fb03 f502 	mul.w	r5, r3, r2
 801235c:	68f8      	ldr	r0, [r7, #12]
 801235e:	f000 fbdc 	bl	8012b1a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 8012362:	4602      	mov	r2, r0
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	fb02 f303 	mul.w	r3, r2, r3
 801236a:	442b      	add	r3, r5
 801236c:	009b      	lsls	r3, r3, #2
 801236e:	4423      	add	r3, r4
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	ee07 3a90 	vmov	s15, r3
  }
 8012376:	eeb0 0a67 	vmov.f32	s0, s15
 801237a:	3710      	adds	r7, #16
 801237c:	46bd      	mov	sp, r7
 801237e:	bdb0      	pop	{r4, r5, r7, pc}

08012380 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8012380:	b590      	push	{r4, r7, lr}
 8012382:	b083      	sub	sp, #12
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	f000 fbdd 	bl	8012b4a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8012390:	687c      	ldr	r4, [r7, #4]
 8012392:	6838      	ldr	r0, [r7, #0]
 8012394:	f000 fbcc 	bl	8012b30 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8012398:	4603      	mov	r3, r0
 801239a:	2200      	movs	r2, #0
 801239c:	4619      	mov	r1, r3
 801239e:	4620      	mov	r0, r4
 80123a0:	f7f5 f88b 	bl	80074ba <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	4618      	mov	r0, r3
 80123a8:	370c      	adds	r7, #12
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd90      	pop	{r4, r7, pc}
	...

080123b0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b084      	sub	sp, #16
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	60f8      	str	r0, [r7, #12]
 80123b8:	60b9      	str	r1, [r7, #8]
 80123ba:	607a      	str	r2, [r7, #4]
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	687a      	ldr	r2, [r7, #4]
 80123c0:	68b9      	ldr	r1, [r7, #8]
 80123c2:	4618      	mov	r0, r3
 80123c4:	f000 fbcc 	bl	8012b60 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	db06      	blt.n	80123dc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x2c>
 80123ce:	68b8      	ldr	r0, [r7, #8]
 80123d0:	f7f4 fe6b 	bl	80070aa <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80123d4:	4602      	mov	r2, r0
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	4293      	cmp	r3, r2
 80123da:	db05      	blt.n	80123e8 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x38>
 80123dc:	4b05      	ldr	r3, [pc, #20]	; (80123f4 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x44>)
 80123de:	4a06      	ldr	r2, [pc, #24]	; (80123f8 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x48>)
 80123e0:	2178      	movs	r1, #120	; 0x78
 80123e2:	4806      	ldr	r0, [pc, #24]	; (80123fc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x4c>)
 80123e4:	f00b fed6 	bl	801e194 <__assert_func>
    }
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	4618      	mov	r0, r3
 80123ec:	3710      	adds	r7, #16
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}
 80123f2:	bf00      	nop
 80123f4:	08024b80 	.word	0x08024b80
 80123f8:	080288e4 	.word	0x080288e4
 80123fc:	08024d04 	.word	0x08024d04

08012400 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8012400:	b480      	push	{r7}
 8012402:	b083      	sub	sp, #12
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	4618      	mov	r0, r3
 801240c:	370c      	adds	r7, #12
 801240e:	46bd      	mov	sp, r7
 8012410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012414:	4770      	bx	lr

08012416 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
 8012416:	b580      	push	{r7, lr}
 8012418:	b082      	sub	sp, #8
 801241a:	af00      	add	r7, sp, #0
 801241c:	6078      	str	r0, [r7, #4]
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f000 fbaf 	bl	8012b82 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	4618      	mov	r0, r3
 8012428:	3708      	adds	r7, #8
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}

0801242e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 801242e:	b580      	push	{r7, lr}
 8012430:	b082      	sub	sp, #8
 8012432:	af00      	add	r7, sp, #0
 8012434:	6078      	str	r0, [r7, #4]
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f7ff ffed 	bl	8012416 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	4618      	mov	r0, r3
 8012440:	3708      	adds	r7, #8
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}

08012446 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8012446:	b580      	push	{r7, lr}
 8012448:	b082      	sub	sp, #8
 801244a:	af00      	add	r7, sp, #0
 801244c:	6078      	str	r0, [r7, #4]
 801244e:	f7f4 fd0e 	bl	8006e6e <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8012452:	4603      	mov	r3, r0
 8012454:	4618      	mov	r0, r3
 8012456:	3708      	adds	r7, #8
 8012458:	46bd      	mov	sp, r7
 801245a:	bd80      	pop	{r7, pc}

0801245c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 801245c:	b580      	push	{r7, lr}
 801245e:	b082      	sub	sp, #8
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
 8012464:	f7f4 fd0b 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8012468:	4603      	mov	r3, r0
 801246a:	4618      	mov	r0, r3
 801246c:	3708      	adds	r7, #8
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}
	...

08012474 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8012474:	b5b0      	push	{r4, r5, r7, lr}
 8012476:	b084      	sub	sp, #16
 8012478:	af00      	add	r7, sp, #0
 801247a:	60f8      	str	r0, [r7, #12]
 801247c:	60b9      	str	r1, [r7, #8]
 801247e:	607a      	str	r2, [r7, #4]
 8012480:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8012482:	68f8      	ldr	r0, [r7, #12]
 8012484:	f7ff ffd3 	bl	801242e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 8012488:	68fa      	ldr	r2, [r7, #12]
 801248a:	68bb      	ldr	r3, [r7, #8]
 801248c:	4614      	mov	r4, r2
 801248e:	461d      	mov	r5, r3
 8012490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012494:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012498:	e884 0003 	stmia.w	r4, {r0, r1}
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	f103 0218 	add.w	r2, r3, #24
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	4614      	mov	r4, r2
 80124a6:	461d      	mov	r5, r3
 80124a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80124aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80124ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80124b0:	e884 0003 	stmia.w	r4, {r0, r1}
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	3330      	adds	r3, #48	; 0x30
 80124b8:	6839      	ldr	r1, [r7, #0]
 80124ba:	4618      	mov	r0, r3
 80124bc:	f7f3 fa38 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80124c0:	68b8      	ldr	r0, [r7, #8]
 80124c2:	f7f9 fba1 	bl	800bc08 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 80124c6:	4604      	mov	r4, r0
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	4618      	mov	r0, r3
 80124cc:	f7ff ffbb 	bl	8012446 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>
 80124d0:	4603      	mov	r3, r0
 80124d2:	429c      	cmp	r4, r3
 80124d4:	d10a      	bne.n	80124ec <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x78>
 80124d6:	68b8      	ldr	r0, [r7, #8]
 80124d8:	f7f9 fba3 	bl	800bc22 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 80124dc:	4604      	mov	r4, r0
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	4618      	mov	r0, r3
 80124e2:	f7ff ffbb 	bl	801245c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>
 80124e6:	4603      	mov	r3, r0
 80124e8:	429c      	cmp	r4, r3
 80124ea:	d005      	beq.n	80124f8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x84>
 80124ec:	4b05      	ldr	r3, [pc, #20]	; (8012504 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x90>)
 80124ee:	4a06      	ldr	r2, [pc, #24]	; (8012508 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x94>)
 80124f0:	2174      	movs	r1, #116	; 0x74
 80124f2:	4806      	ldr	r0, [pc, #24]	; (801250c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x98>)
 80124f4:	f00b fe4e 	bl	801e194 <__assert_func>
    }
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	4618      	mov	r0, r3
 80124fc:	3710      	adds	r7, #16
 80124fe:	46bd      	mov	sp, r7
 8012500:	bdb0      	pop	{r4, r5, r7, pc}
 8012502:	bf00      	nop
 8012504:	0801fffc 	.word	0x0801fffc
 8012508:	080289d4 	.word	0x080289d4
 801250c:	08020260 	.word	0x08020260

08012510 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8012510:	b580      	push	{r7, lr}
 8012512:	b082      	sub	sp, #8
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f000 f809 	bl	8012530 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 801251e:	4603      	mov	r3, r0
 8012520:	4618      	mov	r0, r3
 8012522:	f000 fb39 	bl	8012b98 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>
 8012526:	4603      	mov	r3, r0
 8012528:	4618      	mov	r0, r3
 801252a:	3708      	adds	r7, #8
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}

08012530 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8012530:	b480      	push	{r7}
 8012532:	b083      	sub	sp, #12
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	4618      	mov	r0, r3
 801253c:	370c      	adds	r7, #12
 801253e:	46bd      	mov	sp, r7
 8012540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012544:	4770      	bx	lr

08012546 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8012546:	b580      	push	{r7, lr}
 8012548:	b082      	sub	sp, #8
 801254a:	af00      	add	r7, sp, #0
 801254c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	4618      	mov	r0, r3
 8012552:	f7f9 fb59 	bl	800bc08 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 8012556:	4603      	mov	r3, r0
    }
 8012558:	4618      	mov	r0, r3
 801255a:	3708      	adds	r7, #8
 801255c:	46bd      	mov	sp, r7
 801255e:	bd80      	pop	{r7, pc}

08012560 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 8012560:	b580      	push	{r7, lr}
 8012562:	b082      	sub	sp, #8
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f000 fb3c 	bl	8012be6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	4618      	mov	r0, r3
 8012572:	3708      	adds	r7, #8
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}

08012578 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	4618      	mov	r0, r3
 8012584:	f7ff ffec 	bl	8012560 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	4618      	mov	r0, r3
 801258c:	3708      	adds	r7, #8
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}

08012592 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8012592:	b580      	push	{r7, lr}
 8012594:	b082      	sub	sp, #8
 8012596:	af00      	add	r7, sp, #0
 8012598:	6078      	str	r0, [r7, #4]
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	4618      	mov	r0, r3
 801259e:	f7ff ffeb 	bl	8012578 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	4618      	mov	r0, r3
 80125a6:	3708      	adds	r7, #8
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}

080125ac <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b082      	sub	sp, #8
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	4618      	mov	r0, r3
 80125b8:	f7ff ffeb 	bl	8012592 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	4618      	mov	r0, r3
 80125c0:	3708      	adds	r7, #8
 80125c2:	46bd      	mov	sp, r7
 80125c4:	bd80      	pop	{r7, pc}

080125c6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>:
  struct Data
 80125c6:	b580      	push	{r7, lr}
 80125c8:	b082      	sub	sp, #8
 80125ca:	af00      	add	r7, sp, #0
 80125cc:	6078      	str	r0, [r7, #4]
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	330c      	adds	r3, #12
 80125d2:	4618      	mov	r0, r3
 80125d4:	f7ff ffea 	bl	80125ac <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	3304      	adds	r3, #4
 80125dc:	4618      	mov	r0, r3
 80125de:	f7f9 fc09 	bl	800bdf4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	4618      	mov	r0, r3
 80125e6:	3708      	adds	r7, #8
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bd80      	pop	{r7, pc}

080125ec <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b082      	sub	sp, #8
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	4618      	mov	r0, r3
 80125f8:	f7ff ffe5 	bl	80125c6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	f000 fae7 	bl	8012bd0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	4618      	mov	r0, r3
 8012606:	3708      	adds	r7, #8
 8012608:	46bd      	mov	sp, r7
 801260a:	bd80      	pop	{r7, pc}

0801260c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 801260c:	b580      	push	{r7, lr}
 801260e:	b082      	sub	sp, #8
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	4618      	mov	r0, r3
 8012618:	f7ff ffe8 	bl	80125ec <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	4618      	mov	r0, r3
 8012620:	3708      	adds	r7, #8
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}

08012626 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8012626:	b580      	push	{r7, lr}
 8012628:	b082      	sub	sp, #8
 801262a:	af00      	add	r7, sp, #0
 801262c:	6078      	str	r0, [r7, #4]
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	4618      	mov	r0, r3
 8012632:	f7ff ffeb 	bl	801260c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	4618      	mov	r0, r3
 801263a:	3708      	adds	r7, #8
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}

08012640 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8012640:	b580      	push	{r7, lr}
 8012642:	ed2d 8b02 	vpush	{d8}
 8012646:	b088      	sub	sp, #32
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 801264e:	6878      	ldr	r0, [r7, #4]
 8012650:	f7ff fc53 	bl	8011efa <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>
 8012654:	4603      	mov	r3, r0
 8012656:	2b00      	cmp	r3, #0
 8012658:	dd05      	ble.n	8012666 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f7ff ff58 	bl	8012510 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>
 8012660:	4603      	mov	r3, r0
 8012662:	2b00      	cmp	r3, #0
 8012664:	dc06      	bgt.n	8012674 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8012666:	4b16      	ldr	r3, [pc, #88]	; (80126c0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8012668:	4a16      	ldr	r2, [pc, #88]	; (80126c4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 801266a:	f240 119b 	movw	r1, #411	; 0x19b
 801266e:	4816      	ldr	r0, [pc, #88]	; (80126c8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8012670:	f00b fd90 	bl	801e194 <__assert_func>
 8012674:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f7ff ff5a 	bl	8012530 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 801267c:	4602      	mov	r2, r0
 801267e:	f107 030c 	add.w	r3, r7, #12
 8012682:	4611      	mov	r1, r2
 8012684:	4618      	mov	r0, r3
 8012686:	f000 fa94 	bl	8012bb2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f7ff ff50 	bl	8012530 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8012690:	4602      	mov	r2, r0
 8012692:	f107 030c 	add.w	r3, r7, #12
 8012696:	6839      	ldr	r1, [r7, #0]
 8012698:	4618      	mov	r0, r3
 801269a:	f000 faaf 	bl	8012bfc <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>
 801269e:	eeb0 8a40 	vmov.f32	s16, s0
 80126a2:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80126a4:	f107 030c 	add.w	r3, r7, #12
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7ff ffbc 	bl	8012626 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80126ae:	eef0 7a48 	vmov.f32	s15, s16
}
 80126b2:	eeb0 0a67 	vmov.f32	s0, s15
 80126b6:	3720      	adds	r7, #32
 80126b8:	46bd      	mov	sp, r7
 80126ba:	ecbd 8b02 	vpop	{d8}
 80126be:	bd80      	pop	{r7, pc}
 80126c0:	0802507c 	.word	0x0802507c
 80126c4:	08028c44 	.word	0x08028c44
 80126c8:	08025288 	.word	0x08025288

080126cc <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80126cc:	b480      	push	{r7}
 80126ce:	b083      	sub	sp, #12
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	3310      	adds	r3, #16
 80126d8:	4618      	mov	r0, r3
 80126da:	370c      	adds	r7, #12
 80126dc:	46bd      	mov	sp, r7
 80126de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e2:	4770      	bx	lr

080126e4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80126e4:	b480      	push	{r7}
 80126e6:	b083      	sub	sp, #12
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	4618      	mov	r0, r3
 80126f0:	370c      	adds	r7, #12
 80126f2:	46bd      	mov	sp, r7
 80126f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f8:	4770      	bx	lr

080126fa <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80126fa:	b480      	push	{r7}
 80126fc:	b083      	sub	sp, #12
 80126fe:	af00      	add	r7, sp, #0
 8012700:	6078      	str	r0, [r7, #4]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	68db      	ldr	r3, [r3, #12]
 8012706:	4618      	mov	r0, r3
 8012708:	370c      	adds	r7, #12
 801270a:	46bd      	mov	sp, r7
 801270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012710:	4770      	bx	lr

08012712 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8012712:	b580      	push	{r7, lr}
 8012714:	b082      	sub	sp, #8
 8012716:	af00      	add	r7, sp, #0
 8012718:	6078      	str	r0, [r7, #4]
 801271a:	6039      	str	r1, [r7, #0]
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	6839      	ldr	r1, [r7, #0]
 8012720:	4618      	mov	r0, r3
 8012722:	f000 fa7c 	bl	8012c1e <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	4618      	mov	r0, r3
 801272a:	3708      	adds	r7, #8
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}

08012730 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>:
 8012730:	b580      	push	{r7, lr}
 8012732:	b082      	sub	sp, #8
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	6039      	str	r1, [r7, #0]
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	6839      	ldr	r1, [r7, #0]
 801273e:	4618      	mov	r0, r3
 8012740:	f7f8 f8bb 	bl	800a8ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	4618      	mov	r0, r3
 8012748:	3708      	adds	r7, #8
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}

0801274e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 801274e:	b5b0      	push	{r4, r5, r7, lr}
 8012750:	b082      	sub	sp, #8
 8012752:	af00      	add	r7, sp, #0
 8012754:	6078      	str	r0, [r7, #4]
 8012756:	6039      	str	r1, [r7, #0]
    return m_d.func()(m_d.lhsImpl.coeff(index), m_d.rhsImpl.coeff(index));
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	4618      	mov	r0, r3
 801275c:	f000 fa6e 	bl	8012c3c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 8012760:	4604      	mov	r4, r0
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	3304      	adds	r3, #4
 8012766:	6839      	ldr	r1, [r7, #0]
 8012768:	4618      	mov	r0, r3
 801276a:	f7ff fc7f 	bl	801206c <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 801276e:	4605      	mov	r5, r0
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	330c      	adds	r3, #12
 8012774:	6839      	ldr	r1, [r7, #0]
 8012776:	4618      	mov	r0, r3
 8012778:	f7ff fc78 	bl	801206c <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 801277c:	4603      	mov	r3, r0
 801277e:	461a      	mov	r2, r3
 8012780:	4629      	mov	r1, r5
 8012782:	4620      	mov	r0, r4
 8012784:	f7f6 ff39 	bl	80095fa <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012788:	eef0 7a40 	vmov.f32	s15, s0
  }
 801278c:	eeb0 0a67 	vmov.f32	s0, s15
 8012790:	3708      	adds	r7, #8
 8012792:	46bd      	mov	sp, r7
 8012794:	bdb0      	pop	{r4, r5, r7, pc}

08012796 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8012796:	b590      	push	{r4, r7, lr}
 8012798:	b083      	sub	sp, #12
 801279a:	af00      	add	r7, sp, #0
 801279c:	6078      	str	r0, [r7, #4]
 801279e:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f000 fa72 	bl	8012c8a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	4618      	mov	r0, r3
 80127aa:	f000 f81e 	bl	80127ea <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 80127ae:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	601a      	str	r2, [r3, #0]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	1d1c      	adds	r4, r3, #4
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	4618      	mov	r0, r3
 80127bc:	f000 fa49 	bl	8012c52 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 80127c0:	4603      	mov	r3, r0
 80127c2:	4619      	mov	r1, r3
 80127c4:	4620      	mov	r0, r4
 80127c6:	f7f4 fb2d 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	1d5c      	adds	r4, r3, #5
 80127ce:	683b      	ldr	r3, [r7, #0]
 80127d0:	4618      	mov	r0, r3
 80127d2:	f000 fa4c 	bl	8012c6e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 80127d6:	4603      	mov	r3, r0
 80127d8:	4619      	mov	r1, r3
 80127da:	4620      	mov	r0, r4
 80127dc:	f7f4 fb08 	bl	8006df0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	4618      	mov	r0, r3
 80127e4:	370c      	adds	r7, #12
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd90      	pop	{r4, r7, pc}

080127ea <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80127ea:	b480      	push	{r7}
 80127ec:	b083      	sub	sp, #12
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	6078      	str	r0, [r7, #4]
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	4618      	mov	r0, r3
 80127f8:	370c      	adds	r7, #12
 80127fa:	46bd      	mov	sp, r7
 80127fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012800:	4770      	bx	lr

08012802 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8012802:	b580      	push	{r7, lr}
 8012804:	b082      	sub	sp, #8
 8012806:	af00      	add	r7, sp, #0
 8012808:	6078      	str	r0, [r7, #4]
 801280a:	6039      	str	r1, [r7, #0]
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f000 fa47 	bl	8012ca0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	6839      	ldr	r1, [r7, #0]
 8012816:	4618      	mov	r0, r3
 8012818:	f000 fa4d 	bl	8012cb6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	4618      	mov	r0, r3
 8012820:	3708      	adds	r7, #8
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}

08012826 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012826:	b580      	push	{r7, lr}
 8012828:	b082      	sub	sp, #8
 801282a:	af00      	add	r7, sp, #0
 801282c:	6078      	str	r0, [r7, #4]
 801282e:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012830:	2200      	movs	r2, #0
 8012832:	2100      	movs	r1, #0
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	f000 fa66 	bl	8012d06 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 801283a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801283e:	eeb0 0a67 	vmov.f32	s0, s15
 8012842:	3708      	adds	r7, #8
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}

08012848 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8012848:	b580      	push	{r7, lr}
 801284a:	b084      	sub	sp, #16
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012852:	6839      	ldr	r1, [r7, #0]
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	f000 fa69 	bl	8012d2c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>
 801285a:	eef0 7a40 	vmov.f32	s15, s0
 801285e:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8012862:	6839      	ldr	r1, [r7, #0]
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f000 fa72 	bl	8012d4e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>
 801286a:	eef0 7a40 	vmov.f32	s15, s0
 801286e:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012872:	f107 020c 	add.w	r2, r7, #12
 8012876:	f107 0308 	add.w	r3, r7, #8
 801287a:	4619      	mov	r1, r3
 801287c:	6838      	ldr	r0, [r7, #0]
 801287e:	f7f6 febc 	bl	80095fa <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012882:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012886:	eeb0 0a67 	vmov.f32	s0, s15
 801288a:	3710      	adds	r7, #16
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}

08012890 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8012890:	b480      	push	{r7}
 8012892:	b083      	sub	sp, #12
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
 8012898:	6039      	str	r1, [r7, #0]
      : inner;
 801289a:	683b      	ldr	r3, [r7, #0]
  }
 801289c:	4618      	mov	r0, r3
 801289e:	370c      	adds	r7, #12
 80128a0:	46bd      	mov	sp, r7
 80128a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a6:	4770      	bx	lr

080128a8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 80128a8:	b480      	push	{r7}
 80128aa:	b083      	sub	sp, #12
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	6039      	str	r1, [r7, #0]
      : outer;
 80128b2:	687b      	ldr	r3, [r7, #4]
  }
 80128b4:	4618      	mov	r0, r3
 80128b6:	370c      	adds	r7, #12
 80128b8:	46bd      	mov	sp, r7
 80128ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128be:	4770      	bx	lr

080128c0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 80128c0:	b5b0      	push	{r4, r5, r7, lr}
 80128c2:	b086      	sub	sp, #24
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	60f8      	str	r0, [r7, #12]
 80128c8:	60b9      	str	r1, [r7, #8]
 80128ca:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	689c      	ldr	r4, [r3, #8]
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	687a      	ldr	r2, [r7, #4]
 80128d6:	68b9      	ldr	r1, [r7, #8]
 80128d8:	4618      	mov	r0, r3
 80128da:	f7f6 fb2d 	bl	8008f38 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 80128de:	4605      	mov	r5, r0
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	685b      	ldr	r3, [r3, #4]
 80128e4:	687a      	ldr	r2, [r7, #4]
 80128e6:	68b9      	ldr	r1, [r7, #8]
 80128e8:	4618      	mov	r0, r3
 80128ea:	f000 fa41 	bl	8012d70 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>
 80128ee:	eef0 7a40 	vmov.f32	s15, s0
 80128f2:	edc7 7a05 	vstr	s15, [r7, #20]
 80128f6:	f107 0314 	add.w	r3, r7, #20
 80128fa:	461a      	mov	r2, r3
 80128fc:	4629      	mov	r1, r5
 80128fe:	4620      	mov	r0, r4
 8012900:	f000 fa69 	bl	8012dd6 <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>
  }
 8012904:	bf00      	nop
 8012906:	3718      	adds	r7, #24
 8012908:	46bd      	mov	sp, r7
 801290a:	bdb0      	pop	{r4, r5, r7, pc}

0801290c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801290c:	b580      	push	{r7, lr}
 801290e:	b082      	sub	sp, #8
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012914:	2202      	movs	r2, #2
 8012916:	2100      	movs	r1, #0
 8012918:	6878      	ldr	r0, [r7, #4]
 801291a:	f7ff fc0d 	bl	8012138 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f000 fa70 	bl	8012e04 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>
  }
 8012924:	bf00      	nop
 8012926:	3708      	adds	r7, #8
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}

0801292c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>:
    StorageIndex startRow() const EIGEN_NOEXCEPT
 801292c:	b580      	push	{r7, lr}
 801292e:	b082      	sub	sp, #8
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
      return m_startRow.value();
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	3310      	adds	r3, #16
 8012938:	4618      	mov	r0, r3
 801293a:	f7fd fff8 	bl	801092e <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 801293e:	4603      	mov	r3, r0
    }
 8012940:	4618      	mov	r0, r3
 8012942:	3708      	adds	r7, #8
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>:
    StorageIndex startCol() const EIGEN_NOEXCEPT
 8012948:	b580      	push	{r7, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
      return m_startCol.value();
 8012950:	f7fd fbbd 	bl	80100ce <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 8012954:	4603      	mov	r3, r0
    }
 8012956:	4618      	mov	r0, r3
 8012958:	3708      	adds	r7, #8
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}

0801295e <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>:
  explicit unary_evaluator(const XprType& block)
 801295e:	b5b0      	push	{r4, r5, r7, lr}
 8012960:	b082      	sub	sp, #8
 8012962:	af00      	add	r7, sp, #0
 8012964:	6078      	str	r0, [r7, #4]
 8012966:	6039      	str	r1, [r7, #0]
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f000 fa66 	bl	8012e3a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 801296e:	687c      	ldr	r4, [r7, #4]
    : m_argImpl(block.nestedExpression()),
 8012970:	683b      	ldr	r3, [r7, #0]
 8012972:	4618      	mov	r0, r3
 8012974:	f000 fa56 	bl	8012e24 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 8012978:	4603      	mov	r3, r0
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 801297a:	4619      	mov	r1, r3
 801297c:	4620      	mov	r0, r4
 801297e:	f000 fa67 	bl	8012e50 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	f103 0410 	add.w	r4, r3, #16
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	4618      	mov	r0, r3
 801298c:	f7ff ffce 	bl	801292c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 8012990:	4603      	mov	r3, r0
 8012992:	4619      	mov	r1, r3
 8012994:	4620      	mov	r0, r4
 8012996:	f7fb fab9 	bl	800df0c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	f103 0414 	add.w	r4, r3, #20
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7ff ffd0 	bl	8012948 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 80129a8:	4603      	mov	r3, r0
 80129aa:	4619      	mov	r1, r3
 80129ac:	4620      	mov	r0, r4
 80129ae:	f7fb fb21 	bl	800dff4 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	f103 0518 	add.w	r5, r3, #24
 80129b8:	683b      	ldr	r3, [r7, #0]
 80129ba:	4618      	mov	r0, r3
 80129bc:	f7ff ffc4 	bl	8012948 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 80129c0:	4604      	mov	r4, r0
 80129c2:	683b      	ldr	r3, [r7, #0]
 80129c4:	4618      	mov	r0, r3
 80129c6:	f000 fa2d 	bl	8012e24 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 80129ca:	4603      	mov	r3, r0
 80129cc:	4618      	mov	r0, r3
 80129ce:	f7f5 fd6c 	bl	80084aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 80129d2:	4603      	mov	r3, r0
 80129d4:	fb03 f404 	mul.w	r4, r3, r4
 80129d8:	683b      	ldr	r3, [r7, #0]
 80129da:	4618      	mov	r0, r3
 80129dc:	f7ff ffa6 	bl	801292c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 80129e0:	4603      	mov	r3, r0
 80129e2:	4423      	add	r3, r4
 80129e4:	4619      	mov	r1, r3
 80129e6:	4628      	mov	r0, r5
 80129e8:	f7fb fa90 	bl	800df0c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
  { }
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	4618      	mov	r0, r3
 80129f0:	3708      	adds	r7, #8
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bdb0      	pop	{r4, r5, r7, pc}

080129f6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80129f6:	b580      	push	{r7, lr}
 80129f8:	b082      	sub	sp, #8
 80129fa:	af00      	add	r7, sp, #0
 80129fc:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	689b      	ldr	r3, [r3, #8]
             ? m_xpr.innerStride()
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7f5 ffdc 	bl	80089c0 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8012a08:	4603      	mov	r3, r0
    }
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3708      	adds	r7, #8
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}

08012a12 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8012a12:	b580      	push	{r7, lr}
 8012a14:	b082      	sub	sp, #8
 8012a16:	af00      	add	r7, sp, #0
 8012a18:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f7fb fa1e 	bl	800de60 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8012a24:	4603      	mov	r3, r0
    }
 8012a26:	4618      	mov	r0, r3
 8012a28:	3708      	adds	r7, #8
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}

08012a2e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012a2e:	b480      	push	{r7}
 8012a30:	b083      	sub	sp, #12
 8012a32:	af00      	add	r7, sp, #0
 8012a34:	6078      	str	r0, [r7, #4]
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	4618      	mov	r0, r3
 8012a3a:	370c      	adds	r7, #12
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a42:	4770      	bx	lr

08012a44 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8012a44:	b480      	push	{r7}
 8012a46:	b083      	sub	sp, #12
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	4618      	mov	r0, r3
 8012a52:	370c      	adds	r7, #12
 8012a54:	46bd      	mov	sp, r7
 8012a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5a:	4770      	bx	lr

08012a5c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8012a5c:	b480      	push	{r7}
 8012a5e:	b083      	sub	sp, #12
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	685b      	ldr	r3, [r3, #4]
 8012a68:	4618      	mov	r0, r3
 8012a6a:	370c      	adds	r7, #12
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a72:	4770      	bx	lr

08012a74 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>:
 8012a74:	b480      	push	{r7}
 8012a76:	b083      	sub	sp, #12
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	370c      	adds	r7, #12
 8012a82:	46bd      	mov	sp, r7
 8012a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a88:	4770      	bx	lr

08012a8a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8012a8a:	b580      	push	{r7, lr}
 8012a8c:	b086      	sub	sp, #24
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	60f8      	str	r0, [r7, #12]
 8012a92:	60b9      	str	r1, [r7, #8]
 8012a94:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8012a96:	6879      	ldr	r1, [r7, #4]
 8012a98:	68b8      	ldr	r0, [r7, #8]
 8012a9a:	f000 f9e8 	bl	8012e6e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8012a9e:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8012aa0:	6879      	ldr	r1, [r7, #4]
 8012aa2:	68b8      	ldr	r0, [r7, #8]
 8012aa4:	f000 f9ef 	bl	8012e86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8012aa8:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8012aaa:	693a      	ldr	r2, [r7, #16]
 8012aac:	6979      	ldr	r1, [r7, #20]
 8012aae:	68f8      	ldr	r0, [r7, #12]
 8012ab0:	f000 f9f5 	bl	8012e9e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8012ab4:	bf00      	nop
 8012ab6:	3718      	adds	r7, #24
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	bd80      	pop	{r7, pc}

08012abc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b082      	sub	sp, #8
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012ac4:	2201      	movs	r2, #1
 8012ac6:	2100      	movs	r1, #0
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f7ff ffde 	bl	8012a8a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012ace:	6878      	ldr	r0, [r7, #4]
 8012ad0:	f000 fa0b 	bl	8012eea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>
  }
 8012ad4:	bf00      	nop
 8012ad6:	3708      	adds	r7, #8
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}

08012adc <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b082      	sub	sp, #8
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	6839      	ldr	r1, [r7, #0]
 8012aea:	4618      	mov	r0, r3
 8012aec:	f000 fa0d 	bl	8012f0a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	4618      	mov	r0, r3
 8012af4:	f000 fa33 	bl	8012f5e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 8012af8:	bf00      	nop
  }
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	4618      	mov	r0, r3
 8012afe:	3708      	adds	r7, #8
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}

08012b04 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b082      	sub	sp, #8
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8012b0c:	f7f4 f9b7 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8012b10:	4603      	mov	r3, r0
  }
 8012b12:	4618      	mov	r0, r3
 8012b14:	3708      	adds	r7, #8
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}

08012b1a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8012b1a:	b580      	push	{r7, lr}
 8012b1c:	b082      	sub	sp, #8
 8012b1e:	af00      	add	r7, sp, #0
 8012b20:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8012b22:	f7f4 f9a4 	bl	8006e6e <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8012b26:	4603      	mov	r3, r0
  }
 8012b28:	4618      	mov	r0, r3
 8012b2a:	3708      	adds	r7, #8
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}

08012b30 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b082      	sub	sp, #8
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f000 fa1b 	bl	8012f76 <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 8012b40:	4603      	mov	r3, r0
 8012b42:	4618      	mov	r0, r3
 8012b44:	3708      	adds	r7, #8
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}

08012b4a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012b4a:	b480      	push	{r7}
 8012b4c:	b083      	sub	sp, #12
 8012b4e:	af00      	add	r7, sp, #0
 8012b50:	6078      	str	r0, [r7, #4]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	4618      	mov	r0, r3
 8012b56:	370c      	adds	r7, #12
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5e:	4770      	bx	lr

08012b60 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	60f8      	str	r0, [r7, #12]
 8012b68:	60b9      	str	r1, [r7, #8]
 8012b6a:	607a      	str	r2, [r7, #4]
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	687a      	ldr	r2, [r7, #4]
 8012b70:	68b9      	ldr	r1, [r7, #8]
 8012b72:	4618      	mov	r0, r3
 8012b74:	f000 fa16 	bl	8012fa4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	3710      	adds	r7, #16
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}

08012b82 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8012b82:	b480      	push	{r7}
 8012b84:	b083      	sub	sp, #12
 8012b86:	af00      	add	r7, sp, #0
 8012b88:	6078      	str	r0, [r7, #4]
    }
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	370c      	adds	r7, #12
 8012b90:	46bd      	mov	sp, r7
 8012b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b96:	4770      	bx	lr

08012b98 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b082      	sub	sp, #8
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7f9 f83d 	bl	800bc22 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8012ba8:	4603      	mov	r3, r0
    }
 8012baa:	4618      	mov	r0, r3
 8012bac:	3708      	adds	r7, #8
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}

08012bb2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8012bb2:	b580      	push	{r7, lr}
 8012bb4:	b082      	sub	sp, #8
 8012bb6:	af00      	add	r7, sp, #0
 8012bb8:	6078      	str	r0, [r7, #4]
 8012bba:	6039      	str	r1, [r7, #0]
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	6839      	ldr	r1, [r7, #0]
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f000 fa25 	bl	8013010 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3708      	adds	r7, #8
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}

08012bd0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8012bd0:	b480      	push	{r7}
 8012bd2:	b083      	sub	sp, #12
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	4618      	mov	r0, r3
 8012bdc:	370c      	adds	r7, #12
 8012bde:	46bd      	mov	sp, r7
 8012be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be4:	4770      	bx	lr

08012be6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
 8012be6:	b480      	push	{r7}
 8012be8:	b083      	sub	sp, #12
 8012bea:	af00      	add	r7, sp, #0
 8012bec:	6078      	str	r0, [r7, #4]
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	370c      	adds	r7, #12
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfa:	4770      	bx	lr

08012bfc <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b084      	sub	sp, #16
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	60f8      	str	r0, [r7, #12]
 8012c04:	60b9      	str	r1, [r7, #8]
 8012c06:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8012c08:	68b9      	ldr	r1, [r7, #8]
 8012c0a:	68f8      	ldr	r0, [r7, #12]
 8012c0c:	f000 fa0f 	bl	801302e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>
 8012c10:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012c14:	eeb0 0a67 	vmov.f32	s0, s15
 8012c18:	3710      	adds	r7, #16
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd80      	pop	{r7, pc}

08012c1e <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8012c1e:	b580      	push	{r7, lr}
 8012c20:	b082      	sub	sp, #8
 8012c22:	af00      	add	r7, sp, #0
 8012c24:	6078      	str	r0, [r7, #4]
 8012c26:	6039      	str	r1, [r7, #0]
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	6839      	ldr	r1, [r7, #0]
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f000 fa22 	bl	8013076 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	4618      	mov	r0, r3
 8012c36:	3708      	adds	r7, #8
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}

08012c3c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8012c3c:	b480      	push	{r7}
 8012c3e:	b083      	sub	sp, #12
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	4618      	mov	r0, r3
 8012c48:	370c      	adds	r7, #12
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c50:	4770      	bx	lr

08012c52 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8012c52:	b580      	push	{r7, lr}
 8012c54:	b082      	sub	sp, #8
 8012c56:	af00      	add	r7, sp, #0
 8012c58:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	689b      	ldr	r3, [r3, #8]
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7fb f973 	bl	800df4a <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 8012c64:	4603      	mov	r3, r0
    }
 8012c66:	4618      	mov	r0, r3
 8012c68:	3708      	adds	r7, #8
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd80      	pop	{r7, pc}

08012c6e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8012c6e:	b580      	push	{r7, lr}
 8012c70:	b082      	sub	sp, #8
 8012c72:	af00      	add	r7, sp, #0
 8012c74:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	689b      	ldr	r3, [r3, #8]
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7f4 fcd6 	bl	800762c <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 8012c80:	4603      	mov	r3, r0
    }
 8012c82:	4618      	mov	r0, r3
 8012c84:	3708      	adds	r7, #8
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}

08012c8a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012c8a:	b480      	push	{r7}
 8012c8c:	b083      	sub	sp, #12
 8012c8e:	af00      	add	r7, sp, #0
 8012c90:	6078      	str	r0, [r7, #4]
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	4618      	mov	r0, r3
 8012c96:	370c      	adds	r7, #12
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9e:	4770      	bx	lr

08012ca0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8012ca0:	b480      	push	{r7}
 8012ca2:	b083      	sub	sp, #12
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	4618      	mov	r0, r3
 8012cac:	370c      	adds	r7, #12
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb4:	4770      	bx	lr

08012cb6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8012cb6:	b590      	push	{r4, r7, lr}
 8012cb8:	b083      	sub	sp, #12
 8012cba:	af00      	add	r7, sp, #0
 8012cbc:	6078      	str	r0, [r7, #4]
 8012cbe:	6039      	str	r1, [r7, #0]
 8012cc0:	687c      	ldr	r4, [r7, #4]
 8012cc2:	6838      	ldr	r0, [r7, #0]
 8012cc4:	f000 fa14 	bl	80130f0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	4619      	mov	r1, r3
 8012ccc:	4620      	mov	r0, r4
 8012cce:	f7f2 fe2f 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	1d1c      	adds	r4, r3, #4
 8012cd6:	6838      	ldr	r0, [r7, #0]
 8012cd8:	f000 fa16 	bl	8013108 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	4619      	mov	r1, r3
 8012ce0:	4620      	mov	r0, r4
 8012ce2:	f000 fa28 	bl	8013136 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f103 0408 	add.w	r4, r3, #8
 8012cec:	6838      	ldr	r0, [r7, #0]
 8012cee:	f000 fa16 	bl	801311e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	4619      	mov	r1, r3
 8012cf6:	4620      	mov	r0, r4
 8012cf8:	f7f8 fdd9 	bl	800b8ae <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	4618      	mov	r0, r3
 8012d00:	370c      	adds	r7, #12
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd90      	pop	{r4, r7, pc}

08012d06 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8012d06:	b580      	push	{r7, lr}
 8012d08:	b084      	sub	sp, #16
 8012d0a:	af00      	add	r7, sp, #0
 8012d0c:	60f8      	str	r0, [r7, #12]
 8012d0e:	60b9      	str	r1, [r7, #8]
 8012d10:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	68ba      	ldr	r2, [r7, #8]
 8012d16:	6879      	ldr	r1, [r7, #4]
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f000 fa1b 	bl	8013154 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>
 8012d1e:	eef0 7a40 	vmov.f32	s15, s0
 8012d22:	eeb0 0a67 	vmov.f32	s0, s15
 8012d26:	3710      	adds	r7, #16
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	bd80      	pop	{r7, pc}

08012d2c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b082      	sub	sp, #8
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
 8012d34:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012d36:	2201      	movs	r2, #1
 8012d38:	2100      	movs	r1, #0
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f7ff ffe3 	bl	8012d06 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 8012d40:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012d44:	eeb0 0a67 	vmov.f32	s0, s15
 8012d48:	3708      	adds	r7, #8
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}

08012d4e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012d4e:	b580      	push	{r7, lr}
 8012d50:	b082      	sub	sp, #8
 8012d52:	af00      	add	r7, sp, #0
 8012d54:	6078      	str	r0, [r7, #4]
 8012d56:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012d58:	2202      	movs	r2, #2
 8012d5a:	2100      	movs	r1, #0
 8012d5c:	6878      	ldr	r0, [r7, #4]
 8012d5e:	f7ff ffd2 	bl	8012d06 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 8012d62:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012d66:	eeb0 0a67 	vmov.f32	s0, s15
 8012d6a:	3708      	adds	r7, #8
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd80      	pop	{r7, pc}

08012d70 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b0a4      	sub	sp, #144	; 0x90
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	60f8      	str	r0, [r7, #12]
 8012d78:	60b9      	str	r1, [r7, #8]
 8012d7a:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	6819      	ldr	r1, [r3, #0]
 8012d80:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012d84:	68ba      	ldr	r2, [r7, #8]
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7f8 fc16 	bl	800b5b8 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 8012d8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012d90:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012d94:	4611      	mov	r1, r2
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7f8 fc21 	bl	800b5de <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	6859      	ldr	r1, [r3, #4]
 8012da0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012da4:	687a      	ldr	r2, [r7, #4]
 8012da6:	4618      	mov	r0, r3
 8012da8:	f000 f9ff 	bl	80131aa <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>
 8012dac:	f107 0314 	add.w	r3, r7, #20
 8012db0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012db4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012db8:	4618      	mov	r0, r3
 8012dba:	f000 fa09 	bl	80131d0 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 8012dbe:	f107 0314 	add.w	r3, r7, #20
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f000 fa32 	bl	801322c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>
 8012dc8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8012dd0:	3790      	adds	r7, #144	; 0x90
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}

08012dd6 <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 8012dd6:	b480      	push	{r7}
 8012dd8:	b085      	sub	sp, #20
 8012dda:	af00      	add	r7, sp, #0
 8012ddc:	60f8      	str	r0, [r7, #12]
 8012dde:	60b9      	str	r1, [r7, #8]
 8012de0:	607a      	str	r2, [r7, #4]
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	ed93 7a00 	vldr	s14, [r3]
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	edd3 7a00 	vldr	s15, [r3]
 8012dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	edc3 7a00 	vstr	s15, [r3]
 8012df8:	bf00      	nop
 8012dfa:	3714      	adds	r7, #20
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e02:	4770      	bx	lr

08012e04 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	2101      	movs	r1, #1
 8012e10:	6878      	ldr	r0, [r7, #4]
 8012e12:	f7ff f991 	bl	8012138 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012e16:	6878      	ldr	r0, [r7, #4]
 8012e18:	f000 fa23 	bl	8013262 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>
  }
 8012e1c:	bf00      	nop
 8012e1e:	3708      	adds	r7, #8
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}

08012e24 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>:
    const typename internal::remove_all<XprTypeNested>::type& nestedExpression() const
 8012e24:	b480      	push	{r7}
 8012e26:	b083      	sub	sp, #12
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
      return m_xpr;
 8012e2c:	687b      	ldr	r3, [r7, #4]
    }
 8012e2e:	4618      	mov	r0, r3
 8012e30:	370c      	adds	r7, #12
 8012e32:	46bd      	mov	sp, r7
 8012e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e38:	4770      	bx	lr

08012e3a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012e3a:	b480      	push	{r7}
 8012e3c:	b083      	sub	sp, #12
 8012e3e:	af00      	add	r7, sp, #0
 8012e40:	6078      	str	r0, [r7, #4]
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	4618      	mov	r0, r3
 8012e46:	370c      	adds	r7, #12
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr

08012e50 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b082      	sub	sp, #8
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
 8012e58:	6039      	str	r1, [r7, #0]
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	6839      	ldr	r1, [r7, #0]
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7f7 fb49 	bl	800a4f6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	4618      	mov	r0, r3
 8012e68:	3708      	adds	r7, #8
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd80      	pop	{r7, pc}

08012e6e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8012e6e:	b480      	push	{r7}
 8012e70:	b083      	sub	sp, #12
 8012e72:	af00      	add	r7, sp, #0
 8012e74:	6078      	str	r0, [r7, #4]
 8012e76:	6039      	str	r1, [r7, #0]
      : inner;
 8012e78:	683b      	ldr	r3, [r7, #0]
  }
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	370c      	adds	r7, #12
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e84:	4770      	bx	lr

08012e86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8012e86:	b480      	push	{r7}
 8012e88:	b083      	sub	sp, #12
 8012e8a:	af00      	add	r7, sp, #0
 8012e8c:	6078      	str	r0, [r7, #4]
 8012e8e:	6039      	str	r1, [r7, #0]
      : outer;
 8012e90:	687b      	ldr	r3, [r7, #4]
  }
 8012e92:	4618      	mov	r0, r3
 8012e94:	370c      	adds	r7, #12
 8012e96:	46bd      	mov	sp, r7
 8012e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9c:	4770      	bx	lr

08012e9e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8012e9e:	b5b0      	push	{r4, r5, r7, lr}
 8012ea0:	b086      	sub	sp, #24
 8012ea2:	af00      	add	r7, sp, #0
 8012ea4:	60f8      	str	r0, [r7, #12]
 8012ea6:	60b9      	str	r1, [r7, #8]
 8012ea8:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	689c      	ldr	r4, [r3, #8]
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	687a      	ldr	r2, [r7, #4]
 8012eb4:	68b9      	ldr	r1, [r7, #8]
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7f6 f83e 	bl	8008f38 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8012ebc:	4605      	mov	r5, r0
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	685b      	ldr	r3, [r3, #4]
 8012ec2:	687a      	ldr	r2, [r7, #4]
 8012ec4:	68b9      	ldr	r1, [r7, #8]
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f000 f9db 	bl	8013282 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>
 8012ecc:	eef0 7a40 	vmov.f32	s15, s0
 8012ed0:	edc7 7a05 	vstr	s15, [r7, #20]
 8012ed4:	f107 0314 	add.w	r3, r7, #20
 8012ed8:	461a      	mov	r2, r3
 8012eda:	4629      	mov	r1, r5
 8012edc:	4620      	mov	r0, r4
 8012ede:	f7f5 fd9b 	bl	8008a18 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8012ee2:	bf00      	nop
 8012ee4:	3718      	adds	r7, #24
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bdb0      	pop	{r4, r5, r7, pc}

08012eea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012eea:	b580      	push	{r7, lr}
 8012eec:	b082      	sub	sp, #8
 8012eee:	af00      	add	r7, sp, #0
 8012ef0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012ef2:	2202      	movs	r2, #2
 8012ef4:	2100      	movs	r1, #0
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f7ff fdc7 	bl	8012a8a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	f000 f9f3 	bl	80132e8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>
  }
 8012f02:	bf00      	nop
 8012f04:	3708      	adds	r7, #8
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}

08012f0a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8012f0a:	b590      	push	{r4, r7, lr}
 8012f0c:	b083      	sub	sp, #12
 8012f0e:	af00      	add	r7, sp, #0
 8012f10:	6078      	str	r0, [r7, #4]
 8012f12:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f000 fa13 	bl	8013340 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f000 f81e 	bl	8012f5e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 8012f22:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	601a      	str	r2, [r3, #0]
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	1d1c      	adds	r4, r3, #4
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f000 f9ea 	bl	8013308 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>
 8012f34:	4603      	mov	r3, r0
 8012f36:	4619      	mov	r1, r3
 8012f38:	4620      	mov	r0, r4
 8012f3a:	f7f3 ff59 	bl	8006df0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	1d5c      	adds	r4, r3, #5
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	4618      	mov	r0, r3
 8012f46:	f000 f9ed 	bl	8013324 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	4619      	mov	r1, r3
 8012f4e:	4620      	mov	r0, r4
 8012f50:	f7f3 ff68 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	4618      	mov	r0, r3
 8012f58:	370c      	adds	r7, #12
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	bd90      	pop	{r4, r7, pc}

08012f5e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>:
 8012f5e:	b480      	push	{r7}
 8012f60:	b083      	sub	sp, #12
 8012f62:	af00      	add	r7, sp, #0
 8012f64:	6078      	str	r0, [r7, #4]
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	370c      	adds	r7, #12
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f74:	4770      	bx	lr

08012f76 <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8012f76:	b480      	push	{r7}
 8012f78:	b083      	sub	sp, #12
 8012f7a:	af00      	add	r7, sp, #0
 8012f7c:	6078      	str	r0, [r7, #4]
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	4618      	mov	r0, r3
 8012f82:	370c      	adds	r7, #12
 8012f84:	46bd      	mov	sp, r7
 8012f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8a:	4770      	bx	lr

08012f8c <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b082      	sub	sp, #8
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f000 f9de 	bl	8013356 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	3708      	adds	r7, #8
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}

08012fa4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8012fa4:	b5b0      	push	{r4, r5, r7, lr}
 8012fa6:	b084      	sub	sp, #16
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	60f8      	str	r0, [r7, #12]
 8012fac:	60b9      	str	r1, [r7, #8]
 8012fae:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8012fb0:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8012fb2:	68b8      	ldr	r0, [r7, #8]
 8012fb4:	f000 f9db 	bl	801336e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>
 8012fb8:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8012fba:	68b8      	ldr	r0, [r7, #8]
 8012fbc:	f000 f9ff 	bl	80133be <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8012fc0:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	fb02 f303 	mul.w	r3, r2, r3
 8012fc8:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8012fca:	441d      	add	r5, r3
 8012fcc:	68b8      	ldr	r0, [r7, #8]
 8012fce:	f7f3 f822 	bl	8006016 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8012fd2:	4602      	mov	r2, r0
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	4629      	mov	r1, r5
 8012fd8:	4620      	mov	r0, r4
 8012fda:	f000 fa11 	bl	8013400 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	3308      	adds	r3, #8
 8012fe2:	68ba      	ldr	r2, [r7, #8]
 8012fe4:	6812      	ldr	r2, [r2, #0]
 8012fe6:	601a      	str	r2, [r3, #0]
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	330c      	adds	r3, #12
 8012fec:	2100      	movs	r1, #0
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f7fa ff8c 	bl	800df0c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	3310      	adds	r3, #16
 8012ff8:	6879      	ldr	r1, [r7, #4]
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7fa fffa 	bl	800dff4 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 8013000:	68f8      	ldr	r0, [r7, #12]
 8013002:	f000 fa3b 	bl	801347c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>
    }
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	4618      	mov	r0, r3
 801300a:	3710      	adds	r7, #16
 801300c:	46bd      	mov	sp, r7
 801300e:	bdb0      	pop	{r4, r5, r7, pc}

08013010 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8013010:	b580      	push	{r7, lr}
 8013012:	b082      	sub	sp, #8
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	6039      	str	r1, [r7, #0]
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	6839      	ldr	r1, [r7, #0]
 801301e:	4618      	mov	r0, r3
 8013020:	f000 fa3c 	bl	801349c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	4618      	mov	r0, r3
 8013028:	3708      	adds	r7, #8
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}

0801302e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801302e:	b580      	push	{r7, lr}
 8013030:	b084      	sub	sp, #16
 8013032:	af00      	add	r7, sp, #0
 8013034:	6078      	str	r0, [r7, #4]
 8013036:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013038:	6839      	ldr	r1, [r7, #0]
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f000 fa40 	bl	80134c0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>
 8013040:	eef0 7a40 	vmov.f32	s15, s0
 8013044:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8013048:	6839      	ldr	r1, [r7, #0]
 801304a:	6878      	ldr	r0, [r7, #4]
 801304c:	f000 fa49 	bl	80134e2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>
 8013050:	eef0 7a40 	vmov.f32	s15, s0
 8013054:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013058:	f107 020c 	add.w	r2, r7, #12
 801305c:	f107 0308 	add.w	r3, r7, #8
 8013060:	4619      	mov	r1, r3
 8013062:	6838      	ldr	r0, [r7, #0]
 8013064:	f7f6 fac9 	bl	80095fa <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8013068:	eef0 7a40 	vmov.f32	s15, s0
  }
 801306c:	eeb0 0a67 	vmov.f32	s0, s15
 8013070:	3710      	adds	r7, #16
 8013072:	46bd      	mov	sp, r7
 8013074:	bd80      	pop	{r7, pc}

08013076 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>:
  explicit product_evaluator(const XprType& xpr)
 8013076:	b5b0      	push	{r4, r5, r7, lr}
 8013078:	b084      	sub	sp, #16
 801307a:	af00      	add	r7, sp, #0
 801307c:	6078      	str	r0, [r7, #4]
 801307e:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	4618      	mov	r0, r3
 8013084:	f000 fa51 	bl	801352a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	1d1c      	adds	r4, r3, #4
 801308c:	6838      	ldr	r0, [r7, #0]
 801308e:	f7f3 f8f9 	bl	8006284 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8013092:	4603      	mov	r3, r0
 8013094:	60bb      	str	r3, [r7, #8]
 8013096:	6838      	ldr	r0, [r7, #0]
 8013098:	f7f3 f901 	bl	800629e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 801309c:	4603      	mov	r3, r0
 801309e:	60fb      	str	r3, [r7, #12]
 80130a0:	f107 020c 	add.w	r2, r7, #12
 80130a4:	f107 0308 	add.w	r3, r7, #8
 80130a8:	4619      	mov	r1, r3
 80130aa:	4620      	mov	r0, r4
 80130ac:	f000 fa4a 	bl	8013544 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	4619      	mov	r1, r3
 80130b4:	2004      	movs	r0, #4
 80130b6:	f7ed ff89 	bl	8000fcc <_ZnwjPv>
 80130ba:	4602      	mov	r2, r0
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	3304      	adds	r3, #4
 80130c0:	4619      	mov	r1, r3
 80130c2:	4610      	mov	r0, r2
 80130c4:	f7f7 fbf9 	bl	800a8ba <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	1d1c      	adds	r4, r3, #4
 80130cc:	6838      	ldr	r0, [r7, #0]
 80130ce:	f000 fa52 	bl	8013576 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 80130d2:	4605      	mov	r5, r0
 80130d4:	6838      	ldr	r0, [r7, #0]
 80130d6:	f000 fa59 	bl	801358c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 80130da:	4603      	mov	r3, r0
 80130dc:	461a      	mov	r2, r3
 80130de:	4629      	mov	r1, r5
 80130e0:	4620      	mov	r0, r4
 80130e2:	f000 fa5f 	bl	80135a4 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>
  }
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	4618      	mov	r0, r3
 80130ea:	3710      	adds	r7, #16
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bdb0      	pop	{r4, r5, r7, pc}

080130f0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80130f0:	b480      	push	{r7}
 80130f2:	b083      	sub	sp, #12
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	3308      	adds	r3, #8
 80130fc:	4618      	mov	r0, r3
 80130fe:	370c      	adds	r7, #12
 8013100:	46bd      	mov	sp, r7
 8013102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013106:	4770      	bx	lr

08013108 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8013108:	b480      	push	{r7}
 801310a:	b083      	sub	sp, #12
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	4618      	mov	r0, r3
 8013114:	370c      	adds	r7, #12
 8013116:	46bd      	mov	sp, r7
 8013118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311c:	4770      	bx	lr

0801311e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 801311e:	b480      	push	{r7}
 8013120:	b083      	sub	sp, #12
 8013122:	af00      	add	r7, sp, #0
 8013124:	6078      	str	r0, [r7, #4]
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	685b      	ldr	r3, [r3, #4]
 801312a:	4618      	mov	r0, r3
 801312c:	370c      	adds	r7, #12
 801312e:	46bd      	mov	sp, r7
 8013130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013134:	4770      	bx	lr

08013136 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013136:	b580      	push	{r7, lr}
 8013138:	b082      	sub	sp, #8
 801313a:	af00      	add	r7, sp, #0
 801313c:	6078      	str	r0, [r7, #4]
 801313e:	6039      	str	r1, [r7, #0]
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	6839      	ldr	r1, [r7, #0]
 8013144:	4618      	mov	r0, r3
 8013146:	f000 fa55 	bl	80135f4 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	4618      	mov	r0, r3
 801314e:	3708      	adds	r7, #8
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}

08013154 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013154:	b590      	push	{r4, r7, lr}
 8013156:	b087      	sub	sp, #28
 8013158:	af00      	add	r7, sp, #0
 801315a:	60f8      	str	r0, [r7, #12]
 801315c:	60b9      	str	r1, [r7, #8]
 801315e:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	4618      	mov	r0, r3
 8013164:	f000 fa55 	bl	8013612 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 8013168:	4604      	mov	r4, r0
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	3304      	adds	r3, #4
 801316e:	687a      	ldr	r2, [r7, #4]
 8013170:	68b9      	ldr	r1, [r7, #8]
 8013172:	4618      	mov	r0, r3
 8013174:	f000 fa58 	bl	8013628 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 8013178:	eef0 7a40 	vmov.f32	s15, s0
 801317c:	edc7 7a05 	vstr	s15, [r7, #20]
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	3308      	adds	r3, #8
 8013184:	687a      	ldr	r2, [r7, #4]
 8013186:	68b9      	ldr	r1, [r7, #8]
 8013188:	4618      	mov	r0, r3
 801318a:	f7fe f9d0 	bl	801152e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 801318e:	4602      	mov	r2, r0
 8013190:	f107 0314 	add.w	r3, r7, #20
 8013194:	4619      	mov	r1, r3
 8013196:	4620      	mov	r0, r4
 8013198:	f7fc fa70 	bl	800f67c <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 801319c:	eef0 7a40 	vmov.f32	s15, s0
  }
 80131a0:	eeb0 0a67 	vmov.f32	s0, s15
 80131a4:	371c      	adds	r7, #28
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd90      	pop	{r4, r7, pc}

080131aa <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 80131aa:	b580      	push	{r7, lr}
 80131ac:	b084      	sub	sp, #16
 80131ae:	af00      	add	r7, sp, #0
 80131b0:	60f8      	str	r0, [r7, #12]
 80131b2:	60b9      	str	r1, [r7, #8]
 80131b4:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 80131b6:	68b8      	ldr	r0, [r7, #8]
 80131b8:	f7f2 ff6a 	bl	8006090 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80131bc:	4603      	mov	r3, r0
 80131be:	687a      	ldr	r2, [r7, #4]
 80131c0:	4619      	mov	r1, r3
 80131c2:	68f8      	ldr	r0, [r7, #12]
 80131c4:	f000 fa46 	bl	8013654 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>
}
 80131c8:	68f8      	ldr	r0, [r7, #12]
 80131ca:	3710      	adds	r7, #16
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}

080131d0 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 80131d0:	b5b0      	push	{r4, r5, r7, lr}
 80131d2:	b086      	sub	sp, #24
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	60f8      	str	r0, [r7, #12]
 80131d8:	60b9      	str	r1, [r7, #8]
 80131da:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 80131dc:	68b8      	ldr	r0, [r7, #8]
 80131de:	f7f8 ffff 	bl	800c1e0 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 80131e2:	4604      	mov	r4, r0
 80131e4:	6878      	ldr	r0, [r7, #4]
 80131e6:	f000 fa5d 	bl	80136a4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>
 80131ea:	4605      	mov	r5, r0
 80131ec:	f107 0314 	add.w	r3, r7, #20
 80131f0:	4618      	mov	r0, r3
 80131f2:	f7f2 fb13 	bl	800581c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 80131f6:	f107 0314 	add.w	r3, r7, #20
 80131fa:	462a      	mov	r2, r5
 80131fc:	4621      	mov	r1, r4
 80131fe:	68f8      	ldr	r0, [r7, #12]
 8013200:	f000 fa8a 	bl	8013718 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 8013204:	68f8      	ldr	r0, [r7, #12]
 8013206:	3718      	adds	r7, #24
 8013208:	46bd      	mov	sp, r7
 801320a:	bdb0      	pop	{r4, r5, r7, pc}

0801320c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 801320c:	b580      	push	{r7, lr}
 801320e:	b082      	sub	sp, #8
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f000 fadd 	bl	80137d4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 801321a:	4603      	mov	r3, r0
 801321c:	4618      	mov	r0, r3
 801321e:	f000 fae4 	bl	80137ea <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>
 8013222:	4603      	mov	r3, r0
 8013224:	4618      	mov	r0, r3
 8013226:	3708      	adds	r7, #8
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}

0801322c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 801322c:	b590      	push	{r4, r7, lr}
 801322e:	b085      	sub	sp, #20
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	f000 facd 	bl	80137d4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 801323a:	4604      	mov	r4, r0
 801323c:	f107 030c 	add.w	r3, r7, #12
 8013240:	4618      	mov	r0, r3
 8013242:	f7f2 fde2 	bl	8005e0a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8013246:	f107 030c 	add.w	r3, r7, #12
 801324a:	4619      	mov	r1, r3
 801324c:	4620      	mov	r0, r4
 801324e:	f000 fb49 	bl	80138e4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8013252:	eef0 7a40 	vmov.f32	s15, s0
 8013256:	bf00      	nop
}
 8013258:	eeb0 0a67 	vmov.f32	s0, s15
 801325c:	3714      	adds	r7, #20
 801325e:	46bd      	mov	sp, r7
 8013260:	bd90      	pop	{r4, r7, pc}

08013262 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013262:	b580      	push	{r7, lr}
 8013264:	b082      	sub	sp, #8
 8013266:	af00      	add	r7, sp, #0
 8013268:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801326a:	2201      	movs	r2, #1
 801326c:	2101      	movs	r1, #1
 801326e:	6878      	ldr	r0, [r7, #4]
 8013270:	f7fe ff62 	bl	8012138 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f000 fb7b 	bl	8013970 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>
  }
 801327a:	bf00      	nop
 801327c:	3708      	adds	r7, #8
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}

08013282 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 8013282:	b580      	push	{r7, lr}
 8013284:	b0a4      	sub	sp, #144	; 0x90
 8013286:	af00      	add	r7, sp, #0
 8013288:	60f8      	str	r0, [r7, #12]
 801328a:	60b9      	str	r1, [r7, #8]
 801328c:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	6819      	ldr	r1, [r3, #0]
 8013292:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013296:	68ba      	ldr	r2, [r7, #8]
 8013298:	4618      	mov	r0, r3
 801329a:	f7f7 ffbd 	bl	800b218 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 801329e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80132a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80132a6:	4611      	mov	r1, r2
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7f7 ffc8 	bl	800b23e <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	6859      	ldr	r1, [r3, #4]
 80132b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80132b6:	687a      	ldr	r2, [r7, #4]
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7f9 f9f4 	bl	800c6a6 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 80132be:	f107 0314 	add.w	r3, r7, #20
 80132c2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80132c6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80132ca:	4618      	mov	r0, r3
 80132cc:	f7f9 f9fe 	bl	800c6cc <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 80132d0:	f107 0314 	add.w	r3, r7, #20
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7f9 fa27 	bl	800c728 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 80132da:	eef0 7a40 	vmov.f32	s15, s0
  }
 80132de:	eeb0 0a67 	vmov.f32	s0, s15
 80132e2:	3790      	adds	r7, #144	; 0x90
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}

080132e8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b082      	sub	sp, #8
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80132f0:	2200      	movs	r2, #0
 80132f2:	2101      	movs	r1, #1
 80132f4:	6878      	ldr	r0, [r7, #4]
 80132f6:	f7ff fbc8 	bl	8012a8a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80132fa:	6878      	ldr	r0, [r7, #4]
 80132fc:	f000 fb48 	bl	8013990 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>
  }
 8013300:	bf00      	nop
 8013302:	3708      	adds	r7, #8
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}

08013308 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8013308:	b580      	push	{r7, lr}
 801330a:	b082      	sub	sp, #8
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	3308      	adds	r3, #8
             ? m_xpr.innerStride()
 8013314:	4618      	mov	r0, r3
 8013316:	f7fd fc40 	bl	8010b9a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>
 801331a:	4603      	mov	r3, r0
    }
 801331c:	4618      	mov	r0, r3
 801331e:	3708      	adds	r7, #8
 8013320:	46bd      	mov	sp, r7
 8013322:	bd80      	pop	{r7, pc}

08013324 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8013324:	b580      	push	{r7, lr}
 8013326:	b082      	sub	sp, #8
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 8013330:	4618      	mov	r0, r3
 8013332:	f7fd fc1e 	bl	8010b72 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 8013336:	4603      	mov	r3, r0
    }
 8013338:	4618      	mov	r0, r3
 801333a:	3708      	adds	r7, #8
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}

08013340 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013340:	b480      	push	{r7}
 8013342:	b083      	sub	sp, #12
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	4618      	mov	r0, r3
 801334c:	370c      	adds	r7, #12
 801334e:	46bd      	mov	sp, r7
 8013350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013354:	4770      	bx	lr

08013356 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 8013356:	b580      	push	{r7, lr}
 8013358:	b082      	sub	sp, #8
 801335a:	af00      	add	r7, sp, #0
 801335c:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f000 fb36 	bl	80139d0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>
 8013364:	4603      	mov	r3, r0
    }
 8013366:	4618      	mov	r0, r3
 8013368:	3708      	adds	r7, #8
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}

0801336e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 801336e:	b580      	push	{r7, lr}
 8013370:	b082      	sub	sp, #8
 8013372:	af00      	add	r7, sp, #0
 8013374:	6078      	str	r0, [r7, #4]
 8013376:	6878      	ldr	r0, [r7, #4]
 8013378:	f7f2 fe1e 	bl	8005fb8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 801337c:	4603      	mov	r3, r0
 801337e:	4618      	mov	r0, r3
 8013380:	f7fe fd63 	bl	8011e4a <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8013384:	4603      	mov	r3, r0
 8013386:	4618      	mov	r0, r3
 8013388:	f7ff fbd2 	bl	8012b30 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 801338c:	4603      	mov	r3, r0
 801338e:	4618      	mov	r0, r3
 8013390:	3708      	adds	r7, #8
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}

08013396 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 8013396:	b580      	push	{r7, lr}
 8013398:	b082      	sub	sp, #8
 801339a:	af00      	add	r7, sp, #0
 801339c:	6078      	str	r0, [r7, #4]
 801339e:	6878      	ldr	r0, [r7, #4]
 80133a0:	f7f2 fe0a 	bl	8005fb8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 80133a4:	4603      	mov	r3, r0
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7fe fd4f 	bl	8011e4a <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 80133ac:	4603      	mov	r3, r0
 80133ae:	4618      	mov	r0, r3
 80133b0:	f000 fb30 	bl	8013a14 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 80133b4:	4603      	mov	r3, r0
 80133b6:	4618      	mov	r0, r3
 80133b8:	3708      	adds	r7, #8
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}

080133be <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 80133be:	b580      	push	{r7, lr}
 80133c0:	b082      	sub	sp, #8
 80133c2:	af00      	add	r7, sp, #0
 80133c4:	6078      	str	r0, [r7, #4]
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	f7f2 fdf6 	bl	8005fb8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 80133cc:	4603      	mov	r3, r0
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7fe fd3b 	bl	8011e4a <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 80133d4:	4603      	mov	r3, r0
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7ff fdd8 	bl	8012f8c <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 80133dc:	4603      	mov	r3, r0
 80133de:	4618      	mov	r0, r3
 80133e0:	3708      	adds	r7, #8
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bd80      	pop	{r7, pc}

080133e6 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
 80133e6:	b580      	push	{r7, lr}
 80133e8:	b082      	sub	sp, #8
 80133ea:	af00      	add	r7, sp, #0
 80133ec:	6078      	str	r0, [r7, #4]
 80133ee:	6878      	ldr	r0, [r7, #4]
 80133f0:	f000 fb1b 	bl	8013a2a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	4618      	mov	r0, r3
 80133f8:	3708      	adds	r7, #8
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd80      	pop	{r7, pc}
	...

08013400 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8013400:	b580      	push	{r7, lr}
 8013402:	b084      	sub	sp, #16
 8013404:	af00      	add	r7, sp, #0
 8013406:	60f8      	str	r0, [r7, #12]
 8013408:	60b9      	str	r1, [r7, #8]
 801340a:	607a      	str	r2, [r7, #4]
 801340c:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 801340e:	68f8      	ldr	r0, [r7, #12]
 8013410:	f7ff ffe9 	bl	80133e6 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	68ba      	ldr	r2, [r7, #8]
 8013418:	601a      	str	r2, [r3, #0]
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	3304      	adds	r3, #4
 801341e:	6879      	ldr	r1, [r7, #4]
 8013420:	4618      	mov	r0, r3
 8013422:	f7f3 fce5 	bl	8006df0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	3305      	adds	r3, #5
 801342a:	6839      	ldr	r1, [r7, #0]
 801342c:	4618      	mov	r0, r3
 801342e:	f7f3 fcf9 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d011      	beq.n	801345c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	2b00      	cmp	r3, #0
 801343c:	db08      	blt.n	8013450 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	2b03      	cmp	r3, #3
 8013442:	d105      	bne.n	8013450 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	2b00      	cmp	r3, #0
 8013448:	db02      	blt.n	8013450 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	2b01      	cmp	r3, #1
 801344e:	d005      	beq.n	801345c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 8013450:	4b07      	ldr	r3, [pc, #28]	; (8013470 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 8013452:	4a08      	ldr	r2, [pc, #32]	; (8013474 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 8013454:	21b0      	movs	r1, #176	; 0xb0
 8013456:	4808      	ldr	r0, [pc, #32]	; (8013478 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 8013458:	f00a fe9c 	bl	801e194 <__assert_func>
      checkSanity<Derived>();
 801345c:	2100      	movs	r1, #0
 801345e:	68f8      	ldr	r0, [r7, #12]
 8013460:	f000 faee 	bl	8013a40 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	4618      	mov	r0, r3
 8013468:	3710      	adds	r7, #16
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}
 801346e:	bf00      	nop
 8013470:	08026720 	.word	0x08026720
 8013474:	08028e1c 	.word	0x08028e1c
 8013478:	080268d0 	.word	0x080268d0

0801347c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 801347c:	b580      	push	{r7, lr}
 801347e:	b082      	sub	sp, #8
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	3308      	adds	r3, #8
 8013488:	4618      	mov	r0, r3
 801348a:	f7ff ff98 	bl	80133be <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 801348e:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	615a      	str	r2, [r3, #20]
    }
 8013494:	bf00      	nop
 8013496:	3708      	adds	r7, #8
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}

0801349c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801349c:	b580      	push	{r7, lr}
 801349e:	b082      	sub	sp, #8
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
 80134a4:	6039      	str	r1, [r7, #0]
 80134a6:	6878      	ldr	r0, [r7, #4]
 80134a8:	f000 fad5 	bl	8013a56 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	6839      	ldr	r1, [r7, #0]
 80134b0:	4618      	mov	r0, r3
 80134b2:	f000 fadb 	bl	8013a6c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>
  }
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	4618      	mov	r0, r3
 80134ba:	3708      	adds	r7, #8
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}

080134c0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b082      	sub	sp, #8
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
 80134c8:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80134ca:	2200      	movs	r2, #0
 80134cc:	2100      	movs	r1, #0
 80134ce:	6878      	ldr	r0, [r7, #4]
 80134d0:	f000 faf4 	bl	8013abc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80134d4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80134d8:	eeb0 0a67 	vmov.f32	s0, s15
 80134dc:	3708      	adds	r7, #8
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}

080134e2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80134e2:	b580      	push	{r7, lr}
 80134e4:	b084      	sub	sp, #16
 80134e6:	af00      	add	r7, sp, #0
 80134e8:	6078      	str	r0, [r7, #4]
 80134ea:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80134ec:	6839      	ldr	r1, [r7, #0]
 80134ee:	6878      	ldr	r0, [r7, #4]
 80134f0:	f000 faf7 	bl	8013ae2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>
 80134f4:	eef0 7a40 	vmov.f32	s15, s0
 80134f8:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80134fc:	6839      	ldr	r1, [r7, #0]
 80134fe:	6878      	ldr	r0, [r7, #4]
 8013500:	f000 fb00 	bl	8013b04 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>
 8013504:	eef0 7a40 	vmov.f32	s15, s0
 8013508:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801350c:	f107 020c 	add.w	r2, r7, #12
 8013510:	f107 0308 	add.w	r3, r7, #8
 8013514:	4619      	mov	r1, r3
 8013516:	6838      	ldr	r0, [r7, #0]
 8013518:	f7f6 f86f 	bl	80095fa <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 801351c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013520:	eeb0 0a67 	vmov.f32	s0, s15
 8013524:	3710      	adds	r7, #16
 8013526:	46bd      	mov	sp, r7
 8013528:	bd80      	pop	{r7, pc}

0801352a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  evaluator() {}
 801352a:	b580      	push	{r7, lr}
 801352c:	b082      	sub	sp, #8
 801352e:	af00      	add	r7, sp, #0
 8013530:	6078      	str	r0, [r7, #4]
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	4618      	mov	r0, r3
 8013536:	f000 faf6 	bl	8013b26 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	4618      	mov	r0, r3
 801353e:	3708      	adds	r7, #8
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}

08013544 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8013544:	b580      	push	{r7, lr}
 8013546:	b084      	sub	sp, #16
 8013548:	af00      	add	r7, sp, #0
 801354a:	60f8      	str	r0, [r7, #12]
 801354c:	60b9      	str	r1, [r7, #8]
 801354e:	607a      	str	r2, [r7, #4]
    {
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	4618      	mov	r0, r3
 8013554:	f7f1 fde2 	bl	800511c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 8013558:	f7f1 fdf0 	bl	800513c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 801355c:	68f8      	ldr	r0, [r7, #12]
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	6819      	ldr	r1, [r3, #0]
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681a      	ldr	r2, [r3, #0]
 8013566:	2300      	movs	r3, #0
 8013568:	f000 faef 	bl	8013b4a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	4618      	mov	r0, r3
 8013570:	3710      	adds	r7, #16
 8013572:	46bd      	mov	sp, r7
 8013574:	bd80      	pop	{r7, pc}

08013576 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8013576:	b480      	push	{r7}
 8013578:	b083      	sub	sp, #12
 801357a:	af00      	add	r7, sp, #0
 801357c:	6078      	str	r0, [r7, #4]
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	4618      	mov	r0, r3
 8013582:	370c      	adds	r7, #12
 8013584:	46bd      	mov	sp, r7
 8013586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358a:	4770      	bx	lr

0801358c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 801358c:	b480      	push	{r7}
 801358e:	b083      	sub	sp, #12
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	3308      	adds	r3, #8
 8013598:	4618      	mov	r0, r3
 801359a:	370c      	adds	r7, #12
 801359c:	46bd      	mov	sp, r7
 801359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a2:	4770      	bx	lr

080135a4 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80135a4:	b590      	push	{r4, r7, lr}
 80135a6:	b08b      	sub	sp, #44	; 0x2c
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	60f8      	str	r0, [r7, #12]
 80135ac:	60b9      	str	r1, [r7, #8]
 80135ae:	607a      	str	r2, [r7, #4]
    dst.coeffRef(0,0) = (lhs.transpose().cwiseProduct(rhs)).sum();
 80135b0:	f107 0320 	add.w	r3, r7, #32
 80135b4:	68b9      	ldr	r1, [r7, #8]
 80135b6:	4618      	mov	r0, r3
 80135b8:	f000 fadb 	bl	8013b72 <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>
 80135bc:	f107 0310 	add.w	r3, r7, #16
 80135c0:	f107 0120 	add.w	r1, r7, #32
 80135c4:	687a      	ldr	r2, [r7, #4]
 80135c6:	4618      	mov	r0, r3
 80135c8:	f000 fae4 	bl	8013b94 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	2200      	movs	r2, #0
 80135d0:	2100      	movs	r1, #0
 80135d2:	4618      	mov	r0, r3
 80135d4:	f7f3 fb99 	bl	8006d0a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 80135d8:	4604      	mov	r4, r0
 80135da:	f107 0310 	add.w	r3, r7, #16
 80135de:	4618      	mov	r0, r3
 80135e0:	f000 fb06 	bl	8013bf0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>
 80135e4:	eef0 7a40 	vmov.f32	s15, s0
 80135e8:	edc4 7a00 	vstr	s15, [r4]
  }
 80135ec:	bf00      	nop
 80135ee:	372c      	adds	r7, #44	; 0x2c
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd90      	pop	{r4, r7, pc}

080135f4 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b082      	sub	sp, #8
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	6039      	str	r1, [r7, #0]
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	6839      	ldr	r1, [r7, #0]
 8013602:	4618      	mov	r0, r3
 8013604:	f000 fb0f 	bl	8013c26 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	4618      	mov	r0, r3
 801360c:	3708      	adds	r7, #8
 801360e:	46bd      	mov	sp, r7
 8013610:	bd80      	pop	{r7, pc}

08013612 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8013612:	b480      	push	{r7}
 8013614:	b083      	sub	sp, #12
 8013616:	af00      	add	r7, sp, #0
 8013618:	6078      	str	r0, [r7, #4]
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	4618      	mov	r0, r3
 801361e:	370c      	adds	r7, #12
 8013620:	46bd      	mov	sp, r7
 8013622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013626:	4770      	bx	lr

08013628 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013628:	b580      	push	{r7, lr}
 801362a:	b084      	sub	sp, #16
 801362c:	af00      	add	r7, sp, #0
 801362e:	60f8      	str	r0, [r7, #12]
 8013630:	60b9      	str	r1, [r7, #8]
 8013632:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	68ba      	ldr	r2, [r7, #8]
 8013638:	6879      	ldr	r1, [r7, #4]
 801363a:	4618      	mov	r0, r3
 801363c:	f000 fb09 	bl	8013c52 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8013640:	4603      	mov	r3, r0
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	ee07 3a90 	vmov	s15, r3
  }
 8013648:	eeb0 0a67 	vmov.f32	s0, s15
 801364c:	3710      	adds	r7, #16
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}
	...

08013654 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8013654:	b580      	push	{r7, lr}
 8013656:	b084      	sub	sp, #16
 8013658:	af00      	add	r7, sp, #0
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	607a      	str	r2, [r7, #4]
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	687a      	ldr	r2, [r7, #4]
 8013664:	68b9      	ldr	r1, [r7, #8]
 8013666:	4618      	mov	r0, r3
 8013668:	f000 fb0b 	bl	8013c82 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2b00      	cmp	r3, #0
 8013670:	db07      	blt.n	8013682 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 8013672:	68bb      	ldr	r3, [r7, #8]
 8013674:	4618      	mov	r0, r3
 8013676:	f7f1 ffe7 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801367a:	4602      	mov	r2, r0
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	4293      	cmp	r3, r2
 8013680:	db05      	blt.n	801368e <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 8013682:	4b05      	ldr	r3, [pc, #20]	; (8013698 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x44>)
 8013684:	4a05      	ldr	r2, [pc, #20]	; (801369c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 8013686:	2178      	movs	r1, #120	; 0x78
 8013688:	4805      	ldr	r0, [pc, #20]	; (80136a0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 801368a:	f00a fd83 	bl	801e194 <__assert_func>
    }
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	4618      	mov	r0, r3
 8013692:	3710      	adds	r7, #16
 8013694:	46bd      	mov	sp, r7
 8013696:	bd80      	pop	{r7, pc}
 8013698:	08024b80 	.word	0x08024b80
 801369c:	08028f30 	.word	0x08028f30
 80136a0:	08024d04 	.word	0x08024d04

080136a4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80136a4:	b480      	push	{r7}
 80136a6:	b083      	sub	sp, #12
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	4618      	mov	r0, r3
 80136b0:	370c      	adds	r7, #12
 80136b2:	46bd      	mov	sp, r7
 80136b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b8:	4770      	bx	lr

080136ba <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
 80136ba:	b580      	push	{r7, lr}
 80136bc:	b082      	sub	sp, #8
 80136be:	af00      	add	r7, sp, #0
 80136c0:	6078      	str	r0, [r7, #4]
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f000 faee 	bl	8013ca4 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	4618      	mov	r0, r3
 80136cc:	3708      	adds	r7, #8
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd80      	pop	{r7, pc}

080136d2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80136d2:	b580      	push	{r7, lr}
 80136d4:	b082      	sub	sp, #8
 80136d6:	af00      	add	r7, sp, #0
 80136d8:	6078      	str	r0, [r7, #4]
 80136da:	6878      	ldr	r0, [r7, #4]
 80136dc:	f7ff ffed 	bl	80136ba <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	4618      	mov	r0, r3
 80136e4:	3708      	adds	r7, #8
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}

080136ea <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 80136ea:	b580      	push	{r7, lr}
 80136ec:	b082      	sub	sp, #8
 80136ee:	af00      	add	r7, sp, #0
 80136f0:	6078      	str	r0, [r7, #4]
 80136f2:	f7f3 fbc4 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80136f6:	4603      	mov	r3, r0
 80136f8:	4618      	mov	r0, r3
 80136fa:	3708      	adds	r7, #8
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}

08013700 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8013700:	b580      	push	{r7, lr}
 8013702:	b082      	sub	sp, #8
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
 8013708:	f7f3 fbb9 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801370c:	4603      	mov	r3, r0
 801370e:	4618      	mov	r0, r3
 8013710:	3708      	adds	r7, #8
 8013712:	46bd      	mov	sp, r7
 8013714:	bd80      	pop	{r7, pc}
	...

08013718 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8013718:	b5b0      	push	{r4, r5, r7, lr}
 801371a:	b084      	sub	sp, #16
 801371c:	af00      	add	r7, sp, #0
 801371e:	60f8      	str	r0, [r7, #12]
 8013720:	60b9      	str	r1, [r7, #8]
 8013722:	607a      	str	r2, [r7, #4]
 8013724:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8013726:	68f8      	ldr	r0, [r7, #12]
 8013728:	f7ff ffd3 	bl	80136d2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 801372c:	68fa      	ldr	r2, [r7, #12]
 801372e:	68bb      	ldr	r3, [r7, #8]
 8013730:	4614      	mov	r4, r2
 8013732:	461d      	mov	r5, r3
 8013734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013738:	e895 0003 	ldmia.w	r5, {r0, r1}
 801373c:	e884 0003 	stmia.w	r4, {r0, r1}
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	f103 0218 	add.w	r2, r3, #24
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	4614      	mov	r4, r2
 801374a:	461d      	mov	r5, r3
 801374c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801374e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013750:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013754:	e884 0003 	stmia.w	r4, {r0, r1}
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	3330      	adds	r3, #48	; 0x30
 801375c:	6839      	ldr	r1, [r7, #0]
 801375e:	4618      	mov	r0, r3
 8013760:	f7f2 f8e6 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8013764:	68b8      	ldr	r0, [r7, #8]
 8013766:	f7f8 fd69 	bl	800c23c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 801376a:	4604      	mov	r4, r0
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	4618      	mov	r0, r3
 8013770:	f7ff ffbb 	bl	80136ea <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>
 8013774:	4603      	mov	r3, r0
 8013776:	429c      	cmp	r4, r3
 8013778:	d10a      	bne.n	8013790 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 801377a:	68b8      	ldr	r0, [r7, #8]
 801377c:	f7f8 fd6b 	bl	800c256 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 8013780:	4604      	mov	r4, r0
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	4618      	mov	r0, r3
 8013786:	f7ff ffbb 	bl	8013700 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>
 801378a:	4603      	mov	r3, r0
 801378c:	429c      	cmp	r4, r3
 801378e:	d005      	beq.n	801379c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 8013790:	4b05      	ldr	r3, [pc, #20]	; (80137a8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 8013792:	4a06      	ldr	r2, [pc, #24]	; (80137ac <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 8013794:	2174      	movs	r1, #116	; 0x74
 8013796:	4806      	ldr	r0, [pc, #24]	; (80137b0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 8013798:	f00a fcfc 	bl	801e194 <__assert_func>
    }
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	4618      	mov	r0, r3
 80137a0:	3710      	adds	r7, #16
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bdb0      	pop	{r4, r5, r7, pc}
 80137a6:	bf00      	nop
 80137a8:	0801fffc 	.word	0x0801fffc
 80137ac:	0802900c 	.word	0x0802900c
 80137b0:	08020260 	.word	0x08020260

080137b4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b082      	sub	sp, #8
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
 80137bc:	6878      	ldr	r0, [r7, #4]
 80137be:	f000 f809 	bl	80137d4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 80137c2:	4603      	mov	r3, r0
 80137c4:	4618      	mov	r0, r3
 80137c6:	f000 fa78 	bl	8013cba <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>
 80137ca:	4603      	mov	r3, r0
 80137cc:	4618      	mov	r0, r3
 80137ce:	3708      	adds	r7, #8
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}

080137d4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80137d4:	b480      	push	{r7}
 80137d6:	b083      	sub	sp, #12
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	4618      	mov	r0, r3
 80137e0:	370c      	adds	r7, #12
 80137e2:	46bd      	mov	sp, r7
 80137e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e8:	4770      	bx	lr

080137ea <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80137ea:	b580      	push	{r7, lr}
 80137ec:	b082      	sub	sp, #8
 80137ee:	af00      	add	r7, sp, #0
 80137f0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7f8 fd21 	bl	800c23c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 80137fa:	4603      	mov	r3, r0
    }
 80137fc:	4618      	mov	r0, r3
 80137fe:	3708      	adds	r7, #8
 8013800:	46bd      	mov	sp, r7
 8013802:	bd80      	pop	{r7, pc}

08013804 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 8013804:	b580      	push	{r7, lr}
 8013806:	b082      	sub	sp, #8
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f000 fa7b 	bl	8013d08 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	4618      	mov	r0, r3
 8013816:	3708      	adds	r7, #8
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}

0801381c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 801381c:	b580      	push	{r7, lr}
 801381e:	b082      	sub	sp, #8
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	4618      	mov	r0, r3
 8013828:	f7ff ffec 	bl	8013804 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	4618      	mov	r0, r3
 8013830:	3708      	adds	r7, #8
 8013832:	46bd      	mov	sp, r7
 8013834:	bd80      	pop	{r7, pc}

08013836 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8013836:	b580      	push	{r7, lr}
 8013838:	b082      	sub	sp, #8
 801383a:	af00      	add	r7, sp, #0
 801383c:	6078      	str	r0, [r7, #4]
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	4618      	mov	r0, r3
 8013842:	f7ff ffeb 	bl	801381c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	4618      	mov	r0, r3
 801384a:	3708      	adds	r7, #8
 801384c:	46bd      	mov	sp, r7
 801384e:	bd80      	pop	{r7, pc}

08013850 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 8013850:	b580      	push	{r7, lr}
 8013852:	b082      	sub	sp, #8
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	4618      	mov	r0, r3
 801385c:	f7ff ffeb 	bl	8013836 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	4618      	mov	r0, r3
 8013864:	3708      	adds	r7, #8
 8013866:	46bd      	mov	sp, r7
 8013868:	bd80      	pop	{r7, pc}

0801386a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 801386a:	b580      	push	{r7, lr}
 801386c:	b082      	sub	sp, #8
 801386e:	af00      	add	r7, sp, #0
 8013870:	6078      	str	r0, [r7, #4]
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	330c      	adds	r3, #12
 8013876:	4618      	mov	r0, r3
 8013878:	f7ff ffea 	bl	8013850 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	3304      	adds	r3, #4
 8013880:	4618      	mov	r0, r3
 8013882:	f7f8 fdcf 	bl	800c424 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	4618      	mov	r0, r3
 801388a:	3708      	adds	r7, #8
 801388c:	46bd      	mov	sp, r7
 801388e:	bd80      	pop	{r7, pc}

08013890 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8013890:	b580      	push	{r7, lr}
 8013892:	b082      	sub	sp, #8
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	4618      	mov	r0, r3
 801389c:	f7ff ffe5 	bl	801386a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 80138a0:	6878      	ldr	r0, [r7, #4]
 80138a2:	f000 fa26 	bl	8013cf2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	4618      	mov	r0, r3
 80138aa:	3708      	adds	r7, #8
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bd80      	pop	{r7, pc}

080138b0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b082      	sub	sp, #8
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	4618      	mov	r0, r3
 80138bc:	f7ff ffe8 	bl	8013890 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	4618      	mov	r0, r3
 80138c4:	3708      	adds	r7, #8
 80138c6:	46bd      	mov	sp, r7
 80138c8:	bd80      	pop	{r7, pc}

080138ca <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 80138ca:	b580      	push	{r7, lr}
 80138cc:	b082      	sub	sp, #8
 80138ce:	af00      	add	r7, sp, #0
 80138d0:	6078      	str	r0, [r7, #4]
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	4618      	mov	r0, r3
 80138d6:	f7ff ffeb 	bl	80138b0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	4618      	mov	r0, r3
 80138de:	3708      	adds	r7, #8
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd80      	pop	{r7, pc}

080138e4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 80138e4:	b580      	push	{r7, lr}
 80138e6:	ed2d 8b02 	vpush	{d8}
 80138ea:	b088      	sub	sp, #32
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
 80138f0:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 80138f2:	6878      	ldr	r0, [r7, #4]
 80138f4:	f7ff fc8a 	bl	801320c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>
 80138f8:	4603      	mov	r3, r0
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	dd05      	ble.n	801390a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 80138fe:	6878      	ldr	r0, [r7, #4]
 8013900:	f7ff ff58 	bl	80137b4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>
 8013904:	4603      	mov	r3, r0
 8013906:	2b00      	cmp	r3, #0
 8013908:	dc06      	bgt.n	8013918 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 801390a:	4b16      	ldr	r3, [pc, #88]	; (8013964 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 801390c:	4a16      	ldr	r2, [pc, #88]	; (8013968 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 801390e:	f240 119b 	movw	r1, #411	; 0x19b
 8013912:	4816      	ldr	r0, [pc, #88]	; (801396c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8013914:	f00a fc3e 	bl	801e194 <__assert_func>
 8013918:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	f7ff ff5a 	bl	80137d4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8013920:	4602      	mov	r2, r0
 8013922:	f107 030c 	add.w	r3, r7, #12
 8013926:	4611      	mov	r1, r2
 8013928:	4618      	mov	r0, r3
 801392a:	f000 f9d3 	bl	8013cd4 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801392e:	6878      	ldr	r0, [r7, #4]
 8013930:	f7ff ff50 	bl	80137d4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8013934:	4602      	mov	r2, r0
 8013936:	f107 030c 	add.w	r3, r7, #12
 801393a:	6839      	ldr	r1, [r7, #0]
 801393c:	4618      	mov	r0, r3
 801393e:	f000 f9ee 	bl	8013d1e <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 8013942:	eeb0 8a40 	vmov.f32	s16, s0
 8013946:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8013948:	f107 030c 	add.w	r3, r7, #12
 801394c:	4618      	mov	r0, r3
 801394e:	f7ff ffbc 	bl	80138ca <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013952:	eef0 7a48 	vmov.f32	s15, s16
}
 8013956:	eeb0 0a67 	vmov.f32	s0, s15
 801395a:	3720      	adds	r7, #32
 801395c:	46bd      	mov	sp, r7
 801395e:	ecbd 8b02 	vpop	{d8}
 8013962:	bd80      	pop	{r7, pc}
 8013964:	0802507c 	.word	0x0802507c
 8013968:	08029258 	.word	0x08029258
 801396c:	08025288 	.word	0x08025288

08013970 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013970:	b580      	push	{r7, lr}
 8013972:	b082      	sub	sp, #8
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013978:	2202      	movs	r2, #2
 801397a:	2101      	movs	r1, #1
 801397c:	6878      	ldr	r0, [r7, #4]
 801397e:	f7fe fbdb 	bl	8012138 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013982:	6878      	ldr	r0, [r7, #4]
 8013984:	f000 f9dc 	bl	8013d40 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>
  }
 8013988:	bf00      	nop
 801398a:	3708      	adds	r7, #8
 801398c:	46bd      	mov	sp, r7
 801398e:	bd80      	pop	{r7, pc}

08013990 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013990:	b580      	push	{r7, lr}
 8013992:	b082      	sub	sp, #8
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013998:	2201      	movs	r2, #1
 801399a:	2101      	movs	r1, #1
 801399c:	6878      	ldr	r0, [r7, #4]
 801399e:	f7ff f874 	bl	8012a8a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80139a2:	6878      	ldr	r0, [r7, #4]
 80139a4:	f000 f9dc 	bl	8013d60 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>
  }
 80139a8:	bf00      	nop
 80139aa:	3708      	adds	r7, #8
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}

080139b0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b082      	sub	sp, #8
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
 80139b8:	6878      	ldr	r0, [r7, #4]
 80139ba:	f7f2 fb69 	bl	8006090 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80139be:	4603      	mov	r3, r0
 80139c0:	4618      	mov	r0, r3
 80139c2:	f7f1 fe4c 	bl	800565e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80139c6:	4603      	mov	r3, r0
 80139c8:	4618      	mov	r0, r3
 80139ca:	3708      	adds	r7, #8
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bd80      	pop	{r7, pc}

080139d0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 80139d0:	b590      	push	{r4, r7, lr}
 80139d2:	b083      	sub	sp, #12
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	6878      	ldr	r0, [r7, #4]
 80139da:	f7ff ffe9 	bl	80139b0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80139de:	4604      	mov	r4, r0
 80139e0:	6878      	ldr	r0, [r7, #4]
 80139e2:	f000 f807 	bl	80139f4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80139e6:	4603      	mov	r3, r0
 80139e8:	fb04 f303 	mul.w	r3, r4, r3
 80139ec:	4618      	mov	r0, r3
 80139ee:	370c      	adds	r7, #12
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd90      	pop	{r4, r7, pc}

080139f4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b082      	sub	sp, #8
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
 80139fc:	6878      	ldr	r0, [r7, #4]
 80139fe:	f7f2 fb47 	bl	8006090 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8013a02:	4603      	mov	r3, r0
 8013a04:	4618      	mov	r0, r3
 8013a06:	f7f1 fe1f 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	3708      	adds	r7, #8
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd80      	pop	{r7, pc}

08013a14 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 8013a14:	b480      	push	{r7}
 8013a16:	b083      	sub	sp, #12
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	4618      	mov	r0, r3
 8013a20:	370c      	adds	r7, #12
 8013a22:	46bd      	mov	sp, r7
 8013a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a28:	4770      	bx	lr

08013a2a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013a2a:	b480      	push	{r7}
 8013a2c:	b083      	sub	sp, #12
 8013a2e:	af00      	add	r7, sp, #0
 8013a30:	6078      	str	r0, [r7, #4]
    }
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	4618      	mov	r0, r3
 8013a36:	370c      	adds	r7, #12
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3e:	4770      	bx	lr

08013a40 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8013a40:	b480      	push	{r7}
 8013a42:	b083      	sub	sp, #12
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
 8013a48:	6039      	str	r1, [r7, #0]
    {}
 8013a4a:	bf00      	nop
 8013a4c:	370c      	adds	r7, #12
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a54:	4770      	bx	lr

08013a56 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013a56:	b480      	push	{r7}
 8013a58:	b083      	sub	sp, #12
 8013a5a:	af00      	add	r7, sp, #0
 8013a5c:	6078      	str	r0, [r7, #4]
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	4618      	mov	r0, r3
 8013a62:	370c      	adds	r7, #12
 8013a64:	46bd      	mov	sp, r7
 8013a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6a:	4770      	bx	lr

08013a6c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8013a6c:	b590      	push	{r4, r7, lr}
 8013a6e:	b083      	sub	sp, #12
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
 8013a74:	6039      	str	r1, [r7, #0]
 8013a76:	687c      	ldr	r4, [r7, #4]
 8013a78:	6838      	ldr	r0, [r7, #0]
 8013a7a:	f000 f981 	bl	8013d80 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	4619      	mov	r1, r3
 8013a82:	4620      	mov	r0, r4
 8013a84:	f7f1 ff54 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	1d1c      	adds	r4, r3, #4
 8013a8c:	6838      	ldr	r0, [r7, #0]
 8013a8e:	f000 f983 	bl	8013d98 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>
 8013a92:	4603      	mov	r3, r0
 8013a94:	4619      	mov	r1, r3
 8013a96:	4620      	mov	r0, r4
 8013a98:	f7fb fa91 	bl	800efbe <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f103 040c 	add.w	r4, r3, #12
 8013aa2:	6838      	ldr	r0, [r7, #0]
 8013aa4:	f000 f983 	bl	8013dae <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	4619      	mov	r1, r3
 8013aac:	4620      	mov	r0, r4
 8013aae:	f000 f98a 	bl	8013dc6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	370c      	adds	r7, #12
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bd90      	pop	{r4, r7, pc}

08013abc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b084      	sub	sp, #16
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	60f8      	str	r0, [r7, #12]
 8013ac4:	60b9      	str	r1, [r7, #8]
 8013ac6:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	68ba      	ldr	r2, [r7, #8]
 8013acc:	6879      	ldr	r1, [r7, #4]
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f000 f988 	bl	8013de4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>
 8013ad4:	eef0 7a40 	vmov.f32	s15, s0
 8013ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8013adc:	3710      	adds	r7, #16
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	bd80      	pop	{r7, pc}

08013ae2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013ae2:	b580      	push	{r7, lr}
 8013ae4:	b082      	sub	sp, #8
 8013ae6:	af00      	add	r7, sp, #0
 8013ae8:	6078      	str	r0, [r7, #4]
 8013aea:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013aec:	2201      	movs	r2, #1
 8013aee:	2100      	movs	r1, #0
 8013af0:	6878      	ldr	r0, [r7, #4]
 8013af2:	f7ff ffe3 	bl	8013abc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8013af6:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013afa:	eeb0 0a67 	vmov.f32	s0, s15
 8013afe:	3708      	adds	r7, #8
 8013b00:	46bd      	mov	sp, r7
 8013b02:	bd80      	pop	{r7, pc}

08013b04 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b082      	sub	sp, #8
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
 8013b0c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013b0e:	2202      	movs	r2, #2
 8013b10:	2100      	movs	r1, #0
 8013b12:	6878      	ldr	r0, [r7, #4]
 8013b14:	f7ff ffd2 	bl	8013abc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8013b18:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8013b20:	3708      	adds	r7, #8
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}

08013b26 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  evaluator()
 8013b26:	b580      	push	{r7, lr}
 8013b28:	b082      	sub	sp, #8
 8013b2a:	af00      	add	r7, sp, #0
 8013b2c:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8013b2e:	6878      	ldr	r0, [r7, #4]
 8013b30:	f7f7 fd37 	bl	800b5a2 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	2200      	movs	r2, #0
 8013b38:	2100      	movs	r1, #0
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f7f3 fcbd 	bl	80074ba <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	4618      	mov	r0, r3
 8013b44:	3708      	adds	r7, #8
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bd80      	pop	{r7, pc}

08013b4a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8013b4a:	b580      	push	{r7, lr}
 8013b4c:	b086      	sub	sp, #24
 8013b4e:	af00      	add	r7, sp, #0
 8013b50:	60f8      	str	r0, [r7, #12]
 8013b52:	60b9      	str	r1, [r7, #8]
 8013b54:	607a      	str	r2, [r7, #4]
 8013b56:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8013b58:	2301      	movs	r3, #1
 8013b5a:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8013b5c:	2301      	movs	r3, #1
 8013b5e:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8013b60:	687a      	ldr	r2, [r7, #4]
 8013b62:	68b9      	ldr	r1, [r7, #8]
 8013b64:	68f8      	ldr	r0, [r7, #12]
 8013b66:	f7f9 fef9 	bl	800d95c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    }
 8013b6a:	bf00      	nop
 8013b6c:	3718      	adds	r7, #24
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}

08013b72 <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8013b72:	b580      	push	{r7, lr}
 8013b74:	b082      	sub	sp, #8
 8013b76:	af00      	add	r7, sp, #0
 8013b78:	6078      	str	r0, [r7, #4]
 8013b7a:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 8013b7c:	6838      	ldr	r0, [r7, #0]
 8013b7e:	f7f2 fae5 	bl	800614c <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 8013b82:	4603      	mov	r3, r0
 8013b84:	4619      	mov	r1, r3
 8013b86:	6878      	ldr	r0, [r7, #4]
 8013b88:	f000 f974 	bl	8013e74 <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>
}
 8013b8c:	6878      	ldr	r0, [r7, #4]
 8013b8e:	3708      	adds	r7, #8
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}

08013b94 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8013b94:	b5b0      	push	{r4, r5, r7, lr}
 8013b96:	b086      	sub	sp, #24
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	60f8      	str	r0, [r7, #12]
 8013b9c:	60b9      	str	r1, [r7, #8]
 8013b9e:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8013ba0:	68b8      	ldr	r0, [r7, #8]
 8013ba2:	f000 f97a 	bl	8013e9a <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>
 8013ba6:	4604      	mov	r4, r0
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f7f2 fa05 	bl	8005fb8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8013bae:	4605      	mov	r5, r0
 8013bb0:	f107 0314 	add.w	r3, r7, #20
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f7f1 fe31 	bl	800581c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8013bba:	f107 0314 	add.w	r3, r7, #20
 8013bbe:	462a      	mov	r2, r5
 8013bc0:	4621      	mov	r1, r4
 8013bc2:	68f8      	ldr	r0, [r7, #12]
 8013bc4:	f000 f9a6 	bl	8013f14 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>
}
 8013bc8:	68f8      	ldr	r0, [r7, #12]
 8013bca:	3718      	adds	r7, #24
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bdb0      	pop	{r4, r5, r7, pc}

08013bd0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b082      	sub	sp, #8
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f000 f9eb 	bl	8013fb4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013bde:	4603      	mov	r3, r0
 8013be0:	4618      	mov	r0, r3
 8013be2:	f000 f9f2 	bl	8013fca <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>
 8013be6:	4603      	mov	r3, r0
 8013be8:	4618      	mov	r0, r3
 8013bea:	3708      	adds	r7, #8
 8013bec:	46bd      	mov	sp, r7
 8013bee:	bd80      	pop	{r7, pc}

08013bf0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8013bf0:	b590      	push	{r4, r7, lr}
 8013bf2:	b085      	sub	sp, #20
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8013bf8:	6878      	ldr	r0, [r7, #4]
 8013bfa:	f000 f9db 	bl	8013fb4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013bfe:	4604      	mov	r4, r0
 8013c00:	f107 030c 	add.w	r3, r7, #12
 8013c04:	4618      	mov	r0, r3
 8013c06:	f7f2 f900 	bl	8005e0a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8013c0a:	f107 030c 	add.w	r3, r7, #12
 8013c0e:	4619      	mov	r1, r3
 8013c10:	4620      	mov	r0, r4
 8013c12:	f000 fa83 	bl	801411c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8013c16:	eef0 7a40 	vmov.f32	s15, s0
 8013c1a:	bf00      	nop
}
 8013c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8013c20:	3714      	adds	r7, #20
 8013c22:	46bd      	mov	sp, r7
 8013c24:	bd90      	pop	{r4, r7, pc}

08013c26 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8013c26:	b590      	push	{r4, r7, lr}
 8013c28:	b083      	sub	sp, #12
 8013c2a:	af00      	add	r7, sp, #0
 8013c2c:	6078      	str	r0, [r7, #4]
 8013c2e:	6039      	str	r1, [r7, #0]
 8013c30:	6878      	ldr	r0, [r7, #4]
 8013c32:	f000 fac5 	bl	80141c0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8013c36:	687c      	ldr	r4, [r7, #4]
 8013c38:	6838      	ldr	r0, [r7, #0]
 8013c3a:	f000 fab5 	bl	80141a8 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	4619      	mov	r1, r3
 8013c42:	4620      	mov	r0, r4
 8013c44:	f000 fac7 	bl	80141d6 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	370c      	adds	r7, #12
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	bd90      	pop	{r4, r7, pc}

08013c52 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013c52:	b590      	push	{r4, r7, lr}
 8013c54:	b085      	sub	sp, #20
 8013c56:	af00      	add	r7, sp, #0
 8013c58:	60f8      	str	r0, [r7, #12]
 8013c5a:	60b9      	str	r1, [r7, #8]
 8013c5c:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	681c      	ldr	r4, [r3, #0]
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	4618      	mov	r0, r3
 8013c66:	f7f3 fb5d 	bl	8007324 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8013c6a:	4602      	mov	r2, r0
 8013c6c:	68bb      	ldr	r3, [r7, #8]
 8013c6e:	fb03 f202 	mul.w	r2, r3, r2
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	4413      	add	r3, r2
 8013c76:	009b      	lsls	r3, r3, #2
 8013c78:	4423      	add	r3, r4
  }
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	3714      	adds	r7, #20
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd90      	pop	{r4, r7, pc}

08013c82 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 8013c82:	b580      	push	{r7, lr}
 8013c84:	b084      	sub	sp, #16
 8013c86:	af00      	add	r7, sp, #0
 8013c88:	60f8      	str	r0, [r7, #12]
 8013c8a:	60b9      	str	r1, [r7, #8]
 8013c8c:	607a      	str	r2, [r7, #4]
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	687a      	ldr	r2, [r7, #4]
 8013c92:	68b9      	ldr	r1, [r7, #8]
 8013c94:	4618      	mov	r0, r3
 8013c96:	f000 faad 	bl	80141f4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	3710      	adds	r7, #16
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}

08013ca4 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013ca4:	b480      	push	{r7}
 8013ca6:	b083      	sub	sp, #12
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
    }
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	4618      	mov	r0, r3
 8013cb0:	370c      	adds	r7, #12
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb8:	4770      	bx	lr

08013cba <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8013cba:	b580      	push	{r7, lr}
 8013cbc:	b082      	sub	sp, #8
 8013cbe:	af00      	add	r7, sp, #0
 8013cc0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f7f8 fac6 	bl	800c256 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 8013cca:	4603      	mov	r3, r0
    }
 8013ccc:	4618      	mov	r0, r3
 8013cce:	3708      	adds	r7, #8
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd80      	pop	{r7, pc}

08013cd4 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b082      	sub	sp, #8
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
 8013cdc:	6039      	str	r1, [r7, #0]
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	6839      	ldr	r1, [r7, #0]
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	f000 fab7 	bl	8014256 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	4618      	mov	r0, r3
 8013cec:	3708      	adds	r7, #8
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}

08013cf2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8013cf2:	b480      	push	{r7}
 8013cf4:	b083      	sub	sp, #12
 8013cf6:	af00      	add	r7, sp, #0
 8013cf8:	6078      	str	r0, [r7, #4]
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	370c      	adds	r7, #12
 8013d00:	46bd      	mov	sp, r7
 8013d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d06:	4770      	bx	lr

08013d08 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
 8013d08:	b480      	push	{r7}
 8013d0a:	b083      	sub	sp, #12
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	4618      	mov	r0, r3
 8013d14:	370c      	adds	r7, #12
 8013d16:	46bd      	mov	sp, r7
 8013d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1c:	4770      	bx	lr

08013d1e <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8013d1e:	b580      	push	{r7, lr}
 8013d20:	b084      	sub	sp, #16
 8013d22:	af00      	add	r7, sp, #0
 8013d24:	60f8      	str	r0, [r7, #12]
 8013d26:	60b9      	str	r1, [r7, #8]
 8013d28:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8013d2a:	68b9      	ldr	r1, [r7, #8]
 8013d2c:	68f8      	ldr	r0, [r7, #12]
 8013d2e:	f000 faa1 	bl	8014274 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 8013d32:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013d36:	eeb0 0a67 	vmov.f32	s0, s15
 8013d3a:	3710      	adds	r7, #16
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}

08013d40 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013d48:	2200      	movs	r2, #0
 8013d4a:	2102      	movs	r1, #2
 8013d4c:	6878      	ldr	r0, [r7, #4]
 8013d4e:	f7fe f9f3 	bl	8012138 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013d52:	6878      	ldr	r0, [r7, #4]
 8013d54:	f000 fa9f 	bl	8014296 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>
  }
 8013d58:	bf00      	nop
 8013d5a:	3708      	adds	r7, #8
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}

08013d60 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b082      	sub	sp, #8
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013d68:	2202      	movs	r2, #2
 8013d6a:	2101      	movs	r1, #1
 8013d6c:	6878      	ldr	r0, [r7, #4]
 8013d6e:	f7fe fe8c 	bl	8012a8a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013d72:	6878      	ldr	r0, [r7, #4]
 8013d74:	f000 fa9f 	bl	80142b6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>
  }
 8013d78:	bf00      	nop
 8013d7a:	3708      	adds	r7, #8
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}

08013d80 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8013d80:	b480      	push	{r7}
 8013d82:	b083      	sub	sp, #12
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	3330      	adds	r3, #48	; 0x30
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	370c      	adds	r7, #12
 8013d90:	46bd      	mov	sp, r7
 8013d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d96:	4770      	bx	lr

08013d98 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8013d98:	b480      	push	{r7}
 8013d9a:	b083      	sub	sp, #12
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	4618      	mov	r0, r3
 8013da4:	370c      	adds	r7, #12
 8013da6:	46bd      	mov	sp, r7
 8013da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dac:	4770      	bx	lr

08013dae <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8013dae:	b480      	push	{r7}
 8013db0:	b083      	sub	sp, #12
 8013db2:	af00      	add	r7, sp, #0
 8013db4:	6078      	str	r0, [r7, #4]
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	3318      	adds	r3, #24
 8013dba:	4618      	mov	r0, r3
 8013dbc:	370c      	adds	r7, #12
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc4:	4770      	bx	lr

08013dc6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013dc6:	b580      	push	{r7, lr}
 8013dc8:	b082      	sub	sp, #8
 8013dca:	af00      	add	r7, sp, #0
 8013dcc:	6078      	str	r0, [r7, #4]
 8013dce:	6039      	str	r1, [r7, #0]
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	6839      	ldr	r1, [r7, #0]
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f000 fa7e 	bl	80142d6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	4618      	mov	r0, r3
 8013dde:	3708      	adds	r7, #8
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}

08013de4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013de4:	b590      	push	{r4, r7, lr}
 8013de6:	b087      	sub	sp, #28
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	60f8      	str	r0, [r7, #12]
 8013dec:	60b9      	str	r1, [r7, #8]
 8013dee:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	4618      	mov	r0, r3
 8013df4:	f000 fa7e 	bl	80142f4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>
 8013df8:	4604      	mov	r4, r0
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	3304      	adds	r3, #4
 8013dfe:	687a      	ldr	r2, [r7, #4]
 8013e00:	68b9      	ldr	r1, [r7, #8]
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7fb fdf6 	bl	800f9f4 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8013e08:	eef0 7a40 	vmov.f32	s15, s0
 8013e0c:	edc7 7a04 	vstr	s15, [r7, #16]
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	330c      	adds	r3, #12
 8013e14:	687a      	ldr	r2, [r7, #4]
 8013e16:	68b9      	ldr	r1, [r7, #8]
 8013e18:	4618      	mov	r0, r3
 8013e1a:	f000 fa76 	bl	801430a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8013e1e:	eef0 7a40 	vmov.f32	s15, s0
 8013e22:	edc7 7a05 	vstr	s15, [r7, #20]
 8013e26:	f107 0214 	add.w	r2, r7, #20
 8013e2a:	f107 0310 	add.w	r3, r7, #16
 8013e2e:	4619      	mov	r1, r3
 8013e30:	4620      	mov	r0, r4
 8013e32:	f7fb fc23 	bl	800f67c <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8013e36:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8013e3e:	371c      	adds	r7, #28
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd90      	pop	{r4, r7, pc}

08013e44 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b082      	sub	sp, #8
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	f000 fa7d 	bl	801434c <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	4618      	mov	r0, r3
 8013e56:	3708      	adds	r7, #8
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}

08013e5c <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b082      	sub	sp, #8
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f7ff ffed 	bl	8013e44 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3708      	adds	r7, #8
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}

08013e74 <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b082      	sub	sp, #8
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	6039      	str	r1, [r7, #0]
 8013e7e:	6878      	ldr	r0, [r7, #4]
 8013e80:	f7ff ffec 	bl	8013e5c <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	683a      	ldr	r2, [r7, #0]
 8013e88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013e8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	4618      	mov	r0, r3
 8013e94:	3708      	adds	r7, #8
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd80      	pop	{r7, pc}

08013e9a <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013e9a:	b480      	push	{r7}
 8013e9c:	b083      	sub	sp, #12
 8013e9e:	af00      	add	r7, sp, #0
 8013ea0:	6078      	str	r0, [r7, #4]
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	370c      	adds	r7, #12
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eae:	4770      	bx	lr

08013eb0 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b082      	sub	sp, #8
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
 8013eb8:	6878      	ldr	r0, [r7, #4]
 8013eba:	f000 fa52 	bl	8014362 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3708      	adds	r7, #8
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}

08013ec8 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b082      	sub	sp, #8
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
 8013ed0:	6878      	ldr	r0, [r7, #4]
 8013ed2:	f7ff ffed 	bl	8013eb0 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	4618      	mov	r0, r3
 8013eda:	3708      	adds	r7, #8
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}

08013ee0 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b082      	sub	sp, #8
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	4618      	mov	r0, r3
 8013eec:	f7f2 f95d 	bl	80061aa <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	3708      	adds	r7, #8
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	bd80      	pop	{r7, pc}

08013efa <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8013efa:	b580      	push	{r7, lr}
 8013efc:	b082      	sub	sp, #8
 8013efe:	af00      	add	r7, sp, #0
 8013f00:	6078      	str	r0, [r7, #4]
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	4618      	mov	r0, r3
 8013f06:	f7f3 f8c2 	bl	800708e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3708      	adds	r7, #8
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}

08013f14 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8013f14:	b590      	push	{r4, r7, lr}
 8013f16:	b085      	sub	sp, #20
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	60f8      	str	r0, [r7, #12]
 8013f1c:	60b9      	str	r1, [r7, #8]
 8013f1e:	607a      	str	r2, [r7, #4]
 8013f20:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8013f22:	68f8      	ldr	r0, [r7, #12]
 8013f24:	f7ff ffd0 	bl	8013ec8 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	68ba      	ldr	r2, [r7, #8]
 8013f2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f30:	e883 0003 	stmia.w	r3, {r0, r1}
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	3308      	adds	r3, #8
 8013f38:	687a      	ldr	r2, [r7, #4]
 8013f3a:	6812      	ldr	r2, [r2, #0]
 8013f3c:	601a      	str	r2, [r3, #0]
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	330c      	adds	r3, #12
 8013f42:	6839      	ldr	r1, [r7, #0]
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7f1 fcf3 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8013f4a:	68b8      	ldr	r0, [r7, #8]
 8013f4c:	f7ff ffc8 	bl	8013ee0 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 8013f50:	4604      	mov	r4, r0
 8013f52:	6878      	ldr	r0, [r7, #4]
 8013f54:	f7f2 f85f 	bl	8006016 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8013f58:	4603      	mov	r3, r0
 8013f5a:	429c      	cmp	r4, r3
 8013f5c:	d109      	bne.n	8013f72 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x5e>
 8013f5e:	68b8      	ldr	r0, [r7, #8]
 8013f60:	f7ff ffcb 	bl	8013efa <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8013f64:	4604      	mov	r4, r0
 8013f66:	6878      	ldr	r0, [r7, #4]
 8013f68:	f7f3 f89f 	bl	80070aa <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	429c      	cmp	r4, r3
 8013f70:	d005      	beq.n	8013f7e <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x6a>
 8013f72:	4b05      	ldr	r3, [pc, #20]	; (8013f88 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x74>)
 8013f74:	4a05      	ldr	r2, [pc, #20]	; (8013f8c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x78>)
 8013f76:	2174      	movs	r1, #116	; 0x74
 8013f78:	4805      	ldr	r0, [pc, #20]	; (8013f90 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x7c>)
 8013f7a:	f00a f90b 	bl	801e194 <__assert_func>
    }
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	4618      	mov	r0, r3
 8013f82:	3714      	adds	r7, #20
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd90      	pop	{r4, r7, pc}
 8013f88:	0801fffc 	.word	0x0801fffc
 8013f8c:	08029420 	.word	0x08029420
 8013f90:	08020260 	.word	0x08020260

08013f94 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b082      	sub	sp, #8
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f000 f809 	bl	8013fb4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f000 f9e7 	bl	8014378 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>
 8013faa:	4603      	mov	r3, r0
 8013fac:	4618      	mov	r0, r3
 8013fae:	3708      	adds	r7, #8
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}

08013fb4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013fb4:	b480      	push	{r7}
 8013fb6:	b083      	sub	sp, #12
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	370c      	adds	r7, #12
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc8:	4770      	bx	lr

08013fca <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8013fca:	b580      	push	{r7, lr}
 8013fcc:	b082      	sub	sp, #8
 8013fce:	af00      	add	r7, sp, #0
 8013fd0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7ff ff83 	bl	8013ee0 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 8013fda:	4603      	mov	r3, r0
    }
 8013fdc:	4618      	mov	r0, r3
 8013fde:	3708      	adds	r7, #8
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}

08013fe4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b082      	sub	sp, #8
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f7fb fa2e 	bl	800f450 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	3708      	adds	r7, #8
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	bd80      	pop	{r7, pc}

08013ffe <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8013ffe:	b580      	push	{r7, lr}
 8014000:	b082      	sub	sp, #8
 8014002:	af00      	add	r7, sp, #0
 8014004:	6078      	str	r0, [r7, #4]
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	4618      	mov	r0, r3
 801400a:	f7ff ffeb 	bl	8013fe4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	4618      	mov	r0, r3
 8014012:	3708      	adds	r7, #8
 8014014:	46bd      	mov	sp, r7
 8014016:	bd80      	pop	{r7, pc}

08014018 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<const T>
 8014018:	b580      	push	{r7, lr}
 801401a:	b082      	sub	sp, #8
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	4618      	mov	r0, r3
 8014024:	f7ff ffeb 	bl	8013ffe <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	4618      	mov	r0, r3
 801402c:	3708      	adds	r7, #8
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}

08014032 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8014032:	b580      	push	{r7, lr}
 8014034:	b082      	sub	sp, #8
 8014036:	af00      	add	r7, sp, #0
 8014038:	6078      	str	r0, [r7, #4]
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	4618      	mov	r0, r3
 801403e:	f7ff ffeb 	bl	8014018 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8014042:	6878      	ldr	r0, [r7, #4]
 8014044:	f000 f9bf 	bl	80143c6 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	4618      	mov	r0, r3
 801404c:	3708      	adds	r7, #8
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}

08014052 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8014052:	b580      	push	{r7, lr}
 8014054:	b082      	sub	sp, #8
 8014056:	af00      	add	r7, sp, #0
 8014058:	6078      	str	r0, [r7, #4]
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	4618      	mov	r0, r3
 801405e:	f7ff ffe8 	bl	8014032 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	4618      	mov	r0, r3
 8014066:	3708      	adds	r7, #8
 8014068:	46bd      	mov	sp, r7
 801406a:	bd80      	pop	{r7, pc}

0801406c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator<const T>
 801406c:	b580      	push	{r7, lr}
 801406e:	b082      	sub	sp, #8
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	4618      	mov	r0, r3
 8014078:	f7ff ffeb 	bl	8014052 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	4618      	mov	r0, r3
 8014080:	3708      	adds	r7, #8
 8014082:	46bd      	mov	sp, r7
 8014084:	bd80      	pop	{r7, pc}

08014086 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 8014086:	b580      	push	{r7, lr}
 8014088:	b082      	sub	sp, #8
 801408a:	af00      	add	r7, sp, #0
 801408c:	6078      	str	r0, [r7, #4]
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	4618      	mov	r0, r3
 8014092:	f7fb f9fa 	bl	800f48a <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	4618      	mov	r0, r3
 801409a:	3708      	adds	r7, #8
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}

080140a0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b082      	sub	sp, #8
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	3314      	adds	r3, #20
 80140ac:	4618      	mov	r0, r3
 80140ae:	f7ff ffea 	bl	8014086 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	3304      	adds	r3, #4
 80140b6:	4618      	mov	r0, r3
 80140b8:	f7ff ffd8 	bl	801406c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	4618      	mov	r0, r3
 80140c0:	3708      	adds	r7, #8
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}

080140c6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80140c6:	b580      	push	{r7, lr}
 80140c8:	b082      	sub	sp, #8
 80140ca:	af00      	add	r7, sp, #0
 80140cc:	6078      	str	r0, [r7, #4]
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	4618      	mov	r0, r3
 80140d2:	f7ff ffe5 	bl	80140a0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 80140d6:	6878      	ldr	r0, [r7, #4]
 80140d8:	f000 f96a 	bl	80143b0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	4618      	mov	r0, r3
 80140e0:	3708      	adds	r7, #8
 80140e2:	46bd      	mov	sp, r7
 80140e4:	bd80      	pop	{r7, pc}

080140e6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80140e6:	b580      	push	{r7, lr}
 80140e8:	b082      	sub	sp, #8
 80140ea:	af00      	add	r7, sp, #0
 80140ec:	6078      	str	r0, [r7, #4]
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	4618      	mov	r0, r3
 80140f2:	f7ff ffe8 	bl	80140c6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	4618      	mov	r0, r3
 80140fa:	3708      	adds	r7, #8
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bd80      	pop	{r7, pc}

08014100 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8014100:	b580      	push	{r7, lr}
 8014102:	b082      	sub	sp, #8
 8014104:	af00      	add	r7, sp, #0
 8014106:	6078      	str	r0, [r7, #4]
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	4618      	mov	r0, r3
 801410c:	f7ff ffeb 	bl	80140e6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	4618      	mov	r0, r3
 8014114:	3708      	adds	r7, #8
 8014116:	46bd      	mov	sp, r7
 8014118:	bd80      	pop	{r7, pc}
	...

0801411c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 801411c:	b580      	push	{r7, lr}
 801411e:	ed2d 8b02 	vpush	{d8}
 8014122:	b088      	sub	sp, #32
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
 8014128:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f7ff fd50 	bl	8013bd0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>
 8014130:	4603      	mov	r3, r0
 8014132:	2b00      	cmp	r3, #0
 8014134:	dd05      	ble.n	8014142 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8014136:	6878      	ldr	r0, [r7, #4]
 8014138:	f7ff ff2c 	bl	8013f94 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>
 801413c:	4603      	mov	r3, r0
 801413e:	2b00      	cmp	r3, #0
 8014140:	dc06      	bgt.n	8014150 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8014142:	4b16      	ldr	r3, [pc, #88]	; (801419c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8014144:	4a16      	ldr	r2, [pc, #88]	; (80141a0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8014146:	f240 119b 	movw	r1, #411	; 0x19b
 801414a:	4816      	ldr	r0, [pc, #88]	; (80141a4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 801414c:	f00a f822 	bl	801e194 <__assert_func>
 8014150:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8014152:	6878      	ldr	r0, [r7, #4]
 8014154:	f7ff ff2e 	bl	8013fb4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8014158:	4602      	mov	r2, r0
 801415a:	f107 0308 	add.w	r3, r7, #8
 801415e:	4611      	mov	r1, r2
 8014160:	4618      	mov	r0, r3
 8014162:	f000 f916 	bl	8014392 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8014166:	6878      	ldr	r0, [r7, #4]
 8014168:	f7ff ff24 	bl	8013fb4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 801416c:	4602      	mov	r2, r0
 801416e:	f107 0308 	add.w	r3, r7, #8
 8014172:	6839      	ldr	r1, [r7, #0]
 8014174:	4618      	mov	r0, r3
 8014176:	f000 f931 	bl	80143dc <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 801417a:	eeb0 8a40 	vmov.f32	s16, s0
 801417e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8014180:	f107 0308 	add.w	r3, r7, #8
 8014184:	4618      	mov	r0, r3
 8014186:	f7ff ffbb 	bl	8014100 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801418a:	eef0 7a48 	vmov.f32	s15, s16
}
 801418e:	eeb0 0a67 	vmov.f32	s0, s15
 8014192:	3720      	adds	r7, #32
 8014194:	46bd      	mov	sp, r7
 8014196:	ecbd 8b02 	vpop	{d8}
 801419a:	bd80      	pop	{r7, pc}
 801419c:	0802507c 	.word	0x0802507c
 80141a0:	0802966c 	.word	0x0802966c
 80141a4:	08025288 	.word	0x08025288

080141a8 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 80141a8:	b480      	push	{r7}
 80141aa:	b083      	sub	sp, #12
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	4618      	mov	r0, r3
 80141b6:	370c      	adds	r7, #12
 80141b8:	46bd      	mov	sp, r7
 80141ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141be:	4770      	bx	lr

080141c0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80141c0:	b480      	push	{r7}
 80141c2:	b083      	sub	sp, #12
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	4618      	mov	r0, r3
 80141cc:	370c      	adds	r7, #12
 80141ce:	46bd      	mov	sp, r7
 80141d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d4:	4770      	bx	lr

080141d6 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80141d6:	b580      	push	{r7, lr}
 80141d8:	b082      	sub	sp, #8
 80141da:	af00      	add	r7, sp, #0
 80141dc:	6078      	str	r0, [r7, #4]
 80141de:	6039      	str	r1, [r7, #0]
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	6839      	ldr	r1, [r7, #0]
 80141e4:	4618      	mov	r0, r3
 80141e6:	f7fd fe47 	bl	8011e78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	4618      	mov	r0, r3
 80141ee:	3708      	adds	r7, #8
 80141f0:	46bd      	mov	sp, r7
 80141f2:	bd80      	pop	{r7, pc}

080141f4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 80141f4:	b5b0      	push	{r4, r5, r7, lr}
 80141f6:	b084      	sub	sp, #16
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	60f8      	str	r0, [r7, #12]
 80141fc:	60b9      	str	r1, [r7, #8]
 80141fe:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8014200:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8014202:	68bb      	ldr	r3, [r7, #8]
 8014204:	4618      	mov	r0, r3
 8014206:	f7fe fc93 	bl	8012b30 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 801420a:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 801420c:	68b8      	ldr	r0, [r7, #8]
 801420e:	f7ff fc01 	bl	8013a14 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8014212:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	fb02 f303 	mul.w	r3, r2, r3
 801421a:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 801421c:	18e9      	adds	r1, r5, r3
 801421e:	2301      	movs	r3, #1
 8014220:	2201      	movs	r2, #1
 8014222:	4620      	mov	r0, r4
 8014224:	f000 f8f8 	bl	8014418 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	68ba      	ldr	r2, [r7, #8]
 801422c:	609a      	str	r2, [r3, #8]
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	330c      	adds	r3, #12
 8014232:	2100      	movs	r1, #0
 8014234:	4618      	mov	r0, r3
 8014236:	f7f9 fedd 	bl	800dff4 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	3310      	adds	r3, #16
 801423e:	6879      	ldr	r1, [r7, #4]
 8014240:	4618      	mov	r0, r3
 8014242:	f7f9 fe63 	bl	800df0c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8014246:	68f8      	ldr	r0, [r7, #12]
 8014248:	f000 f924 	bl	8014494 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>
    }
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	4618      	mov	r0, r3
 8014250:	3710      	adds	r7, #16
 8014252:	46bd      	mov	sp, r7
 8014254:	bdb0      	pop	{r4, r5, r7, pc}

08014256 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014256:	b580      	push	{r7, lr}
 8014258:	b082      	sub	sp, #8
 801425a:	af00      	add	r7, sp, #0
 801425c:	6078      	str	r0, [r7, #4]
 801425e:	6039      	str	r1, [r7, #0]
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	6839      	ldr	r1, [r7, #0]
 8014264:	4618      	mov	r0, r3
 8014266:	f000 f925 	bl	80144b4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	4618      	mov	r0, r3
 801426e:	3708      	adds	r7, #8
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}

08014274 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8014274:	b580      	push	{r7, lr}
 8014276:	b082      	sub	sp, #8
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
 801427c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801427e:	2200      	movs	r2, #0
 8014280:	2100      	movs	r1, #0
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f000 f928 	bl	80144d8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8014288:	eef0 7a40 	vmov.f32	s15, s0
  }
 801428c:	eeb0 0a67 	vmov.f32	s0, s15
 8014290:	3708      	adds	r7, #8
 8014292:	46bd      	mov	sp, r7
 8014294:	bd80      	pop	{r7, pc}

08014296 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8014296:	b580      	push	{r7, lr}
 8014298:	b082      	sub	sp, #8
 801429a:	af00      	add	r7, sp, #0
 801429c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801429e:	2201      	movs	r2, #1
 80142a0:	2102      	movs	r1, #2
 80142a2:	6878      	ldr	r0, [r7, #4]
 80142a4:	f7fd ff48 	bl	8012138 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f000 f928 	bl	80144fe <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>
  }
 80142ae:	bf00      	nop
 80142b0:	3708      	adds	r7, #8
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}

080142b6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80142b6:	b580      	push	{r7, lr}
 80142b8:	b082      	sub	sp, #8
 80142ba:	af00      	add	r7, sp, #0
 80142bc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80142be:	2200      	movs	r2, #0
 80142c0:	2102      	movs	r1, #2
 80142c2:	6878      	ldr	r0, [r7, #4]
 80142c4:	f7fe fbe1 	bl	8012a8a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f000 f928 	bl	801451e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>
  }
 80142ce:	bf00      	nop
 80142d0:	3708      	adds	r7, #8
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}

080142d6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80142d6:	b580      	push	{r7, lr}
 80142d8:	b082      	sub	sp, #8
 80142da:	af00      	add	r7, sp, #0
 80142dc:	6078      	str	r0, [r7, #4]
 80142de:	6039      	str	r1, [r7, #0]
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	6839      	ldr	r1, [r7, #0]
 80142e4:	4618      	mov	r0, r3
 80142e6:	f000 f92a 	bl	801453e <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>
  }
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	4618      	mov	r0, r3
 80142ee:	3708      	adds	r7, #8
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}

080142f4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80142f4:	b480      	push	{r7}
 80142f6:	b083      	sub	sp, #12
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	4618      	mov	r0, r3
 8014300:	370c      	adds	r7, #12
 8014302:	46bd      	mov	sp, r7
 8014304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014308:	4770      	bx	lr

0801430a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801430a:	b5b0      	push	{r4, r5, r7, lr}
 801430c:	b084      	sub	sp, #16
 801430e:	af00      	add	r7, sp, #0
 8014310:	60f8      	str	r0, [r7, #12]
 8014312:	60b9      	str	r1, [r7, #8]
 8014314:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	681c      	ldr	r4, [r3, #0]
 801431a:	68f8      	ldr	r0, [r7, #12]
 801431c:	f000 f923 	bl	8014566 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8014320:	4602      	mov	r2, r0
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	fb03 f502 	mul.w	r5, r3, r2
 8014328:	68f8      	ldr	r0, [r7, #12]
 801432a:	f000 f927 	bl	801457c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 801432e:	4602      	mov	r2, r0
 8014330:	68bb      	ldr	r3, [r7, #8]
 8014332:	fb02 f303 	mul.w	r3, r2, r3
 8014336:	442b      	add	r3, r5
 8014338:	009b      	lsls	r3, r3, #2
 801433a:	4423      	add	r3, r4
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	ee07 3a90 	vmov	s15, r3
  }
 8014342:	eeb0 0a67 	vmov.f32	s0, s15
 8014346:	3710      	adds	r7, #16
 8014348:	46bd      	mov	sp, r7
 801434a:	bdb0      	pop	{r4, r5, r7, pc}

0801434c <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801434c:	b480      	push	{r7}
 801434e:	b083      	sub	sp, #12
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
    }
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	4618      	mov	r0, r3
 8014358:	370c      	adds	r7, #12
 801435a:	46bd      	mov	sp, r7
 801435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014360:	4770      	bx	lr

08014362 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014362:	b480      	push	{r7}
 8014364:	b083      	sub	sp, #12
 8014366:	af00      	add	r7, sp, #0
 8014368:	6078      	str	r0, [r7, #4]
    }
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	4618      	mov	r0, r3
 801436e:	370c      	adds	r7, #12
 8014370:	46bd      	mov	sp, r7
 8014372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014376:	4770      	bx	lr

08014378 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8014378:	b580      	push	{r7, lr}
 801437a:	b082      	sub	sp, #8
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	4618      	mov	r0, r3
 8014384:	f7ff fdb9 	bl	8013efa <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8014388:	4603      	mov	r3, r0
    }
 801438a:	4618      	mov	r0, r3
 801438c:	3708      	adds	r7, #8
 801438e:	46bd      	mov	sp, r7
 8014390:	bd80      	pop	{r7, pc}

08014392 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8014392:	b580      	push	{r7, lr}
 8014394:	b082      	sub	sp, #8
 8014396:	af00      	add	r7, sp, #0
 8014398:	6078      	str	r0, [r7, #4]
 801439a:	6039      	str	r1, [r7, #0]
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	6839      	ldr	r1, [r7, #0]
 80143a0:	4618      	mov	r0, r3
 80143a2:	f000 f8f6 	bl	8014592 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	4618      	mov	r0, r3
 80143aa:	3708      	adds	r7, #8
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd80      	pop	{r7, pc}

080143b0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80143b0:	b480      	push	{r7}
 80143b2:	b083      	sub	sp, #12
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	4618      	mov	r0, r3
 80143bc:	370c      	adds	r7, #12
 80143be:	46bd      	mov	sp, r7
 80143c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c4:	4770      	bx	lr

080143c6 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
 80143c6:	b480      	push	{r7}
 80143c8:	b083      	sub	sp, #12
 80143ca:	af00      	add	r7, sp, #0
 80143cc:	6078      	str	r0, [r7, #4]
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	4618      	mov	r0, r3
 80143d2:	370c      	adds	r7, #12
 80143d4:	46bd      	mov	sp, r7
 80143d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143da:	4770      	bx	lr

080143dc <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80143dc:	b580      	push	{r7, lr}
 80143de:	b084      	sub	sp, #16
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	60f8      	str	r0, [r7, #12]
 80143e4:	60b9      	str	r1, [r7, #8]
 80143e6:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80143e8:	68b9      	ldr	r1, [r7, #8]
 80143ea:	68f8      	ldr	r0, [r7, #12]
 80143ec:	f000 f8e0 	bl	80145b0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>
 80143f0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80143f4:	eeb0 0a67 	vmov.f32	s0, s15
 80143f8:	3710      	adds	r7, #16
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}

080143fe <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
 80143fe:	b580      	push	{r7, lr}
 8014400:	b082      	sub	sp, #8
 8014402:	af00      	add	r7, sp, #0
 8014404:	6078      	str	r0, [r7, #4]
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	f000 f8f6 	bl	80145f8 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	4618      	mov	r0, r3
 8014410:	3708      	adds	r7, #8
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
	...

08014418 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8014418:	b580      	push	{r7, lr}
 801441a:	b084      	sub	sp, #16
 801441c:	af00      	add	r7, sp, #0
 801441e:	60f8      	str	r0, [r7, #12]
 8014420:	60b9      	str	r1, [r7, #8]
 8014422:	607a      	str	r2, [r7, #4]
 8014424:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8014426:	68f8      	ldr	r0, [r7, #12]
 8014428:	f7ff ffe9 	bl	80143fe <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	68ba      	ldr	r2, [r7, #8]
 8014430:	601a      	str	r2, [r3, #0]
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	3304      	adds	r3, #4
 8014436:	6879      	ldr	r1, [r7, #4]
 8014438:	4618      	mov	r0, r3
 801443a:	f7f2 fcf3 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	3305      	adds	r3, #5
 8014442:	6839      	ldr	r1, [r7, #0]
 8014444:	4618      	mov	r0, r3
 8014446:	f7f2 fced 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 801444a:	68bb      	ldr	r3, [r7, #8]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d011      	beq.n	8014474 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	2b00      	cmp	r3, #0
 8014454:	db08      	blt.n	8014468 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	2b01      	cmp	r3, #1
 801445a:	d105      	bne.n	8014468 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	2b00      	cmp	r3, #0
 8014460:	db02      	blt.n	8014468 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8014462:	683b      	ldr	r3, [r7, #0]
 8014464:	2b01      	cmp	r3, #1
 8014466:	d005      	beq.n	8014474 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8014468:	4b07      	ldr	r3, [pc, #28]	; (8014488 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 801446a:	4a08      	ldr	r2, [pc, #32]	; (801448c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 801446c:	21b0      	movs	r1, #176	; 0xb0
 801446e:	4808      	ldr	r0, [pc, #32]	; (8014490 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 8014470:	f009 fe90 	bl	801e194 <__assert_func>
      checkSanity<Derived>();
 8014474:	2100      	movs	r1, #0
 8014476:	68f8      	ldr	r0, [r7, #12]
 8014478:	f000 f8c9 	bl	801460e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	4618      	mov	r0, r3
 8014480:	3710      	adds	r7, #16
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}
 8014486:	bf00      	nop
 8014488:	08026720 	.word	0x08026720
 801448c:	08029834 	.word	0x08029834
 8014490:	080268d0 	.word	0x080268d0

08014494 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 8014494:	b580      	push	{r7, lr}
 8014496:	b082      	sub	sp, #8
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	689b      	ldr	r3, [r3, #8]
 80144a0:	4618      	mov	r0, r3
 80144a2:	f7fe fd73 	bl	8012f8c <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 80144a6:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	615a      	str	r2, [r3, #20]
    }
 80144ac:	bf00      	nop
 80144ae:	3708      	adds	r7, #8
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}

080144b4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b082      	sub	sp, #8
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
 80144bc:	6039      	str	r1, [r7, #0]
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	f000 f8b0 	bl	8014624 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	6839      	ldr	r1, [r7, #0]
 80144c8:	4618      	mov	r0, r3
 80144ca:	f000 f8b6 	bl	801463a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	4618      	mov	r0, r3
 80144d2:	3708      	adds	r7, #8
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd80      	pop	{r7, pc}

080144d8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 80144d8:	b580      	push	{r7, lr}
 80144da:	b084      	sub	sp, #16
 80144dc:	af00      	add	r7, sp, #0
 80144de:	60f8      	str	r0, [r7, #12]
 80144e0:	60b9      	str	r1, [r7, #8]
 80144e2:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	687a      	ldr	r2, [r7, #4]
 80144e8:	68b9      	ldr	r1, [r7, #8]
 80144ea:	4618      	mov	r0, r3
 80144ec:	f000 f8cd 	bl	801468a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 80144f0:	eef0 7a40 	vmov.f32	s15, s0
 80144f4:	eeb0 0a67 	vmov.f32	s0, s15
 80144f8:	3710      	adds	r7, #16
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}

080144fe <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80144fe:	b580      	push	{r7, lr}
 8014500:	b082      	sub	sp, #8
 8014502:	af00      	add	r7, sp, #0
 8014504:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8014506:	2202      	movs	r2, #2
 8014508:	2102      	movs	r1, #2
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f7fd fe14 	bl	8012138 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014510:	6878      	ldr	r0, [r7, #4]
 8014512:	f000 f8ea 	bl	80146ea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>
  }
 8014516:	bf00      	nop
 8014518:	3708      	adds	r7, #8
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}

0801451e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801451e:	b580      	push	{r7, lr}
 8014520:	b082      	sub	sp, #8
 8014522:	af00      	add	r7, sp, #0
 8014524:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8014526:	2201      	movs	r2, #1
 8014528:	2102      	movs	r1, #2
 801452a:	6878      	ldr	r0, [r7, #4]
 801452c:	f7fe faad 	bl	8012a8a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f000 f8e4 	bl	80146fe <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>
  }
 8014536:	bf00      	nop
 8014538:	3708      	adds	r7, #8
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}

0801453e <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 801453e:	b580      	push	{r7, lr}
 8014540:	b082      	sub	sp, #8
 8014542:	af00      	add	r7, sp, #0
 8014544:	6078      	str	r0, [r7, #4]
 8014546:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	6839      	ldr	r1, [r7, #0]
 801454c:	4618      	mov	r0, r3
 801454e:	f000 f8e6 	bl	801471e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	4618      	mov	r0, r3
 8014556:	f000 f90c 	bl	8014772 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 801455a:	bf00      	nop
  }
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	4618      	mov	r0, r3
 8014560:	3708      	adds	r7, #8
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}

08014566 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8014566:	b580      	push	{r7, lr}
 8014568:	b082      	sub	sp, #8
 801456a:	af00      	add	r7, sp, #0
 801456c:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 801456e:	f7f2 fc7e 	bl	8006e6e <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8014572:	4603      	mov	r3, r0
  }
 8014574:	4618      	mov	r0, r3
 8014576:	3708      	adds	r7, #8
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}

0801457c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 801457c:	b580      	push	{r7, lr}
 801457e:	b082      	sub	sp, #8
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8014584:	f7f2 fc7b 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8014588:	4603      	mov	r3, r0
  }
 801458a:	4618      	mov	r0, r3
 801458c:	3708      	adds	r7, #8
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}

08014592 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014592:	b580      	push	{r7, lr}
 8014594:	b082      	sub	sp, #8
 8014596:	af00      	add	r7, sp, #0
 8014598:	6078      	str	r0, [r7, #4]
 801459a:	6039      	str	r1, [r7, #0]
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	6839      	ldr	r1, [r7, #0]
 80145a0:	4618      	mov	r0, r3
 80145a2:	f000 f8f2 	bl	801478a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	4618      	mov	r0, r3
 80145aa:	3708      	adds	r7, #8
 80145ac:	46bd      	mov	sp, r7
 80145ae:	bd80      	pop	{r7, pc}

080145b0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b084      	sub	sp, #16
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	6078      	str	r0, [r7, #4]
 80145b8:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80145ba:	6839      	ldr	r1, [r7, #0]
 80145bc:	6878      	ldr	r0, [r7, #4]
 80145be:	f000 f8f6 	bl	80147ae <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>
 80145c2:	eef0 7a40 	vmov.f32	s15, s0
 80145c6:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80145ca:	6839      	ldr	r1, [r7, #0]
 80145cc:	6878      	ldr	r0, [r7, #4]
 80145ce:	f000 f8ff 	bl	80147d0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>
 80145d2:	eef0 7a40 	vmov.f32	s15, s0
 80145d6:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80145da:	f107 020c 	add.w	r2, r7, #12
 80145de:	f107 0308 	add.w	r3, r7, #8
 80145e2:	4619      	mov	r1, r3
 80145e4:	6838      	ldr	r0, [r7, #0]
 80145e6:	f7f5 f808 	bl	80095fa <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80145ea:	eef0 7a40 	vmov.f32	s15, s0
  }
 80145ee:	eeb0 0a67 	vmov.f32	s0, s15
 80145f2:	3710      	adds	r7, #16
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}

080145f8 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80145f8:	b480      	push	{r7}
 80145fa:	b083      	sub	sp, #12
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
    }
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	4618      	mov	r0, r3
 8014604:	370c      	adds	r7, #12
 8014606:	46bd      	mov	sp, r7
 8014608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460c:	4770      	bx	lr

0801460e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 801460e:	b480      	push	{r7}
 8014610:	b083      	sub	sp, #12
 8014612:	af00      	add	r7, sp, #0
 8014614:	6078      	str	r0, [r7, #4]
 8014616:	6039      	str	r1, [r7, #0]
    {}
 8014618:	bf00      	nop
 801461a:	370c      	adds	r7, #12
 801461c:	46bd      	mov	sp, r7
 801461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014622:	4770      	bx	lr

08014624 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014624:	b480      	push	{r7}
 8014626:	b083      	sub	sp, #12
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	4618      	mov	r0, r3
 8014630:	370c      	adds	r7, #12
 8014632:	46bd      	mov	sp, r7
 8014634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014638:	4770      	bx	lr

0801463a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 801463a:	b590      	push	{r4, r7, lr}
 801463c:	b083      	sub	sp, #12
 801463e:	af00      	add	r7, sp, #0
 8014640:	6078      	str	r0, [r7, #4]
 8014642:	6039      	str	r1, [r7, #0]
 8014644:	687c      	ldr	r4, [r7, #4]
 8014646:	6838      	ldr	r0, [r7, #0]
 8014648:	f000 f8e6 	bl	8014818 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>
 801464c:	4603      	mov	r3, r0
 801464e:	4619      	mov	r1, r3
 8014650:	4620      	mov	r0, r4
 8014652:	f7f1 f96d 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	1d1c      	adds	r4, r3, #4
 801465a:	6838      	ldr	r0, [r7, #0]
 801465c:	f000 f8e8 	bl	8014830 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>
 8014660:	4603      	mov	r3, r0
 8014662:	4619      	mov	r1, r3
 8014664:	4620      	mov	r0, r4
 8014666:	f7fa ffac 	bl	800f5c2 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	f103 040c 	add.w	r4, r3, #12
 8014670:	6838      	ldr	r0, [r7, #0]
 8014672:	f000 f8e8 	bl	8014846 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>
 8014676:	4603      	mov	r3, r0
 8014678:	4619      	mov	r1, r3
 801467a:	4620      	mov	r0, r4
 801467c:	f000 f8ef 	bl	801485e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	4618      	mov	r0, r3
 8014684:	370c      	adds	r7, #12
 8014686:	46bd      	mov	sp, r7
 8014688:	bd90      	pop	{r4, r7, pc}

0801468a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801468a:	b590      	push	{r4, r7, lr}
 801468c:	b087      	sub	sp, #28
 801468e:	af00      	add	r7, sp, #0
 8014690:	60f8      	str	r0, [r7, #12]
 8014692:	60b9      	str	r1, [r7, #8]
 8014694:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	4618      	mov	r0, r3
 801469a:	f000 f8ef 	bl	801487c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 801469e:	4604      	mov	r4, r0
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	3304      	adds	r3, #4
 80146a4:	687a      	ldr	r2, [r7, #4]
 80146a6:	68b9      	ldr	r1, [r7, #8]
 80146a8:	4618      	mov	r0, r3
 80146aa:	f7fa ffb3 	bl	800f614 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 80146ae:	eef0 7a40 	vmov.f32	s15, s0
 80146b2:	edc7 7a04 	vstr	s15, [r7, #16]
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	330c      	adds	r3, #12
 80146ba:	687a      	ldr	r2, [r7, #4]
 80146bc:	68b9      	ldr	r1, [r7, #8]
 80146be:	4618      	mov	r0, r3
 80146c0:	f000 f8e7 	bl	8014892 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 80146c4:	eef0 7a40 	vmov.f32	s15, s0
 80146c8:	edc7 7a05 	vstr	s15, [r7, #20]
 80146cc:	f107 0214 	add.w	r2, r7, #20
 80146d0:	f107 0310 	add.w	r3, r7, #16
 80146d4:	4619      	mov	r1, r3
 80146d6:	4620      	mov	r0, r4
 80146d8:	f7fa ffd0 	bl	800f67c <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80146dc:	eef0 7a40 	vmov.f32	s15, s0
  }
 80146e0:	eeb0 0a67 	vmov.f32	s0, s15
 80146e4:	371c      	adds	r7, #28
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd90      	pop	{r4, r7, pc}

080146ea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80146ea:	b480      	push	{r7}
 80146ec:	b083      	sub	sp, #12
 80146ee:	af00      	add	r7, sp, #0
 80146f0:	6078      	str	r0, [r7, #4]
 80146f2:	bf00      	nop
 80146f4:	370c      	adds	r7, #12
 80146f6:	46bd      	mov	sp, r7
 80146f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fc:	4770      	bx	lr

080146fe <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80146fe:	b580      	push	{r7, lr}
 8014700:	b082      	sub	sp, #8
 8014702:	af00      	add	r7, sp, #0
 8014704:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8014706:	2202      	movs	r2, #2
 8014708:	2102      	movs	r1, #2
 801470a:	6878      	ldr	r0, [r7, #4]
 801470c:	f7fe f9bd 	bl	8012a8a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	f000 f8df 	bl	80148d4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>
  }
 8014716:	bf00      	nop
 8014718:	3708      	adds	r7, #8
 801471a:	46bd      	mov	sp, r7
 801471c:	bd80      	pop	{r7, pc}

0801471e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 801471e:	b590      	push	{r4, r7, lr}
 8014720:	b083      	sub	sp, #12
 8014722:	af00      	add	r7, sp, #0
 8014724:	6078      	str	r0, [r7, #4]
 8014726:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f000 f8f9 	bl	8014920 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 801472e:	683b      	ldr	r3, [r7, #0]
 8014730:	4618      	mov	r0, r3
 8014732:	f000 f81e 	bl	8014772 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 8014736:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	601a      	str	r2, [r3, #0]
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	1d1c      	adds	r4, r3, #4
 8014740:	683b      	ldr	r3, [r7, #0]
 8014742:	4618      	mov	r0, r3
 8014744:	f000 f8d0 	bl	80148e8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>
 8014748:	4603      	mov	r3, r0
 801474a:	4619      	mov	r1, r3
 801474c:	4620      	mov	r0, r4
 801474e:	f7f2 fb69 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	1d5c      	adds	r4, r3, #5
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	4618      	mov	r0, r3
 801475a:	f000 f8d3 	bl	8014904 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>
 801475e:	4603      	mov	r3, r0
 8014760:	4619      	mov	r1, r3
 8014762:	4620      	mov	r0, r4
 8014764:	f7f2 fb44 	bl	8006df0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	4618      	mov	r0, r3
 801476c:	370c      	adds	r7, #12
 801476e:	46bd      	mov	sp, r7
 8014770:	bd90      	pop	{r4, r7, pc}

08014772 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8014772:	b480      	push	{r7}
 8014774:	b083      	sub	sp, #12
 8014776:	af00      	add	r7, sp, #0
 8014778:	6078      	str	r0, [r7, #4]
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	4618      	mov	r0, r3
 8014780:	370c      	adds	r7, #12
 8014782:	46bd      	mov	sp, r7
 8014784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014788:	4770      	bx	lr

0801478a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801478a:	b580      	push	{r7, lr}
 801478c:	b082      	sub	sp, #8
 801478e:	af00      	add	r7, sp, #0
 8014790:	6078      	str	r0, [r7, #4]
 8014792:	6039      	str	r1, [r7, #0]
 8014794:	6878      	ldr	r0, [r7, #4]
 8014796:	f000 f8ce 	bl	8014936 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	6839      	ldr	r1, [r7, #0]
 801479e:	4618      	mov	r0, r3
 80147a0:	f000 f8d4 	bl	801494c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	4618      	mov	r0, r3
 80147a8:	3708      	adds	r7, #8
 80147aa:	46bd      	mov	sp, r7
 80147ac:	bd80      	pop	{r7, pc}

080147ae <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80147ae:	b580      	push	{r7, lr}
 80147b0:	b082      	sub	sp, #8
 80147b2:	af00      	add	r7, sp, #0
 80147b4:	6078      	str	r0, [r7, #4]
 80147b6:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80147b8:	2200      	movs	r2, #0
 80147ba:	2100      	movs	r1, #0
 80147bc:	6878      	ldr	r0, [r7, #4]
 80147be:	f000 f8ed 	bl	801499c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 80147c2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80147c6:	eeb0 0a67 	vmov.f32	s0, s15
 80147ca:	3708      	adds	r7, #8
 80147cc:	46bd      	mov	sp, r7
 80147ce:	bd80      	pop	{r7, pc}

080147d0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b084      	sub	sp, #16
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
 80147d8:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80147da:	6839      	ldr	r1, [r7, #0]
 80147dc:	6878      	ldr	r0, [r7, #4]
 80147de:	f000 f8f0 	bl	80149c2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>
 80147e2:	eef0 7a40 	vmov.f32	s15, s0
 80147e6:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80147ea:	6839      	ldr	r1, [r7, #0]
 80147ec:	6878      	ldr	r0, [r7, #4]
 80147ee:	f000 f8f9 	bl	80149e4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>
 80147f2:	eef0 7a40 	vmov.f32	s15, s0
 80147f6:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80147fa:	f107 020c 	add.w	r2, r7, #12
 80147fe:	f107 0308 	add.w	r3, r7, #8
 8014802:	4619      	mov	r1, r3
 8014804:	6838      	ldr	r0, [r7, #0]
 8014806:	f7f4 fef8 	bl	80095fa <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 801480a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801480e:	eeb0 0a67 	vmov.f32	s0, s15
 8014812:	3710      	adds	r7, #16
 8014814:	46bd      	mov	sp, r7
 8014816:	bd80      	pop	{r7, pc}

08014818 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8014818:	b480      	push	{r7}
 801481a:	b083      	sub	sp, #12
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	3330      	adds	r3, #48	; 0x30
 8014824:	4618      	mov	r0, r3
 8014826:	370c      	adds	r7, #12
 8014828:	46bd      	mov	sp, r7
 801482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482e:	4770      	bx	lr

08014830 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8014830:	b480      	push	{r7}
 8014832:	b083      	sub	sp, #12
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	4618      	mov	r0, r3
 801483c:	370c      	adds	r7, #12
 801483e:	46bd      	mov	sp, r7
 8014840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014844:	4770      	bx	lr

08014846 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8014846:	b480      	push	{r7}
 8014848:	b083      	sub	sp, #12
 801484a:	af00      	add	r7, sp, #0
 801484c:	6078      	str	r0, [r7, #4]
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	3318      	adds	r3, #24
 8014852:	4618      	mov	r0, r3
 8014854:	370c      	adds	r7, #12
 8014856:	46bd      	mov	sp, r7
 8014858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485c:	4770      	bx	lr

0801485e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801485e:	b580      	push	{r7, lr}
 8014860:	b082      	sub	sp, #8
 8014862:	af00      	add	r7, sp, #0
 8014864:	6078      	str	r0, [r7, #4]
 8014866:	6039      	str	r1, [r7, #0]
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	6839      	ldr	r1, [r7, #0]
 801486c:	4618      	mov	r0, r3
 801486e:	f000 f8ca 	bl	8014a06 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	4618      	mov	r0, r3
 8014876:	3708      	adds	r7, #8
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}

0801487c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 801487c:	b480      	push	{r7}
 801487e:	b083      	sub	sp, #12
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	4618      	mov	r0, r3
 8014888:	370c      	adds	r7, #12
 801488a:	46bd      	mov	sp, r7
 801488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014890:	4770      	bx	lr

08014892 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014892:	b5b0      	push	{r4, r5, r7, lr}
 8014894:	b084      	sub	sp, #16
 8014896:	af00      	add	r7, sp, #0
 8014898:	60f8      	str	r0, [r7, #12]
 801489a:	60b9      	str	r1, [r7, #8]
 801489c:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	681c      	ldr	r4, [r3, #0]
 80148a2:	68f8      	ldr	r0, [r7, #12]
 80148a4:	f000 f8be 	bl	8014a24 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 80148a8:	4602      	mov	r2, r0
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	fb03 f502 	mul.w	r5, r3, r2
 80148b0:	68f8      	ldr	r0, [r7, #12]
 80148b2:	f000 f8c2 	bl	8014a3a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 80148b6:	4602      	mov	r2, r0
 80148b8:	68bb      	ldr	r3, [r7, #8]
 80148ba:	fb02 f303 	mul.w	r3, r2, r3
 80148be:	442b      	add	r3, r5
 80148c0:	009b      	lsls	r3, r3, #2
 80148c2:	4423      	add	r3, r4
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	ee07 3a90 	vmov	s15, r3
  }
 80148ca:	eeb0 0a67 	vmov.f32	s0, s15
 80148ce:	3710      	adds	r7, #16
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bdb0      	pop	{r4, r5, r7, pc}

080148d4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80148d4:	b480      	push	{r7}
 80148d6:	b083      	sub	sp, #12
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
 80148dc:	bf00      	nop
 80148de:	370c      	adds	r7, #12
 80148e0:	46bd      	mov	sp, r7
 80148e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e6:	4770      	bx	lr

080148e8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b082      	sub	sp, #8
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	3308      	adds	r3, #8
 80148f4:	4618      	mov	r0, r3
 80148f6:	f7fe fd4e 	bl	8013396 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>
 80148fa:	4603      	mov	r3, r0
    }
 80148fc:	4618      	mov	r0, r3
 80148fe:	3708      	adds	r7, #8
 8014900:	46bd      	mov	sp, r7
 8014902:	bd80      	pop	{r7, pc}

08014904 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8014904:	b580      	push	{r7, lr}
 8014906:	b082      	sub	sp, #8
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	3308      	adds	r3, #8
 8014910:	4618      	mov	r0, r3
 8014912:	f7fe fd54 	bl	80133be <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8014916:	4603      	mov	r3, r0
    }
 8014918:	4618      	mov	r0, r3
 801491a:	3708      	adds	r7, #8
 801491c:	46bd      	mov	sp, r7
 801491e:	bd80      	pop	{r7, pc}

08014920 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014920:	b480      	push	{r7}
 8014922:	b083      	sub	sp, #12
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	4618      	mov	r0, r3
 801492c:	370c      	adds	r7, #12
 801492e:	46bd      	mov	sp, r7
 8014930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014934:	4770      	bx	lr

08014936 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 8014936:	b480      	push	{r7}
 8014938:	b083      	sub	sp, #12
 801493a:	af00      	add	r7, sp, #0
 801493c:	6078      	str	r0, [r7, #4]
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	4618      	mov	r0, r3
 8014942:	370c      	adds	r7, #12
 8014944:	46bd      	mov	sp, r7
 8014946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494a:	4770      	bx	lr

0801494c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 801494c:	b590      	push	{r4, r7, lr}
 801494e:	b083      	sub	sp, #12
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
 8014954:	6039      	str	r1, [r7, #0]
 8014956:	687c      	ldr	r4, [r7, #4]
 8014958:	6838      	ldr	r0, [r7, #0]
 801495a:	f000 f879 	bl	8014a50 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>
 801495e:	4603      	mov	r3, r0
 8014960:	4619      	mov	r1, r3
 8014962:	4620      	mov	r0, r4
 8014964:	f7f0 ffe4 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	1d1c      	adds	r4, r3, #4
 801496c:	6838      	ldr	r0, [r7, #0]
 801496e:	f000 f87b 	bl	8014a68 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>
 8014972:	4603      	mov	r3, r0
 8014974:	4619      	mov	r1, r3
 8014976:	4620      	mov	r0, r4
 8014978:	f000 f88d 	bl	8014a96 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	f103 0414 	add.w	r4, r3, #20
 8014982:	6838      	ldr	r0, [r7, #0]
 8014984:	f000 f87b 	bl	8014a7e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>
 8014988:	4603      	mov	r3, r0
 801498a:	4619      	mov	r1, r3
 801498c:	4620      	mov	r0, r4
 801498e:	f000 f891 	bl	8014ab4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	4618      	mov	r0, r3
 8014996:	370c      	adds	r7, #12
 8014998:	46bd      	mov	sp, r7
 801499a:	bd90      	pop	{r4, r7, pc}

0801499c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 801499c:	b580      	push	{r7, lr}
 801499e:	b084      	sub	sp, #16
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	60f8      	str	r0, [r7, #12]
 80149a4:	60b9      	str	r1, [r7, #8]
 80149a6:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	68ba      	ldr	r2, [r7, #8]
 80149ac:	6879      	ldr	r1, [r7, #4]
 80149ae:	4618      	mov	r0, r3
 80149b0:	f000 f88f 	bl	8014ad2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>
 80149b4:	eef0 7a40 	vmov.f32	s15, s0
 80149b8:	eeb0 0a67 	vmov.f32	s0, s15
 80149bc:	3710      	adds	r7, #16
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}

080149c2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80149c2:	b580      	push	{r7, lr}
 80149c4:	b082      	sub	sp, #8
 80149c6:	af00      	add	r7, sp, #0
 80149c8:	6078      	str	r0, [r7, #4]
 80149ca:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80149cc:	2201      	movs	r2, #1
 80149ce:	2100      	movs	r1, #0
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f7ff ffe3 	bl	801499c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 80149d6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80149da:	eeb0 0a67 	vmov.f32	s0, s15
 80149de:	3708      	adds	r7, #8
 80149e0:	46bd      	mov	sp, r7
 80149e2:	bd80      	pop	{r7, pc}

080149e4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b082      	sub	sp, #8
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
 80149ec:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80149ee:	2202      	movs	r2, #2
 80149f0:	2100      	movs	r1, #0
 80149f2:	6878      	ldr	r0, [r7, #4]
 80149f4:	f7ff ffd2 	bl	801499c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 80149f8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80149fc:	eeb0 0a67 	vmov.f32	s0, s15
 8014a00:	3708      	adds	r7, #8
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}

08014a06 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8014a06:	b580      	push	{r7, lr}
 8014a08:	b082      	sub	sp, #8
 8014a0a:	af00      	add	r7, sp, #0
 8014a0c:	6078      	str	r0, [r7, #4]
 8014a0e:	6039      	str	r1, [r7, #0]
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	6839      	ldr	r1, [r7, #0]
 8014a14:	4618      	mov	r0, r3
 8014a16:	f000 f887 	bl	8014b28 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	3708      	adds	r7, #8
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}

08014a24 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b082      	sub	sp, #8
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8014a2c:	f7f2 fa27 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8014a30:	4603      	mov	r3, r0
  }
 8014a32:	4618      	mov	r0, r3
 8014a34:	3708      	adds	r7, #8
 8014a36:	46bd      	mov	sp, r7
 8014a38:	bd80      	pop	{r7, pc}

08014a3a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8014a3a:	b580      	push	{r7, lr}
 8014a3c:	b082      	sub	sp, #8
 8014a3e:	af00      	add	r7, sp, #0
 8014a40:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8014a42:	f7f2 fa14 	bl	8006e6e <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8014a46:	4603      	mov	r3, r0
  }
 8014a48:	4618      	mov	r0, r3
 8014a4a:	3708      	adds	r7, #8
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	bd80      	pop	{r7, pc}

08014a50 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8014a50:	b480      	push	{r7}
 8014a52:	b083      	sub	sp, #12
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	330c      	adds	r3, #12
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	370c      	adds	r7, #12
 8014a60:	46bd      	mov	sp, r7
 8014a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a66:	4770      	bx	lr

08014a68 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8014a68:	b480      	push	{r7}
 8014a6a:	b083      	sub	sp, #12
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	4618      	mov	r0, r3
 8014a74:	370c      	adds	r7, #12
 8014a76:	46bd      	mov	sp, r7
 8014a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7c:	4770      	bx	lr

08014a7e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8014a7e:	b480      	push	{r7}
 8014a80:	b083      	sub	sp, #12
 8014a82:	af00      	add	r7, sp, #0
 8014a84:	6078      	str	r0, [r7, #4]
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	3308      	adds	r3, #8
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	370c      	adds	r7, #12
 8014a8e:	46bd      	mov	sp, r7
 8014a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a94:	4770      	bx	lr

08014a96 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8014a96:	b580      	push	{r7, lr}
 8014a98:	b082      	sub	sp, #8
 8014a9a:	af00      	add	r7, sp, #0
 8014a9c:	6078      	str	r0, [r7, #4]
 8014a9e:	6039      	str	r1, [r7, #0]
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	6839      	ldr	r1, [r7, #0]
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	f000 f853 	bl	8014b50 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	4618      	mov	r0, r3
 8014aae:	3708      	adds	r7, #8
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}

08014ab4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>:
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b082      	sub	sp, #8
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
 8014abc:	6039      	str	r1, [r7, #0]
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	6839      	ldr	r1, [r7, #0]
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f7fc f952 	bl	8010d6c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	4618      	mov	r0, r3
 8014acc:	3708      	adds	r7, #8
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd80      	pop	{r7, pc}

08014ad2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014ad2:	b590      	push	{r4, r7, lr}
 8014ad4:	b087      	sub	sp, #28
 8014ad6:	af00      	add	r7, sp, #0
 8014ad8:	60f8      	str	r0, [r7, #12]
 8014ada:	60b9      	str	r1, [r7, #8]
 8014adc:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f000 f844 	bl	8014b6e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 8014ae6:	4604      	mov	r4, r0
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	3304      	adds	r3, #4
 8014aec:	687a      	ldr	r2, [r7, #4]
 8014aee:	68b9      	ldr	r1, [r7, #8]
 8014af0:	4618      	mov	r0, r3
 8014af2:	f000 f847 	bl	8014b84 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>
 8014af6:	eef0 7a40 	vmov.f32	s15, s0
 8014afa:	edc7 7a05 	vstr	s15, [r7, #20]
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	3314      	adds	r3, #20
 8014b02:	687a      	ldr	r2, [r7, #4]
 8014b04:	68b9      	ldr	r1, [r7, #8]
 8014b06:	4618      	mov	r0, r3
 8014b08:	f000 f851 	bl	8014bae <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 8014b0c:	4602      	mov	r2, r0
 8014b0e:	f107 0314 	add.w	r3, r7, #20
 8014b12:	4619      	mov	r1, r3
 8014b14:	4620      	mov	r0, r4
 8014b16:	f7fa fdb1 	bl	800f67c <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8014b1a:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8014b22:	371c      	adds	r7, #28
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bd90      	pop	{r4, r7, pc}

08014b28 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b082      	sub	sp, #8
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
 8014b30:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	6839      	ldr	r1, [r7, #0]
 8014b36:	4618      	mov	r0, r3
 8014b38:	f000 f84a 	bl	8014bd0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8014b3c:	683b      	ldr	r3, [r7, #0]
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f000 f870 	bl	8014c24 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 8014b44:	bf00      	nop
  }
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	4618      	mov	r0, r3
 8014b4a:	3708      	adds	r7, #8
 8014b4c:	46bd      	mov	sp, r7
 8014b4e:	bd80      	pop	{r7, pc}

08014b50 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b082      	sub	sp, #8
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
 8014b58:	6039      	str	r1, [r7, #0]
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	6839      	ldr	r1, [r7, #0]
 8014b5e:	4618      	mov	r0, r3
 8014b60:	f000 f86c 	bl	8014c3c <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	4618      	mov	r0, r3
 8014b68:	3708      	adds	r7, #8
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	bd80      	pop	{r7, pc}

08014b6e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8014b6e:	b480      	push	{r7}
 8014b70:	b083      	sub	sp, #12
 8014b72:	af00      	add	r7, sp, #0
 8014b74:	6078      	str	r0, [r7, #4]
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	4618      	mov	r0, r3
 8014b7a:	370c      	adds	r7, #12
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b82:	4770      	bx	lr

08014b84 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b084      	sub	sp, #16
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	60f8      	str	r0, [r7, #12]
 8014b8c:	60b9      	str	r1, [r7, #8]
 8014b8e:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	68ba      	ldr	r2, [r7, #8]
 8014b94:	6879      	ldr	r1, [r7, #4]
 8014b96:	4618      	mov	r0, r3
 8014b98:	f7ff f85b 	bl	8013c52 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	ee07 3a90 	vmov	s15, r3
  }
 8014ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8014ba8:	3710      	adds	r7, #16
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}

08014bae <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014bae:	b580      	push	{r7, lr}
 8014bb0:	b084      	sub	sp, #16
 8014bb2:	af00      	add	r7, sp, #0
 8014bb4:	60f8      	str	r0, [r7, #12]
 8014bb6:	60b9      	str	r1, [r7, #8]
 8014bb8:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	68ba      	ldr	r2, [r7, #8]
 8014bbe:	6879      	ldr	r1, [r7, #4]
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	f7ff f846 	bl	8013c52 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8014bc6:	4603      	mov	r3, r0
  }
 8014bc8:	4618      	mov	r0, r3
 8014bca:	3710      	adds	r7, #16
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd80      	pop	{r7, pc}

08014bd0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8014bd0:	b590      	push	{r4, r7, lr}
 8014bd2:	b083      	sub	sp, #12
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
 8014bd8:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8014bda:	6878      	ldr	r0, [r7, #4]
 8014bdc:	f000 f860 	bl	8014ca0 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8014be0:	683b      	ldr	r3, [r7, #0]
 8014be2:	4618      	mov	r0, r3
 8014be4:	f000 f81e 	bl	8014c24 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 8014be8:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	601a      	str	r2, [r3, #0]
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	1d1c      	adds	r4, r3, #4
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	f000 f837 	bl	8014c68 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	4619      	mov	r1, r3
 8014bfe:	4620      	mov	r0, r4
 8014c00:	f7f2 f910 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	1d5c      	adds	r4, r3, #5
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f000 f83a 	bl	8014c84 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 8014c10:	4603      	mov	r3, r0
 8014c12:	4619      	mov	r1, r3
 8014c14:	4620      	mov	r0, r4
 8014c16:	f7f2 f8eb 	bl	8006df0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	370c      	adds	r7, #12
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd90      	pop	{r4, r7, pc}

08014c24 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>:
 8014c24:	b480      	push	{r7}
 8014c26:	b083      	sub	sp, #12
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	4618      	mov	r0, r3
 8014c32:	370c      	adds	r7, #12
 8014c34:	46bd      	mov	sp, r7
 8014c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3a:	4770      	bx	lr

08014c3c <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8014c3c:	b590      	push	{r4, r7, lr}
 8014c3e:	b083      	sub	sp, #12
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
 8014c44:	6039      	str	r1, [r7, #0]
 8014c46:	6878      	ldr	r0, [r7, #4]
 8014c48:	f000 f840 	bl	8014ccc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8014c4c:	687c      	ldr	r4, [r7, #4]
 8014c4e:	6838      	ldr	r0, [r7, #0]
 8014c50:	f000 f831 	bl	8014cb6 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>
 8014c54:	4603      	mov	r3, r0
 8014c56:	4619      	mov	r1, r3
 8014c58:	4620      	mov	r0, r4
 8014c5a:	f000 f842 	bl	8014ce2 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	4618      	mov	r0, r3
 8014c62:	370c      	adds	r7, #12
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd90      	pop	{r4, r7, pc}

08014c68 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b082      	sub	sp, #8
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	689b      	ldr	r3, [r3, #8]
 8014c74:	4618      	mov	r0, r3
 8014c76:	f7fe fecd 	bl	8013a14 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8014c7a:	4603      	mov	r3, r0
    }
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	3708      	adds	r7, #8
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}

08014c84 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b082      	sub	sp, #8
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	689b      	ldr	r3, [r3, #8]
 8014c90:	4618      	mov	r0, r3
 8014c92:	f7fe f97b 	bl	8012f8c <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8014c96:	4603      	mov	r3, r0
    }
 8014c98:	4618      	mov	r0, r3
 8014c9a:	3708      	adds	r7, #8
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	bd80      	pop	{r7, pc}

08014ca0 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014ca0:	b480      	push	{r7}
 8014ca2:	b083      	sub	sp, #12
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	4618      	mov	r0, r3
 8014cac:	370c      	adds	r7, #12
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb4:	4770      	bx	lr

08014cb6 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>:
 8014cb6:	b480      	push	{r7}
 8014cb8:	b083      	sub	sp, #12
 8014cba:	af00      	add	r7, sp, #0
 8014cbc:	6078      	str	r0, [r7, #4]
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	370c      	adds	r7, #12
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cca:	4770      	bx	lr

08014ccc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8014ccc:	b480      	push	{r7}
 8014cce:	b083      	sub	sp, #12
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	6078      	str	r0, [r7, #4]
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	370c      	adds	r7, #12
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce0:	4770      	bx	lr

08014ce2 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8014ce2:	b580      	push	{r7, lr}
 8014ce4:	b082      	sub	sp, #8
 8014ce6:	af00      	add	r7, sp, #0
 8014ce8:	6078      	str	r0, [r7, #4]
 8014cea:	6039      	str	r1, [r7, #0]
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	6839      	ldr	r1, [r7, #0]
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f000 f805 	bl	8014d00 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	3708      	adds	r7, #8
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	bd80      	pop	{r7, pc}

08014d00 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b082      	sub	sp, #8
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
 8014d08:	6039      	str	r1, [r7, #0]
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	6839      	ldr	r1, [r7, #0]
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f000 f805 	bl	8014d1e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	4618      	mov	r0, r3
 8014d18:	3708      	adds	r7, #8
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}

08014d1e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8014d1e:	b5b0      	push	{r4, r5, r7, lr}
 8014d20:	b084      	sub	sp, #16
 8014d22:	af00      	add	r7, sp, #0
 8014d24:	6078      	str	r0, [r7, #4]
 8014d26:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f000 f834 	bl	8014d98 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	1d1c      	adds	r4, r3, #4
 8014d34:	6838      	ldr	r0, [r7, #0]
 8014d36:	f7f2 f9aa 	bl	800708e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	60bb      	str	r3, [r7, #8]
 8014d3e:	6838      	ldr	r0, [r7, #0]
 8014d40:	f7f1 fa33 	bl	80061aa <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8014d44:	4603      	mov	r3, r0
 8014d46:	60fb      	str	r3, [r7, #12]
 8014d48:	f107 020c 	add.w	r2, r7, #12
 8014d4c:	f107 0308 	add.w	r3, r7, #8
 8014d50:	4619      	mov	r1, r3
 8014d52:	4620      	mov	r0, r4
 8014d54:	f000 f82d 	bl	8014db2 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	4619      	mov	r1, r3
 8014d5c:	2004      	movs	r0, #4
 8014d5e:	f7ec f935 	bl	8000fcc <_ZnwjPv>
 8014d62:	4602      	mov	r2, r0
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	3304      	adds	r3, #4
 8014d68:	4619      	mov	r1, r3
 8014d6a:	4610      	mov	r0, r2
 8014d6c:	f7fd f884 	bl	8011e78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	1d1c      	adds	r4, r3, #4
 8014d74:	6838      	ldr	r0, [r7, #0]
 8014d76:	f000 f835 	bl	8014de4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>
 8014d7a:	4605      	mov	r5, r0
 8014d7c:	6838      	ldr	r0, [r7, #0]
 8014d7e:	f000 f83d 	bl	8014dfc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>
 8014d82:	4603      	mov	r3, r0
 8014d84:	461a      	mov	r2, r3
 8014d86:	4629      	mov	r1, r5
 8014d88:	4620      	mov	r0, r4
 8014d8a:	f000 f843 	bl	8014e14 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>
  }
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	4618      	mov	r0, r3
 8014d92:	3710      	adds	r7, #16
 8014d94:	46bd      	mov	sp, r7
 8014d96:	bdb0      	pop	{r4, r5, r7, pc}

08014d98 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  evaluator() {}
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b082      	sub	sp, #8
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	4618      	mov	r0, r3
 8014da4:	f000 f854 	bl	8014e50 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	4618      	mov	r0, r3
 8014dac:	3708      	adds	r7, #8
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}

08014db2 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8014db2:	b580      	push	{r7, lr}
 8014db4:	b084      	sub	sp, #16
 8014db6:	af00      	add	r7, sp, #0
 8014db8:	60f8      	str	r0, [r7, #12]
 8014dba:	60b9      	str	r1, [r7, #8]
 8014dbc:	607a      	str	r2, [r7, #4]
    {
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f7f0 f9f1 	bl	80051a8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 8014dc6:	f7f0 f9ff 	bl	80051c8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8014dca:	68f8      	ldr	r0, [r7, #12]
 8014dcc:	68bb      	ldr	r3, [r7, #8]
 8014dce:	6819      	ldr	r1, [r3, #0]
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	681a      	ldr	r2, [r3, #0]
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	f000 f84d 	bl	8014e74 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3710      	adds	r7, #16
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}

08014de4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8014de4:	b480      	push	{r7}
 8014de6:	b083      	sub	sp, #12
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	4618      	mov	r0, r3
 8014df2:	370c      	adds	r7, #12
 8014df4:	46bd      	mov	sp, r7
 8014df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfa:	4770      	bx	lr

08014dfc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8014dfc:	b480      	push	{r7}
 8014dfe:	b083      	sub	sp, #12
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	685b      	ldr	r3, [r3, #4]
 8014e08:	4618      	mov	r0, r3
 8014e0a:	370c      	adds	r7, #12
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e12:	4770      	bx	lr

08014e14 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b088      	sub	sp, #32
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	60f8      	str	r0, [r7, #12]
 8014e1c:	60b9      	str	r1, [r7, #8]
 8014e1e:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8014e20:	f107 0314 	add.w	r3, r7, #20
 8014e24:	687a      	ldr	r2, [r7, #4]
 8014e26:	68b9      	ldr	r1, [r7, #8]
 8014e28:	4618      	mov	r0, r3
 8014e2a:	f000 f837 	bl	8014e9c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 8014e2e:	f107 031c 	add.w	r3, r7, #28
 8014e32:	4618      	mov	r0, r3
 8014e34:	f7f2 fa81 	bl	800733a <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8014e38:	f107 021c 	add.w	r2, r7, #28
 8014e3c:	f107 0314 	add.w	r3, r7, #20
 8014e40:	4619      	mov	r1, r3
 8014e42:	68f8      	ldr	r0, [r7, #12]
 8014e44:	f000 f841 	bl	8014eca <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8014e48:	bf00      	nop
 8014e4a:	3720      	adds	r7, #32
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd80      	pop	{r7, pc}

08014e50 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  evaluator()
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b082      	sub	sp, #8
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8014e58:	6878      	ldr	r0, [r7, #4]
 8014e5a:	f7fd fe76 	bl	8012b4a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	2200      	movs	r2, #0
 8014e62:	2100      	movs	r1, #0
 8014e64:	4618      	mov	r0, r3
 8014e66:	f7f2 fb28 	bl	80074ba <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	3708      	adds	r7, #8
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd80      	pop	{r7, pc}

08014e74 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b086      	sub	sp, #24
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	60f8      	str	r0, [r7, #12]
 8014e7c:	60b9      	str	r1, [r7, #8]
 8014e7e:	607a      	str	r2, [r7, #4]
 8014e80:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8014e82:	2301      	movs	r3, #1
 8014e84:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8014e86:	2301      	movs	r3, #1
 8014e88:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8014e8a:	687a      	ldr	r2, [r7, #4]
 8014e8c:	68b9      	ldr	r1, [r7, #8]
 8014e8e:	68f8      	ldr	r0, [r7, #12]
 8014e90:	f000 f82c 	bl	8014eec <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
    }
 8014e94:	bf00      	nop
 8014e96:	3718      	adds	r7, #24
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}

08014e9c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8014e9c:	b590      	push	{r4, r7, lr}
 8014e9e:	b085      	sub	sp, #20
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	60f8      	str	r0, [r7, #12]
 8014ea4:	60b9      	str	r1, [r7, #8]
 8014ea6:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8014ea8:	68b8      	ldr	r0, [r7, #8]
 8014eaa:	f7f1 f8f1 	bl	8006090 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8014eae:	4604      	mov	r4, r0
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f7f0 fe1c 	bl	8005aee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	461a      	mov	r2, r3
 8014eba:	4621      	mov	r1, r4
 8014ebc:	68f8      	ldr	r0, [r7, #12]
 8014ebe:	f000 f86b 	bl	8014f98 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>
}
 8014ec2:	68f8      	ldr	r0, [r7, #12]
 8014ec4:	3714      	adds	r7, #20
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	bd90      	pop	{r4, r7, pc}

08014eca <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8014eca:	b580      	push	{r7, lr}
 8014ecc:	b086      	sub	sp, #24
 8014ece:	af00      	add	r7, sp, #0
 8014ed0:	60f8      	str	r0, [r7, #12]
 8014ed2:	60b9      	str	r1, [r7, #8]
 8014ed4:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8014eda:	687a      	ldr	r2, [r7, #4]
 8014edc:	68b9      	ldr	r1, [r7, #8]
 8014ede:	6978      	ldr	r0, [r7, #20]
 8014ee0:	f000 f888 	bl	8014ff4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8014ee4:	bf00      	nop
 8014ee6:	3718      	adds	r7, #24
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd80      	pop	{r7, pc}

08014eec <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b086      	sub	sp, #24
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	60f8      	str	r0, [r7, #12]
 8014ef4:	60b9      	str	r1, [r7, #8]
 8014ef6:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8014ef8:	68bb      	ldr	r3, [r7, #8]
 8014efa:	2b01      	cmp	r3, #1
 8014efc:	d108      	bne.n	8014f10 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	2b03      	cmp	r3, #3
 8014f02:	d105      	bne.n	8014f10 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014f04:	68bb      	ldr	r3, [r7, #8]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	db02      	blt.n	8014f10 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	da06      	bge.n	8014f1e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x32>
 8014f10:	4b0c      	ldr	r3, [pc, #48]	; (8014f44 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x58>)
 8014f12:	4a0d      	ldr	r2, [pc, #52]	; (8014f48 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x5c>)
 8014f14:	f240 1111 	movw	r1, #273	; 0x111
 8014f18:	480c      	ldr	r0, [pc, #48]	; (8014f4c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x60>)
 8014f1a:	f009 f93b 	bl	801e194 <__assert_func>
 8014f1e:	68bb      	ldr	r3, [r7, #8]
 8014f20:	617b      	str	r3, [r7, #20]
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	613b      	str	r3, [r7, #16]
  }
 8014f26:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8014f28:	68f8      	ldr	r0, [r7, #12]
 8014f2a:	68bb      	ldr	r3, [r7, #8]
 8014f2c:	687a      	ldr	r2, [r7, #4]
 8014f2e:	fb02 f103 	mul.w	r1, r2, r3
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	68ba      	ldr	r2, [r7, #8]
 8014f36:	f000 f870 	bl	801501a <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>
    }
 8014f3a:	bf00      	nop
 8014f3c:	3718      	adds	r7, #24
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}
 8014f42:	bf00      	nop
 8014f44:	08022a8c 	.word	0x08022a8c
 8014f48:	08029938 	.word	0x08029938
 8014f4c:	08022ca8 	.word	0x08022ca8

08014f50 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b082      	sub	sp, #8
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
 8014f58:	6878      	ldr	r0, [r7, #4]
 8014f5a:	f000 f86b 	bl	8015034 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	4618      	mov	r0, r3
 8014f62:	3708      	adds	r7, #8
 8014f64:	46bd      	mov	sp, r7
 8014f66:	bd80      	pop	{r7, pc}

08014f68 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>:
class dense_product_base
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b082      	sub	sp, #8
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
 8014f70:	6878      	ldr	r0, [r7, #4]
 8014f72:	f7ff ffed 	bl	8014f50 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	4618      	mov	r0, r3
 8014f7a:	3708      	adds	r7, #8
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}

08014f80 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b082      	sub	sp, #8
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
 8014f88:	6878      	ldr	r0, [r7, #4]
 8014f8a:	f7ff ffed 	bl	8014f68 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	4618      	mov	r0, r3
 8014f92:	3708      	adds	r7, #8
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}

08014f98 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8014f98:	b590      	push	{r4, r7, lr}
 8014f9a:	b085      	sub	sp, #20
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	60f8      	str	r0, [r7, #12]
 8014fa0:	60b9      	str	r1, [r7, #8]
 8014fa2:	607a      	str	r2, [r7, #4]
 8014fa4:	68f8      	ldr	r0, [r7, #12]
 8014fa6:	f7ff ffeb 	bl	8014f80 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	68ba      	ldr	r2, [r7, #8]
 8014fae:	601a      	str	r2, [r3, #0]
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	687a      	ldr	r2, [r7, #4]
 8014fb4:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8014fb6:	68bb      	ldr	r3, [r7, #8]
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f7f0 fb45 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014fbe:	4604      	mov	r4, r0
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7f0 f989 	bl	80052da <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	429c      	cmp	r4, r3
 8014fcc:	d005      	beq.n	8014fda <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 8014fce:	4b06      	ldr	r3, [pc, #24]	; (8014fe8 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 8014fd0:	4a06      	ldr	r2, [pc, #24]	; (8014fec <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 8014fd2:	2160      	movs	r1, #96	; 0x60
 8014fd4:	4806      	ldr	r0, [pc, #24]	; (8014ff0 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 8014fd6:	f009 f8dd 	bl	801e194 <__assert_func>
 8014fda:	bf00      	nop
    }
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	4618      	mov	r0, r3
 8014fe0:	3714      	adds	r7, #20
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	bd90      	pop	{r4, r7, pc}
 8014fe6:	bf00      	nop
 8014fe8:	080202bc 	.word	0x080202bc
 8014fec:	080299c4 	.word	0x080299c4
 8014ff0:	0802060c 	.word	0x0802060c

08014ff4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b084      	sub	sp, #16
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	60f8      	str	r0, [r7, #12]
 8014ffc:	60b9      	str	r1, [r7, #8]
 8014ffe:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8015000:	68b9      	ldr	r1, [r7, #8]
 8015002:	68f8      	ldr	r0, [r7, #12]
 8015004:	f000 f821 	bl	801504a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8015008:	687a      	ldr	r2, [r7, #4]
 801500a:	68b9      	ldr	r1, [r7, #8]
 801500c:	68f8      	ldr	r0, [r7, #12]
 801500e:	f000 f84a 	bl	80150a6 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8015012:	bf00      	nop
 8015014:	3710      	adds	r7, #16
 8015016:	46bd      	mov	sp, r7
 8015018:	bd80      	pop	{r7, pc}

0801501a <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 801501a:	b480      	push	{r7}
 801501c:	b085      	sub	sp, #20
 801501e:	af00      	add	r7, sp, #0
 8015020:	60f8      	str	r0, [r7, #12]
 8015022:	60b9      	str	r1, [r7, #8]
 8015024:	607a      	str	r2, [r7, #4]
 8015026:	603b      	str	r3, [r7, #0]
 8015028:	bf00      	nop
 801502a:	3714      	adds	r7, #20
 801502c:	46bd      	mov	sp, r7
 801502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015032:	4770      	bx	lr

08015034 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8015034:	b480      	push	{r7}
 8015036:	b083      	sub	sp, #12
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
    }
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	4618      	mov	r0, r3
 8015040:	370c      	adds	r7, #12
 8015042:	46bd      	mov	sp, r7
 8015044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015048:	4770      	bx	lr

0801504a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 801504a:	b480      	push	{r7}
 801504c:	b083      	sub	sp, #12
 801504e:	af00      	add	r7, sp, #0
 8015050:	6078      	str	r0, [r7, #4]
 8015052:	6039      	str	r1, [r7, #0]
}
 8015054:	bf00      	nop
 8015056:	370c      	adds	r7, #12
 8015058:	46bd      	mov	sp, r7
 801505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505e:	4770      	bx	lr

08015060 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8015060:	b580      	push	{r7, lr}
 8015062:	b082      	sub	sp, #8
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	330c      	adds	r3, #12
 801506c:	4618      	mov	r0, r3
 801506e:	f7f2 fbbc 	bl	80077ea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	3308      	adds	r3, #8
 8015076:	4618      	mov	r0, r3
 8015078:	f7fa f9ea 	bl	800f450 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 801507c:	6878      	ldr	r0, [r7, #4]
 801507e:	f000 f859 	bl	8015134 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	4618      	mov	r0, r3
 8015086:	3708      	adds	r7, #8
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}

0801508c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 801508c:	b580      	push	{r7, lr}
 801508e:	b082      	sub	sp, #8
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	4618      	mov	r0, r3
 8015098:	f7ff ffe2 	bl	8015060 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	4618      	mov	r0, r3
 80150a0:	3708      	adds	r7, #8
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}

080150a6 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80150a6:	b580      	push	{r7, lr}
 80150a8:	b090      	sub	sp, #64	; 0x40
 80150aa:	af02      	add	r7, sp, #8
 80150ac:	60f8      	str	r0, [r7, #12]
 80150ae:	60b9      	str	r1, [r7, #8]
 80150b0:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80150b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80150b6:	68b9      	ldr	r1, [r7, #8]
 80150b8:	4618      	mov	r0, r3
 80150ba:	f000 f82c 	bl	8015116 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 80150be:	687a      	ldr	r2, [r7, #4]
 80150c0:	68b9      	ldr	r1, [r7, #8]
 80150c2:	68f8      	ldr	r0, [r7, #12]
 80150c4:	f000 f85e 	bl	8015184 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80150c8:	f107 0320 	add.w	r3, r7, #32
 80150cc:	68f9      	ldr	r1, [r7, #12]
 80150ce:	4618      	mov	r0, r3
 80150d0:	f7fc fed2 	bl	8011e78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80150d4:	68f8      	ldr	r0, [r7, #12]
 80150d6:	f000 f89f 	bl	8015218 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>
 80150da:	4603      	mov	r3, r0
 80150dc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80150e0:	f107 0120 	add.w	r1, r7, #32
 80150e4:	f107 0010 	add.w	r0, r7, #16
 80150e8:	9300      	str	r3, [sp, #0]
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	f000 f89f 	bl	801522e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80150f0:	f107 0310 	add.w	r3, r7, #16
 80150f4:	4618      	mov	r0, r3
 80150f6:	f000 f8b4 	bl	8015262 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 80150fa:	f107 0320 	add.w	r3, r7, #32
 80150fe:	4618      	mov	r0, r3
 8015100:	f7fa f9a6 	bl	800f450 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8015104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015108:	4618      	mov	r0, r3
 801510a:	f7ff ffbf 	bl	801508c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
}
 801510e:	bf00      	nop
 8015110:	3738      	adds	r7, #56	; 0x38
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}

08015116 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8015116:	b580      	push	{r7, lr}
 8015118:	b082      	sub	sp, #8
 801511a:	af00      	add	r7, sp, #0
 801511c:	6078      	str	r0, [r7, #4]
 801511e:	6039      	str	r1, [r7, #0]
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	6839      	ldr	r1, [r7, #0]
 8015124:	4618      	mov	r0, r3
 8015126:	f000 f8a7 	bl	8015278 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	4618      	mov	r0, r3
 801512e:	3708      	adds	r7, #8
 8015130:	46bd      	mov	sp, r7
 8015132:	bd80      	pop	{r7, pc}

08015134 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8015134:	b480      	push	{r7}
 8015136:	b083      	sub	sp, #12
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	4618      	mov	r0, r3
 8015140:	370c      	adds	r7, #12
 8015142:	46bd      	mov	sp, r7
 8015144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015148:	4770      	bx	lr

0801514a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 801514a:	b580      	push	{r7, lr}
 801514c:	b082      	sub	sp, #8
 801514e:	af00      	add	r7, sp, #0
 8015150:	6078      	str	r0, [r7, #4]
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	4618      	mov	r0, r3
 8015158:	f7f0 fa81 	bl	800565e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 801515c:	4603      	mov	r3, r0
 801515e:	4618      	mov	r0, r3
 8015160:	3708      	adds	r7, #8
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}

08015166 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8015166:	b580      	push	{r7, lr}
 8015168:	b082      	sub	sp, #8
 801516a:	af00      	add	r7, sp, #0
 801516c:	6078      	str	r0, [r7, #4]
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	685b      	ldr	r3, [r3, #4]
 8015172:	4618      	mov	r0, r3
 8015174:	f7f0 f8a6 	bl	80052c4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8015178:	4603      	mov	r3, r0
 801517a:	4618      	mov	r0, r3
 801517c:	3708      	adds	r7, #8
 801517e:	46bd      	mov	sp, r7
 8015180:	bd80      	pop	{r7, pc}
	...

08015184 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8015184:	b580      	push	{r7, lr}
 8015186:	b086      	sub	sp, #24
 8015188:	af00      	add	r7, sp, #0
 801518a:	60f8      	str	r0, [r7, #12]
 801518c:	60b9      	str	r1, [r7, #8]
 801518e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8015190:	68b8      	ldr	r0, [r7, #8]
 8015192:	f7ff ffda 	bl	801514a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>
 8015196:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8015198:	68b8      	ldr	r0, [r7, #8]
 801519a:	f7ff ffe4 	bl	8015166 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>
 801519e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	4618      	mov	r0, r3
 80151a4:	f7f0 fa5b 	bl	800565e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80151a8:	4602      	mov	r2, r0
 80151aa:	697b      	ldr	r3, [r7, #20]
 80151ac:	4293      	cmp	r3, r2
 80151ae:	d107      	bne.n	80151c0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	4618      	mov	r0, r3
 80151b4:	f7f0 fa48 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80151b8:	4602      	mov	r2, r0
 80151ba:	693b      	ldr	r3, [r7, #16]
 80151bc:	4293      	cmp	r3, r2
 80151be:	d001      	beq.n	80151c4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80151c0:	2301      	movs	r3, #1
 80151c2:	e000      	b.n	80151c6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80151c4:	2300      	movs	r3, #0
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d005      	beq.n	80151d6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	693a      	ldr	r2, [r7, #16]
 80151ce:	6979      	ldr	r1, [r7, #20]
 80151d0:	4618      	mov	r0, r3
 80151d2:	f7ff fe8b 	bl	8014eec <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	4618      	mov	r0, r3
 80151da:	f7f0 fa40 	bl	800565e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80151de:	4602      	mov	r2, r0
 80151e0:	697b      	ldr	r3, [r7, #20]
 80151e2:	4293      	cmp	r3, r2
 80151e4:	d107      	bne.n	80151f6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	4618      	mov	r0, r3
 80151ea:	f7f0 fa2d 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80151ee:	4602      	mov	r2, r0
 80151f0:	693b      	ldr	r3, [r7, #16]
 80151f2:	4293      	cmp	r3, r2
 80151f4:	d006      	beq.n	8015204 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80151f6:	4b05      	ldr	r3, [pc, #20]	; (801520c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80151f8:	4a05      	ldr	r2, [pc, #20]	; (8015210 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80151fa:	f240 21fd 	movw	r1, #765	; 0x2fd
 80151fe:	4805      	ldr	r0, [pc, #20]	; (8015214 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8015200:	f008 ffc8 	bl	801e194 <__assert_func>
}
 8015204:	bf00      	nop
 8015206:	3718      	adds	r7, #24
 8015208:	46bd      	mov	sp, r7
 801520a:	bd80      	pop	{r7, pc}
 801520c:	08022674 	.word	0x08022674
 8015210:	08029aec 	.word	0x08029aec
 8015214:	08022788 	.word	0x08022788

08015218 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8015218:	b480      	push	{r7}
 801521a:	b083      	sub	sp, #12
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	4618      	mov	r0, r3
 8015224:	370c      	adds	r7, #12
 8015226:	46bd      	mov	sp, r7
 8015228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522c:	4770      	bx	lr

0801522e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 801522e:	b480      	push	{r7}
 8015230:	b085      	sub	sp, #20
 8015232:	af00      	add	r7, sp, #0
 8015234:	60f8      	str	r0, [r7, #12]
 8015236:	60b9      	str	r1, [r7, #8]
 8015238:	607a      	str	r2, [r7, #4]
 801523a:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	68ba      	ldr	r2, [r7, #8]
 8015240:	601a      	str	r2, [r3, #0]
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	687a      	ldr	r2, [r7, #4]
 8015246:	605a      	str	r2, [r3, #4]
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	683a      	ldr	r2, [r7, #0]
 801524c:	609a      	str	r2, [r3, #8]
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	69ba      	ldr	r2, [r7, #24]
 8015252:	60da      	str	r2, [r3, #12]
  }
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	4618      	mov	r0, r3
 8015258:	3714      	adds	r7, #20
 801525a:	46bd      	mov	sp, r7
 801525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015260:	4770      	bx	lr

08015262 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8015262:	b580      	push	{r7, lr}
 8015264:	b082      	sub	sp, #8
 8015266:	af00      	add	r7, sp, #0
 8015268:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 801526a:	6878      	ldr	r0, [r7, #4]
 801526c:	f000 f839 	bl	80152e2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 8015270:	bf00      	nop
 8015272:	3708      	adds	r7, #8
 8015274:	46bd      	mov	sp, r7
 8015276:	bd80      	pop	{r7, pc}

08015278 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8015278:	b580      	push	{r7, lr}
 801527a:	b082      	sub	sp, #8
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
 8015280:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8015282:	6878      	ldr	r0, [r7, #4]
 8015284:	f000 f854 	bl	8015330 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8015288:	6838      	ldr	r0, [r7, #0]
 801528a:	f000 f839 	bl	8015300 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 801528e:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8015294:	6838      	ldr	r0, [r7, #0]
 8015296:	f000 f83f 	bl	8015318 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>
 801529a:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	605a      	str	r2, [r3, #4]
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 80152aa:	4619      	mov	r1, r3
 80152ac:	4610      	mov	r0, r2
 80152ae:	f7fc fde3 	bl	8011e78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 80152bc:	4619      	mov	r1, r3
 80152be:	4610      	mov	r0, r2
 80152c0:	f7f2 fca2 	bl	8007c08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 80152c4:	6838      	ldr	r0, [r7, #0]
 80152c6:	f000 f81b 	bl	8015300 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 80152ca:	4603      	mov	r3, r0
 80152cc:	4618      	mov	r0, r3
 80152ce:	f7f0 f9bb 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80152d2:	4602      	mov	r2, r0
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	611a      	str	r2, [r3, #16]
  }
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	4618      	mov	r0, r3
 80152dc:	3708      	adds	r7, #8
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd80      	pop	{r7, pc}

080152e2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80152e2:	b580      	push	{r7, lr}
 80152e4:	b082      	sub	sp, #8
 80152e6:	af00      	add	r7, sp, #0
 80152e8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80152ea:	2100      	movs	r1, #0
 80152ec:	6878      	ldr	r0, [r7, #4]
 80152ee:	f000 f82a 	bl	8015346 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80152f2:	6878      	ldr	r0, [r7, #4]
 80152f4:	f000 f84a 	bl	801538c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 80152f8:	bf00      	nop
 80152fa:	3708      	adds	r7, #8
 80152fc:	46bd      	mov	sp, r7
 80152fe:	bd80      	pop	{r7, pc}

08015300 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8015300:	b480      	push	{r7}
 8015302:	b083      	sub	sp, #12
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	4618      	mov	r0, r3
 801530e:	370c      	adds	r7, #12
 8015310:	46bd      	mov	sp, r7
 8015312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015316:	4770      	bx	lr

08015318 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8015318:	b480      	push	{r7}
 801531a:	b083      	sub	sp, #12
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	685b      	ldr	r3, [r3, #4]
 8015324:	4618      	mov	r0, r3
 8015326:	370c      	adds	r7, #12
 8015328:	46bd      	mov	sp, r7
 801532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532e:	4770      	bx	lr

08015330 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015330:	b480      	push	{r7}
 8015332:	b083      	sub	sp, #12
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	4618      	mov	r0, r3
 801533c:	370c      	adds	r7, #12
 801533e:	46bd      	mov	sp, r7
 8015340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015344:	4770      	bx	lr

08015346 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8015346:	b5b0      	push	{r4, r5, r7, lr}
 8015348:	b084      	sub	sp, #16
 801534a:	af00      	add	r7, sp, #0
 801534c:	6078      	str	r0, [r7, #4]
 801534e:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	689c      	ldr	r4, [r3, #8]
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	6839      	ldr	r1, [r7, #0]
 801535a:	4618      	mov	r0, r3
 801535c:	f000 f825 	bl	80153aa <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>
 8015360:	4605      	mov	r5, r0
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	685b      	ldr	r3, [r3, #4]
 8015366:	6839      	ldr	r1, [r7, #0]
 8015368:	4618      	mov	r0, r3
 801536a:	f000 f82e 	bl	80153ca <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 801536e:	eef0 7a40 	vmov.f32	s15, s0
 8015372:	edc7 7a03 	vstr	s15, [r7, #12]
 8015376:	f107 030c 	add.w	r3, r7, #12
 801537a:	461a      	mov	r2, r3
 801537c:	4629      	mov	r1, r5
 801537e:	4620      	mov	r0, r4
 8015380:	f7f3 fb4a 	bl	8008a18 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8015384:	bf00      	nop
 8015386:	3710      	adds	r7, #16
 8015388:	46bd      	mov	sp, r7
 801538a:	bdb0      	pop	{r4, r5, r7, pc}

0801538c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8015394:	2101      	movs	r1, #1
 8015396:	6878      	ldr	r0, [r7, #4]
 8015398:	f7ff ffd5 	bl	8015346 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801539c:	6878      	ldr	r0, [r7, #4]
 801539e:	f000 f84d 	bl	801543c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 80153a2:	bf00      	nop
 80153a4:	3708      	adds	r7, #8
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bd80      	pop	{r7, pc}

080153aa <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 80153aa:	b480      	push	{r7}
 80153ac:	b083      	sub	sp, #12
 80153ae:	af00      	add	r7, sp, #0
 80153b0:	6078      	str	r0, [r7, #4]
 80153b2:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	681a      	ldr	r2, [r3, #0]
 80153b8:	683b      	ldr	r3, [r7, #0]
 80153ba:	009b      	lsls	r3, r3, #2
 80153bc:	4413      	add	r3, r2
  }
 80153be:	4618      	mov	r0, r3
 80153c0:	370c      	adds	r7, #12
 80153c2:	46bd      	mov	sp, r7
 80153c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c8:	4770      	bx	lr

080153ca <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 80153ca:	b580      	push	{r7, lr}
 80153cc:	b0a4      	sub	sp, #144	; 0x90
 80153ce:	af00      	add	r7, sp, #0
 80153d0:	6078      	str	r0, [r7, #4]
 80153d2:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 80153d4:	2300      	movs	r3, #0
 80153d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	6819      	ldr	r1, [r3, #0]
 80153e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80153e8:	2200      	movs	r2, #0
 80153ea:	4618      	mov	r0, r3
 80153ec:	f000 f835 	bl	801545a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>
 80153f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80153f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80153f8:	4611      	mov	r1, r2
 80153fa:	4618      	mov	r0, r3
 80153fc:	f000 f840 	bl	8015480 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	6859      	ldr	r1, [r3, #4]
 8015404:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015408:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801540c:	4618      	mov	r0, r3
 801540e:	f7f7 f94a 	bl	800c6a6 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 8015412:	f107 030c 	add.w	r3, r7, #12
 8015416:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801541a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801541e:	4618      	mov	r0, r3
 8015420:	f000 f83f 	bl	80154a2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 8015424:	f107 030c 	add.w	r3, r7, #12
 8015428:	4618      	mov	r0, r3
 801542a:	f000 f868 	bl	80154fe <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>
 801542e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015432:	eeb0 0a67 	vmov.f32	s0, s15
 8015436:	3790      	adds	r7, #144	; 0x90
 8015438:	46bd      	mov	sp, r7
 801543a:	bd80      	pop	{r7, pc}

0801543c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 801543c:	b580      	push	{r7, lr}
 801543e:	b082      	sub	sp, #8
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8015444:	2102      	movs	r1, #2
 8015446:	6878      	ldr	r0, [r7, #4]
 8015448:	f7ff ff7d 	bl	8015346 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801544c:	6878      	ldr	r0, [r7, #4]
 801544e:	f000 f871 	bl	8015534 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 8015452:	bf00      	nop
 8015454:	3708      	adds	r7, #8
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}

0801545a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>:
ConstRowXpr row(Index i) const
 801545a:	b580      	push	{r7, lr}
 801545c:	b084      	sub	sp, #16
 801545e:	af00      	add	r7, sp, #0
 8015460:	60f8      	str	r0, [r7, #12]
 8015462:	60b9      	str	r1, [r7, #8]
 8015464:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 8015466:	68b8      	ldr	r0, [r7, #8]
 8015468:	f7f0 fe12 	bl	8006090 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 801546c:	4603      	mov	r3, r0
 801546e:	687a      	ldr	r2, [r7, #4]
 8015470:	4619      	mov	r1, r3
 8015472:	68f8      	ldr	r0, [r7, #12]
 8015474:	f000 f868 	bl	8015548 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>
}
 8015478:	68f8      	ldr	r0, [r7, #12]
 801547a:	3710      	adds	r7, #16
 801547c:	46bd      	mov	sp, r7
 801547e:	bd80      	pop	{r7, pc}

08015480 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8015480:	b580      	push	{r7, lr}
 8015482:	b082      	sub	sp, #8
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
 8015488:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 801548a:	6838      	ldr	r0, [r7, #0]
 801548c:	f000 f886 	bl	801559c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>
 8015490:	4603      	mov	r3, r0
 8015492:	4619      	mov	r1, r3
 8015494:	6878      	ldr	r0, [r7, #4]
 8015496:	f000 f8a4 	bl	80155e2 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>
}
 801549a:	6878      	ldr	r0, [r7, #4]
 801549c:	3708      	adds	r7, #8
 801549e:	46bd      	mov	sp, r7
 80154a0:	bd80      	pop	{r7, pc}

080154a2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 80154a2:	b5b0      	push	{r4, r5, r7, lr}
 80154a4:	b086      	sub	sp, #24
 80154a6:	af00      	add	r7, sp, #0
 80154a8:	60f8      	str	r0, [r7, #12]
 80154aa:	60b9      	str	r1, [r7, #8]
 80154ac:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 80154ae:	68b8      	ldr	r0, [r7, #8]
 80154b0:	f000 f8ae 	bl	8015610 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>
 80154b4:	4604      	mov	r4, r0
 80154b6:	6878      	ldr	r0, [r7, #4]
 80154b8:	f7f7 fec4 	bl	800d244 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 80154bc:	4605      	mov	r5, r0
 80154be:	f107 0314 	add.w	r3, r7, #20
 80154c2:	4618      	mov	r0, r3
 80154c4:	f7f0 f9aa 	bl	800581c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 80154c8:	f107 0314 	add.w	r3, r7, #20
 80154cc:	462a      	mov	r2, r5
 80154ce:	4621      	mov	r1, r4
 80154d0:	68f8      	ldr	r0, [r7, #12]
 80154d2:	f000 f8db 	bl	801568c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 80154d6:	68f8      	ldr	r0, [r7, #12]
 80154d8:	3718      	adds	r7, #24
 80154da:	46bd      	mov	sp, r7
 80154dc:	bdb0      	pop	{r4, r5, r7, pc}

080154de <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80154de:	b580      	push	{r7, lr}
 80154e0:	b082      	sub	sp, #8
 80154e2:	af00      	add	r7, sp, #0
 80154e4:	6078      	str	r0, [r7, #4]
 80154e6:	6878      	ldr	r0, [r7, #4]
 80154e8:	f000 f92e 	bl	8015748 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 80154ec:	4603      	mov	r3, r0
 80154ee:	4618      	mov	r0, r3
 80154f0:	f000 f935 	bl	801575e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>
 80154f4:	4603      	mov	r3, r0
 80154f6:	4618      	mov	r0, r3
 80154f8:	3708      	adds	r7, #8
 80154fa:	46bd      	mov	sp, r7
 80154fc:	bd80      	pop	{r7, pc}

080154fe <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 80154fe:	b590      	push	{r4, r7, lr}
 8015500:	b085      	sub	sp, #20
 8015502:	af00      	add	r7, sp, #0
 8015504:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8015506:	6878      	ldr	r0, [r7, #4]
 8015508:	f000 f91e 	bl	8015748 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 801550c:	4604      	mov	r4, r0
 801550e:	f107 030c 	add.w	r3, r7, #12
 8015512:	4618      	mov	r0, r3
 8015514:	f7f0 fc79 	bl	8005e0a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8015518:	f107 030c 	add.w	r3, r7, #12
 801551c:	4619      	mov	r1, r3
 801551e:	4620      	mov	r0, r4
 8015520:	f000 f9c4 	bl	80158ac <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8015524:	eef0 7a40 	vmov.f32	s15, s0
 8015528:	bf00      	nop
}
 801552a:	eeb0 0a67 	vmov.f32	s0, s15
 801552e:	3714      	adds	r7, #20
 8015530:	46bd      	mov	sp, r7
 8015532:	bd90      	pop	{r4, r7, pc}

08015534 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8015534:	b480      	push	{r7}
 8015536:	b083      	sub	sp, #12
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
 801553c:	bf00      	nop
 801553e:	370c      	adds	r7, #12
 8015540:	46bd      	mov	sp, r7
 8015542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015546:	4770      	bx	lr

08015548 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8015548:	b580      	push	{r7, lr}
 801554a:	b084      	sub	sp, #16
 801554c:	af00      	add	r7, sp, #0
 801554e:	60f8      	str	r0, [r7, #12]
 8015550:	60b9      	str	r1, [r7, #8]
 8015552:	607a      	str	r2, [r7, #4]
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	687a      	ldr	r2, [r7, #4]
 8015558:	68b9      	ldr	r1, [r7, #8]
 801555a:	4618      	mov	r0, r3
 801555c:	f000 f9ec 	bl	8015938 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	2b00      	cmp	r3, #0
 8015564:	db07      	blt.n	8015576 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x2e>
 8015566:	68bb      	ldr	r3, [r7, #8]
 8015568:	4618      	mov	r0, r3
 801556a:	f7f0 f878 	bl	800565e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 801556e:	4602      	mov	r2, r0
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	4293      	cmp	r3, r2
 8015574:	db05      	blt.n	8015582 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x3a>
 8015576:	4b06      	ldr	r3, [pc, #24]	; (8015590 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x48>)
 8015578:	4a06      	ldr	r2, [pc, #24]	; (8015594 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x4c>)
 801557a:	2178      	movs	r1, #120	; 0x78
 801557c:	4806      	ldr	r0, [pc, #24]	; (8015598 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x50>)
 801557e:	f008 fe09 	bl	801e194 <__assert_func>
 8015582:	bf00      	nop
    }
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	4618      	mov	r0, r3
 8015588:	3710      	adds	r7, #16
 801558a:	46bd      	mov	sp, r7
 801558c:	bd80      	pop	{r7, pc}
 801558e:	bf00      	nop
 8015590:	08024b80 	.word	0x08024b80
 8015594:	08029c00 	.word	0x08029c00
 8015598:	08024d04 	.word	0x08024d04

0801559c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 801559c:	b480      	push	{r7}
 801559e:	b083      	sub	sp, #12
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	6078      	str	r0, [r7, #4]
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	4618      	mov	r0, r3
 80155a8:	370c      	adds	r7, #12
 80155aa:	46bd      	mov	sp, r7
 80155ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b0:	4770      	bx	lr

080155b2 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
 80155b2:	b580      	push	{r7, lr}
 80155b4:	b082      	sub	sp, #8
 80155b6:	af00      	add	r7, sp, #0
 80155b8:	6078      	str	r0, [r7, #4]
 80155ba:	6878      	ldr	r0, [r7, #4]
 80155bc:	f000 f9cd 	bl	801595a <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	4618      	mov	r0, r3
 80155c4:	3708      	adds	r7, #8
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}

080155ca <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 80155ca:	b580      	push	{r7, lr}
 80155cc:	b082      	sub	sp, #8
 80155ce:	af00      	add	r7, sp, #0
 80155d0:	6078      	str	r0, [r7, #4]
 80155d2:	6878      	ldr	r0, [r7, #4]
 80155d4:	f7ff ffed 	bl	80155b2 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	4618      	mov	r0, r3
 80155dc:	3708      	adds	r7, #8
 80155de:	46bd      	mov	sp, r7
 80155e0:	bd80      	pop	{r7, pc}

080155e2 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 80155e2:	b5b0      	push	{r4, r5, r7, lr}
 80155e4:	b082      	sub	sp, #8
 80155e6:	af00      	add	r7, sp, #0
 80155e8:	6078      	str	r0, [r7, #4]
 80155ea:	6039      	str	r1, [r7, #0]
 80155ec:	6878      	ldr	r0, [r7, #4]
 80155ee:	f7ff ffec 	bl	80155ca <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>
 80155f2:	687a      	ldr	r2, [r7, #4]
 80155f4:	683b      	ldr	r3, [r7, #0]
 80155f6:	4614      	mov	r4, r2
 80155f8:	461d      	mov	r5, r3
 80155fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80155fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80155fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015602:	e884 0003 	stmia.w	r4, {r0, r1}
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	4618      	mov	r0, r3
 801560a:	3708      	adds	r7, #8
 801560c:	46bd      	mov	sp, r7
 801560e:	bdb0      	pop	{r4, r5, r7, pc}

08015610 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>:
 8015610:	b480      	push	{r7}
 8015612:	b083      	sub	sp, #12
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	4618      	mov	r0, r3
 801561c:	370c      	adds	r7, #12
 801561e:	46bd      	mov	sp, r7
 8015620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015624:	4770      	bx	lr

08015626 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
 8015626:	b580      	push	{r7, lr}
 8015628:	b082      	sub	sp, #8
 801562a:	af00      	add	r7, sp, #0
 801562c:	6078      	str	r0, [r7, #4]
 801562e:	6878      	ldr	r0, [r7, #4]
 8015630:	f000 f99e 	bl	8015970 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	4618      	mov	r0, r3
 8015638:	3708      	adds	r7, #8
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}

0801563e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 801563e:	b580      	push	{r7, lr}
 8015640:	b082      	sub	sp, #8
 8015642:	af00      	add	r7, sp, #0
 8015644:	6078      	str	r0, [r7, #4]
 8015646:	6878      	ldr	r0, [r7, #4]
 8015648:	f7ff ffed 	bl	8015626 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	4618      	mov	r0, r3
 8015650:	3708      	adds	r7, #8
 8015652:	46bd      	mov	sp, r7
 8015654:	bd80      	pop	{r7, pc}

08015656 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8015656:	b580      	push	{r7, lr}
 8015658:	b082      	sub	sp, #8
 801565a:	af00      	add	r7, sp, #0
 801565c:	6078      	str	r0, [r7, #4]
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	4618      	mov	r0, r3
 8015662:	f000 f990 	bl	8015986 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>
 8015666:	4603      	mov	r3, r0
 8015668:	4618      	mov	r0, r3
 801566a:	3708      	adds	r7, #8
 801566c:	46bd      	mov	sp, r7
 801566e:	bd80      	pop	{r7, pc}

08015670 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8015670:	b580      	push	{r7, lr}
 8015672:	b082      	sub	sp, #8
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	4618      	mov	r0, r3
 801567c:	f000 f98e 	bl	801599c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>
 8015680:	4603      	mov	r3, r0
 8015682:	4618      	mov	r0, r3
 8015684:	3708      	adds	r7, #8
 8015686:	46bd      	mov	sp, r7
 8015688:	bd80      	pop	{r7, pc}
	...

0801568c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 801568c:	b5b0      	push	{r4, r5, r7, lr}
 801568e:	b084      	sub	sp, #16
 8015690:	af00      	add	r7, sp, #0
 8015692:	60f8      	str	r0, [r7, #12]
 8015694:	60b9      	str	r1, [r7, #8]
 8015696:	607a      	str	r2, [r7, #4]
 8015698:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 801569a:	68f8      	ldr	r0, [r7, #12]
 801569c:	f7ff ffcf 	bl	801563e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 80156a0:	68fa      	ldr	r2, [r7, #12]
 80156a2:	68bb      	ldr	r3, [r7, #8]
 80156a4:	4614      	mov	r4, r2
 80156a6:	461d      	mov	r5, r3
 80156a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80156aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80156ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80156b0:	e884 0003 	stmia.w	r4, {r0, r1}
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	f103 0218 	add.w	r2, r3, #24
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	4614      	mov	r4, r2
 80156be:	461d      	mov	r5, r3
 80156c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80156c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80156c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80156c8:	e884 0003 	stmia.w	r4, {r0, r1}
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	3330      	adds	r3, #48	; 0x30
 80156d0:	6839      	ldr	r1, [r7, #0]
 80156d2:	4618      	mov	r0, r3
 80156d4:	f7f0 f92c 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80156d8:	68b8      	ldr	r0, [r7, #8]
 80156da:	f7ff ffbc 	bl	8015656 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 80156de:	4604      	mov	r4, r0
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	4618      	mov	r0, r3
 80156e4:	f7f7 fdd1 	bl	800d28a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 80156e8:	4603      	mov	r3, r0
 80156ea:	429c      	cmp	r4, r3
 80156ec:	d10a      	bne.n	8015704 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 80156ee:	68b8      	ldr	r0, [r7, #8]
 80156f0:	f7ff ffbe 	bl	8015670 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 80156f4:	4604      	mov	r4, r0
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	4618      	mov	r0, r3
 80156fa:	f7f7 fdd1 	bl	800d2a0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 80156fe:	4603      	mov	r3, r0
 8015700:	429c      	cmp	r4, r3
 8015702:	d005      	beq.n	8015710 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 8015704:	4b05      	ldr	r3, [pc, #20]	; (801571c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 8015706:	4a06      	ldr	r2, [pc, #24]	; (8015720 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 8015708:	2174      	movs	r1, #116	; 0x74
 801570a:	4806      	ldr	r0, [pc, #24]	; (8015724 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 801570c:	f008 fd42 	bl	801e194 <__assert_func>
    }
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	4618      	mov	r0, r3
 8015714:	3710      	adds	r7, #16
 8015716:	46bd      	mov	sp, r7
 8015718:	bdb0      	pop	{r4, r5, r7, pc}
 801571a:	bf00      	nop
 801571c:	0801fffc 	.word	0x0801fffc
 8015720:	08029cdc 	.word	0x08029cdc
 8015724:	08020260 	.word	0x08020260

08015728 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8015728:	b580      	push	{r7, lr}
 801572a:	b082      	sub	sp, #8
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
 8015730:	6878      	ldr	r0, [r7, #4]
 8015732:	f000 f809 	bl	8015748 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8015736:	4603      	mov	r3, r0
 8015738:	4618      	mov	r0, r3
 801573a:	f000 f93a 	bl	80159b2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>
 801573e:	4603      	mov	r3, r0
 8015740:	4618      	mov	r0, r3
 8015742:	3708      	adds	r7, #8
 8015744:	46bd      	mov	sp, r7
 8015746:	bd80      	pop	{r7, pc}

08015748 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8015748:	b480      	push	{r7}
 801574a:	b083      	sub	sp, #12
 801574c:	af00      	add	r7, sp, #0
 801574e:	6078      	str	r0, [r7, #4]
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	4618      	mov	r0, r3
 8015754:	370c      	adds	r7, #12
 8015756:	46bd      	mov	sp, r7
 8015758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575c:	4770      	bx	lr

0801575e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 801575e:	b580      	push	{r7, lr}
 8015760:	b082      	sub	sp, #8
 8015762:	af00      	add	r7, sp, #0
 8015764:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	4618      	mov	r0, r3
 801576a:	f7ff ff74 	bl	8015656 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 801576e:	4603      	mov	r3, r0
    }
 8015770:	4618      	mov	r0, r3
 8015772:	3708      	adds	r7, #8
 8015774:	46bd      	mov	sp, r7
 8015776:	bd80      	pop	{r7, pc}

08015778 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
 8015780:	6878      	ldr	r0, [r7, #4]
 8015782:	f000 f948 	bl	8015a16 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	4618      	mov	r0, r3
 801578a:	3708      	adds	r7, #8
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}

08015790 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8015790:	b580      	push	{r7, lr}
 8015792:	b082      	sub	sp, #8
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	4618      	mov	r0, r3
 801579c:	f7ff ffec 	bl	8015778 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	4618      	mov	r0, r3
 80157a4:	3708      	adds	r7, #8
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}

080157aa <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 80157aa:	b580      	push	{r7, lr}
 80157ac:	b082      	sub	sp, #8
 80157ae:	af00      	add	r7, sp, #0
 80157b0:	6078      	str	r0, [r7, #4]
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	4618      	mov	r0, r3
 80157b6:	f7ff ffeb 	bl	8015790 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	4618      	mov	r0, r3
 80157be:	3708      	adds	r7, #8
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}

080157c4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<const T>
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b082      	sub	sp, #8
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	4618      	mov	r0, r3
 80157d0:	f7ff ffeb 	bl	80157aa <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	4618      	mov	r0, r3
 80157d8:	3708      	adds	r7, #8
 80157da:	46bd      	mov	sp, r7
 80157dc:	bd80      	pop	{r7, pc}

080157de <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 80157de:	b580      	push	{r7, lr}
 80157e0:	b082      	sub	sp, #8
 80157e2:	af00      	add	r7, sp, #0
 80157e4:	6078      	str	r0, [r7, #4]
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	4618      	mov	r0, r3
 80157ea:	f7ff ffeb 	bl	80157c4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 80157ee:	6878      	ldr	r0, [r7, #4]
 80157f0:	f000 f906 	bl	8015a00 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	4618      	mov	r0, r3
 80157f8:	3708      	adds	r7, #8
 80157fa:	46bd      	mov	sp, r7
 80157fc:	bd80      	pop	{r7, pc}

080157fe <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 80157fe:	b580      	push	{r7, lr}
 8015800:	b082      	sub	sp, #8
 8015802:	af00      	add	r7, sp, #0
 8015804:	6078      	str	r0, [r7, #4]
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	4618      	mov	r0, r3
 801580a:	f7ff ffe8 	bl	80157de <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	4618      	mov	r0, r3
 8015812:	3708      	adds	r7, #8
 8015814:	46bd      	mov	sp, r7
 8015816:	bd80      	pop	{r7, pc}

08015818 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator<const T>
 8015818:	b580      	push	{r7, lr}
 801581a:	b082      	sub	sp, #8
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	4618      	mov	r0, r3
 8015824:	f7ff ffeb 	bl	80157fe <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	4618      	mov	r0, r3
 801582c:	3708      	adds	r7, #8
 801582e:	46bd      	mov	sp, r7
 8015830:	bd80      	pop	{r7, pc}

08015832 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 8015832:	b580      	push	{r7, lr}
 8015834:	b082      	sub	sp, #8
 8015836:	af00      	add	r7, sp, #0
 8015838:	6078      	str	r0, [r7, #4]
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	330c      	adds	r3, #12
 801583e:	4618      	mov	r0, r3
 8015840:	f7f7 fdd6 	bl	800d3f0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	3304      	adds	r3, #4
 8015848:	4618      	mov	r0, r3
 801584a:	f7ff ffe5 	bl	8015818 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	4618      	mov	r0, r3
 8015852:	3708      	adds	r7, #8
 8015854:	46bd      	mov	sp, r7
 8015856:	bd80      	pop	{r7, pc}

08015858 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8015858:	b580      	push	{r7, lr}
 801585a:	b082      	sub	sp, #8
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	4618      	mov	r0, r3
 8015864:	f7ff ffe5 	bl	8015832 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 8015868:	6878      	ldr	r0, [r7, #4]
 801586a:	f000 f8be 	bl	80159ea <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	4618      	mov	r0, r3
 8015872:	3708      	adds	r7, #8
 8015874:	46bd      	mov	sp, r7
 8015876:	bd80      	pop	{r7, pc}

08015878 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8015878:	b580      	push	{r7, lr}
 801587a:	b082      	sub	sp, #8
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	4618      	mov	r0, r3
 8015884:	f7ff ffe8 	bl	8015858 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	4618      	mov	r0, r3
 801588c:	3708      	adds	r7, #8
 801588e:	46bd      	mov	sp, r7
 8015890:	bd80      	pop	{r7, pc}

08015892 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8015892:	b580      	push	{r7, lr}
 8015894:	b082      	sub	sp, #8
 8015896:	af00      	add	r7, sp, #0
 8015898:	6078      	str	r0, [r7, #4]
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	4618      	mov	r0, r3
 801589e:	f7ff ffeb 	bl	8015878 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	4618      	mov	r0, r3
 80158a6:	3708      	adds	r7, #8
 80158a8:	46bd      	mov	sp, r7
 80158aa:	bd80      	pop	{r7, pc}

080158ac <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 80158ac:	b580      	push	{r7, lr}
 80158ae:	ed2d 8b02 	vpush	{d8}
 80158b2:	b088      	sub	sp, #32
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
 80158b8:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 80158ba:	6878      	ldr	r0, [r7, #4]
 80158bc:	f7ff fe0f 	bl	80154de <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>
 80158c0:	4603      	mov	r3, r0
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	dd05      	ble.n	80158d2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 80158c6:	6878      	ldr	r0, [r7, #4]
 80158c8:	f7ff ff2e 	bl	8015728 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>
 80158cc:	4603      	mov	r3, r0
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	dc06      	bgt.n	80158e0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 80158d2:	4b16      	ldr	r3, [pc, #88]	; (801592c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 80158d4:	4a16      	ldr	r2, [pc, #88]	; (8015930 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 80158d6:	f240 119b 	movw	r1, #411	; 0x19b
 80158da:	4816      	ldr	r0, [pc, #88]	; (8015934 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 80158dc:	f008 fc5a 	bl	801e194 <__assert_func>
 80158e0:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80158e2:	6878      	ldr	r0, [r7, #4]
 80158e4:	f7ff ff30 	bl	8015748 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 80158e8:	4602      	mov	r2, r0
 80158ea:	f107 030c 	add.w	r3, r7, #12
 80158ee:	4611      	mov	r1, r2
 80158f0:	4618      	mov	r0, r3
 80158f2:	f000 f86b 	bl	80159cc <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80158f6:	6878      	ldr	r0, [r7, #4]
 80158f8:	f7ff ff26 	bl	8015748 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 80158fc:	4602      	mov	r2, r0
 80158fe:	f107 030c 	add.w	r3, r7, #12
 8015902:	6839      	ldr	r1, [r7, #0]
 8015904:	4618      	mov	r0, r3
 8015906:	f000 f891 	bl	8015a2c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 801590a:	eeb0 8a40 	vmov.f32	s16, s0
 801590e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8015910:	f107 030c 	add.w	r3, r7, #12
 8015914:	4618      	mov	r0, r3
 8015916:	f7ff ffbc 	bl	8015892 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801591a:	eef0 7a48 	vmov.f32	s15, s16
}
 801591e:	eeb0 0a67 	vmov.f32	s0, s15
 8015922:	3720      	adds	r7, #32
 8015924:	46bd      	mov	sp, r7
 8015926:	ecbd 8b02 	vpop	{d8}
 801592a:	bd80      	pop	{r7, pc}
 801592c:	0802507c 	.word	0x0802507c
 8015930:	08029f24 	.word	0x08029f24
 8015934:	08025288 	.word	0x08025288

08015938 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 8015938:	b580      	push	{r7, lr}
 801593a:	b084      	sub	sp, #16
 801593c:	af00      	add	r7, sp, #0
 801593e:	60f8      	str	r0, [r7, #12]
 8015940:	60b9      	str	r1, [r7, #8]
 8015942:	607a      	str	r2, [r7, #4]
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	687a      	ldr	r2, [r7, #4]
 8015948:	68b9      	ldr	r1, [r7, #8]
 801594a:	4618      	mov	r0, r3
 801594c:	f000 f87f 	bl	8015a4e <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	4618      	mov	r0, r3
 8015954:	3710      	adds	r7, #16
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}

0801595a <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801595a:	b480      	push	{r7}
 801595c:	b083      	sub	sp, #12
 801595e:	af00      	add	r7, sp, #0
 8015960:	6078      	str	r0, [r7, #4]
    }
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	4618      	mov	r0, r3
 8015966:	370c      	adds	r7, #12
 8015968:	46bd      	mov	sp, r7
 801596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596e:	4770      	bx	lr

08015970 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8015970:	b480      	push	{r7}
 8015972:	b083      	sub	sp, #12
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
    }
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	4618      	mov	r0, r3
 801597c:	370c      	adds	r7, #12
 801597e:	46bd      	mov	sp, r7
 8015980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015984:	4770      	bx	lr

08015986 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8015986:	b580      	push	{r7, lr}
 8015988:	b082      	sub	sp, #8
 801598a:	af00      	add	r7, sp, #0
 801598c:	6078      	str	r0, [r7, #4]
 801598e:	f7f1 fa6e 	bl	8006e6e <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8015992:	4603      	mov	r3, r0
 8015994:	4618      	mov	r0, r3
 8015996:	3708      	adds	r7, #8
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}

0801599c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 801599c:	b580      	push	{r7, lr}
 801599e:	b082      	sub	sp, #8
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
 80159a4:	f7f1 fa6b 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80159a8:	4603      	mov	r3, r0
 80159aa:	4618      	mov	r0, r3
 80159ac:	3708      	adds	r7, #8
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bd80      	pop	{r7, pc}

080159b2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80159b2:	b580      	push	{r7, lr}
 80159b4:	b082      	sub	sp, #8
 80159b6:	af00      	add	r7, sp, #0
 80159b8:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	4618      	mov	r0, r3
 80159be:	f7ff fe57 	bl	8015670 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 80159c2:	4603      	mov	r3, r0
    }
 80159c4:	4618      	mov	r0, r3
 80159c6:	3708      	adds	r7, #8
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bd80      	pop	{r7, pc}

080159cc <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b082      	sub	sp, #8
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
 80159d4:	6039      	str	r1, [r7, #0]
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	6839      	ldr	r1, [r7, #0]
 80159da:	4618      	mov	r0, r3
 80159dc:	f000 f86d 	bl	8015aba <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	4618      	mov	r0, r3
 80159e4:	3708      	adds	r7, #8
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}

080159ea <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80159ea:	b480      	push	{r7}
 80159ec:	b083      	sub	sp, #12
 80159ee:	af00      	add	r7, sp, #0
 80159f0:	6078      	str	r0, [r7, #4]
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	4618      	mov	r0, r3
 80159f6:	370c      	adds	r7, #12
 80159f8:	46bd      	mov	sp, r7
 80159fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fe:	4770      	bx	lr

08015a00 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
 8015a00:	b480      	push	{r7}
 8015a02:	b083      	sub	sp, #12
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	370c      	adds	r7, #12
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a14:	4770      	bx	lr

08015a16 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
 8015a16:	b480      	push	{r7}
 8015a18:	b083      	sub	sp, #12
 8015a1a:	af00      	add	r7, sp, #0
 8015a1c:	6078      	str	r0, [r7, #4]
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	4618      	mov	r0, r3
 8015a22:	370c      	adds	r7, #12
 8015a24:	46bd      	mov	sp, r7
 8015a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2a:	4770      	bx	lr

08015a2c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b084      	sub	sp, #16
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	60f8      	str	r0, [r7, #12]
 8015a34:	60b9      	str	r1, [r7, #8]
 8015a36:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8015a38:	68b9      	ldr	r1, [r7, #8]
 8015a3a:	68f8      	ldr	r0, [r7, #12]
 8015a3c:	f000 f84c 	bl	8015ad8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 8015a40:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015a44:	eeb0 0a67 	vmov.f32	s0, s15
 8015a48:	3710      	adds	r7, #16
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	bd80      	pop	{r7, pc}

08015a4e <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8015a4e:	b5b0      	push	{r4, r5, r7, lr}
 8015a50:	b084      	sub	sp, #16
 8015a52:	af00      	add	r7, sp, #0
 8015a54:	60f8      	str	r0, [r7, #12]
 8015a56:	60b9      	str	r1, [r7, #8]
 8015a58:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8015a5a:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8015a5c:	68bb      	ldr	r3, [r7, #8]
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f7fd f866 	bl	8012b30 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8015a64:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8015a66:	68b8      	ldr	r0, [r7, #8]
 8015a68:	f7fd fa90 	bl	8012f8c <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8015a6c:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	fb02 f303 	mul.w	r3, r2, r3
 8015a74:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8015a76:	441d      	add	r5, r3
 8015a78:	68bb      	ldr	r3, [r7, #8]
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f7ef fde4 	bl	8005648 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8015a80:	4603      	mov	r3, r0
 8015a82:	2201      	movs	r2, #1
 8015a84:	4629      	mov	r1, r5
 8015a86:	4620      	mov	r0, r4
 8015a88:	f000 f856 	bl	8015b38 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	68ba      	ldr	r2, [r7, #8]
 8015a90:	609a      	str	r2, [r3, #8]
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	330c      	adds	r3, #12
 8015a96:	6879      	ldr	r1, [r7, #4]
 8015a98:	4618      	mov	r0, r3
 8015a9a:	f7f8 faab 	bl	800dff4 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	3310      	adds	r3, #16
 8015aa2:	2100      	movs	r1, #0
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7f8 fa31 	bl	800df0c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8015aaa:	68f8      	ldr	r0, [r7, #12]
 8015aac:	f000 f882 	bl	8015bb4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>
    }
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	3710      	adds	r7, #16
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bdb0      	pop	{r4, r5, r7, pc}

08015aba <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8015aba:	b580      	push	{r7, lr}
 8015abc:	b082      	sub	sp, #8
 8015abe:	af00      	add	r7, sp, #0
 8015ac0:	6078      	str	r0, [r7, #4]
 8015ac2:	6039      	str	r1, [r7, #0]
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	6839      	ldr	r1, [r7, #0]
 8015ac8:	4618      	mov	r0, r3
 8015aca:	f000 f883 	bl	8015bd4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	3708      	adds	r7, #8
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bd80      	pop	{r7, pc}

08015ad8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b084      	sub	sp, #16
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
 8015ae0:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015ae2:	6839      	ldr	r1, [r7, #0]
 8015ae4:	6878      	ldr	r0, [r7, #4]
 8015ae6:	f000 f887 	bl	8015bf8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 8015aea:	eef0 7a40 	vmov.f32	s15, s0
 8015aee:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8015af2:	6839      	ldr	r1, [r7, #0]
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f000 f890 	bl	8015c1a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 8015afa:	eef0 7a40 	vmov.f32	s15, s0
 8015afe:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015b02:	f107 020c 	add.w	r2, r7, #12
 8015b06:	f107 0308 	add.w	r3, r7, #8
 8015b0a:	4619      	mov	r1, r3
 8015b0c:	6838      	ldr	r0, [r7, #0]
 8015b0e:	f7f3 fd74 	bl	80095fa <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8015b12:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015b16:	eeb0 0a67 	vmov.f32	s0, s15
 8015b1a:	3710      	adds	r7, #16
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bd80      	pop	{r7, pc}

08015b20 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b082      	sub	sp, #8
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
 8015b28:	6878      	ldr	r0, [r7, #4]
 8015b2a:	f000 f89a 	bl	8015c62 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	4618      	mov	r0, r3
 8015b32:	3708      	adds	r7, #8
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}

08015b38 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b084      	sub	sp, #16
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	60f8      	str	r0, [r7, #12]
 8015b40:	60b9      	str	r1, [r7, #8]
 8015b42:	607a      	str	r2, [r7, #4]
 8015b44:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8015b46:	68f8      	ldr	r0, [r7, #12]
 8015b48:	f7ff ffea 	bl	8015b20 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	68ba      	ldr	r2, [r7, #8]
 8015b50:	601a      	str	r2, [r3, #0]
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	3304      	adds	r3, #4
 8015b56:	6879      	ldr	r1, [r7, #4]
 8015b58:	4618      	mov	r0, r3
 8015b5a:	f7f1 f963 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	3305      	adds	r3, #5
 8015b62:	6839      	ldr	r1, [r7, #0]
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7f1 f943 	bl	8006df0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8015b6a:	68bb      	ldr	r3, [r7, #8]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d011      	beq.n	8015b94 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	db08      	blt.n	8015b88 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	2b01      	cmp	r3, #1
 8015b7a:	d105      	bne.n	8015b88 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8015b7c:	683b      	ldr	r3, [r7, #0]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	db02      	blt.n	8015b88 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8015b82:	683b      	ldr	r3, [r7, #0]
 8015b84:	2b03      	cmp	r3, #3
 8015b86:	d005      	beq.n	8015b94 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 8015b88:	4b07      	ldr	r3, [pc, #28]	; (8015ba8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x70>)
 8015b8a:	4a08      	ldr	r2, [pc, #32]	; (8015bac <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x74>)
 8015b8c:	21b0      	movs	r1, #176	; 0xb0
 8015b8e:	4808      	ldr	r0, [pc, #32]	; (8015bb0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x78>)
 8015b90:	f008 fb00 	bl	801e194 <__assert_func>
      checkSanity<Derived>();
 8015b94:	2100      	movs	r1, #0
 8015b96:	68f8      	ldr	r0, [r7, #12]
 8015b98:	f000 f86e 	bl	8015c78 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	3710      	adds	r7, #16
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	08026720 	.word	0x08026720
 8015bac:	0802a0e8 	.word	0x0802a0e8
 8015bb0:	080268d0 	.word	0x080268d0

08015bb4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>:
    void init()
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b082      	sub	sp, #8
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	689b      	ldr	r3, [r3, #8]
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	f7fd f9e3 	bl	8012f8c <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8015bc6:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	615a      	str	r2, [r3, #20]
    }
 8015bcc:	bf00      	nop
 8015bce:	3708      	adds	r7, #8
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}

08015bd4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b082      	sub	sp, #8
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
 8015bdc:	6039      	str	r1, [r7, #0]
 8015bde:	6878      	ldr	r0, [r7, #4]
 8015be0:	f000 f855 	bl	8015c8e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	6839      	ldr	r1, [r7, #0]
 8015be8:	4618      	mov	r0, r3
 8015bea:	f000 f85b 	bl	8015ca4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	3708      	adds	r7, #8
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	bd80      	pop	{r7, pc}

08015bf8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b082      	sub	sp, #8
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
 8015c00:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8015c02:	2200      	movs	r2, #0
 8015c04:	2100      	movs	r1, #0
 8015c06:	6878      	ldr	r0, [r7, #4]
 8015c08:	f000 f874 	bl	8015cf4 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8015c0c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015c10:	eeb0 0a67 	vmov.f32	s0, s15
 8015c14:	3708      	adds	r7, #8
 8015c16:	46bd      	mov	sp, r7
 8015c18:	bd80      	pop	{r7, pc}

08015c1a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8015c1a:	b580      	push	{r7, lr}
 8015c1c:	b084      	sub	sp, #16
 8015c1e:	af00      	add	r7, sp, #0
 8015c20:	6078      	str	r0, [r7, #4]
 8015c22:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015c24:	6839      	ldr	r1, [r7, #0]
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f000 f877 	bl	8015d1a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 8015c2c:	eef0 7a40 	vmov.f32	s15, s0
 8015c30:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8015c34:	6839      	ldr	r1, [r7, #0]
 8015c36:	6878      	ldr	r0, [r7, #4]
 8015c38:	f000 f880 	bl	8015d3c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 8015c3c:	eef0 7a40 	vmov.f32	s15, s0
 8015c40:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015c44:	f107 020c 	add.w	r2, r7, #12
 8015c48:	f107 0308 	add.w	r3, r7, #8
 8015c4c:	4619      	mov	r1, r3
 8015c4e:	6838      	ldr	r0, [r7, #0]
 8015c50:	f7f3 fcd3 	bl	80095fa <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8015c54:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015c58:	eeb0 0a67 	vmov.f32	s0, s15
 8015c5c:	3710      	adds	r7, #16
 8015c5e:	46bd      	mov	sp, r7
 8015c60:	bd80      	pop	{r7, pc}

08015c62 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8015c62:	b480      	push	{r7}
 8015c64:	b083      	sub	sp, #12
 8015c66:	af00      	add	r7, sp, #0
 8015c68:	6078      	str	r0, [r7, #4]
    }
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	370c      	adds	r7, #12
 8015c70:	46bd      	mov	sp, r7
 8015c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c76:	4770      	bx	lr

08015c78 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8015c78:	b480      	push	{r7}
 8015c7a:	b083      	sub	sp, #12
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	6078      	str	r0, [r7, #4]
 8015c80:	6039      	str	r1, [r7, #0]
    {}
 8015c82:	bf00      	nop
 8015c84:	370c      	adds	r7, #12
 8015c86:	46bd      	mov	sp, r7
 8015c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8c:	4770      	bx	lr

08015c8e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015c8e:	b480      	push	{r7}
 8015c90:	b083      	sub	sp, #12
 8015c92:	af00      	add	r7, sp, #0
 8015c94:	6078      	str	r0, [r7, #4]
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	4618      	mov	r0, r3
 8015c9a:	370c      	adds	r7, #12
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca2:	4770      	bx	lr

08015ca4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8015ca4:	b590      	push	{r4, r7, lr}
 8015ca6:	b083      	sub	sp, #12
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
 8015cac:	6039      	str	r1, [r7, #0]
 8015cae:	687c      	ldr	r4, [r7, #4]
 8015cb0:	6838      	ldr	r0, [r7, #0]
 8015cb2:	f000 f854 	bl	8015d5e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	4619      	mov	r1, r3
 8015cba:	4620      	mov	r0, r4
 8015cbc:	f7ef fe38 	bl	8005930 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	1d1c      	adds	r4, r3, #4
 8015cc4:	6838      	ldr	r0, [r7, #0]
 8015cc6:	f000 f856 	bl	8015d76 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	4619      	mov	r1, r3
 8015cce:	4620      	mov	r0, r4
 8015cd0:	f000 f868 	bl	8015da4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	f103 040c 	add.w	r4, r3, #12
 8015cda:	6838      	ldr	r0, [r7, #0]
 8015cdc:	f000 f856 	bl	8015d8c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	4619      	mov	r1, r3
 8015ce4:	4620      	mov	r0, r4
 8015ce6:	f7fa f995 	bl	8010014 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	4618      	mov	r0, r3
 8015cee:	370c      	adds	r7, #12
 8015cf0:	46bd      	mov	sp, r7
 8015cf2:	bd90      	pop	{r4, r7, pc}

08015cf4 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b084      	sub	sp, #16
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	60f8      	str	r0, [r7, #12]
 8015cfc:	60b9      	str	r1, [r7, #8]
 8015cfe:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	68ba      	ldr	r2, [r7, #8]
 8015d04:	6879      	ldr	r1, [r7, #4]
 8015d06:	4618      	mov	r0, r3
 8015d08:	f000 f85b 	bl	8015dc2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8015d0c:	eef0 7a40 	vmov.f32	s15, s0
 8015d10:	eeb0 0a67 	vmov.f32	s0, s15
 8015d14:	3710      	adds	r7, #16
 8015d16:	46bd      	mov	sp, r7
 8015d18:	bd80      	pop	{r7, pc}

08015d1a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015d1a:	b580      	push	{r7, lr}
 8015d1c:	b082      	sub	sp, #8
 8015d1e:	af00      	add	r7, sp, #0
 8015d20:	6078      	str	r0, [r7, #4]
 8015d22:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8015d24:	2201      	movs	r2, #1
 8015d26:	2100      	movs	r1, #0
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f7ff ffe3 	bl	8015cf4 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8015d2e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015d32:	eeb0 0a67 	vmov.f32	s0, s15
 8015d36:	3708      	adds	r7, #8
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}

08015d3c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b082      	sub	sp, #8
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
 8015d44:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8015d46:	2202      	movs	r2, #2
 8015d48:	2100      	movs	r1, #0
 8015d4a:	6878      	ldr	r0, [r7, #4]
 8015d4c:	f7ff ffd2 	bl	8015cf4 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8015d50:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015d54:	eeb0 0a67 	vmov.f32	s0, s15
 8015d58:	3708      	adds	r7, #8
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	bd80      	pop	{r7, pc}

08015d5e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8015d5e:	b480      	push	{r7}
 8015d60:	b083      	sub	sp, #12
 8015d62:	af00      	add	r7, sp, #0
 8015d64:	6078      	str	r0, [r7, #4]
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	3330      	adds	r3, #48	; 0x30
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	370c      	adds	r7, #12
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d74:	4770      	bx	lr

08015d76 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8015d76:	b480      	push	{r7}
 8015d78:	b083      	sub	sp, #12
 8015d7a:	af00      	add	r7, sp, #0
 8015d7c:	6078      	str	r0, [r7, #4]
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	4618      	mov	r0, r3
 8015d82:	370c      	adds	r7, #12
 8015d84:	46bd      	mov	sp, r7
 8015d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8a:	4770      	bx	lr

08015d8c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8015d8c:	b480      	push	{r7}
 8015d8e:	b083      	sub	sp, #12
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	3318      	adds	r3, #24
 8015d98:	4618      	mov	r0, r3
 8015d9a:	370c      	adds	r7, #12
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015da2:	4770      	bx	lr

08015da4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b082      	sub	sp, #8
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	6078      	str	r0, [r7, #4]
 8015dac:	6039      	str	r1, [r7, #0]
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	6839      	ldr	r1, [r7, #0]
 8015db2:	4618      	mov	r0, r3
 8015db4:	f000 f835 	bl	8015e22 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	4618      	mov	r0, r3
 8015dbc:	3708      	adds	r7, #8
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	bd80      	pop	{r7, pc}

08015dc2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015dc2:	b590      	push	{r4, r7, lr}
 8015dc4:	b087      	sub	sp, #28
 8015dc6:	af00      	add	r7, sp, #0
 8015dc8:	60f8      	str	r0, [r7, #12]
 8015dca:	60b9      	str	r1, [r7, #8]
 8015dcc:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f000 f835 	bl	8015e40 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8015dd6:	4604      	mov	r4, r0
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	3304      	adds	r3, #4
 8015ddc:	687a      	ldr	r2, [r7, #4]
 8015dde:	68b9      	ldr	r1, [r7, #8]
 8015de0:	4618      	mov	r0, r3
 8015de2:	f000 f838 	bl	8015e56 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>
 8015de6:	eef0 7a40 	vmov.f32	s15, s0
 8015dea:	edc7 7a04 	vstr	s15, [r7, #16]
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	330c      	adds	r3, #12
 8015df2:	687a      	ldr	r2, [r7, #4]
 8015df4:	68b9      	ldr	r1, [r7, #8]
 8015df6:	4618      	mov	r0, r3
 8015df8:	f7fa fd4e 	bl	8010898 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8015dfc:	eef0 7a40 	vmov.f32	s15, s0
 8015e00:	edc7 7a05 	vstr	s15, [r7, #20]
 8015e04:	f107 0214 	add.w	r2, r7, #20
 8015e08:	f107 0310 	add.w	r3, r7, #16
 8015e0c:	4619      	mov	r1, r3
 8015e0e:	4620      	mov	r0, r4
 8015e10:	f7f9 fc34 	bl	800f67c <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8015e14:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015e18:	eeb0 0a67 	vmov.f32	s0, s15
 8015e1c:	371c      	adds	r7, #28
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bd90      	pop	{r4, r7, pc}

08015e22 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8015e22:	b580      	push	{r7, lr}
 8015e24:	b082      	sub	sp, #8
 8015e26:	af00      	add	r7, sp, #0
 8015e28:	6078      	str	r0, [r7, #4]
 8015e2a:	6039      	str	r1, [r7, #0]
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	6839      	ldr	r1, [r7, #0]
 8015e30:	4618      	mov	r0, r3
 8015e32:	f000 f823 	bl	8015e7c <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	4618      	mov	r0, r3
 8015e3a:	3708      	adds	r7, #8
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	bd80      	pop	{r7, pc}

08015e40 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8015e40:	b480      	push	{r7}
 8015e42:	b083      	sub	sp, #12
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	370c      	adds	r7, #12
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e54:	4770      	bx	lr

08015e56 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015e56:	b580      	push	{r7, lr}
 8015e58:	b084      	sub	sp, #16
 8015e5a:	af00      	add	r7, sp, #0
 8015e5c:	60f8      	str	r0, [r7, #12]
 8015e5e:	60b9      	str	r1, [r7, #8]
 8015e60:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	68ba      	ldr	r2, [r7, #8]
 8015e66:	6879      	ldr	r1, [r7, #4]
 8015e68:	4618      	mov	r0, r3
 8015e6a:	f000 f81d 	bl	8015ea8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>
 8015e6e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015e72:	eeb0 0a67 	vmov.f32	s0, s15
 8015e76:	3710      	adds	r7, #16
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	bd80      	pop	{r7, pc}

08015e7c <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8015e7c:	b590      	push	{r4, r7, lr}
 8015e7e:	b083      	sub	sp, #12
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
 8015e84:	6039      	str	r1, [r7, #0]
 8015e86:	6878      	ldr	r0, [r7, #4]
 8015e88:	f000 f83a 	bl	8015f00 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8015e8c:	687c      	ldr	r4, [r7, #4]
 8015e8e:	6838      	ldr	r0, [r7, #0]
 8015e90:	f000 f82b 	bl	8015eea <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>
 8015e94:	4603      	mov	r3, r0
 8015e96:	4619      	mov	r1, r3
 8015e98:	4620      	mov	r0, r4
 8015e9a:	f000 f83c 	bl	8015f16 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	370c      	adds	r7, #12
 8015ea4:	46bd      	mov	sp, r7
 8015ea6:	bd90      	pop	{r4, r7, pc}

08015ea8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015ea8:	b5b0      	push	{r4, r5, r7, lr}
 8015eaa:	b084      	sub	sp, #16
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	60f8      	str	r0, [r7, #12]
 8015eb0:	60b9      	str	r1, [r7, #8]
 8015eb2:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	681c      	ldr	r4, [r3, #0]
 8015eb8:	68f8      	ldr	r0, [r7, #12]
 8015eba:	f000 f83b 	bl	8015f34 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>
 8015ebe:	4602      	mov	r2, r0
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	fb03 f502 	mul.w	r5, r3, r2
 8015ec6:	68f8      	ldr	r0, [r7, #12]
 8015ec8:	f000 f83f 	bl	8015f4a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>
 8015ecc:	4602      	mov	r2, r0
 8015ece:	68bb      	ldr	r3, [r7, #8]
 8015ed0:	fb02 f303 	mul.w	r3, r2, r3
 8015ed4:	442b      	add	r3, r5
 8015ed6:	009b      	lsls	r3, r3, #2
 8015ed8:	4423      	add	r3, r4
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	ee07 3a90 	vmov	s15, r3
  }
 8015ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8015ee4:	3710      	adds	r7, #16
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bdb0      	pop	{r4, r5, r7, pc}

08015eea <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8015eea:	b480      	push	{r7}
 8015eec:	b083      	sub	sp, #12
 8015eee:	af00      	add	r7, sp, #0
 8015ef0:	6078      	str	r0, [r7, #4]
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	370c      	adds	r7, #12
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efe:	4770      	bx	lr

08015f00 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015f00:	b480      	push	{r7}
 8015f02:	b083      	sub	sp, #12
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	6078      	str	r0, [r7, #4]
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	370c      	adds	r7, #12
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f14:	4770      	bx	lr

08015f16 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8015f16:	b580      	push	{r7, lr}
 8015f18:	b082      	sub	sp, #8
 8015f1a:	af00      	add	r7, sp, #0
 8015f1c:	6078      	str	r0, [r7, #4]
 8015f1e:	6039      	str	r1, [r7, #0]
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	6839      	ldr	r1, [r7, #0]
 8015f24:	4618      	mov	r0, r3
 8015f26:	f000 f81b 	bl	8015f60 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	3708      	adds	r7, #8
 8015f30:	46bd      	mov	sp, r7
 8015f32:	bd80      	pop	{r7, pc}

08015f34 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b082      	sub	sp, #8
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8015f3c:	f7f0 ff9f 	bl	8006e7e <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8015f40:	4603      	mov	r3, r0
  }
 8015f42:	4618      	mov	r0, r3
 8015f44:	3708      	adds	r7, #8
 8015f46:	46bd      	mov	sp, r7
 8015f48:	bd80      	pop	{r7, pc}

08015f4a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8015f4a:	b580      	push	{r7, lr}
 8015f4c:	b082      	sub	sp, #8
 8015f4e:	af00      	add	r7, sp, #0
 8015f50:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8015f52:	f7f0 ff8c 	bl	8006e6e <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8015f56:	4603      	mov	r3, r0
  }
 8015f58:	4618      	mov	r0, r3
 8015f5a:	3708      	adds	r7, #8
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd80      	pop	{r7, pc}

08015f60 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b082      	sub	sp, #8
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	6078      	str	r0, [r7, #4]
 8015f68:	6039      	str	r1, [r7, #0]
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	6839      	ldr	r1, [r7, #0]
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f000 f805 	bl	8015f7e <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>
  }
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	4618      	mov	r0, r3
 8015f78:	3708      	adds	r7, #8
 8015f7a:	46bd      	mov	sp, r7
 8015f7c:	bd80      	pop	{r7, pc}

08015f7e <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8015f7e:	b580      	push	{r7, lr}
 8015f80:	b082      	sub	sp, #8
 8015f82:	af00      	add	r7, sp, #0
 8015f84:	6078      	str	r0, [r7, #4]
 8015f86:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	6839      	ldr	r1, [r7, #0]
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	f000 f80a 	bl	8015fa6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8015f92:	683b      	ldr	r3, [r7, #0]
 8015f94:	4618      	mov	r0, r3
 8015f96:	f000 f830 	bl	8015ffa <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 8015f9a:	bf00      	nop
  }
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	3708      	adds	r7, #8
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	bd80      	pop	{r7, pc}

08015fa6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8015fa6:	b590      	push	{r4, r7, lr}
 8015fa8:	b083      	sub	sp, #12
 8015faa:	af00      	add	r7, sp, #0
 8015fac:	6078      	str	r0, [r7, #4]
 8015fae:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f000 f84a 	bl	801604a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f000 f81e 	bl	8015ffa <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 8015fbe:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	601a      	str	r2, [r3, #0]
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	1d1c      	adds	r4, r3, #4
 8015fc8:	683b      	ldr	r3, [r7, #0]
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f000 f821 	bl	8016012 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	4619      	mov	r1, r3
 8015fd4:	4620      	mov	r0, r4
 8015fd6:	f7f0 ff25 	bl	8006e24 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	1d5c      	adds	r4, r3, #5
 8015fde:	683b      	ldr	r3, [r7, #0]
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	f000 f824 	bl	801602e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	4619      	mov	r1, r3
 8015fea:	4620      	mov	r0, r4
 8015fec:	f7f0 ff00 	bl	8006df0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	370c      	adds	r7, #12
 8015ff6:	46bd      	mov	sp, r7
 8015ff8:	bd90      	pop	{r4, r7, pc}

08015ffa <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8015ffa:	b480      	push	{r7}
 8015ffc:	b083      	sub	sp, #12
 8015ffe:	af00      	add	r7, sp, #0
 8016000:	6078      	str	r0, [r7, #4]
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	4618      	mov	r0, r3
 8016008:	370c      	adds	r7, #12
 801600a:	46bd      	mov	sp, r7
 801600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016010:	4770      	bx	lr

08016012 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8016012:	b580      	push	{r7, lr}
 8016014:	b082      	sub	sp, #8
 8016016:	af00      	add	r7, sp, #0
 8016018:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	689b      	ldr	r3, [r3, #8]
 801601e:	4618      	mov	r0, r3
 8016020:	f7fd fcf8 	bl	8013a14 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8016024:	4603      	mov	r3, r0
    }
 8016026:	4618      	mov	r0, r3
 8016028:	3708      	adds	r7, #8
 801602a:	46bd      	mov	sp, r7
 801602c:	bd80      	pop	{r7, pc}

0801602e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801602e:	b580      	push	{r7, lr}
 8016030:	b082      	sub	sp, #8
 8016032:	af00      	add	r7, sp, #0
 8016034:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	689b      	ldr	r3, [r3, #8]
 801603a:	4618      	mov	r0, r3
 801603c:	f7fc ffa6 	bl	8012f8c <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8016040:	4603      	mov	r3, r0
    }
 8016042:	4618      	mov	r0, r3
 8016044:	3708      	adds	r7, #8
 8016046:	46bd      	mov	sp, r7
 8016048:	bd80      	pop	{r7, pc}

0801604a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801604a:	b480      	push	{r7}
 801604c:	b083      	sub	sp, #12
 801604e:	af00      	add	r7, sp, #0
 8016050:	6078      	str	r0, [r7, #4]
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	4618      	mov	r0, r3
 8016056:	370c      	adds	r7, #12
 8016058:	46bd      	mov	sp, r7
 801605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605e:	4770      	bx	lr

08016060 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8016060:	b590      	push	{r4, r7, lr}
 8016062:	b083      	sub	sp, #12
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
 8016068:	6039      	str	r1, [r7, #0]
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	2b01      	cmp	r3, #1
 801606e:	d141      	bne.n	80160f4 <_Z41__static_initialization_and_destruction_0ii+0x94>
 8016070:	683b      	ldr	r3, [r7, #0]
 8016072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016076:	4293      	cmp	r3, r2
 8016078:	d13c      	bne.n	80160f4 <_Z41__static_initialization_and_destruction_0ii+0x94>
static const symbolic::SymbolExpr<internal::symbolic_last_tag> last; // PLEASE use Eigen::last   instead of Eigen::placeholders::last
 801607a:	4820      	ldr	r0, [pc, #128]	; (80160fc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 801607c:	f7ee fa1b 	bl	80044b6 <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>

#ifndef EIGEN_PARSED_BY_DOXYGEN

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
template<int N>
static const internal::FixedInt<N> fix{};
 8016080:	481f      	ldr	r0, [pc, #124]	; (8016100 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8016082:	f7ee fa23 	bl	80044cc <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>
static const symbolic::AddExpr<symbolic::SymbolExpr<internal::symbolic_last_tag>,symbolic::ValueExpr<Eigen::internal::FixedInt<1> > > lastp1(last+fix<1>());
 8016086:	481e      	ldr	r0, [pc, #120]	; (8016100 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8016088:	f7ee fa2b 	bl	80044e2 <_ZNK5Eigen8internal8FixedIntILi1EEclEv>
 801608c:	4621      	mov	r1, r4
 801608e:	481b      	ldr	r0, [pc, #108]	; (80160fc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8016090:	f7ee fa32 	bl	80044f8 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>

/** \var all
  * \ingroup Core_Module
  * Can be used as a parameter to DenseBase::operator()(const RowIndices&, const ColIndices&) to index all rows or columns
  */
static const Eigen::internal::all_t all; // PLEASE use Eigen::all instead of Eigen::placeholders::all
 8016094:	481b      	ldr	r0, [pc, #108]	; (8016104 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8016096:	f7ea ffa5 	bl	8000fe4 <_ZN5Eigen8internal5all_tC1Ev>
Matrix <float,3,3> A ;
 801609a:	481b      	ldr	r0, [pc, #108]	; (8016108 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 801609c:	f7ee fa51 	bl	8004542 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> P ;
 80160a0:	481a      	ldr	r0, [pc, #104]	; (801610c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80160a2:	f7ee fa4e 	bl	8004542 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> O ;
 80160a6:	481a      	ldr	r0, [pc, #104]	; (8016110 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80160a8:	f7ee fa4b 	bl	8004542 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> I ;
 80160ac:	4819      	ldr	r0, [pc, #100]	; (8016114 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80160ae:	f7ee fa48 	bl	8004542 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,1,1> S ;
 80160b2:	4819      	ldr	r0, [pc, #100]	; (8016118 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80160b4:	f7ee fa54 	bl	8004560 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> R ;
 80160b8:	4818      	ldr	r0, [pc, #96]	; (801611c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80160ba:	f7ee fa51 	bl	8004560 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> D ;
 80160be:	4818      	ldr	r0, [pc, #96]	; (8016120 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80160c0:	f7ee fa4e 	bl	8004560 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> Z ;
 80160c4:	4817      	ldr	r0, [pc, #92]	; (8016124 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80160c6:	f7ee fa4b 	bl	8004560 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,3,1> K ;
 80160ca:	4817      	ldr	r0, [pc, #92]	; (8016128 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80160cc:	f7ee fa57 	bl	800457e <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,1,3> C ;
 80160d0:	4816      	ldr	r0, [pc, #88]	; (801612c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80160d2:	f7ee fa63 	bl	800459c <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>
Matrix <float,3,1> G ;
 80160d6:	4816      	ldr	r0, [pc, #88]	; (8016130 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80160d8:	f7ee fa51 	bl	800457e <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,3,3> Q ;
 80160dc:	4815      	ldr	r0, [pc, #84]	; (8016134 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80160de:	f7ee fa30 	bl	8004542 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Vector3f X;
 80160e2:	4815      	ldr	r0, [pc, #84]	; (8016138 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80160e4:	f7ee fa4b 	bl	800457e <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f X1;
 80160e8:	4814      	ldr	r0, [pc, #80]	; (801613c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80160ea:	f7ee fa48 	bl	800457e <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f B;
 80160ee:	4814      	ldr	r0, [pc, #80]	; (8016140 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80160f0:	f7ee fa45 	bl	800457e <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
}
 80160f4:	bf00      	nop
 80160f6:	370c      	adds	r7, #12
 80160f8:	46bd      	mov	sp, r7
 80160fa:	bd90      	pop	{r4, r7, pc}
 80160fc:	200002bc 	.word	0x200002bc
 8016100:	2000083c 	.word	0x2000083c
 8016104:	200002c0 	.word	0x200002c0
 8016108:	20000608 	.word	0x20000608
 801610c:	2000062c 	.word	0x2000062c
 8016110:	20000650 	.word	0x20000650
 8016114:	20000674 	.word	0x20000674
 8016118:	20000698 	.word	0x20000698
 801611c:	2000069c 	.word	0x2000069c
 8016120:	200006a0 	.word	0x200006a0
 8016124:	200006a4 	.word	0x200006a4
 8016128:	200006a8 	.word	0x200006a8
 801612c:	200006b4 	.word	0x200006b4
 8016130:	200006c0 	.word	0x200006c0
 8016134:	200006cc 	.word	0x200006cc
 8016138:	200006f0 	.word	0x200006f0
 801613c:	200006fc 	.word	0x200006fc
 8016140:	20000708 	.word	0x20000708

08016144 <_GLOBAL__sub_I_hi2c1>:
 8016144:	b580      	push	{r7, lr}
 8016146:	af00      	add	r7, sp, #0
 8016148:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801614c:	2001      	movs	r0, #1
 801614e:	f7ff ff87 	bl	8016060 <_Z41__static_initialization_and_destruction_0ii>
 8016152:	bd80      	pop	{r7, pc}

08016154 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b082      	sub	sp, #8
 8016158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801615a:	2300      	movs	r3, #0
 801615c:	607b      	str	r3, [r7, #4]
 801615e:	4b10      	ldr	r3, [pc, #64]	; (80161a0 <HAL_MspInit+0x4c>)
 8016160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016162:	4a0f      	ldr	r2, [pc, #60]	; (80161a0 <HAL_MspInit+0x4c>)
 8016164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016168:	6453      	str	r3, [r2, #68]	; 0x44
 801616a:	4b0d      	ldr	r3, [pc, #52]	; (80161a0 <HAL_MspInit+0x4c>)
 801616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801616e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016172:	607b      	str	r3, [r7, #4]
 8016174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8016176:	2300      	movs	r3, #0
 8016178:	603b      	str	r3, [r7, #0]
 801617a:	4b09      	ldr	r3, [pc, #36]	; (80161a0 <HAL_MspInit+0x4c>)
 801617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801617e:	4a08      	ldr	r2, [pc, #32]	; (80161a0 <HAL_MspInit+0x4c>)
 8016180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016184:	6413      	str	r3, [r2, #64]	; 0x40
 8016186:	4b06      	ldr	r3, [pc, #24]	; (80161a0 <HAL_MspInit+0x4c>)
 8016188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801618a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801618e:	603b      	str	r3, [r7, #0]
 8016190:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8016192:	2007      	movs	r0, #7
 8016194:	f000 fd14 	bl	8016bc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8016198:	bf00      	nop
 801619a:	3708      	adds	r7, #8
 801619c:	46bd      	mov	sp, r7
 801619e:	bd80      	pop	{r7, pc}
 80161a0:	40023800 	.word	0x40023800

080161a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b08c      	sub	sp, #48	; 0x30
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80161ac:	f107 031c 	add.w	r3, r7, #28
 80161b0:	2200      	movs	r2, #0
 80161b2:	601a      	str	r2, [r3, #0]
 80161b4:	605a      	str	r2, [r3, #4]
 80161b6:	609a      	str	r2, [r3, #8]
 80161b8:	60da      	str	r2, [r3, #12]
 80161ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	4a52      	ldr	r2, [pc, #328]	; (801630c <HAL_I2C_MspInit+0x168>)
 80161c2:	4293      	cmp	r3, r2
 80161c4:	d13d      	bne.n	8016242 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80161c6:	2300      	movs	r3, #0
 80161c8:	61bb      	str	r3, [r7, #24]
 80161ca:	4b51      	ldr	r3, [pc, #324]	; (8016310 <HAL_I2C_MspInit+0x16c>)
 80161cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161ce:	4a50      	ldr	r2, [pc, #320]	; (8016310 <HAL_I2C_MspInit+0x16c>)
 80161d0:	f043 0302 	orr.w	r3, r3, #2
 80161d4:	6313      	str	r3, [r2, #48]	; 0x30
 80161d6:	4b4e      	ldr	r3, [pc, #312]	; (8016310 <HAL_I2C_MspInit+0x16c>)
 80161d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161da:	f003 0302 	and.w	r3, r3, #2
 80161de:	61bb      	str	r3, [r7, #24]
 80161e0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80161e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80161e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80161e8:	2312      	movs	r3, #18
 80161ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80161ec:	2300      	movs	r3, #0
 80161ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80161f0:	2303      	movs	r3, #3
 80161f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80161f4:	2304      	movs	r3, #4
 80161f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80161f8:	f107 031c 	add.w	r3, r7, #28
 80161fc:	4619      	mov	r1, r3
 80161fe:	4845      	ldr	r0, [pc, #276]	; (8016314 <HAL_I2C_MspInit+0x170>)
 8016200:	f001 f930 	bl	8017464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8016204:	2300      	movs	r3, #0
 8016206:	617b      	str	r3, [r7, #20]
 8016208:	4b41      	ldr	r3, [pc, #260]	; (8016310 <HAL_I2C_MspInit+0x16c>)
 801620a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801620c:	4a40      	ldr	r2, [pc, #256]	; (8016310 <HAL_I2C_MspInit+0x16c>)
 801620e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016212:	6413      	str	r3, [r2, #64]	; 0x40
 8016214:	4b3e      	ldr	r3, [pc, #248]	; (8016310 <HAL_I2C_MspInit+0x16c>)
 8016216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801621c:	617b      	str	r3, [r7, #20]
 801621e:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8016220:	2200      	movs	r2, #0
 8016222:	2100      	movs	r1, #0
 8016224:	201f      	movs	r0, #31
 8016226:	f000 fcd6 	bl	8016bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 801622a:	201f      	movs	r0, #31
 801622c:	f000 fcef 	bl	8016c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8016230:	2200      	movs	r2, #0
 8016232:	2100      	movs	r1, #0
 8016234:	2020      	movs	r0, #32
 8016236:	f000 fcce 	bl	8016bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 801623a:	2020      	movs	r0, #32
 801623c:	f000 fce7 	bl	8016c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8016240:	e060      	b.n	8016304 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	4a34      	ldr	r2, [pc, #208]	; (8016318 <HAL_I2C_MspInit+0x174>)
 8016248:	4293      	cmp	r3, r2
 801624a:	d15b      	bne.n	8016304 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801624c:	2300      	movs	r3, #0
 801624e:	613b      	str	r3, [r7, #16]
 8016250:	4b2f      	ldr	r3, [pc, #188]	; (8016310 <HAL_I2C_MspInit+0x16c>)
 8016252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016254:	4a2e      	ldr	r2, [pc, #184]	; (8016310 <HAL_I2C_MspInit+0x16c>)
 8016256:	f043 0304 	orr.w	r3, r3, #4
 801625a:	6313      	str	r3, [r2, #48]	; 0x30
 801625c:	4b2c      	ldr	r3, [pc, #176]	; (8016310 <HAL_I2C_MspInit+0x16c>)
 801625e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016260:	f003 0304 	and.w	r3, r3, #4
 8016264:	613b      	str	r3, [r7, #16]
 8016266:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016268:	2300      	movs	r3, #0
 801626a:	60fb      	str	r3, [r7, #12]
 801626c:	4b28      	ldr	r3, [pc, #160]	; (8016310 <HAL_I2C_MspInit+0x16c>)
 801626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016270:	4a27      	ldr	r2, [pc, #156]	; (8016310 <HAL_I2C_MspInit+0x16c>)
 8016272:	f043 0301 	orr.w	r3, r3, #1
 8016276:	6313      	str	r3, [r2, #48]	; 0x30
 8016278:	4b25      	ldr	r3, [pc, #148]	; (8016310 <HAL_I2C_MspInit+0x16c>)
 801627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801627c:	f003 0301 	and.w	r3, r3, #1
 8016280:	60fb      	str	r3, [r7, #12]
 8016282:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8016284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801628a:	2312      	movs	r3, #18
 801628c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801628e:	2300      	movs	r3, #0
 8016290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016292:	2303      	movs	r3, #3
 8016294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8016296:	2304      	movs	r3, #4
 8016298:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801629a:	f107 031c 	add.w	r3, r7, #28
 801629e:	4619      	mov	r1, r3
 80162a0:	481e      	ldr	r0, [pc, #120]	; (801631c <HAL_I2C_MspInit+0x178>)
 80162a2:	f001 f8df 	bl	8017464 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80162a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80162aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80162ac:	2312      	movs	r3, #18
 80162ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80162b0:	2300      	movs	r3, #0
 80162b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80162b4:	2303      	movs	r3, #3
 80162b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80162b8:	2304      	movs	r3, #4
 80162ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80162bc:	f107 031c 	add.w	r3, r7, #28
 80162c0:	4619      	mov	r1, r3
 80162c2:	4817      	ldr	r0, [pc, #92]	; (8016320 <HAL_I2C_MspInit+0x17c>)
 80162c4:	f001 f8ce 	bl	8017464 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80162c8:	2300      	movs	r3, #0
 80162ca:	60bb      	str	r3, [r7, #8]
 80162cc:	4b10      	ldr	r3, [pc, #64]	; (8016310 <HAL_I2C_MspInit+0x16c>)
 80162ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162d0:	4a0f      	ldr	r2, [pc, #60]	; (8016310 <HAL_I2C_MspInit+0x16c>)
 80162d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80162d6:	6413      	str	r3, [r2, #64]	; 0x40
 80162d8:	4b0d      	ldr	r3, [pc, #52]	; (8016310 <HAL_I2C_MspInit+0x16c>)
 80162da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80162e0:	60bb      	str	r3, [r7, #8]
 80162e2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80162e4:	2200      	movs	r2, #0
 80162e6:	2100      	movs	r1, #0
 80162e8:	2048      	movs	r0, #72	; 0x48
 80162ea:	f000 fc74 	bl	8016bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80162ee:	2048      	movs	r0, #72	; 0x48
 80162f0:	f000 fc8d 	bl	8016c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80162f4:	2200      	movs	r2, #0
 80162f6:	2100      	movs	r1, #0
 80162f8:	2049      	movs	r0, #73	; 0x49
 80162fa:	f000 fc6c 	bl	8016bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80162fe:	2049      	movs	r0, #73	; 0x49
 8016300:	f000 fc85 	bl	8016c0e <HAL_NVIC_EnableIRQ>
}
 8016304:	bf00      	nop
 8016306:	3730      	adds	r7, #48	; 0x30
 8016308:	46bd      	mov	sp, r7
 801630a:	bd80      	pop	{r7, pc}
 801630c:	40005400 	.word	0x40005400
 8016310:	40023800 	.word	0x40023800
 8016314:	40020400 	.word	0x40020400
 8016318:	40005c00 	.word	0x40005c00
 801631c:	40020800 	.word	0x40020800
 8016320:	40020000 	.word	0x40020000

08016324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8016324:	b580      	push	{r7, lr}
 8016326:	b086      	sub	sp, #24
 8016328:	af00      	add	r7, sp, #0
 801632a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	4a26      	ldr	r2, [pc, #152]	; (80163cc <HAL_TIM_Base_MspInit+0xa8>)
 8016332:	4293      	cmp	r3, r2
 8016334:	d10e      	bne.n	8016354 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8016336:	2300      	movs	r3, #0
 8016338:	617b      	str	r3, [r7, #20]
 801633a:	4b25      	ldr	r3, [pc, #148]	; (80163d0 <HAL_TIM_Base_MspInit+0xac>)
 801633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801633e:	4a24      	ldr	r2, [pc, #144]	; (80163d0 <HAL_TIM_Base_MspInit+0xac>)
 8016340:	f043 0304 	orr.w	r3, r3, #4
 8016344:	6413      	str	r3, [r2, #64]	; 0x40
 8016346:	4b22      	ldr	r3, [pc, #136]	; (80163d0 <HAL_TIM_Base_MspInit+0xac>)
 8016348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801634a:	f003 0304 	and.w	r3, r3, #4
 801634e:	617b      	str	r3, [r7, #20]
 8016350:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8016352:	e036      	b.n	80163c2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM10)
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	4a1e      	ldr	r2, [pc, #120]	; (80163d4 <HAL_TIM_Base_MspInit+0xb0>)
 801635a:	4293      	cmp	r3, r2
 801635c:	d116      	bne.n	801638c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 801635e:	2300      	movs	r3, #0
 8016360:	613b      	str	r3, [r7, #16]
 8016362:	4b1b      	ldr	r3, [pc, #108]	; (80163d0 <HAL_TIM_Base_MspInit+0xac>)
 8016364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016366:	4a1a      	ldr	r2, [pc, #104]	; (80163d0 <HAL_TIM_Base_MspInit+0xac>)
 8016368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801636c:	6453      	str	r3, [r2, #68]	; 0x44
 801636e:	4b18      	ldr	r3, [pc, #96]	; (80163d0 <HAL_TIM_Base_MspInit+0xac>)
 8016370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016376:	613b      	str	r3, [r7, #16]
 8016378:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 801637a:	2200      	movs	r2, #0
 801637c:	2100      	movs	r1, #0
 801637e:	2019      	movs	r0, #25
 8016380:	f000 fc29 	bl	8016bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8016384:	2019      	movs	r0, #25
 8016386:	f000 fc42 	bl	8016c0e <HAL_NVIC_EnableIRQ>
}
 801638a:	e01a      	b.n	80163c2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	4a11      	ldr	r2, [pc, #68]	; (80163d8 <HAL_TIM_Base_MspInit+0xb4>)
 8016392:	4293      	cmp	r3, r2
 8016394:	d115      	bne.n	80163c2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8016396:	2300      	movs	r3, #0
 8016398:	60fb      	str	r3, [r7, #12]
 801639a:	4b0d      	ldr	r3, [pc, #52]	; (80163d0 <HAL_TIM_Base_MspInit+0xac>)
 801639c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801639e:	4a0c      	ldr	r2, [pc, #48]	; (80163d0 <HAL_TIM_Base_MspInit+0xac>)
 80163a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80163a4:	6453      	str	r3, [r2, #68]	; 0x44
 80163a6:	4b0a      	ldr	r3, [pc, #40]	; (80163d0 <HAL_TIM_Base_MspInit+0xac>)
 80163a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80163aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80163ae:	60fb      	str	r3, [r7, #12]
 80163b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80163b2:	2200      	movs	r2, #0
 80163b4:	2100      	movs	r1, #0
 80163b6:	201a      	movs	r0, #26
 80163b8:	f000 fc0d 	bl	8016bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80163bc:	201a      	movs	r0, #26
 80163be:	f000 fc26 	bl	8016c0e <HAL_NVIC_EnableIRQ>
}
 80163c2:	bf00      	nop
 80163c4:	3718      	adds	r7, #24
 80163c6:	46bd      	mov	sp, r7
 80163c8:	bd80      	pop	{r7, pc}
 80163ca:	bf00      	nop
 80163cc:	40000800 	.word	0x40000800
 80163d0:	40023800 	.word	0x40023800
 80163d4:	40014400 	.word	0x40014400
 80163d8:	40014800 	.word	0x40014800

080163dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b088      	sub	sp, #32
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80163e4:	f107 030c 	add.w	r3, r7, #12
 80163e8:	2200      	movs	r2, #0
 80163ea:	601a      	str	r2, [r3, #0]
 80163ec:	605a      	str	r2, [r3, #4]
 80163ee:	609a      	str	r2, [r3, #8]
 80163f0:	60da      	str	r2, [r3, #12]
 80163f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	4a12      	ldr	r2, [pc, #72]	; (8016444 <HAL_TIM_MspPostInit+0x68>)
 80163fa:	4293      	cmp	r3, r2
 80163fc:	d11d      	bne.n	801643a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80163fe:	2300      	movs	r3, #0
 8016400:	60bb      	str	r3, [r7, #8]
 8016402:	4b11      	ldr	r3, [pc, #68]	; (8016448 <HAL_TIM_MspPostInit+0x6c>)
 8016404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016406:	4a10      	ldr	r2, [pc, #64]	; (8016448 <HAL_TIM_MspPostInit+0x6c>)
 8016408:	f043 0302 	orr.w	r3, r3, #2
 801640c:	6313      	str	r3, [r2, #48]	; 0x30
 801640e:	4b0e      	ldr	r3, [pc, #56]	; (8016448 <HAL_TIM_MspPostInit+0x6c>)
 8016410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016412:	f003 0302 	and.w	r3, r3, #2
 8016416:	60bb      	str	r3, [r7, #8]
 8016418:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 801641a:	2340      	movs	r3, #64	; 0x40
 801641c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801641e:	2302      	movs	r3, #2
 8016420:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016422:	2300      	movs	r3, #0
 8016424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016426:	2300      	movs	r3, #0
 8016428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 801642a:	2302      	movs	r3, #2
 801642c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 801642e:	f107 030c 	add.w	r3, r7, #12
 8016432:	4619      	mov	r1, r3
 8016434:	4805      	ldr	r0, [pc, #20]	; (801644c <HAL_TIM_MspPostInit+0x70>)
 8016436:	f001 f815 	bl	8017464 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 801643a:	bf00      	nop
 801643c:	3720      	adds	r7, #32
 801643e:	46bd      	mov	sp, r7
 8016440:	bd80      	pop	{r7, pc}
 8016442:	bf00      	nop
 8016444:	40000800 	.word	0x40000800
 8016448:	40023800 	.word	0x40023800
 801644c:	40020400 	.word	0x40020400

08016450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b08a      	sub	sp, #40	; 0x28
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016458:	f107 0314 	add.w	r3, r7, #20
 801645c:	2200      	movs	r2, #0
 801645e:	601a      	str	r2, [r3, #0]
 8016460:	605a      	str	r2, [r3, #4]
 8016462:	609a      	str	r2, [r3, #8]
 8016464:	60da      	str	r2, [r3, #12]
 8016466:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	4a4b      	ldr	r2, [pc, #300]	; (801659c <HAL_UART_MspInit+0x14c>)
 801646e:	4293      	cmp	r3, r2
 8016470:	f040 8090 	bne.w	8016594 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8016474:	2300      	movs	r3, #0
 8016476:	613b      	str	r3, [r7, #16]
 8016478:	4b49      	ldr	r3, [pc, #292]	; (80165a0 <HAL_UART_MspInit+0x150>)
 801647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801647c:	4a48      	ldr	r2, [pc, #288]	; (80165a0 <HAL_UART_MspInit+0x150>)
 801647e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016482:	6413      	str	r3, [r2, #64]	; 0x40
 8016484:	4b46      	ldr	r3, [pc, #280]	; (80165a0 <HAL_UART_MspInit+0x150>)
 8016486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801648c:	613b      	str	r3, [r7, #16]
 801648e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016490:	2300      	movs	r3, #0
 8016492:	60fb      	str	r3, [r7, #12]
 8016494:	4b42      	ldr	r3, [pc, #264]	; (80165a0 <HAL_UART_MspInit+0x150>)
 8016496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016498:	4a41      	ldr	r2, [pc, #260]	; (80165a0 <HAL_UART_MspInit+0x150>)
 801649a:	f043 0301 	orr.w	r3, r3, #1
 801649e:	6313      	str	r3, [r2, #48]	; 0x30
 80164a0:	4b3f      	ldr	r3, [pc, #252]	; (80165a0 <HAL_UART_MspInit+0x150>)
 80164a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164a4:	f003 0301 	and.w	r3, r3, #1
 80164a8:	60fb      	str	r3, [r7, #12]
 80164aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80164ac:	230c      	movs	r3, #12
 80164ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80164b0:	2302      	movs	r3, #2
 80164b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80164b4:	2300      	movs	r3, #0
 80164b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80164b8:	2303      	movs	r3, #3
 80164ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80164bc:	2307      	movs	r3, #7
 80164be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80164c0:	f107 0314 	add.w	r3, r7, #20
 80164c4:	4619      	mov	r1, r3
 80164c6:	4837      	ldr	r0, [pc, #220]	; (80165a4 <HAL_UART_MspInit+0x154>)
 80164c8:	f000 ffcc 	bl	8017464 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream7;
 80164cc:	4b36      	ldr	r3, [pc, #216]	; (80165a8 <HAL_UART_MspInit+0x158>)
 80164ce:	4a37      	ldr	r2, [pc, #220]	; (80165ac <HAL_UART_MspInit+0x15c>)
 80164d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 80164d2:	4b35      	ldr	r3, [pc, #212]	; (80165a8 <HAL_UART_MspInit+0x158>)
 80164d4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80164d8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80164da:	4b33      	ldr	r3, [pc, #204]	; (80165a8 <HAL_UART_MspInit+0x158>)
 80164dc:	2200      	movs	r2, #0
 80164de:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80164e0:	4b31      	ldr	r3, [pc, #196]	; (80165a8 <HAL_UART_MspInit+0x158>)
 80164e2:	2200      	movs	r2, #0
 80164e4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80164e6:	4b30      	ldr	r3, [pc, #192]	; (80165a8 <HAL_UART_MspInit+0x158>)
 80164e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80164ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80164ee:	4b2e      	ldr	r3, [pc, #184]	; (80165a8 <HAL_UART_MspInit+0x158>)
 80164f0:	2200      	movs	r2, #0
 80164f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80164f4:	4b2c      	ldr	r3, [pc, #176]	; (80165a8 <HAL_UART_MspInit+0x158>)
 80164f6:	2200      	movs	r2, #0
 80164f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80164fa:	4b2b      	ldr	r3, [pc, #172]	; (80165a8 <HAL_UART_MspInit+0x158>)
 80164fc:	2200      	movs	r2, #0
 80164fe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8016500:	4b29      	ldr	r3, [pc, #164]	; (80165a8 <HAL_UART_MspInit+0x158>)
 8016502:	2200      	movs	r2, #0
 8016504:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8016506:	4b28      	ldr	r3, [pc, #160]	; (80165a8 <HAL_UART_MspInit+0x158>)
 8016508:	2200      	movs	r2, #0
 801650a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 801650c:	4826      	ldr	r0, [pc, #152]	; (80165a8 <HAL_UART_MspInit+0x158>)
 801650e:	f000 fb99 	bl	8016c44 <HAL_DMA_Init>
 8016512:	4603      	mov	r3, r0
 8016514:	2b00      	cmp	r3, #0
 8016516:	d001      	beq.n	801651c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8016518:	f7ed ffc8 	bl	80044ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	4a22      	ldr	r2, [pc, #136]	; (80165a8 <HAL_UART_MspInit+0x158>)
 8016520:	639a      	str	r2, [r3, #56]	; 0x38
 8016522:	4a21      	ldr	r2, [pc, #132]	; (80165a8 <HAL_UART_MspInit+0x158>)
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8016528:	4b21      	ldr	r3, [pc, #132]	; (80165b0 <HAL_UART_MspInit+0x160>)
 801652a:	4a22      	ldr	r2, [pc, #136]	; (80165b4 <HAL_UART_MspInit+0x164>)
 801652c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 801652e:	4b20      	ldr	r3, [pc, #128]	; (80165b0 <HAL_UART_MspInit+0x160>)
 8016530:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8016534:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8016536:	4b1e      	ldr	r3, [pc, #120]	; (80165b0 <HAL_UART_MspInit+0x160>)
 8016538:	2240      	movs	r2, #64	; 0x40
 801653a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801653c:	4b1c      	ldr	r3, [pc, #112]	; (80165b0 <HAL_UART_MspInit+0x160>)
 801653e:	2200      	movs	r2, #0
 8016540:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8016542:	4b1b      	ldr	r3, [pc, #108]	; (80165b0 <HAL_UART_MspInit+0x160>)
 8016544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016548:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801654a:	4b19      	ldr	r3, [pc, #100]	; (80165b0 <HAL_UART_MspInit+0x160>)
 801654c:	2200      	movs	r2, #0
 801654e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8016550:	4b17      	ldr	r3, [pc, #92]	; (80165b0 <HAL_UART_MspInit+0x160>)
 8016552:	2200      	movs	r2, #0
 8016554:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8016556:	4b16      	ldr	r3, [pc, #88]	; (80165b0 <HAL_UART_MspInit+0x160>)
 8016558:	2200      	movs	r2, #0
 801655a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 801655c:	4b14      	ldr	r3, [pc, #80]	; (80165b0 <HAL_UART_MspInit+0x160>)
 801655e:	2200      	movs	r2, #0
 8016560:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8016562:	4b13      	ldr	r3, [pc, #76]	; (80165b0 <HAL_UART_MspInit+0x160>)
 8016564:	2200      	movs	r2, #0
 8016566:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8016568:	4811      	ldr	r0, [pc, #68]	; (80165b0 <HAL_UART_MspInit+0x160>)
 801656a:	f000 fb6b 	bl	8016c44 <HAL_DMA_Init>
 801656e:	4603      	mov	r3, r0
 8016570:	2b00      	cmp	r3, #0
 8016572:	d001      	beq.n	8016578 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8016574:	f7ed ff9a 	bl	80044ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	4a0d      	ldr	r2, [pc, #52]	; (80165b0 <HAL_UART_MspInit+0x160>)
 801657c:	635a      	str	r2, [r3, #52]	; 0x34
 801657e:	4a0c      	ldr	r2, [pc, #48]	; (80165b0 <HAL_UART_MspInit+0x160>)
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8016584:	2200      	movs	r2, #0
 8016586:	2100      	movs	r1, #0
 8016588:	2026      	movs	r0, #38	; 0x26
 801658a:	f000 fb24 	bl	8016bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 801658e:	2026      	movs	r0, #38	; 0x26
 8016590:	f000 fb3d 	bl	8016c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8016594:	bf00      	nop
 8016596:	3728      	adds	r7, #40	; 0x28
 8016598:	46bd      	mov	sp, r7
 801659a:	bd80      	pop	{r7, pc}
 801659c:	40004400 	.word	0x40004400
 80165a0:	40023800 	.word	0x40023800
 80165a4:	40020000 	.word	0x40020000
 80165a8:	20000488 	.word	0x20000488
 80165ac:	400260b8 	.word	0x400260b8
 80165b0:	200004e8 	.word	0x200004e8
 80165b4:	400260a0 	.word	0x400260a0

080165b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80165b8:	b480      	push	{r7}
 80165ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80165bc:	e7fe      	b.n	80165bc <NMI_Handler+0x4>

080165be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80165be:	b480      	push	{r7}
 80165c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80165c2:	e7fe      	b.n	80165c2 <HardFault_Handler+0x4>

080165c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80165c4:	b480      	push	{r7}
 80165c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80165c8:	e7fe      	b.n	80165c8 <MemManage_Handler+0x4>

080165ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80165ca:	b480      	push	{r7}
 80165cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80165ce:	e7fe      	b.n	80165ce <BusFault_Handler+0x4>

080165d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80165d0:	b480      	push	{r7}
 80165d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80165d4:	e7fe      	b.n	80165d4 <UsageFault_Handler+0x4>

080165d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80165d6:	b480      	push	{r7}
 80165d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80165da:	bf00      	nop
 80165dc:	46bd      	mov	sp, r7
 80165de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e2:	4770      	bx	lr

080165e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80165e4:	b480      	push	{r7}
 80165e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80165e8:	bf00      	nop
 80165ea:	46bd      	mov	sp, r7
 80165ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f0:	4770      	bx	lr

080165f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80165f2:	b480      	push	{r7}
 80165f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80165f6:	bf00      	nop
 80165f8:	46bd      	mov	sp, r7
 80165fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165fe:	4770      	bx	lr

08016600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8016600:	b580      	push	{r7, lr}
 8016602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8016604:	f000 f9c8 	bl	8016998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8016608:	bf00      	nop
 801660a:	bd80      	pop	{r7, pc}

0801660c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 801660c:	b580      	push	{r7, lr}
 801660e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 8016610:	2004      	movs	r0, #4
 8016612:	f001 f8dd 	bl	80177d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8016616:	bf00      	nop
 8016618:	bd80      	pop	{r7, pc}
	...

0801661c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 801661c:	b580      	push	{r7, lr}
 801661e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8016620:	4802      	ldr	r0, [pc, #8]	; (801662c <DMA1_Stream6_IRQHandler+0x10>)
 8016622:	f000 fca7 	bl	8016f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8016626:	bf00      	nop
 8016628:	bd80      	pop	{r7, pc}
 801662a:	bf00      	nop
 801662c:	200004e8 	.word	0x200004e8

08016630 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8016630:	b580      	push	{r7, lr}
 8016632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8016634:	4802      	ldr	r0, [pc, #8]	; (8016640 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8016636:	f004 fdef 	bl	801b218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 801663a:	bf00      	nop
 801663c:	bd80      	pop	{r7, pc}
 801663e:	bf00      	nop
 8016640:	200003b4 	.word	0x200003b4

08016644 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8016648:	4802      	ldr	r0, [pc, #8]	; (8016654 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 801664a:	f004 fde5 	bl	801b218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 801664e:	bf00      	nop
 8016650:	bd80      	pop	{r7, pc}
 8016652:	bf00      	nop
 8016654:	200003fc 	.word	0x200003fc

08016658 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8016658:	b580      	push	{r7, lr}
 801665a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 801665c:	4802      	ldr	r0, [pc, #8]	; (8016668 <I2C1_EV_IRQHandler+0x10>)
 801665e:	f001 fef7 	bl	8018450 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8016662:	bf00      	nop
 8016664:	bd80      	pop	{r7, pc}
 8016666:	bf00      	nop
 8016668:	200002c4 	.word	0x200002c4

0801666c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 801666c:	b580      	push	{r7, lr}
 801666e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8016670:	4802      	ldr	r0, [pc, #8]	; (801667c <I2C1_ER_IRQHandler+0x10>)
 8016672:	f002 f85e 	bl	8018732 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8016676:	bf00      	nop
 8016678:	bd80      	pop	{r7, pc}
 801667a:	bf00      	nop
 801667c:	200002c4 	.word	0x200002c4

08016680 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8016684:	4802      	ldr	r0, [pc, #8]	; (8016690 <USART2_IRQHandler+0x10>)
 8016686:	f005 fd13 	bl	801c0b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 801668a:	bf00      	nop
 801668c:	bd80      	pop	{r7, pc}
 801668e:	bf00      	nop
 8016690:	20000444 	.word	0x20000444

08016694 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8016694:	b580      	push	{r7, lr}
 8016696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Stop_Pin);
 8016698:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801669c:	f001 f898 	bl	80177d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_EMER_Pin);
 80166a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80166a4:	f001 f894 	bl	80177d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80166a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80166ac:	f001 f890 	bl	80177d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80166b0:	bf00      	nop
 80166b2:	bd80      	pop	{r7, pc}

080166b4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80166b8:	4802      	ldr	r0, [pc, #8]	; (80166c4 <DMA1_Stream7_IRQHandler+0x10>)
 80166ba:	f000 fc5b 	bl	8016f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80166be:	bf00      	nop
 80166c0:	bd80      	pop	{r7, pc}
 80166c2:	bf00      	nop
 80166c4:	20000488 	.word	0x20000488

080166c8 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80166cc:	4802      	ldr	r0, [pc, #8]	; (80166d8 <I2C3_EV_IRQHandler+0x10>)
 80166ce:	f001 febf 	bl	8018450 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80166d2:	bf00      	nop
 80166d4:	bd80      	pop	{r7, pc}
 80166d6:	bf00      	nop
 80166d8:	20000318 	.word	0x20000318

080166dc <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80166e0:	4802      	ldr	r0, [pc, #8]	; (80166ec <I2C3_ER_IRQHandler+0x10>)
 80166e2:	f002 f826 	bl	8018732 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80166e6:	bf00      	nop
 80166e8:	bd80      	pop	{r7, pc}
 80166ea:	bf00      	nop
 80166ec:	20000318 	.word	0x20000318

080166f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80166f0:	b480      	push	{r7}
 80166f2:	af00      	add	r7, sp, #0
	return 1;
 80166f4:	2301      	movs	r3, #1
}
 80166f6:	4618      	mov	r0, r3
 80166f8:	46bd      	mov	sp, r7
 80166fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fe:	4770      	bx	lr

08016700 <_kill>:

int _kill(int pid, int sig)
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b082      	sub	sp, #8
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
 8016708:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801670a:	f007 fd61 	bl	801e1d0 <__errno>
 801670e:	4603      	mov	r3, r0
 8016710:	2216      	movs	r2, #22
 8016712:	601a      	str	r2, [r3, #0]
	return -1;
 8016714:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016718:	4618      	mov	r0, r3
 801671a:	3708      	adds	r7, #8
 801671c:	46bd      	mov	sp, r7
 801671e:	bd80      	pop	{r7, pc}

08016720 <_exit>:

void _exit (int status)
{
 8016720:	b580      	push	{r7, lr}
 8016722:	b082      	sub	sp, #8
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8016728:	f04f 31ff 	mov.w	r1, #4294967295
 801672c:	6878      	ldr	r0, [r7, #4]
 801672e:	f7ff ffe7 	bl	8016700 <_kill>
	while (1) {}		/* Make sure we hang here */
 8016732:	e7fe      	b.n	8016732 <_exit+0x12>

08016734 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8016734:	b580      	push	{r7, lr}
 8016736:	b086      	sub	sp, #24
 8016738:	af00      	add	r7, sp, #0
 801673a:	60f8      	str	r0, [r7, #12]
 801673c:	60b9      	str	r1, [r7, #8]
 801673e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016740:	2300      	movs	r3, #0
 8016742:	617b      	str	r3, [r7, #20]
 8016744:	e00a      	b.n	801675c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8016746:	f3af 8000 	nop.w
 801674a:	4601      	mov	r1, r0
 801674c:	68bb      	ldr	r3, [r7, #8]
 801674e:	1c5a      	adds	r2, r3, #1
 8016750:	60ba      	str	r2, [r7, #8]
 8016752:	b2ca      	uxtb	r2, r1
 8016754:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016756:	697b      	ldr	r3, [r7, #20]
 8016758:	3301      	adds	r3, #1
 801675a:	617b      	str	r3, [r7, #20]
 801675c:	697a      	ldr	r2, [r7, #20]
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	429a      	cmp	r2, r3
 8016762:	dbf0      	blt.n	8016746 <_read+0x12>
	}

return len;
 8016764:	687b      	ldr	r3, [r7, #4]
}
 8016766:	4618      	mov	r0, r3
 8016768:	3718      	adds	r7, #24
 801676a:	46bd      	mov	sp, r7
 801676c:	bd80      	pop	{r7, pc}

0801676e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801676e:	b580      	push	{r7, lr}
 8016770:	b086      	sub	sp, #24
 8016772:	af00      	add	r7, sp, #0
 8016774:	60f8      	str	r0, [r7, #12]
 8016776:	60b9      	str	r1, [r7, #8]
 8016778:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801677a:	2300      	movs	r3, #0
 801677c:	617b      	str	r3, [r7, #20]
 801677e:	e009      	b.n	8016794 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8016780:	68bb      	ldr	r3, [r7, #8]
 8016782:	1c5a      	adds	r2, r3, #1
 8016784:	60ba      	str	r2, [r7, #8]
 8016786:	781b      	ldrb	r3, [r3, #0]
 8016788:	4618      	mov	r0, r3
 801678a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801678e:	697b      	ldr	r3, [r7, #20]
 8016790:	3301      	adds	r3, #1
 8016792:	617b      	str	r3, [r7, #20]
 8016794:	697a      	ldr	r2, [r7, #20]
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	429a      	cmp	r2, r3
 801679a:	dbf1      	blt.n	8016780 <_write+0x12>
	}
	return len;
 801679c:	687b      	ldr	r3, [r7, #4]
}
 801679e:	4618      	mov	r0, r3
 80167a0:	3718      	adds	r7, #24
 80167a2:	46bd      	mov	sp, r7
 80167a4:	bd80      	pop	{r7, pc}

080167a6 <_close>:

int _close(int file)
{
 80167a6:	b480      	push	{r7}
 80167a8:	b083      	sub	sp, #12
 80167aa:	af00      	add	r7, sp, #0
 80167ac:	6078      	str	r0, [r7, #4]
	return -1;
 80167ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80167b2:	4618      	mov	r0, r3
 80167b4:	370c      	adds	r7, #12
 80167b6:	46bd      	mov	sp, r7
 80167b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167bc:	4770      	bx	lr

080167be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80167be:	b480      	push	{r7}
 80167c0:	b083      	sub	sp, #12
 80167c2:	af00      	add	r7, sp, #0
 80167c4:	6078      	str	r0, [r7, #4]
 80167c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80167c8:	683b      	ldr	r3, [r7, #0]
 80167ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80167ce:	605a      	str	r2, [r3, #4]
	return 0;
 80167d0:	2300      	movs	r3, #0
}
 80167d2:	4618      	mov	r0, r3
 80167d4:	370c      	adds	r7, #12
 80167d6:	46bd      	mov	sp, r7
 80167d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167dc:	4770      	bx	lr

080167de <_isatty>:

int _isatty(int file)
{
 80167de:	b480      	push	{r7}
 80167e0:	b083      	sub	sp, #12
 80167e2:	af00      	add	r7, sp, #0
 80167e4:	6078      	str	r0, [r7, #4]
	return 1;
 80167e6:	2301      	movs	r3, #1
}
 80167e8:	4618      	mov	r0, r3
 80167ea:	370c      	adds	r7, #12
 80167ec:	46bd      	mov	sp, r7
 80167ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f2:	4770      	bx	lr

080167f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80167f4:	b480      	push	{r7}
 80167f6:	b085      	sub	sp, #20
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	60f8      	str	r0, [r7, #12]
 80167fc:	60b9      	str	r1, [r7, #8]
 80167fe:	607a      	str	r2, [r7, #4]
	return 0;
 8016800:	2300      	movs	r3, #0
}
 8016802:	4618      	mov	r0, r3
 8016804:	3714      	adds	r7, #20
 8016806:	46bd      	mov	sp, r7
 8016808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801680c:	4770      	bx	lr
	...

08016810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b086      	sub	sp, #24
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8016818:	4a14      	ldr	r2, [pc, #80]	; (801686c <_sbrk+0x5c>)
 801681a:	4b15      	ldr	r3, [pc, #84]	; (8016870 <_sbrk+0x60>)
 801681c:	1ad3      	subs	r3, r2, r3
 801681e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8016820:	697b      	ldr	r3, [r7, #20]
 8016822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8016824:	4b13      	ldr	r3, [pc, #76]	; (8016874 <_sbrk+0x64>)
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d102      	bne.n	8016832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801682c:	4b11      	ldr	r3, [pc, #68]	; (8016874 <_sbrk+0x64>)
 801682e:	4a12      	ldr	r2, [pc, #72]	; (8016878 <_sbrk+0x68>)
 8016830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8016832:	4b10      	ldr	r3, [pc, #64]	; (8016874 <_sbrk+0x64>)
 8016834:	681a      	ldr	r2, [r3, #0]
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	4413      	add	r3, r2
 801683a:	693a      	ldr	r2, [r7, #16]
 801683c:	429a      	cmp	r2, r3
 801683e:	d207      	bcs.n	8016850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8016840:	f007 fcc6 	bl	801e1d0 <__errno>
 8016844:	4603      	mov	r3, r0
 8016846:	220c      	movs	r2, #12
 8016848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801684a:	f04f 33ff 	mov.w	r3, #4294967295
 801684e:	e009      	b.n	8016864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8016850:	4b08      	ldr	r3, [pc, #32]	; (8016874 <_sbrk+0x64>)
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8016856:	4b07      	ldr	r3, [pc, #28]	; (8016874 <_sbrk+0x64>)
 8016858:	681a      	ldr	r2, [r3, #0]
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	4413      	add	r3, r2
 801685e:	4a05      	ldr	r2, [pc, #20]	; (8016874 <_sbrk+0x64>)
 8016860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8016862:	68fb      	ldr	r3, [r7, #12]
}
 8016864:	4618      	mov	r0, r3
 8016866:	3718      	adds	r7, #24
 8016868:	46bd      	mov	sp, r7
 801686a:	bd80      	pop	{r7, pc}
 801686c:	20020000 	.word	0x20020000
 8016870:	00000400 	.word	0x00000400
 8016874:	20000840 	.word	0x20000840
 8016878:	20000858 	.word	0x20000858

0801687c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801687c:	b480      	push	{r7}
 801687e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8016880:	4b06      	ldr	r3, [pc, #24]	; (801689c <SystemInit+0x20>)
 8016882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016886:	4a05      	ldr	r2, [pc, #20]	; (801689c <SystemInit+0x20>)
 8016888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801688c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8016890:	bf00      	nop
 8016892:	46bd      	mov	sp, r7
 8016894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016898:	4770      	bx	lr
 801689a:	bf00      	nop
 801689c:	e000ed00 	.word	0xe000ed00

080168a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80168a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80168d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80168a4:	480d      	ldr	r0, [pc, #52]	; (80168dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80168a6:	490e      	ldr	r1, [pc, #56]	; (80168e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80168a8:	4a0e      	ldr	r2, [pc, #56]	; (80168e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80168aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80168ac:	e002      	b.n	80168b4 <LoopCopyDataInit>

080168ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80168ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80168b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80168b2:	3304      	adds	r3, #4

080168b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80168b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80168b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80168b8:	d3f9      	bcc.n	80168ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80168ba:	4a0b      	ldr	r2, [pc, #44]	; (80168e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80168bc:	4c0b      	ldr	r4, [pc, #44]	; (80168ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80168be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80168c0:	e001      	b.n	80168c6 <LoopFillZerobss>

080168c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80168c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80168c4:	3204      	adds	r2, #4

080168c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80168c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80168c8:	d3fb      	bcc.n	80168c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80168ca:	f7ff ffd7 	bl	801687c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80168ce:	f007 fc97 	bl	801e200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80168d2:	f7eb f903 	bl	8001adc <main>
  bx  lr    
 80168d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80168d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80168dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80168e0:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 80168e4:	0802a328 	.word	0x0802a328
  ldr r2, =_sbss
 80168e8:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 80168ec:	20000858 	.word	0x20000858

080168f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80168f0:	e7fe      	b.n	80168f0 <ADC_IRQHandler>
	...

080168f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80168f8:	4b0e      	ldr	r3, [pc, #56]	; (8016934 <HAL_Init+0x40>)
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	4a0d      	ldr	r2, [pc, #52]	; (8016934 <HAL_Init+0x40>)
 80168fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016902:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8016904:	4b0b      	ldr	r3, [pc, #44]	; (8016934 <HAL_Init+0x40>)
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	4a0a      	ldr	r2, [pc, #40]	; (8016934 <HAL_Init+0x40>)
 801690a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801690e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8016910:	4b08      	ldr	r3, [pc, #32]	; (8016934 <HAL_Init+0x40>)
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	4a07      	ldr	r2, [pc, #28]	; (8016934 <HAL_Init+0x40>)
 8016916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801691a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801691c:	2003      	movs	r0, #3
 801691e:	f000 f94f 	bl	8016bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8016922:	2000      	movs	r0, #0
 8016924:	f000 f808 	bl	8016938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8016928:	f7ff fc14 	bl	8016154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801692c:	2300      	movs	r3, #0
}
 801692e:	4618      	mov	r0, r3
 8016930:	bd80      	pop	{r7, pc}
 8016932:	bf00      	nop
 8016934:	40023c00 	.word	0x40023c00

08016938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b082      	sub	sp, #8
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8016940:	4b12      	ldr	r3, [pc, #72]	; (801698c <HAL_InitTick+0x54>)
 8016942:	681a      	ldr	r2, [r3, #0]
 8016944:	4b12      	ldr	r3, [pc, #72]	; (8016990 <HAL_InitTick+0x58>)
 8016946:	781b      	ldrb	r3, [r3, #0]
 8016948:	4619      	mov	r1, r3
 801694a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801694e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016952:	fbb2 f3f3 	udiv	r3, r2, r3
 8016956:	4618      	mov	r0, r3
 8016958:	f000 f967 	bl	8016c2a <HAL_SYSTICK_Config>
 801695c:	4603      	mov	r3, r0
 801695e:	2b00      	cmp	r3, #0
 8016960:	d001      	beq.n	8016966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8016962:	2301      	movs	r3, #1
 8016964:	e00e      	b.n	8016984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	2b0f      	cmp	r3, #15
 801696a:	d80a      	bhi.n	8016982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801696c:	2200      	movs	r2, #0
 801696e:	6879      	ldr	r1, [r7, #4]
 8016970:	f04f 30ff 	mov.w	r0, #4294967295
 8016974:	f000 f92f 	bl	8016bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8016978:	4a06      	ldr	r2, [pc, #24]	; (8016994 <HAL_InitTick+0x5c>)
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801697e:	2300      	movs	r3, #0
 8016980:	e000      	b.n	8016984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8016982:	2301      	movs	r3, #1
}
 8016984:	4618      	mov	r0, r3
 8016986:	3708      	adds	r7, #8
 8016988:	46bd      	mov	sp, r7
 801698a:	bd80      	pop	{r7, pc}
 801698c:	20000230 	.word	0x20000230
 8016990:	20000238 	.word	0x20000238
 8016994:	20000234 	.word	0x20000234

08016998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8016998:	b480      	push	{r7}
 801699a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801699c:	4b06      	ldr	r3, [pc, #24]	; (80169b8 <HAL_IncTick+0x20>)
 801699e:	781b      	ldrb	r3, [r3, #0]
 80169a0:	461a      	mov	r2, r3
 80169a2:	4b06      	ldr	r3, [pc, #24]	; (80169bc <HAL_IncTick+0x24>)
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	4413      	add	r3, r2
 80169a8:	4a04      	ldr	r2, [pc, #16]	; (80169bc <HAL_IncTick+0x24>)
 80169aa:	6013      	str	r3, [r2, #0]
}
 80169ac:	bf00      	nop
 80169ae:	46bd      	mov	sp, r7
 80169b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b4:	4770      	bx	lr
 80169b6:	bf00      	nop
 80169b8:	20000238 	.word	0x20000238
 80169bc:	20000844 	.word	0x20000844

080169c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80169c0:	b480      	push	{r7}
 80169c2:	af00      	add	r7, sp, #0
  return uwTick;
 80169c4:	4b03      	ldr	r3, [pc, #12]	; (80169d4 <HAL_GetTick+0x14>)
 80169c6:	681b      	ldr	r3, [r3, #0]
}
 80169c8:	4618      	mov	r0, r3
 80169ca:	46bd      	mov	sp, r7
 80169cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d0:	4770      	bx	lr
 80169d2:	bf00      	nop
 80169d4:	20000844 	.word	0x20000844

080169d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	b084      	sub	sp, #16
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80169e0:	f7ff ffee 	bl	80169c0 <HAL_GetTick>
 80169e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169f0:	d005      	beq.n	80169fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80169f2:	4b0a      	ldr	r3, [pc, #40]	; (8016a1c <HAL_Delay+0x44>)
 80169f4:	781b      	ldrb	r3, [r3, #0]
 80169f6:	461a      	mov	r2, r3
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	4413      	add	r3, r2
 80169fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80169fe:	bf00      	nop
 8016a00:	f7ff ffde 	bl	80169c0 <HAL_GetTick>
 8016a04:	4602      	mov	r2, r0
 8016a06:	68bb      	ldr	r3, [r7, #8]
 8016a08:	1ad3      	subs	r3, r2, r3
 8016a0a:	68fa      	ldr	r2, [r7, #12]
 8016a0c:	429a      	cmp	r2, r3
 8016a0e:	d8f7      	bhi.n	8016a00 <HAL_Delay+0x28>
  {
  }
}
 8016a10:	bf00      	nop
 8016a12:	bf00      	nop
 8016a14:	3710      	adds	r7, #16
 8016a16:	46bd      	mov	sp, r7
 8016a18:	bd80      	pop	{r7, pc}
 8016a1a:	bf00      	nop
 8016a1c:	20000238 	.word	0x20000238

08016a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016a20:	b480      	push	{r7}
 8016a22:	b085      	sub	sp, #20
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	f003 0307 	and.w	r3, r3, #7
 8016a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016a30:	4b0c      	ldr	r3, [pc, #48]	; (8016a64 <__NVIC_SetPriorityGrouping+0x44>)
 8016a32:	68db      	ldr	r3, [r3, #12]
 8016a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8016a36:	68ba      	ldr	r2, [r7, #8]
 8016a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8016a3c:	4013      	ands	r3, r2
 8016a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8016a44:	68bb      	ldr	r3, [r7, #8]
 8016a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8016a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8016a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8016a52:	4a04      	ldr	r2, [pc, #16]	; (8016a64 <__NVIC_SetPriorityGrouping+0x44>)
 8016a54:	68bb      	ldr	r3, [r7, #8]
 8016a56:	60d3      	str	r3, [r2, #12]
}
 8016a58:	bf00      	nop
 8016a5a:	3714      	adds	r7, #20
 8016a5c:	46bd      	mov	sp, r7
 8016a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a62:	4770      	bx	lr
 8016a64:	e000ed00 	.word	0xe000ed00

08016a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8016a68:	b480      	push	{r7}
 8016a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016a6c:	4b04      	ldr	r3, [pc, #16]	; (8016a80 <__NVIC_GetPriorityGrouping+0x18>)
 8016a6e:	68db      	ldr	r3, [r3, #12]
 8016a70:	0a1b      	lsrs	r3, r3, #8
 8016a72:	f003 0307 	and.w	r3, r3, #7
}
 8016a76:	4618      	mov	r0, r3
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7e:	4770      	bx	lr
 8016a80:	e000ed00 	.word	0xe000ed00

08016a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016a84:	b480      	push	{r7}
 8016a86:	b083      	sub	sp, #12
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	db0b      	blt.n	8016aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016a96:	79fb      	ldrb	r3, [r7, #7]
 8016a98:	f003 021f 	and.w	r2, r3, #31
 8016a9c:	4907      	ldr	r1, [pc, #28]	; (8016abc <__NVIC_EnableIRQ+0x38>)
 8016a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016aa2:	095b      	lsrs	r3, r3, #5
 8016aa4:	2001      	movs	r0, #1
 8016aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8016aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8016aae:	bf00      	nop
 8016ab0:	370c      	adds	r7, #12
 8016ab2:	46bd      	mov	sp, r7
 8016ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab8:	4770      	bx	lr
 8016aba:	bf00      	nop
 8016abc:	e000e100 	.word	0xe000e100

08016ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8016ac0:	b480      	push	{r7}
 8016ac2:	b083      	sub	sp, #12
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	6039      	str	r1, [r7, #0]
 8016aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	db0a      	blt.n	8016aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016ad4:	683b      	ldr	r3, [r7, #0]
 8016ad6:	b2da      	uxtb	r2, r3
 8016ad8:	490c      	ldr	r1, [pc, #48]	; (8016b0c <__NVIC_SetPriority+0x4c>)
 8016ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016ade:	0112      	lsls	r2, r2, #4
 8016ae0:	b2d2      	uxtb	r2, r2
 8016ae2:	440b      	add	r3, r1
 8016ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8016ae8:	e00a      	b.n	8016b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016aea:	683b      	ldr	r3, [r7, #0]
 8016aec:	b2da      	uxtb	r2, r3
 8016aee:	4908      	ldr	r1, [pc, #32]	; (8016b10 <__NVIC_SetPriority+0x50>)
 8016af0:	79fb      	ldrb	r3, [r7, #7]
 8016af2:	f003 030f 	and.w	r3, r3, #15
 8016af6:	3b04      	subs	r3, #4
 8016af8:	0112      	lsls	r2, r2, #4
 8016afa:	b2d2      	uxtb	r2, r2
 8016afc:	440b      	add	r3, r1
 8016afe:	761a      	strb	r2, [r3, #24]
}
 8016b00:	bf00      	nop
 8016b02:	370c      	adds	r7, #12
 8016b04:	46bd      	mov	sp, r7
 8016b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b0a:	4770      	bx	lr
 8016b0c:	e000e100 	.word	0xe000e100
 8016b10:	e000ed00 	.word	0xe000ed00

08016b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8016b14:	b480      	push	{r7}
 8016b16:	b089      	sub	sp, #36	; 0x24
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	60f8      	str	r0, [r7, #12]
 8016b1c:	60b9      	str	r1, [r7, #8]
 8016b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	f003 0307 	and.w	r3, r3, #7
 8016b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016b28:	69fb      	ldr	r3, [r7, #28]
 8016b2a:	f1c3 0307 	rsb	r3, r3, #7
 8016b2e:	2b04      	cmp	r3, #4
 8016b30:	bf28      	it	cs
 8016b32:	2304      	movcs	r3, #4
 8016b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016b36:	69fb      	ldr	r3, [r7, #28]
 8016b38:	3304      	adds	r3, #4
 8016b3a:	2b06      	cmp	r3, #6
 8016b3c:	d902      	bls.n	8016b44 <NVIC_EncodePriority+0x30>
 8016b3e:	69fb      	ldr	r3, [r7, #28]
 8016b40:	3b03      	subs	r3, #3
 8016b42:	e000      	b.n	8016b46 <NVIC_EncodePriority+0x32>
 8016b44:	2300      	movs	r3, #0
 8016b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016b48:	f04f 32ff 	mov.w	r2, #4294967295
 8016b4c:	69bb      	ldr	r3, [r7, #24]
 8016b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8016b52:	43da      	mvns	r2, r3
 8016b54:	68bb      	ldr	r3, [r7, #8]
 8016b56:	401a      	ands	r2, r3
 8016b58:	697b      	ldr	r3, [r7, #20]
 8016b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8016b60:	697b      	ldr	r3, [r7, #20]
 8016b62:	fa01 f303 	lsl.w	r3, r1, r3
 8016b66:	43d9      	mvns	r1, r3
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016b6c:	4313      	orrs	r3, r2
         );
}
 8016b6e:	4618      	mov	r0, r3
 8016b70:	3724      	adds	r7, #36	; 0x24
 8016b72:	46bd      	mov	sp, r7
 8016b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b78:	4770      	bx	lr
	...

08016b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b082      	sub	sp, #8
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	3b01      	subs	r3, #1
 8016b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016b8c:	d301      	bcc.n	8016b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8016b8e:	2301      	movs	r3, #1
 8016b90:	e00f      	b.n	8016bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8016b92:	4a0a      	ldr	r2, [pc, #40]	; (8016bbc <SysTick_Config+0x40>)
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	3b01      	subs	r3, #1
 8016b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8016b9a:	210f      	movs	r1, #15
 8016b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8016ba0:	f7ff ff8e 	bl	8016ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8016ba4:	4b05      	ldr	r3, [pc, #20]	; (8016bbc <SysTick_Config+0x40>)
 8016ba6:	2200      	movs	r2, #0
 8016ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8016baa:	4b04      	ldr	r3, [pc, #16]	; (8016bbc <SysTick_Config+0x40>)
 8016bac:	2207      	movs	r2, #7
 8016bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8016bb0:	2300      	movs	r3, #0
}
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	3708      	adds	r7, #8
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	bd80      	pop	{r7, pc}
 8016bba:	bf00      	nop
 8016bbc:	e000e010 	.word	0xe000e010

08016bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b082      	sub	sp, #8
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8016bc8:	6878      	ldr	r0, [r7, #4]
 8016bca:	f7ff ff29 	bl	8016a20 <__NVIC_SetPriorityGrouping>
}
 8016bce:	bf00      	nop
 8016bd0:	3708      	adds	r7, #8
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	bd80      	pop	{r7, pc}

08016bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8016bd6:	b580      	push	{r7, lr}
 8016bd8:	b086      	sub	sp, #24
 8016bda:	af00      	add	r7, sp, #0
 8016bdc:	4603      	mov	r3, r0
 8016bde:	60b9      	str	r1, [r7, #8]
 8016be0:	607a      	str	r2, [r7, #4]
 8016be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8016be4:	2300      	movs	r3, #0
 8016be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8016be8:	f7ff ff3e 	bl	8016a68 <__NVIC_GetPriorityGrouping>
 8016bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8016bee:	687a      	ldr	r2, [r7, #4]
 8016bf0:	68b9      	ldr	r1, [r7, #8]
 8016bf2:	6978      	ldr	r0, [r7, #20]
 8016bf4:	f7ff ff8e 	bl	8016b14 <NVIC_EncodePriority>
 8016bf8:	4602      	mov	r2, r0
 8016bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016bfe:	4611      	mov	r1, r2
 8016c00:	4618      	mov	r0, r3
 8016c02:	f7ff ff5d 	bl	8016ac0 <__NVIC_SetPriority>
}
 8016c06:	bf00      	nop
 8016c08:	3718      	adds	r7, #24
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}

08016c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016c0e:	b580      	push	{r7, lr}
 8016c10:	b082      	sub	sp, #8
 8016c12:	af00      	add	r7, sp, #0
 8016c14:	4603      	mov	r3, r0
 8016c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8016c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7ff ff31 	bl	8016a84 <__NVIC_EnableIRQ>
}
 8016c22:	bf00      	nop
 8016c24:	3708      	adds	r7, #8
 8016c26:	46bd      	mov	sp, r7
 8016c28:	bd80      	pop	{r7, pc}

08016c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8016c2a:	b580      	push	{r7, lr}
 8016c2c:	b082      	sub	sp, #8
 8016c2e:	af00      	add	r7, sp, #0
 8016c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8016c32:	6878      	ldr	r0, [r7, #4]
 8016c34:	f7ff ffa2 	bl	8016b7c <SysTick_Config>
 8016c38:	4603      	mov	r3, r0
}
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	3708      	adds	r7, #8
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	bd80      	pop	{r7, pc}
	...

08016c44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8016c44:	b580      	push	{r7, lr}
 8016c46:	b086      	sub	sp, #24
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8016c50:	f7ff feb6 	bl	80169c0 <HAL_GetTick>
 8016c54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d101      	bne.n	8016c60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8016c5c:	2301      	movs	r3, #1
 8016c5e:	e099      	b.n	8016d94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	2202      	movs	r2, #2
 8016c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	681a      	ldr	r2, [r3, #0]
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	f022 0201 	bic.w	r2, r2, #1
 8016c7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016c80:	e00f      	b.n	8016ca2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016c82:	f7ff fe9d 	bl	80169c0 <HAL_GetTick>
 8016c86:	4602      	mov	r2, r0
 8016c88:	693b      	ldr	r3, [r7, #16]
 8016c8a:	1ad3      	subs	r3, r2, r3
 8016c8c:	2b05      	cmp	r3, #5
 8016c8e:	d908      	bls.n	8016ca2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	2220      	movs	r2, #32
 8016c94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	2203      	movs	r2, #3
 8016c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8016c9e:	2303      	movs	r3, #3
 8016ca0:	e078      	b.n	8016d94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	f003 0301 	and.w	r3, r3, #1
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d1e8      	bne.n	8016c82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8016cb8:	697a      	ldr	r2, [r7, #20]
 8016cba:	4b38      	ldr	r3, [pc, #224]	; (8016d9c <HAL_DMA_Init+0x158>)
 8016cbc:	4013      	ands	r3, r2
 8016cbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	685a      	ldr	r2, [r3, #4]
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	689b      	ldr	r3, [r3, #8]
 8016cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	691b      	ldr	r3, [r3, #16]
 8016cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	699b      	ldr	r3, [r3, #24]
 8016ce0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016ce6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	6a1b      	ldr	r3, [r3, #32]
 8016cec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016cee:	697a      	ldr	r2, [r7, #20]
 8016cf0:	4313      	orrs	r3, r2
 8016cf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cf8:	2b04      	cmp	r3, #4
 8016cfa:	d107      	bne.n	8016d0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d04:	4313      	orrs	r3, r2
 8016d06:	697a      	ldr	r2, [r7, #20]
 8016d08:	4313      	orrs	r3, r2
 8016d0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	697a      	ldr	r2, [r7, #20]
 8016d12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	695b      	ldr	r3, [r3, #20]
 8016d1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8016d1c:	697b      	ldr	r3, [r7, #20]
 8016d1e:	f023 0307 	bic.w	r3, r3, #7
 8016d22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d28:	697a      	ldr	r2, [r7, #20]
 8016d2a:	4313      	orrs	r3, r2
 8016d2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d32:	2b04      	cmp	r3, #4
 8016d34:	d117      	bne.n	8016d66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d3a:	697a      	ldr	r2, [r7, #20]
 8016d3c:	4313      	orrs	r3, r2
 8016d3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d00e      	beq.n	8016d66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8016d48:	6878      	ldr	r0, [r7, #4]
 8016d4a:	f000 fb0f 	bl	801736c <DMA_CheckFifoParam>
 8016d4e:	4603      	mov	r3, r0
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d008      	beq.n	8016d66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	2240      	movs	r2, #64	; 0x40
 8016d58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	2201      	movs	r2, #1
 8016d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8016d62:	2301      	movs	r3, #1
 8016d64:	e016      	b.n	8016d94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	697a      	ldr	r2, [r7, #20]
 8016d6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8016d6e:	6878      	ldr	r0, [r7, #4]
 8016d70:	f000 fac6 	bl	8017300 <DMA_CalcBaseAndBitshift>
 8016d74:	4603      	mov	r3, r0
 8016d76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d7c:	223f      	movs	r2, #63	; 0x3f
 8016d7e:	409a      	lsls	r2, r3
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	2200      	movs	r2, #0
 8016d88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	2201      	movs	r2, #1
 8016d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8016d92:	2300      	movs	r3, #0
}
 8016d94:	4618      	mov	r0, r3
 8016d96:	3718      	adds	r7, #24
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	bd80      	pop	{r7, pc}
 8016d9c:	f010803f 	.word	0xf010803f

08016da0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	b086      	sub	sp, #24
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	60f8      	str	r0, [r7, #12]
 8016da8:	60b9      	str	r1, [r7, #8]
 8016daa:	607a      	str	r2, [r7, #4]
 8016dac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016dae:	2300      	movs	r3, #0
 8016db0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016db6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016dbe:	2b01      	cmp	r3, #1
 8016dc0:	d101      	bne.n	8016dc6 <HAL_DMA_Start_IT+0x26>
 8016dc2:	2302      	movs	r3, #2
 8016dc4:	e040      	b.n	8016e48 <HAL_DMA_Start_IT+0xa8>
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	2201      	movs	r2, #1
 8016dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016dd4:	b2db      	uxtb	r3, r3
 8016dd6:	2b01      	cmp	r3, #1
 8016dd8:	d12f      	bne.n	8016e3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	2202      	movs	r2, #2
 8016dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	2200      	movs	r2, #0
 8016de6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8016de8:	683b      	ldr	r3, [r7, #0]
 8016dea:	687a      	ldr	r2, [r7, #4]
 8016dec:	68b9      	ldr	r1, [r7, #8]
 8016dee:	68f8      	ldr	r0, [r7, #12]
 8016df0:	f000 fa58 	bl	80172a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016df8:	223f      	movs	r2, #63	; 0x3f
 8016dfa:	409a      	lsls	r2, r3
 8016dfc:	693b      	ldr	r3, [r7, #16]
 8016dfe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	681a      	ldr	r2, [r3, #0]
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	f042 0216 	orr.w	r2, r2, #22
 8016e0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d007      	beq.n	8016e28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	681a      	ldr	r2, [r3, #0]
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	f042 0208 	orr.w	r2, r2, #8
 8016e26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	681a      	ldr	r2, [r3, #0]
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	f042 0201 	orr.w	r2, r2, #1
 8016e36:	601a      	str	r2, [r3, #0]
 8016e38:	e005      	b.n	8016e46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8016e42:	2302      	movs	r3, #2
 8016e44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8016e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e48:	4618      	mov	r0, r3
 8016e4a:	3718      	adds	r7, #24
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bd80      	pop	{r7, pc}

08016e50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b084      	sub	sp, #16
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016e5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8016e5e:	f7ff fdaf 	bl	80169c0 <HAL_GetTick>
 8016e62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016e6a:	b2db      	uxtb	r3, r3
 8016e6c:	2b02      	cmp	r3, #2
 8016e6e:	d008      	beq.n	8016e82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	2280      	movs	r2, #128	; 0x80
 8016e74:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	2200      	movs	r2, #0
 8016e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8016e7e:	2301      	movs	r3, #1
 8016e80:	e052      	b.n	8016f28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	681a      	ldr	r2, [r3, #0]
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	f022 0216 	bic.w	r2, r2, #22
 8016e90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	695a      	ldr	r2, [r3, #20]
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016ea0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d103      	bne.n	8016eb2 <HAL_DMA_Abort+0x62>
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d007      	beq.n	8016ec2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	681a      	ldr	r2, [r3, #0]
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	f022 0208 	bic.w	r2, r2, #8
 8016ec0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	681a      	ldr	r2, [r3, #0]
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	f022 0201 	bic.w	r2, r2, #1
 8016ed0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016ed2:	e013      	b.n	8016efc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016ed4:	f7ff fd74 	bl	80169c0 <HAL_GetTick>
 8016ed8:	4602      	mov	r2, r0
 8016eda:	68bb      	ldr	r3, [r7, #8]
 8016edc:	1ad3      	subs	r3, r2, r3
 8016ede:	2b05      	cmp	r3, #5
 8016ee0:	d90c      	bls.n	8016efc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	2220      	movs	r2, #32
 8016ee6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	2203      	movs	r2, #3
 8016eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8016ef8:	2303      	movs	r3, #3
 8016efa:	e015      	b.n	8016f28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	f003 0301 	and.w	r3, r3, #1
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d1e4      	bne.n	8016ed4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016f0e:	223f      	movs	r2, #63	; 0x3f
 8016f10:	409a      	lsls	r2, r3
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	2201      	movs	r2, #1
 8016f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	2200      	movs	r2, #0
 8016f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8016f26:	2300      	movs	r3, #0
}
 8016f28:	4618      	mov	r0, r3
 8016f2a:	3710      	adds	r7, #16
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	bd80      	pop	{r7, pc}

08016f30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016f30:	b480      	push	{r7}
 8016f32:	b083      	sub	sp, #12
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016f3e:	b2db      	uxtb	r3, r3
 8016f40:	2b02      	cmp	r3, #2
 8016f42:	d004      	beq.n	8016f4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	2280      	movs	r2, #128	; 0x80
 8016f48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8016f4a:	2301      	movs	r3, #1
 8016f4c:	e00c      	b.n	8016f68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	2205      	movs	r2, #5
 8016f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	681a      	ldr	r2, [r3, #0]
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	f022 0201 	bic.w	r2, r2, #1
 8016f64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8016f66:	2300      	movs	r3, #0
}
 8016f68:	4618      	mov	r0, r3
 8016f6a:	370c      	adds	r7, #12
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f72:	4770      	bx	lr

08016f74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8016f74:	b580      	push	{r7, lr}
 8016f76:	b086      	sub	sp, #24
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8016f80:	4b8e      	ldr	r3, [pc, #568]	; (80171bc <HAL_DMA_IRQHandler+0x248>)
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	4a8e      	ldr	r2, [pc, #568]	; (80171c0 <HAL_DMA_IRQHandler+0x24c>)
 8016f86:	fba2 2303 	umull	r2, r3, r2, r3
 8016f8a:	0a9b      	lsrs	r3, r3, #10
 8016f8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016f92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8016f94:	693b      	ldr	r3, [r7, #16]
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016f9e:	2208      	movs	r2, #8
 8016fa0:	409a      	lsls	r2, r3
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	4013      	ands	r3, r2
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d01a      	beq.n	8016fe0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	f003 0304 	and.w	r3, r3, #4
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d013      	beq.n	8016fe0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	681a      	ldr	r2, [r3, #0]
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	f022 0204 	bic.w	r2, r2, #4
 8016fc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016fcc:	2208      	movs	r2, #8
 8016fce:	409a      	lsls	r2, r3
 8016fd0:	693b      	ldr	r3, [r7, #16]
 8016fd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016fd8:	f043 0201 	orr.w	r2, r3, #1
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016fe4:	2201      	movs	r2, #1
 8016fe6:	409a      	lsls	r2, r3
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	4013      	ands	r3, r2
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d012      	beq.n	8017016 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	695b      	ldr	r3, [r3, #20]
 8016ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d00b      	beq.n	8017016 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017002:	2201      	movs	r2, #1
 8017004:	409a      	lsls	r2, r3
 8017006:	693b      	ldr	r3, [r7, #16]
 8017008:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801700e:	f043 0202 	orr.w	r2, r3, #2
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801701a:	2204      	movs	r2, #4
 801701c:	409a      	lsls	r2, r3
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	4013      	ands	r3, r2
 8017022:	2b00      	cmp	r3, #0
 8017024:	d012      	beq.n	801704c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	f003 0302 	and.w	r3, r3, #2
 8017030:	2b00      	cmp	r3, #0
 8017032:	d00b      	beq.n	801704c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017038:	2204      	movs	r2, #4
 801703a:	409a      	lsls	r2, r3
 801703c:	693b      	ldr	r3, [r7, #16]
 801703e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017044:	f043 0204 	orr.w	r2, r3, #4
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017050:	2210      	movs	r2, #16
 8017052:	409a      	lsls	r2, r3
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	4013      	ands	r3, r2
 8017058:	2b00      	cmp	r3, #0
 801705a:	d043      	beq.n	80170e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	f003 0308 	and.w	r3, r3, #8
 8017066:	2b00      	cmp	r3, #0
 8017068:	d03c      	beq.n	80170e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801706e:	2210      	movs	r2, #16
 8017070:	409a      	lsls	r2, r3
 8017072:	693b      	ldr	r3, [r7, #16]
 8017074:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017080:	2b00      	cmp	r3, #0
 8017082:	d018      	beq.n	80170b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801708e:	2b00      	cmp	r3, #0
 8017090:	d108      	bne.n	80170a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017096:	2b00      	cmp	r3, #0
 8017098:	d024      	beq.n	80170e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801709e:	6878      	ldr	r0, [r7, #4]
 80170a0:	4798      	blx	r3
 80170a2:	e01f      	b.n	80170e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d01b      	beq.n	80170e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80170b0:	6878      	ldr	r0, [r7, #4]
 80170b2:	4798      	blx	r3
 80170b4:	e016      	b.n	80170e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d107      	bne.n	80170d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	681a      	ldr	r2, [r3, #0]
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	f022 0208 	bic.w	r2, r2, #8
 80170d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d003      	beq.n	80170e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170e0:	6878      	ldr	r0, [r7, #4]
 80170e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80170e8:	2220      	movs	r2, #32
 80170ea:	409a      	lsls	r2, r3
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	4013      	ands	r3, r2
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	f000 808f 	beq.w	8017214 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	f003 0310 	and.w	r3, r3, #16
 8017100:	2b00      	cmp	r3, #0
 8017102:	f000 8087 	beq.w	8017214 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801710a:	2220      	movs	r2, #32
 801710c:	409a      	lsls	r2, r3
 801710e:	693b      	ldr	r3, [r7, #16]
 8017110:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017118:	b2db      	uxtb	r3, r3
 801711a:	2b05      	cmp	r3, #5
 801711c:	d136      	bne.n	801718c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	681a      	ldr	r2, [r3, #0]
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	f022 0216 	bic.w	r2, r2, #22
 801712c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	695a      	ldr	r2, [r3, #20]
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801713c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017142:	2b00      	cmp	r3, #0
 8017144:	d103      	bne.n	801714e <HAL_DMA_IRQHandler+0x1da>
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801714a:	2b00      	cmp	r3, #0
 801714c:	d007      	beq.n	801715e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	681a      	ldr	r2, [r3, #0]
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	f022 0208 	bic.w	r2, r2, #8
 801715c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017162:	223f      	movs	r2, #63	; 0x3f
 8017164:	409a      	lsls	r2, r3
 8017166:	693b      	ldr	r3, [r7, #16]
 8017168:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	2201      	movs	r2, #1
 801716e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	2200      	movs	r2, #0
 8017176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801717e:	2b00      	cmp	r3, #0
 8017180:	d07e      	beq.n	8017280 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017186:	6878      	ldr	r0, [r7, #4]
 8017188:	4798      	blx	r3
        }
        return;
 801718a:	e079      	b.n	8017280 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017196:	2b00      	cmp	r3, #0
 8017198:	d01d      	beq.n	80171d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d10d      	bne.n	80171c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d031      	beq.n	8017214 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	4798      	blx	r3
 80171b8:	e02c      	b.n	8017214 <HAL_DMA_IRQHandler+0x2a0>
 80171ba:	bf00      	nop
 80171bc:	20000230 	.word	0x20000230
 80171c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d023      	beq.n	8017214 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80171d0:	6878      	ldr	r0, [r7, #4]
 80171d2:	4798      	blx	r3
 80171d4:	e01e      	b.n	8017214 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d10f      	bne.n	8017204 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	681a      	ldr	r2, [r3, #0]
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	f022 0210 	bic.w	r2, r2, #16
 80171f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	2201      	movs	r2, #1
 80171f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	2200      	movs	r2, #0
 8017200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017208:	2b00      	cmp	r3, #0
 801720a:	d003      	beq.n	8017214 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017210:	6878      	ldr	r0, [r7, #4]
 8017212:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017218:	2b00      	cmp	r3, #0
 801721a:	d032      	beq.n	8017282 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017220:	f003 0301 	and.w	r3, r3, #1
 8017224:	2b00      	cmp	r3, #0
 8017226:	d022      	beq.n	801726e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	2205      	movs	r2, #5
 801722c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	681a      	ldr	r2, [r3, #0]
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	f022 0201 	bic.w	r2, r2, #1
 801723e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8017240:	68bb      	ldr	r3, [r7, #8]
 8017242:	3301      	adds	r3, #1
 8017244:	60bb      	str	r3, [r7, #8]
 8017246:	697a      	ldr	r2, [r7, #20]
 8017248:	429a      	cmp	r2, r3
 801724a:	d307      	bcc.n	801725c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	f003 0301 	and.w	r3, r3, #1
 8017256:	2b00      	cmp	r3, #0
 8017258:	d1f2      	bne.n	8017240 <HAL_DMA_IRQHandler+0x2cc>
 801725a:	e000      	b.n	801725e <HAL_DMA_IRQHandler+0x2ea>
          break;
 801725c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	2201      	movs	r2, #1
 8017262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	2200      	movs	r2, #0
 801726a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017272:	2b00      	cmp	r3, #0
 8017274:	d005      	beq.n	8017282 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801727a:	6878      	ldr	r0, [r7, #4]
 801727c:	4798      	blx	r3
 801727e:	e000      	b.n	8017282 <HAL_DMA_IRQHandler+0x30e>
        return;
 8017280:	bf00      	nop
    }
  }
}
 8017282:	3718      	adds	r7, #24
 8017284:	46bd      	mov	sp, r7
 8017286:	bd80      	pop	{r7, pc}

08017288 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8017288:	b480      	push	{r7}
 801728a:	b083      	sub	sp, #12
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017296:	b2db      	uxtb	r3, r3
}
 8017298:	4618      	mov	r0, r3
 801729a:	370c      	adds	r7, #12
 801729c:	46bd      	mov	sp, r7
 801729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a2:	4770      	bx	lr

080172a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80172a4:	b480      	push	{r7}
 80172a6:	b085      	sub	sp, #20
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	60f8      	str	r0, [r7, #12]
 80172ac:	60b9      	str	r1, [r7, #8]
 80172ae:	607a      	str	r2, [r7, #4]
 80172b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	681a      	ldr	r2, [r3, #0]
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80172c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	683a      	ldr	r2, [r7, #0]
 80172c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	689b      	ldr	r3, [r3, #8]
 80172ce:	2b40      	cmp	r3, #64	; 0x40
 80172d0:	d108      	bne.n	80172e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	687a      	ldr	r2, [r7, #4]
 80172d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	68ba      	ldr	r2, [r7, #8]
 80172e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80172e2:	e007      	b.n	80172f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	68ba      	ldr	r2, [r7, #8]
 80172ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	687a      	ldr	r2, [r7, #4]
 80172f2:	60da      	str	r2, [r3, #12]
}
 80172f4:	bf00      	nop
 80172f6:	3714      	adds	r7, #20
 80172f8:	46bd      	mov	sp, r7
 80172fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fe:	4770      	bx	lr

08017300 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8017300:	b480      	push	{r7}
 8017302:	b085      	sub	sp, #20
 8017304:	af00      	add	r7, sp, #0
 8017306:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	b2db      	uxtb	r3, r3
 801730e:	3b10      	subs	r3, #16
 8017310:	4a14      	ldr	r2, [pc, #80]	; (8017364 <DMA_CalcBaseAndBitshift+0x64>)
 8017312:	fba2 2303 	umull	r2, r3, r2, r3
 8017316:	091b      	lsrs	r3, r3, #4
 8017318:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801731a:	4a13      	ldr	r2, [pc, #76]	; (8017368 <DMA_CalcBaseAndBitshift+0x68>)
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	4413      	add	r3, r2
 8017320:	781b      	ldrb	r3, [r3, #0]
 8017322:	461a      	mov	r2, r3
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	2b03      	cmp	r3, #3
 801732c:	d909      	bls.n	8017342 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8017336:	f023 0303 	bic.w	r3, r3, #3
 801733a:	1d1a      	adds	r2, r3, #4
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	659a      	str	r2, [r3, #88]	; 0x58
 8017340:	e007      	b.n	8017352 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801734a:	f023 0303 	bic.w	r3, r3, #3
 801734e:	687a      	ldr	r2, [r7, #4]
 8017350:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8017356:	4618      	mov	r0, r3
 8017358:	3714      	adds	r7, #20
 801735a:	46bd      	mov	sp, r7
 801735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017360:	4770      	bx	lr
 8017362:	bf00      	nop
 8017364:	aaaaaaab 	.word	0xaaaaaaab
 8017368:	0802a204 	.word	0x0802a204

0801736c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801736c:	b480      	push	{r7}
 801736e:	b085      	sub	sp, #20
 8017370:	af00      	add	r7, sp, #0
 8017372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017374:	2300      	movs	r3, #0
 8017376:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801737c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	699b      	ldr	r3, [r3, #24]
 8017382:	2b00      	cmp	r3, #0
 8017384:	d11f      	bne.n	80173c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8017386:	68bb      	ldr	r3, [r7, #8]
 8017388:	2b03      	cmp	r3, #3
 801738a:	d856      	bhi.n	801743a <DMA_CheckFifoParam+0xce>
 801738c:	a201      	add	r2, pc, #4	; (adr r2, 8017394 <DMA_CheckFifoParam+0x28>)
 801738e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017392:	bf00      	nop
 8017394:	080173a5 	.word	0x080173a5
 8017398:	080173b7 	.word	0x080173b7
 801739c:	080173a5 	.word	0x080173a5
 80173a0:	0801743b 	.word	0x0801743b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d046      	beq.n	801743e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80173b0:	2301      	movs	r3, #1
 80173b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80173b4:	e043      	b.n	801743e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80173be:	d140      	bne.n	8017442 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80173c0:	2301      	movs	r3, #1
 80173c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80173c4:	e03d      	b.n	8017442 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	699b      	ldr	r3, [r3, #24]
 80173ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80173ce:	d121      	bne.n	8017414 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80173d0:	68bb      	ldr	r3, [r7, #8]
 80173d2:	2b03      	cmp	r3, #3
 80173d4:	d837      	bhi.n	8017446 <DMA_CheckFifoParam+0xda>
 80173d6:	a201      	add	r2, pc, #4	; (adr r2, 80173dc <DMA_CheckFifoParam+0x70>)
 80173d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173dc:	080173ed 	.word	0x080173ed
 80173e0:	080173f3 	.word	0x080173f3
 80173e4:	080173ed 	.word	0x080173ed
 80173e8:	08017405 	.word	0x08017405
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80173ec:	2301      	movs	r3, #1
 80173ee:	73fb      	strb	r3, [r7, #15]
      break;
 80173f0:	e030      	b.n	8017454 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d025      	beq.n	801744a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80173fe:	2301      	movs	r3, #1
 8017400:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8017402:	e022      	b.n	801744a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017408:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801740c:	d11f      	bne.n	801744e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801740e:	2301      	movs	r3, #1
 8017410:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8017412:	e01c      	b.n	801744e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8017414:	68bb      	ldr	r3, [r7, #8]
 8017416:	2b02      	cmp	r3, #2
 8017418:	d903      	bls.n	8017422 <DMA_CheckFifoParam+0xb6>
 801741a:	68bb      	ldr	r3, [r7, #8]
 801741c:	2b03      	cmp	r3, #3
 801741e:	d003      	beq.n	8017428 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8017420:	e018      	b.n	8017454 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8017422:	2301      	movs	r3, #1
 8017424:	73fb      	strb	r3, [r7, #15]
      break;
 8017426:	e015      	b.n	8017454 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801742c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017430:	2b00      	cmp	r3, #0
 8017432:	d00e      	beq.n	8017452 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8017434:	2301      	movs	r3, #1
 8017436:	73fb      	strb	r3, [r7, #15]
      break;
 8017438:	e00b      	b.n	8017452 <DMA_CheckFifoParam+0xe6>
      break;
 801743a:	bf00      	nop
 801743c:	e00a      	b.n	8017454 <DMA_CheckFifoParam+0xe8>
      break;
 801743e:	bf00      	nop
 8017440:	e008      	b.n	8017454 <DMA_CheckFifoParam+0xe8>
      break;
 8017442:	bf00      	nop
 8017444:	e006      	b.n	8017454 <DMA_CheckFifoParam+0xe8>
      break;
 8017446:	bf00      	nop
 8017448:	e004      	b.n	8017454 <DMA_CheckFifoParam+0xe8>
      break;
 801744a:	bf00      	nop
 801744c:	e002      	b.n	8017454 <DMA_CheckFifoParam+0xe8>
      break;   
 801744e:	bf00      	nop
 8017450:	e000      	b.n	8017454 <DMA_CheckFifoParam+0xe8>
      break;
 8017452:	bf00      	nop
    }
  } 
  
  return status; 
 8017454:	7bfb      	ldrb	r3, [r7, #15]
}
 8017456:	4618      	mov	r0, r3
 8017458:	3714      	adds	r7, #20
 801745a:	46bd      	mov	sp, r7
 801745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017460:	4770      	bx	lr
 8017462:	bf00      	nop

08017464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8017464:	b480      	push	{r7}
 8017466:	b089      	sub	sp, #36	; 0x24
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
 801746c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801746e:	2300      	movs	r3, #0
 8017470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8017472:	2300      	movs	r3, #0
 8017474:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8017476:	2300      	movs	r3, #0
 8017478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801747a:	2300      	movs	r3, #0
 801747c:	61fb      	str	r3, [r7, #28]
 801747e:	e159      	b.n	8017734 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8017480:	2201      	movs	r2, #1
 8017482:	69fb      	ldr	r3, [r7, #28]
 8017484:	fa02 f303 	lsl.w	r3, r2, r3
 8017488:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801748a:	683b      	ldr	r3, [r7, #0]
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	697a      	ldr	r2, [r7, #20]
 8017490:	4013      	ands	r3, r2
 8017492:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8017494:	693a      	ldr	r2, [r7, #16]
 8017496:	697b      	ldr	r3, [r7, #20]
 8017498:	429a      	cmp	r2, r3
 801749a:	f040 8148 	bne.w	801772e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801749e:	683b      	ldr	r3, [r7, #0]
 80174a0:	685b      	ldr	r3, [r3, #4]
 80174a2:	f003 0303 	and.w	r3, r3, #3
 80174a6:	2b01      	cmp	r3, #1
 80174a8:	d005      	beq.n	80174b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80174aa:	683b      	ldr	r3, [r7, #0]
 80174ac:	685b      	ldr	r3, [r3, #4]
 80174ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80174b2:	2b02      	cmp	r3, #2
 80174b4:	d130      	bne.n	8017518 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	689b      	ldr	r3, [r3, #8]
 80174ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80174bc:	69fb      	ldr	r3, [r7, #28]
 80174be:	005b      	lsls	r3, r3, #1
 80174c0:	2203      	movs	r2, #3
 80174c2:	fa02 f303 	lsl.w	r3, r2, r3
 80174c6:	43db      	mvns	r3, r3
 80174c8:	69ba      	ldr	r2, [r7, #24]
 80174ca:	4013      	ands	r3, r2
 80174cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80174ce:	683b      	ldr	r3, [r7, #0]
 80174d0:	68da      	ldr	r2, [r3, #12]
 80174d2:	69fb      	ldr	r3, [r7, #28]
 80174d4:	005b      	lsls	r3, r3, #1
 80174d6:	fa02 f303 	lsl.w	r3, r2, r3
 80174da:	69ba      	ldr	r2, [r7, #24]
 80174dc:	4313      	orrs	r3, r2
 80174de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	69ba      	ldr	r2, [r7, #24]
 80174e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	685b      	ldr	r3, [r3, #4]
 80174ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80174ec:	2201      	movs	r2, #1
 80174ee:	69fb      	ldr	r3, [r7, #28]
 80174f0:	fa02 f303 	lsl.w	r3, r2, r3
 80174f4:	43db      	mvns	r3, r3
 80174f6:	69ba      	ldr	r2, [r7, #24]
 80174f8:	4013      	ands	r3, r2
 80174fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80174fc:	683b      	ldr	r3, [r7, #0]
 80174fe:	685b      	ldr	r3, [r3, #4]
 8017500:	091b      	lsrs	r3, r3, #4
 8017502:	f003 0201 	and.w	r2, r3, #1
 8017506:	69fb      	ldr	r3, [r7, #28]
 8017508:	fa02 f303 	lsl.w	r3, r2, r3
 801750c:	69ba      	ldr	r2, [r7, #24]
 801750e:	4313      	orrs	r3, r2
 8017510:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	69ba      	ldr	r2, [r7, #24]
 8017516:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8017518:	683b      	ldr	r3, [r7, #0]
 801751a:	685b      	ldr	r3, [r3, #4]
 801751c:	f003 0303 	and.w	r3, r3, #3
 8017520:	2b03      	cmp	r3, #3
 8017522:	d017      	beq.n	8017554 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	68db      	ldr	r3, [r3, #12]
 8017528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801752a:	69fb      	ldr	r3, [r7, #28]
 801752c:	005b      	lsls	r3, r3, #1
 801752e:	2203      	movs	r2, #3
 8017530:	fa02 f303 	lsl.w	r3, r2, r3
 8017534:	43db      	mvns	r3, r3
 8017536:	69ba      	ldr	r2, [r7, #24]
 8017538:	4013      	ands	r3, r2
 801753a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801753c:	683b      	ldr	r3, [r7, #0]
 801753e:	689a      	ldr	r2, [r3, #8]
 8017540:	69fb      	ldr	r3, [r7, #28]
 8017542:	005b      	lsls	r3, r3, #1
 8017544:	fa02 f303 	lsl.w	r3, r2, r3
 8017548:	69ba      	ldr	r2, [r7, #24]
 801754a:	4313      	orrs	r3, r2
 801754c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	69ba      	ldr	r2, [r7, #24]
 8017552:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8017554:	683b      	ldr	r3, [r7, #0]
 8017556:	685b      	ldr	r3, [r3, #4]
 8017558:	f003 0303 	and.w	r3, r3, #3
 801755c:	2b02      	cmp	r3, #2
 801755e:	d123      	bne.n	80175a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8017560:	69fb      	ldr	r3, [r7, #28]
 8017562:	08da      	lsrs	r2, r3, #3
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	3208      	adds	r2, #8
 8017568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801756c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801756e:	69fb      	ldr	r3, [r7, #28]
 8017570:	f003 0307 	and.w	r3, r3, #7
 8017574:	009b      	lsls	r3, r3, #2
 8017576:	220f      	movs	r2, #15
 8017578:	fa02 f303 	lsl.w	r3, r2, r3
 801757c:	43db      	mvns	r3, r3
 801757e:	69ba      	ldr	r2, [r7, #24]
 8017580:	4013      	ands	r3, r2
 8017582:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8017584:	683b      	ldr	r3, [r7, #0]
 8017586:	691a      	ldr	r2, [r3, #16]
 8017588:	69fb      	ldr	r3, [r7, #28]
 801758a:	f003 0307 	and.w	r3, r3, #7
 801758e:	009b      	lsls	r3, r3, #2
 8017590:	fa02 f303 	lsl.w	r3, r2, r3
 8017594:	69ba      	ldr	r2, [r7, #24]
 8017596:	4313      	orrs	r3, r2
 8017598:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801759a:	69fb      	ldr	r3, [r7, #28]
 801759c:	08da      	lsrs	r2, r3, #3
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	3208      	adds	r2, #8
 80175a2:	69b9      	ldr	r1, [r7, #24]
 80175a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80175ae:	69fb      	ldr	r3, [r7, #28]
 80175b0:	005b      	lsls	r3, r3, #1
 80175b2:	2203      	movs	r2, #3
 80175b4:	fa02 f303 	lsl.w	r3, r2, r3
 80175b8:	43db      	mvns	r3, r3
 80175ba:	69ba      	ldr	r2, [r7, #24]
 80175bc:	4013      	ands	r3, r2
 80175be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80175c0:	683b      	ldr	r3, [r7, #0]
 80175c2:	685b      	ldr	r3, [r3, #4]
 80175c4:	f003 0203 	and.w	r2, r3, #3
 80175c8:	69fb      	ldr	r3, [r7, #28]
 80175ca:	005b      	lsls	r3, r3, #1
 80175cc:	fa02 f303 	lsl.w	r3, r2, r3
 80175d0:	69ba      	ldr	r2, [r7, #24]
 80175d2:	4313      	orrs	r3, r2
 80175d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	69ba      	ldr	r2, [r7, #24]
 80175da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80175dc:	683b      	ldr	r3, [r7, #0]
 80175de:	685b      	ldr	r3, [r3, #4]
 80175e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	f000 80a2 	beq.w	801772e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80175ea:	2300      	movs	r3, #0
 80175ec:	60fb      	str	r3, [r7, #12]
 80175ee:	4b57      	ldr	r3, [pc, #348]	; (801774c <HAL_GPIO_Init+0x2e8>)
 80175f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80175f2:	4a56      	ldr	r2, [pc, #344]	; (801774c <HAL_GPIO_Init+0x2e8>)
 80175f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80175f8:	6453      	str	r3, [r2, #68]	; 0x44
 80175fa:	4b54      	ldr	r3, [pc, #336]	; (801774c <HAL_GPIO_Init+0x2e8>)
 80175fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80175fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017602:	60fb      	str	r3, [r7, #12]
 8017604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8017606:	4a52      	ldr	r2, [pc, #328]	; (8017750 <HAL_GPIO_Init+0x2ec>)
 8017608:	69fb      	ldr	r3, [r7, #28]
 801760a:	089b      	lsrs	r3, r3, #2
 801760c:	3302      	adds	r3, #2
 801760e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8017614:	69fb      	ldr	r3, [r7, #28]
 8017616:	f003 0303 	and.w	r3, r3, #3
 801761a:	009b      	lsls	r3, r3, #2
 801761c:	220f      	movs	r2, #15
 801761e:	fa02 f303 	lsl.w	r3, r2, r3
 8017622:	43db      	mvns	r3, r3
 8017624:	69ba      	ldr	r2, [r7, #24]
 8017626:	4013      	ands	r3, r2
 8017628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	4a49      	ldr	r2, [pc, #292]	; (8017754 <HAL_GPIO_Init+0x2f0>)
 801762e:	4293      	cmp	r3, r2
 8017630:	d019      	beq.n	8017666 <HAL_GPIO_Init+0x202>
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	4a48      	ldr	r2, [pc, #288]	; (8017758 <HAL_GPIO_Init+0x2f4>)
 8017636:	4293      	cmp	r3, r2
 8017638:	d013      	beq.n	8017662 <HAL_GPIO_Init+0x1fe>
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	4a47      	ldr	r2, [pc, #284]	; (801775c <HAL_GPIO_Init+0x2f8>)
 801763e:	4293      	cmp	r3, r2
 8017640:	d00d      	beq.n	801765e <HAL_GPIO_Init+0x1fa>
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	4a46      	ldr	r2, [pc, #280]	; (8017760 <HAL_GPIO_Init+0x2fc>)
 8017646:	4293      	cmp	r3, r2
 8017648:	d007      	beq.n	801765a <HAL_GPIO_Init+0x1f6>
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	4a45      	ldr	r2, [pc, #276]	; (8017764 <HAL_GPIO_Init+0x300>)
 801764e:	4293      	cmp	r3, r2
 8017650:	d101      	bne.n	8017656 <HAL_GPIO_Init+0x1f2>
 8017652:	2304      	movs	r3, #4
 8017654:	e008      	b.n	8017668 <HAL_GPIO_Init+0x204>
 8017656:	2307      	movs	r3, #7
 8017658:	e006      	b.n	8017668 <HAL_GPIO_Init+0x204>
 801765a:	2303      	movs	r3, #3
 801765c:	e004      	b.n	8017668 <HAL_GPIO_Init+0x204>
 801765e:	2302      	movs	r3, #2
 8017660:	e002      	b.n	8017668 <HAL_GPIO_Init+0x204>
 8017662:	2301      	movs	r3, #1
 8017664:	e000      	b.n	8017668 <HAL_GPIO_Init+0x204>
 8017666:	2300      	movs	r3, #0
 8017668:	69fa      	ldr	r2, [r7, #28]
 801766a:	f002 0203 	and.w	r2, r2, #3
 801766e:	0092      	lsls	r2, r2, #2
 8017670:	4093      	lsls	r3, r2
 8017672:	69ba      	ldr	r2, [r7, #24]
 8017674:	4313      	orrs	r3, r2
 8017676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8017678:	4935      	ldr	r1, [pc, #212]	; (8017750 <HAL_GPIO_Init+0x2ec>)
 801767a:	69fb      	ldr	r3, [r7, #28]
 801767c:	089b      	lsrs	r3, r3, #2
 801767e:	3302      	adds	r3, #2
 8017680:	69ba      	ldr	r2, [r7, #24]
 8017682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8017686:	4b38      	ldr	r3, [pc, #224]	; (8017768 <HAL_GPIO_Init+0x304>)
 8017688:	689b      	ldr	r3, [r3, #8]
 801768a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801768c:	693b      	ldr	r3, [r7, #16]
 801768e:	43db      	mvns	r3, r3
 8017690:	69ba      	ldr	r2, [r7, #24]
 8017692:	4013      	ands	r3, r2
 8017694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8017696:	683b      	ldr	r3, [r7, #0]
 8017698:	685b      	ldr	r3, [r3, #4]
 801769a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d003      	beq.n	80176aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80176a2:	69ba      	ldr	r2, [r7, #24]
 80176a4:	693b      	ldr	r3, [r7, #16]
 80176a6:	4313      	orrs	r3, r2
 80176a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80176aa:	4a2f      	ldr	r2, [pc, #188]	; (8017768 <HAL_GPIO_Init+0x304>)
 80176ac:	69bb      	ldr	r3, [r7, #24]
 80176ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80176b0:	4b2d      	ldr	r3, [pc, #180]	; (8017768 <HAL_GPIO_Init+0x304>)
 80176b2:	68db      	ldr	r3, [r3, #12]
 80176b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80176b6:	693b      	ldr	r3, [r7, #16]
 80176b8:	43db      	mvns	r3, r3
 80176ba:	69ba      	ldr	r2, [r7, #24]
 80176bc:	4013      	ands	r3, r2
 80176be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80176c0:	683b      	ldr	r3, [r7, #0]
 80176c2:	685b      	ldr	r3, [r3, #4]
 80176c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d003      	beq.n	80176d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80176cc:	69ba      	ldr	r2, [r7, #24]
 80176ce:	693b      	ldr	r3, [r7, #16]
 80176d0:	4313      	orrs	r3, r2
 80176d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80176d4:	4a24      	ldr	r2, [pc, #144]	; (8017768 <HAL_GPIO_Init+0x304>)
 80176d6:	69bb      	ldr	r3, [r7, #24]
 80176d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80176da:	4b23      	ldr	r3, [pc, #140]	; (8017768 <HAL_GPIO_Init+0x304>)
 80176dc:	685b      	ldr	r3, [r3, #4]
 80176de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80176e0:	693b      	ldr	r3, [r7, #16]
 80176e2:	43db      	mvns	r3, r3
 80176e4:	69ba      	ldr	r2, [r7, #24]
 80176e6:	4013      	ands	r3, r2
 80176e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80176ea:	683b      	ldr	r3, [r7, #0]
 80176ec:	685b      	ldr	r3, [r3, #4]
 80176ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d003      	beq.n	80176fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80176f6:	69ba      	ldr	r2, [r7, #24]
 80176f8:	693b      	ldr	r3, [r7, #16]
 80176fa:	4313      	orrs	r3, r2
 80176fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80176fe:	4a1a      	ldr	r2, [pc, #104]	; (8017768 <HAL_GPIO_Init+0x304>)
 8017700:	69bb      	ldr	r3, [r7, #24]
 8017702:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8017704:	4b18      	ldr	r3, [pc, #96]	; (8017768 <HAL_GPIO_Init+0x304>)
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801770a:	693b      	ldr	r3, [r7, #16]
 801770c:	43db      	mvns	r3, r3
 801770e:	69ba      	ldr	r2, [r7, #24]
 8017710:	4013      	ands	r3, r2
 8017712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8017714:	683b      	ldr	r3, [r7, #0]
 8017716:	685b      	ldr	r3, [r3, #4]
 8017718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801771c:	2b00      	cmp	r3, #0
 801771e:	d003      	beq.n	8017728 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8017720:	69ba      	ldr	r2, [r7, #24]
 8017722:	693b      	ldr	r3, [r7, #16]
 8017724:	4313      	orrs	r3, r2
 8017726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8017728:	4a0f      	ldr	r2, [pc, #60]	; (8017768 <HAL_GPIO_Init+0x304>)
 801772a:	69bb      	ldr	r3, [r7, #24]
 801772c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801772e:	69fb      	ldr	r3, [r7, #28]
 8017730:	3301      	adds	r3, #1
 8017732:	61fb      	str	r3, [r7, #28]
 8017734:	69fb      	ldr	r3, [r7, #28]
 8017736:	2b0f      	cmp	r3, #15
 8017738:	f67f aea2 	bls.w	8017480 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801773c:	bf00      	nop
 801773e:	bf00      	nop
 8017740:	3724      	adds	r7, #36	; 0x24
 8017742:	46bd      	mov	sp, r7
 8017744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017748:	4770      	bx	lr
 801774a:	bf00      	nop
 801774c:	40023800 	.word	0x40023800
 8017750:	40013800 	.word	0x40013800
 8017754:	40020000 	.word	0x40020000
 8017758:	40020400 	.word	0x40020400
 801775c:	40020800 	.word	0x40020800
 8017760:	40020c00 	.word	0x40020c00
 8017764:	40021000 	.word	0x40021000
 8017768:	40013c00 	.word	0x40013c00

0801776c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801776c:	b480      	push	{r7}
 801776e:	b085      	sub	sp, #20
 8017770:	af00      	add	r7, sp, #0
 8017772:	6078      	str	r0, [r7, #4]
 8017774:	460b      	mov	r3, r1
 8017776:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	691a      	ldr	r2, [r3, #16]
 801777c:	887b      	ldrh	r3, [r7, #2]
 801777e:	4013      	ands	r3, r2
 8017780:	2b00      	cmp	r3, #0
 8017782:	d002      	beq.n	801778a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8017784:	2301      	movs	r3, #1
 8017786:	73fb      	strb	r3, [r7, #15]
 8017788:	e001      	b.n	801778e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801778a:	2300      	movs	r3, #0
 801778c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801778e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017790:	4618      	mov	r0, r3
 8017792:	3714      	adds	r7, #20
 8017794:	46bd      	mov	sp, r7
 8017796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779a:	4770      	bx	lr

0801779c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801779c:	b480      	push	{r7}
 801779e:	b083      	sub	sp, #12
 80177a0:	af00      	add	r7, sp, #0
 80177a2:	6078      	str	r0, [r7, #4]
 80177a4:	460b      	mov	r3, r1
 80177a6:	807b      	strh	r3, [r7, #2]
 80177a8:	4613      	mov	r3, r2
 80177aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80177ac:	787b      	ldrb	r3, [r7, #1]
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d003      	beq.n	80177ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80177b2:	887a      	ldrh	r2, [r7, #2]
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80177b8:	e003      	b.n	80177c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80177ba:	887b      	ldrh	r3, [r7, #2]
 80177bc:	041a      	lsls	r2, r3, #16
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	619a      	str	r2, [r3, #24]
}
 80177c2:	bf00      	nop
 80177c4:	370c      	adds	r7, #12
 80177c6:	46bd      	mov	sp, r7
 80177c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177cc:	4770      	bx	lr
	...

080177d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80177d0:	b580      	push	{r7, lr}
 80177d2:	b082      	sub	sp, #8
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	4603      	mov	r3, r0
 80177d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80177da:	4b08      	ldr	r3, [pc, #32]	; (80177fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80177dc:	695a      	ldr	r2, [r3, #20]
 80177de:	88fb      	ldrh	r3, [r7, #6]
 80177e0:	4013      	ands	r3, r2
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d006      	beq.n	80177f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80177e6:	4a05      	ldr	r2, [pc, #20]	; (80177fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80177e8:	88fb      	ldrh	r3, [r7, #6]
 80177ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80177ec:	88fb      	ldrh	r3, [r7, #6]
 80177ee:	4618      	mov	r0, r3
 80177f0:	f7ec fdac 	bl	800434c <HAL_GPIO_EXTI_Callback>
  }
}
 80177f4:	bf00      	nop
 80177f6:	3708      	adds	r7, #8
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd80      	pop	{r7, pc}
 80177fc:	40013c00 	.word	0x40013c00

08017800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b084      	sub	sp, #16
 8017804:	af00      	add	r7, sp, #0
 8017806:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d101      	bne.n	8017812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801780e:	2301      	movs	r3, #1
 8017810:	e12b      	b.n	8017a6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017818:	b2db      	uxtb	r3, r3
 801781a:	2b00      	cmp	r3, #0
 801781c:	d106      	bne.n	801782c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	2200      	movs	r2, #0
 8017822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8017826:	6878      	ldr	r0, [r7, #4]
 8017828:	f7fe fcbc 	bl	80161a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	2224      	movs	r2, #36	; 0x24
 8017830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	681a      	ldr	r2, [r3, #0]
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	f022 0201 	bic.w	r2, r2, #1
 8017842:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	681a      	ldr	r2, [r3, #0]
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8017852:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	681a      	ldr	r2, [r3, #0]
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8017862:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8017864:	f003 fa9a 	bl	801ad9c <HAL_RCC_GetPCLK1Freq>
 8017868:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	685b      	ldr	r3, [r3, #4]
 801786e:	4a81      	ldr	r2, [pc, #516]	; (8017a74 <HAL_I2C_Init+0x274>)
 8017870:	4293      	cmp	r3, r2
 8017872:	d807      	bhi.n	8017884 <HAL_I2C_Init+0x84>
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	4a80      	ldr	r2, [pc, #512]	; (8017a78 <HAL_I2C_Init+0x278>)
 8017878:	4293      	cmp	r3, r2
 801787a:	bf94      	ite	ls
 801787c:	2301      	movls	r3, #1
 801787e:	2300      	movhi	r3, #0
 8017880:	b2db      	uxtb	r3, r3
 8017882:	e006      	b.n	8017892 <HAL_I2C_Init+0x92>
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	4a7d      	ldr	r2, [pc, #500]	; (8017a7c <HAL_I2C_Init+0x27c>)
 8017888:	4293      	cmp	r3, r2
 801788a:	bf94      	ite	ls
 801788c:	2301      	movls	r3, #1
 801788e:	2300      	movhi	r3, #0
 8017890:	b2db      	uxtb	r3, r3
 8017892:	2b00      	cmp	r3, #0
 8017894:	d001      	beq.n	801789a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8017896:	2301      	movs	r3, #1
 8017898:	e0e7      	b.n	8017a6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	4a78      	ldr	r2, [pc, #480]	; (8017a80 <HAL_I2C_Init+0x280>)
 801789e:	fba2 2303 	umull	r2, r3, r2, r3
 80178a2:	0c9b      	lsrs	r3, r3, #18
 80178a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	685b      	ldr	r3, [r3, #4]
 80178ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	681b      	ldr	r3, [r3, #0]
 80178b4:	68ba      	ldr	r2, [r7, #8]
 80178b6:	430a      	orrs	r2, r1
 80178b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	6a1b      	ldr	r3, [r3, #32]
 80178c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	685b      	ldr	r3, [r3, #4]
 80178c8:	4a6a      	ldr	r2, [pc, #424]	; (8017a74 <HAL_I2C_Init+0x274>)
 80178ca:	4293      	cmp	r3, r2
 80178cc:	d802      	bhi.n	80178d4 <HAL_I2C_Init+0xd4>
 80178ce:	68bb      	ldr	r3, [r7, #8]
 80178d0:	3301      	adds	r3, #1
 80178d2:	e009      	b.n	80178e8 <HAL_I2C_Init+0xe8>
 80178d4:	68bb      	ldr	r3, [r7, #8]
 80178d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80178da:	fb02 f303 	mul.w	r3, r2, r3
 80178de:	4a69      	ldr	r2, [pc, #420]	; (8017a84 <HAL_I2C_Init+0x284>)
 80178e0:	fba2 2303 	umull	r2, r3, r2, r3
 80178e4:	099b      	lsrs	r3, r3, #6
 80178e6:	3301      	adds	r3, #1
 80178e8:	687a      	ldr	r2, [r7, #4]
 80178ea:	6812      	ldr	r2, [r2, #0]
 80178ec:	430b      	orrs	r3, r1
 80178ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	69db      	ldr	r3, [r3, #28]
 80178f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80178fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	685b      	ldr	r3, [r3, #4]
 8017902:	495c      	ldr	r1, [pc, #368]	; (8017a74 <HAL_I2C_Init+0x274>)
 8017904:	428b      	cmp	r3, r1
 8017906:	d819      	bhi.n	801793c <HAL_I2C_Init+0x13c>
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	1e59      	subs	r1, r3, #1
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	685b      	ldr	r3, [r3, #4]
 8017910:	005b      	lsls	r3, r3, #1
 8017912:	fbb1 f3f3 	udiv	r3, r1, r3
 8017916:	1c59      	adds	r1, r3, #1
 8017918:	f640 73fc 	movw	r3, #4092	; 0xffc
 801791c:	400b      	ands	r3, r1
 801791e:	2b00      	cmp	r3, #0
 8017920:	d00a      	beq.n	8017938 <HAL_I2C_Init+0x138>
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	1e59      	subs	r1, r3, #1
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	685b      	ldr	r3, [r3, #4]
 801792a:	005b      	lsls	r3, r3, #1
 801792c:	fbb1 f3f3 	udiv	r3, r1, r3
 8017930:	3301      	adds	r3, #1
 8017932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017936:	e051      	b.n	80179dc <HAL_I2C_Init+0x1dc>
 8017938:	2304      	movs	r3, #4
 801793a:	e04f      	b.n	80179dc <HAL_I2C_Init+0x1dc>
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	689b      	ldr	r3, [r3, #8]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d111      	bne.n	8017968 <HAL_I2C_Init+0x168>
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	1e58      	subs	r0, r3, #1
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	6859      	ldr	r1, [r3, #4]
 801794c:	460b      	mov	r3, r1
 801794e:	005b      	lsls	r3, r3, #1
 8017950:	440b      	add	r3, r1
 8017952:	fbb0 f3f3 	udiv	r3, r0, r3
 8017956:	3301      	adds	r3, #1
 8017958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801795c:	2b00      	cmp	r3, #0
 801795e:	bf0c      	ite	eq
 8017960:	2301      	moveq	r3, #1
 8017962:	2300      	movne	r3, #0
 8017964:	b2db      	uxtb	r3, r3
 8017966:	e012      	b.n	801798e <HAL_I2C_Init+0x18e>
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	1e58      	subs	r0, r3, #1
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	6859      	ldr	r1, [r3, #4]
 8017970:	460b      	mov	r3, r1
 8017972:	009b      	lsls	r3, r3, #2
 8017974:	440b      	add	r3, r1
 8017976:	0099      	lsls	r1, r3, #2
 8017978:	440b      	add	r3, r1
 801797a:	fbb0 f3f3 	udiv	r3, r0, r3
 801797e:	3301      	adds	r3, #1
 8017980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017984:	2b00      	cmp	r3, #0
 8017986:	bf0c      	ite	eq
 8017988:	2301      	moveq	r3, #1
 801798a:	2300      	movne	r3, #0
 801798c:	b2db      	uxtb	r3, r3
 801798e:	2b00      	cmp	r3, #0
 8017990:	d001      	beq.n	8017996 <HAL_I2C_Init+0x196>
 8017992:	2301      	movs	r3, #1
 8017994:	e022      	b.n	80179dc <HAL_I2C_Init+0x1dc>
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	689b      	ldr	r3, [r3, #8]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d10e      	bne.n	80179bc <HAL_I2C_Init+0x1bc>
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	1e58      	subs	r0, r3, #1
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	6859      	ldr	r1, [r3, #4]
 80179a6:	460b      	mov	r3, r1
 80179a8:	005b      	lsls	r3, r3, #1
 80179aa:	440b      	add	r3, r1
 80179ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80179b0:	3301      	adds	r3, #1
 80179b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80179b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80179ba:	e00f      	b.n	80179dc <HAL_I2C_Init+0x1dc>
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	1e58      	subs	r0, r3, #1
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	6859      	ldr	r1, [r3, #4]
 80179c4:	460b      	mov	r3, r1
 80179c6:	009b      	lsls	r3, r3, #2
 80179c8:	440b      	add	r3, r1
 80179ca:	0099      	lsls	r1, r3, #2
 80179cc:	440b      	add	r3, r1
 80179ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80179d2:	3301      	adds	r3, #1
 80179d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80179d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80179dc:	6879      	ldr	r1, [r7, #4]
 80179de:	6809      	ldr	r1, [r1, #0]
 80179e0:	4313      	orrs	r3, r2
 80179e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	69da      	ldr	r2, [r3, #28]
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	6a1b      	ldr	r3, [r3, #32]
 80179f6:	431a      	orrs	r2, r3
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	430a      	orrs	r2, r1
 80179fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	689b      	ldr	r3, [r3, #8]
 8017a06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8017a0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8017a0e:	687a      	ldr	r2, [r7, #4]
 8017a10:	6911      	ldr	r1, [r2, #16]
 8017a12:	687a      	ldr	r2, [r7, #4]
 8017a14:	68d2      	ldr	r2, [r2, #12]
 8017a16:	4311      	orrs	r1, r2
 8017a18:	687a      	ldr	r2, [r7, #4]
 8017a1a:	6812      	ldr	r2, [r2, #0]
 8017a1c:	430b      	orrs	r3, r1
 8017a1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	68db      	ldr	r3, [r3, #12]
 8017a26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	695a      	ldr	r2, [r3, #20]
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	699b      	ldr	r3, [r3, #24]
 8017a32:	431a      	orrs	r2, r3
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	430a      	orrs	r2, r1
 8017a3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	681a      	ldr	r2, [r3, #0]
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	f042 0201 	orr.w	r2, r2, #1
 8017a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	2200      	movs	r2, #0
 8017a50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	2220      	movs	r2, #32
 8017a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	2200      	movs	r2, #0
 8017a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8017a68:	2300      	movs	r3, #0
}
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	3710      	adds	r7, #16
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	bd80      	pop	{r7, pc}
 8017a72:	bf00      	nop
 8017a74:	000186a0 	.word	0x000186a0
 8017a78:	001e847f 	.word	0x001e847f
 8017a7c:	003d08ff 	.word	0x003d08ff
 8017a80:	431bde83 	.word	0x431bde83
 8017a84:	10624dd3 	.word	0x10624dd3

08017a88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017a88:	b580      	push	{r7, lr}
 8017a8a:	b088      	sub	sp, #32
 8017a8c:	af02      	add	r7, sp, #8
 8017a8e:	60f8      	str	r0, [r7, #12]
 8017a90:	4608      	mov	r0, r1
 8017a92:	4611      	mov	r1, r2
 8017a94:	461a      	mov	r2, r3
 8017a96:	4603      	mov	r3, r0
 8017a98:	817b      	strh	r3, [r7, #10]
 8017a9a:	460b      	mov	r3, r1
 8017a9c:	813b      	strh	r3, [r7, #8]
 8017a9e:	4613      	mov	r3, r2
 8017aa0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8017aa2:	f7fe ff8d 	bl	80169c0 <HAL_GetTick>
 8017aa6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017aae:	b2db      	uxtb	r3, r3
 8017ab0:	2b20      	cmp	r3, #32
 8017ab2:	f040 80d9 	bne.w	8017c68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017ab6:	697b      	ldr	r3, [r7, #20]
 8017ab8:	9300      	str	r3, [sp, #0]
 8017aba:	2319      	movs	r3, #25
 8017abc:	2201      	movs	r2, #1
 8017abe:	496d      	ldr	r1, [pc, #436]	; (8017c74 <HAL_I2C_Mem_Write+0x1ec>)
 8017ac0:	68f8      	ldr	r0, [r7, #12]
 8017ac2:	f002 fad1 	bl	801a068 <I2C_WaitOnFlagUntilTimeout>
 8017ac6:	4603      	mov	r3, r0
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d001      	beq.n	8017ad0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8017acc:	2302      	movs	r3, #2
 8017ace:	e0cc      	b.n	8017c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017ad6:	2b01      	cmp	r3, #1
 8017ad8:	d101      	bne.n	8017ade <HAL_I2C_Mem_Write+0x56>
 8017ada:	2302      	movs	r3, #2
 8017adc:	e0c5      	b.n	8017c6a <HAL_I2C_Mem_Write+0x1e2>
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	2201      	movs	r2, #1
 8017ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	f003 0301 	and.w	r3, r3, #1
 8017af0:	2b01      	cmp	r3, #1
 8017af2:	d007      	beq.n	8017b04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	681a      	ldr	r2, [r3, #0]
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	f042 0201 	orr.w	r2, r2, #1
 8017b02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	681a      	ldr	r2, [r3, #0]
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017b12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	2221      	movs	r2, #33	; 0x21
 8017b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	2240      	movs	r2, #64	; 0x40
 8017b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	2200      	movs	r2, #0
 8017b28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	6a3a      	ldr	r2, [r7, #32]
 8017b2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017b34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017b3a:	b29a      	uxth	r2, r3
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	4a4d      	ldr	r2, [pc, #308]	; (8017c78 <HAL_I2C_Mem_Write+0x1f0>)
 8017b44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8017b46:	88f8      	ldrh	r0, [r7, #6]
 8017b48:	893a      	ldrh	r2, [r7, #8]
 8017b4a:	8979      	ldrh	r1, [r7, #10]
 8017b4c:	697b      	ldr	r3, [r7, #20]
 8017b4e:	9301      	str	r3, [sp, #4]
 8017b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b52:	9300      	str	r3, [sp, #0]
 8017b54:	4603      	mov	r3, r0
 8017b56:	68f8      	ldr	r0, [r7, #12]
 8017b58:	f002 f860 	bl	8019c1c <I2C_RequestMemoryWrite>
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d052      	beq.n	8017c08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8017b62:	2301      	movs	r3, #1
 8017b64:	e081      	b.n	8017c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017b66:	697a      	ldr	r2, [r7, #20]
 8017b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017b6a:	68f8      	ldr	r0, [r7, #12]
 8017b6c:	f002 fb52 	bl	801a214 <I2C_WaitOnTXEFlagUntilTimeout>
 8017b70:	4603      	mov	r3, r0
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d00d      	beq.n	8017b92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b7a:	2b04      	cmp	r3, #4
 8017b7c:	d107      	bne.n	8017b8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	681a      	ldr	r2, [r3, #0]
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017b8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8017b8e:	2301      	movs	r3, #1
 8017b90:	e06b      	b.n	8017c6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b96:	781a      	ldrb	r2, [r3, #0]
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ba2:	1c5a      	adds	r2, r3, #1
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017bac:	3b01      	subs	r3, #1
 8017bae:	b29a      	uxth	r2, r3
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017bb8:	b29b      	uxth	r3, r3
 8017bba:	3b01      	subs	r3, #1
 8017bbc:	b29a      	uxth	r2, r3
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	695b      	ldr	r3, [r3, #20]
 8017bc8:	f003 0304 	and.w	r3, r3, #4
 8017bcc:	2b04      	cmp	r3, #4
 8017bce:	d11b      	bne.n	8017c08 <HAL_I2C_Mem_Write+0x180>
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d017      	beq.n	8017c08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bdc:	781a      	ldrb	r2, [r3, #0]
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017be8:	1c5a      	adds	r2, r3, #1
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017bf2:	3b01      	subs	r3, #1
 8017bf4:	b29a      	uxth	r2, r3
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017bfe:	b29b      	uxth	r3, r3
 8017c00:	3b01      	subs	r3, #1
 8017c02:	b29a      	uxth	r2, r3
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d1aa      	bne.n	8017b66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017c10:	697a      	ldr	r2, [r7, #20]
 8017c12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017c14:	68f8      	ldr	r0, [r7, #12]
 8017c16:	f002 fb3e 	bl	801a296 <I2C_WaitOnBTFFlagUntilTimeout>
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d00d      	beq.n	8017c3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c24:	2b04      	cmp	r3, #4
 8017c26:	d107      	bne.n	8017c38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	681a      	ldr	r2, [r3, #0]
 8017c2e:	68fb      	ldr	r3, [r7, #12]
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017c36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8017c38:	2301      	movs	r3, #1
 8017c3a:	e016      	b.n	8017c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	681a      	ldr	r2, [r3, #0]
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	2220      	movs	r2, #32
 8017c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	2200      	movs	r2, #0
 8017c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	2200      	movs	r2, #0
 8017c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8017c64:	2300      	movs	r3, #0
 8017c66:	e000      	b.n	8017c6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8017c68:	2302      	movs	r3, #2
  }
}
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	3718      	adds	r7, #24
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	bd80      	pop	{r7, pc}
 8017c72:	bf00      	nop
 8017c74:	00100002 	.word	0x00100002
 8017c78:	ffff0000 	.word	0xffff0000

08017c7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017c7c:	b580      	push	{r7, lr}
 8017c7e:	b08c      	sub	sp, #48	; 0x30
 8017c80:	af02      	add	r7, sp, #8
 8017c82:	60f8      	str	r0, [r7, #12]
 8017c84:	4608      	mov	r0, r1
 8017c86:	4611      	mov	r1, r2
 8017c88:	461a      	mov	r2, r3
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	817b      	strh	r3, [r7, #10]
 8017c8e:	460b      	mov	r3, r1
 8017c90:	813b      	strh	r3, [r7, #8]
 8017c92:	4613      	mov	r3, r2
 8017c94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8017c96:	f7fe fe93 	bl	80169c0 <HAL_GetTick>
 8017c9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017ca2:	b2db      	uxtb	r3, r3
 8017ca4:	2b20      	cmp	r3, #32
 8017ca6:	f040 8208 	bne.w	80180ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cac:	9300      	str	r3, [sp, #0]
 8017cae:	2319      	movs	r3, #25
 8017cb0:	2201      	movs	r2, #1
 8017cb2:	497b      	ldr	r1, [pc, #492]	; (8017ea0 <HAL_I2C_Mem_Read+0x224>)
 8017cb4:	68f8      	ldr	r0, [r7, #12]
 8017cb6:	f002 f9d7 	bl	801a068 <I2C_WaitOnFlagUntilTimeout>
 8017cba:	4603      	mov	r3, r0
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d001      	beq.n	8017cc4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8017cc0:	2302      	movs	r3, #2
 8017cc2:	e1fb      	b.n	80180bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017cca:	2b01      	cmp	r3, #1
 8017ccc:	d101      	bne.n	8017cd2 <HAL_I2C_Mem_Read+0x56>
 8017cce:	2302      	movs	r3, #2
 8017cd0:	e1f4      	b.n	80180bc <HAL_I2C_Mem_Read+0x440>
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	2201      	movs	r2, #1
 8017cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	f003 0301 	and.w	r3, r3, #1
 8017ce4:	2b01      	cmp	r3, #1
 8017ce6:	d007      	beq.n	8017cf8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	681a      	ldr	r2, [r3, #0]
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	f042 0201 	orr.w	r2, r2, #1
 8017cf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	681a      	ldr	r2, [r3, #0]
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017d06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	2222      	movs	r2, #34	; 0x22
 8017d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	2240      	movs	r2, #64	; 0x40
 8017d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	2200      	movs	r2, #0
 8017d1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8017d28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017d2e:	b29a      	uxth	r2, r3
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	4a5b      	ldr	r2, [pc, #364]	; (8017ea4 <HAL_I2C_Mem_Read+0x228>)
 8017d38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8017d3a:	88f8      	ldrh	r0, [r7, #6]
 8017d3c:	893a      	ldrh	r2, [r7, #8]
 8017d3e:	8979      	ldrh	r1, [r7, #10]
 8017d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d42:	9301      	str	r3, [sp, #4]
 8017d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d46:	9300      	str	r3, [sp, #0]
 8017d48:	4603      	mov	r3, r0
 8017d4a:	68f8      	ldr	r0, [r7, #12]
 8017d4c:	f001 fffc 	bl	8019d48 <I2C_RequestMemoryRead>
 8017d50:	4603      	mov	r3, r0
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d001      	beq.n	8017d5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8017d56:	2301      	movs	r3, #1
 8017d58:	e1b0      	b.n	80180bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d113      	bne.n	8017d8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017d62:	2300      	movs	r3, #0
 8017d64:	623b      	str	r3, [r7, #32]
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	695b      	ldr	r3, [r3, #20]
 8017d6c:	623b      	str	r3, [r7, #32]
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	699b      	ldr	r3, [r3, #24]
 8017d74:	623b      	str	r3, [r7, #32]
 8017d76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	681a      	ldr	r2, [r3, #0]
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017d86:	601a      	str	r2, [r3, #0]
 8017d88:	e184      	b.n	8018094 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017d8e:	2b01      	cmp	r3, #1
 8017d90:	d11b      	bne.n	8017dca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	681a      	ldr	r2, [r3, #0]
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017da0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017da2:	2300      	movs	r3, #0
 8017da4:	61fb      	str	r3, [r7, #28]
 8017da6:	68fb      	ldr	r3, [r7, #12]
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	695b      	ldr	r3, [r3, #20]
 8017dac:	61fb      	str	r3, [r7, #28]
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	699b      	ldr	r3, [r3, #24]
 8017db4:	61fb      	str	r3, [r7, #28]
 8017db6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	681a      	ldr	r2, [r3, #0]
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017dc6:	601a      	str	r2, [r3, #0]
 8017dc8:	e164      	b.n	8018094 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017dce:	2b02      	cmp	r3, #2
 8017dd0:	d11b      	bne.n	8017e0a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	681a      	ldr	r2, [r3, #0]
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017de0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	681a      	ldr	r2, [r3, #0]
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017df0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017df2:	2300      	movs	r3, #0
 8017df4:	61bb      	str	r3, [r7, #24]
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	695b      	ldr	r3, [r3, #20]
 8017dfc:	61bb      	str	r3, [r7, #24]
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	699b      	ldr	r3, [r3, #24]
 8017e04:	61bb      	str	r3, [r7, #24]
 8017e06:	69bb      	ldr	r3, [r7, #24]
 8017e08:	e144      	b.n	8018094 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	617b      	str	r3, [r7, #20]
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	695b      	ldr	r3, [r3, #20]
 8017e14:	617b      	str	r3, [r7, #20]
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	699b      	ldr	r3, [r3, #24]
 8017e1c:	617b      	str	r3, [r7, #20]
 8017e1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8017e20:	e138      	b.n	8018094 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e26:	2b03      	cmp	r3, #3
 8017e28:	f200 80f1 	bhi.w	801800e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e30:	2b01      	cmp	r3, #1
 8017e32:	d123      	bne.n	8017e7c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017e38:	68f8      	ldr	r0, [r7, #12]
 8017e3a:	f002 fa9f 	bl	801a37c <I2C_WaitOnRXNEFlagUntilTimeout>
 8017e3e:	4603      	mov	r3, r0
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d001      	beq.n	8017e48 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8017e44:	2301      	movs	r3, #1
 8017e46:	e139      	b.n	80180bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	691a      	ldr	r2, [r3, #16]
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e52:	b2d2      	uxtb	r2, r2
 8017e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e5a:	1c5a      	adds	r2, r3, #1
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e64:	3b01      	subs	r3, #1
 8017e66:	b29a      	uxth	r2, r3
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017e70:	b29b      	uxth	r3, r3
 8017e72:	3b01      	subs	r3, #1
 8017e74:	b29a      	uxth	r2, r3
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017e7a:	e10b      	b.n	8018094 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e80:	2b02      	cmp	r3, #2
 8017e82:	d14e      	bne.n	8017f22 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e86:	9300      	str	r3, [sp, #0]
 8017e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	4906      	ldr	r1, [pc, #24]	; (8017ea8 <HAL_I2C_Mem_Read+0x22c>)
 8017e8e:	68f8      	ldr	r0, [r7, #12]
 8017e90:	f002 f8ea 	bl	801a068 <I2C_WaitOnFlagUntilTimeout>
 8017e94:	4603      	mov	r3, r0
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d008      	beq.n	8017eac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8017e9a:	2301      	movs	r3, #1
 8017e9c:	e10e      	b.n	80180bc <HAL_I2C_Mem_Read+0x440>
 8017e9e:	bf00      	nop
 8017ea0:	00100002 	.word	0x00100002
 8017ea4:	ffff0000 	.word	0xffff0000
 8017ea8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	681a      	ldr	r2, [r3, #0]
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	691a      	ldr	r2, [r3, #16]
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ec6:	b2d2      	uxtb	r2, r2
 8017ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ece:	1c5a      	adds	r2, r3, #1
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017ed8:	3b01      	subs	r3, #1
 8017eda:	b29a      	uxth	r2, r3
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017ee4:	b29b      	uxth	r3, r3
 8017ee6:	3b01      	subs	r3, #1
 8017ee8:	b29a      	uxth	r2, r3
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	691a      	ldr	r2, [r3, #16]
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ef8:	b2d2      	uxtb	r2, r2
 8017efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f00:	1c5a      	adds	r2, r3, #1
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f0a:	3b01      	subs	r3, #1
 8017f0c:	b29a      	uxth	r2, r3
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f16:	b29b      	uxth	r3, r3
 8017f18:	3b01      	subs	r3, #1
 8017f1a:	b29a      	uxth	r2, r3
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017f20:	e0b8      	b.n	8018094 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f24:	9300      	str	r3, [sp, #0]
 8017f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f28:	2200      	movs	r2, #0
 8017f2a:	4966      	ldr	r1, [pc, #408]	; (80180c4 <HAL_I2C_Mem_Read+0x448>)
 8017f2c:	68f8      	ldr	r0, [r7, #12]
 8017f2e:	f002 f89b 	bl	801a068 <I2C_WaitOnFlagUntilTimeout>
 8017f32:	4603      	mov	r3, r0
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d001      	beq.n	8017f3c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8017f38:	2301      	movs	r3, #1
 8017f3a:	e0bf      	b.n	80180bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	681a      	ldr	r2, [r3, #0]
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017f4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	691a      	ldr	r2, [r3, #16]
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f56:	b2d2      	uxtb	r2, r2
 8017f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f5e:	1c5a      	adds	r2, r3, #1
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f68:	3b01      	subs	r3, #1
 8017f6a:	b29a      	uxth	r2, r3
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f74:	b29b      	uxth	r3, r3
 8017f76:	3b01      	subs	r3, #1
 8017f78:	b29a      	uxth	r2, r3
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f80:	9300      	str	r3, [sp, #0]
 8017f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f84:	2200      	movs	r2, #0
 8017f86:	494f      	ldr	r1, [pc, #316]	; (80180c4 <HAL_I2C_Mem_Read+0x448>)
 8017f88:	68f8      	ldr	r0, [r7, #12]
 8017f8a:	f002 f86d 	bl	801a068 <I2C_WaitOnFlagUntilTimeout>
 8017f8e:	4603      	mov	r3, r0
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d001      	beq.n	8017f98 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8017f94:	2301      	movs	r3, #1
 8017f96:	e091      	b.n	80180bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	681a      	ldr	r2, [r3, #0]
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017fa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	691a      	ldr	r2, [r3, #16]
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fb2:	b2d2      	uxtb	r2, r2
 8017fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fba:	1c5a      	adds	r2, r3, #1
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017fc4:	3b01      	subs	r3, #1
 8017fc6:	b29a      	uxth	r2, r3
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017fcc:	68fb      	ldr	r3, [r7, #12]
 8017fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017fd0:	b29b      	uxth	r3, r3
 8017fd2:	3b01      	subs	r3, #1
 8017fd4:	b29a      	uxth	r2, r3
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	691a      	ldr	r2, [r3, #16]
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fe4:	b2d2      	uxtb	r2, r2
 8017fe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fec:	1c5a      	adds	r2, r3, #1
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017ff6:	3b01      	subs	r3, #1
 8017ff8:	b29a      	uxth	r2, r3
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018002:	b29b      	uxth	r3, r3
 8018004:	3b01      	subs	r3, #1
 8018006:	b29a      	uxth	r2, r3
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801800c:	e042      	b.n	8018094 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801800e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018010:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018012:	68f8      	ldr	r0, [r7, #12]
 8018014:	f002 f9b2 	bl	801a37c <I2C_WaitOnRXNEFlagUntilTimeout>
 8018018:	4603      	mov	r3, r0
 801801a:	2b00      	cmp	r3, #0
 801801c:	d001      	beq.n	8018022 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 801801e:	2301      	movs	r3, #1
 8018020:	e04c      	b.n	80180bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	691a      	ldr	r2, [r3, #16]
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801802c:	b2d2      	uxtb	r2, r2
 801802e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8018030:	68fb      	ldr	r3, [r7, #12]
 8018032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018034:	1c5a      	adds	r2, r3, #1
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801803e:	3b01      	subs	r3, #1
 8018040:	b29a      	uxth	r2, r3
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801804a:	b29b      	uxth	r3, r3
 801804c:	3b01      	subs	r3, #1
 801804e:	b29a      	uxth	r2, r3
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	695b      	ldr	r3, [r3, #20]
 801805a:	f003 0304 	and.w	r3, r3, #4
 801805e:	2b04      	cmp	r3, #4
 8018060:	d118      	bne.n	8018094 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018062:	68fb      	ldr	r3, [r7, #12]
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	691a      	ldr	r2, [r3, #16]
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801806c:	b2d2      	uxtb	r2, r2
 801806e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018074:	1c5a      	adds	r2, r3, #1
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801807e:	3b01      	subs	r3, #1
 8018080:	b29a      	uxth	r2, r3
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8018086:	68fb      	ldr	r3, [r7, #12]
 8018088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801808a:	b29b      	uxth	r3, r3
 801808c:	3b01      	subs	r3, #1
 801808e:	b29a      	uxth	r2, r3
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018098:	2b00      	cmp	r3, #0
 801809a:	f47f aec2 	bne.w	8017e22 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	2220      	movs	r2, #32
 80180a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	2200      	movs	r2, #0
 80180aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	2200      	movs	r2, #0
 80180b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80180b6:	2300      	movs	r3, #0
 80180b8:	e000      	b.n	80180bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80180ba:	2302      	movs	r3, #2
  }
}
 80180bc:	4618      	mov	r0, r3
 80180be:	3728      	adds	r7, #40	; 0x28
 80180c0:	46bd      	mov	sp, r7
 80180c2:	bd80      	pop	{r7, pc}
 80180c4:	00010004 	.word	0x00010004

080180c8 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80180c8:	b480      	push	{r7}
 80180ca:	b087      	sub	sp, #28
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	60f8      	str	r0, [r7, #12]
 80180d0:	607a      	str	r2, [r7, #4]
 80180d2:	461a      	mov	r2, r3
 80180d4:	460b      	mov	r3, r1
 80180d6:	817b      	strh	r3, [r7, #10]
 80180d8:	4613      	mov	r3, r2
 80180da:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80180dc:	2300      	movs	r3, #0
 80180de:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 80180e0:	2300      	movs	r3, #0
 80180e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80180ea:	b2db      	uxtb	r3, r3
 80180ec:	2b20      	cmp	r3, #32
 80180ee:	f040 80a6 	bne.w	801823e <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80180fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018100:	d005      	beq.n	801810e <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8018102:	6a3b      	ldr	r3, [r7, #32]
 8018104:	2b08      	cmp	r3, #8
 8018106:	d002      	beq.n	801810e <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8018108:	6a3b      	ldr	r3, [r7, #32]
 801810a:	2b01      	cmp	r3, #1
 801810c:	d130      	bne.n	8018170 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801810e:	4b4f      	ldr	r3, [pc, #316]	; (801824c <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	08db      	lsrs	r3, r3, #3
 8018114:	4a4e      	ldr	r2, [pc, #312]	; (8018250 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8018116:	fba2 2303 	umull	r2, r3, r2, r3
 801811a:	0a1a      	lsrs	r2, r3, #8
 801811c:	4613      	mov	r3, r2
 801811e:	009b      	lsls	r3, r3, #2
 8018120:	4413      	add	r3, r2
 8018122:	009a      	lsls	r2, r3, #2
 8018124:	4413      	add	r3, r2
 8018126:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8018128:	693b      	ldr	r3, [r7, #16]
 801812a:	3b01      	subs	r3, #1
 801812c:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 801812e:	693b      	ldr	r3, [r7, #16]
 8018130:	2b00      	cmp	r3, #0
 8018132:	d116      	bne.n	8018162 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	2200      	movs	r2, #0
 8018138:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	2220      	movs	r2, #32
 801813e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	2200      	movs	r2, #0
 8018146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801814e:	f043 0220 	orr.w	r2, r3, #32
 8018152:	68fb      	ldr	r3, [r7, #12]
 8018154:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018156:	68fb      	ldr	r3, [r7, #12]
 8018158:	2200      	movs	r2, #0
 801815a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 801815e:	2301      	movs	r3, #1
 8018160:	e06e      	b.n	8018240 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	699b      	ldr	r3, [r3, #24]
 8018168:	f003 0302 	and.w	r3, r3, #2
 801816c:	2b02      	cmp	r3, #2
 801816e:	d0db      	beq.n	8018128 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018176:	2b01      	cmp	r3, #1
 8018178:	d101      	bne.n	801817e <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 801817a:	2302      	movs	r3, #2
 801817c:	e060      	b.n	8018240 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	2201      	movs	r2, #1
 8018182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	f003 0301 	and.w	r3, r3, #1
 8018190:	2b01      	cmp	r3, #1
 8018192:	d007      	beq.n	80181a4 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	681a      	ldr	r2, [r3, #0]
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	f042 0201 	orr.w	r2, r2, #1
 80181a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	681a      	ldr	r2, [r3, #0]
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80181b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	2221      	movs	r2, #33	; 0x21
 80181b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	2210      	movs	r2, #16
 80181c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	2200      	movs	r2, #0
 80181c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80181ca:	68fb      	ldr	r3, [r7, #12]
 80181cc:	687a      	ldr	r2, [r7, #4]
 80181ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	893a      	ldrh	r2, [r7, #8]
 80181d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80181da:	b29a      	uxth	r2, r3
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	6a3a      	ldr	r2, [r7, #32]
 80181e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80181e6:	897a      	ldrh	r2, [r7, #10]
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181f0:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80181f2:	697b      	ldr	r3, [r7, #20]
 80181f4:	2b11      	cmp	r3, #17
 80181f6:	d10c      	bne.n	8018212 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 80181f8:	6a3b      	ldr	r3, [r7, #32]
 80181fa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80181fe:	d003      	beq.n	8018208 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8018200:	6a3b      	ldr	r3, [r7, #32]
 8018202:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8018206:	d101      	bne.n	801820c <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8018208:	2301      	movs	r3, #1
 801820a:	e000      	b.n	801820e <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 801820c:	2300      	movs	r3, #0
 801820e:	2b01      	cmp	r3, #1
 8018210:	d107      	bne.n	8018222 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	681a      	ldr	r2, [r3, #0]
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018220:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	2200      	movs	r2, #0
 8018226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	685a      	ldr	r2, [r3, #4]
 8018230:	68fb      	ldr	r3, [r7, #12]
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8018238:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 801823a:	2300      	movs	r3, #0
 801823c:	e000      	b.n	8018240 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 801823e:	2302      	movs	r3, #2
  }
}
 8018240:	4618      	mov	r0, r3
 8018242:	371c      	adds	r7, #28
 8018244:	46bd      	mov	sp, r7
 8018246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801824a:	4770      	bx	lr
 801824c:	20000230 	.word	0x20000230
 8018250:	14f8b589 	.word	0x14f8b589

08018254 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8018254:	b480      	push	{r7}
 8018256:	b089      	sub	sp, #36	; 0x24
 8018258:	af00      	add	r7, sp, #0
 801825a:	60f8      	str	r0, [r7, #12]
 801825c:	607a      	str	r2, [r7, #4]
 801825e:	461a      	mov	r2, r3
 8018260:	460b      	mov	r3, r1
 8018262:	817b      	strh	r3, [r7, #10]
 8018264:	4613      	mov	r3, r2
 8018266:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8018268:	2300      	movs	r3, #0
 801826a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 801826c:	2300      	movs	r3, #0
 801826e:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018270:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8018274:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018276:	68fb      	ldr	r3, [r7, #12]
 8018278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801827c:	b2db      	uxtb	r3, r3
 801827e:	2b20      	cmp	r3, #32
 8018280:	f040 80da 	bne.w	8018438 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8018284:	68fb      	ldr	r3, [r7, #12]
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801828e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018292:	d005      	beq.n	80182a0 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8018294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018296:	2b08      	cmp	r3, #8
 8018298:	d002      	beq.n	80182a0 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 801829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801829c:	2b01      	cmp	r3, #1
 801829e:	d130      	bne.n	8018302 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80182a0:	4b69      	ldr	r3, [pc, #420]	; (8018448 <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	08db      	lsrs	r3, r3, #3
 80182a6:	4a69      	ldr	r2, [pc, #420]	; (801844c <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 80182a8:	fba2 2303 	umull	r2, r3, r2, r3
 80182ac:	0a1a      	lsrs	r2, r3, #8
 80182ae:	4613      	mov	r3, r2
 80182b0:	009b      	lsls	r3, r3, #2
 80182b2:	4413      	add	r3, r2
 80182b4:	009a      	lsls	r2, r3, #2
 80182b6:	4413      	add	r3, r2
 80182b8:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 80182ba:	697b      	ldr	r3, [r7, #20]
 80182bc:	3b01      	subs	r3, #1
 80182be:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 80182c0:	697b      	ldr	r3, [r7, #20]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d116      	bne.n	80182f4 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80182c6:	68fb      	ldr	r3, [r7, #12]
 80182c8:	2200      	movs	r2, #0
 80182ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	2220      	movs	r2, #32
 80182d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	2200      	movs	r2, #0
 80182d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80182dc:	68fb      	ldr	r3, [r7, #12]
 80182de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182e0:	f043 0220 	orr.w	r2, r3, #32
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	2200      	movs	r2, #0
 80182ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80182f0:	2301      	movs	r3, #1
 80182f2:	e0a2      	b.n	801843a <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	699b      	ldr	r3, [r3, #24]
 80182fa:	f003 0302 	and.w	r3, r3, #2
 80182fe:	2b02      	cmp	r3, #2
 8018300:	d0db      	beq.n	80182ba <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018308:	2b01      	cmp	r3, #1
 801830a:	d101      	bne.n	8018310 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 801830c:	2302      	movs	r3, #2
 801830e:	e094      	b.n	801843a <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	2201      	movs	r2, #1
 8018314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	f003 0301 	and.w	r3, r3, #1
 8018322:	2b01      	cmp	r3, #1
 8018324:	d007      	beq.n	8018336 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	681a      	ldr	r2, [r3, #0]
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	f042 0201 	orr.w	r2, r2, #1
 8018334:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	681a      	ldr	r2, [r3, #0]
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018344:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	2222      	movs	r2, #34	; 0x22
 801834a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801834e:	68fb      	ldr	r3, [r7, #12]
 8018350:	2210      	movs	r2, #16
 8018352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	2200      	movs	r2, #0
 801835a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	687a      	ldr	r2, [r7, #4]
 8018360:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	893a      	ldrh	r2, [r7, #8]
 8018366:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801836c:	b29a      	uxth	r2, r3
 801836e:	68fb      	ldr	r3, [r7, #12]
 8018370:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018376:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8018378:	897a      	ldrh	r2, [r7, #10]
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 801837e:	68fb      	ldr	r3, [r7, #12]
 8018380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018382:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018388:	b29b      	uxth	r3, r3
 801838a:	2b02      	cmp	r3, #2
 801838c:	d126      	bne.n	80183dc <HAL_I2C_Master_Seq_Receive_IT+0x188>
 801838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018390:	2b20      	cmp	r3, #32
 8018392:	d002      	beq.n	801839a <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8018394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018396:	2b10      	cmp	r3, #16
 8018398:	d120      	bne.n	80183dc <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 801839a:	69bb      	ldr	r3, [r7, #24]
 801839c:	2b12      	cmp	r3, #18
 801839e:	d114      	bne.n	80183ca <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	681a      	ldr	r2, [r3, #0]
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80183ae:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	681a      	ldr	r2, [r3, #0]
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80183be:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 80183c0:	69fb      	ldr	r3, [r7, #28]
 80183c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80183c6:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 80183c8:	e010      	b.n	80183ec <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	681a      	ldr	r2, [r3, #0]
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80183d8:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 80183da:	e007      	b.n	80183ec <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	681a      	ldr	r2, [r3, #0]
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80183ea:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80183ec:	69bb      	ldr	r3, [r7, #24]
 80183ee:	2b12      	cmp	r3, #18
 80183f0:	d10c      	bne.n	801840c <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 80183f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183f4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80183f8:	d003      	beq.n	8018402 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 80183fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8018400:	d101      	bne.n	8018406 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 8018402:	2301      	movs	r3, #1
 8018404:	e000      	b.n	8018408 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 8018406:	2300      	movs	r3, #0
 8018408:	2b01      	cmp	r3, #1
 801840a:	d107      	bne.n	801841c <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	681a      	ldr	r2, [r3, #0]
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801841a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	2200      	movs	r2, #0
 8018420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8018424:	68fb      	ldr	r3, [r7, #12]
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	6859      	ldr	r1, [r3, #4]
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	69fa      	ldr	r2, [r7, #28]
 8018430:	430a      	orrs	r2, r1
 8018432:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8018434:	2300      	movs	r3, #0
 8018436:	e000      	b.n	801843a <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8018438:	2302      	movs	r3, #2
  }
}
 801843a:	4618      	mov	r0, r3
 801843c:	3724      	adds	r7, #36	; 0x24
 801843e:	46bd      	mov	sp, r7
 8018440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018444:	4770      	bx	lr
 8018446:	bf00      	nop
 8018448:	20000230 	.word	0x20000230
 801844c:	14f8b589 	.word	0x14f8b589

08018450 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8018450:	b580      	push	{r7, lr}
 8018452:	b088      	sub	sp, #32
 8018454:	af00      	add	r7, sp, #0
 8018456:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8018458:	2300      	movs	r3, #0
 801845a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	685b      	ldr	r3, [r3, #4]
 8018462:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018468:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018470:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018478:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801847a:	7bfb      	ldrb	r3, [r7, #15]
 801847c:	2b10      	cmp	r3, #16
 801847e:	d003      	beq.n	8018488 <HAL_I2C_EV_IRQHandler+0x38>
 8018480:	7bfb      	ldrb	r3, [r7, #15]
 8018482:	2b40      	cmp	r3, #64	; 0x40
 8018484:	f040 80c1 	bne.w	801860a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	699b      	ldr	r3, [r3, #24]
 801848e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	695b      	ldr	r3, [r3, #20]
 8018496:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8018498:	69fb      	ldr	r3, [r7, #28]
 801849a:	f003 0301 	and.w	r3, r3, #1
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d10d      	bne.n	80184be <HAL_I2C_EV_IRQHandler+0x6e>
 80184a2:	693b      	ldr	r3, [r7, #16]
 80184a4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80184a8:	d003      	beq.n	80184b2 <HAL_I2C_EV_IRQHandler+0x62>
 80184aa:	693b      	ldr	r3, [r7, #16]
 80184ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80184b0:	d101      	bne.n	80184b6 <HAL_I2C_EV_IRQHandler+0x66>
 80184b2:	2301      	movs	r3, #1
 80184b4:	e000      	b.n	80184b8 <HAL_I2C_EV_IRQHandler+0x68>
 80184b6:	2300      	movs	r3, #0
 80184b8:	2b01      	cmp	r3, #1
 80184ba:	f000 8132 	beq.w	8018722 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80184be:	69fb      	ldr	r3, [r7, #28]
 80184c0:	f003 0301 	and.w	r3, r3, #1
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d00c      	beq.n	80184e2 <HAL_I2C_EV_IRQHandler+0x92>
 80184c8:	697b      	ldr	r3, [r7, #20]
 80184ca:	0a5b      	lsrs	r3, r3, #9
 80184cc:	f003 0301 	and.w	r3, r3, #1
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d006      	beq.n	80184e2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80184d4:	6878      	ldr	r0, [r7, #4]
 80184d6:	f001 ffd6 	bl	801a486 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80184da:	6878      	ldr	r0, [r7, #4]
 80184dc:	f000 fd83 	bl	8018fe6 <I2C_Master_SB>
 80184e0:	e092      	b.n	8018608 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80184e2:	69fb      	ldr	r3, [r7, #28]
 80184e4:	08db      	lsrs	r3, r3, #3
 80184e6:	f003 0301 	and.w	r3, r3, #1
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d009      	beq.n	8018502 <HAL_I2C_EV_IRQHandler+0xb2>
 80184ee:	697b      	ldr	r3, [r7, #20]
 80184f0:	0a5b      	lsrs	r3, r3, #9
 80184f2:	f003 0301 	and.w	r3, r3, #1
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d003      	beq.n	8018502 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80184fa:	6878      	ldr	r0, [r7, #4]
 80184fc:	f000 fdf9 	bl	80190f2 <I2C_Master_ADD10>
 8018500:	e082      	b.n	8018608 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018502:	69fb      	ldr	r3, [r7, #28]
 8018504:	085b      	lsrs	r3, r3, #1
 8018506:	f003 0301 	and.w	r3, r3, #1
 801850a:	2b00      	cmp	r3, #0
 801850c:	d009      	beq.n	8018522 <HAL_I2C_EV_IRQHandler+0xd2>
 801850e:	697b      	ldr	r3, [r7, #20]
 8018510:	0a5b      	lsrs	r3, r3, #9
 8018512:	f003 0301 	and.w	r3, r3, #1
 8018516:	2b00      	cmp	r3, #0
 8018518:	d003      	beq.n	8018522 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801851a:	6878      	ldr	r0, [r7, #4]
 801851c:	f000 fe13 	bl	8019146 <I2C_Master_ADDR>
 8018520:	e072      	b.n	8018608 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8018522:	69bb      	ldr	r3, [r7, #24]
 8018524:	089b      	lsrs	r3, r3, #2
 8018526:	f003 0301 	and.w	r3, r3, #1
 801852a:	2b00      	cmp	r3, #0
 801852c:	d03b      	beq.n	80185a6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	685b      	ldr	r3, [r3, #4]
 8018534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801853c:	f000 80f3 	beq.w	8018726 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018540:	69fb      	ldr	r3, [r7, #28]
 8018542:	09db      	lsrs	r3, r3, #7
 8018544:	f003 0301 	and.w	r3, r3, #1
 8018548:	2b00      	cmp	r3, #0
 801854a:	d00f      	beq.n	801856c <HAL_I2C_EV_IRQHandler+0x11c>
 801854c:	697b      	ldr	r3, [r7, #20]
 801854e:	0a9b      	lsrs	r3, r3, #10
 8018550:	f003 0301 	and.w	r3, r3, #1
 8018554:	2b00      	cmp	r3, #0
 8018556:	d009      	beq.n	801856c <HAL_I2C_EV_IRQHandler+0x11c>
 8018558:	69fb      	ldr	r3, [r7, #28]
 801855a:	089b      	lsrs	r3, r3, #2
 801855c:	f003 0301 	and.w	r3, r3, #1
 8018560:	2b00      	cmp	r3, #0
 8018562:	d103      	bne.n	801856c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8018564:	6878      	ldr	r0, [r7, #4]
 8018566:	f000 f9f3 	bl	8018950 <I2C_MasterTransmit_TXE>
 801856a:	e04d      	b.n	8018608 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801856c:	69fb      	ldr	r3, [r7, #28]
 801856e:	089b      	lsrs	r3, r3, #2
 8018570:	f003 0301 	and.w	r3, r3, #1
 8018574:	2b00      	cmp	r3, #0
 8018576:	f000 80d6 	beq.w	8018726 <HAL_I2C_EV_IRQHandler+0x2d6>
 801857a:	697b      	ldr	r3, [r7, #20]
 801857c:	0a5b      	lsrs	r3, r3, #9
 801857e:	f003 0301 	and.w	r3, r3, #1
 8018582:	2b00      	cmp	r3, #0
 8018584:	f000 80cf 	beq.w	8018726 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8018588:	7bbb      	ldrb	r3, [r7, #14]
 801858a:	2b21      	cmp	r3, #33	; 0x21
 801858c:	d103      	bne.n	8018596 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 801858e:	6878      	ldr	r0, [r7, #4]
 8018590:	f000 fa7a 	bl	8018a88 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018594:	e0c7      	b.n	8018726 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8018596:	7bfb      	ldrb	r3, [r7, #15]
 8018598:	2b40      	cmp	r3, #64	; 0x40
 801859a:	f040 80c4 	bne.w	8018726 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 801859e:	6878      	ldr	r0, [r7, #4]
 80185a0:	f000 fae8 	bl	8018b74 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80185a4:	e0bf      	b.n	8018726 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	685b      	ldr	r3, [r3, #4]
 80185ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80185b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80185b4:	f000 80b7 	beq.w	8018726 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80185b8:	69fb      	ldr	r3, [r7, #28]
 80185ba:	099b      	lsrs	r3, r3, #6
 80185bc:	f003 0301 	and.w	r3, r3, #1
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d00f      	beq.n	80185e4 <HAL_I2C_EV_IRQHandler+0x194>
 80185c4:	697b      	ldr	r3, [r7, #20]
 80185c6:	0a9b      	lsrs	r3, r3, #10
 80185c8:	f003 0301 	and.w	r3, r3, #1
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d009      	beq.n	80185e4 <HAL_I2C_EV_IRQHandler+0x194>
 80185d0:	69fb      	ldr	r3, [r7, #28]
 80185d2:	089b      	lsrs	r3, r3, #2
 80185d4:	f003 0301 	and.w	r3, r3, #1
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d103      	bne.n	80185e4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80185dc:	6878      	ldr	r0, [r7, #4]
 80185de:	f000 fb5d 	bl	8018c9c <I2C_MasterReceive_RXNE>
 80185e2:	e011      	b.n	8018608 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80185e4:	69fb      	ldr	r3, [r7, #28]
 80185e6:	089b      	lsrs	r3, r3, #2
 80185e8:	f003 0301 	and.w	r3, r3, #1
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	f000 809a 	beq.w	8018726 <HAL_I2C_EV_IRQHandler+0x2d6>
 80185f2:	697b      	ldr	r3, [r7, #20]
 80185f4:	0a5b      	lsrs	r3, r3, #9
 80185f6:	f003 0301 	and.w	r3, r3, #1
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	f000 8093 	beq.w	8018726 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8018600:	6878      	ldr	r0, [r7, #4]
 8018602:	f000 fc06 	bl	8018e12 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018606:	e08e      	b.n	8018726 <HAL_I2C_EV_IRQHandler+0x2d6>
 8018608:	e08d      	b.n	8018726 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801860e:	2b00      	cmp	r3, #0
 8018610:	d004      	beq.n	801861c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	695b      	ldr	r3, [r3, #20]
 8018618:	61fb      	str	r3, [r7, #28]
 801861a:	e007      	b.n	801862c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	699b      	ldr	r3, [r3, #24]
 8018622:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	695b      	ldr	r3, [r3, #20]
 801862a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801862c:	69fb      	ldr	r3, [r7, #28]
 801862e:	085b      	lsrs	r3, r3, #1
 8018630:	f003 0301 	and.w	r3, r3, #1
 8018634:	2b00      	cmp	r3, #0
 8018636:	d012      	beq.n	801865e <HAL_I2C_EV_IRQHandler+0x20e>
 8018638:	697b      	ldr	r3, [r7, #20]
 801863a:	0a5b      	lsrs	r3, r3, #9
 801863c:	f003 0301 	and.w	r3, r3, #1
 8018640:	2b00      	cmp	r3, #0
 8018642:	d00c      	beq.n	801865e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018648:	2b00      	cmp	r3, #0
 801864a:	d003      	beq.n	8018654 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	699b      	ldr	r3, [r3, #24]
 8018652:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8018654:	69b9      	ldr	r1, [r7, #24]
 8018656:	6878      	ldr	r0, [r7, #4]
 8018658:	f000 ffc4 	bl	80195e4 <I2C_Slave_ADDR>
 801865c:	e066      	b.n	801872c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801865e:	69fb      	ldr	r3, [r7, #28]
 8018660:	091b      	lsrs	r3, r3, #4
 8018662:	f003 0301 	and.w	r3, r3, #1
 8018666:	2b00      	cmp	r3, #0
 8018668:	d009      	beq.n	801867e <HAL_I2C_EV_IRQHandler+0x22e>
 801866a:	697b      	ldr	r3, [r7, #20]
 801866c:	0a5b      	lsrs	r3, r3, #9
 801866e:	f003 0301 	and.w	r3, r3, #1
 8018672:	2b00      	cmp	r3, #0
 8018674:	d003      	beq.n	801867e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8018676:	6878      	ldr	r0, [r7, #4]
 8018678:	f000 fffe 	bl	8019678 <I2C_Slave_STOPF>
 801867c:	e056      	b.n	801872c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801867e:	7bbb      	ldrb	r3, [r7, #14]
 8018680:	2b21      	cmp	r3, #33	; 0x21
 8018682:	d002      	beq.n	801868a <HAL_I2C_EV_IRQHandler+0x23a>
 8018684:	7bbb      	ldrb	r3, [r7, #14]
 8018686:	2b29      	cmp	r3, #41	; 0x29
 8018688:	d125      	bne.n	80186d6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801868a:	69fb      	ldr	r3, [r7, #28]
 801868c:	09db      	lsrs	r3, r3, #7
 801868e:	f003 0301 	and.w	r3, r3, #1
 8018692:	2b00      	cmp	r3, #0
 8018694:	d00f      	beq.n	80186b6 <HAL_I2C_EV_IRQHandler+0x266>
 8018696:	697b      	ldr	r3, [r7, #20]
 8018698:	0a9b      	lsrs	r3, r3, #10
 801869a:	f003 0301 	and.w	r3, r3, #1
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d009      	beq.n	80186b6 <HAL_I2C_EV_IRQHandler+0x266>
 80186a2:	69fb      	ldr	r3, [r7, #28]
 80186a4:	089b      	lsrs	r3, r3, #2
 80186a6:	f003 0301 	and.w	r3, r3, #1
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d103      	bne.n	80186b6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80186ae:	6878      	ldr	r0, [r7, #4]
 80186b0:	f000 feda 	bl	8019468 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80186b4:	e039      	b.n	801872a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80186b6:	69fb      	ldr	r3, [r7, #28]
 80186b8:	089b      	lsrs	r3, r3, #2
 80186ba:	f003 0301 	and.w	r3, r3, #1
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d033      	beq.n	801872a <HAL_I2C_EV_IRQHandler+0x2da>
 80186c2:	697b      	ldr	r3, [r7, #20]
 80186c4:	0a5b      	lsrs	r3, r3, #9
 80186c6:	f003 0301 	and.w	r3, r3, #1
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d02d      	beq.n	801872a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80186ce:	6878      	ldr	r0, [r7, #4]
 80186d0:	f000 ff07 	bl	80194e2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80186d4:	e029      	b.n	801872a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80186d6:	69fb      	ldr	r3, [r7, #28]
 80186d8:	099b      	lsrs	r3, r3, #6
 80186da:	f003 0301 	and.w	r3, r3, #1
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d00f      	beq.n	8018702 <HAL_I2C_EV_IRQHandler+0x2b2>
 80186e2:	697b      	ldr	r3, [r7, #20]
 80186e4:	0a9b      	lsrs	r3, r3, #10
 80186e6:	f003 0301 	and.w	r3, r3, #1
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d009      	beq.n	8018702 <HAL_I2C_EV_IRQHandler+0x2b2>
 80186ee:	69fb      	ldr	r3, [r7, #28]
 80186f0:	089b      	lsrs	r3, r3, #2
 80186f2:	f003 0301 	and.w	r3, r3, #1
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d103      	bne.n	8018702 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80186fa:	6878      	ldr	r0, [r7, #4]
 80186fc:	f000 ff12 	bl	8019524 <I2C_SlaveReceive_RXNE>
 8018700:	e014      	b.n	801872c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018702:	69fb      	ldr	r3, [r7, #28]
 8018704:	089b      	lsrs	r3, r3, #2
 8018706:	f003 0301 	and.w	r3, r3, #1
 801870a:	2b00      	cmp	r3, #0
 801870c:	d00e      	beq.n	801872c <HAL_I2C_EV_IRQHandler+0x2dc>
 801870e:	697b      	ldr	r3, [r7, #20]
 8018710:	0a5b      	lsrs	r3, r3, #9
 8018712:	f003 0301 	and.w	r3, r3, #1
 8018716:	2b00      	cmp	r3, #0
 8018718:	d008      	beq.n	801872c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 801871a:	6878      	ldr	r0, [r7, #4]
 801871c:	f000 ff40 	bl	80195a0 <I2C_SlaveReceive_BTF>
 8018720:	e004      	b.n	801872c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8018722:	bf00      	nop
 8018724:	e002      	b.n	801872c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018726:	bf00      	nop
 8018728:	e000      	b.n	801872c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801872a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 801872c:	3720      	adds	r7, #32
 801872e:	46bd      	mov	sp, r7
 8018730:	bd80      	pop	{r7, pc}

08018732 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8018732:	b580      	push	{r7, lr}
 8018734:	b08a      	sub	sp, #40	; 0x28
 8018736:	af00      	add	r7, sp, #0
 8018738:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	695b      	ldr	r3, [r3, #20]
 8018740:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	685b      	ldr	r3, [r3, #4]
 8018748:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 801874a:	2300      	movs	r3, #0
 801874c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018754:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8018756:	6a3b      	ldr	r3, [r7, #32]
 8018758:	0a1b      	lsrs	r3, r3, #8
 801875a:	f003 0301 	and.w	r3, r3, #1
 801875e:	2b00      	cmp	r3, #0
 8018760:	d00e      	beq.n	8018780 <HAL_I2C_ER_IRQHandler+0x4e>
 8018762:	69fb      	ldr	r3, [r7, #28]
 8018764:	0a1b      	lsrs	r3, r3, #8
 8018766:	f003 0301 	and.w	r3, r3, #1
 801876a:	2b00      	cmp	r3, #0
 801876c:	d008      	beq.n	8018780 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 801876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018770:	f043 0301 	orr.w	r3, r3, #1
 8018774:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801877e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8018780:	6a3b      	ldr	r3, [r7, #32]
 8018782:	0a5b      	lsrs	r3, r3, #9
 8018784:	f003 0301 	and.w	r3, r3, #1
 8018788:	2b00      	cmp	r3, #0
 801878a:	d00e      	beq.n	80187aa <HAL_I2C_ER_IRQHandler+0x78>
 801878c:	69fb      	ldr	r3, [r7, #28]
 801878e:	0a1b      	lsrs	r3, r3, #8
 8018790:	f003 0301 	and.w	r3, r3, #1
 8018794:	2b00      	cmp	r3, #0
 8018796:	d008      	beq.n	80187aa <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8018798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801879a:	f043 0302 	orr.w	r3, r3, #2
 801879e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80187a8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80187aa:	6a3b      	ldr	r3, [r7, #32]
 80187ac:	0a9b      	lsrs	r3, r3, #10
 80187ae:	f003 0301 	and.w	r3, r3, #1
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d03f      	beq.n	8018836 <HAL_I2C_ER_IRQHandler+0x104>
 80187b6:	69fb      	ldr	r3, [r7, #28]
 80187b8:	0a1b      	lsrs	r3, r3, #8
 80187ba:	f003 0301 	and.w	r3, r3, #1
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d039      	beq.n	8018836 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80187c2:	7efb      	ldrb	r3, [r7, #27]
 80187c4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187ca:	b29b      	uxth	r3, r3
 80187cc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80187d4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80187da:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80187dc:	7ebb      	ldrb	r3, [r7, #26]
 80187de:	2b20      	cmp	r3, #32
 80187e0:	d112      	bne.n	8018808 <HAL_I2C_ER_IRQHandler+0xd6>
 80187e2:	697b      	ldr	r3, [r7, #20]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d10f      	bne.n	8018808 <HAL_I2C_ER_IRQHandler+0xd6>
 80187e8:	7cfb      	ldrb	r3, [r7, #19]
 80187ea:	2b21      	cmp	r3, #33	; 0x21
 80187ec:	d008      	beq.n	8018800 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80187ee:	7cfb      	ldrb	r3, [r7, #19]
 80187f0:	2b29      	cmp	r3, #41	; 0x29
 80187f2:	d005      	beq.n	8018800 <HAL_I2C_ER_IRQHandler+0xce>
 80187f4:	7cfb      	ldrb	r3, [r7, #19]
 80187f6:	2b28      	cmp	r3, #40	; 0x28
 80187f8:	d106      	bne.n	8018808 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80187fa:	68fb      	ldr	r3, [r7, #12]
 80187fc:	2b21      	cmp	r3, #33	; 0x21
 80187fe:	d103      	bne.n	8018808 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8018800:	6878      	ldr	r0, [r7, #4]
 8018802:	f001 f869 	bl	80198d8 <I2C_Slave_AF>
 8018806:	e016      	b.n	8018836 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8018810:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8018812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018814:	f043 0304 	orr.w	r3, r3, #4
 8018818:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801881a:	7efb      	ldrb	r3, [r7, #27]
 801881c:	2b10      	cmp	r3, #16
 801881e:	d002      	beq.n	8018826 <HAL_I2C_ER_IRQHandler+0xf4>
 8018820:	7efb      	ldrb	r3, [r7, #27]
 8018822:	2b40      	cmp	r3, #64	; 0x40
 8018824:	d107      	bne.n	8018836 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	681a      	ldr	r2, [r3, #0]
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018834:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8018836:	6a3b      	ldr	r3, [r7, #32]
 8018838:	0adb      	lsrs	r3, r3, #11
 801883a:	f003 0301 	and.w	r3, r3, #1
 801883e:	2b00      	cmp	r3, #0
 8018840:	d00e      	beq.n	8018860 <HAL_I2C_ER_IRQHandler+0x12e>
 8018842:	69fb      	ldr	r3, [r7, #28]
 8018844:	0a1b      	lsrs	r3, r3, #8
 8018846:	f003 0301 	and.w	r3, r3, #1
 801884a:	2b00      	cmp	r3, #0
 801884c:	d008      	beq.n	8018860 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 801884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018850:	f043 0308 	orr.w	r3, r3, #8
 8018854:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 801885e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8018860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018862:	2b00      	cmp	r3, #0
 8018864:	d008      	beq.n	8018878 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801886c:	431a      	orrs	r2, r3
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8018872:	6878      	ldr	r0, [r7, #4]
 8018874:	f001 f8a0 	bl	80199b8 <I2C_ITError>
  }
}
 8018878:	bf00      	nop
 801887a:	3728      	adds	r7, #40	; 0x28
 801887c:	46bd      	mov	sp, r7
 801887e:	bd80      	pop	{r7, pc}

08018880 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018880:	b480      	push	{r7}
 8018882:	b083      	sub	sp, #12
 8018884:	af00      	add	r7, sp, #0
 8018886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8018888:	bf00      	nop
 801888a:	370c      	adds	r7, #12
 801888c:	46bd      	mov	sp, r7
 801888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018892:	4770      	bx	lr

08018894 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018894:	b480      	push	{r7}
 8018896:	b083      	sub	sp, #12
 8018898:	af00      	add	r7, sp, #0
 801889a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 801889c:	bf00      	nop
 801889e:	370c      	adds	r7, #12
 80188a0:	46bd      	mov	sp, r7
 80188a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188a6:	4770      	bx	lr

080188a8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80188a8:	b480      	push	{r7}
 80188aa:	b083      	sub	sp, #12
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80188b0:	bf00      	nop
 80188b2:	370c      	adds	r7, #12
 80188b4:	46bd      	mov	sp, r7
 80188b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ba:	4770      	bx	lr

080188bc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80188bc:	b480      	push	{r7}
 80188be:	b083      	sub	sp, #12
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80188c4:	bf00      	nop
 80188c6:	370c      	adds	r7, #12
 80188c8:	46bd      	mov	sp, r7
 80188ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ce:	4770      	bx	lr

080188d0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80188d0:	b480      	push	{r7}
 80188d2:	b083      	sub	sp, #12
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	6078      	str	r0, [r7, #4]
 80188d8:	460b      	mov	r3, r1
 80188da:	70fb      	strb	r3, [r7, #3]
 80188dc:	4613      	mov	r3, r2
 80188de:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80188e0:	bf00      	nop
 80188e2:	370c      	adds	r7, #12
 80188e4:	46bd      	mov	sp, r7
 80188e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ea:	4770      	bx	lr

080188ec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80188ec:	b480      	push	{r7}
 80188ee:	b083      	sub	sp, #12
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80188f4:	bf00      	nop
 80188f6:	370c      	adds	r7, #12
 80188f8:	46bd      	mov	sp, r7
 80188fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188fe:	4770      	bx	lr

08018900 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018900:	b480      	push	{r7}
 8018902:	b083      	sub	sp, #12
 8018904:	af00      	add	r7, sp, #0
 8018906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8018908:	bf00      	nop
 801890a:	370c      	adds	r7, #12
 801890c:	46bd      	mov	sp, r7
 801890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018912:	4770      	bx	lr

08018914 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018914:	b480      	push	{r7}
 8018916:	b083      	sub	sp, #12
 8018918:	af00      	add	r7, sp, #0
 801891a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 801891c:	bf00      	nop
 801891e:	370c      	adds	r7, #12
 8018920:	46bd      	mov	sp, r7
 8018922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018926:	4770      	bx	lr

08018928 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8018928:	b480      	push	{r7}
 801892a:	b083      	sub	sp, #12
 801892c:	af00      	add	r7, sp, #0
 801892e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8018930:	bf00      	nop
 8018932:	370c      	adds	r7, #12
 8018934:	46bd      	mov	sp, r7
 8018936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801893a:	4770      	bx	lr

0801893c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801893c:	b480      	push	{r7}
 801893e:	b083      	sub	sp, #12
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8018944:	bf00      	nop
 8018946:	370c      	adds	r7, #12
 8018948:	46bd      	mov	sp, r7
 801894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801894e:	4770      	bx	lr

08018950 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8018950:	b580      	push	{r7, lr}
 8018952:	b084      	sub	sp, #16
 8018954:	af00      	add	r7, sp, #0
 8018956:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801895e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018966:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801896c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018972:	2b00      	cmp	r3, #0
 8018974:	d150      	bne.n	8018a18 <I2C_MasterTransmit_TXE+0xc8>
 8018976:	7bfb      	ldrb	r3, [r7, #15]
 8018978:	2b21      	cmp	r3, #33	; 0x21
 801897a:	d14d      	bne.n	8018a18 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801897c:	68bb      	ldr	r3, [r7, #8]
 801897e:	2b08      	cmp	r3, #8
 8018980:	d01d      	beq.n	80189be <I2C_MasterTransmit_TXE+0x6e>
 8018982:	68bb      	ldr	r3, [r7, #8]
 8018984:	2b20      	cmp	r3, #32
 8018986:	d01a      	beq.n	80189be <I2C_MasterTransmit_TXE+0x6e>
 8018988:	68bb      	ldr	r3, [r7, #8]
 801898a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801898e:	d016      	beq.n	80189be <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	685a      	ldr	r2, [r3, #4]
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801899e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	2211      	movs	r2, #17
 80189a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	2200      	movs	r2, #0
 80189aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	2220      	movs	r2, #32
 80189b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80189b6:	6878      	ldr	r0, [r7, #4]
 80189b8:	f7ff ff62 	bl	8018880 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80189bc:	e060      	b.n	8018a80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	685a      	ldr	r2, [r3, #4]
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80189cc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	681a      	ldr	r2, [r3, #0]
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80189dc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	2200      	movs	r2, #0
 80189e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	2220      	movs	r2, #32
 80189e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80189f2:	b2db      	uxtb	r3, r3
 80189f4:	2b40      	cmp	r3, #64	; 0x40
 80189f6:	d107      	bne.n	8018a08 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	2200      	movs	r2, #0
 80189fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8018a00:	6878      	ldr	r0, [r7, #4]
 8018a02:	f7ff ff7d 	bl	8018900 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018a06:	e03b      	b.n	8018a80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8018a10:	6878      	ldr	r0, [r7, #4]
 8018a12:	f7ff ff35 	bl	8018880 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018a16:	e033      	b.n	8018a80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8018a18:	7bfb      	ldrb	r3, [r7, #15]
 8018a1a:	2b21      	cmp	r3, #33	; 0x21
 8018a1c:	d005      	beq.n	8018a2a <I2C_MasterTransmit_TXE+0xda>
 8018a1e:	7bbb      	ldrb	r3, [r7, #14]
 8018a20:	2b40      	cmp	r3, #64	; 0x40
 8018a22:	d12d      	bne.n	8018a80 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8018a24:	7bfb      	ldrb	r3, [r7, #15]
 8018a26:	2b22      	cmp	r3, #34	; 0x22
 8018a28:	d12a      	bne.n	8018a80 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a2e:	b29b      	uxth	r3, r3
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d108      	bne.n	8018a46 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	685a      	ldr	r2, [r3, #4]
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018a42:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8018a44:	e01c      	b.n	8018a80 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018a4c:	b2db      	uxtb	r3, r3
 8018a4e:	2b40      	cmp	r3, #64	; 0x40
 8018a50:	d103      	bne.n	8018a5a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8018a52:	6878      	ldr	r0, [r7, #4]
 8018a54:	f000 f88e 	bl	8018b74 <I2C_MemoryTransmit_TXE_BTF>
}
 8018a58:	e012      	b.n	8018a80 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a5e:	781a      	ldrb	r2, [r3, #0]
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a6a:	1c5a      	adds	r2, r3, #1
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a74:	b29b      	uxth	r3, r3
 8018a76:	3b01      	subs	r3, #1
 8018a78:	b29a      	uxth	r2, r3
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018a7e:	e7ff      	b.n	8018a80 <I2C_MasterTransmit_TXE+0x130>
 8018a80:	bf00      	nop
 8018a82:	3710      	adds	r7, #16
 8018a84:	46bd      	mov	sp, r7
 8018a86:	bd80      	pop	{r7, pc}

08018a88 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b084      	sub	sp, #16
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a94:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018a9c:	b2db      	uxtb	r3, r3
 8018a9e:	2b21      	cmp	r3, #33	; 0x21
 8018aa0:	d164      	bne.n	8018b6c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018aa6:	b29b      	uxth	r3, r3
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d012      	beq.n	8018ad2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ab0:	781a      	ldrb	r2, [r3, #0]
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018abc:	1c5a      	adds	r2, r3, #1
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ac6:	b29b      	uxth	r3, r3
 8018ac8:	3b01      	subs	r3, #1
 8018aca:	b29a      	uxth	r2, r3
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8018ad0:	e04c      	b.n	8018b6c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018ad2:	68fb      	ldr	r3, [r7, #12]
 8018ad4:	2b08      	cmp	r3, #8
 8018ad6:	d01d      	beq.n	8018b14 <I2C_MasterTransmit_BTF+0x8c>
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	2b20      	cmp	r3, #32
 8018adc:	d01a      	beq.n	8018b14 <I2C_MasterTransmit_BTF+0x8c>
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018ae4:	d016      	beq.n	8018b14 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	685a      	ldr	r2, [r3, #4]
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	681b      	ldr	r3, [r3, #0]
 8018af0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018af4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	2211      	movs	r2, #17
 8018afa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	2200      	movs	r2, #0
 8018b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	2220      	movs	r2, #32
 8018b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8018b0c:	6878      	ldr	r0, [r7, #4]
 8018b0e:	f7ff feb7 	bl	8018880 <HAL_I2C_MasterTxCpltCallback>
}
 8018b12:	e02b      	b.n	8018b6c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	685a      	ldr	r2, [r3, #4]
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018b22:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	681a      	ldr	r2, [r3, #0]
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018b32:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	2200      	movs	r2, #0
 8018b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	2220      	movs	r2, #32
 8018b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018b48:	b2db      	uxtb	r3, r3
 8018b4a:	2b40      	cmp	r3, #64	; 0x40
 8018b4c:	d107      	bne.n	8018b5e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	2200      	movs	r2, #0
 8018b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8018b56:	6878      	ldr	r0, [r7, #4]
 8018b58:	f7ff fed2 	bl	8018900 <HAL_I2C_MemTxCpltCallback>
}
 8018b5c:	e006      	b.n	8018b6c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	2200      	movs	r2, #0
 8018b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8018b66:	6878      	ldr	r0, [r7, #4]
 8018b68:	f7ff fe8a 	bl	8018880 <HAL_I2C_MasterTxCpltCallback>
}
 8018b6c:	bf00      	nop
 8018b6e:	3710      	adds	r7, #16
 8018b70:	46bd      	mov	sp, r7
 8018b72:	bd80      	pop	{r7, pc}

08018b74 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8018b74:	b580      	push	{r7, lr}
 8018b76:	b084      	sub	sp, #16
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018b82:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d11d      	bne.n	8018bc8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018b90:	2b01      	cmp	r3, #1
 8018b92:	d10b      	bne.n	8018bac <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018b98:	b2da      	uxtb	r2, r3
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ba4:	1c9a      	adds	r2, r3, #2
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8018baa:	e073      	b.n	8018c94 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018bb0:	b29b      	uxth	r3, r3
 8018bb2:	121b      	asrs	r3, r3, #8
 8018bb4:	b2da      	uxtb	r2, r3
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018bc0:	1c5a      	adds	r2, r3, #1
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018bc6:	e065      	b.n	8018c94 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018bcc:	2b01      	cmp	r3, #1
 8018bce:	d10b      	bne.n	8018be8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018bd4:	b2da      	uxtb	r2, r3
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018be0:	1c5a      	adds	r2, r3, #1
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018be6:	e055      	b.n	8018c94 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018bec:	2b02      	cmp	r3, #2
 8018bee:	d151      	bne.n	8018c94 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8018bf0:	7bfb      	ldrb	r3, [r7, #15]
 8018bf2:	2b22      	cmp	r3, #34	; 0x22
 8018bf4:	d10d      	bne.n	8018c12 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	681a      	ldr	r2, [r3, #0]
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018c04:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c0a:	1c5a      	adds	r2, r3, #1
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018c10:	e040      	b.n	8018c94 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c16:	b29b      	uxth	r3, r3
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d015      	beq.n	8018c48 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8018c1c:	7bfb      	ldrb	r3, [r7, #15]
 8018c1e:	2b21      	cmp	r3, #33	; 0x21
 8018c20:	d112      	bne.n	8018c48 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c26:	781a      	ldrb	r2, [r3, #0]
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c32:	1c5a      	adds	r2, r3, #1
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c3c:	b29b      	uxth	r3, r3
 8018c3e:	3b01      	subs	r3, #1
 8018c40:	b29a      	uxth	r2, r3
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018c46:	e025      	b.n	8018c94 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c4c:	b29b      	uxth	r3, r3
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d120      	bne.n	8018c94 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8018c52:	7bfb      	ldrb	r3, [r7, #15]
 8018c54:	2b21      	cmp	r3, #33	; 0x21
 8018c56:	d11d      	bne.n	8018c94 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	685a      	ldr	r2, [r3, #4]
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018c66:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	681a      	ldr	r2, [r3, #0]
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018c76:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	2200      	movs	r2, #0
 8018c7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	2220      	movs	r2, #32
 8018c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	2200      	movs	r2, #0
 8018c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8018c8e:	6878      	ldr	r0, [r7, #4]
 8018c90:	f7ff fe36 	bl	8018900 <HAL_I2C_MemTxCpltCallback>
}
 8018c94:	bf00      	nop
 8018c96:	3710      	adds	r7, #16
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	bd80      	pop	{r7, pc}

08018c9c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	b084      	sub	sp, #16
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018caa:	b2db      	uxtb	r3, r3
 8018cac:	2b22      	cmp	r3, #34	; 0x22
 8018cae:	f040 80ac 	bne.w	8018e0a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cb6:	b29b      	uxth	r3, r3
 8018cb8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8018cba:	68fb      	ldr	r3, [r7, #12]
 8018cbc:	2b03      	cmp	r3, #3
 8018cbe:	d921      	bls.n	8018d04 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	691a      	ldr	r2, [r3, #16]
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cca:	b2d2      	uxtb	r2, r2
 8018ccc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cd2:	1c5a      	adds	r2, r3, #1
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cdc:	b29b      	uxth	r3, r3
 8018cde:	3b01      	subs	r3, #1
 8018ce0:	b29a      	uxth	r2, r3
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cea:	b29b      	uxth	r3, r3
 8018cec:	2b03      	cmp	r3, #3
 8018cee:	f040 808c 	bne.w	8018e0a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	685a      	ldr	r2, [r3, #4]
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018d00:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8018d02:	e082      	b.n	8018e0a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d08:	2b02      	cmp	r3, #2
 8018d0a:	d075      	beq.n	8018df8 <I2C_MasterReceive_RXNE+0x15c>
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	2b01      	cmp	r3, #1
 8018d10:	d002      	beq.n	8018d18 <I2C_MasterReceive_RXNE+0x7c>
 8018d12:	68fb      	ldr	r3, [r7, #12]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d16f      	bne.n	8018df8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018d18:	6878      	ldr	r0, [r7, #4]
 8018d1a:	f001 fafd 	bl	801a318 <I2C_WaitOnSTOPRequestThroughIT>
 8018d1e:	4603      	mov	r3, r0
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d142      	bne.n	8018daa <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	681a      	ldr	r2, [r3, #0]
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018d32:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	685a      	ldr	r2, [r3, #4]
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018d42:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	691a      	ldr	r2, [r3, #16]
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d4e:	b2d2      	uxtb	r2, r2
 8018d50:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d56:	1c5a      	adds	r2, r3, #1
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d60:	b29b      	uxth	r3, r3
 8018d62:	3b01      	subs	r3, #1
 8018d64:	b29a      	uxth	r2, r3
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	2220      	movs	r2, #32
 8018d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018d78:	b2db      	uxtb	r3, r3
 8018d7a:	2b40      	cmp	r3, #64	; 0x40
 8018d7c:	d10a      	bne.n	8018d94 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	2200      	movs	r2, #0
 8018d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	2200      	movs	r2, #0
 8018d8a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8018d8c:	6878      	ldr	r0, [r7, #4]
 8018d8e:	f7ff fdc1 	bl	8018914 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018d92:	e03a      	b.n	8018e0a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	2200      	movs	r2, #0
 8018d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	2212      	movs	r2, #18
 8018da0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8018da2:	6878      	ldr	r0, [r7, #4]
 8018da4:	f7ff fd76 	bl	8018894 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018da8:	e02f      	b.n	8018e0a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	685a      	ldr	r2, [r3, #4]
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018db8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	691a      	ldr	r2, [r3, #16]
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dc4:	b2d2      	uxtb	r2, r2
 8018dc6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dcc:	1c5a      	adds	r2, r3, #1
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018dd6:	b29b      	uxth	r3, r3
 8018dd8:	3b01      	subs	r3, #1
 8018dda:	b29a      	uxth	r2, r3
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	2220      	movs	r2, #32
 8018de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	2200      	movs	r2, #0
 8018dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8018df0:	6878      	ldr	r0, [r7, #4]
 8018df2:	f7ff fd99 	bl	8018928 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018df6:	e008      	b.n	8018e0a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	685a      	ldr	r2, [r3, #4]
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018e06:	605a      	str	r2, [r3, #4]
}
 8018e08:	e7ff      	b.n	8018e0a <I2C_MasterReceive_RXNE+0x16e>
 8018e0a:	bf00      	nop
 8018e0c:	3710      	adds	r7, #16
 8018e0e:	46bd      	mov	sp, r7
 8018e10:	bd80      	pop	{r7, pc}

08018e12 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8018e12:	b580      	push	{r7, lr}
 8018e14:	b084      	sub	sp, #16
 8018e16:	af00      	add	r7, sp, #0
 8018e18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e1e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e24:	b29b      	uxth	r3, r3
 8018e26:	2b04      	cmp	r3, #4
 8018e28:	d11b      	bne.n	8018e62 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	685a      	ldr	r2, [r3, #4]
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018e38:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	691a      	ldr	r2, [r3, #16]
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e44:	b2d2      	uxtb	r2, r2
 8018e46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e4c:	1c5a      	adds	r2, r3, #1
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e56:	b29b      	uxth	r3, r3
 8018e58:	3b01      	subs	r3, #1
 8018e5a:	b29a      	uxth	r2, r3
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8018e60:	e0bd      	b.n	8018fde <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e66:	b29b      	uxth	r3, r3
 8018e68:	2b03      	cmp	r3, #3
 8018e6a:	d129      	bne.n	8018ec0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	685a      	ldr	r2, [r3, #4]
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018e7a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	2b04      	cmp	r3, #4
 8018e80:	d00a      	beq.n	8018e98 <I2C_MasterReceive_BTF+0x86>
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	2b02      	cmp	r3, #2
 8018e86:	d007      	beq.n	8018e98 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	681a      	ldr	r2, [r3, #0]
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018e96:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	691a      	ldr	r2, [r3, #16]
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ea2:	b2d2      	uxtb	r2, r2
 8018ea4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eaa:	1c5a      	adds	r2, r3, #1
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018eb4:	b29b      	uxth	r3, r3
 8018eb6:	3b01      	subs	r3, #1
 8018eb8:	b29a      	uxth	r2, r3
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018ebe:	e08e      	b.n	8018fde <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ec4:	b29b      	uxth	r3, r3
 8018ec6:	2b02      	cmp	r3, #2
 8018ec8:	d176      	bne.n	8018fb8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	2b01      	cmp	r3, #1
 8018ece:	d002      	beq.n	8018ed6 <I2C_MasterReceive_BTF+0xc4>
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	2b10      	cmp	r3, #16
 8018ed4:	d108      	bne.n	8018ee8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	681a      	ldr	r2, [r3, #0]
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018ee4:	601a      	str	r2, [r3, #0]
 8018ee6:	e019      	b.n	8018f1c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8018ee8:	68fb      	ldr	r3, [r7, #12]
 8018eea:	2b04      	cmp	r3, #4
 8018eec:	d002      	beq.n	8018ef4 <I2C_MasterReceive_BTF+0xe2>
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	2b02      	cmp	r3, #2
 8018ef2:	d108      	bne.n	8018f06 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	681a      	ldr	r2, [r3, #0]
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018f02:	601a      	str	r2, [r3, #0]
 8018f04:	e00a      	b.n	8018f1c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	2b10      	cmp	r3, #16
 8018f0a:	d007      	beq.n	8018f1c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	681a      	ldr	r2, [r3, #0]
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018f1a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	691a      	ldr	r2, [r3, #16]
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f26:	b2d2      	uxtb	r2, r2
 8018f28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f2e:	1c5a      	adds	r2, r3, #1
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f38:	b29b      	uxth	r3, r3
 8018f3a:	3b01      	subs	r3, #1
 8018f3c:	b29a      	uxth	r2, r3
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	691a      	ldr	r2, [r3, #16]
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f4c:	b2d2      	uxtb	r2, r2
 8018f4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f54:	1c5a      	adds	r2, r3, #1
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f5e:	b29b      	uxth	r3, r3
 8018f60:	3b01      	subs	r3, #1
 8018f62:	b29a      	uxth	r2, r3
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	685a      	ldr	r2, [r3, #4]
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8018f76:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	2220      	movs	r2, #32
 8018f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018f86:	b2db      	uxtb	r3, r3
 8018f88:	2b40      	cmp	r3, #64	; 0x40
 8018f8a:	d10a      	bne.n	8018fa2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	2200      	movs	r2, #0
 8018f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	2200      	movs	r2, #0
 8018f98:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8018f9a:	6878      	ldr	r0, [r7, #4]
 8018f9c:	f7ff fcba 	bl	8018914 <HAL_I2C_MemRxCpltCallback>
}
 8018fa0:	e01d      	b.n	8018fde <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	2200      	movs	r2, #0
 8018fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	2212      	movs	r2, #18
 8018fae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8018fb0:	6878      	ldr	r0, [r7, #4]
 8018fb2:	f7ff fc6f 	bl	8018894 <HAL_I2C_MasterRxCpltCallback>
}
 8018fb6:	e012      	b.n	8018fde <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	691a      	ldr	r2, [r3, #16]
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fc2:	b2d2      	uxtb	r2, r2
 8018fc4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fca:	1c5a      	adds	r2, r3, #1
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018fd4:	b29b      	uxth	r3, r3
 8018fd6:	3b01      	subs	r3, #1
 8018fd8:	b29a      	uxth	r2, r3
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018fde:	bf00      	nop
 8018fe0:	3710      	adds	r7, #16
 8018fe2:	46bd      	mov	sp, r7
 8018fe4:	bd80      	pop	{r7, pc}

08018fe6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8018fe6:	b480      	push	{r7}
 8018fe8:	b083      	sub	sp, #12
 8018fea:	af00      	add	r7, sp, #0
 8018fec:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018ff4:	b2db      	uxtb	r3, r3
 8018ff6:	2b40      	cmp	r3, #64	; 0x40
 8018ff8:	d117      	bne.n	801902a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d109      	bne.n	8019016 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019006:	b2db      	uxtb	r3, r3
 8019008:	461a      	mov	r2, r3
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8019012:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8019014:	e067      	b.n	80190e6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801901a:	b2db      	uxtb	r3, r3
 801901c:	f043 0301 	orr.w	r3, r3, #1
 8019020:	b2da      	uxtb	r2, r3
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	611a      	str	r2, [r3, #16]
}
 8019028:	e05d      	b.n	80190e6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	691b      	ldr	r3, [r3, #16]
 801902e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019032:	d133      	bne.n	801909c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801903a:	b2db      	uxtb	r3, r3
 801903c:	2b21      	cmp	r3, #33	; 0x21
 801903e:	d109      	bne.n	8019054 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019044:	b2db      	uxtb	r3, r3
 8019046:	461a      	mov	r2, r3
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8019050:	611a      	str	r2, [r3, #16]
 8019052:	e008      	b.n	8019066 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019058:	b2db      	uxtb	r3, r3
 801905a:	f043 0301 	orr.w	r3, r3, #1
 801905e:	b2da      	uxtb	r2, r3
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801906a:	2b00      	cmp	r3, #0
 801906c:	d004      	beq.n	8019078 <I2C_Master_SB+0x92>
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019074:	2b00      	cmp	r3, #0
 8019076:	d108      	bne.n	801908a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801907c:	2b00      	cmp	r3, #0
 801907e:	d032      	beq.n	80190e6 <I2C_Master_SB+0x100>
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019086:	2b00      	cmp	r3, #0
 8019088:	d02d      	beq.n	80190e6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	685a      	ldr	r2, [r3, #4]
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	681b      	ldr	r3, [r3, #0]
 8019094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8019098:	605a      	str	r2, [r3, #4]
}
 801909a:	e024      	b.n	80190e6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d10e      	bne.n	80190c2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190a8:	b29b      	uxth	r3, r3
 80190aa:	11db      	asrs	r3, r3, #7
 80190ac:	b2db      	uxtb	r3, r3
 80190ae:	f003 0306 	and.w	r3, r3, #6
 80190b2:	b2db      	uxtb	r3, r3
 80190b4:	f063 030f 	orn	r3, r3, #15
 80190b8:	b2da      	uxtb	r2, r3
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	611a      	str	r2, [r3, #16]
}
 80190c0:	e011      	b.n	80190e6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80190c6:	2b01      	cmp	r3, #1
 80190c8:	d10d      	bne.n	80190e6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190ce:	b29b      	uxth	r3, r3
 80190d0:	11db      	asrs	r3, r3, #7
 80190d2:	b2db      	uxtb	r3, r3
 80190d4:	f003 0306 	and.w	r3, r3, #6
 80190d8:	b2db      	uxtb	r3, r3
 80190da:	f063 030e 	orn	r3, r3, #14
 80190de:	b2da      	uxtb	r2, r3
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	611a      	str	r2, [r3, #16]
}
 80190e6:	bf00      	nop
 80190e8:	370c      	adds	r7, #12
 80190ea:	46bd      	mov	sp, r7
 80190ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190f0:	4770      	bx	lr

080190f2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80190f2:	b480      	push	{r7}
 80190f4:	b083      	sub	sp, #12
 80190f6:	af00      	add	r7, sp, #0
 80190f8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190fe:	b2da      	uxtb	r2, r3
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801910a:	2b00      	cmp	r3, #0
 801910c:	d004      	beq.n	8019118 <I2C_Master_ADD10+0x26>
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019114:	2b00      	cmp	r3, #0
 8019116:	d108      	bne.n	801912a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801911c:	2b00      	cmp	r3, #0
 801911e:	d00c      	beq.n	801913a <I2C_Master_ADD10+0x48>
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019126:	2b00      	cmp	r3, #0
 8019128:	d007      	beq.n	801913a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	685a      	ldr	r2, [r3, #4]
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8019138:	605a      	str	r2, [r3, #4]
  }
}
 801913a:	bf00      	nop
 801913c:	370c      	adds	r7, #12
 801913e:	46bd      	mov	sp, r7
 8019140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019144:	4770      	bx	lr

08019146 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8019146:	b480      	push	{r7}
 8019148:	b091      	sub	sp, #68	; 0x44
 801914a:	af00      	add	r7, sp, #0
 801914c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019154:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801915c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019162:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801916a:	b2db      	uxtb	r3, r3
 801916c:	2b22      	cmp	r3, #34	; 0x22
 801916e:	f040 8169 	bne.w	8019444 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019176:	2b00      	cmp	r3, #0
 8019178:	d10f      	bne.n	801919a <I2C_Master_ADDR+0x54>
 801917a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801917e:	2b40      	cmp	r3, #64	; 0x40
 8019180:	d10b      	bne.n	801919a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019182:	2300      	movs	r3, #0
 8019184:	633b      	str	r3, [r7, #48]	; 0x30
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	695b      	ldr	r3, [r3, #20]
 801918c:	633b      	str	r3, [r7, #48]	; 0x30
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	699b      	ldr	r3, [r3, #24]
 8019194:	633b      	str	r3, [r7, #48]	; 0x30
 8019196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019198:	e160      	b.n	801945c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d11d      	bne.n	80191de <I2C_Master_ADDR+0x98>
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	691b      	ldr	r3, [r3, #16]
 80191a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80191aa:	d118      	bne.n	80191de <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80191ac:	2300      	movs	r3, #0
 80191ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	695b      	ldr	r3, [r3, #20]
 80191b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	699b      	ldr	r3, [r3, #24]
 80191be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80191c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	681a      	ldr	r2, [r3, #0]
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80191d0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80191d6:	1c5a      	adds	r2, r3, #1
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	651a      	str	r2, [r3, #80]	; 0x50
 80191dc:	e13e      	b.n	801945c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80191e2:	b29b      	uxth	r3, r3
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d113      	bne.n	8019210 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80191e8:	2300      	movs	r3, #0
 80191ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	695b      	ldr	r3, [r3, #20]
 80191f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	699b      	ldr	r3, [r3, #24]
 80191fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80191fc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	681a      	ldr	r2, [r3, #0]
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801920c:	601a      	str	r2, [r3, #0]
 801920e:	e115      	b.n	801943c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019214:	b29b      	uxth	r3, r3
 8019216:	2b01      	cmp	r3, #1
 8019218:	f040 808a 	bne.w	8019330 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801921c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801921e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019222:	d137      	bne.n	8019294 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	681a      	ldr	r2, [r3, #0]
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019232:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	685b      	ldr	r3, [r3, #4]
 801923a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801923e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019242:	d113      	bne.n	801926c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	681a      	ldr	r2, [r3, #0]
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019252:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019254:	2300      	movs	r3, #0
 8019256:	627b      	str	r3, [r7, #36]	; 0x24
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	695b      	ldr	r3, [r3, #20]
 801925e:	627b      	str	r3, [r7, #36]	; 0x24
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	699b      	ldr	r3, [r3, #24]
 8019266:	627b      	str	r3, [r7, #36]	; 0x24
 8019268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801926a:	e0e7      	b.n	801943c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801926c:	2300      	movs	r3, #0
 801926e:	623b      	str	r3, [r7, #32]
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	695b      	ldr	r3, [r3, #20]
 8019276:	623b      	str	r3, [r7, #32]
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	699b      	ldr	r3, [r3, #24]
 801927e:	623b      	str	r3, [r7, #32]
 8019280:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	681a      	ldr	r2, [r3, #0]
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019290:	601a      	str	r2, [r3, #0]
 8019292:	e0d3      	b.n	801943c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8019294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019296:	2b08      	cmp	r3, #8
 8019298:	d02e      	beq.n	80192f8 <I2C_Master_ADDR+0x1b2>
 801929a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801929c:	2b20      	cmp	r3, #32
 801929e:	d02b      	beq.n	80192f8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80192a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192a2:	2b12      	cmp	r3, #18
 80192a4:	d102      	bne.n	80192ac <I2C_Master_ADDR+0x166>
 80192a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192a8:	2b01      	cmp	r3, #1
 80192aa:	d125      	bne.n	80192f8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80192ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192ae:	2b04      	cmp	r3, #4
 80192b0:	d00e      	beq.n	80192d0 <I2C_Master_ADDR+0x18a>
 80192b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192b4:	2b02      	cmp	r3, #2
 80192b6:	d00b      	beq.n	80192d0 <I2C_Master_ADDR+0x18a>
 80192b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192ba:	2b10      	cmp	r3, #16
 80192bc:	d008      	beq.n	80192d0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	681a      	ldr	r2, [r3, #0]
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80192cc:	601a      	str	r2, [r3, #0]
 80192ce:	e007      	b.n	80192e0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	681a      	ldr	r2, [r3, #0]
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80192de:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80192e0:	2300      	movs	r3, #0
 80192e2:	61fb      	str	r3, [r7, #28]
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	695b      	ldr	r3, [r3, #20]
 80192ea:	61fb      	str	r3, [r7, #28]
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	699b      	ldr	r3, [r3, #24]
 80192f2:	61fb      	str	r3, [r7, #28]
 80192f4:	69fb      	ldr	r3, [r7, #28]
 80192f6:	e0a1      	b.n	801943c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	681a      	ldr	r2, [r3, #0]
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019306:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019308:	2300      	movs	r3, #0
 801930a:	61bb      	str	r3, [r7, #24]
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	695b      	ldr	r3, [r3, #20]
 8019312:	61bb      	str	r3, [r7, #24]
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	699b      	ldr	r3, [r3, #24]
 801931a:	61bb      	str	r3, [r7, #24]
 801931c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	681a      	ldr	r2, [r3, #0]
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801932c:	601a      	str	r2, [r3, #0]
 801932e:	e085      	b.n	801943c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019334:	b29b      	uxth	r3, r3
 8019336:	2b02      	cmp	r3, #2
 8019338:	d14d      	bne.n	80193d6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801933a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801933c:	2b04      	cmp	r3, #4
 801933e:	d016      	beq.n	801936e <I2C_Master_ADDR+0x228>
 8019340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019342:	2b02      	cmp	r3, #2
 8019344:	d013      	beq.n	801936e <I2C_Master_ADDR+0x228>
 8019346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019348:	2b10      	cmp	r3, #16
 801934a:	d010      	beq.n	801936e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	681a      	ldr	r2, [r3, #0]
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801935a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	681a      	ldr	r2, [r3, #0]
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801936a:	601a      	str	r2, [r3, #0]
 801936c:	e007      	b.n	801937e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	681a      	ldr	r2, [r3, #0]
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801937c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	685b      	ldr	r3, [r3, #4]
 8019384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801938c:	d117      	bne.n	80193be <I2C_Master_ADDR+0x278>
 801938e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019390:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019394:	d00b      	beq.n	80193ae <I2C_Master_ADDR+0x268>
 8019396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019398:	2b01      	cmp	r3, #1
 801939a:	d008      	beq.n	80193ae <I2C_Master_ADDR+0x268>
 801939c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801939e:	2b08      	cmp	r3, #8
 80193a0:	d005      	beq.n	80193ae <I2C_Master_ADDR+0x268>
 80193a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193a4:	2b10      	cmp	r3, #16
 80193a6:	d002      	beq.n	80193ae <I2C_Master_ADDR+0x268>
 80193a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193aa:	2b20      	cmp	r3, #32
 80193ac:	d107      	bne.n	80193be <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	685a      	ldr	r2, [r3, #4]
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80193bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80193be:	2300      	movs	r3, #0
 80193c0:	617b      	str	r3, [r7, #20]
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	695b      	ldr	r3, [r3, #20]
 80193c8:	617b      	str	r3, [r7, #20]
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	699b      	ldr	r3, [r3, #24]
 80193d0:	617b      	str	r3, [r7, #20]
 80193d2:	697b      	ldr	r3, [r7, #20]
 80193d4:	e032      	b.n	801943c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	681a      	ldr	r2, [r3, #0]
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80193e4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	685b      	ldr	r3, [r3, #4]
 80193ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80193f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80193f4:	d117      	bne.n	8019426 <I2C_Master_ADDR+0x2e0>
 80193f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80193fc:	d00b      	beq.n	8019416 <I2C_Master_ADDR+0x2d0>
 80193fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019400:	2b01      	cmp	r3, #1
 8019402:	d008      	beq.n	8019416 <I2C_Master_ADDR+0x2d0>
 8019404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019406:	2b08      	cmp	r3, #8
 8019408:	d005      	beq.n	8019416 <I2C_Master_ADDR+0x2d0>
 801940a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801940c:	2b10      	cmp	r3, #16
 801940e:	d002      	beq.n	8019416 <I2C_Master_ADDR+0x2d0>
 8019410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019412:	2b20      	cmp	r3, #32
 8019414:	d107      	bne.n	8019426 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	685a      	ldr	r2, [r3, #4]
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8019424:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019426:	2300      	movs	r3, #0
 8019428:	613b      	str	r3, [r7, #16]
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	695b      	ldr	r3, [r3, #20]
 8019430:	613b      	str	r3, [r7, #16]
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	699b      	ldr	r3, [r3, #24]
 8019438:	613b      	str	r3, [r7, #16]
 801943a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	2200      	movs	r2, #0
 8019440:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8019442:	e00b      	b.n	801945c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019444:	2300      	movs	r3, #0
 8019446:	60fb      	str	r3, [r7, #12]
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	695b      	ldr	r3, [r3, #20]
 801944e:	60fb      	str	r3, [r7, #12]
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	699b      	ldr	r3, [r3, #24]
 8019456:	60fb      	str	r3, [r7, #12]
 8019458:	68fb      	ldr	r3, [r7, #12]
}
 801945a:	e7ff      	b.n	801945c <I2C_Master_ADDR+0x316>
 801945c:	bf00      	nop
 801945e:	3744      	adds	r7, #68	; 0x44
 8019460:	46bd      	mov	sp, r7
 8019462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019466:	4770      	bx	lr

08019468 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8019468:	b580      	push	{r7, lr}
 801946a:	b084      	sub	sp, #16
 801946c:	af00      	add	r7, sp, #0
 801946e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019476:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801947c:	b29b      	uxth	r3, r3
 801947e:	2b00      	cmp	r3, #0
 8019480:	d02b      	beq.n	80194da <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019486:	781a      	ldrb	r2, [r3, #0]
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019492:	1c5a      	adds	r2, r3, #1
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801949c:	b29b      	uxth	r3, r3
 801949e:	3b01      	subs	r3, #1
 80194a0:	b29a      	uxth	r2, r3
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80194aa:	b29b      	uxth	r3, r3
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d114      	bne.n	80194da <I2C_SlaveTransmit_TXE+0x72>
 80194b0:	7bfb      	ldrb	r3, [r7, #15]
 80194b2:	2b29      	cmp	r3, #41	; 0x29
 80194b4:	d111      	bne.n	80194da <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	685a      	ldr	r2, [r3, #4]
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80194c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	2221      	movs	r2, #33	; 0x21
 80194ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	2228      	movs	r2, #40	; 0x28
 80194d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80194d4:	6878      	ldr	r0, [r7, #4]
 80194d6:	f7ff f9e7 	bl	80188a8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80194da:	bf00      	nop
 80194dc:	3710      	adds	r7, #16
 80194de:	46bd      	mov	sp, r7
 80194e0:	bd80      	pop	{r7, pc}

080194e2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80194e2:	b480      	push	{r7}
 80194e4:	b083      	sub	sp, #12
 80194e6:	af00      	add	r7, sp, #0
 80194e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80194ee:	b29b      	uxth	r3, r3
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d011      	beq.n	8019518 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194f8:	781a      	ldrb	r2, [r3, #0]
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019504:	1c5a      	adds	r2, r3, #1
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801950e:	b29b      	uxth	r3, r3
 8019510:	3b01      	subs	r3, #1
 8019512:	b29a      	uxth	r2, r3
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8019518:	bf00      	nop
 801951a:	370c      	adds	r7, #12
 801951c:	46bd      	mov	sp, r7
 801951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019522:	4770      	bx	lr

08019524 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8019524:	b580      	push	{r7, lr}
 8019526:	b084      	sub	sp, #16
 8019528:	af00      	add	r7, sp, #0
 801952a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019532:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019538:	b29b      	uxth	r3, r3
 801953a:	2b00      	cmp	r3, #0
 801953c:	d02c      	beq.n	8019598 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	691a      	ldr	r2, [r3, #16]
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019548:	b2d2      	uxtb	r2, r2
 801954a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019550:	1c5a      	adds	r2, r3, #1
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801955a:	b29b      	uxth	r3, r3
 801955c:	3b01      	subs	r3, #1
 801955e:	b29a      	uxth	r2, r3
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019568:	b29b      	uxth	r3, r3
 801956a:	2b00      	cmp	r3, #0
 801956c:	d114      	bne.n	8019598 <I2C_SlaveReceive_RXNE+0x74>
 801956e:	7bfb      	ldrb	r3, [r7, #15]
 8019570:	2b2a      	cmp	r3, #42	; 0x2a
 8019572:	d111      	bne.n	8019598 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	685a      	ldr	r2, [r3, #4]
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019582:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	2222      	movs	r2, #34	; 0x22
 8019588:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	2228      	movs	r2, #40	; 0x28
 801958e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8019592:	6878      	ldr	r0, [r7, #4]
 8019594:	f7ff f992 	bl	80188bc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8019598:	bf00      	nop
 801959a:	3710      	adds	r7, #16
 801959c:	46bd      	mov	sp, r7
 801959e:	bd80      	pop	{r7, pc}

080195a0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80195a0:	b480      	push	{r7}
 80195a2:	b083      	sub	sp, #12
 80195a4:	af00      	add	r7, sp, #0
 80195a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80195ac:	b29b      	uxth	r3, r3
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d012      	beq.n	80195d8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	691a      	ldr	r2, [r3, #16]
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195bc:	b2d2      	uxtb	r2, r2
 80195be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195c4:	1c5a      	adds	r2, r3, #1
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80195ce:	b29b      	uxth	r3, r3
 80195d0:	3b01      	subs	r3, #1
 80195d2:	b29a      	uxth	r2, r3
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80195d8:	bf00      	nop
 80195da:	370c      	adds	r7, #12
 80195dc:	46bd      	mov	sp, r7
 80195de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195e2:	4770      	bx	lr

080195e4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80195e4:	b580      	push	{r7, lr}
 80195e6:	b084      	sub	sp, #16
 80195e8:	af00      	add	r7, sp, #0
 80195ea:	6078      	str	r0, [r7, #4]
 80195ec:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80195ee:	2300      	movs	r3, #0
 80195f0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80195f8:	b2db      	uxtb	r3, r3
 80195fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80195fe:	2b28      	cmp	r3, #40	; 0x28
 8019600:	d127      	bne.n	8019652 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	685a      	ldr	r2, [r3, #4]
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019610:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8019612:	683b      	ldr	r3, [r7, #0]
 8019614:	089b      	lsrs	r3, r3, #2
 8019616:	f003 0301 	and.w	r3, r3, #1
 801961a:	2b00      	cmp	r3, #0
 801961c:	d101      	bne.n	8019622 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 801961e:	2301      	movs	r3, #1
 8019620:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8019622:	683b      	ldr	r3, [r7, #0]
 8019624:	09db      	lsrs	r3, r3, #7
 8019626:	f003 0301 	and.w	r3, r3, #1
 801962a:	2b00      	cmp	r3, #0
 801962c:	d103      	bne.n	8019636 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	68db      	ldr	r3, [r3, #12]
 8019632:	81bb      	strh	r3, [r7, #12]
 8019634:	e002      	b.n	801963c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	699b      	ldr	r3, [r3, #24]
 801963a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	2200      	movs	r2, #0
 8019640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8019644:	89ba      	ldrh	r2, [r7, #12]
 8019646:	7bfb      	ldrb	r3, [r7, #15]
 8019648:	4619      	mov	r1, r3
 801964a:	6878      	ldr	r0, [r7, #4]
 801964c:	f7ff f940 	bl	80188d0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8019650:	e00e      	b.n	8019670 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019652:	2300      	movs	r3, #0
 8019654:	60bb      	str	r3, [r7, #8]
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	695b      	ldr	r3, [r3, #20]
 801965c:	60bb      	str	r3, [r7, #8]
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	699b      	ldr	r3, [r3, #24]
 8019664:	60bb      	str	r3, [r7, #8]
 8019666:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	2200      	movs	r2, #0
 801966c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8019670:	bf00      	nop
 8019672:	3710      	adds	r7, #16
 8019674:	46bd      	mov	sp, r7
 8019676:	bd80      	pop	{r7, pc}

08019678 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8019678:	b580      	push	{r7, lr}
 801967a:	b084      	sub	sp, #16
 801967c:	af00      	add	r7, sp, #0
 801967e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019686:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	685a      	ldr	r2, [r3, #4]
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8019696:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8019698:	2300      	movs	r3, #0
 801969a:	60bb      	str	r3, [r7, #8]
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	695b      	ldr	r3, [r3, #20]
 80196a2:	60bb      	str	r3, [r7, #8]
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	681a      	ldr	r2, [r3, #0]
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	f042 0201 	orr.w	r2, r2, #1
 80196b2:	601a      	str	r2, [r3, #0]
 80196b4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	681a      	ldr	r2, [r3, #0]
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80196c4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	685b      	ldr	r3, [r3, #4]
 80196cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80196d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80196d4:	d172      	bne.n	80197bc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80196d6:	7bfb      	ldrb	r3, [r7, #15]
 80196d8:	2b22      	cmp	r3, #34	; 0x22
 80196da:	d002      	beq.n	80196e2 <I2C_Slave_STOPF+0x6a>
 80196dc:	7bfb      	ldrb	r3, [r7, #15]
 80196de:	2b2a      	cmp	r3, #42	; 0x2a
 80196e0:	d135      	bne.n	801974e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	685b      	ldr	r3, [r3, #4]
 80196ea:	b29a      	uxth	r2, r3
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80196f4:	b29b      	uxth	r3, r3
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d005      	beq.n	8019706 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80196fe:	f043 0204 	orr.w	r2, r3, #4
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	685a      	ldr	r2, [r3, #4]
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	681b      	ldr	r3, [r3, #0]
 8019710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019714:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801971a:	4618      	mov	r0, r3
 801971c:	f7fd fdb4 	bl	8017288 <HAL_DMA_GetState>
 8019720:	4603      	mov	r3, r0
 8019722:	2b01      	cmp	r3, #1
 8019724:	d049      	beq.n	80197ba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801972a:	4a69      	ldr	r2, [pc, #420]	; (80198d0 <I2C_Slave_STOPF+0x258>)
 801972c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019732:	4618      	mov	r0, r3
 8019734:	f7fd fbfc 	bl	8016f30 <HAL_DMA_Abort_IT>
 8019738:	4603      	mov	r3, r0
 801973a:	2b00      	cmp	r3, #0
 801973c:	d03d      	beq.n	80197ba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019744:	687a      	ldr	r2, [r7, #4]
 8019746:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8019748:	4610      	mov	r0, r2
 801974a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801974c:	e035      	b.n	80197ba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	685b      	ldr	r3, [r3, #4]
 8019756:	b29a      	uxth	r2, r3
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019760:	b29b      	uxth	r3, r3
 8019762:	2b00      	cmp	r3, #0
 8019764:	d005      	beq.n	8019772 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801976a:	f043 0204 	orr.w	r2, r3, #4
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	685a      	ldr	r2, [r3, #4]
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019780:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019786:	4618      	mov	r0, r3
 8019788:	f7fd fd7e 	bl	8017288 <HAL_DMA_GetState>
 801978c:	4603      	mov	r3, r0
 801978e:	2b01      	cmp	r3, #1
 8019790:	d014      	beq.n	80197bc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019796:	4a4e      	ldr	r2, [pc, #312]	; (80198d0 <I2C_Slave_STOPF+0x258>)
 8019798:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801979e:	4618      	mov	r0, r3
 80197a0:	f7fd fbc6 	bl	8016f30 <HAL_DMA_Abort_IT>
 80197a4:	4603      	mov	r3, r0
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d008      	beq.n	80197bc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80197ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80197b0:	687a      	ldr	r2, [r7, #4]
 80197b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80197b4:	4610      	mov	r0, r2
 80197b6:	4798      	blx	r3
 80197b8:	e000      	b.n	80197bc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80197ba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80197c0:	b29b      	uxth	r3, r3
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d03e      	beq.n	8019844 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	695b      	ldr	r3, [r3, #20]
 80197cc:	f003 0304 	and.w	r3, r3, #4
 80197d0:	2b04      	cmp	r3, #4
 80197d2:	d112      	bne.n	80197fa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	691a      	ldr	r2, [r3, #16]
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197de:	b2d2      	uxtb	r2, r2
 80197e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197e6:	1c5a      	adds	r2, r3, #1
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80197f0:	b29b      	uxth	r3, r3
 80197f2:	3b01      	subs	r3, #1
 80197f4:	b29a      	uxth	r2, r3
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	695b      	ldr	r3, [r3, #20]
 8019800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019804:	2b40      	cmp	r3, #64	; 0x40
 8019806:	d112      	bne.n	801982e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	691a      	ldr	r2, [r3, #16]
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019812:	b2d2      	uxtb	r2, r2
 8019814:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801981a:	1c5a      	adds	r2, r3, #1
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019824:	b29b      	uxth	r3, r3
 8019826:	3b01      	subs	r3, #1
 8019828:	b29a      	uxth	r2, r3
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019832:	b29b      	uxth	r3, r3
 8019834:	2b00      	cmp	r3, #0
 8019836:	d005      	beq.n	8019844 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801983c:	f043 0204 	orr.w	r2, r3, #4
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019848:	2b00      	cmp	r3, #0
 801984a:	d003      	beq.n	8019854 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 801984c:	6878      	ldr	r0, [r7, #4]
 801984e:	f000 f8b3 	bl	80199b8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8019852:	e039      	b.n	80198c8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8019854:	7bfb      	ldrb	r3, [r7, #15]
 8019856:	2b2a      	cmp	r3, #42	; 0x2a
 8019858:	d109      	bne.n	801986e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	2200      	movs	r2, #0
 801985e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	2228      	movs	r2, #40	; 0x28
 8019864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8019868:	6878      	ldr	r0, [r7, #4]
 801986a:	f7ff f827 	bl	80188bc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019874:	b2db      	uxtb	r3, r3
 8019876:	2b28      	cmp	r3, #40	; 0x28
 8019878:	d111      	bne.n	801989e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	4a15      	ldr	r2, [pc, #84]	; (80198d4 <I2C_Slave_STOPF+0x25c>)
 801987e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	2200      	movs	r2, #0
 8019884:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	2220      	movs	r2, #32
 801988a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	2200      	movs	r2, #0
 8019892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8019896:	6878      	ldr	r0, [r7, #4]
 8019898:	f7ff f828 	bl	80188ec <HAL_I2C_ListenCpltCallback>
}
 801989c:	e014      	b.n	80198c8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80198a2:	2b22      	cmp	r3, #34	; 0x22
 80198a4:	d002      	beq.n	80198ac <I2C_Slave_STOPF+0x234>
 80198a6:	7bfb      	ldrb	r3, [r7, #15]
 80198a8:	2b22      	cmp	r3, #34	; 0x22
 80198aa:	d10d      	bne.n	80198c8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	2200      	movs	r2, #0
 80198b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	2220      	movs	r2, #32
 80198b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	2200      	movs	r2, #0
 80198be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80198c2:	6878      	ldr	r0, [r7, #4]
 80198c4:	f7fe fffa 	bl	80188bc <HAL_I2C_SlaveRxCpltCallback>
}
 80198c8:	bf00      	nop
 80198ca:	3710      	adds	r7, #16
 80198cc:	46bd      	mov	sp, r7
 80198ce:	bd80      	pop	{r7, pc}
 80198d0:	08019f19 	.word	0x08019f19
 80198d4:	ffff0000 	.word	0xffff0000

080198d8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80198d8:	b580      	push	{r7, lr}
 80198da:	b084      	sub	sp, #16
 80198dc:	af00      	add	r7, sp, #0
 80198de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80198e6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80198ec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80198ee:	68bb      	ldr	r3, [r7, #8]
 80198f0:	2b08      	cmp	r3, #8
 80198f2:	d002      	beq.n	80198fa <I2C_Slave_AF+0x22>
 80198f4:	68bb      	ldr	r3, [r7, #8]
 80198f6:	2b20      	cmp	r3, #32
 80198f8:	d129      	bne.n	801994e <I2C_Slave_AF+0x76>
 80198fa:	7bfb      	ldrb	r3, [r7, #15]
 80198fc:	2b28      	cmp	r3, #40	; 0x28
 80198fe:	d126      	bne.n	801994e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	4a2c      	ldr	r2, [pc, #176]	; (80199b4 <I2C_Slave_AF+0xdc>)
 8019904:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	685a      	ldr	r2, [r3, #4]
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8019914:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801991e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	681a      	ldr	r2, [r3, #0]
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801992e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	2200      	movs	r2, #0
 8019934:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	2220      	movs	r2, #32
 801993a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	2200      	movs	r2, #0
 8019942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8019946:	6878      	ldr	r0, [r7, #4]
 8019948:	f7fe ffd0 	bl	80188ec <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 801994c:	e02e      	b.n	80199ac <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801994e:	7bfb      	ldrb	r3, [r7, #15]
 8019950:	2b21      	cmp	r3, #33	; 0x21
 8019952:	d126      	bne.n	80199a2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	4a17      	ldr	r2, [pc, #92]	; (80199b4 <I2C_Slave_AF+0xdc>)
 8019958:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	2221      	movs	r2, #33	; 0x21
 801995e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	2220      	movs	r2, #32
 8019964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	2200      	movs	r2, #0
 801996c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	685a      	ldr	r2, [r3, #4]
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801997e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019988:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	681a      	ldr	r2, [r3, #0]
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019998:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801999a:	6878      	ldr	r0, [r7, #4]
 801999c:	f7fe ff84 	bl	80188a8 <HAL_I2C_SlaveTxCpltCallback>
}
 80199a0:	e004      	b.n	80199ac <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80199aa:	615a      	str	r2, [r3, #20]
}
 80199ac:	bf00      	nop
 80199ae:	3710      	adds	r7, #16
 80199b0:	46bd      	mov	sp, r7
 80199b2:	bd80      	pop	{r7, pc}
 80199b4:	ffff0000 	.word	0xffff0000

080199b8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b084      	sub	sp, #16
 80199bc:	af00      	add	r7, sp, #0
 80199be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80199c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80199ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80199d0:	7bbb      	ldrb	r3, [r7, #14]
 80199d2:	2b10      	cmp	r3, #16
 80199d4:	d002      	beq.n	80199dc <I2C_ITError+0x24>
 80199d6:	7bbb      	ldrb	r3, [r7, #14]
 80199d8:	2b40      	cmp	r3, #64	; 0x40
 80199da:	d10a      	bne.n	80199f2 <I2C_ITError+0x3a>
 80199dc:	7bfb      	ldrb	r3, [r7, #15]
 80199de:	2b22      	cmp	r3, #34	; 0x22
 80199e0:	d107      	bne.n	80199f2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	681a      	ldr	r2, [r3, #0]
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80199f0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80199f2:	7bfb      	ldrb	r3, [r7, #15]
 80199f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80199f8:	2b28      	cmp	r3, #40	; 0x28
 80199fa:	d107      	bne.n	8019a0c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	2200      	movs	r2, #0
 8019a00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	2228      	movs	r2, #40	; 0x28
 8019a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8019a0a:	e015      	b.n	8019a38 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	685b      	ldr	r3, [r3, #4]
 8019a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019a1a:	d00a      	beq.n	8019a32 <I2C_ITError+0x7a>
 8019a1c:	7bfb      	ldrb	r3, [r7, #15]
 8019a1e:	2b60      	cmp	r3, #96	; 0x60
 8019a20:	d007      	beq.n	8019a32 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	2220      	movs	r2, #32
 8019a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	2200      	movs	r2, #0
 8019a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	2200      	movs	r2, #0
 8019a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	685b      	ldr	r3, [r3, #4]
 8019a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019a46:	d162      	bne.n	8019b0e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	685a      	ldr	r2, [r3, #4]
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019a56:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019a60:	b2db      	uxtb	r3, r3
 8019a62:	2b01      	cmp	r3, #1
 8019a64:	d020      	beq.n	8019aa8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a6a:	4a6a      	ldr	r2, [pc, #424]	; (8019c14 <I2C_ITError+0x25c>)
 8019a6c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a72:	4618      	mov	r0, r3
 8019a74:	f7fd fa5c 	bl	8016f30 <HAL_DMA_Abort_IT>
 8019a78:	4603      	mov	r3, r0
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	f000 8089 	beq.w	8019b92 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	681a      	ldr	r2, [r3, #0]
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	f022 0201 	bic.w	r2, r2, #1
 8019a8e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	2220      	movs	r2, #32
 8019a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a9e:	687a      	ldr	r2, [r7, #4]
 8019aa0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8019aa2:	4610      	mov	r0, r2
 8019aa4:	4798      	blx	r3
 8019aa6:	e074      	b.n	8019b92 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019aac:	4a59      	ldr	r2, [pc, #356]	; (8019c14 <I2C_ITError+0x25c>)
 8019aae:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	f7fd fa3b 	bl	8016f30 <HAL_DMA_Abort_IT>
 8019aba:	4603      	mov	r3, r0
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d068      	beq.n	8019b92 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	695b      	ldr	r3, [r3, #20]
 8019ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019aca:	2b40      	cmp	r3, #64	; 0x40
 8019acc:	d10b      	bne.n	8019ae6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	691a      	ldr	r2, [r3, #16]
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ad8:	b2d2      	uxtb	r2, r2
 8019ada:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ae0:	1c5a      	adds	r2, r3, #1
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	681a      	ldr	r2, [r3, #0]
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	f022 0201 	bic.w	r2, r2, #1
 8019af4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	2220      	movs	r2, #32
 8019afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019b04:	687a      	ldr	r2, [r7, #4]
 8019b06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8019b08:	4610      	mov	r0, r2
 8019b0a:	4798      	blx	r3
 8019b0c:	e041      	b.n	8019b92 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019b14:	b2db      	uxtb	r3, r3
 8019b16:	2b60      	cmp	r3, #96	; 0x60
 8019b18:	d125      	bne.n	8019b66 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	2220      	movs	r2, #32
 8019b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	2200      	movs	r2, #0
 8019b26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	695b      	ldr	r3, [r3, #20]
 8019b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019b32:	2b40      	cmp	r3, #64	; 0x40
 8019b34:	d10b      	bne.n	8019b4e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	681b      	ldr	r3, [r3, #0]
 8019b3a:	691a      	ldr	r2, [r3, #16]
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b40:	b2d2      	uxtb	r2, r2
 8019b42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b48:	1c5a      	adds	r2, r3, #1
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	681a      	ldr	r2, [r3, #0]
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	f022 0201 	bic.w	r2, r2, #1
 8019b5c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8019b5e:	6878      	ldr	r0, [r7, #4]
 8019b60:	f7fe feec 	bl	801893c <HAL_I2C_AbortCpltCallback>
 8019b64:	e015      	b.n	8019b92 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	695b      	ldr	r3, [r3, #20]
 8019b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019b70:	2b40      	cmp	r3, #64	; 0x40
 8019b72:	d10b      	bne.n	8019b8c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	691a      	ldr	r2, [r3, #16]
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b7e:	b2d2      	uxtb	r2, r2
 8019b80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b86:	1c5a      	adds	r2, r3, #1
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8019b8c:	6878      	ldr	r0, [r7, #4]
 8019b8e:	f7fe fecb 	bl	8018928 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b96:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8019b98:	68bb      	ldr	r3, [r7, #8]
 8019b9a:	f003 0301 	and.w	r3, r3, #1
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d10e      	bne.n	8019bc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8019ba2:	68bb      	ldr	r3, [r7, #8]
 8019ba4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d109      	bne.n	8019bc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8019bac:	68bb      	ldr	r3, [r7, #8]
 8019bae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d104      	bne.n	8019bc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8019bb6:	68bb      	ldr	r3, [r7, #8]
 8019bb8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d007      	beq.n	8019bd0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	685a      	ldr	r2, [r3, #4]
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8019bce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019bd6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019bdc:	f003 0304 	and.w	r3, r3, #4
 8019be0:	2b04      	cmp	r3, #4
 8019be2:	d113      	bne.n	8019c0c <I2C_ITError+0x254>
 8019be4:	7bfb      	ldrb	r3, [r7, #15]
 8019be6:	2b28      	cmp	r3, #40	; 0x28
 8019be8:	d110      	bne.n	8019c0c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	4a0a      	ldr	r2, [pc, #40]	; (8019c18 <I2C_ITError+0x260>)
 8019bee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	2200      	movs	r2, #0
 8019bf4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	2220      	movs	r2, #32
 8019bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	2200      	movs	r2, #0
 8019c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8019c06:	6878      	ldr	r0, [r7, #4]
 8019c08:	f7fe fe70 	bl	80188ec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019c0c:	bf00      	nop
 8019c0e:	3710      	adds	r7, #16
 8019c10:	46bd      	mov	sp, r7
 8019c12:	bd80      	pop	{r7, pc}
 8019c14:	08019f19 	.word	0x08019f19
 8019c18:	ffff0000 	.word	0xffff0000

08019c1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8019c1c:	b580      	push	{r7, lr}
 8019c1e:	b088      	sub	sp, #32
 8019c20:	af02      	add	r7, sp, #8
 8019c22:	60f8      	str	r0, [r7, #12]
 8019c24:	4608      	mov	r0, r1
 8019c26:	4611      	mov	r1, r2
 8019c28:	461a      	mov	r2, r3
 8019c2a:	4603      	mov	r3, r0
 8019c2c:	817b      	strh	r3, [r7, #10]
 8019c2e:	460b      	mov	r3, r1
 8019c30:	813b      	strh	r3, [r7, #8]
 8019c32:	4613      	mov	r3, r2
 8019c34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	681a      	ldr	r2, [r3, #0]
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019c44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c48:	9300      	str	r3, [sp, #0]
 8019c4a:	6a3b      	ldr	r3, [r7, #32]
 8019c4c:	2200      	movs	r2, #0
 8019c4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019c52:	68f8      	ldr	r0, [r7, #12]
 8019c54:	f000 fa08 	bl	801a068 <I2C_WaitOnFlagUntilTimeout>
 8019c58:	4603      	mov	r3, r0
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d00d      	beq.n	8019c7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8019c5e:	68fb      	ldr	r3, [r7, #12]
 8019c60:	681b      	ldr	r3, [r3, #0]
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019c6c:	d103      	bne.n	8019c76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019c74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019c76:	2303      	movs	r3, #3
 8019c78:	e05f      	b.n	8019d3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8019c7a:	897b      	ldrh	r3, [r7, #10]
 8019c7c:	b2db      	uxtb	r3, r3
 8019c7e:	461a      	mov	r2, r3
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8019c88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c8c:	6a3a      	ldr	r2, [r7, #32]
 8019c8e:	492d      	ldr	r1, [pc, #180]	; (8019d44 <I2C_RequestMemoryWrite+0x128>)
 8019c90:	68f8      	ldr	r0, [r7, #12]
 8019c92:	f000 fa40 	bl	801a116 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019c96:	4603      	mov	r3, r0
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d001      	beq.n	8019ca0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8019c9c:	2301      	movs	r3, #1
 8019c9e:	e04c      	b.n	8019d3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019ca0:	2300      	movs	r3, #0
 8019ca2:	617b      	str	r3, [r7, #20]
 8019ca4:	68fb      	ldr	r3, [r7, #12]
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	695b      	ldr	r3, [r3, #20]
 8019caa:	617b      	str	r3, [r7, #20]
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	699b      	ldr	r3, [r3, #24]
 8019cb2:	617b      	str	r3, [r7, #20]
 8019cb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019cb8:	6a39      	ldr	r1, [r7, #32]
 8019cba:	68f8      	ldr	r0, [r7, #12]
 8019cbc:	f000 faaa 	bl	801a214 <I2C_WaitOnTXEFlagUntilTimeout>
 8019cc0:	4603      	mov	r3, r0
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d00d      	beq.n	8019ce2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019cca:	2b04      	cmp	r3, #4
 8019ccc:	d107      	bne.n	8019cde <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019cce:	68fb      	ldr	r3, [r7, #12]
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	681a      	ldr	r2, [r3, #0]
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019cdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8019cde:	2301      	movs	r3, #1
 8019ce0:	e02b      	b.n	8019d3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8019ce2:	88fb      	ldrh	r3, [r7, #6]
 8019ce4:	2b01      	cmp	r3, #1
 8019ce6:	d105      	bne.n	8019cf4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019ce8:	893b      	ldrh	r3, [r7, #8]
 8019cea:	b2da      	uxtb	r2, r3
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	611a      	str	r2, [r3, #16]
 8019cf2:	e021      	b.n	8019d38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8019cf4:	893b      	ldrh	r3, [r7, #8]
 8019cf6:	0a1b      	lsrs	r3, r3, #8
 8019cf8:	b29b      	uxth	r3, r3
 8019cfa:	b2da      	uxtb	r2, r3
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d04:	6a39      	ldr	r1, [r7, #32]
 8019d06:	68f8      	ldr	r0, [r7, #12]
 8019d08:	f000 fa84 	bl	801a214 <I2C_WaitOnTXEFlagUntilTimeout>
 8019d0c:	4603      	mov	r3, r0
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d00d      	beq.n	8019d2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019d12:	68fb      	ldr	r3, [r7, #12]
 8019d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d16:	2b04      	cmp	r3, #4
 8019d18:	d107      	bne.n	8019d2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	681a      	ldr	r2, [r3, #0]
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019d28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8019d2a:	2301      	movs	r3, #1
 8019d2c:	e005      	b.n	8019d3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019d2e:	893b      	ldrh	r3, [r7, #8]
 8019d30:	b2da      	uxtb	r2, r3
 8019d32:	68fb      	ldr	r3, [r7, #12]
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8019d38:	2300      	movs	r3, #0
}
 8019d3a:	4618      	mov	r0, r3
 8019d3c:	3718      	adds	r7, #24
 8019d3e:	46bd      	mov	sp, r7
 8019d40:	bd80      	pop	{r7, pc}
 8019d42:	bf00      	nop
 8019d44:	00010002 	.word	0x00010002

08019d48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b088      	sub	sp, #32
 8019d4c:	af02      	add	r7, sp, #8
 8019d4e:	60f8      	str	r0, [r7, #12]
 8019d50:	4608      	mov	r0, r1
 8019d52:	4611      	mov	r1, r2
 8019d54:	461a      	mov	r2, r3
 8019d56:	4603      	mov	r3, r0
 8019d58:	817b      	strh	r3, [r7, #10]
 8019d5a:	460b      	mov	r3, r1
 8019d5c:	813b      	strh	r3, [r7, #8]
 8019d5e:	4613      	mov	r3, r2
 8019d60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019d62:	68fb      	ldr	r3, [r7, #12]
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	681a      	ldr	r2, [r3, #0]
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019d70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019d72:	68fb      	ldr	r3, [r7, #12]
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	681a      	ldr	r2, [r3, #0]
 8019d78:	68fb      	ldr	r3, [r7, #12]
 8019d7a:	681b      	ldr	r3, [r3, #0]
 8019d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019d80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d84:	9300      	str	r3, [sp, #0]
 8019d86:	6a3b      	ldr	r3, [r7, #32]
 8019d88:	2200      	movs	r2, #0
 8019d8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019d8e:	68f8      	ldr	r0, [r7, #12]
 8019d90:	f000 f96a 	bl	801a068 <I2C_WaitOnFlagUntilTimeout>
 8019d94:	4603      	mov	r3, r0
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d00d      	beq.n	8019db6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8019d9a:	68fb      	ldr	r3, [r7, #12]
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019da8:	d103      	bne.n	8019db2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8019daa:	68fb      	ldr	r3, [r7, #12]
 8019dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019db0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019db2:	2303      	movs	r3, #3
 8019db4:	e0aa      	b.n	8019f0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8019db6:	897b      	ldrh	r3, [r7, #10]
 8019db8:	b2db      	uxtb	r3, r3
 8019dba:	461a      	mov	r2, r3
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8019dc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dc8:	6a3a      	ldr	r2, [r7, #32]
 8019dca:	4952      	ldr	r1, [pc, #328]	; (8019f14 <I2C_RequestMemoryRead+0x1cc>)
 8019dcc:	68f8      	ldr	r0, [r7, #12]
 8019dce:	f000 f9a2 	bl	801a116 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019dd2:	4603      	mov	r3, r0
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d001      	beq.n	8019ddc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8019dd8:	2301      	movs	r3, #1
 8019dda:	e097      	b.n	8019f0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019ddc:	2300      	movs	r3, #0
 8019dde:	617b      	str	r3, [r7, #20]
 8019de0:	68fb      	ldr	r3, [r7, #12]
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	695b      	ldr	r3, [r3, #20]
 8019de6:	617b      	str	r3, [r7, #20]
 8019de8:	68fb      	ldr	r3, [r7, #12]
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	699b      	ldr	r3, [r3, #24]
 8019dee:	617b      	str	r3, [r7, #20]
 8019df0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019df4:	6a39      	ldr	r1, [r7, #32]
 8019df6:	68f8      	ldr	r0, [r7, #12]
 8019df8:	f000 fa0c 	bl	801a214 <I2C_WaitOnTXEFlagUntilTimeout>
 8019dfc:	4603      	mov	r3, r0
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d00d      	beq.n	8019e1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019e02:	68fb      	ldr	r3, [r7, #12]
 8019e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019e06:	2b04      	cmp	r3, #4
 8019e08:	d107      	bne.n	8019e1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019e0a:	68fb      	ldr	r3, [r7, #12]
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	681a      	ldr	r2, [r3, #0]
 8019e10:	68fb      	ldr	r3, [r7, #12]
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019e18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8019e1a:	2301      	movs	r3, #1
 8019e1c:	e076      	b.n	8019f0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8019e1e:	88fb      	ldrh	r3, [r7, #6]
 8019e20:	2b01      	cmp	r3, #1
 8019e22:	d105      	bne.n	8019e30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019e24:	893b      	ldrh	r3, [r7, #8]
 8019e26:	b2da      	uxtb	r2, r3
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	681b      	ldr	r3, [r3, #0]
 8019e2c:	611a      	str	r2, [r3, #16]
 8019e2e:	e021      	b.n	8019e74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8019e30:	893b      	ldrh	r3, [r7, #8]
 8019e32:	0a1b      	lsrs	r3, r3, #8
 8019e34:	b29b      	uxth	r3, r3
 8019e36:	b2da      	uxtb	r2, r3
 8019e38:	68fb      	ldr	r3, [r7, #12]
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e40:	6a39      	ldr	r1, [r7, #32]
 8019e42:	68f8      	ldr	r0, [r7, #12]
 8019e44:	f000 f9e6 	bl	801a214 <I2C_WaitOnTXEFlagUntilTimeout>
 8019e48:	4603      	mov	r3, r0
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d00d      	beq.n	8019e6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019e52:	2b04      	cmp	r3, #4
 8019e54:	d107      	bne.n	8019e66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019e56:	68fb      	ldr	r3, [r7, #12]
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	681a      	ldr	r2, [r3, #0]
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019e64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8019e66:	2301      	movs	r3, #1
 8019e68:	e050      	b.n	8019f0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019e6a:	893b      	ldrh	r3, [r7, #8]
 8019e6c:	b2da      	uxtb	r2, r3
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	681b      	ldr	r3, [r3, #0]
 8019e72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e76:	6a39      	ldr	r1, [r7, #32]
 8019e78:	68f8      	ldr	r0, [r7, #12]
 8019e7a:	f000 f9cb 	bl	801a214 <I2C_WaitOnTXEFlagUntilTimeout>
 8019e7e:	4603      	mov	r3, r0
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	d00d      	beq.n	8019ea0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019e88:	2b04      	cmp	r3, #4
 8019e8a:	d107      	bne.n	8019e9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	681a      	ldr	r2, [r3, #0]
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019e9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8019e9c:	2301      	movs	r3, #1
 8019e9e:	e035      	b.n	8019f0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	681a      	ldr	r2, [r3, #0]
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019eae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eb2:	9300      	str	r3, [sp, #0]
 8019eb4:	6a3b      	ldr	r3, [r7, #32]
 8019eb6:	2200      	movs	r2, #0
 8019eb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019ebc:	68f8      	ldr	r0, [r7, #12]
 8019ebe:	f000 f8d3 	bl	801a068 <I2C_WaitOnFlagUntilTimeout>
 8019ec2:	4603      	mov	r3, r0
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d00d      	beq.n	8019ee4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	681b      	ldr	r3, [r3, #0]
 8019ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019ed6:	d103      	bne.n	8019ee0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019ede:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019ee0:	2303      	movs	r3, #3
 8019ee2:	e013      	b.n	8019f0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8019ee4:	897b      	ldrh	r3, [r7, #10]
 8019ee6:	b2db      	uxtb	r3, r3
 8019ee8:	f043 0301 	orr.w	r3, r3, #1
 8019eec:	b2da      	uxtb	r2, r3
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ef6:	6a3a      	ldr	r2, [r7, #32]
 8019ef8:	4906      	ldr	r1, [pc, #24]	; (8019f14 <I2C_RequestMemoryRead+0x1cc>)
 8019efa:	68f8      	ldr	r0, [r7, #12]
 8019efc:	f000 f90b 	bl	801a116 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019f00:	4603      	mov	r3, r0
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d001      	beq.n	8019f0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8019f06:	2301      	movs	r3, #1
 8019f08:	e000      	b.n	8019f0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8019f0a:	2300      	movs	r3, #0
}
 8019f0c:	4618      	mov	r0, r3
 8019f0e:	3718      	adds	r7, #24
 8019f10:	46bd      	mov	sp, r7
 8019f12:	bd80      	pop	{r7, pc}
 8019f14:	00010002 	.word	0x00010002

08019f18 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8019f18:	b580      	push	{r7, lr}
 8019f1a:	b086      	sub	sp, #24
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019f20:	2300      	movs	r3, #0
 8019f22:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f28:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019f2a:	697b      	ldr	r3, [r7, #20]
 8019f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019f30:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8019f32:	4b4b      	ldr	r3, [pc, #300]	; (801a060 <I2C_DMAAbort+0x148>)
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	08db      	lsrs	r3, r3, #3
 8019f38:	4a4a      	ldr	r2, [pc, #296]	; (801a064 <I2C_DMAAbort+0x14c>)
 8019f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8019f3e:	0a1a      	lsrs	r2, r3, #8
 8019f40:	4613      	mov	r3, r2
 8019f42:	009b      	lsls	r3, r3, #2
 8019f44:	4413      	add	r3, r2
 8019f46:	00da      	lsls	r2, r3, #3
 8019f48:	1ad3      	subs	r3, r2, r3
 8019f4a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	d106      	bne.n	8019f60 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019f52:	697b      	ldr	r3, [r7, #20]
 8019f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f56:	f043 0220 	orr.w	r2, r3, #32
 8019f5a:	697b      	ldr	r3, [r7, #20]
 8019f5c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8019f5e:	e00a      	b.n	8019f76 <I2C_DMAAbort+0x5e>
    }
    count--;
 8019f60:	68fb      	ldr	r3, [r7, #12]
 8019f62:	3b01      	subs	r3, #1
 8019f64:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8019f66:	697b      	ldr	r3, [r7, #20]
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019f74:	d0ea      	beq.n	8019f4c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8019f76:	697b      	ldr	r3, [r7, #20]
 8019f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d003      	beq.n	8019f86 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8019f7e:	697b      	ldr	r3, [r7, #20]
 8019f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019f82:	2200      	movs	r2, #0
 8019f84:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8019f86:	697b      	ldr	r3, [r7, #20]
 8019f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d003      	beq.n	8019f96 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8019f8e:	697b      	ldr	r3, [r7, #20]
 8019f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f92:	2200      	movs	r2, #0
 8019f94:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019f96:	697b      	ldr	r3, [r7, #20]
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	681a      	ldr	r2, [r3, #0]
 8019f9c:	697b      	ldr	r3, [r7, #20]
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019fa4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8019fa6:	697b      	ldr	r3, [r7, #20]
 8019fa8:	2200      	movs	r2, #0
 8019faa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8019fac:	697b      	ldr	r3, [r7, #20]
 8019fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d003      	beq.n	8019fbc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8019fb4:	697b      	ldr	r3, [r7, #20]
 8019fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019fb8:	2200      	movs	r2, #0
 8019fba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8019fbc:	697b      	ldr	r3, [r7, #20]
 8019fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d003      	beq.n	8019fcc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8019fc4:	697b      	ldr	r3, [r7, #20]
 8019fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019fc8:	2200      	movs	r2, #0
 8019fca:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8019fcc:	697b      	ldr	r3, [r7, #20]
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	681a      	ldr	r2, [r3, #0]
 8019fd2:	697b      	ldr	r3, [r7, #20]
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	f022 0201 	bic.w	r2, r2, #1
 8019fda:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8019fdc:	697b      	ldr	r3, [r7, #20]
 8019fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019fe2:	b2db      	uxtb	r3, r3
 8019fe4:	2b60      	cmp	r3, #96	; 0x60
 8019fe6:	d10e      	bne.n	801a006 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8019fe8:	697b      	ldr	r3, [r7, #20]
 8019fea:	2220      	movs	r2, #32
 8019fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019ff0:	697b      	ldr	r3, [r7, #20]
 8019ff2:	2200      	movs	r2, #0
 8019ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8019ff8:	697b      	ldr	r3, [r7, #20]
 8019ffa:	2200      	movs	r2, #0
 8019ffc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8019ffe:	6978      	ldr	r0, [r7, #20]
 801a000:	f7fe fc9c 	bl	801893c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801a004:	e027      	b.n	801a056 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801a006:	7cfb      	ldrb	r3, [r7, #19]
 801a008:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801a00c:	2b28      	cmp	r3, #40	; 0x28
 801a00e:	d117      	bne.n	801a040 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 801a010:	697b      	ldr	r3, [r7, #20]
 801a012:	681b      	ldr	r3, [r3, #0]
 801a014:	681a      	ldr	r2, [r3, #0]
 801a016:	697b      	ldr	r3, [r7, #20]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	f042 0201 	orr.w	r2, r2, #1
 801a01e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801a020:	697b      	ldr	r3, [r7, #20]
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	681a      	ldr	r2, [r3, #0]
 801a026:	697b      	ldr	r3, [r7, #20]
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801a02e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801a030:	697b      	ldr	r3, [r7, #20]
 801a032:	2200      	movs	r2, #0
 801a034:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801a036:	697b      	ldr	r3, [r7, #20]
 801a038:	2228      	movs	r2, #40	; 0x28
 801a03a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801a03e:	e007      	b.n	801a050 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 801a040:	697b      	ldr	r3, [r7, #20]
 801a042:	2220      	movs	r2, #32
 801a044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801a048:	697b      	ldr	r3, [r7, #20]
 801a04a:	2200      	movs	r2, #0
 801a04c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 801a050:	6978      	ldr	r0, [r7, #20]
 801a052:	f7fe fc69 	bl	8018928 <HAL_I2C_ErrorCallback>
}
 801a056:	bf00      	nop
 801a058:	3718      	adds	r7, #24
 801a05a:	46bd      	mov	sp, r7
 801a05c:	bd80      	pop	{r7, pc}
 801a05e:	bf00      	nop
 801a060:	20000230 	.word	0x20000230
 801a064:	14f8b589 	.word	0x14f8b589

0801a068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801a068:	b580      	push	{r7, lr}
 801a06a:	b084      	sub	sp, #16
 801a06c:	af00      	add	r7, sp, #0
 801a06e:	60f8      	str	r0, [r7, #12]
 801a070:	60b9      	str	r1, [r7, #8]
 801a072:	603b      	str	r3, [r7, #0]
 801a074:	4613      	mov	r3, r2
 801a076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a078:	e025      	b.n	801a0c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a07a:	683b      	ldr	r3, [r7, #0]
 801a07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a080:	d021      	beq.n	801a0c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a082:	f7fc fc9d 	bl	80169c0 <HAL_GetTick>
 801a086:	4602      	mov	r2, r0
 801a088:	69bb      	ldr	r3, [r7, #24]
 801a08a:	1ad3      	subs	r3, r2, r3
 801a08c:	683a      	ldr	r2, [r7, #0]
 801a08e:	429a      	cmp	r2, r3
 801a090:	d302      	bcc.n	801a098 <I2C_WaitOnFlagUntilTimeout+0x30>
 801a092:	683b      	ldr	r3, [r7, #0]
 801a094:	2b00      	cmp	r3, #0
 801a096:	d116      	bne.n	801a0c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	2200      	movs	r2, #0
 801a09c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	2220      	movs	r2, #32
 801a0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	2200      	movs	r2, #0
 801a0aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0b2:	f043 0220 	orr.w	r2, r3, #32
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a0ba:	68fb      	ldr	r3, [r7, #12]
 801a0bc:	2200      	movs	r2, #0
 801a0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801a0c2:	2301      	movs	r3, #1
 801a0c4:	e023      	b.n	801a10e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a0c6:	68bb      	ldr	r3, [r7, #8]
 801a0c8:	0c1b      	lsrs	r3, r3, #16
 801a0ca:	b2db      	uxtb	r3, r3
 801a0cc:	2b01      	cmp	r3, #1
 801a0ce:	d10d      	bne.n	801a0ec <I2C_WaitOnFlagUntilTimeout+0x84>
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	681b      	ldr	r3, [r3, #0]
 801a0d4:	695b      	ldr	r3, [r3, #20]
 801a0d6:	43da      	mvns	r2, r3
 801a0d8:	68bb      	ldr	r3, [r7, #8]
 801a0da:	4013      	ands	r3, r2
 801a0dc:	b29b      	uxth	r3, r3
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	bf0c      	ite	eq
 801a0e2:	2301      	moveq	r3, #1
 801a0e4:	2300      	movne	r3, #0
 801a0e6:	b2db      	uxtb	r3, r3
 801a0e8:	461a      	mov	r2, r3
 801a0ea:	e00c      	b.n	801a106 <I2C_WaitOnFlagUntilTimeout+0x9e>
 801a0ec:	68fb      	ldr	r3, [r7, #12]
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	699b      	ldr	r3, [r3, #24]
 801a0f2:	43da      	mvns	r2, r3
 801a0f4:	68bb      	ldr	r3, [r7, #8]
 801a0f6:	4013      	ands	r3, r2
 801a0f8:	b29b      	uxth	r3, r3
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	bf0c      	ite	eq
 801a0fe:	2301      	moveq	r3, #1
 801a100:	2300      	movne	r3, #0
 801a102:	b2db      	uxtb	r3, r3
 801a104:	461a      	mov	r2, r3
 801a106:	79fb      	ldrb	r3, [r7, #7]
 801a108:	429a      	cmp	r2, r3
 801a10a:	d0b6      	beq.n	801a07a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801a10c:	2300      	movs	r3, #0
}
 801a10e:	4618      	mov	r0, r3
 801a110:	3710      	adds	r7, #16
 801a112:	46bd      	mov	sp, r7
 801a114:	bd80      	pop	{r7, pc}

0801a116 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801a116:	b580      	push	{r7, lr}
 801a118:	b084      	sub	sp, #16
 801a11a:	af00      	add	r7, sp, #0
 801a11c:	60f8      	str	r0, [r7, #12]
 801a11e:	60b9      	str	r1, [r7, #8]
 801a120:	607a      	str	r2, [r7, #4]
 801a122:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801a124:	e051      	b.n	801a1ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801a126:	68fb      	ldr	r3, [r7, #12]
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	695b      	ldr	r3, [r3, #20]
 801a12c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a134:	d123      	bne.n	801a17e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801a136:	68fb      	ldr	r3, [r7, #12]
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	681a      	ldr	r2, [r3, #0]
 801a13c:	68fb      	ldr	r3, [r7, #12]
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a144:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801a14e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	2200      	movs	r2, #0
 801a154:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801a156:	68fb      	ldr	r3, [r7, #12]
 801a158:	2220      	movs	r2, #32
 801a15a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	2200      	movs	r2, #0
 801a162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a16a:	f043 0204 	orr.w	r2, r3, #4
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a172:	68fb      	ldr	r3, [r7, #12]
 801a174:	2200      	movs	r2, #0
 801a176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801a17a:	2301      	movs	r3, #1
 801a17c:	e046      	b.n	801a20c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a184:	d021      	beq.n	801a1ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a186:	f7fc fc1b 	bl	80169c0 <HAL_GetTick>
 801a18a:	4602      	mov	r2, r0
 801a18c:	683b      	ldr	r3, [r7, #0]
 801a18e:	1ad3      	subs	r3, r2, r3
 801a190:	687a      	ldr	r2, [r7, #4]
 801a192:	429a      	cmp	r2, r3
 801a194:	d302      	bcc.n	801a19c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d116      	bne.n	801a1ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801a19c:	68fb      	ldr	r3, [r7, #12]
 801a19e:	2200      	movs	r2, #0
 801a1a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801a1a2:	68fb      	ldr	r3, [r7, #12]
 801a1a4:	2220      	movs	r2, #32
 801a1a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	2200      	movs	r2, #0
 801a1ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1b6:	f043 0220 	orr.w	r2, r3, #32
 801a1ba:	68fb      	ldr	r3, [r7, #12]
 801a1bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	2200      	movs	r2, #0
 801a1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801a1c6:	2301      	movs	r3, #1
 801a1c8:	e020      	b.n	801a20c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801a1ca:	68bb      	ldr	r3, [r7, #8]
 801a1cc:	0c1b      	lsrs	r3, r3, #16
 801a1ce:	b2db      	uxtb	r3, r3
 801a1d0:	2b01      	cmp	r3, #1
 801a1d2:	d10c      	bne.n	801a1ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 801a1d4:	68fb      	ldr	r3, [r7, #12]
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	695b      	ldr	r3, [r3, #20]
 801a1da:	43da      	mvns	r2, r3
 801a1dc:	68bb      	ldr	r3, [r7, #8]
 801a1de:	4013      	ands	r3, r2
 801a1e0:	b29b      	uxth	r3, r3
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	bf14      	ite	ne
 801a1e6:	2301      	movne	r3, #1
 801a1e8:	2300      	moveq	r3, #0
 801a1ea:	b2db      	uxtb	r3, r3
 801a1ec:	e00b      	b.n	801a206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801a1ee:	68fb      	ldr	r3, [r7, #12]
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	699b      	ldr	r3, [r3, #24]
 801a1f4:	43da      	mvns	r2, r3
 801a1f6:	68bb      	ldr	r3, [r7, #8]
 801a1f8:	4013      	ands	r3, r2
 801a1fa:	b29b      	uxth	r3, r3
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	bf14      	ite	ne
 801a200:	2301      	movne	r3, #1
 801a202:	2300      	moveq	r3, #0
 801a204:	b2db      	uxtb	r3, r3
 801a206:	2b00      	cmp	r3, #0
 801a208:	d18d      	bne.n	801a126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801a20a:	2300      	movs	r3, #0
}
 801a20c:	4618      	mov	r0, r3
 801a20e:	3710      	adds	r7, #16
 801a210:	46bd      	mov	sp, r7
 801a212:	bd80      	pop	{r7, pc}

0801a214 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a214:	b580      	push	{r7, lr}
 801a216:	b084      	sub	sp, #16
 801a218:	af00      	add	r7, sp, #0
 801a21a:	60f8      	str	r0, [r7, #12]
 801a21c:	60b9      	str	r1, [r7, #8]
 801a21e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801a220:	e02d      	b.n	801a27e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801a222:	68f8      	ldr	r0, [r7, #12]
 801a224:	f000 f900 	bl	801a428 <I2C_IsAcknowledgeFailed>
 801a228:	4603      	mov	r3, r0
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d001      	beq.n	801a232 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801a22e:	2301      	movs	r3, #1
 801a230:	e02d      	b.n	801a28e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a232:	68bb      	ldr	r3, [r7, #8]
 801a234:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a238:	d021      	beq.n	801a27e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a23a:	f7fc fbc1 	bl	80169c0 <HAL_GetTick>
 801a23e:	4602      	mov	r2, r0
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	1ad3      	subs	r3, r2, r3
 801a244:	68ba      	ldr	r2, [r7, #8]
 801a246:	429a      	cmp	r2, r3
 801a248:	d302      	bcc.n	801a250 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801a24a:	68bb      	ldr	r3, [r7, #8]
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d116      	bne.n	801a27e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801a250:	68fb      	ldr	r3, [r7, #12]
 801a252:	2200      	movs	r2, #0
 801a254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	2220      	movs	r2, #32
 801a25a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	2200      	movs	r2, #0
 801a262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a26a:	f043 0220 	orr.w	r2, r3, #32
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a272:	68fb      	ldr	r3, [r7, #12]
 801a274:	2200      	movs	r2, #0
 801a276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801a27a:	2301      	movs	r3, #1
 801a27c:	e007      	b.n	801a28e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	695b      	ldr	r3, [r3, #20]
 801a284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a288:	2b80      	cmp	r3, #128	; 0x80
 801a28a:	d1ca      	bne.n	801a222 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801a28c:	2300      	movs	r3, #0
}
 801a28e:	4618      	mov	r0, r3
 801a290:	3710      	adds	r7, #16
 801a292:	46bd      	mov	sp, r7
 801a294:	bd80      	pop	{r7, pc}

0801a296 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a296:	b580      	push	{r7, lr}
 801a298:	b084      	sub	sp, #16
 801a29a:	af00      	add	r7, sp, #0
 801a29c:	60f8      	str	r0, [r7, #12]
 801a29e:	60b9      	str	r1, [r7, #8]
 801a2a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801a2a2:	e02d      	b.n	801a300 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801a2a4:	68f8      	ldr	r0, [r7, #12]
 801a2a6:	f000 f8bf 	bl	801a428 <I2C_IsAcknowledgeFailed>
 801a2aa:	4603      	mov	r3, r0
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d001      	beq.n	801a2b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801a2b0:	2301      	movs	r3, #1
 801a2b2:	e02d      	b.n	801a310 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a2b4:	68bb      	ldr	r3, [r7, #8]
 801a2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2ba:	d021      	beq.n	801a300 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a2bc:	f7fc fb80 	bl	80169c0 <HAL_GetTick>
 801a2c0:	4602      	mov	r2, r0
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	1ad3      	subs	r3, r2, r3
 801a2c6:	68ba      	ldr	r2, [r7, #8]
 801a2c8:	429a      	cmp	r2, r3
 801a2ca:	d302      	bcc.n	801a2d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801a2cc:	68bb      	ldr	r3, [r7, #8]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d116      	bne.n	801a300 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	2200      	movs	r2, #0
 801a2d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801a2d8:	68fb      	ldr	r3, [r7, #12]
 801a2da:	2220      	movs	r2, #32
 801a2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	2200      	movs	r2, #0
 801a2e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801a2e8:	68fb      	ldr	r3, [r7, #12]
 801a2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a2ec:	f043 0220 	orr.w	r2, r3, #32
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	2200      	movs	r2, #0
 801a2f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801a2fc:	2301      	movs	r3, #1
 801a2fe:	e007      	b.n	801a310 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	695b      	ldr	r3, [r3, #20]
 801a306:	f003 0304 	and.w	r3, r3, #4
 801a30a:	2b04      	cmp	r3, #4
 801a30c:	d1ca      	bne.n	801a2a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801a30e:	2300      	movs	r3, #0
}
 801a310:	4618      	mov	r0, r3
 801a312:	3710      	adds	r7, #16
 801a314:	46bd      	mov	sp, r7
 801a316:	bd80      	pop	{r7, pc}

0801a318 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 801a318:	b480      	push	{r7}
 801a31a:	b085      	sub	sp, #20
 801a31c:	af00      	add	r7, sp, #0
 801a31e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801a320:	2300      	movs	r3, #0
 801a322:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 801a324:	4b13      	ldr	r3, [pc, #76]	; (801a374 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	08db      	lsrs	r3, r3, #3
 801a32a:	4a13      	ldr	r2, [pc, #76]	; (801a378 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 801a32c:	fba2 2303 	umull	r2, r3, r2, r3
 801a330:	0a1a      	lsrs	r2, r3, #8
 801a332:	4613      	mov	r3, r2
 801a334:	009b      	lsls	r3, r3, #2
 801a336:	4413      	add	r3, r2
 801a338:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	3b01      	subs	r3, #1
 801a33e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	2b00      	cmp	r3, #0
 801a344:	d107      	bne.n	801a356 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a34a:	f043 0220 	orr.w	r2, r3, #32
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801a352:	2301      	movs	r3, #1
 801a354:	e008      	b.n	801a368 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a364:	d0e9      	beq.n	801a33a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801a366:	2300      	movs	r3, #0
}
 801a368:	4618      	mov	r0, r3
 801a36a:	3714      	adds	r7, #20
 801a36c:	46bd      	mov	sp, r7
 801a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a372:	4770      	bx	lr
 801a374:	20000230 	.word	0x20000230
 801a378:	14f8b589 	.word	0x14f8b589

0801a37c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a37c:	b580      	push	{r7, lr}
 801a37e:	b084      	sub	sp, #16
 801a380:	af00      	add	r7, sp, #0
 801a382:	60f8      	str	r0, [r7, #12]
 801a384:	60b9      	str	r1, [r7, #8]
 801a386:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801a388:	e042      	b.n	801a410 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801a38a:	68fb      	ldr	r3, [r7, #12]
 801a38c:	681b      	ldr	r3, [r3, #0]
 801a38e:	695b      	ldr	r3, [r3, #20]
 801a390:	f003 0310 	and.w	r3, r3, #16
 801a394:	2b10      	cmp	r3, #16
 801a396:	d119      	bne.n	801a3cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a398:	68fb      	ldr	r3, [r7, #12]
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	f06f 0210 	mvn.w	r2, #16
 801a3a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801a3a2:	68fb      	ldr	r3, [r7, #12]
 801a3a4:	2200      	movs	r2, #0
 801a3a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	2220      	movs	r2, #32
 801a3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a3b0:	68fb      	ldr	r3, [r7, #12]
 801a3b2:	2200      	movs	r2, #0
 801a3b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a3bc:	68fb      	ldr	r3, [r7, #12]
 801a3be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a3c0:	68fb      	ldr	r3, [r7, #12]
 801a3c2:	2200      	movs	r2, #0
 801a3c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801a3c8:	2301      	movs	r3, #1
 801a3ca:	e029      	b.n	801a420 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a3cc:	f7fc faf8 	bl	80169c0 <HAL_GetTick>
 801a3d0:	4602      	mov	r2, r0
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	1ad3      	subs	r3, r2, r3
 801a3d6:	68ba      	ldr	r2, [r7, #8]
 801a3d8:	429a      	cmp	r2, r3
 801a3da:	d302      	bcc.n	801a3e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 801a3dc:	68bb      	ldr	r3, [r7, #8]
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d116      	bne.n	801a410 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 801a3e2:	68fb      	ldr	r3, [r7, #12]
 801a3e4:	2200      	movs	r2, #0
 801a3e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	2220      	movs	r2, #32
 801a3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a3f0:	68fb      	ldr	r3, [r7, #12]
 801a3f2:	2200      	movs	r2, #0
 801a3f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a3fc:	f043 0220 	orr.w	r2, r3, #32
 801a400:	68fb      	ldr	r3, [r7, #12]
 801a402:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a404:	68fb      	ldr	r3, [r7, #12]
 801a406:	2200      	movs	r2, #0
 801a408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801a40c:	2301      	movs	r3, #1
 801a40e:	e007      	b.n	801a420 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	681b      	ldr	r3, [r3, #0]
 801a414:	695b      	ldr	r3, [r3, #20]
 801a416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a41a:	2b40      	cmp	r3, #64	; 0x40
 801a41c:	d1b5      	bne.n	801a38a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801a41e:	2300      	movs	r3, #0
}
 801a420:	4618      	mov	r0, r3
 801a422:	3710      	adds	r7, #16
 801a424:	46bd      	mov	sp, r7
 801a426:	bd80      	pop	{r7, pc}

0801a428 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801a428:	b480      	push	{r7}
 801a42a:	b083      	sub	sp, #12
 801a42c:	af00      	add	r7, sp, #0
 801a42e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	695b      	ldr	r3, [r3, #20]
 801a436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a43a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a43e:	d11b      	bne.n	801a478 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801a448:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	2200      	movs	r2, #0
 801a44e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	2220      	movs	r2, #32
 801a454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	2200      	movs	r2, #0
 801a45c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a464:	f043 0204 	orr.w	r2, r3, #4
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	2200      	movs	r2, #0
 801a470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801a474:	2301      	movs	r3, #1
 801a476:	e000      	b.n	801a47a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801a478:	2300      	movs	r3, #0
}
 801a47a:	4618      	mov	r0, r3
 801a47c:	370c      	adds	r7, #12
 801a47e:	46bd      	mov	sp, r7
 801a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a484:	4770      	bx	lr

0801a486 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801a486:	b480      	push	{r7}
 801a488:	b083      	sub	sp, #12
 801a48a:	af00      	add	r7, sp, #0
 801a48c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a492:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801a496:	d103      	bne.n	801a4a0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	2201      	movs	r2, #1
 801a49c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801a49e:	e007      	b.n	801a4b0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801a4a8:	d102      	bne.n	801a4b0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	2208      	movs	r2, #8
 801a4ae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801a4b0:	bf00      	nop
 801a4b2:	370c      	adds	r7, #12
 801a4b4:	46bd      	mov	sp, r7
 801a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ba:	4770      	bx	lr

0801a4bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801a4bc:	b580      	push	{r7, lr}
 801a4be:	b086      	sub	sp, #24
 801a4c0:	af00      	add	r7, sp, #0
 801a4c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d101      	bne.n	801a4ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801a4ca:	2301      	movs	r3, #1
 801a4cc:	e267      	b.n	801a99e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	f003 0301 	and.w	r3, r3, #1
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	d075      	beq.n	801a5c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801a4da:	4b88      	ldr	r3, [pc, #544]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a4dc:	689b      	ldr	r3, [r3, #8]
 801a4de:	f003 030c 	and.w	r3, r3, #12
 801a4e2:	2b04      	cmp	r3, #4
 801a4e4:	d00c      	beq.n	801a500 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801a4e6:	4b85      	ldr	r3, [pc, #532]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a4e8:	689b      	ldr	r3, [r3, #8]
 801a4ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801a4ee:	2b08      	cmp	r3, #8
 801a4f0:	d112      	bne.n	801a518 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801a4f2:	4b82      	ldr	r3, [pc, #520]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a4f4:	685b      	ldr	r3, [r3, #4]
 801a4f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a4fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801a4fe:	d10b      	bne.n	801a518 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a500:	4b7e      	ldr	r3, [pc, #504]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d05b      	beq.n	801a5c4 <HAL_RCC_OscConfig+0x108>
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	685b      	ldr	r3, [r3, #4]
 801a510:	2b00      	cmp	r3, #0
 801a512:	d157      	bne.n	801a5c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801a514:	2301      	movs	r3, #1
 801a516:	e242      	b.n	801a99e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	685b      	ldr	r3, [r3, #4]
 801a51c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a520:	d106      	bne.n	801a530 <HAL_RCC_OscConfig+0x74>
 801a522:	4b76      	ldr	r3, [pc, #472]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	4a75      	ldr	r2, [pc, #468]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a52c:	6013      	str	r3, [r2, #0]
 801a52e:	e01d      	b.n	801a56c <HAL_RCC_OscConfig+0xb0>
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	685b      	ldr	r3, [r3, #4]
 801a534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801a538:	d10c      	bne.n	801a554 <HAL_RCC_OscConfig+0x98>
 801a53a:	4b70      	ldr	r3, [pc, #448]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a53c:	681b      	ldr	r3, [r3, #0]
 801a53e:	4a6f      	ldr	r2, [pc, #444]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801a544:	6013      	str	r3, [r2, #0]
 801a546:	4b6d      	ldr	r3, [pc, #436]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	4a6c      	ldr	r2, [pc, #432]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a54c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a550:	6013      	str	r3, [r2, #0]
 801a552:	e00b      	b.n	801a56c <HAL_RCC_OscConfig+0xb0>
 801a554:	4b69      	ldr	r3, [pc, #420]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	4a68      	ldr	r2, [pc, #416]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a55a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a55e:	6013      	str	r3, [r2, #0]
 801a560:	4b66      	ldr	r3, [pc, #408]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	4a65      	ldr	r2, [pc, #404]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801a56a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	685b      	ldr	r3, [r3, #4]
 801a570:	2b00      	cmp	r3, #0
 801a572:	d013      	beq.n	801a59c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a574:	f7fc fa24 	bl	80169c0 <HAL_GetTick>
 801a578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a57a:	e008      	b.n	801a58e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a57c:	f7fc fa20 	bl	80169c0 <HAL_GetTick>
 801a580:	4602      	mov	r2, r0
 801a582:	693b      	ldr	r3, [r7, #16]
 801a584:	1ad3      	subs	r3, r2, r3
 801a586:	2b64      	cmp	r3, #100	; 0x64
 801a588:	d901      	bls.n	801a58e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801a58a:	2303      	movs	r3, #3
 801a58c:	e207      	b.n	801a99e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a58e:	4b5b      	ldr	r3, [pc, #364]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a590:	681b      	ldr	r3, [r3, #0]
 801a592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a596:	2b00      	cmp	r3, #0
 801a598:	d0f0      	beq.n	801a57c <HAL_RCC_OscConfig+0xc0>
 801a59a:	e014      	b.n	801a5c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a59c:	f7fc fa10 	bl	80169c0 <HAL_GetTick>
 801a5a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801a5a2:	e008      	b.n	801a5b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a5a4:	f7fc fa0c 	bl	80169c0 <HAL_GetTick>
 801a5a8:	4602      	mov	r2, r0
 801a5aa:	693b      	ldr	r3, [r7, #16]
 801a5ac:	1ad3      	subs	r3, r2, r3
 801a5ae:	2b64      	cmp	r3, #100	; 0x64
 801a5b0:	d901      	bls.n	801a5b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801a5b2:	2303      	movs	r3, #3
 801a5b4:	e1f3      	b.n	801a99e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801a5b6:	4b51      	ldr	r3, [pc, #324]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d1f0      	bne.n	801a5a4 <HAL_RCC_OscConfig+0xe8>
 801a5c2:	e000      	b.n	801a5c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a5c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	f003 0302 	and.w	r3, r3, #2
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d063      	beq.n	801a69a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801a5d2:	4b4a      	ldr	r3, [pc, #296]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a5d4:	689b      	ldr	r3, [r3, #8]
 801a5d6:	f003 030c 	and.w	r3, r3, #12
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d00b      	beq.n	801a5f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801a5de:	4b47      	ldr	r3, [pc, #284]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a5e0:	689b      	ldr	r3, [r3, #8]
 801a5e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801a5e6:	2b08      	cmp	r3, #8
 801a5e8:	d11c      	bne.n	801a624 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801a5ea:	4b44      	ldr	r3, [pc, #272]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a5ec:	685b      	ldr	r3, [r3, #4]
 801a5ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d116      	bne.n	801a624 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801a5f6:	4b41      	ldr	r3, [pc, #260]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	f003 0302 	and.w	r3, r3, #2
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d005      	beq.n	801a60e <HAL_RCC_OscConfig+0x152>
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	68db      	ldr	r3, [r3, #12]
 801a606:	2b01      	cmp	r3, #1
 801a608:	d001      	beq.n	801a60e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801a60a:	2301      	movs	r3, #1
 801a60c:	e1c7      	b.n	801a99e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a60e:	4b3b      	ldr	r3, [pc, #236]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	691b      	ldr	r3, [r3, #16]
 801a61a:	00db      	lsls	r3, r3, #3
 801a61c:	4937      	ldr	r1, [pc, #220]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a61e:	4313      	orrs	r3, r2
 801a620:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801a622:	e03a      	b.n	801a69a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	68db      	ldr	r3, [r3, #12]
 801a628:	2b00      	cmp	r3, #0
 801a62a:	d020      	beq.n	801a66e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801a62c:	4b34      	ldr	r3, [pc, #208]	; (801a700 <HAL_RCC_OscConfig+0x244>)
 801a62e:	2201      	movs	r2, #1
 801a630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a632:	f7fc f9c5 	bl	80169c0 <HAL_GetTick>
 801a636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a638:	e008      	b.n	801a64c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a63a:	f7fc f9c1 	bl	80169c0 <HAL_GetTick>
 801a63e:	4602      	mov	r2, r0
 801a640:	693b      	ldr	r3, [r7, #16]
 801a642:	1ad3      	subs	r3, r2, r3
 801a644:	2b02      	cmp	r3, #2
 801a646:	d901      	bls.n	801a64c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801a648:	2303      	movs	r3, #3
 801a64a:	e1a8      	b.n	801a99e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a64c:	4b2b      	ldr	r3, [pc, #172]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	f003 0302 	and.w	r3, r3, #2
 801a654:	2b00      	cmp	r3, #0
 801a656:	d0f0      	beq.n	801a63a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a658:	4b28      	ldr	r3, [pc, #160]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	691b      	ldr	r3, [r3, #16]
 801a664:	00db      	lsls	r3, r3, #3
 801a666:	4925      	ldr	r1, [pc, #148]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a668:	4313      	orrs	r3, r2
 801a66a:	600b      	str	r3, [r1, #0]
 801a66c:	e015      	b.n	801a69a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801a66e:	4b24      	ldr	r3, [pc, #144]	; (801a700 <HAL_RCC_OscConfig+0x244>)
 801a670:	2200      	movs	r2, #0
 801a672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a674:	f7fc f9a4 	bl	80169c0 <HAL_GetTick>
 801a678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801a67a:	e008      	b.n	801a68e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a67c:	f7fc f9a0 	bl	80169c0 <HAL_GetTick>
 801a680:	4602      	mov	r2, r0
 801a682:	693b      	ldr	r3, [r7, #16]
 801a684:	1ad3      	subs	r3, r2, r3
 801a686:	2b02      	cmp	r3, #2
 801a688:	d901      	bls.n	801a68e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801a68a:	2303      	movs	r3, #3
 801a68c:	e187      	b.n	801a99e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801a68e:	4b1b      	ldr	r3, [pc, #108]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	f003 0302 	and.w	r3, r3, #2
 801a696:	2b00      	cmp	r3, #0
 801a698:	d1f0      	bne.n	801a67c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	f003 0308 	and.w	r3, r3, #8
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d036      	beq.n	801a714 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	695b      	ldr	r3, [r3, #20]
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d016      	beq.n	801a6dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801a6ae:	4b15      	ldr	r3, [pc, #84]	; (801a704 <HAL_RCC_OscConfig+0x248>)
 801a6b0:	2201      	movs	r2, #1
 801a6b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a6b4:	f7fc f984 	bl	80169c0 <HAL_GetTick>
 801a6b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a6ba:	e008      	b.n	801a6ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a6bc:	f7fc f980 	bl	80169c0 <HAL_GetTick>
 801a6c0:	4602      	mov	r2, r0
 801a6c2:	693b      	ldr	r3, [r7, #16]
 801a6c4:	1ad3      	subs	r3, r2, r3
 801a6c6:	2b02      	cmp	r3, #2
 801a6c8:	d901      	bls.n	801a6ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801a6ca:	2303      	movs	r3, #3
 801a6cc:	e167      	b.n	801a99e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a6ce:	4b0b      	ldr	r3, [pc, #44]	; (801a6fc <HAL_RCC_OscConfig+0x240>)
 801a6d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a6d2:	f003 0302 	and.w	r3, r3, #2
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d0f0      	beq.n	801a6bc <HAL_RCC_OscConfig+0x200>
 801a6da:	e01b      	b.n	801a714 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801a6dc:	4b09      	ldr	r3, [pc, #36]	; (801a704 <HAL_RCC_OscConfig+0x248>)
 801a6de:	2200      	movs	r2, #0
 801a6e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a6e2:	f7fc f96d 	bl	80169c0 <HAL_GetTick>
 801a6e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a6e8:	e00e      	b.n	801a708 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a6ea:	f7fc f969 	bl	80169c0 <HAL_GetTick>
 801a6ee:	4602      	mov	r2, r0
 801a6f0:	693b      	ldr	r3, [r7, #16]
 801a6f2:	1ad3      	subs	r3, r2, r3
 801a6f4:	2b02      	cmp	r3, #2
 801a6f6:	d907      	bls.n	801a708 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801a6f8:	2303      	movs	r3, #3
 801a6fa:	e150      	b.n	801a99e <HAL_RCC_OscConfig+0x4e2>
 801a6fc:	40023800 	.word	0x40023800
 801a700:	42470000 	.word	0x42470000
 801a704:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a708:	4b88      	ldr	r3, [pc, #544]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a70a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a70c:	f003 0302 	and.w	r3, r3, #2
 801a710:	2b00      	cmp	r3, #0
 801a712:	d1ea      	bne.n	801a6ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	f003 0304 	and.w	r3, r3, #4
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	f000 8097 	beq.w	801a850 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801a722:	2300      	movs	r3, #0
 801a724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801a726:	4b81      	ldr	r3, [pc, #516]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a72a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d10f      	bne.n	801a752 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801a732:	2300      	movs	r3, #0
 801a734:	60bb      	str	r3, [r7, #8]
 801a736:	4b7d      	ldr	r3, [pc, #500]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a73a:	4a7c      	ldr	r2, [pc, #496]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a73c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a740:	6413      	str	r3, [r2, #64]	; 0x40
 801a742:	4b7a      	ldr	r3, [pc, #488]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a74a:	60bb      	str	r3, [r7, #8]
 801a74c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801a74e:	2301      	movs	r3, #1
 801a750:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a752:	4b77      	ldr	r3, [pc, #476]	; (801a930 <HAL_RCC_OscConfig+0x474>)
 801a754:	681b      	ldr	r3, [r3, #0]
 801a756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d118      	bne.n	801a790 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801a75e:	4b74      	ldr	r3, [pc, #464]	; (801a930 <HAL_RCC_OscConfig+0x474>)
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	4a73      	ldr	r2, [pc, #460]	; (801a930 <HAL_RCC_OscConfig+0x474>)
 801a764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801a76a:	f7fc f929 	bl	80169c0 <HAL_GetTick>
 801a76e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a770:	e008      	b.n	801a784 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a772:	f7fc f925 	bl	80169c0 <HAL_GetTick>
 801a776:	4602      	mov	r2, r0
 801a778:	693b      	ldr	r3, [r7, #16]
 801a77a:	1ad3      	subs	r3, r2, r3
 801a77c:	2b02      	cmp	r3, #2
 801a77e:	d901      	bls.n	801a784 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801a780:	2303      	movs	r3, #3
 801a782:	e10c      	b.n	801a99e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a784:	4b6a      	ldr	r3, [pc, #424]	; (801a930 <HAL_RCC_OscConfig+0x474>)
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d0f0      	beq.n	801a772 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	689b      	ldr	r3, [r3, #8]
 801a794:	2b01      	cmp	r3, #1
 801a796:	d106      	bne.n	801a7a6 <HAL_RCC_OscConfig+0x2ea>
 801a798:	4b64      	ldr	r3, [pc, #400]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a79a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a79c:	4a63      	ldr	r2, [pc, #396]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a79e:	f043 0301 	orr.w	r3, r3, #1
 801a7a2:	6713      	str	r3, [r2, #112]	; 0x70
 801a7a4:	e01c      	b.n	801a7e0 <HAL_RCC_OscConfig+0x324>
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	689b      	ldr	r3, [r3, #8]
 801a7aa:	2b05      	cmp	r3, #5
 801a7ac:	d10c      	bne.n	801a7c8 <HAL_RCC_OscConfig+0x30c>
 801a7ae:	4b5f      	ldr	r3, [pc, #380]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a7b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a7b2:	4a5e      	ldr	r2, [pc, #376]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a7b4:	f043 0304 	orr.w	r3, r3, #4
 801a7b8:	6713      	str	r3, [r2, #112]	; 0x70
 801a7ba:	4b5c      	ldr	r3, [pc, #368]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a7bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a7be:	4a5b      	ldr	r2, [pc, #364]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a7c0:	f043 0301 	orr.w	r3, r3, #1
 801a7c4:	6713      	str	r3, [r2, #112]	; 0x70
 801a7c6:	e00b      	b.n	801a7e0 <HAL_RCC_OscConfig+0x324>
 801a7c8:	4b58      	ldr	r3, [pc, #352]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a7ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a7cc:	4a57      	ldr	r2, [pc, #348]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a7ce:	f023 0301 	bic.w	r3, r3, #1
 801a7d2:	6713      	str	r3, [r2, #112]	; 0x70
 801a7d4:	4b55      	ldr	r3, [pc, #340]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a7d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a7d8:	4a54      	ldr	r2, [pc, #336]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a7da:	f023 0304 	bic.w	r3, r3, #4
 801a7de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	689b      	ldr	r3, [r3, #8]
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	d015      	beq.n	801a814 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a7e8:	f7fc f8ea 	bl	80169c0 <HAL_GetTick>
 801a7ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a7ee:	e00a      	b.n	801a806 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a7f0:	f7fc f8e6 	bl	80169c0 <HAL_GetTick>
 801a7f4:	4602      	mov	r2, r0
 801a7f6:	693b      	ldr	r3, [r7, #16]
 801a7f8:	1ad3      	subs	r3, r2, r3
 801a7fa:	f241 3288 	movw	r2, #5000	; 0x1388
 801a7fe:	4293      	cmp	r3, r2
 801a800:	d901      	bls.n	801a806 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801a802:	2303      	movs	r3, #3
 801a804:	e0cb      	b.n	801a99e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a806:	4b49      	ldr	r3, [pc, #292]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a80a:	f003 0302 	and.w	r3, r3, #2
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d0ee      	beq.n	801a7f0 <HAL_RCC_OscConfig+0x334>
 801a812:	e014      	b.n	801a83e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a814:	f7fc f8d4 	bl	80169c0 <HAL_GetTick>
 801a818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a81a:	e00a      	b.n	801a832 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a81c:	f7fc f8d0 	bl	80169c0 <HAL_GetTick>
 801a820:	4602      	mov	r2, r0
 801a822:	693b      	ldr	r3, [r7, #16]
 801a824:	1ad3      	subs	r3, r2, r3
 801a826:	f241 3288 	movw	r2, #5000	; 0x1388
 801a82a:	4293      	cmp	r3, r2
 801a82c:	d901      	bls.n	801a832 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801a82e:	2303      	movs	r3, #3
 801a830:	e0b5      	b.n	801a99e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a832:	4b3e      	ldr	r3, [pc, #248]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a836:	f003 0302 	and.w	r3, r3, #2
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d1ee      	bne.n	801a81c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801a83e:	7dfb      	ldrb	r3, [r7, #23]
 801a840:	2b01      	cmp	r3, #1
 801a842:	d105      	bne.n	801a850 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801a844:	4b39      	ldr	r3, [pc, #228]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a848:	4a38      	ldr	r2, [pc, #224]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a84a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801a84e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	699b      	ldr	r3, [r3, #24]
 801a854:	2b00      	cmp	r3, #0
 801a856:	f000 80a1 	beq.w	801a99c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801a85a:	4b34      	ldr	r3, [pc, #208]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a85c:	689b      	ldr	r3, [r3, #8]
 801a85e:	f003 030c 	and.w	r3, r3, #12
 801a862:	2b08      	cmp	r3, #8
 801a864:	d05c      	beq.n	801a920 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	699b      	ldr	r3, [r3, #24]
 801a86a:	2b02      	cmp	r3, #2
 801a86c:	d141      	bne.n	801a8f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a86e:	4b31      	ldr	r3, [pc, #196]	; (801a934 <HAL_RCC_OscConfig+0x478>)
 801a870:	2200      	movs	r2, #0
 801a872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a874:	f7fc f8a4 	bl	80169c0 <HAL_GetTick>
 801a878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a87a:	e008      	b.n	801a88e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a87c:	f7fc f8a0 	bl	80169c0 <HAL_GetTick>
 801a880:	4602      	mov	r2, r0
 801a882:	693b      	ldr	r3, [r7, #16]
 801a884:	1ad3      	subs	r3, r2, r3
 801a886:	2b02      	cmp	r3, #2
 801a888:	d901      	bls.n	801a88e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801a88a:	2303      	movs	r3, #3
 801a88c:	e087      	b.n	801a99e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a88e:	4b27      	ldr	r3, [pc, #156]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a896:	2b00      	cmp	r3, #0
 801a898:	d1f0      	bne.n	801a87c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	69da      	ldr	r2, [r3, #28]
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	6a1b      	ldr	r3, [r3, #32]
 801a8a2:	431a      	orrs	r2, r3
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8a8:	019b      	lsls	r3, r3, #6
 801a8aa:	431a      	orrs	r2, r3
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a8b0:	085b      	lsrs	r3, r3, #1
 801a8b2:	3b01      	subs	r3, #1
 801a8b4:	041b      	lsls	r3, r3, #16
 801a8b6:	431a      	orrs	r2, r3
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8bc:	061b      	lsls	r3, r3, #24
 801a8be:	491b      	ldr	r1, [pc, #108]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a8c0:	4313      	orrs	r3, r2
 801a8c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801a8c4:	4b1b      	ldr	r3, [pc, #108]	; (801a934 <HAL_RCC_OscConfig+0x478>)
 801a8c6:	2201      	movs	r2, #1
 801a8c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a8ca:	f7fc f879 	bl	80169c0 <HAL_GetTick>
 801a8ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a8d0:	e008      	b.n	801a8e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a8d2:	f7fc f875 	bl	80169c0 <HAL_GetTick>
 801a8d6:	4602      	mov	r2, r0
 801a8d8:	693b      	ldr	r3, [r7, #16]
 801a8da:	1ad3      	subs	r3, r2, r3
 801a8dc:	2b02      	cmp	r3, #2
 801a8de:	d901      	bls.n	801a8e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801a8e0:	2303      	movs	r3, #3
 801a8e2:	e05c      	b.n	801a99e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a8e4:	4b11      	ldr	r3, [pc, #68]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	d0f0      	beq.n	801a8d2 <HAL_RCC_OscConfig+0x416>
 801a8f0:	e054      	b.n	801a99c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a8f2:	4b10      	ldr	r3, [pc, #64]	; (801a934 <HAL_RCC_OscConfig+0x478>)
 801a8f4:	2200      	movs	r2, #0
 801a8f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a8f8:	f7fc f862 	bl	80169c0 <HAL_GetTick>
 801a8fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a8fe:	e008      	b.n	801a912 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a900:	f7fc f85e 	bl	80169c0 <HAL_GetTick>
 801a904:	4602      	mov	r2, r0
 801a906:	693b      	ldr	r3, [r7, #16]
 801a908:	1ad3      	subs	r3, r2, r3
 801a90a:	2b02      	cmp	r3, #2
 801a90c:	d901      	bls.n	801a912 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801a90e:	2303      	movs	r3, #3
 801a910:	e045      	b.n	801a99e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a912:	4b06      	ldr	r3, [pc, #24]	; (801a92c <HAL_RCC_OscConfig+0x470>)
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	d1f0      	bne.n	801a900 <HAL_RCC_OscConfig+0x444>
 801a91e:	e03d      	b.n	801a99c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	699b      	ldr	r3, [r3, #24]
 801a924:	2b01      	cmp	r3, #1
 801a926:	d107      	bne.n	801a938 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801a928:	2301      	movs	r3, #1
 801a92a:	e038      	b.n	801a99e <HAL_RCC_OscConfig+0x4e2>
 801a92c:	40023800 	.word	0x40023800
 801a930:	40007000 	.word	0x40007000
 801a934:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801a938:	4b1b      	ldr	r3, [pc, #108]	; (801a9a8 <HAL_RCC_OscConfig+0x4ec>)
 801a93a:	685b      	ldr	r3, [r3, #4]
 801a93c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	699b      	ldr	r3, [r3, #24]
 801a942:	2b01      	cmp	r3, #1
 801a944:	d028      	beq.n	801a998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a946:	68fb      	ldr	r3, [r7, #12]
 801a948:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a950:	429a      	cmp	r2, r3
 801a952:	d121      	bne.n	801a998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a95e:	429a      	cmp	r2, r3
 801a960:	d11a      	bne.n	801a998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801a962:	68fa      	ldr	r2, [r7, #12]
 801a964:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801a968:	4013      	ands	r3, r2
 801a96a:	687a      	ldr	r2, [r7, #4]
 801a96c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801a96e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801a970:	4293      	cmp	r3, r2
 801a972:	d111      	bne.n	801a998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801a974:	68fb      	ldr	r3, [r7, #12]
 801a976:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a97e:	085b      	lsrs	r3, r3, #1
 801a980:	3b01      	subs	r3, #1
 801a982:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801a984:	429a      	cmp	r2, r3
 801a986:	d107      	bne.n	801a998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801a988:	68fb      	ldr	r3, [r7, #12]
 801a98a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a992:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801a994:	429a      	cmp	r2, r3
 801a996:	d001      	beq.n	801a99c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801a998:	2301      	movs	r3, #1
 801a99a:	e000      	b.n	801a99e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 801a99c:	2300      	movs	r3, #0
}
 801a99e:	4618      	mov	r0, r3
 801a9a0:	3718      	adds	r7, #24
 801a9a2:	46bd      	mov	sp, r7
 801a9a4:	bd80      	pop	{r7, pc}
 801a9a6:	bf00      	nop
 801a9a8:	40023800 	.word	0x40023800

0801a9ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b084      	sub	sp, #16
 801a9b0:	af00      	add	r7, sp, #0
 801a9b2:	6078      	str	r0, [r7, #4]
 801a9b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d101      	bne.n	801a9c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801a9bc:	2301      	movs	r3, #1
 801a9be:	e0cc      	b.n	801ab5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801a9c0:	4b68      	ldr	r3, [pc, #416]	; (801ab64 <HAL_RCC_ClockConfig+0x1b8>)
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	f003 0307 	and.w	r3, r3, #7
 801a9c8:	683a      	ldr	r2, [r7, #0]
 801a9ca:	429a      	cmp	r2, r3
 801a9cc:	d90c      	bls.n	801a9e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a9ce:	4b65      	ldr	r3, [pc, #404]	; (801ab64 <HAL_RCC_ClockConfig+0x1b8>)
 801a9d0:	683a      	ldr	r2, [r7, #0]
 801a9d2:	b2d2      	uxtb	r2, r2
 801a9d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a9d6:	4b63      	ldr	r3, [pc, #396]	; (801ab64 <HAL_RCC_ClockConfig+0x1b8>)
 801a9d8:	681b      	ldr	r3, [r3, #0]
 801a9da:	f003 0307 	and.w	r3, r3, #7
 801a9de:	683a      	ldr	r2, [r7, #0]
 801a9e0:	429a      	cmp	r2, r3
 801a9e2:	d001      	beq.n	801a9e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801a9e4:	2301      	movs	r3, #1
 801a9e6:	e0b8      	b.n	801ab5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	f003 0302 	and.w	r3, r3, #2
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d020      	beq.n	801aa36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	f003 0304 	and.w	r3, r3, #4
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d005      	beq.n	801aa0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801aa00:	4b59      	ldr	r3, [pc, #356]	; (801ab68 <HAL_RCC_ClockConfig+0x1bc>)
 801aa02:	689b      	ldr	r3, [r3, #8]
 801aa04:	4a58      	ldr	r2, [pc, #352]	; (801ab68 <HAL_RCC_ClockConfig+0x1bc>)
 801aa06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801aa0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	f003 0308 	and.w	r3, r3, #8
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d005      	beq.n	801aa24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801aa18:	4b53      	ldr	r3, [pc, #332]	; (801ab68 <HAL_RCC_ClockConfig+0x1bc>)
 801aa1a:	689b      	ldr	r3, [r3, #8]
 801aa1c:	4a52      	ldr	r2, [pc, #328]	; (801ab68 <HAL_RCC_ClockConfig+0x1bc>)
 801aa1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801aa22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801aa24:	4b50      	ldr	r3, [pc, #320]	; (801ab68 <HAL_RCC_ClockConfig+0x1bc>)
 801aa26:	689b      	ldr	r3, [r3, #8]
 801aa28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	689b      	ldr	r3, [r3, #8]
 801aa30:	494d      	ldr	r1, [pc, #308]	; (801ab68 <HAL_RCC_ClockConfig+0x1bc>)
 801aa32:	4313      	orrs	r3, r2
 801aa34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	f003 0301 	and.w	r3, r3, #1
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d044      	beq.n	801aacc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	685b      	ldr	r3, [r3, #4]
 801aa46:	2b01      	cmp	r3, #1
 801aa48:	d107      	bne.n	801aa5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801aa4a:	4b47      	ldr	r3, [pc, #284]	; (801ab68 <HAL_RCC_ClockConfig+0x1bc>)
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d119      	bne.n	801aa8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801aa56:	2301      	movs	r3, #1
 801aa58:	e07f      	b.n	801ab5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	685b      	ldr	r3, [r3, #4]
 801aa5e:	2b02      	cmp	r3, #2
 801aa60:	d003      	beq.n	801aa6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801aa66:	2b03      	cmp	r3, #3
 801aa68:	d107      	bne.n	801aa7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801aa6a:	4b3f      	ldr	r3, [pc, #252]	; (801ab68 <HAL_RCC_ClockConfig+0x1bc>)
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d109      	bne.n	801aa8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801aa76:	2301      	movs	r3, #1
 801aa78:	e06f      	b.n	801ab5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801aa7a:	4b3b      	ldr	r3, [pc, #236]	; (801ab68 <HAL_RCC_ClockConfig+0x1bc>)
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	f003 0302 	and.w	r3, r3, #2
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d101      	bne.n	801aa8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801aa86:	2301      	movs	r3, #1
 801aa88:	e067      	b.n	801ab5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801aa8a:	4b37      	ldr	r3, [pc, #220]	; (801ab68 <HAL_RCC_ClockConfig+0x1bc>)
 801aa8c:	689b      	ldr	r3, [r3, #8]
 801aa8e:	f023 0203 	bic.w	r2, r3, #3
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	685b      	ldr	r3, [r3, #4]
 801aa96:	4934      	ldr	r1, [pc, #208]	; (801ab68 <HAL_RCC_ClockConfig+0x1bc>)
 801aa98:	4313      	orrs	r3, r2
 801aa9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801aa9c:	f7fb ff90 	bl	80169c0 <HAL_GetTick>
 801aaa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801aaa2:	e00a      	b.n	801aaba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801aaa4:	f7fb ff8c 	bl	80169c0 <HAL_GetTick>
 801aaa8:	4602      	mov	r2, r0
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	1ad3      	subs	r3, r2, r3
 801aaae:	f241 3288 	movw	r2, #5000	; 0x1388
 801aab2:	4293      	cmp	r3, r2
 801aab4:	d901      	bls.n	801aaba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801aab6:	2303      	movs	r3, #3
 801aab8:	e04f      	b.n	801ab5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801aaba:	4b2b      	ldr	r3, [pc, #172]	; (801ab68 <HAL_RCC_ClockConfig+0x1bc>)
 801aabc:	689b      	ldr	r3, [r3, #8]
 801aabe:	f003 020c 	and.w	r2, r3, #12
 801aac2:	687b      	ldr	r3, [r7, #4]
 801aac4:	685b      	ldr	r3, [r3, #4]
 801aac6:	009b      	lsls	r3, r3, #2
 801aac8:	429a      	cmp	r2, r3
 801aaca:	d1eb      	bne.n	801aaa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801aacc:	4b25      	ldr	r3, [pc, #148]	; (801ab64 <HAL_RCC_ClockConfig+0x1b8>)
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	f003 0307 	and.w	r3, r3, #7
 801aad4:	683a      	ldr	r2, [r7, #0]
 801aad6:	429a      	cmp	r2, r3
 801aad8:	d20c      	bcs.n	801aaf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801aada:	4b22      	ldr	r3, [pc, #136]	; (801ab64 <HAL_RCC_ClockConfig+0x1b8>)
 801aadc:	683a      	ldr	r2, [r7, #0]
 801aade:	b2d2      	uxtb	r2, r2
 801aae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801aae2:	4b20      	ldr	r3, [pc, #128]	; (801ab64 <HAL_RCC_ClockConfig+0x1b8>)
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	f003 0307 	and.w	r3, r3, #7
 801aaea:	683a      	ldr	r2, [r7, #0]
 801aaec:	429a      	cmp	r2, r3
 801aaee:	d001      	beq.n	801aaf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801aaf0:	2301      	movs	r3, #1
 801aaf2:	e032      	b.n	801ab5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	f003 0304 	and.w	r3, r3, #4
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d008      	beq.n	801ab12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801ab00:	4b19      	ldr	r3, [pc, #100]	; (801ab68 <HAL_RCC_ClockConfig+0x1bc>)
 801ab02:	689b      	ldr	r3, [r3, #8]
 801ab04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	68db      	ldr	r3, [r3, #12]
 801ab0c:	4916      	ldr	r1, [pc, #88]	; (801ab68 <HAL_RCC_ClockConfig+0x1bc>)
 801ab0e:	4313      	orrs	r3, r2
 801ab10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	f003 0308 	and.w	r3, r3, #8
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d009      	beq.n	801ab32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801ab1e:	4b12      	ldr	r3, [pc, #72]	; (801ab68 <HAL_RCC_ClockConfig+0x1bc>)
 801ab20:	689b      	ldr	r3, [r3, #8]
 801ab22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	691b      	ldr	r3, [r3, #16]
 801ab2a:	00db      	lsls	r3, r3, #3
 801ab2c:	490e      	ldr	r1, [pc, #56]	; (801ab68 <HAL_RCC_ClockConfig+0x1bc>)
 801ab2e:	4313      	orrs	r3, r2
 801ab30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801ab32:	f000 f821 	bl	801ab78 <HAL_RCC_GetSysClockFreq>
 801ab36:	4602      	mov	r2, r0
 801ab38:	4b0b      	ldr	r3, [pc, #44]	; (801ab68 <HAL_RCC_ClockConfig+0x1bc>)
 801ab3a:	689b      	ldr	r3, [r3, #8]
 801ab3c:	091b      	lsrs	r3, r3, #4
 801ab3e:	f003 030f 	and.w	r3, r3, #15
 801ab42:	490a      	ldr	r1, [pc, #40]	; (801ab6c <HAL_RCC_ClockConfig+0x1c0>)
 801ab44:	5ccb      	ldrb	r3, [r1, r3]
 801ab46:	fa22 f303 	lsr.w	r3, r2, r3
 801ab4a:	4a09      	ldr	r2, [pc, #36]	; (801ab70 <HAL_RCC_ClockConfig+0x1c4>)
 801ab4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801ab4e:	4b09      	ldr	r3, [pc, #36]	; (801ab74 <HAL_RCC_ClockConfig+0x1c8>)
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	4618      	mov	r0, r3
 801ab54:	f7fb fef0 	bl	8016938 <HAL_InitTick>

  return HAL_OK;
 801ab58:	2300      	movs	r3, #0
}
 801ab5a:	4618      	mov	r0, r3
 801ab5c:	3710      	adds	r7, #16
 801ab5e:	46bd      	mov	sp, r7
 801ab60:	bd80      	pop	{r7, pc}
 801ab62:	bf00      	nop
 801ab64:	40023c00 	.word	0x40023c00
 801ab68:	40023800 	.word	0x40023800
 801ab6c:	0802a1ec 	.word	0x0802a1ec
 801ab70:	20000230 	.word	0x20000230
 801ab74:	20000234 	.word	0x20000234

0801ab78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801ab78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ab7c:	b094      	sub	sp, #80	; 0x50
 801ab7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801ab80:	2300      	movs	r3, #0
 801ab82:	647b      	str	r3, [r7, #68]	; 0x44
 801ab84:	2300      	movs	r3, #0
 801ab86:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ab88:	2300      	movs	r3, #0
 801ab8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 801ab8c:	2300      	movs	r3, #0
 801ab8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801ab90:	4b79      	ldr	r3, [pc, #484]	; (801ad78 <HAL_RCC_GetSysClockFreq+0x200>)
 801ab92:	689b      	ldr	r3, [r3, #8]
 801ab94:	f003 030c 	and.w	r3, r3, #12
 801ab98:	2b08      	cmp	r3, #8
 801ab9a:	d00d      	beq.n	801abb8 <HAL_RCC_GetSysClockFreq+0x40>
 801ab9c:	2b08      	cmp	r3, #8
 801ab9e:	f200 80e1 	bhi.w	801ad64 <HAL_RCC_GetSysClockFreq+0x1ec>
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d002      	beq.n	801abac <HAL_RCC_GetSysClockFreq+0x34>
 801aba6:	2b04      	cmp	r3, #4
 801aba8:	d003      	beq.n	801abb2 <HAL_RCC_GetSysClockFreq+0x3a>
 801abaa:	e0db      	b.n	801ad64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801abac:	4b73      	ldr	r3, [pc, #460]	; (801ad7c <HAL_RCC_GetSysClockFreq+0x204>)
 801abae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 801abb0:	e0db      	b.n	801ad6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801abb2:	4b73      	ldr	r3, [pc, #460]	; (801ad80 <HAL_RCC_GetSysClockFreq+0x208>)
 801abb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801abb6:	e0d8      	b.n	801ad6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801abb8:	4b6f      	ldr	r3, [pc, #444]	; (801ad78 <HAL_RCC_GetSysClockFreq+0x200>)
 801abba:	685b      	ldr	r3, [r3, #4]
 801abbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801abc0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801abc2:	4b6d      	ldr	r3, [pc, #436]	; (801ad78 <HAL_RCC_GetSysClockFreq+0x200>)
 801abc4:	685b      	ldr	r3, [r3, #4]
 801abc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d063      	beq.n	801ac96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801abce:	4b6a      	ldr	r3, [pc, #424]	; (801ad78 <HAL_RCC_GetSysClockFreq+0x200>)
 801abd0:	685b      	ldr	r3, [r3, #4]
 801abd2:	099b      	lsrs	r3, r3, #6
 801abd4:	2200      	movs	r2, #0
 801abd6:	63bb      	str	r3, [r7, #56]	; 0x38
 801abd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 801abda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801abe0:	633b      	str	r3, [r7, #48]	; 0x30
 801abe2:	2300      	movs	r3, #0
 801abe4:	637b      	str	r3, [r7, #52]	; 0x34
 801abe6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801abea:	4622      	mov	r2, r4
 801abec:	462b      	mov	r3, r5
 801abee:	f04f 0000 	mov.w	r0, #0
 801abf2:	f04f 0100 	mov.w	r1, #0
 801abf6:	0159      	lsls	r1, r3, #5
 801abf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801abfc:	0150      	lsls	r0, r2, #5
 801abfe:	4602      	mov	r2, r0
 801ac00:	460b      	mov	r3, r1
 801ac02:	4621      	mov	r1, r4
 801ac04:	1a51      	subs	r1, r2, r1
 801ac06:	6139      	str	r1, [r7, #16]
 801ac08:	4629      	mov	r1, r5
 801ac0a:	eb63 0301 	sbc.w	r3, r3, r1
 801ac0e:	617b      	str	r3, [r7, #20]
 801ac10:	f04f 0200 	mov.w	r2, #0
 801ac14:	f04f 0300 	mov.w	r3, #0
 801ac18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801ac1c:	4659      	mov	r1, fp
 801ac1e:	018b      	lsls	r3, r1, #6
 801ac20:	4651      	mov	r1, sl
 801ac22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801ac26:	4651      	mov	r1, sl
 801ac28:	018a      	lsls	r2, r1, #6
 801ac2a:	4651      	mov	r1, sl
 801ac2c:	ebb2 0801 	subs.w	r8, r2, r1
 801ac30:	4659      	mov	r1, fp
 801ac32:	eb63 0901 	sbc.w	r9, r3, r1
 801ac36:	f04f 0200 	mov.w	r2, #0
 801ac3a:	f04f 0300 	mov.w	r3, #0
 801ac3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801ac42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801ac46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801ac4a:	4690      	mov	r8, r2
 801ac4c:	4699      	mov	r9, r3
 801ac4e:	4623      	mov	r3, r4
 801ac50:	eb18 0303 	adds.w	r3, r8, r3
 801ac54:	60bb      	str	r3, [r7, #8]
 801ac56:	462b      	mov	r3, r5
 801ac58:	eb49 0303 	adc.w	r3, r9, r3
 801ac5c:	60fb      	str	r3, [r7, #12]
 801ac5e:	f04f 0200 	mov.w	r2, #0
 801ac62:	f04f 0300 	mov.w	r3, #0
 801ac66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801ac6a:	4629      	mov	r1, r5
 801ac6c:	024b      	lsls	r3, r1, #9
 801ac6e:	4621      	mov	r1, r4
 801ac70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801ac74:	4621      	mov	r1, r4
 801ac76:	024a      	lsls	r2, r1, #9
 801ac78:	4610      	mov	r0, r2
 801ac7a:	4619      	mov	r1, r3
 801ac7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac7e:	2200      	movs	r2, #0
 801ac80:	62bb      	str	r3, [r7, #40]	; 0x28
 801ac82:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ac84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801ac88:	f7e5 fffe 	bl	8000c88 <__aeabi_uldivmod>
 801ac8c:	4602      	mov	r2, r0
 801ac8e:	460b      	mov	r3, r1
 801ac90:	4613      	mov	r3, r2
 801ac92:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ac94:	e058      	b.n	801ad48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801ac96:	4b38      	ldr	r3, [pc, #224]	; (801ad78 <HAL_RCC_GetSysClockFreq+0x200>)
 801ac98:	685b      	ldr	r3, [r3, #4]
 801ac9a:	099b      	lsrs	r3, r3, #6
 801ac9c:	2200      	movs	r2, #0
 801ac9e:	4618      	mov	r0, r3
 801aca0:	4611      	mov	r1, r2
 801aca2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801aca6:	623b      	str	r3, [r7, #32]
 801aca8:	2300      	movs	r3, #0
 801acaa:	627b      	str	r3, [r7, #36]	; 0x24
 801acac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801acb0:	4642      	mov	r2, r8
 801acb2:	464b      	mov	r3, r9
 801acb4:	f04f 0000 	mov.w	r0, #0
 801acb8:	f04f 0100 	mov.w	r1, #0
 801acbc:	0159      	lsls	r1, r3, #5
 801acbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801acc2:	0150      	lsls	r0, r2, #5
 801acc4:	4602      	mov	r2, r0
 801acc6:	460b      	mov	r3, r1
 801acc8:	4641      	mov	r1, r8
 801acca:	ebb2 0a01 	subs.w	sl, r2, r1
 801acce:	4649      	mov	r1, r9
 801acd0:	eb63 0b01 	sbc.w	fp, r3, r1
 801acd4:	f04f 0200 	mov.w	r2, #0
 801acd8:	f04f 0300 	mov.w	r3, #0
 801acdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801ace0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801ace4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801ace8:	ebb2 040a 	subs.w	r4, r2, sl
 801acec:	eb63 050b 	sbc.w	r5, r3, fp
 801acf0:	f04f 0200 	mov.w	r2, #0
 801acf4:	f04f 0300 	mov.w	r3, #0
 801acf8:	00eb      	lsls	r3, r5, #3
 801acfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801acfe:	00e2      	lsls	r2, r4, #3
 801ad00:	4614      	mov	r4, r2
 801ad02:	461d      	mov	r5, r3
 801ad04:	4643      	mov	r3, r8
 801ad06:	18e3      	adds	r3, r4, r3
 801ad08:	603b      	str	r3, [r7, #0]
 801ad0a:	464b      	mov	r3, r9
 801ad0c:	eb45 0303 	adc.w	r3, r5, r3
 801ad10:	607b      	str	r3, [r7, #4]
 801ad12:	f04f 0200 	mov.w	r2, #0
 801ad16:	f04f 0300 	mov.w	r3, #0
 801ad1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 801ad1e:	4629      	mov	r1, r5
 801ad20:	028b      	lsls	r3, r1, #10
 801ad22:	4621      	mov	r1, r4
 801ad24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801ad28:	4621      	mov	r1, r4
 801ad2a:	028a      	lsls	r2, r1, #10
 801ad2c:	4610      	mov	r0, r2
 801ad2e:	4619      	mov	r1, r3
 801ad30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ad32:	2200      	movs	r2, #0
 801ad34:	61bb      	str	r3, [r7, #24]
 801ad36:	61fa      	str	r2, [r7, #28]
 801ad38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ad3c:	f7e5 ffa4 	bl	8000c88 <__aeabi_uldivmod>
 801ad40:	4602      	mov	r2, r0
 801ad42:	460b      	mov	r3, r1
 801ad44:	4613      	mov	r3, r2
 801ad46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801ad48:	4b0b      	ldr	r3, [pc, #44]	; (801ad78 <HAL_RCC_GetSysClockFreq+0x200>)
 801ad4a:	685b      	ldr	r3, [r3, #4]
 801ad4c:	0c1b      	lsrs	r3, r3, #16
 801ad4e:	f003 0303 	and.w	r3, r3, #3
 801ad52:	3301      	adds	r3, #1
 801ad54:	005b      	lsls	r3, r3, #1
 801ad56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 801ad58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ad5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ad5c:	fbb2 f3f3 	udiv	r3, r2, r3
 801ad60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801ad62:	e002      	b.n	801ad6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801ad64:	4b05      	ldr	r3, [pc, #20]	; (801ad7c <HAL_RCC_GetSysClockFreq+0x204>)
 801ad66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801ad68:	bf00      	nop
    }
  }
  return sysclockfreq;
 801ad6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801ad6c:	4618      	mov	r0, r3
 801ad6e:	3750      	adds	r7, #80	; 0x50
 801ad70:	46bd      	mov	sp, r7
 801ad72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ad76:	bf00      	nop
 801ad78:	40023800 	.word	0x40023800
 801ad7c:	00f42400 	.word	0x00f42400
 801ad80:	007a1200 	.word	0x007a1200

0801ad84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801ad84:	b480      	push	{r7}
 801ad86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801ad88:	4b03      	ldr	r3, [pc, #12]	; (801ad98 <HAL_RCC_GetHCLKFreq+0x14>)
 801ad8a:	681b      	ldr	r3, [r3, #0]
}
 801ad8c:	4618      	mov	r0, r3
 801ad8e:	46bd      	mov	sp, r7
 801ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad94:	4770      	bx	lr
 801ad96:	bf00      	nop
 801ad98:	20000230 	.word	0x20000230

0801ad9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801ad9c:	b580      	push	{r7, lr}
 801ad9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801ada0:	f7ff fff0 	bl	801ad84 <HAL_RCC_GetHCLKFreq>
 801ada4:	4602      	mov	r2, r0
 801ada6:	4b05      	ldr	r3, [pc, #20]	; (801adbc <HAL_RCC_GetPCLK1Freq+0x20>)
 801ada8:	689b      	ldr	r3, [r3, #8]
 801adaa:	0a9b      	lsrs	r3, r3, #10
 801adac:	f003 0307 	and.w	r3, r3, #7
 801adb0:	4903      	ldr	r1, [pc, #12]	; (801adc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 801adb2:	5ccb      	ldrb	r3, [r1, r3]
 801adb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 801adb8:	4618      	mov	r0, r3
 801adba:	bd80      	pop	{r7, pc}
 801adbc:	40023800 	.word	0x40023800
 801adc0:	0802a1fc 	.word	0x0802a1fc

0801adc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801adc4:	b580      	push	{r7, lr}
 801adc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801adc8:	f7ff ffdc 	bl	801ad84 <HAL_RCC_GetHCLKFreq>
 801adcc:	4602      	mov	r2, r0
 801adce:	4b05      	ldr	r3, [pc, #20]	; (801ade4 <HAL_RCC_GetPCLK2Freq+0x20>)
 801add0:	689b      	ldr	r3, [r3, #8]
 801add2:	0b5b      	lsrs	r3, r3, #13
 801add4:	f003 0307 	and.w	r3, r3, #7
 801add8:	4903      	ldr	r1, [pc, #12]	; (801ade8 <HAL_RCC_GetPCLK2Freq+0x24>)
 801adda:	5ccb      	ldrb	r3, [r1, r3]
 801addc:	fa22 f303 	lsr.w	r3, r2, r3
}
 801ade0:	4618      	mov	r0, r3
 801ade2:	bd80      	pop	{r7, pc}
 801ade4:	40023800 	.word	0x40023800
 801ade8:	0802a1fc 	.word	0x0802a1fc

0801adec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801adec:	b580      	push	{r7, lr}
 801adee:	b082      	sub	sp, #8
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d101      	bne.n	801adfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801adfa:	2301      	movs	r3, #1
 801adfc:	e041      	b.n	801ae82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ae04:	b2db      	uxtb	r3, r3
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d106      	bne.n	801ae18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	2200      	movs	r2, #0
 801ae0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801ae12:	6878      	ldr	r0, [r7, #4]
 801ae14:	f7fb fa86 	bl	8016324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	2202      	movs	r2, #2
 801ae1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	681a      	ldr	r2, [r3, #0]
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	3304      	adds	r3, #4
 801ae28:	4619      	mov	r1, r3
 801ae2a:	4610      	mov	r0, r2
 801ae2c:	f000 fcae 	bl	801b78c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	2201      	movs	r2, #1
 801ae34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	2201      	movs	r2, #1
 801ae3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	2201      	movs	r2, #1
 801ae44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	2201      	movs	r2, #1
 801ae4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	2201      	movs	r2, #1
 801ae54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	2201      	movs	r2, #1
 801ae5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	2201      	movs	r2, #1
 801ae64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	2201      	movs	r2, #1
 801ae6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	2201      	movs	r2, #1
 801ae74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	2201      	movs	r2, #1
 801ae7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ae80:	2300      	movs	r3, #0
}
 801ae82:	4618      	mov	r0, r3
 801ae84:	3708      	adds	r7, #8
 801ae86:	46bd      	mov	sp, r7
 801ae88:	bd80      	pop	{r7, pc}
	...

0801ae8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801ae8c:	b480      	push	{r7}
 801ae8e:	b085      	sub	sp, #20
 801ae90:	af00      	add	r7, sp, #0
 801ae92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ae9a:	b2db      	uxtb	r3, r3
 801ae9c:	2b01      	cmp	r3, #1
 801ae9e:	d001      	beq.n	801aea4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801aea0:	2301      	movs	r3, #1
 801aea2:	e03c      	b.n	801af1e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	2202      	movs	r2, #2
 801aea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	681b      	ldr	r3, [r3, #0]
 801aeb0:	4a1e      	ldr	r2, [pc, #120]	; (801af2c <HAL_TIM_Base_Start+0xa0>)
 801aeb2:	4293      	cmp	r3, r2
 801aeb4:	d018      	beq.n	801aee8 <HAL_TIM_Base_Start+0x5c>
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801aebe:	d013      	beq.n	801aee8 <HAL_TIM_Base_Start+0x5c>
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	4a1a      	ldr	r2, [pc, #104]	; (801af30 <HAL_TIM_Base_Start+0xa4>)
 801aec6:	4293      	cmp	r3, r2
 801aec8:	d00e      	beq.n	801aee8 <HAL_TIM_Base_Start+0x5c>
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	681b      	ldr	r3, [r3, #0]
 801aece:	4a19      	ldr	r2, [pc, #100]	; (801af34 <HAL_TIM_Base_Start+0xa8>)
 801aed0:	4293      	cmp	r3, r2
 801aed2:	d009      	beq.n	801aee8 <HAL_TIM_Base_Start+0x5c>
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	4a17      	ldr	r2, [pc, #92]	; (801af38 <HAL_TIM_Base_Start+0xac>)
 801aeda:	4293      	cmp	r3, r2
 801aedc:	d004      	beq.n	801aee8 <HAL_TIM_Base_Start+0x5c>
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	681b      	ldr	r3, [r3, #0]
 801aee2:	4a16      	ldr	r2, [pc, #88]	; (801af3c <HAL_TIM_Base_Start+0xb0>)
 801aee4:	4293      	cmp	r3, r2
 801aee6:	d111      	bne.n	801af0c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	689b      	ldr	r3, [r3, #8]
 801aeee:	f003 0307 	and.w	r3, r3, #7
 801aef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801aef4:	68fb      	ldr	r3, [r7, #12]
 801aef6:	2b06      	cmp	r3, #6
 801aef8:	d010      	beq.n	801af1c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	681b      	ldr	r3, [r3, #0]
 801aefe:	681a      	ldr	r2, [r3, #0]
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	f042 0201 	orr.w	r2, r2, #1
 801af08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801af0a:	e007      	b.n	801af1c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	681a      	ldr	r2, [r3, #0]
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	f042 0201 	orr.w	r2, r2, #1
 801af1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801af1c:	2300      	movs	r3, #0
}
 801af1e:	4618      	mov	r0, r3
 801af20:	3714      	adds	r7, #20
 801af22:	46bd      	mov	sp, r7
 801af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af28:	4770      	bx	lr
 801af2a:	bf00      	nop
 801af2c:	40010000 	.word	0x40010000
 801af30:	40000400 	.word	0x40000400
 801af34:	40000800 	.word	0x40000800
 801af38:	40000c00 	.word	0x40000c00
 801af3c:	40014000 	.word	0x40014000

0801af40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801af40:	b480      	push	{r7}
 801af42:	b085      	sub	sp, #20
 801af44:	af00      	add	r7, sp, #0
 801af46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801af4e:	b2db      	uxtb	r3, r3
 801af50:	2b01      	cmp	r3, #1
 801af52:	d001      	beq.n	801af58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801af54:	2301      	movs	r3, #1
 801af56:	e044      	b.n	801afe2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	2202      	movs	r2, #2
 801af5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	68da      	ldr	r2, [r3, #12]
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	f042 0201 	orr.w	r2, r2, #1
 801af6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	4a1e      	ldr	r2, [pc, #120]	; (801aff0 <HAL_TIM_Base_Start_IT+0xb0>)
 801af76:	4293      	cmp	r3, r2
 801af78:	d018      	beq.n	801afac <HAL_TIM_Base_Start_IT+0x6c>
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801af82:	d013      	beq.n	801afac <HAL_TIM_Base_Start_IT+0x6c>
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	4a1a      	ldr	r2, [pc, #104]	; (801aff4 <HAL_TIM_Base_Start_IT+0xb4>)
 801af8a:	4293      	cmp	r3, r2
 801af8c:	d00e      	beq.n	801afac <HAL_TIM_Base_Start_IT+0x6c>
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	4a19      	ldr	r2, [pc, #100]	; (801aff8 <HAL_TIM_Base_Start_IT+0xb8>)
 801af94:	4293      	cmp	r3, r2
 801af96:	d009      	beq.n	801afac <HAL_TIM_Base_Start_IT+0x6c>
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	4a17      	ldr	r2, [pc, #92]	; (801affc <HAL_TIM_Base_Start_IT+0xbc>)
 801af9e:	4293      	cmp	r3, r2
 801afa0:	d004      	beq.n	801afac <HAL_TIM_Base_Start_IT+0x6c>
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	4a16      	ldr	r2, [pc, #88]	; (801b000 <HAL_TIM_Base_Start_IT+0xc0>)
 801afa8:	4293      	cmp	r3, r2
 801afaa:	d111      	bne.n	801afd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	689b      	ldr	r3, [r3, #8]
 801afb2:	f003 0307 	and.w	r3, r3, #7
 801afb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	2b06      	cmp	r3, #6
 801afbc:	d010      	beq.n	801afe0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	681a      	ldr	r2, [r3, #0]
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	f042 0201 	orr.w	r2, r2, #1
 801afcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801afce:	e007      	b.n	801afe0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	681a      	ldr	r2, [r3, #0]
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	f042 0201 	orr.w	r2, r2, #1
 801afde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801afe0:	2300      	movs	r3, #0
}
 801afe2:	4618      	mov	r0, r3
 801afe4:	3714      	adds	r7, #20
 801afe6:	46bd      	mov	sp, r7
 801afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afec:	4770      	bx	lr
 801afee:	bf00      	nop
 801aff0:	40010000 	.word	0x40010000
 801aff4:	40000400 	.word	0x40000400
 801aff8:	40000800 	.word	0x40000800
 801affc:	40000c00 	.word	0x40000c00
 801b000:	40014000 	.word	0x40014000

0801b004 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801b004:	b580      	push	{r7, lr}
 801b006:	b082      	sub	sp, #8
 801b008:	af00      	add	r7, sp, #0
 801b00a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d101      	bne.n	801b016 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801b012:	2301      	movs	r3, #1
 801b014:	e041      	b.n	801b09a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b01c:	b2db      	uxtb	r3, r3
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d106      	bne.n	801b030 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	2200      	movs	r2, #0
 801b026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801b02a:	6878      	ldr	r0, [r7, #4]
 801b02c:	f000 f839 	bl	801b0a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	2202      	movs	r2, #2
 801b034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	681a      	ldr	r2, [r3, #0]
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	3304      	adds	r3, #4
 801b040:	4619      	mov	r1, r3
 801b042:	4610      	mov	r0, r2
 801b044:	f000 fba2 	bl	801b78c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	2201      	movs	r2, #1
 801b04c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	2201      	movs	r2, #1
 801b054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	2201      	movs	r2, #1
 801b05c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	2201      	movs	r2, #1
 801b064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	2201      	movs	r2, #1
 801b06c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	2201      	movs	r2, #1
 801b074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	2201      	movs	r2, #1
 801b07c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	2201      	movs	r2, #1
 801b084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	2201      	movs	r2, #1
 801b08c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	2201      	movs	r2, #1
 801b094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801b098:	2300      	movs	r3, #0
}
 801b09a:	4618      	mov	r0, r3
 801b09c:	3708      	adds	r7, #8
 801b09e:	46bd      	mov	sp, r7
 801b0a0:	bd80      	pop	{r7, pc}

0801b0a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801b0a2:	b480      	push	{r7}
 801b0a4:	b083      	sub	sp, #12
 801b0a6:	af00      	add	r7, sp, #0
 801b0a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801b0aa:	bf00      	nop
 801b0ac:	370c      	adds	r7, #12
 801b0ae:	46bd      	mov	sp, r7
 801b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0b4:	4770      	bx	lr
	...

0801b0b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801b0b8:	b580      	push	{r7, lr}
 801b0ba:	b084      	sub	sp, #16
 801b0bc:	af00      	add	r7, sp, #0
 801b0be:	6078      	str	r0, [r7, #4]
 801b0c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801b0c2:	683b      	ldr	r3, [r7, #0]
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d109      	bne.n	801b0dc <HAL_TIM_PWM_Start+0x24>
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801b0ce:	b2db      	uxtb	r3, r3
 801b0d0:	2b01      	cmp	r3, #1
 801b0d2:	bf14      	ite	ne
 801b0d4:	2301      	movne	r3, #1
 801b0d6:	2300      	moveq	r3, #0
 801b0d8:	b2db      	uxtb	r3, r3
 801b0da:	e022      	b.n	801b122 <HAL_TIM_PWM_Start+0x6a>
 801b0dc:	683b      	ldr	r3, [r7, #0]
 801b0de:	2b04      	cmp	r3, #4
 801b0e0:	d109      	bne.n	801b0f6 <HAL_TIM_PWM_Start+0x3e>
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801b0e8:	b2db      	uxtb	r3, r3
 801b0ea:	2b01      	cmp	r3, #1
 801b0ec:	bf14      	ite	ne
 801b0ee:	2301      	movne	r3, #1
 801b0f0:	2300      	moveq	r3, #0
 801b0f2:	b2db      	uxtb	r3, r3
 801b0f4:	e015      	b.n	801b122 <HAL_TIM_PWM_Start+0x6a>
 801b0f6:	683b      	ldr	r3, [r7, #0]
 801b0f8:	2b08      	cmp	r3, #8
 801b0fa:	d109      	bne.n	801b110 <HAL_TIM_PWM_Start+0x58>
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801b102:	b2db      	uxtb	r3, r3
 801b104:	2b01      	cmp	r3, #1
 801b106:	bf14      	ite	ne
 801b108:	2301      	movne	r3, #1
 801b10a:	2300      	moveq	r3, #0
 801b10c:	b2db      	uxtb	r3, r3
 801b10e:	e008      	b.n	801b122 <HAL_TIM_PWM_Start+0x6a>
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b116:	b2db      	uxtb	r3, r3
 801b118:	2b01      	cmp	r3, #1
 801b11a:	bf14      	ite	ne
 801b11c:	2301      	movne	r3, #1
 801b11e:	2300      	moveq	r3, #0
 801b120:	b2db      	uxtb	r3, r3
 801b122:	2b00      	cmp	r3, #0
 801b124:	d001      	beq.n	801b12a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801b126:	2301      	movs	r3, #1
 801b128:	e068      	b.n	801b1fc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801b12a:	683b      	ldr	r3, [r7, #0]
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d104      	bne.n	801b13a <HAL_TIM_PWM_Start+0x82>
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	2202      	movs	r2, #2
 801b134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801b138:	e013      	b.n	801b162 <HAL_TIM_PWM_Start+0xaa>
 801b13a:	683b      	ldr	r3, [r7, #0]
 801b13c:	2b04      	cmp	r3, #4
 801b13e:	d104      	bne.n	801b14a <HAL_TIM_PWM_Start+0x92>
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	2202      	movs	r2, #2
 801b144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801b148:	e00b      	b.n	801b162 <HAL_TIM_PWM_Start+0xaa>
 801b14a:	683b      	ldr	r3, [r7, #0]
 801b14c:	2b08      	cmp	r3, #8
 801b14e:	d104      	bne.n	801b15a <HAL_TIM_PWM_Start+0xa2>
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	2202      	movs	r2, #2
 801b154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801b158:	e003      	b.n	801b162 <HAL_TIM_PWM_Start+0xaa>
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	2202      	movs	r2, #2
 801b15e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	2201      	movs	r2, #1
 801b168:	6839      	ldr	r1, [r7, #0]
 801b16a:	4618      	mov	r0, r3
 801b16c:	f000 fdb4 	bl	801bcd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	4a23      	ldr	r2, [pc, #140]	; (801b204 <HAL_TIM_PWM_Start+0x14c>)
 801b176:	4293      	cmp	r3, r2
 801b178:	d107      	bne.n	801b18a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	681b      	ldr	r3, [r3, #0]
 801b184:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801b188:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	4a1d      	ldr	r2, [pc, #116]	; (801b204 <HAL_TIM_PWM_Start+0x14c>)
 801b190:	4293      	cmp	r3, r2
 801b192:	d018      	beq.n	801b1c6 <HAL_TIM_PWM_Start+0x10e>
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	681b      	ldr	r3, [r3, #0]
 801b198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b19c:	d013      	beq.n	801b1c6 <HAL_TIM_PWM_Start+0x10e>
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	681b      	ldr	r3, [r3, #0]
 801b1a2:	4a19      	ldr	r2, [pc, #100]	; (801b208 <HAL_TIM_PWM_Start+0x150>)
 801b1a4:	4293      	cmp	r3, r2
 801b1a6:	d00e      	beq.n	801b1c6 <HAL_TIM_PWM_Start+0x10e>
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	4a17      	ldr	r2, [pc, #92]	; (801b20c <HAL_TIM_PWM_Start+0x154>)
 801b1ae:	4293      	cmp	r3, r2
 801b1b0:	d009      	beq.n	801b1c6 <HAL_TIM_PWM_Start+0x10e>
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	681b      	ldr	r3, [r3, #0]
 801b1b6:	4a16      	ldr	r2, [pc, #88]	; (801b210 <HAL_TIM_PWM_Start+0x158>)
 801b1b8:	4293      	cmp	r3, r2
 801b1ba:	d004      	beq.n	801b1c6 <HAL_TIM_PWM_Start+0x10e>
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	681b      	ldr	r3, [r3, #0]
 801b1c0:	4a14      	ldr	r2, [pc, #80]	; (801b214 <HAL_TIM_PWM_Start+0x15c>)
 801b1c2:	4293      	cmp	r3, r2
 801b1c4:	d111      	bne.n	801b1ea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	689b      	ldr	r3, [r3, #8]
 801b1cc:	f003 0307 	and.w	r3, r3, #7
 801b1d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b1d2:	68fb      	ldr	r3, [r7, #12]
 801b1d4:	2b06      	cmp	r3, #6
 801b1d6:	d010      	beq.n	801b1fa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	681a      	ldr	r2, [r3, #0]
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	681b      	ldr	r3, [r3, #0]
 801b1e2:	f042 0201 	orr.w	r2, r2, #1
 801b1e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b1e8:	e007      	b.n	801b1fa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	681b      	ldr	r3, [r3, #0]
 801b1ee:	681a      	ldr	r2, [r3, #0]
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	681b      	ldr	r3, [r3, #0]
 801b1f4:	f042 0201 	orr.w	r2, r2, #1
 801b1f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801b1fa:	2300      	movs	r3, #0
}
 801b1fc:	4618      	mov	r0, r3
 801b1fe:	3710      	adds	r7, #16
 801b200:	46bd      	mov	sp, r7
 801b202:	bd80      	pop	{r7, pc}
 801b204:	40010000 	.word	0x40010000
 801b208:	40000400 	.word	0x40000400
 801b20c:	40000800 	.word	0x40000800
 801b210:	40000c00 	.word	0x40000c00
 801b214:	40014000 	.word	0x40014000

0801b218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801b218:	b580      	push	{r7, lr}
 801b21a:	b082      	sub	sp, #8
 801b21c:	af00      	add	r7, sp, #0
 801b21e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	681b      	ldr	r3, [r3, #0]
 801b224:	691b      	ldr	r3, [r3, #16]
 801b226:	f003 0302 	and.w	r3, r3, #2
 801b22a:	2b02      	cmp	r3, #2
 801b22c:	d122      	bne.n	801b274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	681b      	ldr	r3, [r3, #0]
 801b232:	68db      	ldr	r3, [r3, #12]
 801b234:	f003 0302 	and.w	r3, r3, #2
 801b238:	2b02      	cmp	r3, #2
 801b23a:	d11b      	bne.n	801b274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	f06f 0202 	mvn.w	r2, #2
 801b244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	2201      	movs	r2, #1
 801b24a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	699b      	ldr	r3, [r3, #24]
 801b252:	f003 0303 	and.w	r3, r3, #3
 801b256:	2b00      	cmp	r3, #0
 801b258:	d003      	beq.n	801b262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801b25a:	6878      	ldr	r0, [r7, #4]
 801b25c:	f000 fa77 	bl	801b74e <HAL_TIM_IC_CaptureCallback>
 801b260:	e005      	b.n	801b26e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801b262:	6878      	ldr	r0, [r7, #4]
 801b264:	f000 fa69 	bl	801b73a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b268:	6878      	ldr	r0, [r7, #4]
 801b26a:	f000 fa7a 	bl	801b762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	2200      	movs	r2, #0
 801b272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	681b      	ldr	r3, [r3, #0]
 801b278:	691b      	ldr	r3, [r3, #16]
 801b27a:	f003 0304 	and.w	r3, r3, #4
 801b27e:	2b04      	cmp	r3, #4
 801b280:	d122      	bne.n	801b2c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	68db      	ldr	r3, [r3, #12]
 801b288:	f003 0304 	and.w	r3, r3, #4
 801b28c:	2b04      	cmp	r3, #4
 801b28e:	d11b      	bne.n	801b2c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	f06f 0204 	mvn.w	r2, #4
 801b298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	2202      	movs	r2, #2
 801b29e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	699b      	ldr	r3, [r3, #24]
 801b2a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d003      	beq.n	801b2b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b2ae:	6878      	ldr	r0, [r7, #4]
 801b2b0:	f000 fa4d 	bl	801b74e <HAL_TIM_IC_CaptureCallback>
 801b2b4:	e005      	b.n	801b2c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b2b6:	6878      	ldr	r0, [r7, #4]
 801b2b8:	f000 fa3f 	bl	801b73a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b2bc:	6878      	ldr	r0, [r7, #4]
 801b2be:	f000 fa50 	bl	801b762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	2200      	movs	r2, #0
 801b2c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	691b      	ldr	r3, [r3, #16]
 801b2ce:	f003 0308 	and.w	r3, r3, #8
 801b2d2:	2b08      	cmp	r3, #8
 801b2d4:	d122      	bne.n	801b31c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	68db      	ldr	r3, [r3, #12]
 801b2dc:	f003 0308 	and.w	r3, r3, #8
 801b2e0:	2b08      	cmp	r3, #8
 801b2e2:	d11b      	bne.n	801b31c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	f06f 0208 	mvn.w	r2, #8
 801b2ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	2204      	movs	r2, #4
 801b2f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	69db      	ldr	r3, [r3, #28]
 801b2fa:	f003 0303 	and.w	r3, r3, #3
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d003      	beq.n	801b30a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b302:	6878      	ldr	r0, [r7, #4]
 801b304:	f000 fa23 	bl	801b74e <HAL_TIM_IC_CaptureCallback>
 801b308:	e005      	b.n	801b316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b30a:	6878      	ldr	r0, [r7, #4]
 801b30c:	f000 fa15 	bl	801b73a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b310:	6878      	ldr	r0, [r7, #4]
 801b312:	f000 fa26 	bl	801b762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	2200      	movs	r2, #0
 801b31a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	681b      	ldr	r3, [r3, #0]
 801b320:	691b      	ldr	r3, [r3, #16]
 801b322:	f003 0310 	and.w	r3, r3, #16
 801b326:	2b10      	cmp	r3, #16
 801b328:	d122      	bne.n	801b370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	68db      	ldr	r3, [r3, #12]
 801b330:	f003 0310 	and.w	r3, r3, #16
 801b334:	2b10      	cmp	r3, #16
 801b336:	d11b      	bne.n	801b370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	f06f 0210 	mvn.w	r2, #16
 801b340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	2208      	movs	r2, #8
 801b346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	681b      	ldr	r3, [r3, #0]
 801b34c:	69db      	ldr	r3, [r3, #28]
 801b34e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b352:	2b00      	cmp	r3, #0
 801b354:	d003      	beq.n	801b35e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b356:	6878      	ldr	r0, [r7, #4]
 801b358:	f000 f9f9 	bl	801b74e <HAL_TIM_IC_CaptureCallback>
 801b35c:	e005      	b.n	801b36a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b35e:	6878      	ldr	r0, [r7, #4]
 801b360:	f000 f9eb 	bl	801b73a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b364:	6878      	ldr	r0, [r7, #4]
 801b366:	f000 f9fc 	bl	801b762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	2200      	movs	r2, #0
 801b36e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	691b      	ldr	r3, [r3, #16]
 801b376:	f003 0301 	and.w	r3, r3, #1
 801b37a:	2b01      	cmp	r3, #1
 801b37c:	d10e      	bne.n	801b39c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	68db      	ldr	r3, [r3, #12]
 801b384:	f003 0301 	and.w	r3, r3, #1
 801b388:	2b01      	cmp	r3, #1
 801b38a:	d107      	bne.n	801b39c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	f06f 0201 	mvn.w	r2, #1
 801b394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801b396:	6878      	ldr	r0, [r7, #4]
 801b398:	f7e9 f85e 	bl	8004458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	681b      	ldr	r3, [r3, #0]
 801b3a0:	691b      	ldr	r3, [r3, #16]
 801b3a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b3a6:	2b80      	cmp	r3, #128	; 0x80
 801b3a8:	d10e      	bne.n	801b3c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	68db      	ldr	r3, [r3, #12]
 801b3b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b3b4:	2b80      	cmp	r3, #128	; 0x80
 801b3b6:	d107      	bne.n	801b3c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801b3c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801b3c2:	6878      	ldr	r0, [r7, #4]
 801b3c4:	f000 fd26 	bl	801be14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	691b      	ldr	r3, [r3, #16]
 801b3ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b3d2:	2b40      	cmp	r3, #64	; 0x40
 801b3d4:	d10e      	bne.n	801b3f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	681b      	ldr	r3, [r3, #0]
 801b3da:	68db      	ldr	r3, [r3, #12]
 801b3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b3e0:	2b40      	cmp	r3, #64	; 0x40
 801b3e2:	d107      	bne.n	801b3f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	681b      	ldr	r3, [r3, #0]
 801b3e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801b3ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801b3ee:	6878      	ldr	r0, [r7, #4]
 801b3f0:	f000 f9c1 	bl	801b776 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	691b      	ldr	r3, [r3, #16]
 801b3fa:	f003 0320 	and.w	r3, r3, #32
 801b3fe:	2b20      	cmp	r3, #32
 801b400:	d10e      	bne.n	801b420 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	681b      	ldr	r3, [r3, #0]
 801b406:	68db      	ldr	r3, [r3, #12]
 801b408:	f003 0320 	and.w	r3, r3, #32
 801b40c:	2b20      	cmp	r3, #32
 801b40e:	d107      	bne.n	801b420 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	f06f 0220 	mvn.w	r2, #32
 801b418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801b41a:	6878      	ldr	r0, [r7, #4]
 801b41c:	f000 fcf0 	bl	801be00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801b420:	bf00      	nop
 801b422:	3708      	adds	r7, #8
 801b424:	46bd      	mov	sp, r7
 801b426:	bd80      	pop	{r7, pc}

0801b428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801b428:	b580      	push	{r7, lr}
 801b42a:	b086      	sub	sp, #24
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	60f8      	str	r0, [r7, #12]
 801b430:	60b9      	str	r1, [r7, #8]
 801b432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b434:	2300      	movs	r3, #0
 801b436:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801b438:	68fb      	ldr	r3, [r7, #12]
 801b43a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b43e:	2b01      	cmp	r3, #1
 801b440:	d101      	bne.n	801b446 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801b442:	2302      	movs	r3, #2
 801b444:	e0ae      	b.n	801b5a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	2201      	movs	r2, #1
 801b44a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	2b0c      	cmp	r3, #12
 801b452:	f200 809f 	bhi.w	801b594 <HAL_TIM_PWM_ConfigChannel+0x16c>
 801b456:	a201      	add	r2, pc, #4	; (adr r2, 801b45c <HAL_TIM_PWM_ConfigChannel+0x34>)
 801b458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b45c:	0801b491 	.word	0x0801b491
 801b460:	0801b595 	.word	0x0801b595
 801b464:	0801b595 	.word	0x0801b595
 801b468:	0801b595 	.word	0x0801b595
 801b46c:	0801b4d1 	.word	0x0801b4d1
 801b470:	0801b595 	.word	0x0801b595
 801b474:	0801b595 	.word	0x0801b595
 801b478:	0801b595 	.word	0x0801b595
 801b47c:	0801b513 	.word	0x0801b513
 801b480:	0801b595 	.word	0x0801b595
 801b484:	0801b595 	.word	0x0801b595
 801b488:	0801b595 	.word	0x0801b595
 801b48c:	0801b553 	.word	0x0801b553
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801b490:	68fb      	ldr	r3, [r7, #12]
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	68b9      	ldr	r1, [r7, #8]
 801b496:	4618      	mov	r0, r3
 801b498:	f000 f9f8 	bl	801b88c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801b49c:	68fb      	ldr	r3, [r7, #12]
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	699a      	ldr	r2, [r3, #24]
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	681b      	ldr	r3, [r3, #0]
 801b4a6:	f042 0208 	orr.w	r2, r2, #8
 801b4aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	681b      	ldr	r3, [r3, #0]
 801b4b0:	699a      	ldr	r2, [r3, #24]
 801b4b2:	68fb      	ldr	r3, [r7, #12]
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	f022 0204 	bic.w	r2, r2, #4
 801b4ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	6999      	ldr	r1, [r3, #24]
 801b4c2:	68bb      	ldr	r3, [r7, #8]
 801b4c4:	691a      	ldr	r2, [r3, #16]
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	430a      	orrs	r2, r1
 801b4cc:	619a      	str	r2, [r3, #24]
      break;
 801b4ce:	e064      	b.n	801b59a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801b4d0:	68fb      	ldr	r3, [r7, #12]
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	68b9      	ldr	r1, [r7, #8]
 801b4d6:	4618      	mov	r0, r3
 801b4d8:	f000 fa3e 	bl	801b958 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	699a      	ldr	r2, [r3, #24]
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b4ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801b4ec:	68fb      	ldr	r3, [r7, #12]
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	699a      	ldr	r2, [r3, #24]
 801b4f2:	68fb      	ldr	r3, [r7, #12]
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b4fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801b4fc:	68fb      	ldr	r3, [r7, #12]
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	6999      	ldr	r1, [r3, #24]
 801b502:	68bb      	ldr	r3, [r7, #8]
 801b504:	691b      	ldr	r3, [r3, #16]
 801b506:	021a      	lsls	r2, r3, #8
 801b508:	68fb      	ldr	r3, [r7, #12]
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	430a      	orrs	r2, r1
 801b50e:	619a      	str	r2, [r3, #24]
      break;
 801b510:	e043      	b.n	801b59a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801b512:	68fb      	ldr	r3, [r7, #12]
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	68b9      	ldr	r1, [r7, #8]
 801b518:	4618      	mov	r0, r3
 801b51a:	f000 fa89 	bl	801ba30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801b51e:	68fb      	ldr	r3, [r7, #12]
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	69da      	ldr	r2, [r3, #28]
 801b524:	68fb      	ldr	r3, [r7, #12]
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	f042 0208 	orr.w	r2, r2, #8
 801b52c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801b52e:	68fb      	ldr	r3, [r7, #12]
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	69da      	ldr	r2, [r3, #28]
 801b534:	68fb      	ldr	r3, [r7, #12]
 801b536:	681b      	ldr	r3, [r3, #0]
 801b538:	f022 0204 	bic.w	r2, r2, #4
 801b53c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801b53e:	68fb      	ldr	r3, [r7, #12]
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	69d9      	ldr	r1, [r3, #28]
 801b544:	68bb      	ldr	r3, [r7, #8]
 801b546:	691a      	ldr	r2, [r3, #16]
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	430a      	orrs	r2, r1
 801b54e:	61da      	str	r2, [r3, #28]
      break;
 801b550:	e023      	b.n	801b59a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801b552:	68fb      	ldr	r3, [r7, #12]
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	68b9      	ldr	r1, [r7, #8]
 801b558:	4618      	mov	r0, r3
 801b55a:	f000 fad3 	bl	801bb04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801b55e:	68fb      	ldr	r3, [r7, #12]
 801b560:	681b      	ldr	r3, [r3, #0]
 801b562:	69da      	ldr	r2, [r3, #28]
 801b564:	68fb      	ldr	r3, [r7, #12]
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b56c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801b56e:	68fb      	ldr	r3, [r7, #12]
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	69da      	ldr	r2, [r3, #28]
 801b574:	68fb      	ldr	r3, [r7, #12]
 801b576:	681b      	ldr	r3, [r3, #0]
 801b578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b57c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801b57e:	68fb      	ldr	r3, [r7, #12]
 801b580:	681b      	ldr	r3, [r3, #0]
 801b582:	69d9      	ldr	r1, [r3, #28]
 801b584:	68bb      	ldr	r3, [r7, #8]
 801b586:	691b      	ldr	r3, [r3, #16]
 801b588:	021a      	lsls	r2, r3, #8
 801b58a:	68fb      	ldr	r3, [r7, #12]
 801b58c:	681b      	ldr	r3, [r3, #0]
 801b58e:	430a      	orrs	r2, r1
 801b590:	61da      	str	r2, [r3, #28]
      break;
 801b592:	e002      	b.n	801b59a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801b594:	2301      	movs	r3, #1
 801b596:	75fb      	strb	r3, [r7, #23]
      break;
 801b598:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801b59a:	68fb      	ldr	r3, [r7, #12]
 801b59c:	2200      	movs	r2, #0
 801b59e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b5a2:	7dfb      	ldrb	r3, [r7, #23]
}
 801b5a4:	4618      	mov	r0, r3
 801b5a6:	3718      	adds	r7, #24
 801b5a8:	46bd      	mov	sp, r7
 801b5aa:	bd80      	pop	{r7, pc}

0801b5ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801b5ac:	b580      	push	{r7, lr}
 801b5ae:	b084      	sub	sp, #16
 801b5b0:	af00      	add	r7, sp, #0
 801b5b2:	6078      	str	r0, [r7, #4]
 801b5b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b5c0:	2b01      	cmp	r3, #1
 801b5c2:	d101      	bne.n	801b5c8 <HAL_TIM_ConfigClockSource+0x1c>
 801b5c4:	2302      	movs	r3, #2
 801b5c6:	e0b4      	b.n	801b732 <HAL_TIM_ConfigClockSource+0x186>
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	2201      	movs	r2, #1
 801b5cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	2202      	movs	r2, #2
 801b5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	681b      	ldr	r3, [r3, #0]
 801b5dc:	689b      	ldr	r3, [r3, #8]
 801b5de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801b5e0:	68bb      	ldr	r3, [r7, #8]
 801b5e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801b5e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b5e8:	68bb      	ldr	r3, [r7, #8]
 801b5ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b5ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	681b      	ldr	r3, [r3, #0]
 801b5f4:	68ba      	ldr	r2, [r7, #8]
 801b5f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801b5f8:	683b      	ldr	r3, [r7, #0]
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b600:	d03e      	beq.n	801b680 <HAL_TIM_ConfigClockSource+0xd4>
 801b602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b606:	f200 8087 	bhi.w	801b718 <HAL_TIM_ConfigClockSource+0x16c>
 801b60a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b60e:	f000 8086 	beq.w	801b71e <HAL_TIM_ConfigClockSource+0x172>
 801b612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b616:	d87f      	bhi.n	801b718 <HAL_TIM_ConfigClockSource+0x16c>
 801b618:	2b70      	cmp	r3, #112	; 0x70
 801b61a:	d01a      	beq.n	801b652 <HAL_TIM_ConfigClockSource+0xa6>
 801b61c:	2b70      	cmp	r3, #112	; 0x70
 801b61e:	d87b      	bhi.n	801b718 <HAL_TIM_ConfigClockSource+0x16c>
 801b620:	2b60      	cmp	r3, #96	; 0x60
 801b622:	d050      	beq.n	801b6c6 <HAL_TIM_ConfigClockSource+0x11a>
 801b624:	2b60      	cmp	r3, #96	; 0x60
 801b626:	d877      	bhi.n	801b718 <HAL_TIM_ConfigClockSource+0x16c>
 801b628:	2b50      	cmp	r3, #80	; 0x50
 801b62a:	d03c      	beq.n	801b6a6 <HAL_TIM_ConfigClockSource+0xfa>
 801b62c:	2b50      	cmp	r3, #80	; 0x50
 801b62e:	d873      	bhi.n	801b718 <HAL_TIM_ConfigClockSource+0x16c>
 801b630:	2b40      	cmp	r3, #64	; 0x40
 801b632:	d058      	beq.n	801b6e6 <HAL_TIM_ConfigClockSource+0x13a>
 801b634:	2b40      	cmp	r3, #64	; 0x40
 801b636:	d86f      	bhi.n	801b718 <HAL_TIM_ConfigClockSource+0x16c>
 801b638:	2b30      	cmp	r3, #48	; 0x30
 801b63a:	d064      	beq.n	801b706 <HAL_TIM_ConfigClockSource+0x15a>
 801b63c:	2b30      	cmp	r3, #48	; 0x30
 801b63e:	d86b      	bhi.n	801b718 <HAL_TIM_ConfigClockSource+0x16c>
 801b640:	2b20      	cmp	r3, #32
 801b642:	d060      	beq.n	801b706 <HAL_TIM_ConfigClockSource+0x15a>
 801b644:	2b20      	cmp	r3, #32
 801b646:	d867      	bhi.n	801b718 <HAL_TIM_ConfigClockSource+0x16c>
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d05c      	beq.n	801b706 <HAL_TIM_ConfigClockSource+0x15a>
 801b64c:	2b10      	cmp	r3, #16
 801b64e:	d05a      	beq.n	801b706 <HAL_TIM_ConfigClockSource+0x15a>
 801b650:	e062      	b.n	801b718 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	6818      	ldr	r0, [r3, #0]
 801b656:	683b      	ldr	r3, [r7, #0]
 801b658:	6899      	ldr	r1, [r3, #8]
 801b65a:	683b      	ldr	r3, [r7, #0]
 801b65c:	685a      	ldr	r2, [r3, #4]
 801b65e:	683b      	ldr	r3, [r7, #0]
 801b660:	68db      	ldr	r3, [r3, #12]
 801b662:	f000 fb19 	bl	801bc98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	681b      	ldr	r3, [r3, #0]
 801b66a:	689b      	ldr	r3, [r3, #8]
 801b66c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801b66e:	68bb      	ldr	r3, [r7, #8]
 801b670:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801b674:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	681b      	ldr	r3, [r3, #0]
 801b67a:	68ba      	ldr	r2, [r7, #8]
 801b67c:	609a      	str	r2, [r3, #8]
      break;
 801b67e:	e04f      	b.n	801b720 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	6818      	ldr	r0, [r3, #0]
 801b684:	683b      	ldr	r3, [r7, #0]
 801b686:	6899      	ldr	r1, [r3, #8]
 801b688:	683b      	ldr	r3, [r7, #0]
 801b68a:	685a      	ldr	r2, [r3, #4]
 801b68c:	683b      	ldr	r3, [r7, #0]
 801b68e:	68db      	ldr	r3, [r3, #12]
 801b690:	f000 fb02 	bl	801bc98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	689a      	ldr	r2, [r3, #8]
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	681b      	ldr	r3, [r3, #0]
 801b69e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801b6a2:	609a      	str	r2, [r3, #8]
      break;
 801b6a4:	e03c      	b.n	801b720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	6818      	ldr	r0, [r3, #0]
 801b6aa:	683b      	ldr	r3, [r7, #0]
 801b6ac:	6859      	ldr	r1, [r3, #4]
 801b6ae:	683b      	ldr	r3, [r7, #0]
 801b6b0:	68db      	ldr	r3, [r3, #12]
 801b6b2:	461a      	mov	r2, r3
 801b6b4:	f000 fa76 	bl	801bba4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	681b      	ldr	r3, [r3, #0]
 801b6bc:	2150      	movs	r1, #80	; 0x50
 801b6be:	4618      	mov	r0, r3
 801b6c0:	f000 facf 	bl	801bc62 <TIM_ITRx_SetConfig>
      break;
 801b6c4:	e02c      	b.n	801b720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	6818      	ldr	r0, [r3, #0]
 801b6ca:	683b      	ldr	r3, [r7, #0]
 801b6cc:	6859      	ldr	r1, [r3, #4]
 801b6ce:	683b      	ldr	r3, [r7, #0]
 801b6d0:	68db      	ldr	r3, [r3, #12]
 801b6d2:	461a      	mov	r2, r3
 801b6d4:	f000 fa95 	bl	801bc02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	681b      	ldr	r3, [r3, #0]
 801b6dc:	2160      	movs	r1, #96	; 0x60
 801b6de:	4618      	mov	r0, r3
 801b6e0:	f000 fabf 	bl	801bc62 <TIM_ITRx_SetConfig>
      break;
 801b6e4:	e01c      	b.n	801b720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	6818      	ldr	r0, [r3, #0]
 801b6ea:	683b      	ldr	r3, [r7, #0]
 801b6ec:	6859      	ldr	r1, [r3, #4]
 801b6ee:	683b      	ldr	r3, [r7, #0]
 801b6f0:	68db      	ldr	r3, [r3, #12]
 801b6f2:	461a      	mov	r2, r3
 801b6f4:	f000 fa56 	bl	801bba4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	681b      	ldr	r3, [r3, #0]
 801b6fc:	2140      	movs	r1, #64	; 0x40
 801b6fe:	4618      	mov	r0, r3
 801b700:	f000 faaf 	bl	801bc62 <TIM_ITRx_SetConfig>
      break;
 801b704:	e00c      	b.n	801b720 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	681a      	ldr	r2, [r3, #0]
 801b70a:	683b      	ldr	r3, [r7, #0]
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	4619      	mov	r1, r3
 801b710:	4610      	mov	r0, r2
 801b712:	f000 faa6 	bl	801bc62 <TIM_ITRx_SetConfig>
      break;
 801b716:	e003      	b.n	801b720 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801b718:	2301      	movs	r3, #1
 801b71a:	73fb      	strb	r3, [r7, #15]
      break;
 801b71c:	e000      	b.n	801b720 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801b71e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	2201      	movs	r2, #1
 801b724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	2200      	movs	r2, #0
 801b72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b730:	7bfb      	ldrb	r3, [r7, #15]
}
 801b732:	4618      	mov	r0, r3
 801b734:	3710      	adds	r7, #16
 801b736:	46bd      	mov	sp, r7
 801b738:	bd80      	pop	{r7, pc}

0801b73a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b73a:	b480      	push	{r7}
 801b73c:	b083      	sub	sp, #12
 801b73e:	af00      	add	r7, sp, #0
 801b740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801b742:	bf00      	nop
 801b744:	370c      	adds	r7, #12
 801b746:	46bd      	mov	sp, r7
 801b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b74c:	4770      	bx	lr

0801b74e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801b74e:	b480      	push	{r7}
 801b750:	b083      	sub	sp, #12
 801b752:	af00      	add	r7, sp, #0
 801b754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801b756:	bf00      	nop
 801b758:	370c      	adds	r7, #12
 801b75a:	46bd      	mov	sp, r7
 801b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b760:	4770      	bx	lr

0801b762 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801b762:	b480      	push	{r7}
 801b764:	b083      	sub	sp, #12
 801b766:	af00      	add	r7, sp, #0
 801b768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801b76a:	bf00      	nop
 801b76c:	370c      	adds	r7, #12
 801b76e:	46bd      	mov	sp, r7
 801b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b774:	4770      	bx	lr

0801b776 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801b776:	b480      	push	{r7}
 801b778:	b083      	sub	sp, #12
 801b77a:	af00      	add	r7, sp, #0
 801b77c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801b77e:	bf00      	nop
 801b780:	370c      	adds	r7, #12
 801b782:	46bd      	mov	sp, r7
 801b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b788:	4770      	bx	lr
	...

0801b78c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801b78c:	b480      	push	{r7}
 801b78e:	b085      	sub	sp, #20
 801b790:	af00      	add	r7, sp, #0
 801b792:	6078      	str	r0, [r7, #4]
 801b794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	4a34      	ldr	r2, [pc, #208]	; (801b870 <TIM_Base_SetConfig+0xe4>)
 801b7a0:	4293      	cmp	r3, r2
 801b7a2:	d00f      	beq.n	801b7c4 <TIM_Base_SetConfig+0x38>
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b7aa:	d00b      	beq.n	801b7c4 <TIM_Base_SetConfig+0x38>
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	4a31      	ldr	r2, [pc, #196]	; (801b874 <TIM_Base_SetConfig+0xe8>)
 801b7b0:	4293      	cmp	r3, r2
 801b7b2:	d007      	beq.n	801b7c4 <TIM_Base_SetConfig+0x38>
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	4a30      	ldr	r2, [pc, #192]	; (801b878 <TIM_Base_SetConfig+0xec>)
 801b7b8:	4293      	cmp	r3, r2
 801b7ba:	d003      	beq.n	801b7c4 <TIM_Base_SetConfig+0x38>
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	4a2f      	ldr	r2, [pc, #188]	; (801b87c <TIM_Base_SetConfig+0xf0>)
 801b7c0:	4293      	cmp	r3, r2
 801b7c2:	d108      	bne.n	801b7d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b7c4:	68fb      	ldr	r3, [r7, #12]
 801b7c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b7ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b7cc:	683b      	ldr	r3, [r7, #0]
 801b7ce:	685b      	ldr	r3, [r3, #4]
 801b7d0:	68fa      	ldr	r2, [r7, #12]
 801b7d2:	4313      	orrs	r3, r2
 801b7d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	4a25      	ldr	r2, [pc, #148]	; (801b870 <TIM_Base_SetConfig+0xe4>)
 801b7da:	4293      	cmp	r3, r2
 801b7dc:	d01b      	beq.n	801b816 <TIM_Base_SetConfig+0x8a>
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b7e4:	d017      	beq.n	801b816 <TIM_Base_SetConfig+0x8a>
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	4a22      	ldr	r2, [pc, #136]	; (801b874 <TIM_Base_SetConfig+0xe8>)
 801b7ea:	4293      	cmp	r3, r2
 801b7ec:	d013      	beq.n	801b816 <TIM_Base_SetConfig+0x8a>
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	4a21      	ldr	r2, [pc, #132]	; (801b878 <TIM_Base_SetConfig+0xec>)
 801b7f2:	4293      	cmp	r3, r2
 801b7f4:	d00f      	beq.n	801b816 <TIM_Base_SetConfig+0x8a>
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	4a20      	ldr	r2, [pc, #128]	; (801b87c <TIM_Base_SetConfig+0xf0>)
 801b7fa:	4293      	cmp	r3, r2
 801b7fc:	d00b      	beq.n	801b816 <TIM_Base_SetConfig+0x8a>
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	4a1f      	ldr	r2, [pc, #124]	; (801b880 <TIM_Base_SetConfig+0xf4>)
 801b802:	4293      	cmp	r3, r2
 801b804:	d007      	beq.n	801b816 <TIM_Base_SetConfig+0x8a>
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	4a1e      	ldr	r2, [pc, #120]	; (801b884 <TIM_Base_SetConfig+0xf8>)
 801b80a:	4293      	cmp	r3, r2
 801b80c:	d003      	beq.n	801b816 <TIM_Base_SetConfig+0x8a>
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	4a1d      	ldr	r2, [pc, #116]	; (801b888 <TIM_Base_SetConfig+0xfc>)
 801b812:	4293      	cmp	r3, r2
 801b814:	d108      	bne.n	801b828 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b816:	68fb      	ldr	r3, [r7, #12]
 801b818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b81c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b81e:	683b      	ldr	r3, [r7, #0]
 801b820:	68db      	ldr	r3, [r3, #12]
 801b822:	68fa      	ldr	r2, [r7, #12]
 801b824:	4313      	orrs	r3, r2
 801b826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b828:	68fb      	ldr	r3, [r7, #12]
 801b82a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801b82e:	683b      	ldr	r3, [r7, #0]
 801b830:	695b      	ldr	r3, [r3, #20]
 801b832:	4313      	orrs	r3, r2
 801b834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	68fa      	ldr	r2, [r7, #12]
 801b83a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b83c:	683b      	ldr	r3, [r7, #0]
 801b83e:	689a      	ldr	r2, [r3, #8]
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b844:	683b      	ldr	r3, [r7, #0]
 801b846:	681a      	ldr	r2, [r3, #0]
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b84c:	687b      	ldr	r3, [r7, #4]
 801b84e:	4a08      	ldr	r2, [pc, #32]	; (801b870 <TIM_Base_SetConfig+0xe4>)
 801b850:	4293      	cmp	r3, r2
 801b852:	d103      	bne.n	801b85c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801b854:	683b      	ldr	r3, [r7, #0]
 801b856:	691a      	ldr	r2, [r3, #16]
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	2201      	movs	r2, #1
 801b860:	615a      	str	r2, [r3, #20]
}
 801b862:	bf00      	nop
 801b864:	3714      	adds	r7, #20
 801b866:	46bd      	mov	sp, r7
 801b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b86c:	4770      	bx	lr
 801b86e:	bf00      	nop
 801b870:	40010000 	.word	0x40010000
 801b874:	40000400 	.word	0x40000400
 801b878:	40000800 	.word	0x40000800
 801b87c:	40000c00 	.word	0x40000c00
 801b880:	40014000 	.word	0x40014000
 801b884:	40014400 	.word	0x40014400
 801b888:	40014800 	.word	0x40014800

0801b88c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b88c:	b480      	push	{r7}
 801b88e:	b087      	sub	sp, #28
 801b890:	af00      	add	r7, sp, #0
 801b892:	6078      	str	r0, [r7, #4]
 801b894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	6a1b      	ldr	r3, [r3, #32]
 801b89a:	f023 0201 	bic.w	r2, r3, #1
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	6a1b      	ldr	r3, [r3, #32]
 801b8a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	685b      	ldr	r3, [r3, #4]
 801b8ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	699b      	ldr	r3, [r3, #24]
 801b8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801b8b4:	68fb      	ldr	r3, [r7, #12]
 801b8b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b8ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801b8bc:	68fb      	ldr	r3, [r7, #12]
 801b8be:	f023 0303 	bic.w	r3, r3, #3
 801b8c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b8c4:	683b      	ldr	r3, [r7, #0]
 801b8c6:	681b      	ldr	r3, [r3, #0]
 801b8c8:	68fa      	ldr	r2, [r7, #12]
 801b8ca:	4313      	orrs	r3, r2
 801b8cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801b8ce:	697b      	ldr	r3, [r7, #20]
 801b8d0:	f023 0302 	bic.w	r3, r3, #2
 801b8d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801b8d6:	683b      	ldr	r3, [r7, #0]
 801b8d8:	689b      	ldr	r3, [r3, #8]
 801b8da:	697a      	ldr	r2, [r7, #20]
 801b8dc:	4313      	orrs	r3, r2
 801b8de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	4a1c      	ldr	r2, [pc, #112]	; (801b954 <TIM_OC1_SetConfig+0xc8>)
 801b8e4:	4293      	cmp	r3, r2
 801b8e6:	d10c      	bne.n	801b902 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801b8e8:	697b      	ldr	r3, [r7, #20]
 801b8ea:	f023 0308 	bic.w	r3, r3, #8
 801b8ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801b8f0:	683b      	ldr	r3, [r7, #0]
 801b8f2:	68db      	ldr	r3, [r3, #12]
 801b8f4:	697a      	ldr	r2, [r7, #20]
 801b8f6:	4313      	orrs	r3, r2
 801b8f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801b8fa:	697b      	ldr	r3, [r7, #20]
 801b8fc:	f023 0304 	bic.w	r3, r3, #4
 801b900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	4a13      	ldr	r2, [pc, #76]	; (801b954 <TIM_OC1_SetConfig+0xc8>)
 801b906:	4293      	cmp	r3, r2
 801b908:	d111      	bne.n	801b92e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801b90a:	693b      	ldr	r3, [r7, #16]
 801b90c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801b912:	693b      	ldr	r3, [r7, #16]
 801b914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801b91a:	683b      	ldr	r3, [r7, #0]
 801b91c:	695b      	ldr	r3, [r3, #20]
 801b91e:	693a      	ldr	r2, [r7, #16]
 801b920:	4313      	orrs	r3, r2
 801b922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801b924:	683b      	ldr	r3, [r7, #0]
 801b926:	699b      	ldr	r3, [r3, #24]
 801b928:	693a      	ldr	r2, [r7, #16]
 801b92a:	4313      	orrs	r3, r2
 801b92c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	693a      	ldr	r2, [r7, #16]
 801b932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	68fa      	ldr	r2, [r7, #12]
 801b938:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801b93a:	683b      	ldr	r3, [r7, #0]
 801b93c:	685a      	ldr	r2, [r3, #4]
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	697a      	ldr	r2, [r7, #20]
 801b946:	621a      	str	r2, [r3, #32]
}
 801b948:	bf00      	nop
 801b94a:	371c      	adds	r7, #28
 801b94c:	46bd      	mov	sp, r7
 801b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b952:	4770      	bx	lr
 801b954:	40010000 	.word	0x40010000

0801b958 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b958:	b480      	push	{r7}
 801b95a:	b087      	sub	sp, #28
 801b95c:	af00      	add	r7, sp, #0
 801b95e:	6078      	str	r0, [r7, #4]
 801b960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	6a1b      	ldr	r3, [r3, #32]
 801b966:	f023 0210 	bic.w	r2, r3, #16
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	6a1b      	ldr	r3, [r3, #32]
 801b972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	685b      	ldr	r3, [r3, #4]
 801b978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	699b      	ldr	r3, [r3, #24]
 801b97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801b980:	68fb      	ldr	r3, [r7, #12]
 801b982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801b988:	68fb      	ldr	r3, [r7, #12]
 801b98a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b98e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b990:	683b      	ldr	r3, [r7, #0]
 801b992:	681b      	ldr	r3, [r3, #0]
 801b994:	021b      	lsls	r3, r3, #8
 801b996:	68fa      	ldr	r2, [r7, #12]
 801b998:	4313      	orrs	r3, r2
 801b99a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801b99c:	697b      	ldr	r3, [r7, #20]
 801b99e:	f023 0320 	bic.w	r3, r3, #32
 801b9a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801b9a4:	683b      	ldr	r3, [r7, #0]
 801b9a6:	689b      	ldr	r3, [r3, #8]
 801b9a8:	011b      	lsls	r3, r3, #4
 801b9aa:	697a      	ldr	r2, [r7, #20]
 801b9ac:	4313      	orrs	r3, r2
 801b9ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	4a1e      	ldr	r2, [pc, #120]	; (801ba2c <TIM_OC2_SetConfig+0xd4>)
 801b9b4:	4293      	cmp	r3, r2
 801b9b6:	d10d      	bne.n	801b9d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801b9b8:	697b      	ldr	r3, [r7, #20]
 801b9ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b9be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801b9c0:	683b      	ldr	r3, [r7, #0]
 801b9c2:	68db      	ldr	r3, [r3, #12]
 801b9c4:	011b      	lsls	r3, r3, #4
 801b9c6:	697a      	ldr	r2, [r7, #20]
 801b9c8:	4313      	orrs	r3, r2
 801b9ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801b9cc:	697b      	ldr	r3, [r7, #20]
 801b9ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b9d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	4a15      	ldr	r2, [pc, #84]	; (801ba2c <TIM_OC2_SetConfig+0xd4>)
 801b9d8:	4293      	cmp	r3, r2
 801b9da:	d113      	bne.n	801ba04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801b9dc:	693b      	ldr	r3, [r7, #16]
 801b9de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b9e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801b9e4:	693b      	ldr	r3, [r7, #16]
 801b9e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b9ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801b9ec:	683b      	ldr	r3, [r7, #0]
 801b9ee:	695b      	ldr	r3, [r3, #20]
 801b9f0:	009b      	lsls	r3, r3, #2
 801b9f2:	693a      	ldr	r2, [r7, #16]
 801b9f4:	4313      	orrs	r3, r2
 801b9f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801b9f8:	683b      	ldr	r3, [r7, #0]
 801b9fa:	699b      	ldr	r3, [r3, #24]
 801b9fc:	009b      	lsls	r3, r3, #2
 801b9fe:	693a      	ldr	r2, [r7, #16]
 801ba00:	4313      	orrs	r3, r2
 801ba02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	693a      	ldr	r2, [r7, #16]
 801ba08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	68fa      	ldr	r2, [r7, #12]
 801ba0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801ba10:	683b      	ldr	r3, [r7, #0]
 801ba12:	685a      	ldr	r2, [r3, #4]
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	697a      	ldr	r2, [r7, #20]
 801ba1c:	621a      	str	r2, [r3, #32]
}
 801ba1e:	bf00      	nop
 801ba20:	371c      	adds	r7, #28
 801ba22:	46bd      	mov	sp, r7
 801ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba28:	4770      	bx	lr
 801ba2a:	bf00      	nop
 801ba2c:	40010000 	.word	0x40010000

0801ba30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ba30:	b480      	push	{r7}
 801ba32:	b087      	sub	sp, #28
 801ba34:	af00      	add	r7, sp, #0
 801ba36:	6078      	str	r0, [r7, #4]
 801ba38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	6a1b      	ldr	r3, [r3, #32]
 801ba3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	6a1b      	ldr	r3, [r3, #32]
 801ba4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	685b      	ldr	r3, [r3, #4]
 801ba50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	69db      	ldr	r3, [r3, #28]
 801ba56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801ba58:	68fb      	ldr	r3, [r7, #12]
 801ba5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ba5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801ba60:	68fb      	ldr	r3, [r7, #12]
 801ba62:	f023 0303 	bic.w	r3, r3, #3
 801ba66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ba68:	683b      	ldr	r3, [r7, #0]
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	68fa      	ldr	r2, [r7, #12]
 801ba6e:	4313      	orrs	r3, r2
 801ba70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801ba72:	697b      	ldr	r3, [r7, #20]
 801ba74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ba78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801ba7a:	683b      	ldr	r3, [r7, #0]
 801ba7c:	689b      	ldr	r3, [r3, #8]
 801ba7e:	021b      	lsls	r3, r3, #8
 801ba80:	697a      	ldr	r2, [r7, #20]
 801ba82:	4313      	orrs	r3, r2
 801ba84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	4a1d      	ldr	r2, [pc, #116]	; (801bb00 <TIM_OC3_SetConfig+0xd0>)
 801ba8a:	4293      	cmp	r3, r2
 801ba8c:	d10d      	bne.n	801baaa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801ba8e:	697b      	ldr	r3, [r7, #20]
 801ba90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ba94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801ba96:	683b      	ldr	r3, [r7, #0]
 801ba98:	68db      	ldr	r3, [r3, #12]
 801ba9a:	021b      	lsls	r3, r3, #8
 801ba9c:	697a      	ldr	r2, [r7, #20]
 801ba9e:	4313      	orrs	r3, r2
 801baa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801baa2:	697b      	ldr	r3, [r7, #20]
 801baa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801baa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	4a14      	ldr	r2, [pc, #80]	; (801bb00 <TIM_OC3_SetConfig+0xd0>)
 801baae:	4293      	cmp	r3, r2
 801bab0:	d113      	bne.n	801bada <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801bab2:	693b      	ldr	r3, [r7, #16]
 801bab4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801baba:	693b      	ldr	r3, [r7, #16]
 801babc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801bac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801bac2:	683b      	ldr	r3, [r7, #0]
 801bac4:	695b      	ldr	r3, [r3, #20]
 801bac6:	011b      	lsls	r3, r3, #4
 801bac8:	693a      	ldr	r2, [r7, #16]
 801baca:	4313      	orrs	r3, r2
 801bacc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801bace:	683b      	ldr	r3, [r7, #0]
 801bad0:	699b      	ldr	r3, [r3, #24]
 801bad2:	011b      	lsls	r3, r3, #4
 801bad4:	693a      	ldr	r2, [r7, #16]
 801bad6:	4313      	orrs	r3, r2
 801bad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	693a      	ldr	r2, [r7, #16]
 801bade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	68fa      	ldr	r2, [r7, #12]
 801bae4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801bae6:	683b      	ldr	r3, [r7, #0]
 801bae8:	685a      	ldr	r2, [r3, #4]
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	697a      	ldr	r2, [r7, #20]
 801baf2:	621a      	str	r2, [r3, #32]
}
 801baf4:	bf00      	nop
 801baf6:	371c      	adds	r7, #28
 801baf8:	46bd      	mov	sp, r7
 801bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bafe:	4770      	bx	lr
 801bb00:	40010000 	.word	0x40010000

0801bb04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801bb04:	b480      	push	{r7}
 801bb06:	b087      	sub	sp, #28
 801bb08:	af00      	add	r7, sp, #0
 801bb0a:	6078      	str	r0, [r7, #4]
 801bb0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	6a1b      	ldr	r3, [r3, #32]
 801bb12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	6a1b      	ldr	r3, [r3, #32]
 801bb1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	685b      	ldr	r3, [r3, #4]
 801bb24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	69db      	ldr	r3, [r3, #28]
 801bb2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801bb32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801bb34:	68fb      	ldr	r3, [r7, #12]
 801bb36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801bb3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801bb3c:	683b      	ldr	r3, [r7, #0]
 801bb3e:	681b      	ldr	r3, [r3, #0]
 801bb40:	021b      	lsls	r3, r3, #8
 801bb42:	68fa      	ldr	r2, [r7, #12]
 801bb44:	4313      	orrs	r3, r2
 801bb46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801bb48:	693b      	ldr	r3, [r7, #16]
 801bb4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801bb4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801bb50:	683b      	ldr	r3, [r7, #0]
 801bb52:	689b      	ldr	r3, [r3, #8]
 801bb54:	031b      	lsls	r3, r3, #12
 801bb56:	693a      	ldr	r2, [r7, #16]
 801bb58:	4313      	orrs	r3, r2
 801bb5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801bb5c:	687b      	ldr	r3, [r7, #4]
 801bb5e:	4a10      	ldr	r2, [pc, #64]	; (801bba0 <TIM_OC4_SetConfig+0x9c>)
 801bb60:	4293      	cmp	r3, r2
 801bb62:	d109      	bne.n	801bb78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801bb64:	697b      	ldr	r3, [r7, #20]
 801bb66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801bb6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801bb6c:	683b      	ldr	r3, [r7, #0]
 801bb6e:	695b      	ldr	r3, [r3, #20]
 801bb70:	019b      	lsls	r3, r3, #6
 801bb72:	697a      	ldr	r2, [r7, #20]
 801bb74:	4313      	orrs	r3, r2
 801bb76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	697a      	ldr	r2, [r7, #20]
 801bb7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	68fa      	ldr	r2, [r7, #12]
 801bb82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801bb84:	683b      	ldr	r3, [r7, #0]
 801bb86:	685a      	ldr	r2, [r3, #4]
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	693a      	ldr	r2, [r7, #16]
 801bb90:	621a      	str	r2, [r3, #32]
}
 801bb92:	bf00      	nop
 801bb94:	371c      	adds	r7, #28
 801bb96:	46bd      	mov	sp, r7
 801bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb9c:	4770      	bx	lr
 801bb9e:	bf00      	nop
 801bba0:	40010000 	.word	0x40010000

0801bba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801bba4:	b480      	push	{r7}
 801bba6:	b087      	sub	sp, #28
 801bba8:	af00      	add	r7, sp, #0
 801bbaa:	60f8      	str	r0, [r7, #12]
 801bbac:	60b9      	str	r1, [r7, #8]
 801bbae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	6a1b      	ldr	r3, [r3, #32]
 801bbb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801bbb6:	68fb      	ldr	r3, [r7, #12]
 801bbb8:	6a1b      	ldr	r3, [r3, #32]
 801bbba:	f023 0201 	bic.w	r2, r3, #1
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	699b      	ldr	r3, [r3, #24]
 801bbc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801bbc8:	693b      	ldr	r3, [r7, #16]
 801bbca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801bbce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	011b      	lsls	r3, r3, #4
 801bbd4:	693a      	ldr	r2, [r7, #16]
 801bbd6:	4313      	orrs	r3, r2
 801bbd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801bbda:	697b      	ldr	r3, [r7, #20]
 801bbdc:	f023 030a 	bic.w	r3, r3, #10
 801bbe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801bbe2:	697a      	ldr	r2, [r7, #20]
 801bbe4:	68bb      	ldr	r3, [r7, #8]
 801bbe6:	4313      	orrs	r3, r2
 801bbe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801bbea:	68fb      	ldr	r3, [r7, #12]
 801bbec:	693a      	ldr	r2, [r7, #16]
 801bbee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	697a      	ldr	r2, [r7, #20]
 801bbf4:	621a      	str	r2, [r3, #32]
}
 801bbf6:	bf00      	nop
 801bbf8:	371c      	adds	r7, #28
 801bbfa:	46bd      	mov	sp, r7
 801bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc00:	4770      	bx	lr

0801bc02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801bc02:	b480      	push	{r7}
 801bc04:	b087      	sub	sp, #28
 801bc06:	af00      	add	r7, sp, #0
 801bc08:	60f8      	str	r0, [r7, #12]
 801bc0a:	60b9      	str	r1, [r7, #8]
 801bc0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801bc0e:	68fb      	ldr	r3, [r7, #12]
 801bc10:	6a1b      	ldr	r3, [r3, #32]
 801bc12:	f023 0210 	bic.w	r2, r3, #16
 801bc16:	68fb      	ldr	r3, [r7, #12]
 801bc18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	699b      	ldr	r3, [r3, #24]
 801bc1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801bc20:	68fb      	ldr	r3, [r7, #12]
 801bc22:	6a1b      	ldr	r3, [r3, #32]
 801bc24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801bc26:	697b      	ldr	r3, [r7, #20]
 801bc28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801bc2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	031b      	lsls	r3, r3, #12
 801bc32:	697a      	ldr	r2, [r7, #20]
 801bc34:	4313      	orrs	r3, r2
 801bc36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801bc38:	693b      	ldr	r3, [r7, #16]
 801bc3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801bc3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801bc40:	68bb      	ldr	r3, [r7, #8]
 801bc42:	011b      	lsls	r3, r3, #4
 801bc44:	693a      	ldr	r2, [r7, #16]
 801bc46:	4313      	orrs	r3, r2
 801bc48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801bc4a:	68fb      	ldr	r3, [r7, #12]
 801bc4c:	697a      	ldr	r2, [r7, #20]
 801bc4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801bc50:	68fb      	ldr	r3, [r7, #12]
 801bc52:	693a      	ldr	r2, [r7, #16]
 801bc54:	621a      	str	r2, [r3, #32]
}
 801bc56:	bf00      	nop
 801bc58:	371c      	adds	r7, #28
 801bc5a:	46bd      	mov	sp, r7
 801bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc60:	4770      	bx	lr

0801bc62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801bc62:	b480      	push	{r7}
 801bc64:	b085      	sub	sp, #20
 801bc66:	af00      	add	r7, sp, #0
 801bc68:	6078      	str	r0, [r7, #4]
 801bc6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	689b      	ldr	r3, [r3, #8]
 801bc70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801bc72:	68fb      	ldr	r3, [r7, #12]
 801bc74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bc78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801bc7a:	683a      	ldr	r2, [r7, #0]
 801bc7c:	68fb      	ldr	r3, [r7, #12]
 801bc7e:	4313      	orrs	r3, r2
 801bc80:	f043 0307 	orr.w	r3, r3, #7
 801bc84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	68fa      	ldr	r2, [r7, #12]
 801bc8a:	609a      	str	r2, [r3, #8]
}
 801bc8c:	bf00      	nop
 801bc8e:	3714      	adds	r7, #20
 801bc90:	46bd      	mov	sp, r7
 801bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc96:	4770      	bx	lr

0801bc98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801bc98:	b480      	push	{r7}
 801bc9a:	b087      	sub	sp, #28
 801bc9c:	af00      	add	r7, sp, #0
 801bc9e:	60f8      	str	r0, [r7, #12]
 801bca0:	60b9      	str	r1, [r7, #8]
 801bca2:	607a      	str	r2, [r7, #4]
 801bca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801bca6:	68fb      	ldr	r3, [r7, #12]
 801bca8:	689b      	ldr	r3, [r3, #8]
 801bcaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801bcac:	697b      	ldr	r3, [r7, #20]
 801bcae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801bcb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801bcb4:	683b      	ldr	r3, [r7, #0]
 801bcb6:	021a      	lsls	r2, r3, #8
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	431a      	orrs	r2, r3
 801bcbc:	68bb      	ldr	r3, [r7, #8]
 801bcbe:	4313      	orrs	r3, r2
 801bcc0:	697a      	ldr	r2, [r7, #20]
 801bcc2:	4313      	orrs	r3, r2
 801bcc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801bcc6:	68fb      	ldr	r3, [r7, #12]
 801bcc8:	697a      	ldr	r2, [r7, #20]
 801bcca:	609a      	str	r2, [r3, #8]
}
 801bccc:	bf00      	nop
 801bcce:	371c      	adds	r7, #28
 801bcd0:	46bd      	mov	sp, r7
 801bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcd6:	4770      	bx	lr

0801bcd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801bcd8:	b480      	push	{r7}
 801bcda:	b087      	sub	sp, #28
 801bcdc:	af00      	add	r7, sp, #0
 801bcde:	60f8      	str	r0, [r7, #12]
 801bce0:	60b9      	str	r1, [r7, #8]
 801bce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801bce4:	68bb      	ldr	r3, [r7, #8]
 801bce6:	f003 031f 	and.w	r3, r3, #31
 801bcea:	2201      	movs	r2, #1
 801bcec:	fa02 f303 	lsl.w	r3, r2, r3
 801bcf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801bcf2:	68fb      	ldr	r3, [r7, #12]
 801bcf4:	6a1a      	ldr	r2, [r3, #32]
 801bcf6:	697b      	ldr	r3, [r7, #20]
 801bcf8:	43db      	mvns	r3, r3
 801bcfa:	401a      	ands	r2, r3
 801bcfc:	68fb      	ldr	r3, [r7, #12]
 801bcfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801bd00:	68fb      	ldr	r3, [r7, #12]
 801bd02:	6a1a      	ldr	r2, [r3, #32]
 801bd04:	68bb      	ldr	r3, [r7, #8]
 801bd06:	f003 031f 	and.w	r3, r3, #31
 801bd0a:	6879      	ldr	r1, [r7, #4]
 801bd0c:	fa01 f303 	lsl.w	r3, r1, r3
 801bd10:	431a      	orrs	r2, r3
 801bd12:	68fb      	ldr	r3, [r7, #12]
 801bd14:	621a      	str	r2, [r3, #32]
}
 801bd16:	bf00      	nop
 801bd18:	371c      	adds	r7, #28
 801bd1a:	46bd      	mov	sp, r7
 801bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd20:	4770      	bx	lr
	...

0801bd24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801bd24:	b480      	push	{r7}
 801bd26:	b085      	sub	sp, #20
 801bd28:	af00      	add	r7, sp, #0
 801bd2a:	6078      	str	r0, [r7, #4]
 801bd2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801bd34:	2b01      	cmp	r3, #1
 801bd36:	d101      	bne.n	801bd3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801bd38:	2302      	movs	r3, #2
 801bd3a:	e050      	b.n	801bdde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	2201      	movs	r2, #1
 801bd40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	2202      	movs	r2, #2
 801bd48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	681b      	ldr	r3, [r3, #0]
 801bd50:	685b      	ldr	r3, [r3, #4]
 801bd52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	689b      	ldr	r3, [r3, #8]
 801bd5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801bd5c:	68fb      	ldr	r3, [r7, #12]
 801bd5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bd62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801bd64:	683b      	ldr	r3, [r7, #0]
 801bd66:	681b      	ldr	r3, [r3, #0]
 801bd68:	68fa      	ldr	r2, [r7, #12]
 801bd6a:	4313      	orrs	r3, r2
 801bd6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801bd6e:	687b      	ldr	r3, [r7, #4]
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	68fa      	ldr	r2, [r7, #12]
 801bd74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	681b      	ldr	r3, [r3, #0]
 801bd7a:	4a1c      	ldr	r2, [pc, #112]	; (801bdec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801bd7c:	4293      	cmp	r3, r2
 801bd7e:	d018      	beq.n	801bdb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bd88:	d013      	beq.n	801bdb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	4a18      	ldr	r2, [pc, #96]	; (801bdf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801bd90:	4293      	cmp	r3, r2
 801bd92:	d00e      	beq.n	801bdb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	4a16      	ldr	r2, [pc, #88]	; (801bdf4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801bd9a:	4293      	cmp	r3, r2
 801bd9c:	d009      	beq.n	801bdb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	4a15      	ldr	r2, [pc, #84]	; (801bdf8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801bda4:	4293      	cmp	r3, r2
 801bda6:	d004      	beq.n	801bdb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	4a13      	ldr	r2, [pc, #76]	; (801bdfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801bdae:	4293      	cmp	r3, r2
 801bdb0:	d10c      	bne.n	801bdcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801bdb2:	68bb      	ldr	r3, [r7, #8]
 801bdb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801bdb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801bdba:	683b      	ldr	r3, [r7, #0]
 801bdbc:	685b      	ldr	r3, [r3, #4]
 801bdbe:	68ba      	ldr	r2, [r7, #8]
 801bdc0:	4313      	orrs	r3, r2
 801bdc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	681b      	ldr	r3, [r3, #0]
 801bdc8:	68ba      	ldr	r2, [r7, #8]
 801bdca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	2201      	movs	r2, #1
 801bdd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	2200      	movs	r2, #0
 801bdd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801bddc:	2300      	movs	r3, #0
}
 801bdde:	4618      	mov	r0, r3
 801bde0:	3714      	adds	r7, #20
 801bde2:	46bd      	mov	sp, r7
 801bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bde8:	4770      	bx	lr
 801bdea:	bf00      	nop
 801bdec:	40010000 	.word	0x40010000
 801bdf0:	40000400 	.word	0x40000400
 801bdf4:	40000800 	.word	0x40000800
 801bdf8:	40000c00 	.word	0x40000c00
 801bdfc:	40014000 	.word	0x40014000

0801be00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801be00:	b480      	push	{r7}
 801be02:	b083      	sub	sp, #12
 801be04:	af00      	add	r7, sp, #0
 801be06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801be08:	bf00      	nop
 801be0a:	370c      	adds	r7, #12
 801be0c:	46bd      	mov	sp, r7
 801be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be12:	4770      	bx	lr

0801be14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801be14:	b480      	push	{r7}
 801be16:	b083      	sub	sp, #12
 801be18:	af00      	add	r7, sp, #0
 801be1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801be1c:	bf00      	nop
 801be1e:	370c      	adds	r7, #12
 801be20:	46bd      	mov	sp, r7
 801be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be26:	4770      	bx	lr

0801be28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801be28:	b580      	push	{r7, lr}
 801be2a:	b082      	sub	sp, #8
 801be2c:	af00      	add	r7, sp, #0
 801be2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	2b00      	cmp	r3, #0
 801be34:	d101      	bne.n	801be3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801be36:	2301      	movs	r3, #1
 801be38:	e03f      	b.n	801beba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801be40:	b2db      	uxtb	r3, r3
 801be42:	2b00      	cmp	r3, #0
 801be44:	d106      	bne.n	801be54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	2200      	movs	r2, #0
 801be4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801be4e:	6878      	ldr	r0, [r7, #4]
 801be50:	f7fa fafe 	bl	8016450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	2224      	movs	r2, #36	; 0x24
 801be58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	68da      	ldr	r2, [r3, #12]
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801be6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801be6c:	6878      	ldr	r0, [r7, #4]
 801be6e:	f000 ff9b 	bl	801cda8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	681b      	ldr	r3, [r3, #0]
 801be76:	691a      	ldr	r2, [r3, #16]
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	681b      	ldr	r3, [r3, #0]
 801be7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801be80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	681b      	ldr	r3, [r3, #0]
 801be86:	695a      	ldr	r2, [r3, #20]
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	681b      	ldr	r3, [r3, #0]
 801be8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801be90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	681b      	ldr	r3, [r3, #0]
 801be96:	68da      	ldr	r2, [r3, #12]
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	681b      	ldr	r3, [r3, #0]
 801be9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801bea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	2200      	movs	r2, #0
 801bea6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	2220      	movs	r2, #32
 801beac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	2220      	movs	r2, #32
 801beb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801beb8:	2300      	movs	r3, #0
}
 801beba:	4618      	mov	r0, r3
 801bebc:	3708      	adds	r7, #8
 801bebe:	46bd      	mov	sp, r7
 801bec0:	bd80      	pop	{r7, pc}

0801bec2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801bec2:	b580      	push	{r7, lr}
 801bec4:	b08a      	sub	sp, #40	; 0x28
 801bec6:	af02      	add	r7, sp, #8
 801bec8:	60f8      	str	r0, [r7, #12]
 801beca:	60b9      	str	r1, [r7, #8]
 801becc:	603b      	str	r3, [r7, #0]
 801bece:	4613      	mov	r3, r2
 801bed0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801bed2:	2300      	movs	r3, #0
 801bed4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801bed6:	68fb      	ldr	r3, [r7, #12]
 801bed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801bedc:	b2db      	uxtb	r3, r3
 801bede:	2b20      	cmp	r3, #32
 801bee0:	d17c      	bne.n	801bfdc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801bee2:	68bb      	ldr	r3, [r7, #8]
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	d002      	beq.n	801beee <HAL_UART_Transmit+0x2c>
 801bee8:	88fb      	ldrh	r3, [r7, #6]
 801beea:	2b00      	cmp	r3, #0
 801beec:	d101      	bne.n	801bef2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801beee:	2301      	movs	r3, #1
 801bef0:	e075      	b.n	801bfde <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801bef2:	68fb      	ldr	r3, [r7, #12]
 801bef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801bef8:	2b01      	cmp	r3, #1
 801befa:	d101      	bne.n	801bf00 <HAL_UART_Transmit+0x3e>
 801befc:	2302      	movs	r3, #2
 801befe:	e06e      	b.n	801bfde <HAL_UART_Transmit+0x11c>
 801bf00:	68fb      	ldr	r3, [r7, #12]
 801bf02:	2201      	movs	r2, #1
 801bf04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bf08:	68fb      	ldr	r3, [r7, #12]
 801bf0a:	2200      	movs	r2, #0
 801bf0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801bf0e:	68fb      	ldr	r3, [r7, #12]
 801bf10:	2221      	movs	r2, #33	; 0x21
 801bf12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801bf16:	f7fa fd53 	bl	80169c0 <HAL_GetTick>
 801bf1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801bf1c:	68fb      	ldr	r3, [r7, #12]
 801bf1e:	88fa      	ldrh	r2, [r7, #6]
 801bf20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801bf22:	68fb      	ldr	r3, [r7, #12]
 801bf24:	88fa      	ldrh	r2, [r7, #6]
 801bf26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bf28:	68fb      	ldr	r3, [r7, #12]
 801bf2a:	689b      	ldr	r3, [r3, #8]
 801bf2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bf30:	d108      	bne.n	801bf44 <HAL_UART_Transmit+0x82>
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	691b      	ldr	r3, [r3, #16]
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d104      	bne.n	801bf44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801bf3a:	2300      	movs	r3, #0
 801bf3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801bf3e:	68bb      	ldr	r3, [r7, #8]
 801bf40:	61bb      	str	r3, [r7, #24]
 801bf42:	e003      	b.n	801bf4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801bf44:	68bb      	ldr	r3, [r7, #8]
 801bf46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801bf48:	2300      	movs	r3, #0
 801bf4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801bf4c:	68fb      	ldr	r3, [r7, #12]
 801bf4e:	2200      	movs	r2, #0
 801bf50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 801bf54:	e02a      	b.n	801bfac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801bf56:	683b      	ldr	r3, [r7, #0]
 801bf58:	9300      	str	r3, [sp, #0]
 801bf5a:	697b      	ldr	r3, [r7, #20]
 801bf5c:	2200      	movs	r2, #0
 801bf5e:	2180      	movs	r1, #128	; 0x80
 801bf60:	68f8      	ldr	r0, [r7, #12]
 801bf62:	f000 fc53 	bl	801c80c <UART_WaitOnFlagUntilTimeout>
 801bf66:	4603      	mov	r3, r0
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	d001      	beq.n	801bf70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801bf6c:	2303      	movs	r3, #3
 801bf6e:	e036      	b.n	801bfde <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801bf70:	69fb      	ldr	r3, [r7, #28]
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d10b      	bne.n	801bf8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801bf76:	69bb      	ldr	r3, [r7, #24]
 801bf78:	881b      	ldrh	r3, [r3, #0]
 801bf7a:	461a      	mov	r2, r3
 801bf7c:	68fb      	ldr	r3, [r7, #12]
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801bf84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801bf86:	69bb      	ldr	r3, [r7, #24]
 801bf88:	3302      	adds	r3, #2
 801bf8a:	61bb      	str	r3, [r7, #24]
 801bf8c:	e007      	b.n	801bf9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801bf8e:	69fb      	ldr	r3, [r7, #28]
 801bf90:	781a      	ldrb	r2, [r3, #0]
 801bf92:	68fb      	ldr	r3, [r7, #12]
 801bf94:	681b      	ldr	r3, [r3, #0]
 801bf96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801bf98:	69fb      	ldr	r3, [r7, #28]
 801bf9a:	3301      	adds	r3, #1
 801bf9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801bf9e:	68fb      	ldr	r3, [r7, #12]
 801bfa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801bfa2:	b29b      	uxth	r3, r3
 801bfa4:	3b01      	subs	r3, #1
 801bfa6:	b29a      	uxth	r2, r3
 801bfa8:	68fb      	ldr	r3, [r7, #12]
 801bfaa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801bfac:	68fb      	ldr	r3, [r7, #12]
 801bfae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801bfb0:	b29b      	uxth	r3, r3
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d1cf      	bne.n	801bf56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801bfb6:	683b      	ldr	r3, [r7, #0]
 801bfb8:	9300      	str	r3, [sp, #0]
 801bfba:	697b      	ldr	r3, [r7, #20]
 801bfbc:	2200      	movs	r2, #0
 801bfbe:	2140      	movs	r1, #64	; 0x40
 801bfc0:	68f8      	ldr	r0, [r7, #12]
 801bfc2:	f000 fc23 	bl	801c80c <UART_WaitOnFlagUntilTimeout>
 801bfc6:	4603      	mov	r3, r0
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	d001      	beq.n	801bfd0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801bfcc:	2303      	movs	r3, #3
 801bfce:	e006      	b.n	801bfde <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801bfd0:	68fb      	ldr	r3, [r7, #12]
 801bfd2:	2220      	movs	r2, #32
 801bfd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801bfd8:	2300      	movs	r3, #0
 801bfda:	e000      	b.n	801bfde <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801bfdc:	2302      	movs	r3, #2
  }
}
 801bfde:	4618      	mov	r0, r3
 801bfe0:	3720      	adds	r7, #32
 801bfe2:	46bd      	mov	sp, r7
 801bfe4:	bd80      	pop	{r7, pc}

0801bfe6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bfe6:	b580      	push	{r7, lr}
 801bfe8:	b08c      	sub	sp, #48	; 0x30
 801bfea:	af00      	add	r7, sp, #0
 801bfec:	60f8      	str	r0, [r7, #12]
 801bfee:	60b9      	str	r1, [r7, #8]
 801bff0:	4613      	mov	r3, r2
 801bff2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801bff4:	68fb      	ldr	r3, [r7, #12]
 801bff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801bffa:	b2db      	uxtb	r3, r3
 801bffc:	2b20      	cmp	r3, #32
 801bffe:	d152      	bne.n	801c0a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 801c000:	68bb      	ldr	r3, [r7, #8]
 801c002:	2b00      	cmp	r3, #0
 801c004:	d002      	beq.n	801c00c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 801c006:	88fb      	ldrh	r3, [r7, #6]
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d101      	bne.n	801c010 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 801c00c:	2301      	movs	r3, #1
 801c00e:	e04b      	b.n	801c0a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 801c010:	68fb      	ldr	r3, [r7, #12]
 801c012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801c016:	2b01      	cmp	r3, #1
 801c018:	d101      	bne.n	801c01e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 801c01a:	2302      	movs	r3, #2
 801c01c:	e044      	b.n	801c0a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 801c01e:	68fb      	ldr	r3, [r7, #12]
 801c020:	2201      	movs	r2, #1
 801c022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801c026:	68fb      	ldr	r3, [r7, #12]
 801c028:	2201      	movs	r2, #1
 801c02a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801c02c:	88fb      	ldrh	r3, [r7, #6]
 801c02e:	461a      	mov	r2, r3
 801c030:	68b9      	ldr	r1, [r7, #8]
 801c032:	68f8      	ldr	r0, [r7, #12]
 801c034:	f000 fc58 	bl	801c8e8 <UART_Start_Receive_DMA>
 801c038:	4603      	mov	r3, r0
 801c03a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801c03e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c042:	2b00      	cmp	r3, #0
 801c044:	d12c      	bne.n	801c0a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c046:	68fb      	ldr	r3, [r7, #12]
 801c048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c04a:	2b01      	cmp	r3, #1
 801c04c:	d125      	bne.n	801c09a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 801c04e:	2300      	movs	r3, #0
 801c050:	613b      	str	r3, [r7, #16]
 801c052:	68fb      	ldr	r3, [r7, #12]
 801c054:	681b      	ldr	r3, [r3, #0]
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	613b      	str	r3, [r7, #16]
 801c05a:	68fb      	ldr	r3, [r7, #12]
 801c05c:	681b      	ldr	r3, [r3, #0]
 801c05e:	685b      	ldr	r3, [r3, #4]
 801c060:	613b      	str	r3, [r7, #16]
 801c062:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	681b      	ldr	r3, [r3, #0]
 801c068:	330c      	adds	r3, #12
 801c06a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c06c:	69bb      	ldr	r3, [r7, #24]
 801c06e:	e853 3f00 	ldrex	r3, [r3]
 801c072:	617b      	str	r3, [r7, #20]
   return(result);
 801c074:	697b      	ldr	r3, [r7, #20]
 801c076:	f043 0310 	orr.w	r3, r3, #16
 801c07a:	62bb      	str	r3, [r7, #40]	; 0x28
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	330c      	adds	r3, #12
 801c082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c084:	627a      	str	r2, [r7, #36]	; 0x24
 801c086:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c088:	6a39      	ldr	r1, [r7, #32]
 801c08a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c08c:	e841 2300 	strex	r3, r2, [r1]
 801c090:	61fb      	str	r3, [r7, #28]
   return(result);
 801c092:	69fb      	ldr	r3, [r7, #28]
 801c094:	2b00      	cmp	r3, #0
 801c096:	d1e5      	bne.n	801c064 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 801c098:	e002      	b.n	801c0a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801c09a:	2301      	movs	r3, #1
 801c09c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801c0a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c0a4:	e000      	b.n	801c0a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 801c0a6:	2302      	movs	r3, #2
  }
}
 801c0a8:	4618      	mov	r0, r3
 801c0aa:	3730      	adds	r7, #48	; 0x30
 801c0ac:	46bd      	mov	sp, r7
 801c0ae:	bd80      	pop	{r7, pc}

0801c0b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801c0b0:	b580      	push	{r7, lr}
 801c0b2:	b0ba      	sub	sp, #232	; 0xe8
 801c0b4:	af00      	add	r7, sp, #0
 801c0b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	681b      	ldr	r3, [r3, #0]
 801c0be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	68db      	ldr	r3, [r3, #12]
 801c0c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	681b      	ldr	r3, [r3, #0]
 801c0d0:	695b      	ldr	r3, [r3, #20]
 801c0d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801c0d6:	2300      	movs	r3, #0
 801c0d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801c0dc:	2300      	movs	r3, #0
 801c0de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801c0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c0e6:	f003 030f 	and.w	r3, r3, #15
 801c0ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801c0ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	d10f      	bne.n	801c116 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801c0f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c0fa:	f003 0320 	and.w	r3, r3, #32
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d009      	beq.n	801c116 <HAL_UART_IRQHandler+0x66>
 801c102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c106:	f003 0320 	and.w	r3, r3, #32
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d003      	beq.n	801c116 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801c10e:	6878      	ldr	r0, [r7, #4]
 801c110:	f000 fd8f 	bl	801cc32 <UART_Receive_IT>
      return;
 801c114:	e256      	b.n	801c5c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801c116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c11a:	2b00      	cmp	r3, #0
 801c11c:	f000 80de 	beq.w	801c2dc <HAL_UART_IRQHandler+0x22c>
 801c120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c124:	f003 0301 	and.w	r3, r3, #1
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d106      	bne.n	801c13a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801c12c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c130:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801c134:	2b00      	cmp	r3, #0
 801c136:	f000 80d1 	beq.w	801c2dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801c13a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c13e:	f003 0301 	and.w	r3, r3, #1
 801c142:	2b00      	cmp	r3, #0
 801c144:	d00b      	beq.n	801c15e <HAL_UART_IRQHandler+0xae>
 801c146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c14e:	2b00      	cmp	r3, #0
 801c150:	d005      	beq.n	801c15e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c156:	f043 0201 	orr.w	r2, r3, #1
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801c15e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c162:	f003 0304 	and.w	r3, r3, #4
 801c166:	2b00      	cmp	r3, #0
 801c168:	d00b      	beq.n	801c182 <HAL_UART_IRQHandler+0xd2>
 801c16a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c16e:	f003 0301 	and.w	r3, r3, #1
 801c172:	2b00      	cmp	r3, #0
 801c174:	d005      	beq.n	801c182 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801c176:	687b      	ldr	r3, [r7, #4]
 801c178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c17a:	f043 0202 	orr.w	r2, r3, #2
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801c182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c186:	f003 0302 	and.w	r3, r3, #2
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	d00b      	beq.n	801c1a6 <HAL_UART_IRQHandler+0xf6>
 801c18e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c192:	f003 0301 	and.w	r3, r3, #1
 801c196:	2b00      	cmp	r3, #0
 801c198:	d005      	beq.n	801c1a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c19e:	f043 0204 	orr.w	r2, r3, #4
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801c1a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c1aa:	f003 0308 	and.w	r3, r3, #8
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d011      	beq.n	801c1d6 <HAL_UART_IRQHandler+0x126>
 801c1b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c1b6:	f003 0320 	and.w	r3, r3, #32
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d105      	bne.n	801c1ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801c1be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c1c2:	f003 0301 	and.w	r3, r3, #1
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d005      	beq.n	801c1d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c1ce:	f043 0208 	orr.w	r2, r3, #8
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c1da:	2b00      	cmp	r3, #0
 801c1dc:	f000 81ed 	beq.w	801c5ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801c1e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c1e4:	f003 0320 	and.w	r3, r3, #32
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	d008      	beq.n	801c1fe <HAL_UART_IRQHandler+0x14e>
 801c1ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c1f0:	f003 0320 	and.w	r3, r3, #32
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	d002      	beq.n	801c1fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801c1f8:	6878      	ldr	r0, [r7, #4]
 801c1fa:	f000 fd1a 	bl	801cc32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	695b      	ldr	r3, [r3, #20]
 801c204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c208:	2b40      	cmp	r3, #64	; 0x40
 801c20a:	bf0c      	ite	eq
 801c20c:	2301      	moveq	r3, #1
 801c20e:	2300      	movne	r3, #0
 801c210:	b2db      	uxtb	r3, r3
 801c212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c21a:	f003 0308 	and.w	r3, r3, #8
 801c21e:	2b00      	cmp	r3, #0
 801c220:	d103      	bne.n	801c22a <HAL_UART_IRQHandler+0x17a>
 801c222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c226:	2b00      	cmp	r3, #0
 801c228:	d04f      	beq.n	801c2ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801c22a:	6878      	ldr	r0, [r7, #4]
 801c22c:	f000 fc22 	bl	801ca74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	695b      	ldr	r3, [r3, #20]
 801c236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c23a:	2b40      	cmp	r3, #64	; 0x40
 801c23c:	d141      	bne.n	801c2c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	681b      	ldr	r3, [r3, #0]
 801c242:	3314      	adds	r3, #20
 801c244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c248:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c24c:	e853 3f00 	ldrex	r3, [r3]
 801c250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801c254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c25c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	681b      	ldr	r3, [r3, #0]
 801c264:	3314      	adds	r3, #20
 801c266:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801c26a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801c26e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c272:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801c276:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801c27a:	e841 2300 	strex	r3, r2, [r1]
 801c27e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801c282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c286:	2b00      	cmp	r3, #0
 801c288:	d1d9      	bne.n	801c23e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d013      	beq.n	801c2ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c296:	4a7d      	ldr	r2, [pc, #500]	; (801c48c <HAL_UART_IRQHandler+0x3dc>)
 801c298:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c29e:	4618      	mov	r0, r3
 801c2a0:	f7fa fe46 	bl	8016f30 <HAL_DMA_Abort_IT>
 801c2a4:	4603      	mov	r3, r0
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d016      	beq.n	801c2d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c2ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c2b0:	687a      	ldr	r2, [r7, #4]
 801c2b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801c2b4:	4610      	mov	r0, r2
 801c2b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c2b8:	e00e      	b.n	801c2d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801c2ba:	6878      	ldr	r0, [r7, #4]
 801c2bc:	f000 f9a4 	bl	801c608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c2c0:	e00a      	b.n	801c2d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801c2c2:	6878      	ldr	r0, [r7, #4]
 801c2c4:	f000 f9a0 	bl	801c608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c2c8:	e006      	b.n	801c2d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801c2ca:	6878      	ldr	r0, [r7, #4]
 801c2cc:	f000 f99c 	bl	801c608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	2200      	movs	r2, #0
 801c2d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801c2d6:	e170      	b.n	801c5ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c2d8:	bf00      	nop
    return;
 801c2da:	e16e      	b.n	801c5ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2e0:	2b01      	cmp	r3, #1
 801c2e2:	f040 814a 	bne.w	801c57a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801c2e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c2ea:	f003 0310 	and.w	r3, r3, #16
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	f000 8143 	beq.w	801c57a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801c2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c2f8:	f003 0310 	and.w	r3, r3, #16
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	f000 813c 	beq.w	801c57a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801c302:	2300      	movs	r3, #0
 801c304:	60bb      	str	r3, [r7, #8]
 801c306:	687b      	ldr	r3, [r7, #4]
 801c308:	681b      	ldr	r3, [r3, #0]
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	60bb      	str	r3, [r7, #8]
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	681b      	ldr	r3, [r3, #0]
 801c312:	685b      	ldr	r3, [r3, #4]
 801c314:	60bb      	str	r3, [r7, #8]
 801c316:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	681b      	ldr	r3, [r3, #0]
 801c31c:	695b      	ldr	r3, [r3, #20]
 801c31e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c322:	2b40      	cmp	r3, #64	; 0x40
 801c324:	f040 80b4 	bne.w	801c490 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c32c:	681b      	ldr	r3, [r3, #0]
 801c32e:	685b      	ldr	r3, [r3, #4]
 801c330:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801c334:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801c338:	2b00      	cmp	r3, #0
 801c33a:	f000 8140 	beq.w	801c5be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801c346:	429a      	cmp	r2, r3
 801c348:	f080 8139 	bcs.w	801c5be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801c352:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c358:	69db      	ldr	r3, [r3, #28]
 801c35a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c35e:	f000 8088 	beq.w	801c472 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	681b      	ldr	r3, [r3, #0]
 801c366:	330c      	adds	r3, #12
 801c368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c36c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801c370:	e853 3f00 	ldrex	r3, [r3]
 801c374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801c378:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c37c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	681b      	ldr	r3, [r3, #0]
 801c388:	330c      	adds	r3, #12
 801c38a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801c38e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801c392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c396:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801c39a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801c39e:	e841 2300 	strex	r3, r2, [r1]
 801c3a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801c3a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d1d9      	bne.n	801c362 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	681b      	ldr	r3, [r3, #0]
 801c3b2:	3314      	adds	r3, #20
 801c3b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c3b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c3b8:	e853 3f00 	ldrex	r3, [r3]
 801c3bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801c3be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c3c0:	f023 0301 	bic.w	r3, r3, #1
 801c3c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	681b      	ldr	r3, [r3, #0]
 801c3cc:	3314      	adds	r3, #20
 801c3ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801c3d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801c3d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c3d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801c3da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c3de:	e841 2300 	strex	r3, r2, [r1]
 801c3e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801c3e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d1e1      	bne.n	801c3ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	681b      	ldr	r3, [r3, #0]
 801c3ee:	3314      	adds	r3, #20
 801c3f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c3f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c3f4:	e853 3f00 	ldrex	r3, [r3]
 801c3f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801c3fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c3fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	3314      	adds	r3, #20
 801c40a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801c40e:	66fa      	str	r2, [r7, #108]	; 0x6c
 801c410:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c412:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801c414:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c416:	e841 2300 	strex	r3, r2, [r1]
 801c41a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801c41c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c41e:	2b00      	cmp	r3, #0
 801c420:	d1e3      	bne.n	801c3ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	2220      	movs	r2, #32
 801c426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	2200      	movs	r2, #0
 801c42e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	681b      	ldr	r3, [r3, #0]
 801c434:	330c      	adds	r3, #12
 801c436:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c43a:	e853 3f00 	ldrex	r3, [r3]
 801c43e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c442:	f023 0310 	bic.w	r3, r3, #16
 801c446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	681b      	ldr	r3, [r3, #0]
 801c44e:	330c      	adds	r3, #12
 801c450:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801c454:	65ba      	str	r2, [r7, #88]	; 0x58
 801c456:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c458:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c45a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c45c:	e841 2300 	strex	r3, r2, [r1]
 801c460:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c464:	2b00      	cmp	r3, #0
 801c466:	d1e3      	bne.n	801c430 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c46c:	4618      	mov	r0, r3
 801c46e:	f7fa fcef 	bl	8016e50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c47a:	b29b      	uxth	r3, r3
 801c47c:	1ad3      	subs	r3, r2, r3
 801c47e:	b29b      	uxth	r3, r3
 801c480:	4619      	mov	r1, r3
 801c482:	6878      	ldr	r0, [r7, #4]
 801c484:	f7e4 fdba 	bl	8000ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801c488:	e099      	b.n	801c5be <HAL_UART_IRQHandler+0x50e>
 801c48a:	bf00      	nop
 801c48c:	0801cb3b 	.word	0x0801cb3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c498:	b29b      	uxth	r3, r3
 801c49a:	1ad3      	subs	r3, r2, r3
 801c49c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c4a4:	b29b      	uxth	r3, r3
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	f000 808b 	beq.w	801c5c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801c4ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c4b0:	2b00      	cmp	r3, #0
 801c4b2:	f000 8086 	beq.w	801c5c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	330c      	adds	r3, #12
 801c4bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c4c0:	e853 3f00 	ldrex	r3, [r3]
 801c4c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c4c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c4cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c4d0:	687b      	ldr	r3, [r7, #4]
 801c4d2:	681b      	ldr	r3, [r3, #0]
 801c4d4:	330c      	adds	r3, #12
 801c4d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801c4da:	647a      	str	r2, [r7, #68]	; 0x44
 801c4dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c4de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c4e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c4e2:	e841 2300 	strex	r3, r2, [r1]
 801c4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c4e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d1e3      	bne.n	801c4b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	3314      	adds	r3, #20
 801c4f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4f8:	e853 3f00 	ldrex	r3, [r3]
 801c4fc:	623b      	str	r3, [r7, #32]
   return(result);
 801c4fe:	6a3b      	ldr	r3, [r7, #32]
 801c500:	f023 0301 	bic.w	r3, r3, #1
 801c504:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	681b      	ldr	r3, [r3, #0]
 801c50c:	3314      	adds	r3, #20
 801c50e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801c512:	633a      	str	r2, [r7, #48]	; 0x30
 801c514:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c51a:	e841 2300 	strex	r3, r2, [r1]
 801c51e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c522:	2b00      	cmp	r3, #0
 801c524:	d1e3      	bne.n	801c4ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	2220      	movs	r2, #32
 801c52a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	2200      	movs	r2, #0
 801c532:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	330c      	adds	r3, #12
 801c53a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c53c:	693b      	ldr	r3, [r7, #16]
 801c53e:	e853 3f00 	ldrex	r3, [r3]
 801c542:	60fb      	str	r3, [r7, #12]
   return(result);
 801c544:	68fb      	ldr	r3, [r7, #12]
 801c546:	f023 0310 	bic.w	r3, r3, #16
 801c54a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	330c      	adds	r3, #12
 801c554:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801c558:	61fa      	str	r2, [r7, #28]
 801c55a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c55c:	69b9      	ldr	r1, [r7, #24]
 801c55e:	69fa      	ldr	r2, [r7, #28]
 801c560:	e841 2300 	strex	r3, r2, [r1]
 801c564:	617b      	str	r3, [r7, #20]
   return(result);
 801c566:	697b      	ldr	r3, [r7, #20]
 801c568:	2b00      	cmp	r3, #0
 801c56a:	d1e3      	bne.n	801c534 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801c56c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c570:	4619      	mov	r1, r3
 801c572:	6878      	ldr	r0, [r7, #4]
 801c574:	f7e4 fd42 	bl	8000ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801c578:	e023      	b.n	801c5c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801c57a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c57e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c582:	2b00      	cmp	r3, #0
 801c584:	d009      	beq.n	801c59a <HAL_UART_IRQHandler+0x4ea>
 801c586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c58a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c58e:	2b00      	cmp	r3, #0
 801c590:	d003      	beq.n	801c59a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801c592:	6878      	ldr	r0, [r7, #4]
 801c594:	f000 fae5 	bl	801cb62 <UART_Transmit_IT>
    return;
 801c598:	e014      	b.n	801c5c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801c59a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c59e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	d00e      	beq.n	801c5c4 <HAL_UART_IRQHandler+0x514>
 801c5a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c5aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d008      	beq.n	801c5c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801c5b2:	6878      	ldr	r0, [r7, #4]
 801c5b4:	f000 fb25 	bl	801cc02 <UART_EndTransmit_IT>
    return;
 801c5b8:	e004      	b.n	801c5c4 <HAL_UART_IRQHandler+0x514>
    return;
 801c5ba:	bf00      	nop
 801c5bc:	e002      	b.n	801c5c4 <HAL_UART_IRQHandler+0x514>
      return;
 801c5be:	bf00      	nop
 801c5c0:	e000      	b.n	801c5c4 <HAL_UART_IRQHandler+0x514>
      return;
 801c5c2:	bf00      	nop
  }
}
 801c5c4:	37e8      	adds	r7, #232	; 0xe8
 801c5c6:	46bd      	mov	sp, r7
 801c5c8:	bd80      	pop	{r7, pc}
 801c5ca:	bf00      	nop

0801c5cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801c5cc:	b480      	push	{r7}
 801c5ce:	b083      	sub	sp, #12
 801c5d0:	af00      	add	r7, sp, #0
 801c5d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801c5d4:	bf00      	nop
 801c5d6:	370c      	adds	r7, #12
 801c5d8:	46bd      	mov	sp, r7
 801c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5de:	4770      	bx	lr

0801c5e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801c5e0:	b480      	push	{r7}
 801c5e2:	b083      	sub	sp, #12
 801c5e4:	af00      	add	r7, sp, #0
 801c5e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 801c5e8:	bf00      	nop
 801c5ea:	370c      	adds	r7, #12
 801c5ec:	46bd      	mov	sp, r7
 801c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5f2:	4770      	bx	lr

0801c5f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801c5f4:	b480      	push	{r7}
 801c5f6:	b083      	sub	sp, #12
 801c5f8:	af00      	add	r7, sp, #0
 801c5fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801c5fc:	bf00      	nop
 801c5fe:	370c      	adds	r7, #12
 801c600:	46bd      	mov	sp, r7
 801c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c606:	4770      	bx	lr

0801c608 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801c608:	b480      	push	{r7}
 801c60a:	b083      	sub	sp, #12
 801c60c:	af00      	add	r7, sp, #0
 801c60e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801c610:	bf00      	nop
 801c612:	370c      	adds	r7, #12
 801c614:	46bd      	mov	sp, r7
 801c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c61a:	4770      	bx	lr

0801c61c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801c61c:	b580      	push	{r7, lr}
 801c61e:	b09c      	sub	sp, #112	; 0x70
 801c620:	af00      	add	r7, sp, #0
 801c622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c628:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	681b      	ldr	r3, [r3, #0]
 801c630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c634:	2b00      	cmp	r3, #0
 801c636:	d172      	bne.n	801c71e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801c638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c63a:	2200      	movs	r2, #0
 801c63c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c63e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	330c      	adds	r3, #12
 801c644:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c648:	e853 3f00 	ldrex	r3, [r3]
 801c64c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c64e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c654:	66bb      	str	r3, [r7, #104]	; 0x68
 801c656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c658:	681b      	ldr	r3, [r3, #0]
 801c65a:	330c      	adds	r3, #12
 801c65c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c65e:	65ba      	str	r2, [r7, #88]	; 0x58
 801c660:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c662:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c664:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c666:	e841 2300 	strex	r3, r2, [r1]
 801c66a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c66c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d1e5      	bne.n	801c63e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c674:	681b      	ldr	r3, [r3, #0]
 801c676:	3314      	adds	r3, #20
 801c678:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c67c:	e853 3f00 	ldrex	r3, [r3]
 801c680:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c684:	f023 0301 	bic.w	r3, r3, #1
 801c688:	667b      	str	r3, [r7, #100]	; 0x64
 801c68a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	3314      	adds	r3, #20
 801c690:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c692:	647a      	str	r2, [r7, #68]	; 0x44
 801c694:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c696:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c69a:	e841 2300 	strex	r3, r2, [r1]
 801c69e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	d1e5      	bne.n	801c672 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c6a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c6a8:	681b      	ldr	r3, [r3, #0]
 801c6aa:	3314      	adds	r3, #20
 801c6ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6b0:	e853 3f00 	ldrex	r3, [r3]
 801c6b4:	623b      	str	r3, [r7, #32]
   return(result);
 801c6b6:	6a3b      	ldr	r3, [r7, #32]
 801c6b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c6bc:	663b      	str	r3, [r7, #96]	; 0x60
 801c6be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	3314      	adds	r3, #20
 801c6c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c6c6:	633a      	str	r2, [r7, #48]	; 0x30
 801c6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c6ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c6cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c6ce:	e841 2300 	strex	r3, r2, [r1]
 801c6d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d1e5      	bne.n	801c6a6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801c6da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c6dc:	2220      	movs	r2, #32
 801c6de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c6e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6e6:	2b01      	cmp	r3, #1
 801c6e8:	d119      	bne.n	801c71e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c6ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	330c      	adds	r3, #12
 801c6f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c6f2:	693b      	ldr	r3, [r7, #16]
 801c6f4:	e853 3f00 	ldrex	r3, [r3]
 801c6f8:	60fb      	str	r3, [r7, #12]
   return(result);
 801c6fa:	68fb      	ldr	r3, [r7, #12]
 801c6fc:	f023 0310 	bic.w	r3, r3, #16
 801c700:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	330c      	adds	r3, #12
 801c708:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c70a:	61fa      	str	r2, [r7, #28]
 801c70c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c70e:	69b9      	ldr	r1, [r7, #24]
 801c710:	69fa      	ldr	r2, [r7, #28]
 801c712:	e841 2300 	strex	r3, r2, [r1]
 801c716:	617b      	str	r3, [r7, #20]
   return(result);
 801c718:	697b      	ldr	r3, [r7, #20]
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	d1e5      	bne.n	801c6ea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c71e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c722:	2b01      	cmp	r3, #1
 801c724:	d106      	bne.n	801c734 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c728:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c72a:	4619      	mov	r1, r3
 801c72c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c72e:	f7e4 fc65 	bl	8000ffc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c732:	e002      	b.n	801c73a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801c734:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c736:	f7ff ff53 	bl	801c5e0 <HAL_UART_RxCpltCallback>
}
 801c73a:	bf00      	nop
 801c73c:	3770      	adds	r7, #112	; 0x70
 801c73e:	46bd      	mov	sp, r7
 801c740:	bd80      	pop	{r7, pc}

0801c742 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c742:	b580      	push	{r7, lr}
 801c744:	b084      	sub	sp, #16
 801c746:	af00      	add	r7, sp, #0
 801c748:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c74e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c750:	68fb      	ldr	r3, [r7, #12]
 801c752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c754:	2b01      	cmp	r3, #1
 801c756:	d108      	bne.n	801c76a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801c758:	68fb      	ldr	r3, [r7, #12]
 801c75a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c75c:	085b      	lsrs	r3, r3, #1
 801c75e:	b29b      	uxth	r3, r3
 801c760:	4619      	mov	r1, r3
 801c762:	68f8      	ldr	r0, [r7, #12]
 801c764:	f7e4 fc4a 	bl	8000ffc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c768:	e002      	b.n	801c770 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 801c76a:	68f8      	ldr	r0, [r7, #12]
 801c76c:	f7ff ff42 	bl	801c5f4 <HAL_UART_RxHalfCpltCallback>
}
 801c770:	bf00      	nop
 801c772:	3710      	adds	r7, #16
 801c774:	46bd      	mov	sp, r7
 801c776:	bd80      	pop	{r7, pc}

0801c778 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801c778:	b580      	push	{r7, lr}
 801c77a:	b084      	sub	sp, #16
 801c77c:	af00      	add	r7, sp, #0
 801c77e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801c780:	2300      	movs	r3, #0
 801c782:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c788:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801c78a:	68bb      	ldr	r3, [r7, #8]
 801c78c:	681b      	ldr	r3, [r3, #0]
 801c78e:	695b      	ldr	r3, [r3, #20]
 801c790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c794:	2b80      	cmp	r3, #128	; 0x80
 801c796:	bf0c      	ite	eq
 801c798:	2301      	moveq	r3, #1
 801c79a:	2300      	movne	r3, #0
 801c79c:	b2db      	uxtb	r3, r3
 801c79e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801c7a0:	68bb      	ldr	r3, [r7, #8]
 801c7a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c7a6:	b2db      	uxtb	r3, r3
 801c7a8:	2b21      	cmp	r3, #33	; 0x21
 801c7aa:	d108      	bne.n	801c7be <UART_DMAError+0x46>
 801c7ac:	68fb      	ldr	r3, [r7, #12]
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d005      	beq.n	801c7be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801c7b2:	68bb      	ldr	r3, [r7, #8]
 801c7b4:	2200      	movs	r2, #0
 801c7b6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801c7b8:	68b8      	ldr	r0, [r7, #8]
 801c7ba:	f000 f933 	bl	801ca24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801c7be:	68bb      	ldr	r3, [r7, #8]
 801c7c0:	681b      	ldr	r3, [r3, #0]
 801c7c2:	695b      	ldr	r3, [r3, #20]
 801c7c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c7c8:	2b40      	cmp	r3, #64	; 0x40
 801c7ca:	bf0c      	ite	eq
 801c7cc:	2301      	moveq	r3, #1
 801c7ce:	2300      	movne	r3, #0
 801c7d0:	b2db      	uxtb	r3, r3
 801c7d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801c7d4:	68bb      	ldr	r3, [r7, #8]
 801c7d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c7da:	b2db      	uxtb	r3, r3
 801c7dc:	2b22      	cmp	r3, #34	; 0x22
 801c7de:	d108      	bne.n	801c7f2 <UART_DMAError+0x7a>
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d005      	beq.n	801c7f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801c7e6:	68bb      	ldr	r3, [r7, #8]
 801c7e8:	2200      	movs	r2, #0
 801c7ea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801c7ec:	68b8      	ldr	r0, [r7, #8]
 801c7ee:	f000 f941 	bl	801ca74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801c7f2:	68bb      	ldr	r3, [r7, #8]
 801c7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c7f6:	f043 0210 	orr.w	r2, r3, #16
 801c7fa:	68bb      	ldr	r3, [r7, #8]
 801c7fc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c7fe:	68b8      	ldr	r0, [r7, #8]
 801c800:	f7ff ff02 	bl	801c608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c804:	bf00      	nop
 801c806:	3710      	adds	r7, #16
 801c808:	46bd      	mov	sp, r7
 801c80a:	bd80      	pop	{r7, pc}

0801c80c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801c80c:	b580      	push	{r7, lr}
 801c80e:	b090      	sub	sp, #64	; 0x40
 801c810:	af00      	add	r7, sp, #0
 801c812:	60f8      	str	r0, [r7, #12]
 801c814:	60b9      	str	r1, [r7, #8]
 801c816:	603b      	str	r3, [r7, #0]
 801c818:	4613      	mov	r3, r2
 801c81a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c81c:	e050      	b.n	801c8c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c81e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c820:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c824:	d04c      	beq.n	801c8c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801c826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d007      	beq.n	801c83c <UART_WaitOnFlagUntilTimeout+0x30>
 801c82c:	f7fa f8c8 	bl	80169c0 <HAL_GetTick>
 801c830:	4602      	mov	r2, r0
 801c832:	683b      	ldr	r3, [r7, #0]
 801c834:	1ad3      	subs	r3, r2, r3
 801c836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c838:	429a      	cmp	r2, r3
 801c83a:	d241      	bcs.n	801c8c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	330c      	adds	r3, #12
 801c842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c846:	e853 3f00 	ldrex	r3, [r3]
 801c84a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c84e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c852:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c854:	68fb      	ldr	r3, [r7, #12]
 801c856:	681b      	ldr	r3, [r3, #0]
 801c858:	330c      	adds	r3, #12
 801c85a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c85c:	637a      	str	r2, [r7, #52]	; 0x34
 801c85e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c860:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c864:	e841 2300 	strex	r3, r2, [r1]
 801c868:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d1e5      	bne.n	801c83c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	681b      	ldr	r3, [r3, #0]
 801c874:	3314      	adds	r3, #20
 801c876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c878:	697b      	ldr	r3, [r7, #20]
 801c87a:	e853 3f00 	ldrex	r3, [r3]
 801c87e:	613b      	str	r3, [r7, #16]
   return(result);
 801c880:	693b      	ldr	r3, [r7, #16]
 801c882:	f023 0301 	bic.w	r3, r3, #1
 801c886:	63bb      	str	r3, [r7, #56]	; 0x38
 801c888:	68fb      	ldr	r3, [r7, #12]
 801c88a:	681b      	ldr	r3, [r3, #0]
 801c88c:	3314      	adds	r3, #20
 801c88e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c890:	623a      	str	r2, [r7, #32]
 801c892:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c894:	69f9      	ldr	r1, [r7, #28]
 801c896:	6a3a      	ldr	r2, [r7, #32]
 801c898:	e841 2300 	strex	r3, r2, [r1]
 801c89c:	61bb      	str	r3, [r7, #24]
   return(result);
 801c89e:	69bb      	ldr	r3, [r7, #24]
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	d1e5      	bne.n	801c870 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 801c8a4:	68fb      	ldr	r3, [r7, #12]
 801c8a6:	2220      	movs	r2, #32
 801c8a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	2220      	movs	r2, #32
 801c8b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	2200      	movs	r2, #0
 801c8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801c8bc:	2303      	movs	r3, #3
 801c8be:	e00f      	b.n	801c8e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	681b      	ldr	r3, [r3, #0]
 801c8c4:	681a      	ldr	r2, [r3, #0]
 801c8c6:	68bb      	ldr	r3, [r7, #8]
 801c8c8:	4013      	ands	r3, r2
 801c8ca:	68ba      	ldr	r2, [r7, #8]
 801c8cc:	429a      	cmp	r2, r3
 801c8ce:	bf0c      	ite	eq
 801c8d0:	2301      	moveq	r3, #1
 801c8d2:	2300      	movne	r3, #0
 801c8d4:	b2db      	uxtb	r3, r3
 801c8d6:	461a      	mov	r2, r3
 801c8d8:	79fb      	ldrb	r3, [r7, #7]
 801c8da:	429a      	cmp	r2, r3
 801c8dc:	d09f      	beq.n	801c81e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801c8de:	2300      	movs	r3, #0
}
 801c8e0:	4618      	mov	r0, r3
 801c8e2:	3740      	adds	r7, #64	; 0x40
 801c8e4:	46bd      	mov	sp, r7
 801c8e6:	bd80      	pop	{r7, pc}

0801c8e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c8e8:	b580      	push	{r7, lr}
 801c8ea:	b098      	sub	sp, #96	; 0x60
 801c8ec:	af00      	add	r7, sp, #0
 801c8ee:	60f8      	str	r0, [r7, #12]
 801c8f0:	60b9      	str	r1, [r7, #8]
 801c8f2:	4613      	mov	r3, r2
 801c8f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801c8f6:	68ba      	ldr	r2, [r7, #8]
 801c8f8:	68fb      	ldr	r3, [r7, #12]
 801c8fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	88fa      	ldrh	r2, [r7, #6]
 801c900:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c902:	68fb      	ldr	r3, [r7, #12]
 801c904:	2200      	movs	r2, #0
 801c906:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c908:	68fb      	ldr	r3, [r7, #12]
 801c90a:	2222      	movs	r2, #34	; 0x22
 801c90c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801c910:	68fb      	ldr	r3, [r7, #12]
 801c912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c914:	4a40      	ldr	r2, [pc, #256]	; (801ca18 <UART_Start_Receive_DMA+0x130>)
 801c916:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801c918:	68fb      	ldr	r3, [r7, #12]
 801c91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c91c:	4a3f      	ldr	r2, [pc, #252]	; (801ca1c <UART_Start_Receive_DMA+0x134>)
 801c91e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c924:	4a3e      	ldr	r2, [pc, #248]	; (801ca20 <UART_Start_Receive_DMA+0x138>)
 801c926:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c92c:	2200      	movs	r2, #0
 801c92e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 801c930:	f107 0308 	add.w	r3, r7, #8
 801c934:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801c936:	68fb      	ldr	r3, [r7, #12]
 801c938:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	681b      	ldr	r3, [r3, #0]
 801c93e:	3304      	adds	r3, #4
 801c940:	4619      	mov	r1, r3
 801c942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c944:	681a      	ldr	r2, [r3, #0]
 801c946:	88fb      	ldrh	r3, [r7, #6]
 801c948:	f7fa fa2a 	bl	8016da0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801c94c:	2300      	movs	r3, #0
 801c94e:	613b      	str	r3, [r7, #16]
 801c950:	68fb      	ldr	r3, [r7, #12]
 801c952:	681b      	ldr	r3, [r3, #0]
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	613b      	str	r3, [r7, #16]
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	681b      	ldr	r3, [r3, #0]
 801c95c:	685b      	ldr	r3, [r3, #4]
 801c95e:	613b      	str	r3, [r7, #16]
 801c960:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801c962:	68fb      	ldr	r3, [r7, #12]
 801c964:	2200      	movs	r2, #0
 801c966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	691b      	ldr	r3, [r3, #16]
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d019      	beq.n	801c9a6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c972:	68fb      	ldr	r3, [r7, #12]
 801c974:	681b      	ldr	r3, [r3, #0]
 801c976:	330c      	adds	r3, #12
 801c978:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c97a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c97c:	e853 3f00 	ldrex	r3, [r3]
 801c980:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c988:	65bb      	str	r3, [r7, #88]	; 0x58
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	681b      	ldr	r3, [r3, #0]
 801c98e:	330c      	adds	r3, #12
 801c990:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c992:	64fa      	str	r2, [r7, #76]	; 0x4c
 801c994:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c996:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801c998:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c99a:	e841 2300 	strex	r3, r2, [r1]
 801c99e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801c9a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d1e5      	bne.n	801c972 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c9a6:	68fb      	ldr	r3, [r7, #12]
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	3314      	adds	r3, #20
 801c9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9b0:	e853 3f00 	ldrex	r3, [r3]
 801c9b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9b8:	f043 0301 	orr.w	r3, r3, #1
 801c9bc:	657b      	str	r3, [r7, #84]	; 0x54
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	681b      	ldr	r3, [r3, #0]
 801c9c2:	3314      	adds	r3, #20
 801c9c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c9c6:	63ba      	str	r2, [r7, #56]	; 0x38
 801c9c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c9ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c9cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c9ce:	e841 2300 	strex	r3, r2, [r1]
 801c9d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d1e5      	bne.n	801c9a6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c9da:	68fb      	ldr	r3, [r7, #12]
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	3314      	adds	r3, #20
 801c9e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c9e2:	69bb      	ldr	r3, [r7, #24]
 801c9e4:	e853 3f00 	ldrex	r3, [r3]
 801c9e8:	617b      	str	r3, [r7, #20]
   return(result);
 801c9ea:	697b      	ldr	r3, [r7, #20]
 801c9ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c9f0:	653b      	str	r3, [r7, #80]	; 0x50
 801c9f2:	68fb      	ldr	r3, [r7, #12]
 801c9f4:	681b      	ldr	r3, [r3, #0]
 801c9f6:	3314      	adds	r3, #20
 801c9f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c9fa:	627a      	str	r2, [r7, #36]	; 0x24
 801c9fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c9fe:	6a39      	ldr	r1, [r7, #32]
 801ca00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ca02:	e841 2300 	strex	r3, r2, [r1]
 801ca06:	61fb      	str	r3, [r7, #28]
   return(result);
 801ca08:	69fb      	ldr	r3, [r7, #28]
 801ca0a:	2b00      	cmp	r3, #0
 801ca0c:	d1e5      	bne.n	801c9da <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 801ca0e:	2300      	movs	r3, #0
}
 801ca10:	4618      	mov	r0, r3
 801ca12:	3760      	adds	r7, #96	; 0x60
 801ca14:	46bd      	mov	sp, r7
 801ca16:	bd80      	pop	{r7, pc}
 801ca18:	0801c61d 	.word	0x0801c61d
 801ca1c:	0801c743 	.word	0x0801c743
 801ca20:	0801c779 	.word	0x0801c779

0801ca24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801ca24:	b480      	push	{r7}
 801ca26:	b089      	sub	sp, #36	; 0x24
 801ca28:	af00      	add	r7, sp, #0
 801ca2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	681b      	ldr	r3, [r3, #0]
 801ca30:	330c      	adds	r3, #12
 801ca32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ca34:	68fb      	ldr	r3, [r7, #12]
 801ca36:	e853 3f00 	ldrex	r3, [r3]
 801ca3a:	60bb      	str	r3, [r7, #8]
   return(result);
 801ca3c:	68bb      	ldr	r3, [r7, #8]
 801ca3e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801ca42:	61fb      	str	r3, [r7, #28]
 801ca44:	687b      	ldr	r3, [r7, #4]
 801ca46:	681b      	ldr	r3, [r3, #0]
 801ca48:	330c      	adds	r3, #12
 801ca4a:	69fa      	ldr	r2, [r7, #28]
 801ca4c:	61ba      	str	r2, [r7, #24]
 801ca4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ca50:	6979      	ldr	r1, [r7, #20]
 801ca52:	69ba      	ldr	r2, [r7, #24]
 801ca54:	e841 2300 	strex	r3, r2, [r1]
 801ca58:	613b      	str	r3, [r7, #16]
   return(result);
 801ca5a:	693b      	ldr	r3, [r7, #16]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d1e5      	bne.n	801ca2c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	2220      	movs	r2, #32
 801ca64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801ca68:	bf00      	nop
 801ca6a:	3724      	adds	r7, #36	; 0x24
 801ca6c:	46bd      	mov	sp, r7
 801ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca72:	4770      	bx	lr

0801ca74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801ca74:	b480      	push	{r7}
 801ca76:	b095      	sub	sp, #84	; 0x54
 801ca78:	af00      	add	r7, sp, #0
 801ca7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	681b      	ldr	r3, [r3, #0]
 801ca80:	330c      	adds	r3, #12
 801ca82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ca84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca86:	e853 3f00 	ldrex	r3, [r3]
 801ca8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801ca8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801ca92:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	681b      	ldr	r3, [r3, #0]
 801ca98:	330c      	adds	r3, #12
 801ca9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ca9c:	643a      	str	r2, [r7, #64]	; 0x40
 801ca9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801caa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801caa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801caa4:	e841 2300 	strex	r3, r2, [r1]
 801caa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801caaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801caac:	2b00      	cmp	r3, #0
 801caae:	d1e5      	bne.n	801ca7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801cab0:	687b      	ldr	r3, [r7, #4]
 801cab2:	681b      	ldr	r3, [r3, #0]
 801cab4:	3314      	adds	r3, #20
 801cab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cab8:	6a3b      	ldr	r3, [r7, #32]
 801caba:	e853 3f00 	ldrex	r3, [r3]
 801cabe:	61fb      	str	r3, [r7, #28]
   return(result);
 801cac0:	69fb      	ldr	r3, [r7, #28]
 801cac2:	f023 0301 	bic.w	r3, r3, #1
 801cac6:	64bb      	str	r3, [r7, #72]	; 0x48
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	681b      	ldr	r3, [r3, #0]
 801cacc:	3314      	adds	r3, #20
 801cace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801cad0:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801cad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cad8:	e841 2300 	strex	r3, r2, [r1]
 801cadc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801cade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d1e5      	bne.n	801cab0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cae8:	2b01      	cmp	r3, #1
 801caea:	d119      	bne.n	801cb20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	330c      	adds	r3, #12
 801caf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801caf4:	68fb      	ldr	r3, [r7, #12]
 801caf6:	e853 3f00 	ldrex	r3, [r3]
 801cafa:	60bb      	str	r3, [r7, #8]
   return(result);
 801cafc:	68bb      	ldr	r3, [r7, #8]
 801cafe:	f023 0310 	bic.w	r3, r3, #16
 801cb02:	647b      	str	r3, [r7, #68]	; 0x44
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	681b      	ldr	r3, [r3, #0]
 801cb08:	330c      	adds	r3, #12
 801cb0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cb0c:	61ba      	str	r2, [r7, #24]
 801cb0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cb10:	6979      	ldr	r1, [r7, #20]
 801cb12:	69ba      	ldr	r2, [r7, #24]
 801cb14:	e841 2300 	strex	r3, r2, [r1]
 801cb18:	613b      	str	r3, [r7, #16]
   return(result);
 801cb1a:	693b      	ldr	r3, [r7, #16]
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d1e5      	bne.n	801caec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	2220      	movs	r2, #32
 801cb24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	2200      	movs	r2, #0
 801cb2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 801cb2e:	bf00      	nop
 801cb30:	3754      	adds	r7, #84	; 0x54
 801cb32:	46bd      	mov	sp, r7
 801cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb38:	4770      	bx	lr

0801cb3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801cb3a:	b580      	push	{r7, lr}
 801cb3c:	b084      	sub	sp, #16
 801cb3e:	af00      	add	r7, sp, #0
 801cb40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801cb48:	68fb      	ldr	r3, [r7, #12]
 801cb4a:	2200      	movs	r2, #0
 801cb4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801cb4e:	68fb      	ldr	r3, [r7, #12]
 801cb50:	2200      	movs	r2, #0
 801cb52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801cb54:	68f8      	ldr	r0, [r7, #12]
 801cb56:	f7ff fd57 	bl	801c608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801cb5a:	bf00      	nop
 801cb5c:	3710      	adds	r7, #16
 801cb5e:	46bd      	mov	sp, r7
 801cb60:	bd80      	pop	{r7, pc}

0801cb62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801cb62:	b480      	push	{r7}
 801cb64:	b085      	sub	sp, #20
 801cb66:	af00      	add	r7, sp, #0
 801cb68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cb70:	b2db      	uxtb	r3, r3
 801cb72:	2b21      	cmp	r3, #33	; 0x21
 801cb74:	d13e      	bne.n	801cbf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	689b      	ldr	r3, [r3, #8]
 801cb7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cb7e:	d114      	bne.n	801cbaa <UART_Transmit_IT+0x48>
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	691b      	ldr	r3, [r3, #16]
 801cb84:	2b00      	cmp	r3, #0
 801cb86:	d110      	bne.n	801cbaa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	6a1b      	ldr	r3, [r3, #32]
 801cb8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801cb8e:	68fb      	ldr	r3, [r7, #12]
 801cb90:	881b      	ldrh	r3, [r3, #0]
 801cb92:	461a      	mov	r2, r3
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801cb9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	6a1b      	ldr	r3, [r3, #32]
 801cba2:	1c9a      	adds	r2, r3, #2
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	621a      	str	r2, [r3, #32]
 801cba8:	e008      	b.n	801cbbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	6a1b      	ldr	r3, [r3, #32]
 801cbae:	1c59      	adds	r1, r3, #1
 801cbb0:	687a      	ldr	r2, [r7, #4]
 801cbb2:	6211      	str	r1, [r2, #32]
 801cbb4:	781a      	ldrb	r2, [r3, #0]
 801cbb6:	687b      	ldr	r3, [r7, #4]
 801cbb8:	681b      	ldr	r3, [r3, #0]
 801cbba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801cbc0:	b29b      	uxth	r3, r3
 801cbc2:	3b01      	subs	r3, #1
 801cbc4:	b29b      	uxth	r3, r3
 801cbc6:	687a      	ldr	r2, [r7, #4]
 801cbc8:	4619      	mov	r1, r3
 801cbca:	84d1      	strh	r1, [r2, #38]	; 0x26
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d10f      	bne.n	801cbf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	681b      	ldr	r3, [r3, #0]
 801cbd4:	68da      	ldr	r2, [r3, #12]
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	681b      	ldr	r3, [r3, #0]
 801cbda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801cbde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801cbe0:	687b      	ldr	r3, [r7, #4]
 801cbe2:	681b      	ldr	r3, [r3, #0]
 801cbe4:	68da      	ldr	r2, [r3, #12]
 801cbe6:	687b      	ldr	r3, [r7, #4]
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801cbee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801cbf0:	2300      	movs	r3, #0
 801cbf2:	e000      	b.n	801cbf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801cbf4:	2302      	movs	r3, #2
  }
}
 801cbf6:	4618      	mov	r0, r3
 801cbf8:	3714      	adds	r7, #20
 801cbfa:	46bd      	mov	sp, r7
 801cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc00:	4770      	bx	lr

0801cc02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801cc02:	b580      	push	{r7, lr}
 801cc04:	b082      	sub	sp, #8
 801cc06:	af00      	add	r7, sp, #0
 801cc08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801cc0a:	687b      	ldr	r3, [r7, #4]
 801cc0c:	681b      	ldr	r3, [r3, #0]
 801cc0e:	68da      	ldr	r2, [r3, #12]
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	681b      	ldr	r3, [r3, #0]
 801cc14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cc18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	2220      	movs	r2, #32
 801cc1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801cc22:	6878      	ldr	r0, [r7, #4]
 801cc24:	f7ff fcd2 	bl	801c5cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801cc28:	2300      	movs	r3, #0
}
 801cc2a:	4618      	mov	r0, r3
 801cc2c:	3708      	adds	r7, #8
 801cc2e:	46bd      	mov	sp, r7
 801cc30:	bd80      	pop	{r7, pc}

0801cc32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801cc32:	b580      	push	{r7, lr}
 801cc34:	b08c      	sub	sp, #48	; 0x30
 801cc36:	af00      	add	r7, sp, #0
 801cc38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801cc40:	b2db      	uxtb	r3, r3
 801cc42:	2b22      	cmp	r3, #34	; 0x22
 801cc44:	f040 80ab 	bne.w	801cd9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	689b      	ldr	r3, [r3, #8]
 801cc4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cc50:	d117      	bne.n	801cc82 <UART_Receive_IT+0x50>
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	691b      	ldr	r3, [r3, #16]
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	d113      	bne.n	801cc82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801cc5a:	2300      	movs	r3, #0
 801cc5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801cc5e:	687b      	ldr	r3, [r7, #4]
 801cc60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	681b      	ldr	r3, [r3, #0]
 801cc68:	685b      	ldr	r3, [r3, #4]
 801cc6a:	b29b      	uxth	r3, r3
 801cc6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cc70:	b29a      	uxth	r2, r3
 801cc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc7a:	1c9a      	adds	r2, r3, #2
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	629a      	str	r2, [r3, #40]	; 0x28
 801cc80:	e026      	b.n	801ccd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801cc88:	2300      	movs	r3, #0
 801cc8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	689b      	ldr	r3, [r3, #8]
 801cc90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cc94:	d007      	beq.n	801cca6 <UART_Receive_IT+0x74>
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	689b      	ldr	r3, [r3, #8]
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d10a      	bne.n	801ccb4 <UART_Receive_IT+0x82>
 801cc9e:	687b      	ldr	r3, [r7, #4]
 801cca0:	691b      	ldr	r3, [r3, #16]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d106      	bne.n	801ccb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801cca6:	687b      	ldr	r3, [r7, #4]
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	685b      	ldr	r3, [r3, #4]
 801ccac:	b2da      	uxtb	r2, r3
 801ccae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccb0:	701a      	strb	r2, [r3, #0]
 801ccb2:	e008      	b.n	801ccc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	685b      	ldr	r3, [r3, #4]
 801ccba:	b2db      	uxtb	r3, r3
 801ccbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ccc0:	b2da      	uxtb	r2, r3
 801ccc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ccca:	1c5a      	adds	r2, r3, #1
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801ccd4:	b29b      	uxth	r3, r3
 801ccd6:	3b01      	subs	r3, #1
 801ccd8:	b29b      	uxth	r3, r3
 801ccda:	687a      	ldr	r2, [r7, #4]
 801ccdc:	4619      	mov	r1, r3
 801ccde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	d15a      	bne.n	801cd9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	681b      	ldr	r3, [r3, #0]
 801cce8:	68da      	ldr	r2, [r3, #12]
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	f022 0220 	bic.w	r2, r2, #32
 801ccf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801ccf4:	687b      	ldr	r3, [r7, #4]
 801ccf6:	681b      	ldr	r3, [r3, #0]
 801ccf8:	68da      	ldr	r2, [r3, #12]
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	681b      	ldr	r3, [r3, #0]
 801ccfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801cd02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	695a      	ldr	r2, [r3, #20]
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	f022 0201 	bic.w	r2, r2, #1
 801cd12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	2220      	movs	r2, #32
 801cd18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cd20:	2b01      	cmp	r3, #1
 801cd22:	d135      	bne.n	801cd90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	2200      	movs	r2, #0
 801cd28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	681b      	ldr	r3, [r3, #0]
 801cd2e:	330c      	adds	r3, #12
 801cd30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cd32:	697b      	ldr	r3, [r7, #20]
 801cd34:	e853 3f00 	ldrex	r3, [r3]
 801cd38:	613b      	str	r3, [r7, #16]
   return(result);
 801cd3a:	693b      	ldr	r3, [r7, #16]
 801cd3c:	f023 0310 	bic.w	r3, r3, #16
 801cd40:	627b      	str	r3, [r7, #36]	; 0x24
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	681b      	ldr	r3, [r3, #0]
 801cd46:	330c      	adds	r3, #12
 801cd48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cd4a:	623a      	str	r2, [r7, #32]
 801cd4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cd4e:	69f9      	ldr	r1, [r7, #28]
 801cd50:	6a3a      	ldr	r2, [r7, #32]
 801cd52:	e841 2300 	strex	r3, r2, [r1]
 801cd56:	61bb      	str	r3, [r7, #24]
   return(result);
 801cd58:	69bb      	ldr	r3, [r7, #24]
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d1e5      	bne.n	801cd2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	681b      	ldr	r3, [r3, #0]
 801cd62:	681b      	ldr	r3, [r3, #0]
 801cd64:	f003 0310 	and.w	r3, r3, #16
 801cd68:	2b10      	cmp	r3, #16
 801cd6a:	d10a      	bne.n	801cd82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801cd6c:	2300      	movs	r3, #0
 801cd6e:	60fb      	str	r3, [r7, #12]
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	681b      	ldr	r3, [r3, #0]
 801cd74:	681b      	ldr	r3, [r3, #0]
 801cd76:	60fb      	str	r3, [r7, #12]
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	681b      	ldr	r3, [r3, #0]
 801cd7c:	685b      	ldr	r3, [r3, #4]
 801cd7e:	60fb      	str	r3, [r7, #12]
 801cd80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801cd86:	4619      	mov	r1, r3
 801cd88:	6878      	ldr	r0, [r7, #4]
 801cd8a:	f7e4 f937 	bl	8000ffc <HAL_UARTEx_RxEventCallback>
 801cd8e:	e002      	b.n	801cd96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801cd90:	6878      	ldr	r0, [r7, #4]
 801cd92:	f7ff fc25 	bl	801c5e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801cd96:	2300      	movs	r3, #0
 801cd98:	e002      	b.n	801cda0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801cd9a:	2300      	movs	r3, #0
 801cd9c:	e000      	b.n	801cda0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801cd9e:	2302      	movs	r3, #2
  }
}
 801cda0:	4618      	mov	r0, r3
 801cda2:	3730      	adds	r7, #48	; 0x30
 801cda4:	46bd      	mov	sp, r7
 801cda6:	bd80      	pop	{r7, pc}

0801cda8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801cda8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801cdac:	b0c0      	sub	sp, #256	; 0x100
 801cdae:	af00      	add	r7, sp, #0
 801cdb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801cdb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cdb8:	681b      	ldr	r3, [r3, #0]
 801cdba:	691b      	ldr	r3, [r3, #16]
 801cdbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801cdc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cdc4:	68d9      	ldr	r1, [r3, #12]
 801cdc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cdca:	681a      	ldr	r2, [r3, #0]
 801cdcc:	ea40 0301 	orr.w	r3, r0, r1
 801cdd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801cdd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cdd6:	689a      	ldr	r2, [r3, #8]
 801cdd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cddc:	691b      	ldr	r3, [r3, #16]
 801cdde:	431a      	orrs	r2, r3
 801cde0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cde4:	695b      	ldr	r3, [r3, #20]
 801cde6:	431a      	orrs	r2, r3
 801cde8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cdec:	69db      	ldr	r3, [r3, #28]
 801cdee:	4313      	orrs	r3, r2
 801cdf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801cdf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cdf8:	681b      	ldr	r3, [r3, #0]
 801cdfa:	68db      	ldr	r3, [r3, #12]
 801cdfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801ce00:	f021 010c 	bic.w	r1, r1, #12
 801ce04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ce08:	681a      	ldr	r2, [r3, #0]
 801ce0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801ce0e:	430b      	orrs	r3, r1
 801ce10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801ce12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	695b      	ldr	r3, [r3, #20]
 801ce1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801ce1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ce22:	6999      	ldr	r1, [r3, #24]
 801ce24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ce28:	681a      	ldr	r2, [r3, #0]
 801ce2a:	ea40 0301 	orr.w	r3, r0, r1
 801ce2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801ce30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ce34:	681a      	ldr	r2, [r3, #0]
 801ce36:	4b8f      	ldr	r3, [pc, #572]	; (801d074 <UART_SetConfig+0x2cc>)
 801ce38:	429a      	cmp	r2, r3
 801ce3a:	d005      	beq.n	801ce48 <UART_SetConfig+0xa0>
 801ce3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ce40:	681a      	ldr	r2, [r3, #0]
 801ce42:	4b8d      	ldr	r3, [pc, #564]	; (801d078 <UART_SetConfig+0x2d0>)
 801ce44:	429a      	cmp	r2, r3
 801ce46:	d104      	bne.n	801ce52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801ce48:	f7fd ffbc 	bl	801adc4 <HAL_RCC_GetPCLK2Freq>
 801ce4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801ce50:	e003      	b.n	801ce5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801ce52:	f7fd ffa3 	bl	801ad9c <HAL_RCC_GetPCLK1Freq>
 801ce56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801ce5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ce5e:	69db      	ldr	r3, [r3, #28]
 801ce60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ce64:	f040 810c 	bne.w	801d080 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801ce68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ce6c:	2200      	movs	r2, #0
 801ce6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801ce72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801ce76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801ce7a:	4622      	mov	r2, r4
 801ce7c:	462b      	mov	r3, r5
 801ce7e:	1891      	adds	r1, r2, r2
 801ce80:	65b9      	str	r1, [r7, #88]	; 0x58
 801ce82:	415b      	adcs	r3, r3
 801ce84:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ce86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801ce8a:	4621      	mov	r1, r4
 801ce8c:	eb12 0801 	adds.w	r8, r2, r1
 801ce90:	4629      	mov	r1, r5
 801ce92:	eb43 0901 	adc.w	r9, r3, r1
 801ce96:	f04f 0200 	mov.w	r2, #0
 801ce9a:	f04f 0300 	mov.w	r3, #0
 801ce9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801cea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801cea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801ceaa:	4690      	mov	r8, r2
 801ceac:	4699      	mov	r9, r3
 801ceae:	4623      	mov	r3, r4
 801ceb0:	eb18 0303 	adds.w	r3, r8, r3
 801ceb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801ceb8:	462b      	mov	r3, r5
 801ceba:	eb49 0303 	adc.w	r3, r9, r3
 801cebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801cec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cec6:	685b      	ldr	r3, [r3, #4]
 801cec8:	2200      	movs	r2, #0
 801ceca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801cece:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801ced2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801ced6:	460b      	mov	r3, r1
 801ced8:	18db      	adds	r3, r3, r3
 801ceda:	653b      	str	r3, [r7, #80]	; 0x50
 801cedc:	4613      	mov	r3, r2
 801cede:	eb42 0303 	adc.w	r3, r2, r3
 801cee2:	657b      	str	r3, [r7, #84]	; 0x54
 801cee4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801cee8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801ceec:	f7e3 fecc 	bl	8000c88 <__aeabi_uldivmod>
 801cef0:	4602      	mov	r2, r0
 801cef2:	460b      	mov	r3, r1
 801cef4:	4b61      	ldr	r3, [pc, #388]	; (801d07c <UART_SetConfig+0x2d4>)
 801cef6:	fba3 2302 	umull	r2, r3, r3, r2
 801cefa:	095b      	lsrs	r3, r3, #5
 801cefc:	011c      	lsls	r4, r3, #4
 801cefe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cf02:	2200      	movs	r2, #0
 801cf04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801cf08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801cf0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801cf10:	4642      	mov	r2, r8
 801cf12:	464b      	mov	r3, r9
 801cf14:	1891      	adds	r1, r2, r2
 801cf16:	64b9      	str	r1, [r7, #72]	; 0x48
 801cf18:	415b      	adcs	r3, r3
 801cf1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801cf1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801cf20:	4641      	mov	r1, r8
 801cf22:	eb12 0a01 	adds.w	sl, r2, r1
 801cf26:	4649      	mov	r1, r9
 801cf28:	eb43 0b01 	adc.w	fp, r3, r1
 801cf2c:	f04f 0200 	mov.w	r2, #0
 801cf30:	f04f 0300 	mov.w	r3, #0
 801cf34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801cf38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801cf3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801cf40:	4692      	mov	sl, r2
 801cf42:	469b      	mov	fp, r3
 801cf44:	4643      	mov	r3, r8
 801cf46:	eb1a 0303 	adds.w	r3, sl, r3
 801cf4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801cf4e:	464b      	mov	r3, r9
 801cf50:	eb4b 0303 	adc.w	r3, fp, r3
 801cf54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801cf58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cf5c:	685b      	ldr	r3, [r3, #4]
 801cf5e:	2200      	movs	r2, #0
 801cf60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801cf64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801cf68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801cf6c:	460b      	mov	r3, r1
 801cf6e:	18db      	adds	r3, r3, r3
 801cf70:	643b      	str	r3, [r7, #64]	; 0x40
 801cf72:	4613      	mov	r3, r2
 801cf74:	eb42 0303 	adc.w	r3, r2, r3
 801cf78:	647b      	str	r3, [r7, #68]	; 0x44
 801cf7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801cf7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801cf82:	f7e3 fe81 	bl	8000c88 <__aeabi_uldivmod>
 801cf86:	4602      	mov	r2, r0
 801cf88:	460b      	mov	r3, r1
 801cf8a:	4611      	mov	r1, r2
 801cf8c:	4b3b      	ldr	r3, [pc, #236]	; (801d07c <UART_SetConfig+0x2d4>)
 801cf8e:	fba3 2301 	umull	r2, r3, r3, r1
 801cf92:	095b      	lsrs	r3, r3, #5
 801cf94:	2264      	movs	r2, #100	; 0x64
 801cf96:	fb02 f303 	mul.w	r3, r2, r3
 801cf9a:	1acb      	subs	r3, r1, r3
 801cf9c:	00db      	lsls	r3, r3, #3
 801cf9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801cfa2:	4b36      	ldr	r3, [pc, #216]	; (801d07c <UART_SetConfig+0x2d4>)
 801cfa4:	fba3 2302 	umull	r2, r3, r3, r2
 801cfa8:	095b      	lsrs	r3, r3, #5
 801cfaa:	005b      	lsls	r3, r3, #1
 801cfac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801cfb0:	441c      	add	r4, r3
 801cfb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cfb6:	2200      	movs	r2, #0
 801cfb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801cfbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801cfc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801cfc4:	4642      	mov	r2, r8
 801cfc6:	464b      	mov	r3, r9
 801cfc8:	1891      	adds	r1, r2, r2
 801cfca:	63b9      	str	r1, [r7, #56]	; 0x38
 801cfcc:	415b      	adcs	r3, r3
 801cfce:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cfd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801cfd4:	4641      	mov	r1, r8
 801cfd6:	1851      	adds	r1, r2, r1
 801cfd8:	6339      	str	r1, [r7, #48]	; 0x30
 801cfda:	4649      	mov	r1, r9
 801cfdc:	414b      	adcs	r3, r1
 801cfde:	637b      	str	r3, [r7, #52]	; 0x34
 801cfe0:	f04f 0200 	mov.w	r2, #0
 801cfe4:	f04f 0300 	mov.w	r3, #0
 801cfe8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801cfec:	4659      	mov	r1, fp
 801cfee:	00cb      	lsls	r3, r1, #3
 801cff0:	4651      	mov	r1, sl
 801cff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cff6:	4651      	mov	r1, sl
 801cff8:	00ca      	lsls	r2, r1, #3
 801cffa:	4610      	mov	r0, r2
 801cffc:	4619      	mov	r1, r3
 801cffe:	4603      	mov	r3, r0
 801d000:	4642      	mov	r2, r8
 801d002:	189b      	adds	r3, r3, r2
 801d004:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801d008:	464b      	mov	r3, r9
 801d00a:	460a      	mov	r2, r1
 801d00c:	eb42 0303 	adc.w	r3, r2, r3
 801d010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801d014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801d018:	685b      	ldr	r3, [r3, #4]
 801d01a:	2200      	movs	r2, #0
 801d01c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801d020:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801d024:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801d028:	460b      	mov	r3, r1
 801d02a:	18db      	adds	r3, r3, r3
 801d02c:	62bb      	str	r3, [r7, #40]	; 0x28
 801d02e:	4613      	mov	r3, r2
 801d030:	eb42 0303 	adc.w	r3, r2, r3
 801d034:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d036:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801d03a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801d03e:	f7e3 fe23 	bl	8000c88 <__aeabi_uldivmod>
 801d042:	4602      	mov	r2, r0
 801d044:	460b      	mov	r3, r1
 801d046:	4b0d      	ldr	r3, [pc, #52]	; (801d07c <UART_SetConfig+0x2d4>)
 801d048:	fba3 1302 	umull	r1, r3, r3, r2
 801d04c:	095b      	lsrs	r3, r3, #5
 801d04e:	2164      	movs	r1, #100	; 0x64
 801d050:	fb01 f303 	mul.w	r3, r1, r3
 801d054:	1ad3      	subs	r3, r2, r3
 801d056:	00db      	lsls	r3, r3, #3
 801d058:	3332      	adds	r3, #50	; 0x32
 801d05a:	4a08      	ldr	r2, [pc, #32]	; (801d07c <UART_SetConfig+0x2d4>)
 801d05c:	fba2 2303 	umull	r2, r3, r2, r3
 801d060:	095b      	lsrs	r3, r3, #5
 801d062:	f003 0207 	and.w	r2, r3, #7
 801d066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801d06a:	681b      	ldr	r3, [r3, #0]
 801d06c:	4422      	add	r2, r4
 801d06e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801d070:	e105      	b.n	801d27e <UART_SetConfig+0x4d6>
 801d072:	bf00      	nop
 801d074:	40011000 	.word	0x40011000
 801d078:	40011400 	.word	0x40011400
 801d07c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801d080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801d084:	2200      	movs	r2, #0
 801d086:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801d08a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801d08e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801d092:	4642      	mov	r2, r8
 801d094:	464b      	mov	r3, r9
 801d096:	1891      	adds	r1, r2, r2
 801d098:	6239      	str	r1, [r7, #32]
 801d09a:	415b      	adcs	r3, r3
 801d09c:	627b      	str	r3, [r7, #36]	; 0x24
 801d09e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d0a2:	4641      	mov	r1, r8
 801d0a4:	1854      	adds	r4, r2, r1
 801d0a6:	4649      	mov	r1, r9
 801d0a8:	eb43 0501 	adc.w	r5, r3, r1
 801d0ac:	f04f 0200 	mov.w	r2, #0
 801d0b0:	f04f 0300 	mov.w	r3, #0
 801d0b4:	00eb      	lsls	r3, r5, #3
 801d0b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801d0ba:	00e2      	lsls	r2, r4, #3
 801d0bc:	4614      	mov	r4, r2
 801d0be:	461d      	mov	r5, r3
 801d0c0:	4643      	mov	r3, r8
 801d0c2:	18e3      	adds	r3, r4, r3
 801d0c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801d0c8:	464b      	mov	r3, r9
 801d0ca:	eb45 0303 	adc.w	r3, r5, r3
 801d0ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801d0d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801d0d6:	685b      	ldr	r3, [r3, #4]
 801d0d8:	2200      	movs	r2, #0
 801d0da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d0de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801d0e2:	f04f 0200 	mov.w	r2, #0
 801d0e6:	f04f 0300 	mov.w	r3, #0
 801d0ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801d0ee:	4629      	mov	r1, r5
 801d0f0:	008b      	lsls	r3, r1, #2
 801d0f2:	4621      	mov	r1, r4
 801d0f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801d0f8:	4621      	mov	r1, r4
 801d0fa:	008a      	lsls	r2, r1, #2
 801d0fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801d100:	f7e3 fdc2 	bl	8000c88 <__aeabi_uldivmod>
 801d104:	4602      	mov	r2, r0
 801d106:	460b      	mov	r3, r1
 801d108:	4b60      	ldr	r3, [pc, #384]	; (801d28c <UART_SetConfig+0x4e4>)
 801d10a:	fba3 2302 	umull	r2, r3, r3, r2
 801d10e:	095b      	lsrs	r3, r3, #5
 801d110:	011c      	lsls	r4, r3, #4
 801d112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801d116:	2200      	movs	r2, #0
 801d118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801d11c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801d120:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801d124:	4642      	mov	r2, r8
 801d126:	464b      	mov	r3, r9
 801d128:	1891      	adds	r1, r2, r2
 801d12a:	61b9      	str	r1, [r7, #24]
 801d12c:	415b      	adcs	r3, r3
 801d12e:	61fb      	str	r3, [r7, #28]
 801d130:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801d134:	4641      	mov	r1, r8
 801d136:	1851      	adds	r1, r2, r1
 801d138:	6139      	str	r1, [r7, #16]
 801d13a:	4649      	mov	r1, r9
 801d13c:	414b      	adcs	r3, r1
 801d13e:	617b      	str	r3, [r7, #20]
 801d140:	f04f 0200 	mov.w	r2, #0
 801d144:	f04f 0300 	mov.w	r3, #0
 801d148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801d14c:	4659      	mov	r1, fp
 801d14e:	00cb      	lsls	r3, r1, #3
 801d150:	4651      	mov	r1, sl
 801d152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801d156:	4651      	mov	r1, sl
 801d158:	00ca      	lsls	r2, r1, #3
 801d15a:	4610      	mov	r0, r2
 801d15c:	4619      	mov	r1, r3
 801d15e:	4603      	mov	r3, r0
 801d160:	4642      	mov	r2, r8
 801d162:	189b      	adds	r3, r3, r2
 801d164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801d168:	464b      	mov	r3, r9
 801d16a:	460a      	mov	r2, r1
 801d16c:	eb42 0303 	adc.w	r3, r2, r3
 801d170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801d174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801d178:	685b      	ldr	r3, [r3, #4]
 801d17a:	2200      	movs	r2, #0
 801d17c:	67bb      	str	r3, [r7, #120]	; 0x78
 801d17e:	67fa      	str	r2, [r7, #124]	; 0x7c
 801d180:	f04f 0200 	mov.w	r2, #0
 801d184:	f04f 0300 	mov.w	r3, #0
 801d188:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801d18c:	4649      	mov	r1, r9
 801d18e:	008b      	lsls	r3, r1, #2
 801d190:	4641      	mov	r1, r8
 801d192:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801d196:	4641      	mov	r1, r8
 801d198:	008a      	lsls	r2, r1, #2
 801d19a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801d19e:	f7e3 fd73 	bl	8000c88 <__aeabi_uldivmod>
 801d1a2:	4602      	mov	r2, r0
 801d1a4:	460b      	mov	r3, r1
 801d1a6:	4b39      	ldr	r3, [pc, #228]	; (801d28c <UART_SetConfig+0x4e4>)
 801d1a8:	fba3 1302 	umull	r1, r3, r3, r2
 801d1ac:	095b      	lsrs	r3, r3, #5
 801d1ae:	2164      	movs	r1, #100	; 0x64
 801d1b0:	fb01 f303 	mul.w	r3, r1, r3
 801d1b4:	1ad3      	subs	r3, r2, r3
 801d1b6:	011b      	lsls	r3, r3, #4
 801d1b8:	3332      	adds	r3, #50	; 0x32
 801d1ba:	4a34      	ldr	r2, [pc, #208]	; (801d28c <UART_SetConfig+0x4e4>)
 801d1bc:	fba2 2303 	umull	r2, r3, r2, r3
 801d1c0:	095b      	lsrs	r3, r3, #5
 801d1c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d1c6:	441c      	add	r4, r3
 801d1c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801d1cc:	2200      	movs	r2, #0
 801d1ce:	673b      	str	r3, [r7, #112]	; 0x70
 801d1d0:	677a      	str	r2, [r7, #116]	; 0x74
 801d1d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801d1d6:	4642      	mov	r2, r8
 801d1d8:	464b      	mov	r3, r9
 801d1da:	1891      	adds	r1, r2, r2
 801d1dc:	60b9      	str	r1, [r7, #8]
 801d1de:	415b      	adcs	r3, r3
 801d1e0:	60fb      	str	r3, [r7, #12]
 801d1e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801d1e6:	4641      	mov	r1, r8
 801d1e8:	1851      	adds	r1, r2, r1
 801d1ea:	6039      	str	r1, [r7, #0]
 801d1ec:	4649      	mov	r1, r9
 801d1ee:	414b      	adcs	r3, r1
 801d1f0:	607b      	str	r3, [r7, #4]
 801d1f2:	f04f 0200 	mov.w	r2, #0
 801d1f6:	f04f 0300 	mov.w	r3, #0
 801d1fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801d1fe:	4659      	mov	r1, fp
 801d200:	00cb      	lsls	r3, r1, #3
 801d202:	4651      	mov	r1, sl
 801d204:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801d208:	4651      	mov	r1, sl
 801d20a:	00ca      	lsls	r2, r1, #3
 801d20c:	4610      	mov	r0, r2
 801d20e:	4619      	mov	r1, r3
 801d210:	4603      	mov	r3, r0
 801d212:	4642      	mov	r2, r8
 801d214:	189b      	adds	r3, r3, r2
 801d216:	66bb      	str	r3, [r7, #104]	; 0x68
 801d218:	464b      	mov	r3, r9
 801d21a:	460a      	mov	r2, r1
 801d21c:	eb42 0303 	adc.w	r3, r2, r3
 801d220:	66fb      	str	r3, [r7, #108]	; 0x6c
 801d222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801d226:	685b      	ldr	r3, [r3, #4]
 801d228:	2200      	movs	r2, #0
 801d22a:	663b      	str	r3, [r7, #96]	; 0x60
 801d22c:	667a      	str	r2, [r7, #100]	; 0x64
 801d22e:	f04f 0200 	mov.w	r2, #0
 801d232:	f04f 0300 	mov.w	r3, #0
 801d236:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801d23a:	4649      	mov	r1, r9
 801d23c:	008b      	lsls	r3, r1, #2
 801d23e:	4641      	mov	r1, r8
 801d240:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801d244:	4641      	mov	r1, r8
 801d246:	008a      	lsls	r2, r1, #2
 801d248:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801d24c:	f7e3 fd1c 	bl	8000c88 <__aeabi_uldivmod>
 801d250:	4602      	mov	r2, r0
 801d252:	460b      	mov	r3, r1
 801d254:	4b0d      	ldr	r3, [pc, #52]	; (801d28c <UART_SetConfig+0x4e4>)
 801d256:	fba3 1302 	umull	r1, r3, r3, r2
 801d25a:	095b      	lsrs	r3, r3, #5
 801d25c:	2164      	movs	r1, #100	; 0x64
 801d25e:	fb01 f303 	mul.w	r3, r1, r3
 801d262:	1ad3      	subs	r3, r2, r3
 801d264:	011b      	lsls	r3, r3, #4
 801d266:	3332      	adds	r3, #50	; 0x32
 801d268:	4a08      	ldr	r2, [pc, #32]	; (801d28c <UART_SetConfig+0x4e4>)
 801d26a:	fba2 2303 	umull	r2, r3, r2, r3
 801d26e:	095b      	lsrs	r3, r3, #5
 801d270:	f003 020f 	and.w	r2, r3, #15
 801d274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801d278:	681b      	ldr	r3, [r3, #0]
 801d27a:	4422      	add	r2, r4
 801d27c:	609a      	str	r2, [r3, #8]
}
 801d27e:	bf00      	nop
 801d280:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801d284:	46bd      	mov	sp, r7
 801d286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d28a:	bf00      	nop
 801d28c:	51eb851f 	.word	0x51eb851f

0801d290 <round>:
 801d290:	ec51 0b10 	vmov	r0, r1, d0
 801d294:	b570      	push	{r4, r5, r6, lr}
 801d296:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801d29a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801d29e:	2c13      	cmp	r4, #19
 801d2a0:	ee10 2a10 	vmov	r2, s0
 801d2a4:	460b      	mov	r3, r1
 801d2a6:	dc19      	bgt.n	801d2dc <round+0x4c>
 801d2a8:	2c00      	cmp	r4, #0
 801d2aa:	da09      	bge.n	801d2c0 <round+0x30>
 801d2ac:	3401      	adds	r4, #1
 801d2ae:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801d2b2:	d103      	bne.n	801d2bc <round+0x2c>
 801d2b4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801d2b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d2bc:	2200      	movs	r2, #0
 801d2be:	e028      	b.n	801d312 <round+0x82>
 801d2c0:	4d15      	ldr	r5, [pc, #84]	; (801d318 <round+0x88>)
 801d2c2:	4125      	asrs	r5, r4
 801d2c4:	ea01 0605 	and.w	r6, r1, r5
 801d2c8:	4332      	orrs	r2, r6
 801d2ca:	d00e      	beq.n	801d2ea <round+0x5a>
 801d2cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801d2d0:	fa42 f404 	asr.w	r4, r2, r4
 801d2d4:	4423      	add	r3, r4
 801d2d6:	ea23 0305 	bic.w	r3, r3, r5
 801d2da:	e7ef      	b.n	801d2bc <round+0x2c>
 801d2dc:	2c33      	cmp	r4, #51	; 0x33
 801d2de:	dd07      	ble.n	801d2f0 <round+0x60>
 801d2e0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801d2e4:	d101      	bne.n	801d2ea <round+0x5a>
 801d2e6:	f7e2 ffd1 	bl	800028c <__adddf3>
 801d2ea:	ec41 0b10 	vmov	d0, r0, r1
 801d2ee:	bd70      	pop	{r4, r5, r6, pc}
 801d2f0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801d2f4:	f04f 35ff 	mov.w	r5, #4294967295
 801d2f8:	40f5      	lsrs	r5, r6
 801d2fa:	4228      	tst	r0, r5
 801d2fc:	d0f5      	beq.n	801d2ea <round+0x5a>
 801d2fe:	2101      	movs	r1, #1
 801d300:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801d304:	fa01 f404 	lsl.w	r4, r1, r4
 801d308:	1912      	adds	r2, r2, r4
 801d30a:	bf28      	it	cs
 801d30c:	185b      	addcs	r3, r3, r1
 801d30e:	ea22 0205 	bic.w	r2, r2, r5
 801d312:	4619      	mov	r1, r3
 801d314:	4610      	mov	r0, r2
 801d316:	e7e8      	b.n	801d2ea <round+0x5a>
 801d318:	000fffff 	.word	0x000fffff

0801d31c <pow>:
 801d31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d31e:	ed2d 8b02 	vpush	{d8}
 801d322:	eeb0 8a40 	vmov.f32	s16, s0
 801d326:	eef0 8a60 	vmov.f32	s17, s1
 801d32a:	ec55 4b11 	vmov	r4, r5, d1
 801d32e:	f000 f883 	bl	801d438 <__ieee754_pow>
 801d332:	4622      	mov	r2, r4
 801d334:	462b      	mov	r3, r5
 801d336:	4620      	mov	r0, r4
 801d338:	4629      	mov	r1, r5
 801d33a:	ec57 6b10 	vmov	r6, r7, d0
 801d33e:	f7e3 fbf5 	bl	8000b2c <__aeabi_dcmpun>
 801d342:	2800      	cmp	r0, #0
 801d344:	d13b      	bne.n	801d3be <pow+0xa2>
 801d346:	ec51 0b18 	vmov	r0, r1, d8
 801d34a:	2200      	movs	r2, #0
 801d34c:	2300      	movs	r3, #0
 801d34e:	f7e3 fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 801d352:	b1b8      	cbz	r0, 801d384 <pow+0x68>
 801d354:	2200      	movs	r2, #0
 801d356:	2300      	movs	r3, #0
 801d358:	4620      	mov	r0, r4
 801d35a:	4629      	mov	r1, r5
 801d35c:	f7e3 fbb4 	bl	8000ac8 <__aeabi_dcmpeq>
 801d360:	2800      	cmp	r0, #0
 801d362:	d146      	bne.n	801d3f2 <pow+0xd6>
 801d364:	ec45 4b10 	vmov	d0, r4, r5
 801d368:	f000 fe82 	bl	801e070 <finite>
 801d36c:	b338      	cbz	r0, 801d3be <pow+0xa2>
 801d36e:	2200      	movs	r2, #0
 801d370:	2300      	movs	r3, #0
 801d372:	4620      	mov	r0, r4
 801d374:	4629      	mov	r1, r5
 801d376:	f7e3 fbb1 	bl	8000adc <__aeabi_dcmplt>
 801d37a:	b300      	cbz	r0, 801d3be <pow+0xa2>
 801d37c:	f000 ff28 	bl	801e1d0 <__errno>
 801d380:	2322      	movs	r3, #34	; 0x22
 801d382:	e01b      	b.n	801d3bc <pow+0xa0>
 801d384:	ec47 6b10 	vmov	d0, r6, r7
 801d388:	f000 fe72 	bl	801e070 <finite>
 801d38c:	b9e0      	cbnz	r0, 801d3c8 <pow+0xac>
 801d38e:	eeb0 0a48 	vmov.f32	s0, s16
 801d392:	eef0 0a68 	vmov.f32	s1, s17
 801d396:	f000 fe6b 	bl	801e070 <finite>
 801d39a:	b1a8      	cbz	r0, 801d3c8 <pow+0xac>
 801d39c:	ec45 4b10 	vmov	d0, r4, r5
 801d3a0:	f000 fe66 	bl	801e070 <finite>
 801d3a4:	b180      	cbz	r0, 801d3c8 <pow+0xac>
 801d3a6:	4632      	mov	r2, r6
 801d3a8:	463b      	mov	r3, r7
 801d3aa:	4630      	mov	r0, r6
 801d3ac:	4639      	mov	r1, r7
 801d3ae:	f7e3 fbbd 	bl	8000b2c <__aeabi_dcmpun>
 801d3b2:	2800      	cmp	r0, #0
 801d3b4:	d0e2      	beq.n	801d37c <pow+0x60>
 801d3b6:	f000 ff0b 	bl	801e1d0 <__errno>
 801d3ba:	2321      	movs	r3, #33	; 0x21
 801d3bc:	6003      	str	r3, [r0, #0]
 801d3be:	ecbd 8b02 	vpop	{d8}
 801d3c2:	ec47 6b10 	vmov	d0, r6, r7
 801d3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d3c8:	2200      	movs	r2, #0
 801d3ca:	2300      	movs	r3, #0
 801d3cc:	4630      	mov	r0, r6
 801d3ce:	4639      	mov	r1, r7
 801d3d0:	f7e3 fb7a 	bl	8000ac8 <__aeabi_dcmpeq>
 801d3d4:	2800      	cmp	r0, #0
 801d3d6:	d0f2      	beq.n	801d3be <pow+0xa2>
 801d3d8:	eeb0 0a48 	vmov.f32	s0, s16
 801d3dc:	eef0 0a68 	vmov.f32	s1, s17
 801d3e0:	f000 fe46 	bl	801e070 <finite>
 801d3e4:	2800      	cmp	r0, #0
 801d3e6:	d0ea      	beq.n	801d3be <pow+0xa2>
 801d3e8:	ec45 4b10 	vmov	d0, r4, r5
 801d3ec:	f000 fe40 	bl	801e070 <finite>
 801d3f0:	e7c3      	b.n	801d37a <pow+0x5e>
 801d3f2:	4f01      	ldr	r7, [pc, #4]	; (801d3f8 <pow+0xdc>)
 801d3f4:	2600      	movs	r6, #0
 801d3f6:	e7e2      	b.n	801d3be <pow+0xa2>
 801d3f8:	3ff00000 	.word	0x3ff00000

0801d3fc <sqrtf>:
 801d3fc:	b508      	push	{r3, lr}
 801d3fe:	ed2d 8b02 	vpush	{d8}
 801d402:	eeb0 8a40 	vmov.f32	s16, s0
 801d406:	f000 fdf7 	bl	801dff8 <__ieee754_sqrtf>
 801d40a:	eeb4 8a48 	vcmp.f32	s16, s16
 801d40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d412:	d60c      	bvs.n	801d42e <sqrtf+0x32>
 801d414:	eddf 8a07 	vldr	s17, [pc, #28]	; 801d434 <sqrtf+0x38>
 801d418:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801d41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d420:	d505      	bpl.n	801d42e <sqrtf+0x32>
 801d422:	f000 fed5 	bl	801e1d0 <__errno>
 801d426:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801d42a:	2321      	movs	r3, #33	; 0x21
 801d42c:	6003      	str	r3, [r0, #0]
 801d42e:	ecbd 8b02 	vpop	{d8}
 801d432:	bd08      	pop	{r3, pc}
 801d434:	00000000 	.word	0x00000000

0801d438 <__ieee754_pow>:
 801d438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d43c:	ed2d 8b06 	vpush	{d8-d10}
 801d440:	b089      	sub	sp, #36	; 0x24
 801d442:	ed8d 1b00 	vstr	d1, [sp]
 801d446:	e9dd 2900 	ldrd	r2, r9, [sp]
 801d44a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801d44e:	ea58 0102 	orrs.w	r1, r8, r2
 801d452:	ec57 6b10 	vmov	r6, r7, d0
 801d456:	d115      	bne.n	801d484 <__ieee754_pow+0x4c>
 801d458:	19b3      	adds	r3, r6, r6
 801d45a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801d45e:	4152      	adcs	r2, r2
 801d460:	4299      	cmp	r1, r3
 801d462:	4b89      	ldr	r3, [pc, #548]	; (801d688 <__ieee754_pow+0x250>)
 801d464:	4193      	sbcs	r3, r2
 801d466:	f080 84d2 	bcs.w	801de0e <__ieee754_pow+0x9d6>
 801d46a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d46e:	4630      	mov	r0, r6
 801d470:	4639      	mov	r1, r7
 801d472:	f7e2 ff0b 	bl	800028c <__adddf3>
 801d476:	ec41 0b10 	vmov	d0, r0, r1
 801d47a:	b009      	add	sp, #36	; 0x24
 801d47c:	ecbd 8b06 	vpop	{d8-d10}
 801d480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d484:	4b81      	ldr	r3, [pc, #516]	; (801d68c <__ieee754_pow+0x254>)
 801d486:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801d48a:	429c      	cmp	r4, r3
 801d48c:	ee10 aa10 	vmov	sl, s0
 801d490:	463d      	mov	r5, r7
 801d492:	dc06      	bgt.n	801d4a2 <__ieee754_pow+0x6a>
 801d494:	d101      	bne.n	801d49a <__ieee754_pow+0x62>
 801d496:	2e00      	cmp	r6, #0
 801d498:	d1e7      	bne.n	801d46a <__ieee754_pow+0x32>
 801d49a:	4598      	cmp	r8, r3
 801d49c:	dc01      	bgt.n	801d4a2 <__ieee754_pow+0x6a>
 801d49e:	d10f      	bne.n	801d4c0 <__ieee754_pow+0x88>
 801d4a0:	b172      	cbz	r2, 801d4c0 <__ieee754_pow+0x88>
 801d4a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801d4a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801d4aa:	ea55 050a 	orrs.w	r5, r5, sl
 801d4ae:	d1dc      	bne.n	801d46a <__ieee754_pow+0x32>
 801d4b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d4b4:	18db      	adds	r3, r3, r3
 801d4b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801d4ba:	4152      	adcs	r2, r2
 801d4bc:	429d      	cmp	r5, r3
 801d4be:	e7d0      	b.n	801d462 <__ieee754_pow+0x2a>
 801d4c0:	2d00      	cmp	r5, #0
 801d4c2:	da3b      	bge.n	801d53c <__ieee754_pow+0x104>
 801d4c4:	4b72      	ldr	r3, [pc, #456]	; (801d690 <__ieee754_pow+0x258>)
 801d4c6:	4598      	cmp	r8, r3
 801d4c8:	dc51      	bgt.n	801d56e <__ieee754_pow+0x136>
 801d4ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801d4ce:	4598      	cmp	r8, r3
 801d4d0:	f340 84ac 	ble.w	801de2c <__ieee754_pow+0x9f4>
 801d4d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 801d4d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d4dc:	2b14      	cmp	r3, #20
 801d4de:	dd0f      	ble.n	801d500 <__ieee754_pow+0xc8>
 801d4e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801d4e4:	fa22 f103 	lsr.w	r1, r2, r3
 801d4e8:	fa01 f303 	lsl.w	r3, r1, r3
 801d4ec:	4293      	cmp	r3, r2
 801d4ee:	f040 849d 	bne.w	801de2c <__ieee754_pow+0x9f4>
 801d4f2:	f001 0101 	and.w	r1, r1, #1
 801d4f6:	f1c1 0302 	rsb	r3, r1, #2
 801d4fa:	9304      	str	r3, [sp, #16]
 801d4fc:	b182      	cbz	r2, 801d520 <__ieee754_pow+0xe8>
 801d4fe:	e05f      	b.n	801d5c0 <__ieee754_pow+0x188>
 801d500:	2a00      	cmp	r2, #0
 801d502:	d15b      	bne.n	801d5bc <__ieee754_pow+0x184>
 801d504:	f1c3 0314 	rsb	r3, r3, #20
 801d508:	fa48 f103 	asr.w	r1, r8, r3
 801d50c:	fa01 f303 	lsl.w	r3, r1, r3
 801d510:	4543      	cmp	r3, r8
 801d512:	f040 8488 	bne.w	801de26 <__ieee754_pow+0x9ee>
 801d516:	f001 0101 	and.w	r1, r1, #1
 801d51a:	f1c1 0302 	rsb	r3, r1, #2
 801d51e:	9304      	str	r3, [sp, #16]
 801d520:	4b5c      	ldr	r3, [pc, #368]	; (801d694 <__ieee754_pow+0x25c>)
 801d522:	4598      	cmp	r8, r3
 801d524:	d132      	bne.n	801d58c <__ieee754_pow+0x154>
 801d526:	f1b9 0f00 	cmp.w	r9, #0
 801d52a:	f280 8478 	bge.w	801de1e <__ieee754_pow+0x9e6>
 801d52e:	4959      	ldr	r1, [pc, #356]	; (801d694 <__ieee754_pow+0x25c>)
 801d530:	4632      	mov	r2, r6
 801d532:	463b      	mov	r3, r7
 801d534:	2000      	movs	r0, #0
 801d536:	f7e3 f989 	bl	800084c <__aeabi_ddiv>
 801d53a:	e79c      	b.n	801d476 <__ieee754_pow+0x3e>
 801d53c:	2300      	movs	r3, #0
 801d53e:	9304      	str	r3, [sp, #16]
 801d540:	2a00      	cmp	r2, #0
 801d542:	d13d      	bne.n	801d5c0 <__ieee754_pow+0x188>
 801d544:	4b51      	ldr	r3, [pc, #324]	; (801d68c <__ieee754_pow+0x254>)
 801d546:	4598      	cmp	r8, r3
 801d548:	d1ea      	bne.n	801d520 <__ieee754_pow+0xe8>
 801d54a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801d54e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801d552:	ea53 030a 	orrs.w	r3, r3, sl
 801d556:	f000 845a 	beq.w	801de0e <__ieee754_pow+0x9d6>
 801d55a:	4b4f      	ldr	r3, [pc, #316]	; (801d698 <__ieee754_pow+0x260>)
 801d55c:	429c      	cmp	r4, r3
 801d55e:	dd08      	ble.n	801d572 <__ieee754_pow+0x13a>
 801d560:	f1b9 0f00 	cmp.w	r9, #0
 801d564:	f2c0 8457 	blt.w	801de16 <__ieee754_pow+0x9de>
 801d568:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d56c:	e783      	b.n	801d476 <__ieee754_pow+0x3e>
 801d56e:	2302      	movs	r3, #2
 801d570:	e7e5      	b.n	801d53e <__ieee754_pow+0x106>
 801d572:	f1b9 0f00 	cmp.w	r9, #0
 801d576:	f04f 0000 	mov.w	r0, #0
 801d57a:	f04f 0100 	mov.w	r1, #0
 801d57e:	f6bf af7a 	bge.w	801d476 <__ieee754_pow+0x3e>
 801d582:	e9dd 0300 	ldrd	r0, r3, [sp]
 801d586:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801d58a:	e774      	b.n	801d476 <__ieee754_pow+0x3e>
 801d58c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801d590:	d106      	bne.n	801d5a0 <__ieee754_pow+0x168>
 801d592:	4632      	mov	r2, r6
 801d594:	463b      	mov	r3, r7
 801d596:	4630      	mov	r0, r6
 801d598:	4639      	mov	r1, r7
 801d59a:	f7e3 f82d 	bl	80005f8 <__aeabi_dmul>
 801d59e:	e76a      	b.n	801d476 <__ieee754_pow+0x3e>
 801d5a0:	4b3e      	ldr	r3, [pc, #248]	; (801d69c <__ieee754_pow+0x264>)
 801d5a2:	4599      	cmp	r9, r3
 801d5a4:	d10c      	bne.n	801d5c0 <__ieee754_pow+0x188>
 801d5a6:	2d00      	cmp	r5, #0
 801d5a8:	db0a      	blt.n	801d5c0 <__ieee754_pow+0x188>
 801d5aa:	ec47 6b10 	vmov	d0, r6, r7
 801d5ae:	b009      	add	sp, #36	; 0x24
 801d5b0:	ecbd 8b06 	vpop	{d8-d10}
 801d5b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5b8:	f000 bc6c 	b.w	801de94 <__ieee754_sqrt>
 801d5bc:	2300      	movs	r3, #0
 801d5be:	9304      	str	r3, [sp, #16]
 801d5c0:	ec47 6b10 	vmov	d0, r6, r7
 801d5c4:	f000 fd4b 	bl	801e05e <fabs>
 801d5c8:	ec51 0b10 	vmov	r0, r1, d0
 801d5cc:	f1ba 0f00 	cmp.w	sl, #0
 801d5d0:	d129      	bne.n	801d626 <__ieee754_pow+0x1ee>
 801d5d2:	b124      	cbz	r4, 801d5de <__ieee754_pow+0x1a6>
 801d5d4:	4b2f      	ldr	r3, [pc, #188]	; (801d694 <__ieee754_pow+0x25c>)
 801d5d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801d5da:	429a      	cmp	r2, r3
 801d5dc:	d123      	bne.n	801d626 <__ieee754_pow+0x1ee>
 801d5de:	f1b9 0f00 	cmp.w	r9, #0
 801d5e2:	da05      	bge.n	801d5f0 <__ieee754_pow+0x1b8>
 801d5e4:	4602      	mov	r2, r0
 801d5e6:	460b      	mov	r3, r1
 801d5e8:	2000      	movs	r0, #0
 801d5ea:	492a      	ldr	r1, [pc, #168]	; (801d694 <__ieee754_pow+0x25c>)
 801d5ec:	f7e3 f92e 	bl	800084c <__aeabi_ddiv>
 801d5f0:	2d00      	cmp	r5, #0
 801d5f2:	f6bf af40 	bge.w	801d476 <__ieee754_pow+0x3e>
 801d5f6:	9b04      	ldr	r3, [sp, #16]
 801d5f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801d5fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801d600:	4323      	orrs	r3, r4
 801d602:	d108      	bne.n	801d616 <__ieee754_pow+0x1de>
 801d604:	4602      	mov	r2, r0
 801d606:	460b      	mov	r3, r1
 801d608:	4610      	mov	r0, r2
 801d60a:	4619      	mov	r1, r3
 801d60c:	f7e2 fe3c 	bl	8000288 <__aeabi_dsub>
 801d610:	4602      	mov	r2, r0
 801d612:	460b      	mov	r3, r1
 801d614:	e78f      	b.n	801d536 <__ieee754_pow+0xfe>
 801d616:	9b04      	ldr	r3, [sp, #16]
 801d618:	2b01      	cmp	r3, #1
 801d61a:	f47f af2c 	bne.w	801d476 <__ieee754_pow+0x3e>
 801d61e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d622:	4619      	mov	r1, r3
 801d624:	e727      	b.n	801d476 <__ieee754_pow+0x3e>
 801d626:	0feb      	lsrs	r3, r5, #31
 801d628:	3b01      	subs	r3, #1
 801d62a:	9306      	str	r3, [sp, #24]
 801d62c:	9a06      	ldr	r2, [sp, #24]
 801d62e:	9b04      	ldr	r3, [sp, #16]
 801d630:	4313      	orrs	r3, r2
 801d632:	d102      	bne.n	801d63a <__ieee754_pow+0x202>
 801d634:	4632      	mov	r2, r6
 801d636:	463b      	mov	r3, r7
 801d638:	e7e6      	b.n	801d608 <__ieee754_pow+0x1d0>
 801d63a:	4b19      	ldr	r3, [pc, #100]	; (801d6a0 <__ieee754_pow+0x268>)
 801d63c:	4598      	cmp	r8, r3
 801d63e:	f340 80fb 	ble.w	801d838 <__ieee754_pow+0x400>
 801d642:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801d646:	4598      	cmp	r8, r3
 801d648:	4b13      	ldr	r3, [pc, #76]	; (801d698 <__ieee754_pow+0x260>)
 801d64a:	dd0c      	ble.n	801d666 <__ieee754_pow+0x22e>
 801d64c:	429c      	cmp	r4, r3
 801d64e:	dc0f      	bgt.n	801d670 <__ieee754_pow+0x238>
 801d650:	f1b9 0f00 	cmp.w	r9, #0
 801d654:	da0f      	bge.n	801d676 <__ieee754_pow+0x23e>
 801d656:	2000      	movs	r0, #0
 801d658:	b009      	add	sp, #36	; 0x24
 801d65a:	ecbd 8b06 	vpop	{d8-d10}
 801d65e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d662:	f000 bcf3 	b.w	801e04c <__math_oflow>
 801d666:	429c      	cmp	r4, r3
 801d668:	dbf2      	blt.n	801d650 <__ieee754_pow+0x218>
 801d66a:	4b0a      	ldr	r3, [pc, #40]	; (801d694 <__ieee754_pow+0x25c>)
 801d66c:	429c      	cmp	r4, r3
 801d66e:	dd19      	ble.n	801d6a4 <__ieee754_pow+0x26c>
 801d670:	f1b9 0f00 	cmp.w	r9, #0
 801d674:	dcef      	bgt.n	801d656 <__ieee754_pow+0x21e>
 801d676:	2000      	movs	r0, #0
 801d678:	b009      	add	sp, #36	; 0x24
 801d67a:	ecbd 8b06 	vpop	{d8-d10}
 801d67e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d682:	f000 bcda 	b.w	801e03a <__math_uflow>
 801d686:	bf00      	nop
 801d688:	fff00000 	.word	0xfff00000
 801d68c:	7ff00000 	.word	0x7ff00000
 801d690:	433fffff 	.word	0x433fffff
 801d694:	3ff00000 	.word	0x3ff00000
 801d698:	3fefffff 	.word	0x3fefffff
 801d69c:	3fe00000 	.word	0x3fe00000
 801d6a0:	41e00000 	.word	0x41e00000
 801d6a4:	4b60      	ldr	r3, [pc, #384]	; (801d828 <__ieee754_pow+0x3f0>)
 801d6a6:	2200      	movs	r2, #0
 801d6a8:	f7e2 fdee 	bl	8000288 <__aeabi_dsub>
 801d6ac:	a354      	add	r3, pc, #336	; (adr r3, 801d800 <__ieee754_pow+0x3c8>)
 801d6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6b2:	4604      	mov	r4, r0
 801d6b4:	460d      	mov	r5, r1
 801d6b6:	f7e2 ff9f 	bl	80005f8 <__aeabi_dmul>
 801d6ba:	a353      	add	r3, pc, #332	; (adr r3, 801d808 <__ieee754_pow+0x3d0>)
 801d6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6c0:	4606      	mov	r6, r0
 801d6c2:	460f      	mov	r7, r1
 801d6c4:	4620      	mov	r0, r4
 801d6c6:	4629      	mov	r1, r5
 801d6c8:	f7e2 ff96 	bl	80005f8 <__aeabi_dmul>
 801d6cc:	4b57      	ldr	r3, [pc, #348]	; (801d82c <__ieee754_pow+0x3f4>)
 801d6ce:	4682      	mov	sl, r0
 801d6d0:	468b      	mov	fp, r1
 801d6d2:	2200      	movs	r2, #0
 801d6d4:	4620      	mov	r0, r4
 801d6d6:	4629      	mov	r1, r5
 801d6d8:	f7e2 ff8e 	bl	80005f8 <__aeabi_dmul>
 801d6dc:	4602      	mov	r2, r0
 801d6de:	460b      	mov	r3, r1
 801d6e0:	a14b      	add	r1, pc, #300	; (adr r1, 801d810 <__ieee754_pow+0x3d8>)
 801d6e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d6e6:	f7e2 fdcf 	bl	8000288 <__aeabi_dsub>
 801d6ea:	4622      	mov	r2, r4
 801d6ec:	462b      	mov	r3, r5
 801d6ee:	f7e2 ff83 	bl	80005f8 <__aeabi_dmul>
 801d6f2:	4602      	mov	r2, r0
 801d6f4:	460b      	mov	r3, r1
 801d6f6:	2000      	movs	r0, #0
 801d6f8:	494d      	ldr	r1, [pc, #308]	; (801d830 <__ieee754_pow+0x3f8>)
 801d6fa:	f7e2 fdc5 	bl	8000288 <__aeabi_dsub>
 801d6fe:	4622      	mov	r2, r4
 801d700:	4680      	mov	r8, r0
 801d702:	4689      	mov	r9, r1
 801d704:	462b      	mov	r3, r5
 801d706:	4620      	mov	r0, r4
 801d708:	4629      	mov	r1, r5
 801d70a:	f7e2 ff75 	bl	80005f8 <__aeabi_dmul>
 801d70e:	4602      	mov	r2, r0
 801d710:	460b      	mov	r3, r1
 801d712:	4640      	mov	r0, r8
 801d714:	4649      	mov	r1, r9
 801d716:	f7e2 ff6f 	bl	80005f8 <__aeabi_dmul>
 801d71a:	a33f      	add	r3, pc, #252	; (adr r3, 801d818 <__ieee754_pow+0x3e0>)
 801d71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d720:	f7e2 ff6a 	bl	80005f8 <__aeabi_dmul>
 801d724:	4602      	mov	r2, r0
 801d726:	460b      	mov	r3, r1
 801d728:	4650      	mov	r0, sl
 801d72a:	4659      	mov	r1, fp
 801d72c:	f7e2 fdac 	bl	8000288 <__aeabi_dsub>
 801d730:	4602      	mov	r2, r0
 801d732:	460b      	mov	r3, r1
 801d734:	4680      	mov	r8, r0
 801d736:	4689      	mov	r9, r1
 801d738:	4630      	mov	r0, r6
 801d73a:	4639      	mov	r1, r7
 801d73c:	f7e2 fda6 	bl	800028c <__adddf3>
 801d740:	2000      	movs	r0, #0
 801d742:	4632      	mov	r2, r6
 801d744:	463b      	mov	r3, r7
 801d746:	4604      	mov	r4, r0
 801d748:	460d      	mov	r5, r1
 801d74a:	f7e2 fd9d 	bl	8000288 <__aeabi_dsub>
 801d74e:	4602      	mov	r2, r0
 801d750:	460b      	mov	r3, r1
 801d752:	4640      	mov	r0, r8
 801d754:	4649      	mov	r1, r9
 801d756:	f7e2 fd97 	bl	8000288 <__aeabi_dsub>
 801d75a:	9b04      	ldr	r3, [sp, #16]
 801d75c:	9a06      	ldr	r2, [sp, #24]
 801d75e:	3b01      	subs	r3, #1
 801d760:	4313      	orrs	r3, r2
 801d762:	4682      	mov	sl, r0
 801d764:	468b      	mov	fp, r1
 801d766:	f040 81e7 	bne.w	801db38 <__ieee754_pow+0x700>
 801d76a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801d820 <__ieee754_pow+0x3e8>
 801d76e:	eeb0 8a47 	vmov.f32	s16, s14
 801d772:	eef0 8a67 	vmov.f32	s17, s15
 801d776:	e9dd 6700 	ldrd	r6, r7, [sp]
 801d77a:	2600      	movs	r6, #0
 801d77c:	4632      	mov	r2, r6
 801d77e:	463b      	mov	r3, r7
 801d780:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d784:	f7e2 fd80 	bl	8000288 <__aeabi_dsub>
 801d788:	4622      	mov	r2, r4
 801d78a:	462b      	mov	r3, r5
 801d78c:	f7e2 ff34 	bl	80005f8 <__aeabi_dmul>
 801d790:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d794:	4680      	mov	r8, r0
 801d796:	4689      	mov	r9, r1
 801d798:	4650      	mov	r0, sl
 801d79a:	4659      	mov	r1, fp
 801d79c:	f7e2 ff2c 	bl	80005f8 <__aeabi_dmul>
 801d7a0:	4602      	mov	r2, r0
 801d7a2:	460b      	mov	r3, r1
 801d7a4:	4640      	mov	r0, r8
 801d7a6:	4649      	mov	r1, r9
 801d7a8:	f7e2 fd70 	bl	800028c <__adddf3>
 801d7ac:	4632      	mov	r2, r6
 801d7ae:	463b      	mov	r3, r7
 801d7b0:	4680      	mov	r8, r0
 801d7b2:	4689      	mov	r9, r1
 801d7b4:	4620      	mov	r0, r4
 801d7b6:	4629      	mov	r1, r5
 801d7b8:	f7e2 ff1e 	bl	80005f8 <__aeabi_dmul>
 801d7bc:	460b      	mov	r3, r1
 801d7be:	4604      	mov	r4, r0
 801d7c0:	460d      	mov	r5, r1
 801d7c2:	4602      	mov	r2, r0
 801d7c4:	4649      	mov	r1, r9
 801d7c6:	4640      	mov	r0, r8
 801d7c8:	f7e2 fd60 	bl	800028c <__adddf3>
 801d7cc:	4b19      	ldr	r3, [pc, #100]	; (801d834 <__ieee754_pow+0x3fc>)
 801d7ce:	4299      	cmp	r1, r3
 801d7d0:	ec45 4b19 	vmov	d9, r4, r5
 801d7d4:	4606      	mov	r6, r0
 801d7d6:	460f      	mov	r7, r1
 801d7d8:	468b      	mov	fp, r1
 801d7da:	f340 82f1 	ble.w	801ddc0 <__ieee754_pow+0x988>
 801d7de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801d7e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801d7e6:	4303      	orrs	r3, r0
 801d7e8:	f000 81e4 	beq.w	801dbb4 <__ieee754_pow+0x77c>
 801d7ec:	ec51 0b18 	vmov	r0, r1, d8
 801d7f0:	2200      	movs	r2, #0
 801d7f2:	2300      	movs	r3, #0
 801d7f4:	f7e3 f972 	bl	8000adc <__aeabi_dcmplt>
 801d7f8:	3800      	subs	r0, #0
 801d7fa:	bf18      	it	ne
 801d7fc:	2001      	movne	r0, #1
 801d7fe:	e72b      	b.n	801d658 <__ieee754_pow+0x220>
 801d800:	60000000 	.word	0x60000000
 801d804:	3ff71547 	.word	0x3ff71547
 801d808:	f85ddf44 	.word	0xf85ddf44
 801d80c:	3e54ae0b 	.word	0x3e54ae0b
 801d810:	55555555 	.word	0x55555555
 801d814:	3fd55555 	.word	0x3fd55555
 801d818:	652b82fe 	.word	0x652b82fe
 801d81c:	3ff71547 	.word	0x3ff71547
 801d820:	00000000 	.word	0x00000000
 801d824:	bff00000 	.word	0xbff00000
 801d828:	3ff00000 	.word	0x3ff00000
 801d82c:	3fd00000 	.word	0x3fd00000
 801d830:	3fe00000 	.word	0x3fe00000
 801d834:	408fffff 	.word	0x408fffff
 801d838:	4bd5      	ldr	r3, [pc, #852]	; (801db90 <__ieee754_pow+0x758>)
 801d83a:	402b      	ands	r3, r5
 801d83c:	2200      	movs	r2, #0
 801d83e:	b92b      	cbnz	r3, 801d84c <__ieee754_pow+0x414>
 801d840:	4bd4      	ldr	r3, [pc, #848]	; (801db94 <__ieee754_pow+0x75c>)
 801d842:	f7e2 fed9 	bl	80005f8 <__aeabi_dmul>
 801d846:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801d84a:	460c      	mov	r4, r1
 801d84c:	1523      	asrs	r3, r4, #20
 801d84e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d852:	4413      	add	r3, r2
 801d854:	9305      	str	r3, [sp, #20]
 801d856:	4bd0      	ldr	r3, [pc, #832]	; (801db98 <__ieee754_pow+0x760>)
 801d858:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801d85c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801d860:	429c      	cmp	r4, r3
 801d862:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d866:	dd08      	ble.n	801d87a <__ieee754_pow+0x442>
 801d868:	4bcc      	ldr	r3, [pc, #816]	; (801db9c <__ieee754_pow+0x764>)
 801d86a:	429c      	cmp	r4, r3
 801d86c:	f340 8162 	ble.w	801db34 <__ieee754_pow+0x6fc>
 801d870:	9b05      	ldr	r3, [sp, #20]
 801d872:	3301      	adds	r3, #1
 801d874:	9305      	str	r3, [sp, #20]
 801d876:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801d87a:	2400      	movs	r4, #0
 801d87c:	00e3      	lsls	r3, r4, #3
 801d87e:	9307      	str	r3, [sp, #28]
 801d880:	4bc7      	ldr	r3, [pc, #796]	; (801dba0 <__ieee754_pow+0x768>)
 801d882:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d886:	ed93 7b00 	vldr	d7, [r3]
 801d88a:	4629      	mov	r1, r5
 801d88c:	ec53 2b17 	vmov	r2, r3, d7
 801d890:	eeb0 9a47 	vmov.f32	s18, s14
 801d894:	eef0 9a67 	vmov.f32	s19, s15
 801d898:	4682      	mov	sl, r0
 801d89a:	f7e2 fcf5 	bl	8000288 <__aeabi_dsub>
 801d89e:	4652      	mov	r2, sl
 801d8a0:	4606      	mov	r6, r0
 801d8a2:	460f      	mov	r7, r1
 801d8a4:	462b      	mov	r3, r5
 801d8a6:	ec51 0b19 	vmov	r0, r1, d9
 801d8aa:	f7e2 fcef 	bl	800028c <__adddf3>
 801d8ae:	4602      	mov	r2, r0
 801d8b0:	460b      	mov	r3, r1
 801d8b2:	2000      	movs	r0, #0
 801d8b4:	49bb      	ldr	r1, [pc, #748]	; (801dba4 <__ieee754_pow+0x76c>)
 801d8b6:	f7e2 ffc9 	bl	800084c <__aeabi_ddiv>
 801d8ba:	ec41 0b1a 	vmov	d10, r0, r1
 801d8be:	4602      	mov	r2, r0
 801d8c0:	460b      	mov	r3, r1
 801d8c2:	4630      	mov	r0, r6
 801d8c4:	4639      	mov	r1, r7
 801d8c6:	f7e2 fe97 	bl	80005f8 <__aeabi_dmul>
 801d8ca:	2300      	movs	r3, #0
 801d8cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d8d0:	9302      	str	r3, [sp, #8]
 801d8d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d8d6:	46ab      	mov	fp, r5
 801d8d8:	106d      	asrs	r5, r5, #1
 801d8da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801d8de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801d8e2:	ec41 0b18 	vmov	d8, r0, r1
 801d8e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801d8ea:	2200      	movs	r2, #0
 801d8ec:	4640      	mov	r0, r8
 801d8ee:	4649      	mov	r1, r9
 801d8f0:	4614      	mov	r4, r2
 801d8f2:	461d      	mov	r5, r3
 801d8f4:	f7e2 fe80 	bl	80005f8 <__aeabi_dmul>
 801d8f8:	4602      	mov	r2, r0
 801d8fa:	460b      	mov	r3, r1
 801d8fc:	4630      	mov	r0, r6
 801d8fe:	4639      	mov	r1, r7
 801d900:	f7e2 fcc2 	bl	8000288 <__aeabi_dsub>
 801d904:	ec53 2b19 	vmov	r2, r3, d9
 801d908:	4606      	mov	r6, r0
 801d90a:	460f      	mov	r7, r1
 801d90c:	4620      	mov	r0, r4
 801d90e:	4629      	mov	r1, r5
 801d910:	f7e2 fcba 	bl	8000288 <__aeabi_dsub>
 801d914:	4602      	mov	r2, r0
 801d916:	460b      	mov	r3, r1
 801d918:	4650      	mov	r0, sl
 801d91a:	4659      	mov	r1, fp
 801d91c:	f7e2 fcb4 	bl	8000288 <__aeabi_dsub>
 801d920:	4642      	mov	r2, r8
 801d922:	464b      	mov	r3, r9
 801d924:	f7e2 fe68 	bl	80005f8 <__aeabi_dmul>
 801d928:	4602      	mov	r2, r0
 801d92a:	460b      	mov	r3, r1
 801d92c:	4630      	mov	r0, r6
 801d92e:	4639      	mov	r1, r7
 801d930:	f7e2 fcaa 	bl	8000288 <__aeabi_dsub>
 801d934:	ec53 2b1a 	vmov	r2, r3, d10
 801d938:	f7e2 fe5e 	bl	80005f8 <__aeabi_dmul>
 801d93c:	ec53 2b18 	vmov	r2, r3, d8
 801d940:	ec41 0b19 	vmov	d9, r0, r1
 801d944:	ec51 0b18 	vmov	r0, r1, d8
 801d948:	f7e2 fe56 	bl	80005f8 <__aeabi_dmul>
 801d94c:	a37c      	add	r3, pc, #496	; (adr r3, 801db40 <__ieee754_pow+0x708>)
 801d94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d952:	4604      	mov	r4, r0
 801d954:	460d      	mov	r5, r1
 801d956:	f7e2 fe4f 	bl	80005f8 <__aeabi_dmul>
 801d95a:	a37b      	add	r3, pc, #492	; (adr r3, 801db48 <__ieee754_pow+0x710>)
 801d95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d960:	f7e2 fc94 	bl	800028c <__adddf3>
 801d964:	4622      	mov	r2, r4
 801d966:	462b      	mov	r3, r5
 801d968:	f7e2 fe46 	bl	80005f8 <__aeabi_dmul>
 801d96c:	a378      	add	r3, pc, #480	; (adr r3, 801db50 <__ieee754_pow+0x718>)
 801d96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d972:	f7e2 fc8b 	bl	800028c <__adddf3>
 801d976:	4622      	mov	r2, r4
 801d978:	462b      	mov	r3, r5
 801d97a:	f7e2 fe3d 	bl	80005f8 <__aeabi_dmul>
 801d97e:	a376      	add	r3, pc, #472	; (adr r3, 801db58 <__ieee754_pow+0x720>)
 801d980:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d984:	f7e2 fc82 	bl	800028c <__adddf3>
 801d988:	4622      	mov	r2, r4
 801d98a:	462b      	mov	r3, r5
 801d98c:	f7e2 fe34 	bl	80005f8 <__aeabi_dmul>
 801d990:	a373      	add	r3, pc, #460	; (adr r3, 801db60 <__ieee754_pow+0x728>)
 801d992:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d996:	f7e2 fc79 	bl	800028c <__adddf3>
 801d99a:	4622      	mov	r2, r4
 801d99c:	462b      	mov	r3, r5
 801d99e:	f7e2 fe2b 	bl	80005f8 <__aeabi_dmul>
 801d9a2:	a371      	add	r3, pc, #452	; (adr r3, 801db68 <__ieee754_pow+0x730>)
 801d9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9a8:	f7e2 fc70 	bl	800028c <__adddf3>
 801d9ac:	4622      	mov	r2, r4
 801d9ae:	4606      	mov	r6, r0
 801d9b0:	460f      	mov	r7, r1
 801d9b2:	462b      	mov	r3, r5
 801d9b4:	4620      	mov	r0, r4
 801d9b6:	4629      	mov	r1, r5
 801d9b8:	f7e2 fe1e 	bl	80005f8 <__aeabi_dmul>
 801d9bc:	4602      	mov	r2, r0
 801d9be:	460b      	mov	r3, r1
 801d9c0:	4630      	mov	r0, r6
 801d9c2:	4639      	mov	r1, r7
 801d9c4:	f7e2 fe18 	bl	80005f8 <__aeabi_dmul>
 801d9c8:	4642      	mov	r2, r8
 801d9ca:	4604      	mov	r4, r0
 801d9cc:	460d      	mov	r5, r1
 801d9ce:	464b      	mov	r3, r9
 801d9d0:	ec51 0b18 	vmov	r0, r1, d8
 801d9d4:	f7e2 fc5a 	bl	800028c <__adddf3>
 801d9d8:	ec53 2b19 	vmov	r2, r3, d9
 801d9dc:	f7e2 fe0c 	bl	80005f8 <__aeabi_dmul>
 801d9e0:	4622      	mov	r2, r4
 801d9e2:	462b      	mov	r3, r5
 801d9e4:	f7e2 fc52 	bl	800028c <__adddf3>
 801d9e8:	4642      	mov	r2, r8
 801d9ea:	4682      	mov	sl, r0
 801d9ec:	468b      	mov	fp, r1
 801d9ee:	464b      	mov	r3, r9
 801d9f0:	4640      	mov	r0, r8
 801d9f2:	4649      	mov	r1, r9
 801d9f4:	f7e2 fe00 	bl	80005f8 <__aeabi_dmul>
 801d9f8:	4b6b      	ldr	r3, [pc, #428]	; (801dba8 <__ieee754_pow+0x770>)
 801d9fa:	2200      	movs	r2, #0
 801d9fc:	4606      	mov	r6, r0
 801d9fe:	460f      	mov	r7, r1
 801da00:	f7e2 fc44 	bl	800028c <__adddf3>
 801da04:	4652      	mov	r2, sl
 801da06:	465b      	mov	r3, fp
 801da08:	f7e2 fc40 	bl	800028c <__adddf3>
 801da0c:	2000      	movs	r0, #0
 801da0e:	4604      	mov	r4, r0
 801da10:	460d      	mov	r5, r1
 801da12:	4602      	mov	r2, r0
 801da14:	460b      	mov	r3, r1
 801da16:	4640      	mov	r0, r8
 801da18:	4649      	mov	r1, r9
 801da1a:	f7e2 fded 	bl	80005f8 <__aeabi_dmul>
 801da1e:	4b62      	ldr	r3, [pc, #392]	; (801dba8 <__ieee754_pow+0x770>)
 801da20:	4680      	mov	r8, r0
 801da22:	4689      	mov	r9, r1
 801da24:	2200      	movs	r2, #0
 801da26:	4620      	mov	r0, r4
 801da28:	4629      	mov	r1, r5
 801da2a:	f7e2 fc2d 	bl	8000288 <__aeabi_dsub>
 801da2e:	4632      	mov	r2, r6
 801da30:	463b      	mov	r3, r7
 801da32:	f7e2 fc29 	bl	8000288 <__aeabi_dsub>
 801da36:	4602      	mov	r2, r0
 801da38:	460b      	mov	r3, r1
 801da3a:	4650      	mov	r0, sl
 801da3c:	4659      	mov	r1, fp
 801da3e:	f7e2 fc23 	bl	8000288 <__aeabi_dsub>
 801da42:	ec53 2b18 	vmov	r2, r3, d8
 801da46:	f7e2 fdd7 	bl	80005f8 <__aeabi_dmul>
 801da4a:	4622      	mov	r2, r4
 801da4c:	4606      	mov	r6, r0
 801da4e:	460f      	mov	r7, r1
 801da50:	462b      	mov	r3, r5
 801da52:	ec51 0b19 	vmov	r0, r1, d9
 801da56:	f7e2 fdcf 	bl	80005f8 <__aeabi_dmul>
 801da5a:	4602      	mov	r2, r0
 801da5c:	460b      	mov	r3, r1
 801da5e:	4630      	mov	r0, r6
 801da60:	4639      	mov	r1, r7
 801da62:	f7e2 fc13 	bl	800028c <__adddf3>
 801da66:	4606      	mov	r6, r0
 801da68:	460f      	mov	r7, r1
 801da6a:	4602      	mov	r2, r0
 801da6c:	460b      	mov	r3, r1
 801da6e:	4640      	mov	r0, r8
 801da70:	4649      	mov	r1, r9
 801da72:	f7e2 fc0b 	bl	800028c <__adddf3>
 801da76:	a33e      	add	r3, pc, #248	; (adr r3, 801db70 <__ieee754_pow+0x738>)
 801da78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da7c:	2000      	movs	r0, #0
 801da7e:	4604      	mov	r4, r0
 801da80:	460d      	mov	r5, r1
 801da82:	f7e2 fdb9 	bl	80005f8 <__aeabi_dmul>
 801da86:	4642      	mov	r2, r8
 801da88:	ec41 0b18 	vmov	d8, r0, r1
 801da8c:	464b      	mov	r3, r9
 801da8e:	4620      	mov	r0, r4
 801da90:	4629      	mov	r1, r5
 801da92:	f7e2 fbf9 	bl	8000288 <__aeabi_dsub>
 801da96:	4602      	mov	r2, r0
 801da98:	460b      	mov	r3, r1
 801da9a:	4630      	mov	r0, r6
 801da9c:	4639      	mov	r1, r7
 801da9e:	f7e2 fbf3 	bl	8000288 <__aeabi_dsub>
 801daa2:	a335      	add	r3, pc, #212	; (adr r3, 801db78 <__ieee754_pow+0x740>)
 801daa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801daa8:	f7e2 fda6 	bl	80005f8 <__aeabi_dmul>
 801daac:	a334      	add	r3, pc, #208	; (adr r3, 801db80 <__ieee754_pow+0x748>)
 801daae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dab2:	4606      	mov	r6, r0
 801dab4:	460f      	mov	r7, r1
 801dab6:	4620      	mov	r0, r4
 801dab8:	4629      	mov	r1, r5
 801daba:	f7e2 fd9d 	bl	80005f8 <__aeabi_dmul>
 801dabe:	4602      	mov	r2, r0
 801dac0:	460b      	mov	r3, r1
 801dac2:	4630      	mov	r0, r6
 801dac4:	4639      	mov	r1, r7
 801dac6:	f7e2 fbe1 	bl	800028c <__adddf3>
 801daca:	9a07      	ldr	r2, [sp, #28]
 801dacc:	4b37      	ldr	r3, [pc, #220]	; (801dbac <__ieee754_pow+0x774>)
 801dace:	4413      	add	r3, r2
 801dad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dad4:	f7e2 fbda 	bl	800028c <__adddf3>
 801dad8:	4682      	mov	sl, r0
 801dada:	9805      	ldr	r0, [sp, #20]
 801dadc:	468b      	mov	fp, r1
 801dade:	f7e2 fd21 	bl	8000524 <__aeabi_i2d>
 801dae2:	9a07      	ldr	r2, [sp, #28]
 801dae4:	4b32      	ldr	r3, [pc, #200]	; (801dbb0 <__ieee754_pow+0x778>)
 801dae6:	4413      	add	r3, r2
 801dae8:	e9d3 8900 	ldrd	r8, r9, [r3]
 801daec:	4606      	mov	r6, r0
 801daee:	460f      	mov	r7, r1
 801daf0:	4652      	mov	r2, sl
 801daf2:	465b      	mov	r3, fp
 801daf4:	ec51 0b18 	vmov	r0, r1, d8
 801daf8:	f7e2 fbc8 	bl	800028c <__adddf3>
 801dafc:	4642      	mov	r2, r8
 801dafe:	464b      	mov	r3, r9
 801db00:	f7e2 fbc4 	bl	800028c <__adddf3>
 801db04:	4632      	mov	r2, r6
 801db06:	463b      	mov	r3, r7
 801db08:	f7e2 fbc0 	bl	800028c <__adddf3>
 801db0c:	2000      	movs	r0, #0
 801db0e:	4632      	mov	r2, r6
 801db10:	463b      	mov	r3, r7
 801db12:	4604      	mov	r4, r0
 801db14:	460d      	mov	r5, r1
 801db16:	f7e2 fbb7 	bl	8000288 <__aeabi_dsub>
 801db1a:	4642      	mov	r2, r8
 801db1c:	464b      	mov	r3, r9
 801db1e:	f7e2 fbb3 	bl	8000288 <__aeabi_dsub>
 801db22:	ec53 2b18 	vmov	r2, r3, d8
 801db26:	f7e2 fbaf 	bl	8000288 <__aeabi_dsub>
 801db2a:	4602      	mov	r2, r0
 801db2c:	460b      	mov	r3, r1
 801db2e:	4650      	mov	r0, sl
 801db30:	4659      	mov	r1, fp
 801db32:	e610      	b.n	801d756 <__ieee754_pow+0x31e>
 801db34:	2401      	movs	r4, #1
 801db36:	e6a1      	b.n	801d87c <__ieee754_pow+0x444>
 801db38:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801db88 <__ieee754_pow+0x750>
 801db3c:	e617      	b.n	801d76e <__ieee754_pow+0x336>
 801db3e:	bf00      	nop
 801db40:	4a454eef 	.word	0x4a454eef
 801db44:	3fca7e28 	.word	0x3fca7e28
 801db48:	93c9db65 	.word	0x93c9db65
 801db4c:	3fcd864a 	.word	0x3fcd864a
 801db50:	a91d4101 	.word	0xa91d4101
 801db54:	3fd17460 	.word	0x3fd17460
 801db58:	518f264d 	.word	0x518f264d
 801db5c:	3fd55555 	.word	0x3fd55555
 801db60:	db6fabff 	.word	0xdb6fabff
 801db64:	3fdb6db6 	.word	0x3fdb6db6
 801db68:	33333303 	.word	0x33333303
 801db6c:	3fe33333 	.word	0x3fe33333
 801db70:	e0000000 	.word	0xe0000000
 801db74:	3feec709 	.word	0x3feec709
 801db78:	dc3a03fd 	.word	0xdc3a03fd
 801db7c:	3feec709 	.word	0x3feec709
 801db80:	145b01f5 	.word	0x145b01f5
 801db84:	be3e2fe0 	.word	0xbe3e2fe0
 801db88:	00000000 	.word	0x00000000
 801db8c:	3ff00000 	.word	0x3ff00000
 801db90:	7ff00000 	.word	0x7ff00000
 801db94:	43400000 	.word	0x43400000
 801db98:	0003988e 	.word	0x0003988e
 801db9c:	000bb679 	.word	0x000bb679
 801dba0:	0802a210 	.word	0x0802a210
 801dba4:	3ff00000 	.word	0x3ff00000
 801dba8:	40080000 	.word	0x40080000
 801dbac:	0802a230 	.word	0x0802a230
 801dbb0:	0802a220 	.word	0x0802a220
 801dbb4:	a3b5      	add	r3, pc, #724	; (adr r3, 801de8c <__ieee754_pow+0xa54>)
 801dbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbba:	4640      	mov	r0, r8
 801dbbc:	4649      	mov	r1, r9
 801dbbe:	f7e2 fb65 	bl	800028c <__adddf3>
 801dbc2:	4622      	mov	r2, r4
 801dbc4:	ec41 0b1a 	vmov	d10, r0, r1
 801dbc8:	462b      	mov	r3, r5
 801dbca:	4630      	mov	r0, r6
 801dbcc:	4639      	mov	r1, r7
 801dbce:	f7e2 fb5b 	bl	8000288 <__aeabi_dsub>
 801dbd2:	4602      	mov	r2, r0
 801dbd4:	460b      	mov	r3, r1
 801dbd6:	ec51 0b1a 	vmov	r0, r1, d10
 801dbda:	f7e2 ff9d 	bl	8000b18 <__aeabi_dcmpgt>
 801dbde:	2800      	cmp	r0, #0
 801dbe0:	f47f ae04 	bne.w	801d7ec <__ieee754_pow+0x3b4>
 801dbe4:	4aa4      	ldr	r2, [pc, #656]	; (801de78 <__ieee754_pow+0xa40>)
 801dbe6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801dbea:	4293      	cmp	r3, r2
 801dbec:	f340 8108 	ble.w	801de00 <__ieee754_pow+0x9c8>
 801dbf0:	151b      	asrs	r3, r3, #20
 801dbf2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801dbf6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801dbfa:	fa4a f303 	asr.w	r3, sl, r3
 801dbfe:	445b      	add	r3, fp
 801dc00:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801dc04:	4e9d      	ldr	r6, [pc, #628]	; (801de7c <__ieee754_pow+0xa44>)
 801dc06:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801dc0a:	4116      	asrs	r6, r2
 801dc0c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801dc10:	2000      	movs	r0, #0
 801dc12:	ea23 0106 	bic.w	r1, r3, r6
 801dc16:	f1c2 0214 	rsb	r2, r2, #20
 801dc1a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801dc1e:	fa4a fa02 	asr.w	sl, sl, r2
 801dc22:	f1bb 0f00 	cmp.w	fp, #0
 801dc26:	4602      	mov	r2, r0
 801dc28:	460b      	mov	r3, r1
 801dc2a:	4620      	mov	r0, r4
 801dc2c:	4629      	mov	r1, r5
 801dc2e:	bfb8      	it	lt
 801dc30:	f1ca 0a00 	rsblt	sl, sl, #0
 801dc34:	f7e2 fb28 	bl	8000288 <__aeabi_dsub>
 801dc38:	ec41 0b19 	vmov	d9, r0, r1
 801dc3c:	4642      	mov	r2, r8
 801dc3e:	464b      	mov	r3, r9
 801dc40:	ec51 0b19 	vmov	r0, r1, d9
 801dc44:	f7e2 fb22 	bl	800028c <__adddf3>
 801dc48:	a37b      	add	r3, pc, #492	; (adr r3, 801de38 <__ieee754_pow+0xa00>)
 801dc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc4e:	2000      	movs	r0, #0
 801dc50:	4604      	mov	r4, r0
 801dc52:	460d      	mov	r5, r1
 801dc54:	f7e2 fcd0 	bl	80005f8 <__aeabi_dmul>
 801dc58:	ec53 2b19 	vmov	r2, r3, d9
 801dc5c:	4606      	mov	r6, r0
 801dc5e:	460f      	mov	r7, r1
 801dc60:	4620      	mov	r0, r4
 801dc62:	4629      	mov	r1, r5
 801dc64:	f7e2 fb10 	bl	8000288 <__aeabi_dsub>
 801dc68:	4602      	mov	r2, r0
 801dc6a:	460b      	mov	r3, r1
 801dc6c:	4640      	mov	r0, r8
 801dc6e:	4649      	mov	r1, r9
 801dc70:	f7e2 fb0a 	bl	8000288 <__aeabi_dsub>
 801dc74:	a372      	add	r3, pc, #456	; (adr r3, 801de40 <__ieee754_pow+0xa08>)
 801dc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc7a:	f7e2 fcbd 	bl	80005f8 <__aeabi_dmul>
 801dc7e:	a372      	add	r3, pc, #456	; (adr r3, 801de48 <__ieee754_pow+0xa10>)
 801dc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc84:	4680      	mov	r8, r0
 801dc86:	4689      	mov	r9, r1
 801dc88:	4620      	mov	r0, r4
 801dc8a:	4629      	mov	r1, r5
 801dc8c:	f7e2 fcb4 	bl	80005f8 <__aeabi_dmul>
 801dc90:	4602      	mov	r2, r0
 801dc92:	460b      	mov	r3, r1
 801dc94:	4640      	mov	r0, r8
 801dc96:	4649      	mov	r1, r9
 801dc98:	f7e2 faf8 	bl	800028c <__adddf3>
 801dc9c:	4604      	mov	r4, r0
 801dc9e:	460d      	mov	r5, r1
 801dca0:	4602      	mov	r2, r0
 801dca2:	460b      	mov	r3, r1
 801dca4:	4630      	mov	r0, r6
 801dca6:	4639      	mov	r1, r7
 801dca8:	f7e2 faf0 	bl	800028c <__adddf3>
 801dcac:	4632      	mov	r2, r6
 801dcae:	463b      	mov	r3, r7
 801dcb0:	4680      	mov	r8, r0
 801dcb2:	4689      	mov	r9, r1
 801dcb4:	f7e2 fae8 	bl	8000288 <__aeabi_dsub>
 801dcb8:	4602      	mov	r2, r0
 801dcba:	460b      	mov	r3, r1
 801dcbc:	4620      	mov	r0, r4
 801dcbe:	4629      	mov	r1, r5
 801dcc0:	f7e2 fae2 	bl	8000288 <__aeabi_dsub>
 801dcc4:	4642      	mov	r2, r8
 801dcc6:	4606      	mov	r6, r0
 801dcc8:	460f      	mov	r7, r1
 801dcca:	464b      	mov	r3, r9
 801dccc:	4640      	mov	r0, r8
 801dcce:	4649      	mov	r1, r9
 801dcd0:	f7e2 fc92 	bl	80005f8 <__aeabi_dmul>
 801dcd4:	a35e      	add	r3, pc, #376	; (adr r3, 801de50 <__ieee754_pow+0xa18>)
 801dcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcda:	4604      	mov	r4, r0
 801dcdc:	460d      	mov	r5, r1
 801dcde:	f7e2 fc8b 	bl	80005f8 <__aeabi_dmul>
 801dce2:	a35d      	add	r3, pc, #372	; (adr r3, 801de58 <__ieee754_pow+0xa20>)
 801dce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dce8:	f7e2 face 	bl	8000288 <__aeabi_dsub>
 801dcec:	4622      	mov	r2, r4
 801dcee:	462b      	mov	r3, r5
 801dcf0:	f7e2 fc82 	bl	80005f8 <__aeabi_dmul>
 801dcf4:	a35a      	add	r3, pc, #360	; (adr r3, 801de60 <__ieee754_pow+0xa28>)
 801dcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcfa:	f7e2 fac7 	bl	800028c <__adddf3>
 801dcfe:	4622      	mov	r2, r4
 801dd00:	462b      	mov	r3, r5
 801dd02:	f7e2 fc79 	bl	80005f8 <__aeabi_dmul>
 801dd06:	a358      	add	r3, pc, #352	; (adr r3, 801de68 <__ieee754_pow+0xa30>)
 801dd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd0c:	f7e2 fabc 	bl	8000288 <__aeabi_dsub>
 801dd10:	4622      	mov	r2, r4
 801dd12:	462b      	mov	r3, r5
 801dd14:	f7e2 fc70 	bl	80005f8 <__aeabi_dmul>
 801dd18:	a355      	add	r3, pc, #340	; (adr r3, 801de70 <__ieee754_pow+0xa38>)
 801dd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd1e:	f7e2 fab5 	bl	800028c <__adddf3>
 801dd22:	4622      	mov	r2, r4
 801dd24:	462b      	mov	r3, r5
 801dd26:	f7e2 fc67 	bl	80005f8 <__aeabi_dmul>
 801dd2a:	4602      	mov	r2, r0
 801dd2c:	460b      	mov	r3, r1
 801dd2e:	4640      	mov	r0, r8
 801dd30:	4649      	mov	r1, r9
 801dd32:	f7e2 faa9 	bl	8000288 <__aeabi_dsub>
 801dd36:	4604      	mov	r4, r0
 801dd38:	460d      	mov	r5, r1
 801dd3a:	4602      	mov	r2, r0
 801dd3c:	460b      	mov	r3, r1
 801dd3e:	4640      	mov	r0, r8
 801dd40:	4649      	mov	r1, r9
 801dd42:	f7e2 fc59 	bl	80005f8 <__aeabi_dmul>
 801dd46:	2200      	movs	r2, #0
 801dd48:	ec41 0b19 	vmov	d9, r0, r1
 801dd4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801dd50:	4620      	mov	r0, r4
 801dd52:	4629      	mov	r1, r5
 801dd54:	f7e2 fa98 	bl	8000288 <__aeabi_dsub>
 801dd58:	4602      	mov	r2, r0
 801dd5a:	460b      	mov	r3, r1
 801dd5c:	ec51 0b19 	vmov	r0, r1, d9
 801dd60:	f7e2 fd74 	bl	800084c <__aeabi_ddiv>
 801dd64:	4632      	mov	r2, r6
 801dd66:	4604      	mov	r4, r0
 801dd68:	460d      	mov	r5, r1
 801dd6a:	463b      	mov	r3, r7
 801dd6c:	4640      	mov	r0, r8
 801dd6e:	4649      	mov	r1, r9
 801dd70:	f7e2 fc42 	bl	80005f8 <__aeabi_dmul>
 801dd74:	4632      	mov	r2, r6
 801dd76:	463b      	mov	r3, r7
 801dd78:	f7e2 fa88 	bl	800028c <__adddf3>
 801dd7c:	4602      	mov	r2, r0
 801dd7e:	460b      	mov	r3, r1
 801dd80:	4620      	mov	r0, r4
 801dd82:	4629      	mov	r1, r5
 801dd84:	f7e2 fa80 	bl	8000288 <__aeabi_dsub>
 801dd88:	4642      	mov	r2, r8
 801dd8a:	464b      	mov	r3, r9
 801dd8c:	f7e2 fa7c 	bl	8000288 <__aeabi_dsub>
 801dd90:	460b      	mov	r3, r1
 801dd92:	4602      	mov	r2, r0
 801dd94:	493a      	ldr	r1, [pc, #232]	; (801de80 <__ieee754_pow+0xa48>)
 801dd96:	2000      	movs	r0, #0
 801dd98:	f7e2 fa76 	bl	8000288 <__aeabi_dsub>
 801dd9c:	ec41 0b10 	vmov	d0, r0, r1
 801dda0:	ee10 3a90 	vmov	r3, s1
 801dda4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801dda8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ddac:	da2b      	bge.n	801de06 <__ieee754_pow+0x9ce>
 801ddae:	4650      	mov	r0, sl
 801ddb0:	f000 f96a 	bl	801e088 <scalbn>
 801ddb4:	ec51 0b10 	vmov	r0, r1, d0
 801ddb8:	ec53 2b18 	vmov	r2, r3, d8
 801ddbc:	f7ff bbed 	b.w	801d59a <__ieee754_pow+0x162>
 801ddc0:	4b30      	ldr	r3, [pc, #192]	; (801de84 <__ieee754_pow+0xa4c>)
 801ddc2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801ddc6:	429e      	cmp	r6, r3
 801ddc8:	f77f af0c 	ble.w	801dbe4 <__ieee754_pow+0x7ac>
 801ddcc:	4b2e      	ldr	r3, [pc, #184]	; (801de88 <__ieee754_pow+0xa50>)
 801ddce:	440b      	add	r3, r1
 801ddd0:	4303      	orrs	r3, r0
 801ddd2:	d009      	beq.n	801dde8 <__ieee754_pow+0x9b0>
 801ddd4:	ec51 0b18 	vmov	r0, r1, d8
 801ddd8:	2200      	movs	r2, #0
 801ddda:	2300      	movs	r3, #0
 801dddc:	f7e2 fe7e 	bl	8000adc <__aeabi_dcmplt>
 801dde0:	3800      	subs	r0, #0
 801dde2:	bf18      	it	ne
 801dde4:	2001      	movne	r0, #1
 801dde6:	e447      	b.n	801d678 <__ieee754_pow+0x240>
 801dde8:	4622      	mov	r2, r4
 801ddea:	462b      	mov	r3, r5
 801ddec:	f7e2 fa4c 	bl	8000288 <__aeabi_dsub>
 801ddf0:	4642      	mov	r2, r8
 801ddf2:	464b      	mov	r3, r9
 801ddf4:	f7e2 fe86 	bl	8000b04 <__aeabi_dcmpge>
 801ddf8:	2800      	cmp	r0, #0
 801ddfa:	f43f aef3 	beq.w	801dbe4 <__ieee754_pow+0x7ac>
 801ddfe:	e7e9      	b.n	801ddd4 <__ieee754_pow+0x99c>
 801de00:	f04f 0a00 	mov.w	sl, #0
 801de04:	e71a      	b.n	801dc3c <__ieee754_pow+0x804>
 801de06:	ec51 0b10 	vmov	r0, r1, d0
 801de0a:	4619      	mov	r1, r3
 801de0c:	e7d4      	b.n	801ddb8 <__ieee754_pow+0x980>
 801de0e:	491c      	ldr	r1, [pc, #112]	; (801de80 <__ieee754_pow+0xa48>)
 801de10:	2000      	movs	r0, #0
 801de12:	f7ff bb30 	b.w	801d476 <__ieee754_pow+0x3e>
 801de16:	2000      	movs	r0, #0
 801de18:	2100      	movs	r1, #0
 801de1a:	f7ff bb2c 	b.w	801d476 <__ieee754_pow+0x3e>
 801de1e:	4630      	mov	r0, r6
 801de20:	4639      	mov	r1, r7
 801de22:	f7ff bb28 	b.w	801d476 <__ieee754_pow+0x3e>
 801de26:	9204      	str	r2, [sp, #16]
 801de28:	f7ff bb7a 	b.w	801d520 <__ieee754_pow+0xe8>
 801de2c:	2300      	movs	r3, #0
 801de2e:	f7ff bb64 	b.w	801d4fa <__ieee754_pow+0xc2>
 801de32:	bf00      	nop
 801de34:	f3af 8000 	nop.w
 801de38:	00000000 	.word	0x00000000
 801de3c:	3fe62e43 	.word	0x3fe62e43
 801de40:	fefa39ef 	.word	0xfefa39ef
 801de44:	3fe62e42 	.word	0x3fe62e42
 801de48:	0ca86c39 	.word	0x0ca86c39
 801de4c:	be205c61 	.word	0xbe205c61
 801de50:	72bea4d0 	.word	0x72bea4d0
 801de54:	3e663769 	.word	0x3e663769
 801de58:	c5d26bf1 	.word	0xc5d26bf1
 801de5c:	3ebbbd41 	.word	0x3ebbbd41
 801de60:	af25de2c 	.word	0xaf25de2c
 801de64:	3f11566a 	.word	0x3f11566a
 801de68:	16bebd93 	.word	0x16bebd93
 801de6c:	3f66c16c 	.word	0x3f66c16c
 801de70:	5555553e 	.word	0x5555553e
 801de74:	3fc55555 	.word	0x3fc55555
 801de78:	3fe00000 	.word	0x3fe00000
 801de7c:	000fffff 	.word	0x000fffff
 801de80:	3ff00000 	.word	0x3ff00000
 801de84:	4090cbff 	.word	0x4090cbff
 801de88:	3f6f3400 	.word	0x3f6f3400
 801de8c:	652b82fe 	.word	0x652b82fe
 801de90:	3c971547 	.word	0x3c971547

0801de94 <__ieee754_sqrt>:
 801de94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de98:	ec55 4b10 	vmov	r4, r5, d0
 801de9c:	4e55      	ldr	r6, [pc, #340]	; (801dff4 <__ieee754_sqrt+0x160>)
 801de9e:	43ae      	bics	r6, r5
 801dea0:	ee10 0a10 	vmov	r0, s0
 801dea4:	ee10 3a10 	vmov	r3, s0
 801dea8:	462a      	mov	r2, r5
 801deaa:	4629      	mov	r1, r5
 801deac:	d110      	bne.n	801ded0 <__ieee754_sqrt+0x3c>
 801deae:	ee10 2a10 	vmov	r2, s0
 801deb2:	462b      	mov	r3, r5
 801deb4:	f7e2 fba0 	bl	80005f8 <__aeabi_dmul>
 801deb8:	4602      	mov	r2, r0
 801deba:	460b      	mov	r3, r1
 801debc:	4620      	mov	r0, r4
 801debe:	4629      	mov	r1, r5
 801dec0:	f7e2 f9e4 	bl	800028c <__adddf3>
 801dec4:	4604      	mov	r4, r0
 801dec6:	460d      	mov	r5, r1
 801dec8:	ec45 4b10 	vmov	d0, r4, r5
 801decc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ded0:	2d00      	cmp	r5, #0
 801ded2:	dc10      	bgt.n	801def6 <__ieee754_sqrt+0x62>
 801ded4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ded8:	4330      	orrs	r0, r6
 801deda:	d0f5      	beq.n	801dec8 <__ieee754_sqrt+0x34>
 801dedc:	b15d      	cbz	r5, 801def6 <__ieee754_sqrt+0x62>
 801dede:	ee10 2a10 	vmov	r2, s0
 801dee2:	462b      	mov	r3, r5
 801dee4:	ee10 0a10 	vmov	r0, s0
 801dee8:	f7e2 f9ce 	bl	8000288 <__aeabi_dsub>
 801deec:	4602      	mov	r2, r0
 801deee:	460b      	mov	r3, r1
 801def0:	f7e2 fcac 	bl	800084c <__aeabi_ddiv>
 801def4:	e7e6      	b.n	801dec4 <__ieee754_sqrt+0x30>
 801def6:	1512      	asrs	r2, r2, #20
 801def8:	d074      	beq.n	801dfe4 <__ieee754_sqrt+0x150>
 801defa:	07d4      	lsls	r4, r2, #31
 801defc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801df00:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801df04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801df08:	bf5e      	ittt	pl
 801df0a:	0fda      	lsrpl	r2, r3, #31
 801df0c:	005b      	lslpl	r3, r3, #1
 801df0e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801df12:	2400      	movs	r4, #0
 801df14:	0fda      	lsrs	r2, r3, #31
 801df16:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801df1a:	107f      	asrs	r7, r7, #1
 801df1c:	005b      	lsls	r3, r3, #1
 801df1e:	2516      	movs	r5, #22
 801df20:	4620      	mov	r0, r4
 801df22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801df26:	1886      	adds	r6, r0, r2
 801df28:	428e      	cmp	r6, r1
 801df2a:	bfde      	ittt	le
 801df2c:	1b89      	suble	r1, r1, r6
 801df2e:	18b0      	addle	r0, r6, r2
 801df30:	18a4      	addle	r4, r4, r2
 801df32:	0049      	lsls	r1, r1, #1
 801df34:	3d01      	subs	r5, #1
 801df36:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801df3a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801df3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801df42:	d1f0      	bne.n	801df26 <__ieee754_sqrt+0x92>
 801df44:	462a      	mov	r2, r5
 801df46:	f04f 0e20 	mov.w	lr, #32
 801df4a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801df4e:	4281      	cmp	r1, r0
 801df50:	eb06 0c05 	add.w	ip, r6, r5
 801df54:	dc02      	bgt.n	801df5c <__ieee754_sqrt+0xc8>
 801df56:	d113      	bne.n	801df80 <__ieee754_sqrt+0xec>
 801df58:	459c      	cmp	ip, r3
 801df5a:	d811      	bhi.n	801df80 <__ieee754_sqrt+0xec>
 801df5c:	f1bc 0f00 	cmp.w	ip, #0
 801df60:	eb0c 0506 	add.w	r5, ip, r6
 801df64:	da43      	bge.n	801dfee <__ieee754_sqrt+0x15a>
 801df66:	2d00      	cmp	r5, #0
 801df68:	db41      	blt.n	801dfee <__ieee754_sqrt+0x15a>
 801df6a:	f100 0801 	add.w	r8, r0, #1
 801df6e:	1a09      	subs	r1, r1, r0
 801df70:	459c      	cmp	ip, r3
 801df72:	bf88      	it	hi
 801df74:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801df78:	eba3 030c 	sub.w	r3, r3, ip
 801df7c:	4432      	add	r2, r6
 801df7e:	4640      	mov	r0, r8
 801df80:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801df84:	f1be 0e01 	subs.w	lr, lr, #1
 801df88:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801df8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801df90:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801df94:	d1db      	bne.n	801df4e <__ieee754_sqrt+0xba>
 801df96:	430b      	orrs	r3, r1
 801df98:	d006      	beq.n	801dfa8 <__ieee754_sqrt+0x114>
 801df9a:	1c50      	adds	r0, r2, #1
 801df9c:	bf13      	iteet	ne
 801df9e:	3201      	addne	r2, #1
 801dfa0:	3401      	addeq	r4, #1
 801dfa2:	4672      	moveq	r2, lr
 801dfa4:	f022 0201 	bicne.w	r2, r2, #1
 801dfa8:	1063      	asrs	r3, r4, #1
 801dfaa:	0852      	lsrs	r2, r2, #1
 801dfac:	07e1      	lsls	r1, r4, #31
 801dfae:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801dfb2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801dfb6:	bf48      	it	mi
 801dfb8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801dfbc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801dfc0:	4614      	mov	r4, r2
 801dfc2:	e781      	b.n	801dec8 <__ieee754_sqrt+0x34>
 801dfc4:	0ad9      	lsrs	r1, r3, #11
 801dfc6:	3815      	subs	r0, #21
 801dfc8:	055b      	lsls	r3, r3, #21
 801dfca:	2900      	cmp	r1, #0
 801dfcc:	d0fa      	beq.n	801dfc4 <__ieee754_sqrt+0x130>
 801dfce:	02cd      	lsls	r5, r1, #11
 801dfd0:	d50a      	bpl.n	801dfe8 <__ieee754_sqrt+0x154>
 801dfd2:	f1c2 0420 	rsb	r4, r2, #32
 801dfd6:	fa23 f404 	lsr.w	r4, r3, r4
 801dfda:	1e55      	subs	r5, r2, #1
 801dfdc:	4093      	lsls	r3, r2
 801dfde:	4321      	orrs	r1, r4
 801dfe0:	1b42      	subs	r2, r0, r5
 801dfe2:	e78a      	b.n	801defa <__ieee754_sqrt+0x66>
 801dfe4:	4610      	mov	r0, r2
 801dfe6:	e7f0      	b.n	801dfca <__ieee754_sqrt+0x136>
 801dfe8:	0049      	lsls	r1, r1, #1
 801dfea:	3201      	adds	r2, #1
 801dfec:	e7ef      	b.n	801dfce <__ieee754_sqrt+0x13a>
 801dfee:	4680      	mov	r8, r0
 801dff0:	e7bd      	b.n	801df6e <__ieee754_sqrt+0xda>
 801dff2:	bf00      	nop
 801dff4:	7ff00000 	.word	0x7ff00000

0801dff8 <__ieee754_sqrtf>:
 801dff8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801dffc:	4770      	bx	lr

0801dffe <with_errno>:
 801dffe:	b570      	push	{r4, r5, r6, lr}
 801e000:	4604      	mov	r4, r0
 801e002:	460d      	mov	r5, r1
 801e004:	4616      	mov	r6, r2
 801e006:	f000 f8e3 	bl	801e1d0 <__errno>
 801e00a:	4629      	mov	r1, r5
 801e00c:	6006      	str	r6, [r0, #0]
 801e00e:	4620      	mov	r0, r4
 801e010:	bd70      	pop	{r4, r5, r6, pc}

0801e012 <xflow>:
 801e012:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e014:	4614      	mov	r4, r2
 801e016:	461d      	mov	r5, r3
 801e018:	b108      	cbz	r0, 801e01e <xflow+0xc>
 801e01a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801e01e:	e9cd 2300 	strd	r2, r3, [sp]
 801e022:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e026:	4620      	mov	r0, r4
 801e028:	4629      	mov	r1, r5
 801e02a:	f7e2 fae5 	bl	80005f8 <__aeabi_dmul>
 801e02e:	2222      	movs	r2, #34	; 0x22
 801e030:	b003      	add	sp, #12
 801e032:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e036:	f7ff bfe2 	b.w	801dffe <with_errno>

0801e03a <__math_uflow>:
 801e03a:	b508      	push	{r3, lr}
 801e03c:	2200      	movs	r2, #0
 801e03e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801e042:	f7ff ffe6 	bl	801e012 <xflow>
 801e046:	ec41 0b10 	vmov	d0, r0, r1
 801e04a:	bd08      	pop	{r3, pc}

0801e04c <__math_oflow>:
 801e04c:	b508      	push	{r3, lr}
 801e04e:	2200      	movs	r2, #0
 801e050:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801e054:	f7ff ffdd 	bl	801e012 <xflow>
 801e058:	ec41 0b10 	vmov	d0, r0, r1
 801e05c:	bd08      	pop	{r3, pc}

0801e05e <fabs>:
 801e05e:	ec51 0b10 	vmov	r0, r1, d0
 801e062:	ee10 2a10 	vmov	r2, s0
 801e066:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801e06a:	ec43 2b10 	vmov	d0, r2, r3
 801e06e:	4770      	bx	lr

0801e070 <finite>:
 801e070:	b082      	sub	sp, #8
 801e072:	ed8d 0b00 	vstr	d0, [sp]
 801e076:	9801      	ldr	r0, [sp, #4]
 801e078:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801e07c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801e080:	0fc0      	lsrs	r0, r0, #31
 801e082:	b002      	add	sp, #8
 801e084:	4770      	bx	lr
	...

0801e088 <scalbn>:
 801e088:	b570      	push	{r4, r5, r6, lr}
 801e08a:	ec55 4b10 	vmov	r4, r5, d0
 801e08e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801e092:	4606      	mov	r6, r0
 801e094:	462b      	mov	r3, r5
 801e096:	b99a      	cbnz	r2, 801e0c0 <scalbn+0x38>
 801e098:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801e09c:	4323      	orrs	r3, r4
 801e09e:	d036      	beq.n	801e10e <scalbn+0x86>
 801e0a0:	4b39      	ldr	r3, [pc, #228]	; (801e188 <scalbn+0x100>)
 801e0a2:	4629      	mov	r1, r5
 801e0a4:	ee10 0a10 	vmov	r0, s0
 801e0a8:	2200      	movs	r2, #0
 801e0aa:	f7e2 faa5 	bl	80005f8 <__aeabi_dmul>
 801e0ae:	4b37      	ldr	r3, [pc, #220]	; (801e18c <scalbn+0x104>)
 801e0b0:	429e      	cmp	r6, r3
 801e0b2:	4604      	mov	r4, r0
 801e0b4:	460d      	mov	r5, r1
 801e0b6:	da10      	bge.n	801e0da <scalbn+0x52>
 801e0b8:	a32b      	add	r3, pc, #172	; (adr r3, 801e168 <scalbn+0xe0>)
 801e0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0be:	e03a      	b.n	801e136 <scalbn+0xae>
 801e0c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801e0c4:	428a      	cmp	r2, r1
 801e0c6:	d10c      	bne.n	801e0e2 <scalbn+0x5a>
 801e0c8:	ee10 2a10 	vmov	r2, s0
 801e0cc:	4620      	mov	r0, r4
 801e0ce:	4629      	mov	r1, r5
 801e0d0:	f7e2 f8dc 	bl	800028c <__adddf3>
 801e0d4:	4604      	mov	r4, r0
 801e0d6:	460d      	mov	r5, r1
 801e0d8:	e019      	b.n	801e10e <scalbn+0x86>
 801e0da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e0de:	460b      	mov	r3, r1
 801e0e0:	3a36      	subs	r2, #54	; 0x36
 801e0e2:	4432      	add	r2, r6
 801e0e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801e0e8:	428a      	cmp	r2, r1
 801e0ea:	dd08      	ble.n	801e0fe <scalbn+0x76>
 801e0ec:	2d00      	cmp	r5, #0
 801e0ee:	a120      	add	r1, pc, #128	; (adr r1, 801e170 <scalbn+0xe8>)
 801e0f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e0f4:	da1c      	bge.n	801e130 <scalbn+0xa8>
 801e0f6:	a120      	add	r1, pc, #128	; (adr r1, 801e178 <scalbn+0xf0>)
 801e0f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e0fc:	e018      	b.n	801e130 <scalbn+0xa8>
 801e0fe:	2a00      	cmp	r2, #0
 801e100:	dd08      	ble.n	801e114 <scalbn+0x8c>
 801e102:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e106:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801e10a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801e10e:	ec45 4b10 	vmov	d0, r4, r5
 801e112:	bd70      	pop	{r4, r5, r6, pc}
 801e114:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801e118:	da19      	bge.n	801e14e <scalbn+0xc6>
 801e11a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801e11e:	429e      	cmp	r6, r3
 801e120:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801e124:	dd0a      	ble.n	801e13c <scalbn+0xb4>
 801e126:	a112      	add	r1, pc, #72	; (adr r1, 801e170 <scalbn+0xe8>)
 801e128:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e12c:	2b00      	cmp	r3, #0
 801e12e:	d1e2      	bne.n	801e0f6 <scalbn+0x6e>
 801e130:	a30f      	add	r3, pc, #60	; (adr r3, 801e170 <scalbn+0xe8>)
 801e132:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e136:	f7e2 fa5f 	bl	80005f8 <__aeabi_dmul>
 801e13a:	e7cb      	b.n	801e0d4 <scalbn+0x4c>
 801e13c:	a10a      	add	r1, pc, #40	; (adr r1, 801e168 <scalbn+0xe0>)
 801e13e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e142:	2b00      	cmp	r3, #0
 801e144:	d0b8      	beq.n	801e0b8 <scalbn+0x30>
 801e146:	a10e      	add	r1, pc, #56	; (adr r1, 801e180 <scalbn+0xf8>)
 801e148:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e14c:	e7b4      	b.n	801e0b8 <scalbn+0x30>
 801e14e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e152:	3236      	adds	r2, #54	; 0x36
 801e154:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801e158:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801e15c:	4620      	mov	r0, r4
 801e15e:	4b0c      	ldr	r3, [pc, #48]	; (801e190 <scalbn+0x108>)
 801e160:	2200      	movs	r2, #0
 801e162:	e7e8      	b.n	801e136 <scalbn+0xae>
 801e164:	f3af 8000 	nop.w
 801e168:	c2f8f359 	.word	0xc2f8f359
 801e16c:	01a56e1f 	.word	0x01a56e1f
 801e170:	8800759c 	.word	0x8800759c
 801e174:	7e37e43c 	.word	0x7e37e43c
 801e178:	8800759c 	.word	0x8800759c
 801e17c:	fe37e43c 	.word	0xfe37e43c
 801e180:	c2f8f359 	.word	0xc2f8f359
 801e184:	81a56e1f 	.word	0x81a56e1f
 801e188:	43500000 	.word	0x43500000
 801e18c:	ffff3cb0 	.word	0xffff3cb0
 801e190:	3c900000 	.word	0x3c900000

0801e194 <__assert_func>:
 801e194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e196:	4614      	mov	r4, r2
 801e198:	461a      	mov	r2, r3
 801e19a:	4b09      	ldr	r3, [pc, #36]	; (801e1c0 <__assert_func+0x2c>)
 801e19c:	681b      	ldr	r3, [r3, #0]
 801e19e:	4605      	mov	r5, r0
 801e1a0:	68d8      	ldr	r0, [r3, #12]
 801e1a2:	b14c      	cbz	r4, 801e1b8 <__assert_func+0x24>
 801e1a4:	4b07      	ldr	r3, [pc, #28]	; (801e1c4 <__assert_func+0x30>)
 801e1a6:	9100      	str	r1, [sp, #0]
 801e1a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e1ac:	4906      	ldr	r1, [pc, #24]	; (801e1c8 <__assert_func+0x34>)
 801e1ae:	462b      	mov	r3, r5
 801e1b0:	f000 f814 	bl	801e1dc <fiprintf>
 801e1b4:	f000 fc0c 	bl	801e9d0 <abort>
 801e1b8:	4b04      	ldr	r3, [pc, #16]	; (801e1cc <__assert_func+0x38>)
 801e1ba:	461c      	mov	r4, r3
 801e1bc:	e7f3      	b.n	801e1a6 <__assert_func+0x12>
 801e1be:	bf00      	nop
 801e1c0:	2000023c 	.word	0x2000023c
 801e1c4:	0802a240 	.word	0x0802a240
 801e1c8:	0802a24d 	.word	0x0802a24d
 801e1cc:	0802a27b 	.word	0x0802a27b

0801e1d0 <__errno>:
 801e1d0:	4b01      	ldr	r3, [pc, #4]	; (801e1d8 <__errno+0x8>)
 801e1d2:	6818      	ldr	r0, [r3, #0]
 801e1d4:	4770      	bx	lr
 801e1d6:	bf00      	nop
 801e1d8:	2000023c 	.word	0x2000023c

0801e1dc <fiprintf>:
 801e1dc:	b40e      	push	{r1, r2, r3}
 801e1de:	b503      	push	{r0, r1, lr}
 801e1e0:	4601      	mov	r1, r0
 801e1e2:	ab03      	add	r3, sp, #12
 801e1e4:	4805      	ldr	r0, [pc, #20]	; (801e1fc <fiprintf+0x20>)
 801e1e6:	f853 2b04 	ldr.w	r2, [r3], #4
 801e1ea:	6800      	ldr	r0, [r0, #0]
 801e1ec:	9301      	str	r3, [sp, #4]
 801e1ee:	f000 f86b 	bl	801e2c8 <_vfiprintf_r>
 801e1f2:	b002      	add	sp, #8
 801e1f4:	f85d eb04 	ldr.w	lr, [sp], #4
 801e1f8:	b003      	add	sp, #12
 801e1fa:	4770      	bx	lr
 801e1fc:	2000023c 	.word	0x2000023c

0801e200 <__libc_init_array>:
 801e200:	b570      	push	{r4, r5, r6, lr}
 801e202:	4d0d      	ldr	r5, [pc, #52]	; (801e238 <__libc_init_array+0x38>)
 801e204:	4c0d      	ldr	r4, [pc, #52]	; (801e23c <__libc_init_array+0x3c>)
 801e206:	1b64      	subs	r4, r4, r5
 801e208:	10a4      	asrs	r4, r4, #2
 801e20a:	2600      	movs	r6, #0
 801e20c:	42a6      	cmp	r6, r4
 801e20e:	d109      	bne.n	801e224 <__libc_init_array+0x24>
 801e210:	4d0b      	ldr	r5, [pc, #44]	; (801e240 <__libc_init_array+0x40>)
 801e212:	4c0c      	ldr	r4, [pc, #48]	; (801e244 <__libc_init_array+0x44>)
 801e214:	f000 fff0 	bl	801f1f8 <_init>
 801e218:	1b64      	subs	r4, r4, r5
 801e21a:	10a4      	asrs	r4, r4, #2
 801e21c:	2600      	movs	r6, #0
 801e21e:	42a6      	cmp	r6, r4
 801e220:	d105      	bne.n	801e22e <__libc_init_array+0x2e>
 801e222:	bd70      	pop	{r4, r5, r6, pc}
 801e224:	f855 3b04 	ldr.w	r3, [r5], #4
 801e228:	4798      	blx	r3
 801e22a:	3601      	adds	r6, #1
 801e22c:	e7ee      	b.n	801e20c <__libc_init_array+0xc>
 801e22e:	f855 3b04 	ldr.w	r3, [r5], #4
 801e232:	4798      	blx	r3
 801e234:	3601      	adds	r6, #1
 801e236:	e7f2      	b.n	801e21e <__libc_init_array+0x1e>
 801e238:	0802a31c 	.word	0x0802a31c
 801e23c:	0802a31c 	.word	0x0802a31c
 801e240:	0802a31c 	.word	0x0802a31c
 801e244:	0802a324 	.word	0x0802a324

0801e248 <memcpy>:
 801e248:	440a      	add	r2, r1
 801e24a:	4291      	cmp	r1, r2
 801e24c:	f100 33ff 	add.w	r3, r0, #4294967295
 801e250:	d100      	bne.n	801e254 <memcpy+0xc>
 801e252:	4770      	bx	lr
 801e254:	b510      	push	{r4, lr}
 801e256:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e25a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e25e:	4291      	cmp	r1, r2
 801e260:	d1f9      	bne.n	801e256 <memcpy+0xe>
 801e262:	bd10      	pop	{r4, pc}

0801e264 <memset>:
 801e264:	4402      	add	r2, r0
 801e266:	4603      	mov	r3, r0
 801e268:	4293      	cmp	r3, r2
 801e26a:	d100      	bne.n	801e26e <memset+0xa>
 801e26c:	4770      	bx	lr
 801e26e:	f803 1b01 	strb.w	r1, [r3], #1
 801e272:	e7f9      	b.n	801e268 <memset+0x4>

0801e274 <__sfputc_r>:
 801e274:	6893      	ldr	r3, [r2, #8]
 801e276:	3b01      	subs	r3, #1
 801e278:	2b00      	cmp	r3, #0
 801e27a:	b410      	push	{r4}
 801e27c:	6093      	str	r3, [r2, #8]
 801e27e:	da08      	bge.n	801e292 <__sfputc_r+0x1e>
 801e280:	6994      	ldr	r4, [r2, #24]
 801e282:	42a3      	cmp	r3, r4
 801e284:	db01      	blt.n	801e28a <__sfputc_r+0x16>
 801e286:	290a      	cmp	r1, #10
 801e288:	d103      	bne.n	801e292 <__sfputc_r+0x1e>
 801e28a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e28e:	f000 badf 	b.w	801e850 <__swbuf_r>
 801e292:	6813      	ldr	r3, [r2, #0]
 801e294:	1c58      	adds	r0, r3, #1
 801e296:	6010      	str	r0, [r2, #0]
 801e298:	7019      	strb	r1, [r3, #0]
 801e29a:	4608      	mov	r0, r1
 801e29c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e2a0:	4770      	bx	lr

0801e2a2 <__sfputs_r>:
 801e2a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2a4:	4606      	mov	r6, r0
 801e2a6:	460f      	mov	r7, r1
 801e2a8:	4614      	mov	r4, r2
 801e2aa:	18d5      	adds	r5, r2, r3
 801e2ac:	42ac      	cmp	r4, r5
 801e2ae:	d101      	bne.n	801e2b4 <__sfputs_r+0x12>
 801e2b0:	2000      	movs	r0, #0
 801e2b2:	e007      	b.n	801e2c4 <__sfputs_r+0x22>
 801e2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e2b8:	463a      	mov	r2, r7
 801e2ba:	4630      	mov	r0, r6
 801e2bc:	f7ff ffda 	bl	801e274 <__sfputc_r>
 801e2c0:	1c43      	adds	r3, r0, #1
 801e2c2:	d1f3      	bne.n	801e2ac <__sfputs_r+0xa>
 801e2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e2c8 <_vfiprintf_r>:
 801e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2cc:	460d      	mov	r5, r1
 801e2ce:	b09d      	sub	sp, #116	; 0x74
 801e2d0:	4614      	mov	r4, r2
 801e2d2:	4698      	mov	r8, r3
 801e2d4:	4606      	mov	r6, r0
 801e2d6:	b118      	cbz	r0, 801e2e0 <_vfiprintf_r+0x18>
 801e2d8:	6983      	ldr	r3, [r0, #24]
 801e2da:	b90b      	cbnz	r3, 801e2e0 <_vfiprintf_r+0x18>
 801e2dc:	f000 fc9a 	bl	801ec14 <__sinit>
 801e2e0:	4b89      	ldr	r3, [pc, #548]	; (801e508 <_vfiprintf_r+0x240>)
 801e2e2:	429d      	cmp	r5, r3
 801e2e4:	d11b      	bne.n	801e31e <_vfiprintf_r+0x56>
 801e2e6:	6875      	ldr	r5, [r6, #4]
 801e2e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e2ea:	07d9      	lsls	r1, r3, #31
 801e2ec:	d405      	bmi.n	801e2fa <_vfiprintf_r+0x32>
 801e2ee:	89ab      	ldrh	r3, [r5, #12]
 801e2f0:	059a      	lsls	r2, r3, #22
 801e2f2:	d402      	bmi.n	801e2fa <_vfiprintf_r+0x32>
 801e2f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e2f6:	f000 fd2b 	bl	801ed50 <__retarget_lock_acquire_recursive>
 801e2fa:	89ab      	ldrh	r3, [r5, #12]
 801e2fc:	071b      	lsls	r3, r3, #28
 801e2fe:	d501      	bpl.n	801e304 <_vfiprintf_r+0x3c>
 801e300:	692b      	ldr	r3, [r5, #16]
 801e302:	b9eb      	cbnz	r3, 801e340 <_vfiprintf_r+0x78>
 801e304:	4629      	mov	r1, r5
 801e306:	4630      	mov	r0, r6
 801e308:	f000 faf4 	bl	801e8f4 <__swsetup_r>
 801e30c:	b1c0      	cbz	r0, 801e340 <_vfiprintf_r+0x78>
 801e30e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e310:	07dc      	lsls	r4, r3, #31
 801e312:	d50e      	bpl.n	801e332 <_vfiprintf_r+0x6a>
 801e314:	f04f 30ff 	mov.w	r0, #4294967295
 801e318:	b01d      	add	sp, #116	; 0x74
 801e31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e31e:	4b7b      	ldr	r3, [pc, #492]	; (801e50c <_vfiprintf_r+0x244>)
 801e320:	429d      	cmp	r5, r3
 801e322:	d101      	bne.n	801e328 <_vfiprintf_r+0x60>
 801e324:	68b5      	ldr	r5, [r6, #8]
 801e326:	e7df      	b.n	801e2e8 <_vfiprintf_r+0x20>
 801e328:	4b79      	ldr	r3, [pc, #484]	; (801e510 <_vfiprintf_r+0x248>)
 801e32a:	429d      	cmp	r5, r3
 801e32c:	bf08      	it	eq
 801e32e:	68f5      	ldreq	r5, [r6, #12]
 801e330:	e7da      	b.n	801e2e8 <_vfiprintf_r+0x20>
 801e332:	89ab      	ldrh	r3, [r5, #12]
 801e334:	0598      	lsls	r0, r3, #22
 801e336:	d4ed      	bmi.n	801e314 <_vfiprintf_r+0x4c>
 801e338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e33a:	f000 fd0a 	bl	801ed52 <__retarget_lock_release_recursive>
 801e33e:	e7e9      	b.n	801e314 <_vfiprintf_r+0x4c>
 801e340:	2300      	movs	r3, #0
 801e342:	9309      	str	r3, [sp, #36]	; 0x24
 801e344:	2320      	movs	r3, #32
 801e346:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e34a:	f8cd 800c 	str.w	r8, [sp, #12]
 801e34e:	2330      	movs	r3, #48	; 0x30
 801e350:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e514 <_vfiprintf_r+0x24c>
 801e354:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e358:	f04f 0901 	mov.w	r9, #1
 801e35c:	4623      	mov	r3, r4
 801e35e:	469a      	mov	sl, r3
 801e360:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e364:	b10a      	cbz	r2, 801e36a <_vfiprintf_r+0xa2>
 801e366:	2a25      	cmp	r2, #37	; 0x25
 801e368:	d1f9      	bne.n	801e35e <_vfiprintf_r+0x96>
 801e36a:	ebba 0b04 	subs.w	fp, sl, r4
 801e36e:	d00b      	beq.n	801e388 <_vfiprintf_r+0xc0>
 801e370:	465b      	mov	r3, fp
 801e372:	4622      	mov	r2, r4
 801e374:	4629      	mov	r1, r5
 801e376:	4630      	mov	r0, r6
 801e378:	f7ff ff93 	bl	801e2a2 <__sfputs_r>
 801e37c:	3001      	adds	r0, #1
 801e37e:	f000 80aa 	beq.w	801e4d6 <_vfiprintf_r+0x20e>
 801e382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e384:	445a      	add	r2, fp
 801e386:	9209      	str	r2, [sp, #36]	; 0x24
 801e388:	f89a 3000 	ldrb.w	r3, [sl]
 801e38c:	2b00      	cmp	r3, #0
 801e38e:	f000 80a2 	beq.w	801e4d6 <_vfiprintf_r+0x20e>
 801e392:	2300      	movs	r3, #0
 801e394:	f04f 32ff 	mov.w	r2, #4294967295
 801e398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e39c:	f10a 0a01 	add.w	sl, sl, #1
 801e3a0:	9304      	str	r3, [sp, #16]
 801e3a2:	9307      	str	r3, [sp, #28]
 801e3a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e3a8:	931a      	str	r3, [sp, #104]	; 0x68
 801e3aa:	4654      	mov	r4, sl
 801e3ac:	2205      	movs	r2, #5
 801e3ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e3b2:	4858      	ldr	r0, [pc, #352]	; (801e514 <_vfiprintf_r+0x24c>)
 801e3b4:	f7e1 ff14 	bl	80001e0 <memchr>
 801e3b8:	9a04      	ldr	r2, [sp, #16]
 801e3ba:	b9d8      	cbnz	r0, 801e3f4 <_vfiprintf_r+0x12c>
 801e3bc:	06d1      	lsls	r1, r2, #27
 801e3be:	bf44      	itt	mi
 801e3c0:	2320      	movmi	r3, #32
 801e3c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e3c6:	0713      	lsls	r3, r2, #28
 801e3c8:	bf44      	itt	mi
 801e3ca:	232b      	movmi	r3, #43	; 0x2b
 801e3cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e3d0:	f89a 3000 	ldrb.w	r3, [sl]
 801e3d4:	2b2a      	cmp	r3, #42	; 0x2a
 801e3d6:	d015      	beq.n	801e404 <_vfiprintf_r+0x13c>
 801e3d8:	9a07      	ldr	r2, [sp, #28]
 801e3da:	4654      	mov	r4, sl
 801e3dc:	2000      	movs	r0, #0
 801e3de:	f04f 0c0a 	mov.w	ip, #10
 801e3e2:	4621      	mov	r1, r4
 801e3e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e3e8:	3b30      	subs	r3, #48	; 0x30
 801e3ea:	2b09      	cmp	r3, #9
 801e3ec:	d94e      	bls.n	801e48c <_vfiprintf_r+0x1c4>
 801e3ee:	b1b0      	cbz	r0, 801e41e <_vfiprintf_r+0x156>
 801e3f0:	9207      	str	r2, [sp, #28]
 801e3f2:	e014      	b.n	801e41e <_vfiprintf_r+0x156>
 801e3f4:	eba0 0308 	sub.w	r3, r0, r8
 801e3f8:	fa09 f303 	lsl.w	r3, r9, r3
 801e3fc:	4313      	orrs	r3, r2
 801e3fe:	9304      	str	r3, [sp, #16]
 801e400:	46a2      	mov	sl, r4
 801e402:	e7d2      	b.n	801e3aa <_vfiprintf_r+0xe2>
 801e404:	9b03      	ldr	r3, [sp, #12]
 801e406:	1d19      	adds	r1, r3, #4
 801e408:	681b      	ldr	r3, [r3, #0]
 801e40a:	9103      	str	r1, [sp, #12]
 801e40c:	2b00      	cmp	r3, #0
 801e40e:	bfbb      	ittet	lt
 801e410:	425b      	neglt	r3, r3
 801e412:	f042 0202 	orrlt.w	r2, r2, #2
 801e416:	9307      	strge	r3, [sp, #28]
 801e418:	9307      	strlt	r3, [sp, #28]
 801e41a:	bfb8      	it	lt
 801e41c:	9204      	strlt	r2, [sp, #16]
 801e41e:	7823      	ldrb	r3, [r4, #0]
 801e420:	2b2e      	cmp	r3, #46	; 0x2e
 801e422:	d10c      	bne.n	801e43e <_vfiprintf_r+0x176>
 801e424:	7863      	ldrb	r3, [r4, #1]
 801e426:	2b2a      	cmp	r3, #42	; 0x2a
 801e428:	d135      	bne.n	801e496 <_vfiprintf_r+0x1ce>
 801e42a:	9b03      	ldr	r3, [sp, #12]
 801e42c:	1d1a      	adds	r2, r3, #4
 801e42e:	681b      	ldr	r3, [r3, #0]
 801e430:	9203      	str	r2, [sp, #12]
 801e432:	2b00      	cmp	r3, #0
 801e434:	bfb8      	it	lt
 801e436:	f04f 33ff 	movlt.w	r3, #4294967295
 801e43a:	3402      	adds	r4, #2
 801e43c:	9305      	str	r3, [sp, #20]
 801e43e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e524 <_vfiprintf_r+0x25c>
 801e442:	7821      	ldrb	r1, [r4, #0]
 801e444:	2203      	movs	r2, #3
 801e446:	4650      	mov	r0, sl
 801e448:	f7e1 feca 	bl	80001e0 <memchr>
 801e44c:	b140      	cbz	r0, 801e460 <_vfiprintf_r+0x198>
 801e44e:	2340      	movs	r3, #64	; 0x40
 801e450:	eba0 000a 	sub.w	r0, r0, sl
 801e454:	fa03 f000 	lsl.w	r0, r3, r0
 801e458:	9b04      	ldr	r3, [sp, #16]
 801e45a:	4303      	orrs	r3, r0
 801e45c:	3401      	adds	r4, #1
 801e45e:	9304      	str	r3, [sp, #16]
 801e460:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e464:	482c      	ldr	r0, [pc, #176]	; (801e518 <_vfiprintf_r+0x250>)
 801e466:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e46a:	2206      	movs	r2, #6
 801e46c:	f7e1 feb8 	bl	80001e0 <memchr>
 801e470:	2800      	cmp	r0, #0
 801e472:	d03f      	beq.n	801e4f4 <_vfiprintf_r+0x22c>
 801e474:	4b29      	ldr	r3, [pc, #164]	; (801e51c <_vfiprintf_r+0x254>)
 801e476:	bb1b      	cbnz	r3, 801e4c0 <_vfiprintf_r+0x1f8>
 801e478:	9b03      	ldr	r3, [sp, #12]
 801e47a:	3307      	adds	r3, #7
 801e47c:	f023 0307 	bic.w	r3, r3, #7
 801e480:	3308      	adds	r3, #8
 801e482:	9303      	str	r3, [sp, #12]
 801e484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e486:	443b      	add	r3, r7
 801e488:	9309      	str	r3, [sp, #36]	; 0x24
 801e48a:	e767      	b.n	801e35c <_vfiprintf_r+0x94>
 801e48c:	fb0c 3202 	mla	r2, ip, r2, r3
 801e490:	460c      	mov	r4, r1
 801e492:	2001      	movs	r0, #1
 801e494:	e7a5      	b.n	801e3e2 <_vfiprintf_r+0x11a>
 801e496:	2300      	movs	r3, #0
 801e498:	3401      	adds	r4, #1
 801e49a:	9305      	str	r3, [sp, #20]
 801e49c:	4619      	mov	r1, r3
 801e49e:	f04f 0c0a 	mov.w	ip, #10
 801e4a2:	4620      	mov	r0, r4
 801e4a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e4a8:	3a30      	subs	r2, #48	; 0x30
 801e4aa:	2a09      	cmp	r2, #9
 801e4ac:	d903      	bls.n	801e4b6 <_vfiprintf_r+0x1ee>
 801e4ae:	2b00      	cmp	r3, #0
 801e4b0:	d0c5      	beq.n	801e43e <_vfiprintf_r+0x176>
 801e4b2:	9105      	str	r1, [sp, #20]
 801e4b4:	e7c3      	b.n	801e43e <_vfiprintf_r+0x176>
 801e4b6:	fb0c 2101 	mla	r1, ip, r1, r2
 801e4ba:	4604      	mov	r4, r0
 801e4bc:	2301      	movs	r3, #1
 801e4be:	e7f0      	b.n	801e4a2 <_vfiprintf_r+0x1da>
 801e4c0:	ab03      	add	r3, sp, #12
 801e4c2:	9300      	str	r3, [sp, #0]
 801e4c4:	462a      	mov	r2, r5
 801e4c6:	4b16      	ldr	r3, [pc, #88]	; (801e520 <_vfiprintf_r+0x258>)
 801e4c8:	a904      	add	r1, sp, #16
 801e4ca:	4630      	mov	r0, r6
 801e4cc:	f3af 8000 	nop.w
 801e4d0:	4607      	mov	r7, r0
 801e4d2:	1c78      	adds	r0, r7, #1
 801e4d4:	d1d6      	bne.n	801e484 <_vfiprintf_r+0x1bc>
 801e4d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e4d8:	07d9      	lsls	r1, r3, #31
 801e4da:	d405      	bmi.n	801e4e8 <_vfiprintf_r+0x220>
 801e4dc:	89ab      	ldrh	r3, [r5, #12]
 801e4de:	059a      	lsls	r2, r3, #22
 801e4e0:	d402      	bmi.n	801e4e8 <_vfiprintf_r+0x220>
 801e4e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e4e4:	f000 fc35 	bl	801ed52 <__retarget_lock_release_recursive>
 801e4e8:	89ab      	ldrh	r3, [r5, #12]
 801e4ea:	065b      	lsls	r3, r3, #25
 801e4ec:	f53f af12 	bmi.w	801e314 <_vfiprintf_r+0x4c>
 801e4f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e4f2:	e711      	b.n	801e318 <_vfiprintf_r+0x50>
 801e4f4:	ab03      	add	r3, sp, #12
 801e4f6:	9300      	str	r3, [sp, #0]
 801e4f8:	462a      	mov	r2, r5
 801e4fa:	4b09      	ldr	r3, [pc, #36]	; (801e520 <_vfiprintf_r+0x258>)
 801e4fc:	a904      	add	r1, sp, #16
 801e4fe:	4630      	mov	r0, r6
 801e500:	f000 f880 	bl	801e604 <_printf_i>
 801e504:	e7e4      	b.n	801e4d0 <_vfiprintf_r+0x208>
 801e506:	bf00      	nop
 801e508:	0802a2d4 	.word	0x0802a2d4
 801e50c:	0802a2f4 	.word	0x0802a2f4
 801e510:	0802a2b4 	.word	0x0802a2b4
 801e514:	0802a280 	.word	0x0802a280
 801e518:	0802a28a 	.word	0x0802a28a
 801e51c:	00000000 	.word	0x00000000
 801e520:	0801e2a3 	.word	0x0801e2a3
 801e524:	0802a286 	.word	0x0802a286

0801e528 <_printf_common>:
 801e528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e52c:	4616      	mov	r6, r2
 801e52e:	4699      	mov	r9, r3
 801e530:	688a      	ldr	r2, [r1, #8]
 801e532:	690b      	ldr	r3, [r1, #16]
 801e534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e538:	4293      	cmp	r3, r2
 801e53a:	bfb8      	it	lt
 801e53c:	4613      	movlt	r3, r2
 801e53e:	6033      	str	r3, [r6, #0]
 801e540:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e544:	4607      	mov	r7, r0
 801e546:	460c      	mov	r4, r1
 801e548:	b10a      	cbz	r2, 801e54e <_printf_common+0x26>
 801e54a:	3301      	adds	r3, #1
 801e54c:	6033      	str	r3, [r6, #0]
 801e54e:	6823      	ldr	r3, [r4, #0]
 801e550:	0699      	lsls	r1, r3, #26
 801e552:	bf42      	ittt	mi
 801e554:	6833      	ldrmi	r3, [r6, #0]
 801e556:	3302      	addmi	r3, #2
 801e558:	6033      	strmi	r3, [r6, #0]
 801e55a:	6825      	ldr	r5, [r4, #0]
 801e55c:	f015 0506 	ands.w	r5, r5, #6
 801e560:	d106      	bne.n	801e570 <_printf_common+0x48>
 801e562:	f104 0a19 	add.w	sl, r4, #25
 801e566:	68e3      	ldr	r3, [r4, #12]
 801e568:	6832      	ldr	r2, [r6, #0]
 801e56a:	1a9b      	subs	r3, r3, r2
 801e56c:	42ab      	cmp	r3, r5
 801e56e:	dc26      	bgt.n	801e5be <_printf_common+0x96>
 801e570:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e574:	1e13      	subs	r3, r2, #0
 801e576:	6822      	ldr	r2, [r4, #0]
 801e578:	bf18      	it	ne
 801e57a:	2301      	movne	r3, #1
 801e57c:	0692      	lsls	r2, r2, #26
 801e57e:	d42b      	bmi.n	801e5d8 <_printf_common+0xb0>
 801e580:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e584:	4649      	mov	r1, r9
 801e586:	4638      	mov	r0, r7
 801e588:	47c0      	blx	r8
 801e58a:	3001      	adds	r0, #1
 801e58c:	d01e      	beq.n	801e5cc <_printf_common+0xa4>
 801e58e:	6823      	ldr	r3, [r4, #0]
 801e590:	68e5      	ldr	r5, [r4, #12]
 801e592:	6832      	ldr	r2, [r6, #0]
 801e594:	f003 0306 	and.w	r3, r3, #6
 801e598:	2b04      	cmp	r3, #4
 801e59a:	bf08      	it	eq
 801e59c:	1aad      	subeq	r5, r5, r2
 801e59e:	68a3      	ldr	r3, [r4, #8]
 801e5a0:	6922      	ldr	r2, [r4, #16]
 801e5a2:	bf0c      	ite	eq
 801e5a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e5a8:	2500      	movne	r5, #0
 801e5aa:	4293      	cmp	r3, r2
 801e5ac:	bfc4      	itt	gt
 801e5ae:	1a9b      	subgt	r3, r3, r2
 801e5b0:	18ed      	addgt	r5, r5, r3
 801e5b2:	2600      	movs	r6, #0
 801e5b4:	341a      	adds	r4, #26
 801e5b6:	42b5      	cmp	r5, r6
 801e5b8:	d11a      	bne.n	801e5f0 <_printf_common+0xc8>
 801e5ba:	2000      	movs	r0, #0
 801e5bc:	e008      	b.n	801e5d0 <_printf_common+0xa8>
 801e5be:	2301      	movs	r3, #1
 801e5c0:	4652      	mov	r2, sl
 801e5c2:	4649      	mov	r1, r9
 801e5c4:	4638      	mov	r0, r7
 801e5c6:	47c0      	blx	r8
 801e5c8:	3001      	adds	r0, #1
 801e5ca:	d103      	bne.n	801e5d4 <_printf_common+0xac>
 801e5cc:	f04f 30ff 	mov.w	r0, #4294967295
 801e5d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e5d4:	3501      	adds	r5, #1
 801e5d6:	e7c6      	b.n	801e566 <_printf_common+0x3e>
 801e5d8:	18e1      	adds	r1, r4, r3
 801e5da:	1c5a      	adds	r2, r3, #1
 801e5dc:	2030      	movs	r0, #48	; 0x30
 801e5de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e5e2:	4422      	add	r2, r4
 801e5e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e5e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e5ec:	3302      	adds	r3, #2
 801e5ee:	e7c7      	b.n	801e580 <_printf_common+0x58>
 801e5f0:	2301      	movs	r3, #1
 801e5f2:	4622      	mov	r2, r4
 801e5f4:	4649      	mov	r1, r9
 801e5f6:	4638      	mov	r0, r7
 801e5f8:	47c0      	blx	r8
 801e5fa:	3001      	adds	r0, #1
 801e5fc:	d0e6      	beq.n	801e5cc <_printf_common+0xa4>
 801e5fe:	3601      	adds	r6, #1
 801e600:	e7d9      	b.n	801e5b6 <_printf_common+0x8e>
	...

0801e604 <_printf_i>:
 801e604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e608:	7e0f      	ldrb	r7, [r1, #24]
 801e60a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e60c:	2f78      	cmp	r7, #120	; 0x78
 801e60e:	4691      	mov	r9, r2
 801e610:	4680      	mov	r8, r0
 801e612:	460c      	mov	r4, r1
 801e614:	469a      	mov	sl, r3
 801e616:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e61a:	d807      	bhi.n	801e62c <_printf_i+0x28>
 801e61c:	2f62      	cmp	r7, #98	; 0x62
 801e61e:	d80a      	bhi.n	801e636 <_printf_i+0x32>
 801e620:	2f00      	cmp	r7, #0
 801e622:	f000 80d8 	beq.w	801e7d6 <_printf_i+0x1d2>
 801e626:	2f58      	cmp	r7, #88	; 0x58
 801e628:	f000 80a3 	beq.w	801e772 <_printf_i+0x16e>
 801e62c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e630:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e634:	e03a      	b.n	801e6ac <_printf_i+0xa8>
 801e636:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e63a:	2b15      	cmp	r3, #21
 801e63c:	d8f6      	bhi.n	801e62c <_printf_i+0x28>
 801e63e:	a101      	add	r1, pc, #4	; (adr r1, 801e644 <_printf_i+0x40>)
 801e640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e644:	0801e69d 	.word	0x0801e69d
 801e648:	0801e6b1 	.word	0x0801e6b1
 801e64c:	0801e62d 	.word	0x0801e62d
 801e650:	0801e62d 	.word	0x0801e62d
 801e654:	0801e62d 	.word	0x0801e62d
 801e658:	0801e62d 	.word	0x0801e62d
 801e65c:	0801e6b1 	.word	0x0801e6b1
 801e660:	0801e62d 	.word	0x0801e62d
 801e664:	0801e62d 	.word	0x0801e62d
 801e668:	0801e62d 	.word	0x0801e62d
 801e66c:	0801e62d 	.word	0x0801e62d
 801e670:	0801e7bd 	.word	0x0801e7bd
 801e674:	0801e6e1 	.word	0x0801e6e1
 801e678:	0801e79f 	.word	0x0801e79f
 801e67c:	0801e62d 	.word	0x0801e62d
 801e680:	0801e62d 	.word	0x0801e62d
 801e684:	0801e7df 	.word	0x0801e7df
 801e688:	0801e62d 	.word	0x0801e62d
 801e68c:	0801e6e1 	.word	0x0801e6e1
 801e690:	0801e62d 	.word	0x0801e62d
 801e694:	0801e62d 	.word	0x0801e62d
 801e698:	0801e7a7 	.word	0x0801e7a7
 801e69c:	682b      	ldr	r3, [r5, #0]
 801e69e:	1d1a      	adds	r2, r3, #4
 801e6a0:	681b      	ldr	r3, [r3, #0]
 801e6a2:	602a      	str	r2, [r5, #0]
 801e6a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e6a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e6ac:	2301      	movs	r3, #1
 801e6ae:	e0a3      	b.n	801e7f8 <_printf_i+0x1f4>
 801e6b0:	6820      	ldr	r0, [r4, #0]
 801e6b2:	6829      	ldr	r1, [r5, #0]
 801e6b4:	0606      	lsls	r6, r0, #24
 801e6b6:	f101 0304 	add.w	r3, r1, #4
 801e6ba:	d50a      	bpl.n	801e6d2 <_printf_i+0xce>
 801e6bc:	680e      	ldr	r6, [r1, #0]
 801e6be:	602b      	str	r3, [r5, #0]
 801e6c0:	2e00      	cmp	r6, #0
 801e6c2:	da03      	bge.n	801e6cc <_printf_i+0xc8>
 801e6c4:	232d      	movs	r3, #45	; 0x2d
 801e6c6:	4276      	negs	r6, r6
 801e6c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e6cc:	485e      	ldr	r0, [pc, #376]	; (801e848 <_printf_i+0x244>)
 801e6ce:	230a      	movs	r3, #10
 801e6d0:	e019      	b.n	801e706 <_printf_i+0x102>
 801e6d2:	680e      	ldr	r6, [r1, #0]
 801e6d4:	602b      	str	r3, [r5, #0]
 801e6d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e6da:	bf18      	it	ne
 801e6dc:	b236      	sxthne	r6, r6
 801e6de:	e7ef      	b.n	801e6c0 <_printf_i+0xbc>
 801e6e0:	682b      	ldr	r3, [r5, #0]
 801e6e2:	6820      	ldr	r0, [r4, #0]
 801e6e4:	1d19      	adds	r1, r3, #4
 801e6e6:	6029      	str	r1, [r5, #0]
 801e6e8:	0601      	lsls	r1, r0, #24
 801e6ea:	d501      	bpl.n	801e6f0 <_printf_i+0xec>
 801e6ec:	681e      	ldr	r6, [r3, #0]
 801e6ee:	e002      	b.n	801e6f6 <_printf_i+0xf2>
 801e6f0:	0646      	lsls	r6, r0, #25
 801e6f2:	d5fb      	bpl.n	801e6ec <_printf_i+0xe8>
 801e6f4:	881e      	ldrh	r6, [r3, #0]
 801e6f6:	4854      	ldr	r0, [pc, #336]	; (801e848 <_printf_i+0x244>)
 801e6f8:	2f6f      	cmp	r7, #111	; 0x6f
 801e6fa:	bf0c      	ite	eq
 801e6fc:	2308      	moveq	r3, #8
 801e6fe:	230a      	movne	r3, #10
 801e700:	2100      	movs	r1, #0
 801e702:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e706:	6865      	ldr	r5, [r4, #4]
 801e708:	60a5      	str	r5, [r4, #8]
 801e70a:	2d00      	cmp	r5, #0
 801e70c:	bfa2      	ittt	ge
 801e70e:	6821      	ldrge	r1, [r4, #0]
 801e710:	f021 0104 	bicge.w	r1, r1, #4
 801e714:	6021      	strge	r1, [r4, #0]
 801e716:	b90e      	cbnz	r6, 801e71c <_printf_i+0x118>
 801e718:	2d00      	cmp	r5, #0
 801e71a:	d04d      	beq.n	801e7b8 <_printf_i+0x1b4>
 801e71c:	4615      	mov	r5, r2
 801e71e:	fbb6 f1f3 	udiv	r1, r6, r3
 801e722:	fb03 6711 	mls	r7, r3, r1, r6
 801e726:	5dc7      	ldrb	r7, [r0, r7]
 801e728:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e72c:	4637      	mov	r7, r6
 801e72e:	42bb      	cmp	r3, r7
 801e730:	460e      	mov	r6, r1
 801e732:	d9f4      	bls.n	801e71e <_printf_i+0x11a>
 801e734:	2b08      	cmp	r3, #8
 801e736:	d10b      	bne.n	801e750 <_printf_i+0x14c>
 801e738:	6823      	ldr	r3, [r4, #0]
 801e73a:	07de      	lsls	r6, r3, #31
 801e73c:	d508      	bpl.n	801e750 <_printf_i+0x14c>
 801e73e:	6923      	ldr	r3, [r4, #16]
 801e740:	6861      	ldr	r1, [r4, #4]
 801e742:	4299      	cmp	r1, r3
 801e744:	bfde      	ittt	le
 801e746:	2330      	movle	r3, #48	; 0x30
 801e748:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e74c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e750:	1b52      	subs	r2, r2, r5
 801e752:	6122      	str	r2, [r4, #16]
 801e754:	f8cd a000 	str.w	sl, [sp]
 801e758:	464b      	mov	r3, r9
 801e75a:	aa03      	add	r2, sp, #12
 801e75c:	4621      	mov	r1, r4
 801e75e:	4640      	mov	r0, r8
 801e760:	f7ff fee2 	bl	801e528 <_printf_common>
 801e764:	3001      	adds	r0, #1
 801e766:	d14c      	bne.n	801e802 <_printf_i+0x1fe>
 801e768:	f04f 30ff 	mov.w	r0, #4294967295
 801e76c:	b004      	add	sp, #16
 801e76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e772:	4835      	ldr	r0, [pc, #212]	; (801e848 <_printf_i+0x244>)
 801e774:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e778:	6829      	ldr	r1, [r5, #0]
 801e77a:	6823      	ldr	r3, [r4, #0]
 801e77c:	f851 6b04 	ldr.w	r6, [r1], #4
 801e780:	6029      	str	r1, [r5, #0]
 801e782:	061d      	lsls	r5, r3, #24
 801e784:	d514      	bpl.n	801e7b0 <_printf_i+0x1ac>
 801e786:	07df      	lsls	r7, r3, #31
 801e788:	bf44      	itt	mi
 801e78a:	f043 0320 	orrmi.w	r3, r3, #32
 801e78e:	6023      	strmi	r3, [r4, #0]
 801e790:	b91e      	cbnz	r6, 801e79a <_printf_i+0x196>
 801e792:	6823      	ldr	r3, [r4, #0]
 801e794:	f023 0320 	bic.w	r3, r3, #32
 801e798:	6023      	str	r3, [r4, #0]
 801e79a:	2310      	movs	r3, #16
 801e79c:	e7b0      	b.n	801e700 <_printf_i+0xfc>
 801e79e:	6823      	ldr	r3, [r4, #0]
 801e7a0:	f043 0320 	orr.w	r3, r3, #32
 801e7a4:	6023      	str	r3, [r4, #0]
 801e7a6:	2378      	movs	r3, #120	; 0x78
 801e7a8:	4828      	ldr	r0, [pc, #160]	; (801e84c <_printf_i+0x248>)
 801e7aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e7ae:	e7e3      	b.n	801e778 <_printf_i+0x174>
 801e7b0:	0659      	lsls	r1, r3, #25
 801e7b2:	bf48      	it	mi
 801e7b4:	b2b6      	uxthmi	r6, r6
 801e7b6:	e7e6      	b.n	801e786 <_printf_i+0x182>
 801e7b8:	4615      	mov	r5, r2
 801e7ba:	e7bb      	b.n	801e734 <_printf_i+0x130>
 801e7bc:	682b      	ldr	r3, [r5, #0]
 801e7be:	6826      	ldr	r6, [r4, #0]
 801e7c0:	6961      	ldr	r1, [r4, #20]
 801e7c2:	1d18      	adds	r0, r3, #4
 801e7c4:	6028      	str	r0, [r5, #0]
 801e7c6:	0635      	lsls	r5, r6, #24
 801e7c8:	681b      	ldr	r3, [r3, #0]
 801e7ca:	d501      	bpl.n	801e7d0 <_printf_i+0x1cc>
 801e7cc:	6019      	str	r1, [r3, #0]
 801e7ce:	e002      	b.n	801e7d6 <_printf_i+0x1d2>
 801e7d0:	0670      	lsls	r0, r6, #25
 801e7d2:	d5fb      	bpl.n	801e7cc <_printf_i+0x1c8>
 801e7d4:	8019      	strh	r1, [r3, #0]
 801e7d6:	2300      	movs	r3, #0
 801e7d8:	6123      	str	r3, [r4, #16]
 801e7da:	4615      	mov	r5, r2
 801e7dc:	e7ba      	b.n	801e754 <_printf_i+0x150>
 801e7de:	682b      	ldr	r3, [r5, #0]
 801e7e0:	1d1a      	adds	r2, r3, #4
 801e7e2:	602a      	str	r2, [r5, #0]
 801e7e4:	681d      	ldr	r5, [r3, #0]
 801e7e6:	6862      	ldr	r2, [r4, #4]
 801e7e8:	2100      	movs	r1, #0
 801e7ea:	4628      	mov	r0, r5
 801e7ec:	f7e1 fcf8 	bl	80001e0 <memchr>
 801e7f0:	b108      	cbz	r0, 801e7f6 <_printf_i+0x1f2>
 801e7f2:	1b40      	subs	r0, r0, r5
 801e7f4:	6060      	str	r0, [r4, #4]
 801e7f6:	6863      	ldr	r3, [r4, #4]
 801e7f8:	6123      	str	r3, [r4, #16]
 801e7fa:	2300      	movs	r3, #0
 801e7fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e800:	e7a8      	b.n	801e754 <_printf_i+0x150>
 801e802:	6923      	ldr	r3, [r4, #16]
 801e804:	462a      	mov	r2, r5
 801e806:	4649      	mov	r1, r9
 801e808:	4640      	mov	r0, r8
 801e80a:	47d0      	blx	sl
 801e80c:	3001      	adds	r0, #1
 801e80e:	d0ab      	beq.n	801e768 <_printf_i+0x164>
 801e810:	6823      	ldr	r3, [r4, #0]
 801e812:	079b      	lsls	r3, r3, #30
 801e814:	d413      	bmi.n	801e83e <_printf_i+0x23a>
 801e816:	68e0      	ldr	r0, [r4, #12]
 801e818:	9b03      	ldr	r3, [sp, #12]
 801e81a:	4298      	cmp	r0, r3
 801e81c:	bfb8      	it	lt
 801e81e:	4618      	movlt	r0, r3
 801e820:	e7a4      	b.n	801e76c <_printf_i+0x168>
 801e822:	2301      	movs	r3, #1
 801e824:	4632      	mov	r2, r6
 801e826:	4649      	mov	r1, r9
 801e828:	4640      	mov	r0, r8
 801e82a:	47d0      	blx	sl
 801e82c:	3001      	adds	r0, #1
 801e82e:	d09b      	beq.n	801e768 <_printf_i+0x164>
 801e830:	3501      	adds	r5, #1
 801e832:	68e3      	ldr	r3, [r4, #12]
 801e834:	9903      	ldr	r1, [sp, #12]
 801e836:	1a5b      	subs	r3, r3, r1
 801e838:	42ab      	cmp	r3, r5
 801e83a:	dcf2      	bgt.n	801e822 <_printf_i+0x21e>
 801e83c:	e7eb      	b.n	801e816 <_printf_i+0x212>
 801e83e:	2500      	movs	r5, #0
 801e840:	f104 0619 	add.w	r6, r4, #25
 801e844:	e7f5      	b.n	801e832 <_printf_i+0x22e>
 801e846:	bf00      	nop
 801e848:	0802a291 	.word	0x0802a291
 801e84c:	0802a2a2 	.word	0x0802a2a2

0801e850 <__swbuf_r>:
 801e850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e852:	460e      	mov	r6, r1
 801e854:	4614      	mov	r4, r2
 801e856:	4605      	mov	r5, r0
 801e858:	b118      	cbz	r0, 801e862 <__swbuf_r+0x12>
 801e85a:	6983      	ldr	r3, [r0, #24]
 801e85c:	b90b      	cbnz	r3, 801e862 <__swbuf_r+0x12>
 801e85e:	f000 f9d9 	bl	801ec14 <__sinit>
 801e862:	4b21      	ldr	r3, [pc, #132]	; (801e8e8 <__swbuf_r+0x98>)
 801e864:	429c      	cmp	r4, r3
 801e866:	d12b      	bne.n	801e8c0 <__swbuf_r+0x70>
 801e868:	686c      	ldr	r4, [r5, #4]
 801e86a:	69a3      	ldr	r3, [r4, #24]
 801e86c:	60a3      	str	r3, [r4, #8]
 801e86e:	89a3      	ldrh	r3, [r4, #12]
 801e870:	071a      	lsls	r2, r3, #28
 801e872:	d52f      	bpl.n	801e8d4 <__swbuf_r+0x84>
 801e874:	6923      	ldr	r3, [r4, #16]
 801e876:	b36b      	cbz	r3, 801e8d4 <__swbuf_r+0x84>
 801e878:	6923      	ldr	r3, [r4, #16]
 801e87a:	6820      	ldr	r0, [r4, #0]
 801e87c:	1ac0      	subs	r0, r0, r3
 801e87e:	6963      	ldr	r3, [r4, #20]
 801e880:	b2f6      	uxtb	r6, r6
 801e882:	4283      	cmp	r3, r0
 801e884:	4637      	mov	r7, r6
 801e886:	dc04      	bgt.n	801e892 <__swbuf_r+0x42>
 801e888:	4621      	mov	r1, r4
 801e88a:	4628      	mov	r0, r5
 801e88c:	f000 f92e 	bl	801eaec <_fflush_r>
 801e890:	bb30      	cbnz	r0, 801e8e0 <__swbuf_r+0x90>
 801e892:	68a3      	ldr	r3, [r4, #8]
 801e894:	3b01      	subs	r3, #1
 801e896:	60a3      	str	r3, [r4, #8]
 801e898:	6823      	ldr	r3, [r4, #0]
 801e89a:	1c5a      	adds	r2, r3, #1
 801e89c:	6022      	str	r2, [r4, #0]
 801e89e:	701e      	strb	r6, [r3, #0]
 801e8a0:	6963      	ldr	r3, [r4, #20]
 801e8a2:	3001      	adds	r0, #1
 801e8a4:	4283      	cmp	r3, r0
 801e8a6:	d004      	beq.n	801e8b2 <__swbuf_r+0x62>
 801e8a8:	89a3      	ldrh	r3, [r4, #12]
 801e8aa:	07db      	lsls	r3, r3, #31
 801e8ac:	d506      	bpl.n	801e8bc <__swbuf_r+0x6c>
 801e8ae:	2e0a      	cmp	r6, #10
 801e8b0:	d104      	bne.n	801e8bc <__swbuf_r+0x6c>
 801e8b2:	4621      	mov	r1, r4
 801e8b4:	4628      	mov	r0, r5
 801e8b6:	f000 f919 	bl	801eaec <_fflush_r>
 801e8ba:	b988      	cbnz	r0, 801e8e0 <__swbuf_r+0x90>
 801e8bc:	4638      	mov	r0, r7
 801e8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e8c0:	4b0a      	ldr	r3, [pc, #40]	; (801e8ec <__swbuf_r+0x9c>)
 801e8c2:	429c      	cmp	r4, r3
 801e8c4:	d101      	bne.n	801e8ca <__swbuf_r+0x7a>
 801e8c6:	68ac      	ldr	r4, [r5, #8]
 801e8c8:	e7cf      	b.n	801e86a <__swbuf_r+0x1a>
 801e8ca:	4b09      	ldr	r3, [pc, #36]	; (801e8f0 <__swbuf_r+0xa0>)
 801e8cc:	429c      	cmp	r4, r3
 801e8ce:	bf08      	it	eq
 801e8d0:	68ec      	ldreq	r4, [r5, #12]
 801e8d2:	e7ca      	b.n	801e86a <__swbuf_r+0x1a>
 801e8d4:	4621      	mov	r1, r4
 801e8d6:	4628      	mov	r0, r5
 801e8d8:	f000 f80c 	bl	801e8f4 <__swsetup_r>
 801e8dc:	2800      	cmp	r0, #0
 801e8de:	d0cb      	beq.n	801e878 <__swbuf_r+0x28>
 801e8e0:	f04f 37ff 	mov.w	r7, #4294967295
 801e8e4:	e7ea      	b.n	801e8bc <__swbuf_r+0x6c>
 801e8e6:	bf00      	nop
 801e8e8:	0802a2d4 	.word	0x0802a2d4
 801e8ec:	0802a2f4 	.word	0x0802a2f4
 801e8f0:	0802a2b4 	.word	0x0802a2b4

0801e8f4 <__swsetup_r>:
 801e8f4:	4b32      	ldr	r3, [pc, #200]	; (801e9c0 <__swsetup_r+0xcc>)
 801e8f6:	b570      	push	{r4, r5, r6, lr}
 801e8f8:	681d      	ldr	r5, [r3, #0]
 801e8fa:	4606      	mov	r6, r0
 801e8fc:	460c      	mov	r4, r1
 801e8fe:	b125      	cbz	r5, 801e90a <__swsetup_r+0x16>
 801e900:	69ab      	ldr	r3, [r5, #24]
 801e902:	b913      	cbnz	r3, 801e90a <__swsetup_r+0x16>
 801e904:	4628      	mov	r0, r5
 801e906:	f000 f985 	bl	801ec14 <__sinit>
 801e90a:	4b2e      	ldr	r3, [pc, #184]	; (801e9c4 <__swsetup_r+0xd0>)
 801e90c:	429c      	cmp	r4, r3
 801e90e:	d10f      	bne.n	801e930 <__swsetup_r+0x3c>
 801e910:	686c      	ldr	r4, [r5, #4]
 801e912:	89a3      	ldrh	r3, [r4, #12]
 801e914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e918:	0719      	lsls	r1, r3, #28
 801e91a:	d42c      	bmi.n	801e976 <__swsetup_r+0x82>
 801e91c:	06dd      	lsls	r5, r3, #27
 801e91e:	d411      	bmi.n	801e944 <__swsetup_r+0x50>
 801e920:	2309      	movs	r3, #9
 801e922:	6033      	str	r3, [r6, #0]
 801e924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e928:	81a3      	strh	r3, [r4, #12]
 801e92a:	f04f 30ff 	mov.w	r0, #4294967295
 801e92e:	e03e      	b.n	801e9ae <__swsetup_r+0xba>
 801e930:	4b25      	ldr	r3, [pc, #148]	; (801e9c8 <__swsetup_r+0xd4>)
 801e932:	429c      	cmp	r4, r3
 801e934:	d101      	bne.n	801e93a <__swsetup_r+0x46>
 801e936:	68ac      	ldr	r4, [r5, #8]
 801e938:	e7eb      	b.n	801e912 <__swsetup_r+0x1e>
 801e93a:	4b24      	ldr	r3, [pc, #144]	; (801e9cc <__swsetup_r+0xd8>)
 801e93c:	429c      	cmp	r4, r3
 801e93e:	bf08      	it	eq
 801e940:	68ec      	ldreq	r4, [r5, #12]
 801e942:	e7e6      	b.n	801e912 <__swsetup_r+0x1e>
 801e944:	0758      	lsls	r0, r3, #29
 801e946:	d512      	bpl.n	801e96e <__swsetup_r+0x7a>
 801e948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e94a:	b141      	cbz	r1, 801e95e <__swsetup_r+0x6a>
 801e94c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e950:	4299      	cmp	r1, r3
 801e952:	d002      	beq.n	801e95a <__swsetup_r+0x66>
 801e954:	4630      	mov	r0, r6
 801e956:	f000 fa63 	bl	801ee20 <_free_r>
 801e95a:	2300      	movs	r3, #0
 801e95c:	6363      	str	r3, [r4, #52]	; 0x34
 801e95e:	89a3      	ldrh	r3, [r4, #12]
 801e960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e964:	81a3      	strh	r3, [r4, #12]
 801e966:	2300      	movs	r3, #0
 801e968:	6063      	str	r3, [r4, #4]
 801e96a:	6923      	ldr	r3, [r4, #16]
 801e96c:	6023      	str	r3, [r4, #0]
 801e96e:	89a3      	ldrh	r3, [r4, #12]
 801e970:	f043 0308 	orr.w	r3, r3, #8
 801e974:	81a3      	strh	r3, [r4, #12]
 801e976:	6923      	ldr	r3, [r4, #16]
 801e978:	b94b      	cbnz	r3, 801e98e <__swsetup_r+0x9a>
 801e97a:	89a3      	ldrh	r3, [r4, #12]
 801e97c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e984:	d003      	beq.n	801e98e <__swsetup_r+0x9a>
 801e986:	4621      	mov	r1, r4
 801e988:	4630      	mov	r0, r6
 801e98a:	f000 fa09 	bl	801eda0 <__smakebuf_r>
 801e98e:	89a0      	ldrh	r0, [r4, #12]
 801e990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e994:	f010 0301 	ands.w	r3, r0, #1
 801e998:	d00a      	beq.n	801e9b0 <__swsetup_r+0xbc>
 801e99a:	2300      	movs	r3, #0
 801e99c:	60a3      	str	r3, [r4, #8]
 801e99e:	6963      	ldr	r3, [r4, #20]
 801e9a0:	425b      	negs	r3, r3
 801e9a2:	61a3      	str	r3, [r4, #24]
 801e9a4:	6923      	ldr	r3, [r4, #16]
 801e9a6:	b943      	cbnz	r3, 801e9ba <__swsetup_r+0xc6>
 801e9a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e9ac:	d1ba      	bne.n	801e924 <__swsetup_r+0x30>
 801e9ae:	bd70      	pop	{r4, r5, r6, pc}
 801e9b0:	0781      	lsls	r1, r0, #30
 801e9b2:	bf58      	it	pl
 801e9b4:	6963      	ldrpl	r3, [r4, #20]
 801e9b6:	60a3      	str	r3, [r4, #8]
 801e9b8:	e7f4      	b.n	801e9a4 <__swsetup_r+0xb0>
 801e9ba:	2000      	movs	r0, #0
 801e9bc:	e7f7      	b.n	801e9ae <__swsetup_r+0xba>
 801e9be:	bf00      	nop
 801e9c0:	2000023c 	.word	0x2000023c
 801e9c4:	0802a2d4 	.word	0x0802a2d4
 801e9c8:	0802a2f4 	.word	0x0802a2f4
 801e9cc:	0802a2b4 	.word	0x0802a2b4

0801e9d0 <abort>:
 801e9d0:	b508      	push	{r3, lr}
 801e9d2:	2006      	movs	r0, #6
 801e9d4:	f000 fb3c 	bl	801f050 <raise>
 801e9d8:	2001      	movs	r0, #1
 801e9da:	f7f7 fea1 	bl	8016720 <_exit>
	...

0801e9e0 <__sflush_r>:
 801e9e0:	898a      	ldrh	r2, [r1, #12]
 801e9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e9e6:	4605      	mov	r5, r0
 801e9e8:	0710      	lsls	r0, r2, #28
 801e9ea:	460c      	mov	r4, r1
 801e9ec:	d458      	bmi.n	801eaa0 <__sflush_r+0xc0>
 801e9ee:	684b      	ldr	r3, [r1, #4]
 801e9f0:	2b00      	cmp	r3, #0
 801e9f2:	dc05      	bgt.n	801ea00 <__sflush_r+0x20>
 801e9f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e9f6:	2b00      	cmp	r3, #0
 801e9f8:	dc02      	bgt.n	801ea00 <__sflush_r+0x20>
 801e9fa:	2000      	movs	r0, #0
 801e9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ea02:	2e00      	cmp	r6, #0
 801ea04:	d0f9      	beq.n	801e9fa <__sflush_r+0x1a>
 801ea06:	2300      	movs	r3, #0
 801ea08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ea0c:	682f      	ldr	r7, [r5, #0]
 801ea0e:	602b      	str	r3, [r5, #0]
 801ea10:	d032      	beq.n	801ea78 <__sflush_r+0x98>
 801ea12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ea14:	89a3      	ldrh	r3, [r4, #12]
 801ea16:	075a      	lsls	r2, r3, #29
 801ea18:	d505      	bpl.n	801ea26 <__sflush_r+0x46>
 801ea1a:	6863      	ldr	r3, [r4, #4]
 801ea1c:	1ac0      	subs	r0, r0, r3
 801ea1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ea20:	b10b      	cbz	r3, 801ea26 <__sflush_r+0x46>
 801ea22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ea24:	1ac0      	subs	r0, r0, r3
 801ea26:	2300      	movs	r3, #0
 801ea28:	4602      	mov	r2, r0
 801ea2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ea2c:	6a21      	ldr	r1, [r4, #32]
 801ea2e:	4628      	mov	r0, r5
 801ea30:	47b0      	blx	r6
 801ea32:	1c43      	adds	r3, r0, #1
 801ea34:	89a3      	ldrh	r3, [r4, #12]
 801ea36:	d106      	bne.n	801ea46 <__sflush_r+0x66>
 801ea38:	6829      	ldr	r1, [r5, #0]
 801ea3a:	291d      	cmp	r1, #29
 801ea3c:	d82c      	bhi.n	801ea98 <__sflush_r+0xb8>
 801ea3e:	4a2a      	ldr	r2, [pc, #168]	; (801eae8 <__sflush_r+0x108>)
 801ea40:	40ca      	lsrs	r2, r1
 801ea42:	07d6      	lsls	r6, r2, #31
 801ea44:	d528      	bpl.n	801ea98 <__sflush_r+0xb8>
 801ea46:	2200      	movs	r2, #0
 801ea48:	6062      	str	r2, [r4, #4]
 801ea4a:	04d9      	lsls	r1, r3, #19
 801ea4c:	6922      	ldr	r2, [r4, #16]
 801ea4e:	6022      	str	r2, [r4, #0]
 801ea50:	d504      	bpl.n	801ea5c <__sflush_r+0x7c>
 801ea52:	1c42      	adds	r2, r0, #1
 801ea54:	d101      	bne.n	801ea5a <__sflush_r+0x7a>
 801ea56:	682b      	ldr	r3, [r5, #0]
 801ea58:	b903      	cbnz	r3, 801ea5c <__sflush_r+0x7c>
 801ea5a:	6560      	str	r0, [r4, #84]	; 0x54
 801ea5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ea5e:	602f      	str	r7, [r5, #0]
 801ea60:	2900      	cmp	r1, #0
 801ea62:	d0ca      	beq.n	801e9fa <__sflush_r+0x1a>
 801ea64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ea68:	4299      	cmp	r1, r3
 801ea6a:	d002      	beq.n	801ea72 <__sflush_r+0x92>
 801ea6c:	4628      	mov	r0, r5
 801ea6e:	f000 f9d7 	bl	801ee20 <_free_r>
 801ea72:	2000      	movs	r0, #0
 801ea74:	6360      	str	r0, [r4, #52]	; 0x34
 801ea76:	e7c1      	b.n	801e9fc <__sflush_r+0x1c>
 801ea78:	6a21      	ldr	r1, [r4, #32]
 801ea7a:	2301      	movs	r3, #1
 801ea7c:	4628      	mov	r0, r5
 801ea7e:	47b0      	blx	r6
 801ea80:	1c41      	adds	r1, r0, #1
 801ea82:	d1c7      	bne.n	801ea14 <__sflush_r+0x34>
 801ea84:	682b      	ldr	r3, [r5, #0]
 801ea86:	2b00      	cmp	r3, #0
 801ea88:	d0c4      	beq.n	801ea14 <__sflush_r+0x34>
 801ea8a:	2b1d      	cmp	r3, #29
 801ea8c:	d001      	beq.n	801ea92 <__sflush_r+0xb2>
 801ea8e:	2b16      	cmp	r3, #22
 801ea90:	d101      	bne.n	801ea96 <__sflush_r+0xb6>
 801ea92:	602f      	str	r7, [r5, #0]
 801ea94:	e7b1      	b.n	801e9fa <__sflush_r+0x1a>
 801ea96:	89a3      	ldrh	r3, [r4, #12]
 801ea98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ea9c:	81a3      	strh	r3, [r4, #12]
 801ea9e:	e7ad      	b.n	801e9fc <__sflush_r+0x1c>
 801eaa0:	690f      	ldr	r7, [r1, #16]
 801eaa2:	2f00      	cmp	r7, #0
 801eaa4:	d0a9      	beq.n	801e9fa <__sflush_r+0x1a>
 801eaa6:	0793      	lsls	r3, r2, #30
 801eaa8:	680e      	ldr	r6, [r1, #0]
 801eaaa:	bf08      	it	eq
 801eaac:	694b      	ldreq	r3, [r1, #20]
 801eaae:	600f      	str	r7, [r1, #0]
 801eab0:	bf18      	it	ne
 801eab2:	2300      	movne	r3, #0
 801eab4:	eba6 0807 	sub.w	r8, r6, r7
 801eab8:	608b      	str	r3, [r1, #8]
 801eaba:	f1b8 0f00 	cmp.w	r8, #0
 801eabe:	dd9c      	ble.n	801e9fa <__sflush_r+0x1a>
 801eac0:	6a21      	ldr	r1, [r4, #32]
 801eac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801eac4:	4643      	mov	r3, r8
 801eac6:	463a      	mov	r2, r7
 801eac8:	4628      	mov	r0, r5
 801eaca:	47b0      	blx	r6
 801eacc:	2800      	cmp	r0, #0
 801eace:	dc06      	bgt.n	801eade <__sflush_r+0xfe>
 801ead0:	89a3      	ldrh	r3, [r4, #12]
 801ead2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ead6:	81a3      	strh	r3, [r4, #12]
 801ead8:	f04f 30ff 	mov.w	r0, #4294967295
 801eadc:	e78e      	b.n	801e9fc <__sflush_r+0x1c>
 801eade:	4407      	add	r7, r0
 801eae0:	eba8 0800 	sub.w	r8, r8, r0
 801eae4:	e7e9      	b.n	801eaba <__sflush_r+0xda>
 801eae6:	bf00      	nop
 801eae8:	20400001 	.word	0x20400001

0801eaec <_fflush_r>:
 801eaec:	b538      	push	{r3, r4, r5, lr}
 801eaee:	690b      	ldr	r3, [r1, #16]
 801eaf0:	4605      	mov	r5, r0
 801eaf2:	460c      	mov	r4, r1
 801eaf4:	b913      	cbnz	r3, 801eafc <_fflush_r+0x10>
 801eaf6:	2500      	movs	r5, #0
 801eaf8:	4628      	mov	r0, r5
 801eafa:	bd38      	pop	{r3, r4, r5, pc}
 801eafc:	b118      	cbz	r0, 801eb06 <_fflush_r+0x1a>
 801eafe:	6983      	ldr	r3, [r0, #24]
 801eb00:	b90b      	cbnz	r3, 801eb06 <_fflush_r+0x1a>
 801eb02:	f000 f887 	bl	801ec14 <__sinit>
 801eb06:	4b14      	ldr	r3, [pc, #80]	; (801eb58 <_fflush_r+0x6c>)
 801eb08:	429c      	cmp	r4, r3
 801eb0a:	d11b      	bne.n	801eb44 <_fflush_r+0x58>
 801eb0c:	686c      	ldr	r4, [r5, #4]
 801eb0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eb12:	2b00      	cmp	r3, #0
 801eb14:	d0ef      	beq.n	801eaf6 <_fflush_r+0xa>
 801eb16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801eb18:	07d0      	lsls	r0, r2, #31
 801eb1a:	d404      	bmi.n	801eb26 <_fflush_r+0x3a>
 801eb1c:	0599      	lsls	r1, r3, #22
 801eb1e:	d402      	bmi.n	801eb26 <_fflush_r+0x3a>
 801eb20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eb22:	f000 f915 	bl	801ed50 <__retarget_lock_acquire_recursive>
 801eb26:	4628      	mov	r0, r5
 801eb28:	4621      	mov	r1, r4
 801eb2a:	f7ff ff59 	bl	801e9e0 <__sflush_r>
 801eb2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801eb30:	07da      	lsls	r2, r3, #31
 801eb32:	4605      	mov	r5, r0
 801eb34:	d4e0      	bmi.n	801eaf8 <_fflush_r+0xc>
 801eb36:	89a3      	ldrh	r3, [r4, #12]
 801eb38:	059b      	lsls	r3, r3, #22
 801eb3a:	d4dd      	bmi.n	801eaf8 <_fflush_r+0xc>
 801eb3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eb3e:	f000 f908 	bl	801ed52 <__retarget_lock_release_recursive>
 801eb42:	e7d9      	b.n	801eaf8 <_fflush_r+0xc>
 801eb44:	4b05      	ldr	r3, [pc, #20]	; (801eb5c <_fflush_r+0x70>)
 801eb46:	429c      	cmp	r4, r3
 801eb48:	d101      	bne.n	801eb4e <_fflush_r+0x62>
 801eb4a:	68ac      	ldr	r4, [r5, #8]
 801eb4c:	e7df      	b.n	801eb0e <_fflush_r+0x22>
 801eb4e:	4b04      	ldr	r3, [pc, #16]	; (801eb60 <_fflush_r+0x74>)
 801eb50:	429c      	cmp	r4, r3
 801eb52:	bf08      	it	eq
 801eb54:	68ec      	ldreq	r4, [r5, #12]
 801eb56:	e7da      	b.n	801eb0e <_fflush_r+0x22>
 801eb58:	0802a2d4 	.word	0x0802a2d4
 801eb5c:	0802a2f4 	.word	0x0802a2f4
 801eb60:	0802a2b4 	.word	0x0802a2b4

0801eb64 <std>:
 801eb64:	2300      	movs	r3, #0
 801eb66:	b510      	push	{r4, lr}
 801eb68:	4604      	mov	r4, r0
 801eb6a:	e9c0 3300 	strd	r3, r3, [r0]
 801eb6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801eb72:	6083      	str	r3, [r0, #8]
 801eb74:	8181      	strh	r1, [r0, #12]
 801eb76:	6643      	str	r3, [r0, #100]	; 0x64
 801eb78:	81c2      	strh	r2, [r0, #14]
 801eb7a:	6183      	str	r3, [r0, #24]
 801eb7c:	4619      	mov	r1, r3
 801eb7e:	2208      	movs	r2, #8
 801eb80:	305c      	adds	r0, #92	; 0x5c
 801eb82:	f7ff fb6f 	bl	801e264 <memset>
 801eb86:	4b05      	ldr	r3, [pc, #20]	; (801eb9c <std+0x38>)
 801eb88:	6263      	str	r3, [r4, #36]	; 0x24
 801eb8a:	4b05      	ldr	r3, [pc, #20]	; (801eba0 <std+0x3c>)
 801eb8c:	62a3      	str	r3, [r4, #40]	; 0x28
 801eb8e:	4b05      	ldr	r3, [pc, #20]	; (801eba4 <std+0x40>)
 801eb90:	62e3      	str	r3, [r4, #44]	; 0x2c
 801eb92:	4b05      	ldr	r3, [pc, #20]	; (801eba8 <std+0x44>)
 801eb94:	6224      	str	r4, [r4, #32]
 801eb96:	6323      	str	r3, [r4, #48]	; 0x30
 801eb98:	bd10      	pop	{r4, pc}
 801eb9a:	bf00      	nop
 801eb9c:	0801f089 	.word	0x0801f089
 801eba0:	0801f0ab 	.word	0x0801f0ab
 801eba4:	0801f0e3 	.word	0x0801f0e3
 801eba8:	0801f107 	.word	0x0801f107

0801ebac <_cleanup_r>:
 801ebac:	4901      	ldr	r1, [pc, #4]	; (801ebb4 <_cleanup_r+0x8>)
 801ebae:	f000 b8af 	b.w	801ed10 <_fwalk_reent>
 801ebb2:	bf00      	nop
 801ebb4:	0801eaed 	.word	0x0801eaed

0801ebb8 <__sfmoreglue>:
 801ebb8:	b570      	push	{r4, r5, r6, lr}
 801ebba:	2268      	movs	r2, #104	; 0x68
 801ebbc:	1e4d      	subs	r5, r1, #1
 801ebbe:	4355      	muls	r5, r2
 801ebc0:	460e      	mov	r6, r1
 801ebc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ebc6:	f000 f997 	bl	801eef8 <_malloc_r>
 801ebca:	4604      	mov	r4, r0
 801ebcc:	b140      	cbz	r0, 801ebe0 <__sfmoreglue+0x28>
 801ebce:	2100      	movs	r1, #0
 801ebd0:	e9c0 1600 	strd	r1, r6, [r0]
 801ebd4:	300c      	adds	r0, #12
 801ebd6:	60a0      	str	r0, [r4, #8]
 801ebd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ebdc:	f7ff fb42 	bl	801e264 <memset>
 801ebe0:	4620      	mov	r0, r4
 801ebe2:	bd70      	pop	{r4, r5, r6, pc}

0801ebe4 <__sfp_lock_acquire>:
 801ebe4:	4801      	ldr	r0, [pc, #4]	; (801ebec <__sfp_lock_acquire+0x8>)
 801ebe6:	f000 b8b3 	b.w	801ed50 <__retarget_lock_acquire_recursive>
 801ebea:	bf00      	nop
 801ebec:	20000849 	.word	0x20000849

0801ebf0 <__sfp_lock_release>:
 801ebf0:	4801      	ldr	r0, [pc, #4]	; (801ebf8 <__sfp_lock_release+0x8>)
 801ebf2:	f000 b8ae 	b.w	801ed52 <__retarget_lock_release_recursive>
 801ebf6:	bf00      	nop
 801ebf8:	20000849 	.word	0x20000849

0801ebfc <__sinit_lock_acquire>:
 801ebfc:	4801      	ldr	r0, [pc, #4]	; (801ec04 <__sinit_lock_acquire+0x8>)
 801ebfe:	f000 b8a7 	b.w	801ed50 <__retarget_lock_acquire_recursive>
 801ec02:	bf00      	nop
 801ec04:	2000084a 	.word	0x2000084a

0801ec08 <__sinit_lock_release>:
 801ec08:	4801      	ldr	r0, [pc, #4]	; (801ec10 <__sinit_lock_release+0x8>)
 801ec0a:	f000 b8a2 	b.w	801ed52 <__retarget_lock_release_recursive>
 801ec0e:	bf00      	nop
 801ec10:	2000084a 	.word	0x2000084a

0801ec14 <__sinit>:
 801ec14:	b510      	push	{r4, lr}
 801ec16:	4604      	mov	r4, r0
 801ec18:	f7ff fff0 	bl	801ebfc <__sinit_lock_acquire>
 801ec1c:	69a3      	ldr	r3, [r4, #24]
 801ec1e:	b11b      	cbz	r3, 801ec28 <__sinit+0x14>
 801ec20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ec24:	f7ff bff0 	b.w	801ec08 <__sinit_lock_release>
 801ec28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ec2c:	6523      	str	r3, [r4, #80]	; 0x50
 801ec2e:	4b13      	ldr	r3, [pc, #76]	; (801ec7c <__sinit+0x68>)
 801ec30:	4a13      	ldr	r2, [pc, #76]	; (801ec80 <__sinit+0x6c>)
 801ec32:	681b      	ldr	r3, [r3, #0]
 801ec34:	62a2      	str	r2, [r4, #40]	; 0x28
 801ec36:	42a3      	cmp	r3, r4
 801ec38:	bf04      	itt	eq
 801ec3a:	2301      	moveq	r3, #1
 801ec3c:	61a3      	streq	r3, [r4, #24]
 801ec3e:	4620      	mov	r0, r4
 801ec40:	f000 f820 	bl	801ec84 <__sfp>
 801ec44:	6060      	str	r0, [r4, #4]
 801ec46:	4620      	mov	r0, r4
 801ec48:	f000 f81c 	bl	801ec84 <__sfp>
 801ec4c:	60a0      	str	r0, [r4, #8]
 801ec4e:	4620      	mov	r0, r4
 801ec50:	f000 f818 	bl	801ec84 <__sfp>
 801ec54:	2200      	movs	r2, #0
 801ec56:	60e0      	str	r0, [r4, #12]
 801ec58:	2104      	movs	r1, #4
 801ec5a:	6860      	ldr	r0, [r4, #4]
 801ec5c:	f7ff ff82 	bl	801eb64 <std>
 801ec60:	68a0      	ldr	r0, [r4, #8]
 801ec62:	2201      	movs	r2, #1
 801ec64:	2109      	movs	r1, #9
 801ec66:	f7ff ff7d 	bl	801eb64 <std>
 801ec6a:	68e0      	ldr	r0, [r4, #12]
 801ec6c:	2202      	movs	r2, #2
 801ec6e:	2112      	movs	r1, #18
 801ec70:	f7ff ff78 	bl	801eb64 <std>
 801ec74:	2301      	movs	r3, #1
 801ec76:	61a3      	str	r3, [r4, #24]
 801ec78:	e7d2      	b.n	801ec20 <__sinit+0xc>
 801ec7a:	bf00      	nop
 801ec7c:	0802a27c 	.word	0x0802a27c
 801ec80:	0801ebad 	.word	0x0801ebad

0801ec84 <__sfp>:
 801ec84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec86:	4607      	mov	r7, r0
 801ec88:	f7ff ffac 	bl	801ebe4 <__sfp_lock_acquire>
 801ec8c:	4b1e      	ldr	r3, [pc, #120]	; (801ed08 <__sfp+0x84>)
 801ec8e:	681e      	ldr	r6, [r3, #0]
 801ec90:	69b3      	ldr	r3, [r6, #24]
 801ec92:	b913      	cbnz	r3, 801ec9a <__sfp+0x16>
 801ec94:	4630      	mov	r0, r6
 801ec96:	f7ff ffbd 	bl	801ec14 <__sinit>
 801ec9a:	3648      	adds	r6, #72	; 0x48
 801ec9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801eca0:	3b01      	subs	r3, #1
 801eca2:	d503      	bpl.n	801ecac <__sfp+0x28>
 801eca4:	6833      	ldr	r3, [r6, #0]
 801eca6:	b30b      	cbz	r3, 801ecec <__sfp+0x68>
 801eca8:	6836      	ldr	r6, [r6, #0]
 801ecaa:	e7f7      	b.n	801ec9c <__sfp+0x18>
 801ecac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ecb0:	b9d5      	cbnz	r5, 801ece8 <__sfp+0x64>
 801ecb2:	4b16      	ldr	r3, [pc, #88]	; (801ed0c <__sfp+0x88>)
 801ecb4:	60e3      	str	r3, [r4, #12]
 801ecb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ecba:	6665      	str	r5, [r4, #100]	; 0x64
 801ecbc:	f000 f847 	bl	801ed4e <__retarget_lock_init_recursive>
 801ecc0:	f7ff ff96 	bl	801ebf0 <__sfp_lock_release>
 801ecc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ecc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801eccc:	6025      	str	r5, [r4, #0]
 801ecce:	61a5      	str	r5, [r4, #24]
 801ecd0:	2208      	movs	r2, #8
 801ecd2:	4629      	mov	r1, r5
 801ecd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ecd8:	f7ff fac4 	bl	801e264 <memset>
 801ecdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ece0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ece4:	4620      	mov	r0, r4
 801ece6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ece8:	3468      	adds	r4, #104	; 0x68
 801ecea:	e7d9      	b.n	801eca0 <__sfp+0x1c>
 801ecec:	2104      	movs	r1, #4
 801ecee:	4638      	mov	r0, r7
 801ecf0:	f7ff ff62 	bl	801ebb8 <__sfmoreglue>
 801ecf4:	4604      	mov	r4, r0
 801ecf6:	6030      	str	r0, [r6, #0]
 801ecf8:	2800      	cmp	r0, #0
 801ecfa:	d1d5      	bne.n	801eca8 <__sfp+0x24>
 801ecfc:	f7ff ff78 	bl	801ebf0 <__sfp_lock_release>
 801ed00:	230c      	movs	r3, #12
 801ed02:	603b      	str	r3, [r7, #0]
 801ed04:	e7ee      	b.n	801ece4 <__sfp+0x60>
 801ed06:	bf00      	nop
 801ed08:	0802a27c 	.word	0x0802a27c
 801ed0c:	ffff0001 	.word	0xffff0001

0801ed10 <_fwalk_reent>:
 801ed10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ed14:	4606      	mov	r6, r0
 801ed16:	4688      	mov	r8, r1
 801ed18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ed1c:	2700      	movs	r7, #0
 801ed1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ed22:	f1b9 0901 	subs.w	r9, r9, #1
 801ed26:	d505      	bpl.n	801ed34 <_fwalk_reent+0x24>
 801ed28:	6824      	ldr	r4, [r4, #0]
 801ed2a:	2c00      	cmp	r4, #0
 801ed2c:	d1f7      	bne.n	801ed1e <_fwalk_reent+0xe>
 801ed2e:	4638      	mov	r0, r7
 801ed30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ed34:	89ab      	ldrh	r3, [r5, #12]
 801ed36:	2b01      	cmp	r3, #1
 801ed38:	d907      	bls.n	801ed4a <_fwalk_reent+0x3a>
 801ed3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ed3e:	3301      	adds	r3, #1
 801ed40:	d003      	beq.n	801ed4a <_fwalk_reent+0x3a>
 801ed42:	4629      	mov	r1, r5
 801ed44:	4630      	mov	r0, r6
 801ed46:	47c0      	blx	r8
 801ed48:	4307      	orrs	r7, r0
 801ed4a:	3568      	adds	r5, #104	; 0x68
 801ed4c:	e7e9      	b.n	801ed22 <_fwalk_reent+0x12>

0801ed4e <__retarget_lock_init_recursive>:
 801ed4e:	4770      	bx	lr

0801ed50 <__retarget_lock_acquire_recursive>:
 801ed50:	4770      	bx	lr

0801ed52 <__retarget_lock_release_recursive>:
 801ed52:	4770      	bx	lr

0801ed54 <__swhatbuf_r>:
 801ed54:	b570      	push	{r4, r5, r6, lr}
 801ed56:	460e      	mov	r6, r1
 801ed58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ed5c:	2900      	cmp	r1, #0
 801ed5e:	b096      	sub	sp, #88	; 0x58
 801ed60:	4614      	mov	r4, r2
 801ed62:	461d      	mov	r5, r3
 801ed64:	da08      	bge.n	801ed78 <__swhatbuf_r+0x24>
 801ed66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ed6a:	2200      	movs	r2, #0
 801ed6c:	602a      	str	r2, [r5, #0]
 801ed6e:	061a      	lsls	r2, r3, #24
 801ed70:	d410      	bmi.n	801ed94 <__swhatbuf_r+0x40>
 801ed72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ed76:	e00e      	b.n	801ed96 <__swhatbuf_r+0x42>
 801ed78:	466a      	mov	r2, sp
 801ed7a:	f000 f9eb 	bl	801f154 <_fstat_r>
 801ed7e:	2800      	cmp	r0, #0
 801ed80:	dbf1      	blt.n	801ed66 <__swhatbuf_r+0x12>
 801ed82:	9a01      	ldr	r2, [sp, #4]
 801ed84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ed88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ed8c:	425a      	negs	r2, r3
 801ed8e:	415a      	adcs	r2, r3
 801ed90:	602a      	str	r2, [r5, #0]
 801ed92:	e7ee      	b.n	801ed72 <__swhatbuf_r+0x1e>
 801ed94:	2340      	movs	r3, #64	; 0x40
 801ed96:	2000      	movs	r0, #0
 801ed98:	6023      	str	r3, [r4, #0]
 801ed9a:	b016      	add	sp, #88	; 0x58
 801ed9c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801eda0 <__smakebuf_r>:
 801eda0:	898b      	ldrh	r3, [r1, #12]
 801eda2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801eda4:	079d      	lsls	r5, r3, #30
 801eda6:	4606      	mov	r6, r0
 801eda8:	460c      	mov	r4, r1
 801edaa:	d507      	bpl.n	801edbc <__smakebuf_r+0x1c>
 801edac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801edb0:	6023      	str	r3, [r4, #0]
 801edb2:	6123      	str	r3, [r4, #16]
 801edb4:	2301      	movs	r3, #1
 801edb6:	6163      	str	r3, [r4, #20]
 801edb8:	b002      	add	sp, #8
 801edba:	bd70      	pop	{r4, r5, r6, pc}
 801edbc:	ab01      	add	r3, sp, #4
 801edbe:	466a      	mov	r2, sp
 801edc0:	f7ff ffc8 	bl	801ed54 <__swhatbuf_r>
 801edc4:	9900      	ldr	r1, [sp, #0]
 801edc6:	4605      	mov	r5, r0
 801edc8:	4630      	mov	r0, r6
 801edca:	f000 f895 	bl	801eef8 <_malloc_r>
 801edce:	b948      	cbnz	r0, 801ede4 <__smakebuf_r+0x44>
 801edd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801edd4:	059a      	lsls	r2, r3, #22
 801edd6:	d4ef      	bmi.n	801edb8 <__smakebuf_r+0x18>
 801edd8:	f023 0303 	bic.w	r3, r3, #3
 801eddc:	f043 0302 	orr.w	r3, r3, #2
 801ede0:	81a3      	strh	r3, [r4, #12]
 801ede2:	e7e3      	b.n	801edac <__smakebuf_r+0xc>
 801ede4:	4b0d      	ldr	r3, [pc, #52]	; (801ee1c <__smakebuf_r+0x7c>)
 801ede6:	62b3      	str	r3, [r6, #40]	; 0x28
 801ede8:	89a3      	ldrh	r3, [r4, #12]
 801edea:	6020      	str	r0, [r4, #0]
 801edec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801edf0:	81a3      	strh	r3, [r4, #12]
 801edf2:	9b00      	ldr	r3, [sp, #0]
 801edf4:	6163      	str	r3, [r4, #20]
 801edf6:	9b01      	ldr	r3, [sp, #4]
 801edf8:	6120      	str	r0, [r4, #16]
 801edfa:	b15b      	cbz	r3, 801ee14 <__smakebuf_r+0x74>
 801edfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ee00:	4630      	mov	r0, r6
 801ee02:	f000 f9b9 	bl	801f178 <_isatty_r>
 801ee06:	b128      	cbz	r0, 801ee14 <__smakebuf_r+0x74>
 801ee08:	89a3      	ldrh	r3, [r4, #12]
 801ee0a:	f023 0303 	bic.w	r3, r3, #3
 801ee0e:	f043 0301 	orr.w	r3, r3, #1
 801ee12:	81a3      	strh	r3, [r4, #12]
 801ee14:	89a0      	ldrh	r0, [r4, #12]
 801ee16:	4305      	orrs	r5, r0
 801ee18:	81a5      	strh	r5, [r4, #12]
 801ee1a:	e7cd      	b.n	801edb8 <__smakebuf_r+0x18>
 801ee1c:	0801ebad 	.word	0x0801ebad

0801ee20 <_free_r>:
 801ee20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ee22:	2900      	cmp	r1, #0
 801ee24:	d044      	beq.n	801eeb0 <_free_r+0x90>
 801ee26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ee2a:	9001      	str	r0, [sp, #4]
 801ee2c:	2b00      	cmp	r3, #0
 801ee2e:	f1a1 0404 	sub.w	r4, r1, #4
 801ee32:	bfb8      	it	lt
 801ee34:	18e4      	addlt	r4, r4, r3
 801ee36:	f000 f9c1 	bl	801f1bc <__malloc_lock>
 801ee3a:	4a1e      	ldr	r2, [pc, #120]	; (801eeb4 <_free_r+0x94>)
 801ee3c:	9801      	ldr	r0, [sp, #4]
 801ee3e:	6813      	ldr	r3, [r2, #0]
 801ee40:	b933      	cbnz	r3, 801ee50 <_free_r+0x30>
 801ee42:	6063      	str	r3, [r4, #4]
 801ee44:	6014      	str	r4, [r2, #0]
 801ee46:	b003      	add	sp, #12
 801ee48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ee4c:	f000 b9bc 	b.w	801f1c8 <__malloc_unlock>
 801ee50:	42a3      	cmp	r3, r4
 801ee52:	d908      	bls.n	801ee66 <_free_r+0x46>
 801ee54:	6825      	ldr	r5, [r4, #0]
 801ee56:	1961      	adds	r1, r4, r5
 801ee58:	428b      	cmp	r3, r1
 801ee5a:	bf01      	itttt	eq
 801ee5c:	6819      	ldreq	r1, [r3, #0]
 801ee5e:	685b      	ldreq	r3, [r3, #4]
 801ee60:	1949      	addeq	r1, r1, r5
 801ee62:	6021      	streq	r1, [r4, #0]
 801ee64:	e7ed      	b.n	801ee42 <_free_r+0x22>
 801ee66:	461a      	mov	r2, r3
 801ee68:	685b      	ldr	r3, [r3, #4]
 801ee6a:	b10b      	cbz	r3, 801ee70 <_free_r+0x50>
 801ee6c:	42a3      	cmp	r3, r4
 801ee6e:	d9fa      	bls.n	801ee66 <_free_r+0x46>
 801ee70:	6811      	ldr	r1, [r2, #0]
 801ee72:	1855      	adds	r5, r2, r1
 801ee74:	42a5      	cmp	r5, r4
 801ee76:	d10b      	bne.n	801ee90 <_free_r+0x70>
 801ee78:	6824      	ldr	r4, [r4, #0]
 801ee7a:	4421      	add	r1, r4
 801ee7c:	1854      	adds	r4, r2, r1
 801ee7e:	42a3      	cmp	r3, r4
 801ee80:	6011      	str	r1, [r2, #0]
 801ee82:	d1e0      	bne.n	801ee46 <_free_r+0x26>
 801ee84:	681c      	ldr	r4, [r3, #0]
 801ee86:	685b      	ldr	r3, [r3, #4]
 801ee88:	6053      	str	r3, [r2, #4]
 801ee8a:	4421      	add	r1, r4
 801ee8c:	6011      	str	r1, [r2, #0]
 801ee8e:	e7da      	b.n	801ee46 <_free_r+0x26>
 801ee90:	d902      	bls.n	801ee98 <_free_r+0x78>
 801ee92:	230c      	movs	r3, #12
 801ee94:	6003      	str	r3, [r0, #0]
 801ee96:	e7d6      	b.n	801ee46 <_free_r+0x26>
 801ee98:	6825      	ldr	r5, [r4, #0]
 801ee9a:	1961      	adds	r1, r4, r5
 801ee9c:	428b      	cmp	r3, r1
 801ee9e:	bf04      	itt	eq
 801eea0:	6819      	ldreq	r1, [r3, #0]
 801eea2:	685b      	ldreq	r3, [r3, #4]
 801eea4:	6063      	str	r3, [r4, #4]
 801eea6:	bf04      	itt	eq
 801eea8:	1949      	addeq	r1, r1, r5
 801eeaa:	6021      	streq	r1, [r4, #0]
 801eeac:	6054      	str	r4, [r2, #4]
 801eeae:	e7ca      	b.n	801ee46 <_free_r+0x26>
 801eeb0:	b003      	add	sp, #12
 801eeb2:	bd30      	pop	{r4, r5, pc}
 801eeb4:	2000084c 	.word	0x2000084c

0801eeb8 <sbrk_aligned>:
 801eeb8:	b570      	push	{r4, r5, r6, lr}
 801eeba:	4e0e      	ldr	r6, [pc, #56]	; (801eef4 <sbrk_aligned+0x3c>)
 801eebc:	460c      	mov	r4, r1
 801eebe:	6831      	ldr	r1, [r6, #0]
 801eec0:	4605      	mov	r5, r0
 801eec2:	b911      	cbnz	r1, 801eeca <sbrk_aligned+0x12>
 801eec4:	f000 f88c 	bl	801efe0 <_sbrk_r>
 801eec8:	6030      	str	r0, [r6, #0]
 801eeca:	4621      	mov	r1, r4
 801eecc:	4628      	mov	r0, r5
 801eece:	f000 f887 	bl	801efe0 <_sbrk_r>
 801eed2:	1c43      	adds	r3, r0, #1
 801eed4:	d00a      	beq.n	801eeec <sbrk_aligned+0x34>
 801eed6:	1cc4      	adds	r4, r0, #3
 801eed8:	f024 0403 	bic.w	r4, r4, #3
 801eedc:	42a0      	cmp	r0, r4
 801eede:	d007      	beq.n	801eef0 <sbrk_aligned+0x38>
 801eee0:	1a21      	subs	r1, r4, r0
 801eee2:	4628      	mov	r0, r5
 801eee4:	f000 f87c 	bl	801efe0 <_sbrk_r>
 801eee8:	3001      	adds	r0, #1
 801eeea:	d101      	bne.n	801eef0 <sbrk_aligned+0x38>
 801eeec:	f04f 34ff 	mov.w	r4, #4294967295
 801eef0:	4620      	mov	r0, r4
 801eef2:	bd70      	pop	{r4, r5, r6, pc}
 801eef4:	20000850 	.word	0x20000850

0801eef8 <_malloc_r>:
 801eef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eefc:	1ccd      	adds	r5, r1, #3
 801eefe:	f025 0503 	bic.w	r5, r5, #3
 801ef02:	3508      	adds	r5, #8
 801ef04:	2d0c      	cmp	r5, #12
 801ef06:	bf38      	it	cc
 801ef08:	250c      	movcc	r5, #12
 801ef0a:	2d00      	cmp	r5, #0
 801ef0c:	4607      	mov	r7, r0
 801ef0e:	db01      	blt.n	801ef14 <_malloc_r+0x1c>
 801ef10:	42a9      	cmp	r1, r5
 801ef12:	d905      	bls.n	801ef20 <_malloc_r+0x28>
 801ef14:	230c      	movs	r3, #12
 801ef16:	603b      	str	r3, [r7, #0]
 801ef18:	2600      	movs	r6, #0
 801ef1a:	4630      	mov	r0, r6
 801ef1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef20:	4e2e      	ldr	r6, [pc, #184]	; (801efdc <_malloc_r+0xe4>)
 801ef22:	f000 f94b 	bl	801f1bc <__malloc_lock>
 801ef26:	6833      	ldr	r3, [r6, #0]
 801ef28:	461c      	mov	r4, r3
 801ef2a:	bb34      	cbnz	r4, 801ef7a <_malloc_r+0x82>
 801ef2c:	4629      	mov	r1, r5
 801ef2e:	4638      	mov	r0, r7
 801ef30:	f7ff ffc2 	bl	801eeb8 <sbrk_aligned>
 801ef34:	1c43      	adds	r3, r0, #1
 801ef36:	4604      	mov	r4, r0
 801ef38:	d14d      	bne.n	801efd6 <_malloc_r+0xde>
 801ef3a:	6834      	ldr	r4, [r6, #0]
 801ef3c:	4626      	mov	r6, r4
 801ef3e:	2e00      	cmp	r6, #0
 801ef40:	d140      	bne.n	801efc4 <_malloc_r+0xcc>
 801ef42:	6823      	ldr	r3, [r4, #0]
 801ef44:	4631      	mov	r1, r6
 801ef46:	4638      	mov	r0, r7
 801ef48:	eb04 0803 	add.w	r8, r4, r3
 801ef4c:	f000 f848 	bl	801efe0 <_sbrk_r>
 801ef50:	4580      	cmp	r8, r0
 801ef52:	d13a      	bne.n	801efca <_malloc_r+0xd2>
 801ef54:	6821      	ldr	r1, [r4, #0]
 801ef56:	3503      	adds	r5, #3
 801ef58:	1a6d      	subs	r5, r5, r1
 801ef5a:	f025 0503 	bic.w	r5, r5, #3
 801ef5e:	3508      	adds	r5, #8
 801ef60:	2d0c      	cmp	r5, #12
 801ef62:	bf38      	it	cc
 801ef64:	250c      	movcc	r5, #12
 801ef66:	4629      	mov	r1, r5
 801ef68:	4638      	mov	r0, r7
 801ef6a:	f7ff ffa5 	bl	801eeb8 <sbrk_aligned>
 801ef6e:	3001      	adds	r0, #1
 801ef70:	d02b      	beq.n	801efca <_malloc_r+0xd2>
 801ef72:	6823      	ldr	r3, [r4, #0]
 801ef74:	442b      	add	r3, r5
 801ef76:	6023      	str	r3, [r4, #0]
 801ef78:	e00e      	b.n	801ef98 <_malloc_r+0xa0>
 801ef7a:	6822      	ldr	r2, [r4, #0]
 801ef7c:	1b52      	subs	r2, r2, r5
 801ef7e:	d41e      	bmi.n	801efbe <_malloc_r+0xc6>
 801ef80:	2a0b      	cmp	r2, #11
 801ef82:	d916      	bls.n	801efb2 <_malloc_r+0xba>
 801ef84:	1961      	adds	r1, r4, r5
 801ef86:	42a3      	cmp	r3, r4
 801ef88:	6025      	str	r5, [r4, #0]
 801ef8a:	bf18      	it	ne
 801ef8c:	6059      	strne	r1, [r3, #4]
 801ef8e:	6863      	ldr	r3, [r4, #4]
 801ef90:	bf08      	it	eq
 801ef92:	6031      	streq	r1, [r6, #0]
 801ef94:	5162      	str	r2, [r4, r5]
 801ef96:	604b      	str	r3, [r1, #4]
 801ef98:	4638      	mov	r0, r7
 801ef9a:	f104 060b 	add.w	r6, r4, #11
 801ef9e:	f000 f913 	bl	801f1c8 <__malloc_unlock>
 801efa2:	f026 0607 	bic.w	r6, r6, #7
 801efa6:	1d23      	adds	r3, r4, #4
 801efa8:	1af2      	subs	r2, r6, r3
 801efaa:	d0b6      	beq.n	801ef1a <_malloc_r+0x22>
 801efac:	1b9b      	subs	r3, r3, r6
 801efae:	50a3      	str	r3, [r4, r2]
 801efb0:	e7b3      	b.n	801ef1a <_malloc_r+0x22>
 801efb2:	6862      	ldr	r2, [r4, #4]
 801efb4:	42a3      	cmp	r3, r4
 801efb6:	bf0c      	ite	eq
 801efb8:	6032      	streq	r2, [r6, #0]
 801efba:	605a      	strne	r2, [r3, #4]
 801efbc:	e7ec      	b.n	801ef98 <_malloc_r+0xa0>
 801efbe:	4623      	mov	r3, r4
 801efc0:	6864      	ldr	r4, [r4, #4]
 801efc2:	e7b2      	b.n	801ef2a <_malloc_r+0x32>
 801efc4:	4634      	mov	r4, r6
 801efc6:	6876      	ldr	r6, [r6, #4]
 801efc8:	e7b9      	b.n	801ef3e <_malloc_r+0x46>
 801efca:	230c      	movs	r3, #12
 801efcc:	603b      	str	r3, [r7, #0]
 801efce:	4638      	mov	r0, r7
 801efd0:	f000 f8fa 	bl	801f1c8 <__malloc_unlock>
 801efd4:	e7a1      	b.n	801ef1a <_malloc_r+0x22>
 801efd6:	6025      	str	r5, [r4, #0]
 801efd8:	e7de      	b.n	801ef98 <_malloc_r+0xa0>
 801efda:	bf00      	nop
 801efdc:	2000084c 	.word	0x2000084c

0801efe0 <_sbrk_r>:
 801efe0:	b538      	push	{r3, r4, r5, lr}
 801efe2:	4d06      	ldr	r5, [pc, #24]	; (801effc <_sbrk_r+0x1c>)
 801efe4:	2300      	movs	r3, #0
 801efe6:	4604      	mov	r4, r0
 801efe8:	4608      	mov	r0, r1
 801efea:	602b      	str	r3, [r5, #0]
 801efec:	f7f7 fc10 	bl	8016810 <_sbrk>
 801eff0:	1c43      	adds	r3, r0, #1
 801eff2:	d102      	bne.n	801effa <_sbrk_r+0x1a>
 801eff4:	682b      	ldr	r3, [r5, #0]
 801eff6:	b103      	cbz	r3, 801effa <_sbrk_r+0x1a>
 801eff8:	6023      	str	r3, [r4, #0]
 801effa:	bd38      	pop	{r3, r4, r5, pc}
 801effc:	20000854 	.word	0x20000854

0801f000 <_raise_r>:
 801f000:	291f      	cmp	r1, #31
 801f002:	b538      	push	{r3, r4, r5, lr}
 801f004:	4604      	mov	r4, r0
 801f006:	460d      	mov	r5, r1
 801f008:	d904      	bls.n	801f014 <_raise_r+0x14>
 801f00a:	2316      	movs	r3, #22
 801f00c:	6003      	str	r3, [r0, #0]
 801f00e:	f04f 30ff 	mov.w	r0, #4294967295
 801f012:	bd38      	pop	{r3, r4, r5, pc}
 801f014:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f016:	b112      	cbz	r2, 801f01e <_raise_r+0x1e>
 801f018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f01c:	b94b      	cbnz	r3, 801f032 <_raise_r+0x32>
 801f01e:	4620      	mov	r0, r4
 801f020:	f000 f830 	bl	801f084 <_getpid_r>
 801f024:	462a      	mov	r2, r5
 801f026:	4601      	mov	r1, r0
 801f028:	4620      	mov	r0, r4
 801f02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f02e:	f000 b817 	b.w	801f060 <_kill_r>
 801f032:	2b01      	cmp	r3, #1
 801f034:	d00a      	beq.n	801f04c <_raise_r+0x4c>
 801f036:	1c59      	adds	r1, r3, #1
 801f038:	d103      	bne.n	801f042 <_raise_r+0x42>
 801f03a:	2316      	movs	r3, #22
 801f03c:	6003      	str	r3, [r0, #0]
 801f03e:	2001      	movs	r0, #1
 801f040:	e7e7      	b.n	801f012 <_raise_r+0x12>
 801f042:	2400      	movs	r4, #0
 801f044:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f048:	4628      	mov	r0, r5
 801f04a:	4798      	blx	r3
 801f04c:	2000      	movs	r0, #0
 801f04e:	e7e0      	b.n	801f012 <_raise_r+0x12>

0801f050 <raise>:
 801f050:	4b02      	ldr	r3, [pc, #8]	; (801f05c <raise+0xc>)
 801f052:	4601      	mov	r1, r0
 801f054:	6818      	ldr	r0, [r3, #0]
 801f056:	f7ff bfd3 	b.w	801f000 <_raise_r>
 801f05a:	bf00      	nop
 801f05c:	2000023c 	.word	0x2000023c

0801f060 <_kill_r>:
 801f060:	b538      	push	{r3, r4, r5, lr}
 801f062:	4d07      	ldr	r5, [pc, #28]	; (801f080 <_kill_r+0x20>)
 801f064:	2300      	movs	r3, #0
 801f066:	4604      	mov	r4, r0
 801f068:	4608      	mov	r0, r1
 801f06a:	4611      	mov	r1, r2
 801f06c:	602b      	str	r3, [r5, #0]
 801f06e:	f7f7 fb47 	bl	8016700 <_kill>
 801f072:	1c43      	adds	r3, r0, #1
 801f074:	d102      	bne.n	801f07c <_kill_r+0x1c>
 801f076:	682b      	ldr	r3, [r5, #0]
 801f078:	b103      	cbz	r3, 801f07c <_kill_r+0x1c>
 801f07a:	6023      	str	r3, [r4, #0]
 801f07c:	bd38      	pop	{r3, r4, r5, pc}
 801f07e:	bf00      	nop
 801f080:	20000854 	.word	0x20000854

0801f084 <_getpid_r>:
 801f084:	f7f7 bb34 	b.w	80166f0 <_getpid>

0801f088 <__sread>:
 801f088:	b510      	push	{r4, lr}
 801f08a:	460c      	mov	r4, r1
 801f08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f090:	f000 f8a0 	bl	801f1d4 <_read_r>
 801f094:	2800      	cmp	r0, #0
 801f096:	bfab      	itete	ge
 801f098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f09a:	89a3      	ldrhlt	r3, [r4, #12]
 801f09c:	181b      	addge	r3, r3, r0
 801f09e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f0a2:	bfac      	ite	ge
 801f0a4:	6563      	strge	r3, [r4, #84]	; 0x54
 801f0a6:	81a3      	strhlt	r3, [r4, #12]
 801f0a8:	bd10      	pop	{r4, pc}

0801f0aa <__swrite>:
 801f0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f0ae:	461f      	mov	r7, r3
 801f0b0:	898b      	ldrh	r3, [r1, #12]
 801f0b2:	05db      	lsls	r3, r3, #23
 801f0b4:	4605      	mov	r5, r0
 801f0b6:	460c      	mov	r4, r1
 801f0b8:	4616      	mov	r6, r2
 801f0ba:	d505      	bpl.n	801f0c8 <__swrite+0x1e>
 801f0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f0c0:	2302      	movs	r3, #2
 801f0c2:	2200      	movs	r2, #0
 801f0c4:	f000 f868 	bl	801f198 <_lseek_r>
 801f0c8:	89a3      	ldrh	r3, [r4, #12]
 801f0ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f0ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f0d2:	81a3      	strh	r3, [r4, #12]
 801f0d4:	4632      	mov	r2, r6
 801f0d6:	463b      	mov	r3, r7
 801f0d8:	4628      	mov	r0, r5
 801f0da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f0de:	f000 b817 	b.w	801f110 <_write_r>

0801f0e2 <__sseek>:
 801f0e2:	b510      	push	{r4, lr}
 801f0e4:	460c      	mov	r4, r1
 801f0e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f0ea:	f000 f855 	bl	801f198 <_lseek_r>
 801f0ee:	1c43      	adds	r3, r0, #1
 801f0f0:	89a3      	ldrh	r3, [r4, #12]
 801f0f2:	bf15      	itete	ne
 801f0f4:	6560      	strne	r0, [r4, #84]	; 0x54
 801f0f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f0fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f0fe:	81a3      	strheq	r3, [r4, #12]
 801f100:	bf18      	it	ne
 801f102:	81a3      	strhne	r3, [r4, #12]
 801f104:	bd10      	pop	{r4, pc}

0801f106 <__sclose>:
 801f106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f10a:	f000 b813 	b.w	801f134 <_close_r>
	...

0801f110 <_write_r>:
 801f110:	b538      	push	{r3, r4, r5, lr}
 801f112:	4d07      	ldr	r5, [pc, #28]	; (801f130 <_write_r+0x20>)
 801f114:	4604      	mov	r4, r0
 801f116:	4608      	mov	r0, r1
 801f118:	4611      	mov	r1, r2
 801f11a:	2200      	movs	r2, #0
 801f11c:	602a      	str	r2, [r5, #0]
 801f11e:	461a      	mov	r2, r3
 801f120:	f7f7 fb25 	bl	801676e <_write>
 801f124:	1c43      	adds	r3, r0, #1
 801f126:	d102      	bne.n	801f12e <_write_r+0x1e>
 801f128:	682b      	ldr	r3, [r5, #0]
 801f12a:	b103      	cbz	r3, 801f12e <_write_r+0x1e>
 801f12c:	6023      	str	r3, [r4, #0]
 801f12e:	bd38      	pop	{r3, r4, r5, pc}
 801f130:	20000854 	.word	0x20000854

0801f134 <_close_r>:
 801f134:	b538      	push	{r3, r4, r5, lr}
 801f136:	4d06      	ldr	r5, [pc, #24]	; (801f150 <_close_r+0x1c>)
 801f138:	2300      	movs	r3, #0
 801f13a:	4604      	mov	r4, r0
 801f13c:	4608      	mov	r0, r1
 801f13e:	602b      	str	r3, [r5, #0]
 801f140:	f7f7 fb31 	bl	80167a6 <_close>
 801f144:	1c43      	adds	r3, r0, #1
 801f146:	d102      	bne.n	801f14e <_close_r+0x1a>
 801f148:	682b      	ldr	r3, [r5, #0]
 801f14a:	b103      	cbz	r3, 801f14e <_close_r+0x1a>
 801f14c:	6023      	str	r3, [r4, #0]
 801f14e:	bd38      	pop	{r3, r4, r5, pc}
 801f150:	20000854 	.word	0x20000854

0801f154 <_fstat_r>:
 801f154:	b538      	push	{r3, r4, r5, lr}
 801f156:	4d07      	ldr	r5, [pc, #28]	; (801f174 <_fstat_r+0x20>)
 801f158:	2300      	movs	r3, #0
 801f15a:	4604      	mov	r4, r0
 801f15c:	4608      	mov	r0, r1
 801f15e:	4611      	mov	r1, r2
 801f160:	602b      	str	r3, [r5, #0]
 801f162:	f7f7 fb2c 	bl	80167be <_fstat>
 801f166:	1c43      	adds	r3, r0, #1
 801f168:	d102      	bne.n	801f170 <_fstat_r+0x1c>
 801f16a:	682b      	ldr	r3, [r5, #0]
 801f16c:	b103      	cbz	r3, 801f170 <_fstat_r+0x1c>
 801f16e:	6023      	str	r3, [r4, #0]
 801f170:	bd38      	pop	{r3, r4, r5, pc}
 801f172:	bf00      	nop
 801f174:	20000854 	.word	0x20000854

0801f178 <_isatty_r>:
 801f178:	b538      	push	{r3, r4, r5, lr}
 801f17a:	4d06      	ldr	r5, [pc, #24]	; (801f194 <_isatty_r+0x1c>)
 801f17c:	2300      	movs	r3, #0
 801f17e:	4604      	mov	r4, r0
 801f180:	4608      	mov	r0, r1
 801f182:	602b      	str	r3, [r5, #0]
 801f184:	f7f7 fb2b 	bl	80167de <_isatty>
 801f188:	1c43      	adds	r3, r0, #1
 801f18a:	d102      	bne.n	801f192 <_isatty_r+0x1a>
 801f18c:	682b      	ldr	r3, [r5, #0]
 801f18e:	b103      	cbz	r3, 801f192 <_isatty_r+0x1a>
 801f190:	6023      	str	r3, [r4, #0]
 801f192:	bd38      	pop	{r3, r4, r5, pc}
 801f194:	20000854 	.word	0x20000854

0801f198 <_lseek_r>:
 801f198:	b538      	push	{r3, r4, r5, lr}
 801f19a:	4d07      	ldr	r5, [pc, #28]	; (801f1b8 <_lseek_r+0x20>)
 801f19c:	4604      	mov	r4, r0
 801f19e:	4608      	mov	r0, r1
 801f1a0:	4611      	mov	r1, r2
 801f1a2:	2200      	movs	r2, #0
 801f1a4:	602a      	str	r2, [r5, #0]
 801f1a6:	461a      	mov	r2, r3
 801f1a8:	f7f7 fb24 	bl	80167f4 <_lseek>
 801f1ac:	1c43      	adds	r3, r0, #1
 801f1ae:	d102      	bne.n	801f1b6 <_lseek_r+0x1e>
 801f1b0:	682b      	ldr	r3, [r5, #0]
 801f1b2:	b103      	cbz	r3, 801f1b6 <_lseek_r+0x1e>
 801f1b4:	6023      	str	r3, [r4, #0]
 801f1b6:	bd38      	pop	{r3, r4, r5, pc}
 801f1b8:	20000854 	.word	0x20000854

0801f1bc <__malloc_lock>:
 801f1bc:	4801      	ldr	r0, [pc, #4]	; (801f1c4 <__malloc_lock+0x8>)
 801f1be:	f7ff bdc7 	b.w	801ed50 <__retarget_lock_acquire_recursive>
 801f1c2:	bf00      	nop
 801f1c4:	20000848 	.word	0x20000848

0801f1c8 <__malloc_unlock>:
 801f1c8:	4801      	ldr	r0, [pc, #4]	; (801f1d0 <__malloc_unlock+0x8>)
 801f1ca:	f7ff bdc2 	b.w	801ed52 <__retarget_lock_release_recursive>
 801f1ce:	bf00      	nop
 801f1d0:	20000848 	.word	0x20000848

0801f1d4 <_read_r>:
 801f1d4:	b538      	push	{r3, r4, r5, lr}
 801f1d6:	4d07      	ldr	r5, [pc, #28]	; (801f1f4 <_read_r+0x20>)
 801f1d8:	4604      	mov	r4, r0
 801f1da:	4608      	mov	r0, r1
 801f1dc:	4611      	mov	r1, r2
 801f1de:	2200      	movs	r2, #0
 801f1e0:	602a      	str	r2, [r5, #0]
 801f1e2:	461a      	mov	r2, r3
 801f1e4:	f7f7 faa6 	bl	8016734 <_read>
 801f1e8:	1c43      	adds	r3, r0, #1
 801f1ea:	d102      	bne.n	801f1f2 <_read_r+0x1e>
 801f1ec:	682b      	ldr	r3, [r5, #0]
 801f1ee:	b103      	cbz	r3, 801f1f2 <_read_r+0x1e>
 801f1f0:	6023      	str	r3, [r4, #0]
 801f1f2:	bd38      	pop	{r3, r4, r5, pc}
 801f1f4:	20000854 	.word	0x20000854

0801f1f8 <_init>:
 801f1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1fa:	bf00      	nop
 801f1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f1fe:	bc08      	pop	{r3}
 801f200:	469e      	mov	lr, r3
 801f202:	4770      	bx	lr

0801f204 <_fini>:
 801f204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f206:	bf00      	nop
 801f208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f20a:	bc08      	pop	{r3}
 801f20c:	469e      	mov	lr, r3
 801f20e:	4770      	bx	lr
